[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module Net =
  struct
    open Node_stream
    open Node_dns
    module LookupFunction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
        and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
        let (apply :
          t ->
            hostname:string ->
              options:Dns.LookupOneOptions.t ->
                callback:(err:ErrnoException.t or_null ->
                            address:string -> family:int -> unit)
                  -> unit)
          =
          fun (x12 : t) ->
            fun ~hostname:(x5 : string) ->
              fun ~options:(x6 : Dns.LookupOneOptions.t) ->
                fun
                  ~callback:(x7 :
                              err:ErrnoException.t or_null ->
                                address:string -> family:int -> unit)
                  ->
                  ignore
                    (Ojs.apply (t_to_js x12)
                       [|(Ojs.string_to_js x5);(Dns.LookupOneOptions.t_to_js
                                                  x6);(Ojs.fun_to_js 3
                                                         (fun (x8 : Ojs.t) ->
                                                            fun (x10 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x11 : Ojs.t)
                                                                ->
                                                                x7
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x8)
                                                                  ~address:(
                                                                  Ojs.string_of_js
                                                                    x10)
                                                                  ~family:(
                                                                  Ojs.int_of_js
                                                                    x11)))|])
      end
    module AddressInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x14 : Ojs.t) -> x14
        and t_to_js : t -> Ojs.t = fun (x13 : Ojs.t) -> x13
        let (get_address : t -> string) =
          fun (x15 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15) "address")
        let (set_address : t -> string -> unit) =
          fun (x16 : t) ->
            fun (x17 : string) ->
              Ojs.set_prop_ascii (t_to_js x16) "address"
                (Ojs.string_to_js x17)
        let (get_family : t -> string) =
          fun (x18 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x18) "family")
        let (set_family : t -> string -> unit) =
          fun (x19 : t) ->
            fun (x20 : string) ->
              Ojs.set_prop_ascii (t_to_js x19) "family"
                (Ojs.string_to_js x20)
        let (get_port : t -> int) =
          fun (x21 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x21) "port")
        let (set_port : t -> int -> unit) =
          fun (x22 : t) ->
            fun (x23 : int) ->
              Ojs.set_prop_ascii (t_to_js x22) "port" (Ojs.int_to_js x23)
      end
    module SocketConstructorOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x25 : Ojs.t) -> x25
        and t_to_js : t -> Ojs.t = fun (x24 : Ojs.t) -> x24
        let (get_fd : t -> int) =
          fun (x26 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x26) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x27 : t) ->
            fun (x28 : int) ->
              Ojs.set_prop_ascii (t_to_js x27) "fd" (Ojs.int_to_js x28)
        let (get_allow_half_open : t -> bool) =
          fun (x29 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x29) "allowHalfOpen")
        let (set_allow_half_open : t -> bool -> unit) =
          fun (x30 : t) ->
            fun (x31 : bool) ->
              Ojs.set_prop_ascii (t_to_js x30) "allowHalfOpen"
                (Ojs.bool_to_js x31)
        let (get_readable : t -> bool) =
          fun (x32 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x32) "readable")
        let (set_readable : t -> bool -> unit) =
          fun (x33 : t) ->
            fun (x34 : bool) ->
              Ojs.set_prop_ascii (t_to_js x33) "readable"
                (Ojs.bool_to_js x34)
        let (get_writable : t -> bool) =
          fun (x35 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x35) "writable")
        let (set_writable : t -> bool -> unit) =
          fun (x36 : t) ->
            fun (x37 : bool) ->
              Ojs.set_prop_ascii (t_to_js x36) "writable"
                (Ojs.bool_to_js x37)
      end
    module OnReadOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
        and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
        let (get_buffer : t -> (Uint8Array.t, unit -> Uint8Array.t) union2) =
          fun (x40 : t) ->
            union2_of_js Uint8Array.t_of_js
              (fun (x42 : Ojs.t) ->
                 fun () -> Uint8Array.t_of_js (Ojs.apply x42 [||]))
              (Ojs.get_prop_ascii (t_to_js x40) "buffer")
        let (set_buffer :
          t -> (Uint8Array.t, unit -> Uint8Array.t) union2 -> unit) =
          fun (x43 : t) ->
            fun (x44 : (Uint8Array.t, unit -> Uint8Array.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x43) "buffer"
                (union2_to_js Uint8Array.t_to_js
                   (fun (x46 : unit -> Uint8Array.t) ->
                      Ojs.fun_to_js 1 (fun _ -> Uint8Array.t_to_js (x46 ())))
                   x44)
        let (callback : t -> bytes_written:int -> buf:Uint8Array.t -> bool) =
          fun (x49 : t) ->
            fun ~bytes_written:(x47 : int) ->
              fun ~buf:(x48 : Uint8Array.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x49) "callback"
                     [|(Ojs.int_to_js x47);(Uint8Array.t_to_js x48)|])
      end
    module ConnectOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
        and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
        let (get_onread : t -> OnReadOpts.t) =
          fun (x52 : t) ->
            OnReadOpts.t_of_js (Ojs.get_prop_ascii (t_to_js x52) "onread")
        let (set_onread : t -> OnReadOpts.t -> unit) =
          fun (x53 : t) ->
            fun (x54 : OnReadOpts.t) ->
              Ojs.set_prop_ascii (t_to_js x53) "onread"
                (OnReadOpts.t_to_js x54)
      end
    module TcpSocketConnectOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x56 : Ojs.t) -> x56
        and t_to_js : t -> Ojs.t = fun (x55 : Ojs.t) -> x55
        let (get_port : t -> int) =
          fun (x57 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x57) "port")
        let (set_port : t -> int -> unit) =
          fun (x58 : t) ->
            fun (x59 : int) ->
              Ojs.set_prop_ascii (t_to_js x58) "port" (Ojs.int_to_js x59)
        let (get_host : t -> string) =
          fun (x60 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x60) "host")
        let (set_host : t -> string -> unit) =
          fun (x61 : t) ->
            fun (x62 : string) ->
              Ojs.set_prop_ascii (t_to_js x61) "host" (Ojs.string_to_js x62)
        let (get_local_address : t -> string) =
          fun (x63 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x63) "localAddress")
        let (set_local_address : t -> string -> unit) =
          fun (x64 : t) ->
            fun (x65 : string) ->
              Ojs.set_prop_ascii (t_to_js x64) "localAddress"
                (Ojs.string_to_js x65)
        let (get_local_port : t -> int) =
          fun (x66 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x66) "localPort")
        let (set_local_port : t -> int -> unit) =
          fun (x67 : t) ->
            fun (x68 : int) ->
              Ojs.set_prop_ascii (t_to_js x67) "localPort"
                (Ojs.int_to_js x68)
        let (get_hints : t -> int) =
          fun (x69 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x69) "hints")
        let (set_hints : t -> int -> unit) =
          fun (x70 : t) ->
            fun (x71 : int) ->
              Ojs.set_prop_ascii (t_to_js x70) "hints" (Ojs.int_to_js x71)
        let (get_family : t -> int) =
          fun (x72 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "family")
        let (set_family : t -> int -> unit) =
          fun (x73 : t) ->
            fun (x74 : int) ->
              Ojs.set_prop_ascii (t_to_js x73) "family" (Ojs.int_to_js x74)
        let (get_lookup : t -> LookupFunction.t) =
          fun (x75 : t) ->
            LookupFunction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x75) "lookup")
        let (set_lookup : t -> LookupFunction.t -> unit) =
          fun (x76 : t) ->
            fun (x77 : LookupFunction.t) ->
              Ojs.set_prop_ascii (t_to_js x76) "lookup"
                (LookupFunction.t_to_js x77)
        let (cast : t -> ConnectOpts.t) =
          fun (x78 : t) -> ConnectOpts.t_of_js (t_to_js x78)
      end
    module IpcSocketConnectOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x80 : Ojs.t) -> x80
        and t_to_js : t -> Ojs.t = fun (x79 : Ojs.t) -> x79
        let (get_path : t -> string) =
          fun (x81 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x81) "path")
        let (set_path : t -> string -> unit) =
          fun (x82 : t) ->
            fun (x83 : string) ->
              Ojs.set_prop_ascii (t_to_js x82) "path" (Ojs.string_to_js x83)
        let (cast : t -> ConnectOpts.t) =
          fun (x84 : t) -> ConnectOpts.t_of_js (t_to_js x84)
      end
    module SocketConnectOpts =
      struct
        type t = (IpcSocketConnectOpts.t, TcpSocketConnectOpts.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x88 : Ojs.t) ->
            union2_of_js IpcSocketConnectOpts.t_of_js
              TcpSocketConnectOpts.t_of_js x88
        and t_to_js : t -> Ojs.t =
          fun (x85 : (IpcSocketConnectOpts.t, TcpSocketConnectOpts.t) union2)
            ->
            union2_to_js IpcSocketConnectOpts.t_to_js
              TcpSocketConnectOpts.t_to_js x85
      end
    module Socket =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x92 : Ojs.t) -> x92
        and t_to_js : t -> Ojs.t = fun (x91 : Ojs.t) -> x91
        let (create : ?options:SocketConstructorOpts.t -> unit -> t) =
          fun ?options:(x93 : SocketConstructorOpts.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Socket")
                   (let x94 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x93 with
                     | Some x95 ->
                         ignore
                           (Ojs.call x94 "push"
                              [|(SocketConstructorOpts.t_to_js x95)|])
                     | None -> ());
                    x94))
        let (write :
          t ->
            buffer:Uint8Array.t or_string ->
              ?cb:(?err:Error.t -> unit -> unit) -> unit -> bool)
          =
          fun (x103 : t) ->
            fun ~buffer:(x96 : Uint8Array.t or_string) ->
              fun ?cb:(x97 : (?err:Error.t -> unit -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x104 = t_to_js x103 in
                     Ojs.call (Ojs.get_prop_ascii x104 "write") "apply"
                       [|x104;((let x98 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x98 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x96)|]);
                                (match x97 with
                                 | Some x99 ->
                                     ignore
                                       (Ojs.call x98 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x100 : Ojs.t) ->
                                                  x99
                                                    ?err:(Ojs.option_of_js
                                                            Error.t_of_js
                                                            x100) ()))|])
                                 | None -> ());
                                x98))|])
        let (write' :
          t ->
            str:Uint8Array.t or_string ->
              ?encoding:BufferEncoding.t ->
                ?cb:(?err:Error.t -> unit -> unit) -> unit -> bool)
          =
          fun (x114 : t) ->
            fun ~str:(x105 : Uint8Array.t or_string) ->
              fun ?encoding:(x106 : BufferEncoding.t option) ->
                fun ?cb:(x107 : (?err:Error.t -> unit -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x115 = t_to_js x114 in
                       Ojs.call (Ojs.get_prop_ascii x115 "write") "apply"
                         [|x115;((let x108 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x108 "push"
                                       [|(or_string_to_js Uint8Array.t_to_js
                                            x105)|]);
                                  (match x106 with
                                   | Some x112 ->
                                       ignore
                                         (Ojs.call x108 "push"
                                            [|(BufferEncoding.t_to_js x112)|])
                                   | None -> ());
                                  (match x107 with
                                   | Some x109 ->
                                       ignore
                                         (Ojs.call x108 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x110 : Ojs.t) ->
                                                    x109
                                                      ?err:(Ojs.option_of_js
                                                              Error.t_of_js
                                                              x110) ()))|])
                                   | None -> ());
                                  x108))|])
        let (connect :
          t ->
            options:SocketConnectOpts.t ->
              ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x120 : t) ->
            fun ~options:(x116 : SocketConnectOpts.t) ->
              fun ?connection_listener:(x117 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x121 = t_to_js x120 in
                     Ojs.call (Ojs.get_prop_ascii x121 "connect") "apply"
                       [|x121;((let x118 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x118 "push"
                                     [|(SocketConnectOpts.t_to_js x116)|]);
                                (match x117 with
                                 | Some x119 ->
                                     ignore
                                       (Ojs.call x118 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x119 ()))|])
                                 | None -> ());
                                x118))|])
        let (connect' :
          t ->
            port:int ->
              host:string -> ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x127 : t) ->
            fun ~port:(x122 : int) ->
              fun ~host:(x123 : string) ->
                fun ?connection_listener:(x124 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x128 = t_to_js x127 in
                       Ojs.call (Ojs.get_prop_ascii x128 "connect") "apply"
                         [|x128;((let x125 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x125 "push"
                                       [|(Ojs.int_to_js x122)|]);
                                  ignore
                                    (Ojs.call x125 "push"
                                       [|(Ojs.string_to_js x123)|]);
                                  (match x124 with
                                   | Some x126 ->
                                       ignore
                                         (Ojs.call x125 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x126 ()))|])
                                   | None -> ());
                                  x125))|])
        let (connect'' :
          t -> port:int -> ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x133 : t) ->
            fun ~port:(x129 : int) ->
              fun ?connection_listener:(x130 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x134 = t_to_js x133 in
                     Ojs.call (Ojs.get_prop_ascii x134 "connect") "apply"
                       [|x134;((let x131 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x131 "push"
                                     [|(Ojs.int_to_js x129)|]);
                                (match x130 with
                                 | Some x132 ->
                                     ignore
                                       (Ojs.call x131 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x132 ()))|])
                                 | None -> ());
                                x131))|])
        let (connect''' :
          t ->
            path:string -> ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x139 : t) ->
            fun ~path:(x135 : string) ->
              fun ?connection_listener:(x136 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x140 = t_to_js x139 in
                     Ojs.call (Ojs.get_prop_ascii x140 "connect") "apply"
                       [|x140;((let x137 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x137 "push"
                                     [|(Ojs.string_to_js x135)|]);
                                (match x136 with
                                 | Some x138 ->
                                     ignore
                                       (Ojs.call x137 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x138 ()))|])
                                 | None -> ());
                                x137))|])
        let (set_encoding : t -> ?encoding:BufferEncoding.t -> unit -> t) =
          fun (x144 : t) ->
            fun ?encoding:(x141 : BufferEncoding.t option) ->
              fun () ->
                t_of_js
                  (let x145 = t_to_js x144 in
                   Ojs.call (Ojs.get_prop_ascii x145 "setEncoding") "apply"
                     [|x145;((let x142 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x141 with
                               | Some x143 ->
                                   ignore
                                     (Ojs.call x142 "push"
                                        [|(BufferEncoding.t_to_js x143)|])
                               | None -> ());
                              x142))|])
        let (pause : t -> t) =
          fun (x146 : t) -> t_of_js (Ojs.call (t_to_js x146) "pause" [||])
        let (resume : t -> t) =
          fun (x147 : t) -> t_of_js (Ojs.call (t_to_js x147) "resume" [||])
        let (set_timeout :
          t -> timeout:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x152 : t) ->
            fun ~timeout:(x148 : int) ->
              fun ?callback:(x149 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x153 = t_to_js x152 in
                     Ojs.call (Ojs.get_prop_ascii x153 "setTimeout") "apply"
                       [|x153;((let x150 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x150 "push"
                                     [|(Ojs.int_to_js x148)|]);
                                (match x149 with
                                 | Some x151 ->
                                     ignore
                                       (Ojs.call x150 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x151 ()))|])
                                 | None -> ());
                                x150))|])
        let (set_no_delay : t -> ?no_delay:bool -> unit -> t) =
          fun (x157 : t) ->
            fun ?no_delay:(x154 : bool option) ->
              fun () ->
                t_of_js
                  (let x158 = t_to_js x157 in
                   Ojs.call (Ojs.get_prop_ascii x158 "setNoDelay") "apply"
                     [|x158;((let x155 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x154 with
                               | Some x156 ->
                                   ignore
                                     (Ojs.call x155 "push"
                                        [|(Ojs.bool_to_js x156)|])
                               | None -> ());
                              x155))|])
        let (set_keep_alive :
          t -> ?enable:bool -> ?initial_delay:int -> unit -> t) =
          fun (x164 : t) ->
            fun ?enable:(x159 : bool option) ->
              fun ?initial_delay:(x160 : int option) ->
                fun () ->
                  t_of_js
                    (let x165 = t_to_js x164 in
                     Ojs.call (Ojs.get_prop_ascii x165 "setKeepAlive")
                       "apply"
                       [|x165;((let x161 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x159 with
                                 | Some x163 ->
                                     ignore
                                       (Ojs.call x161 "push"
                                          [|(Ojs.bool_to_js x163)|])
                                 | None -> ());
                                (match x160 with
                                 | Some x162 ->
                                     ignore
                                       (Ojs.call x161 "push"
                                          [|(Ojs.int_to_js x162)|])
                                 | None -> ());
                                x161))|])
        let (address : t -> (AddressInfo.t, AnonymousInterface0.t) union2) =
          fun (x166 : t) ->
            union2_of_js AddressInfo.t_of_js AnonymousInterface0.t_of_js
              (Ojs.call (t_to_js x166) "address" [||])
        let (unref : t -> t) =
          fun (x169 : t) -> t_of_js (Ojs.call (t_to_js x169) "unref" [||])
        let (ref : t -> t) =
          fun (x170 : t) -> t_of_js (Ojs.call (t_to_js x170) "ref" [||])
        let (get_buffer_size : t -> int) =
          fun (x171 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x171) "bufferSize")
        let (get_bytes_read : t -> int) =
          fun (x172 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x172) "bytesRead")
        let (get_bytes_written : t -> int) =
          fun (x173 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x173) "bytesWritten")
        let (get_connecting : t -> bool) =
          fun (x174 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x174) "connecting")
        let (get_destroyed : t -> bool) =
          fun (x175 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x175) "destroyed")
        let (get_local_address : t -> string) =
          fun (x176 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x176) "localAddress")
        let (get_local_port : t -> int) =
          fun (x177 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x177) "localPort")
        let (get_remote_address : t -> string) =
          fun (x178 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x178) "remoteAddress")
        let (get_remote_family : t -> string) =
          fun (x179 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x179) "remoteFamily")
        let (get_remote_port : t -> int) =
          fun (x180 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x180) "remotePort")
        let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
          fun (x184 : t) ->
            fun ?cb:(x181 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x185 = t_to_js x184 in
                   Ojs.call (Ojs.get_prop_ascii x185 "end") "apply"
                     [|x185;((let x182 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x181 with
                               | Some x183 ->
                                   ignore
                                     (Ojs.call x182 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x183 ()))|])
                               | None -> ());
                              x182))|])
        let (end_' :
          t ->
            buffer:Uint8Array.t or_string ->
              ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x191 : t) ->
            fun ~buffer:(x186 : Uint8Array.t or_string) ->
              fun ?cb:(x187 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x192 = t_to_js x191 in
                     Ojs.call (Ojs.get_prop_ascii x192 "end") "apply"
                       [|x192;((let x188 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x188 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x186)|]);
                                (match x187 with
                                 | Some x189 ->
                                     ignore
                                       (Ojs.call x188 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x189 ()))|])
                                 | None -> ());
                                x188))|])
        let (end_'' :
          t ->
            str:Uint8Array.t or_string ->
              ?encoding:BufferEncoding.t ->
                ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x200 : t) ->
            fun ~str:(x193 : Uint8Array.t or_string) ->
              fun ?encoding:(x194 : BufferEncoding.t option) ->
                fun ?cb:(x195 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x201 = t_to_js x200 in
                       Ojs.call (Ojs.get_prop_ascii x201 "end") "apply"
                         [|x201;((let x196 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x196 "push"
                                       [|(or_string_to_js Uint8Array.t_to_js
                                            x193)|]);
                                  (match x194 with
                                   | Some x198 ->
                                       ignore
                                         (Ojs.call x196 "push"
                                            [|(BufferEncoding.t_to_js x198)|])
                                   | None -> ());
                                  (match x195 with
                                   | Some x197 ->
                                       ignore
                                         (Ojs.call x196 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x197 ()))|])
                                   | None -> ());
                                  x196))|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x206 : t) ->
            fun ~event:(x202 : string) ->
              fun ~listener:(x203 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x206) "addListener"
                     [|(Ojs.string_to_js x202);(Ojs.fun_to_js_args
                                                  (fun (x204 : _) ->
                                                     x203
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x204 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x210 : t) ->
            fun ~event:(x207 : [ `close ]) ->
              fun ~listener:(x208 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x210) "addListener"
                     [|((match x207 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x209 : Ojs.t) ->
                            x208 ~had_error:(Ojs.bool_of_js x209)))|])
        let (add_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x213 : t) ->
            fun ~event:(x211 : [ `connect ]) ->
              fun ~listener:(x212 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x213) "addListener"
                     [|((match x211 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x212 ()))|])
        let (add_listener''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x217 : t) ->
            fun ~event:(x214 : [ `data ]) ->
              fun ~listener:(x215 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x217) "addListener"
                     [|((match x214 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x216 : Ojs.t) ->
                            x215 ~data:(Buffer.t_of_js x216)))|])
        let (add_listener'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x220 : t) ->
            fun ~event:(x218 : [ `drain ]) ->
              fun ~listener:(x219 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x220) "addListener"
                     [|((match x218 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x219 ()))|])
        let (add_listener''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x223 : t) ->
            fun ~event:(x221 : [ `end_ ]) ->
              fun ~listener:(x222 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x223) "addListener"
                     [|((match x221 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x222 ()))|])
        let (add_listener'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x227 : t) ->
            fun ~event:(x224 : [ `error ]) ->
              fun ~listener:(x225 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x227) "addListener"
                     [|((match x224 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x226 : Ojs.t) ->
                            x225 ~err:(Error.t_of_js x226)))|])
        let (add_listener''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x235 : t) ->
            fun ~event:(x228 : [ `lookup ]) ->
              fun
                ~listener:(x229 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x235) "addListener"
                     [|((match x228 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x230 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x231 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x232 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x234 :
                                                                    Ojs.t) ->
                                                                    x229
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x230)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x231)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x232)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x234)))|])
        let (add_listener'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x238 : t) ->
            fun ~event:(x236 : [ `timeout ]) ->
              fun ~listener:(x237 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x238) "addListener"
                     [|((match x236 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x237 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x244 : t) ->
            fun ~event:(x239 : symbol or_string) ->
              fun ~args:(x240 : any list) ->
                Ojs.bool_of_js
                  (let x245 = t_to_js x244 in
                   Ojs.call (Ojs.get_prop_ascii x245 "emit") "apply"
                     [|x245;((let x241 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x241 "push"
                                   [|(or_string_to_js symbol_to_js x239)|]);
                              List.iter
                                (fun (x242 : any) ->
                                   ignore
                                     (Ojs.call x241 "push"
                                        [|(any_to_js x242)|])) x240;
                              x241))|])
        let (emit' : t -> event:[ `close ] -> had_error:bool -> bool) =
          fun (x248 : t) ->
            fun ~event:(x246 : [ `close ]) ->
              fun ~had_error:(x247 : bool) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x248) "emit"
                     [|((match x246 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.bool_to_js x247)|])
        let (emit'' : t -> event:[ `connect ] -> bool) =
          fun (x250 : t) ->
            fun ~event:(x249 : [ `connect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x250) "emit"
                   [|((match x249 with
                       | `connect -> Ojs.string_to_js "connect"))|])
        let (emit''' : t -> event:[ `data ] -> data:Buffer.t -> bool) =
          fun (x253 : t) ->
            fun ~event:(x251 : [ `data ]) ->
              fun ~data:(x252 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x253) "emit"
                     [|((match x251 with | `data -> Ojs.string_to_js "data"));(
                       Buffer.t_to_js x252)|])
        let (emit'''' : t -> event:[ `drain ] -> bool) =
          fun (x255 : t) ->
            fun ~event:(x254 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x255) "emit"
                   [|((match x254 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit''''' : t -> event:[ `end_ ] -> bool) =
          fun (x257 : t) ->
            fun ~event:(x256 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x257) "emit"
                   [|((match x256 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit'''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x260 : t) ->
            fun ~event:(x258 : [ `error ]) ->
              fun ~err:(x259 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x260) "emit"
                     [|((match x258 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x259)|])
        let (emit''''''' :
          t ->
            event:[ `lookup ] ->
              err:Error.t ->
                address:string ->
                  family:string or_number -> host:string -> bool)
          =
          fun (x267 : t) ->
            fun ~event:(x261 : [ `lookup ]) ->
              fun ~err:(x262 : Error.t) ->
                fun ~address:(x263 : string) ->
                  fun ~family:(x264 : string or_number) ->
                    fun ~host:(x266 : string) ->
                      Ojs.bool_of_js
                        (Ojs.call (t_to_js x267) "emit"
                           [|((match x261 with
                               | `lookup -> Ojs.string_to_js "lookup"));(
                             Error.t_to_js x262);(Ojs.string_to_js x263);(
                             or_number_to_js Ojs.string_to_js x264);(
                             Ojs.string_to_js x266)|])
        let (emit'''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x269 : t) ->
            fun ~event:(x268 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x269) "emit"
                   [|((match x268 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x274 : t) ->
            fun ~event:(x270 : string) ->
              fun ~listener:(x271 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x274) "on"
                     [|(Ojs.string_to_js x270);(Ojs.fun_to_js_args
                                                  (fun (x272 : _) ->
                                                     x271
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x272 0)))|])
        let (on' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x278 : t) ->
            fun ~event:(x275 : [ `close ]) ->
              fun ~listener:(x276 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x278) "on"
                     [|((match x275 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x277 : Ojs.t) ->
                            x276 ~had_error:(Ojs.bool_of_js x277)))|])
        let (on'' : t -> event:[ `connect ] -> listener:(unit -> unit) -> t)
          =
          fun (x281 : t) ->
            fun ~event:(x279 : [ `connect ]) ->
              fun ~listener:(x280 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x281) "on"
                     [|((match x279 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x280 ()))|])
        let (on''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x285 : t) ->
            fun ~event:(x282 : [ `data ]) ->
              fun ~listener:(x283 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x285) "on"
                     [|((match x282 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x284 : Ojs.t) ->
                            x283 ~data:(Buffer.t_of_js x284)))|])
        let (on'''' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t)
          =
          fun (x288 : t) ->
            fun ~event:(x286 : [ `drain ]) ->
              fun ~listener:(x287 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x288) "on"
                     [|((match x286 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x287 ()))|])
        let (on''''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
          =
          fun (x291 : t) ->
            fun ~event:(x289 : [ `end_ ]) ->
              fun ~listener:(x290 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x291) "on"
                     [|((match x289 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x290 ()))|])
        let (on'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x295 : t) ->
            fun ~event:(x292 : [ `error ]) ->
              fun ~listener:(x293 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x295) "on"
                     [|((match x292 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x294 : Ojs.t) ->
                            x293 ~err:(Error.t_of_js x294)))|])
        let (on''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x303 : t) ->
            fun ~event:(x296 : [ `lookup ]) ->
              fun
                ~listener:(x297 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x303) "on"
                     [|((match x296 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x298 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x299 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x300 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x302 :
                                                                    Ojs.t) ->
                                                                    x297
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x298)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x299)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x300)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x302)))|])
        let (on'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x306 : t) ->
            fun ~event:(x304 : [ `timeout ]) ->
              fun ~listener:(x305 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x306) "on"
                     [|((match x304 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x305 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x311 : t) ->
            fun ~event:(x307 : string) ->
              fun ~listener:(x308 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x311) "once"
                     [|(Ojs.string_to_js x307);(Ojs.fun_to_js_args
                                                  (fun (x309 : _) ->
                                                     x308
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x309 0)))|])
        let (once' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x315 : t) ->
            fun ~event:(x312 : [ `close ]) ->
              fun ~listener:(x313 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x315) "once"
                     [|((match x312 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x314 : Ojs.t) ->
                            x313 ~had_error:(Ojs.bool_of_js x314)))|])
        let (once'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x318 : t) ->
            fun ~event:(x316 : [ `connect ]) ->
              fun ~listener:(x317 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x318) "once"
                     [|((match x316 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x317 ()))|])
        let (once''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x322 : t) ->
            fun ~event:(x319 : [ `data ]) ->
              fun ~listener:(x320 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x322) "once"
                     [|((match x319 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x321 : Ojs.t) ->
                            x320 ~data:(Buffer.t_of_js x321)))|])
        let (once'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x325 : t) ->
            fun ~event:(x323 : [ `drain ]) ->
              fun ~listener:(x324 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x325) "once"
                     [|((match x323 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x324 ()))|])
        let (once''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x328 : t) ->
            fun ~event:(x326 : [ `end_ ]) ->
              fun ~listener:(x327 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x328) "once"
                     [|((match x326 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x327 ()))|])
        let (once'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x332 : t) ->
            fun ~event:(x329 : [ `error ]) ->
              fun ~listener:(x330 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x332) "once"
                     [|((match x329 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x331 : Ojs.t) ->
                            x330 ~err:(Error.t_of_js x331)))|])
        let (once''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x340 : t) ->
            fun ~event:(x333 : [ `lookup ]) ->
              fun
                ~listener:(x334 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x340) "once"
                     [|((match x333 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x335 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x336 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x337 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x339 :
                                                                    Ojs.t) ->
                                                                    x334
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x335)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x336)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x337)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x339)))|])
        let (once'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x343 : t) ->
            fun ~event:(x341 : [ `timeout ]) ->
              fun ~listener:(x342 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x343) "once"
                     [|((match x341 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x342 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x348 : t) ->
            fun ~event:(x344 : string) ->
              fun ~listener:(x345 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x348) "prependListener"
                     [|(Ojs.string_to_js x344);(Ojs.fun_to_js_args
                                                  (fun (x346 : _) ->
                                                     x345
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x346 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x352 : t) ->
            fun ~event:(x349 : [ `close ]) ->
              fun ~listener:(x350 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x352) "prependListener"
                     [|((match x349 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x351 : Ojs.t) ->
                            x350 ~had_error:(Ojs.bool_of_js x351)))|])
        let (prepend_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x355 : t) ->
            fun ~event:(x353 : [ `connect ]) ->
              fun ~listener:(x354 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x355) "prependListener"
                     [|((match x353 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x354 ()))|])
        let (prepend_listener''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x359 : t) ->
            fun ~event:(x356 : [ `data ]) ->
              fun ~listener:(x357 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x359) "prependListener"
                     [|((match x356 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x358 : Ojs.t) ->
                            x357 ~data:(Buffer.t_of_js x358)))|])
        let (prepend_listener'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x362 : t) ->
            fun ~event:(x360 : [ `drain ]) ->
              fun ~listener:(x361 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x362) "prependListener"
                     [|((match x360 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x361 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x365 : t) ->
            fun ~event:(x363 : [ `end_ ]) ->
              fun ~listener:(x364 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x365) "prependListener"
                     [|((match x363 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x364 ()))|])
        let (prepend_listener'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x369 : t) ->
            fun ~event:(x366 : [ `error ]) ->
              fun ~listener:(x367 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x369) "prependListener"
                     [|((match x366 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x368 : Ojs.t) ->
                            x367 ~err:(Error.t_of_js x368)))|])
        let (prepend_listener''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x377 : t) ->
            fun ~event:(x370 : [ `lookup ]) ->
              fun
                ~listener:(x371 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x377) "prependListener"
                     [|((match x370 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x372 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x373 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x374 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x376 :
                                                                    Ojs.t) ->
                                                                    x371
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x372)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x373)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x374)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x376)))|])
        let (prepend_listener'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x380 : t) ->
            fun ~event:(x378 : [ `timeout ]) ->
              fun ~listener:(x379 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x380) "prependListener"
                     [|((match x378 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x379 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x385 : t) ->
            fun ~event:(x381 : string) ->
              fun ~listener:(x382 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x385) "prependOnceListener"
                     [|(Ojs.string_to_js x381);(Ojs.fun_to_js_args
                                                  (fun (x383 : _) ->
                                                     x382
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x383 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x389 : t) ->
            fun ~event:(x386 : [ `close ]) ->
              fun ~listener:(x387 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x389) "prependOnceListener"
                     [|((match x386 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x388 : Ojs.t) ->
                            x387 ~had_error:(Ojs.bool_of_js x388)))|])
        let (prepend_once_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x392 : t) ->
            fun ~event:(x390 : [ `connect ]) ->
              fun ~listener:(x391 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x392) "prependOnceListener"
                     [|((match x390 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x391 ()))|])
        let (prepend_once_listener''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x396 : t) ->
            fun ~event:(x393 : [ `data ]) ->
              fun ~listener:(x394 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x396) "prependOnceListener"
                     [|((match x393 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x395 : Ojs.t) ->
                            x394 ~data:(Buffer.t_of_js x395)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x399 : t) ->
            fun ~event:(x397 : [ `drain ]) ->
              fun ~listener:(x398 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x399) "prependOnceListener"
                     [|((match x397 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x398 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x402 : t) ->
            fun ~event:(x400 : [ `end_ ]) ->
              fun ~listener:(x401 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x402) "prependOnceListener"
                     [|((match x400 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x401 ()))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x406 : t) ->
            fun ~event:(x403 : [ `error ]) ->
              fun ~listener:(x404 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x406) "prependOnceListener"
                     [|((match x403 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x405 : Ojs.t) ->
                            x404 ~err:(Error.t_of_js x405)))|])
        let (prepend_once_listener''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x414 : t) ->
            fun ~event:(x407 : [ `lookup ]) ->
              fun
                ~listener:(x408 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x414) "prependOnceListener"
                     [|((match x407 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x409 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x410 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x411 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x413 :
                                                                    Ojs.t) ->
                                                                    x408
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x409)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x410)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x411)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x413)))|])
        let (prepend_once_listener'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x417 : t) ->
            fun ~event:(x415 : [ `timeout ]) ->
              fun ~listener:(x416 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x417) "prependOnceListener"
                     [|((match x415 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x416 ()))|])
        let (cast : t -> Stream.Duplex.t) =
          fun (x418 : t) -> Stream.Duplex.t_of_js (t_to_js x418)
      end
    module ListenOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x420 : Ojs.t) -> x420
        and t_to_js : t -> Ojs.t = fun (x419 : Ojs.t) -> x419
        let (get_port : t -> int) =
          fun (x421 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x421) "port")
        let (set_port : t -> int -> unit) =
          fun (x422 : t) ->
            fun (x423 : int) ->
              Ojs.set_prop_ascii (t_to_js x422) "port" (Ojs.int_to_js x423)
        let (get_host : t -> string) =
          fun (x424 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x424) "host")
        let (set_host : t -> string -> unit) =
          fun (x425 : t) ->
            fun (x426 : string) ->
              Ojs.set_prop_ascii (t_to_js x425) "host"
                (Ojs.string_to_js x426)
        let (get_backlog : t -> int) =
          fun (x427 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x427) "backlog")
        let (set_backlog : t -> int -> unit) =
          fun (x428 : t) ->
            fun (x429 : int) ->
              Ojs.set_prop_ascii (t_to_js x428) "backlog"
                (Ojs.int_to_js x429)
        let (get_path : t -> string) =
          fun (x430 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x430) "path")
        let (set_path : t -> string -> unit) =
          fun (x431 : t) ->
            fun (x432 : string) ->
              Ojs.set_prop_ascii (t_to_js x431) "path"
                (Ojs.string_to_js x432)
        let (get_exclusive : t -> bool) =
          fun (x433 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x433) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x434 : t) ->
            fun (x435 : bool) ->
              Ojs.set_prop_ascii (t_to_js x434) "exclusive"
                (Ojs.bool_to_js x435)
        let (get_readable_all : t -> bool) =
          fun (x436 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x436) "readableAll")
        let (set_readable_all : t -> bool -> unit) =
          fun (x437 : t) ->
            fun (x438 : bool) ->
              Ojs.set_prop_ascii (t_to_js x437) "readableAll"
                (Ojs.bool_to_js x438)
        let (get_writable_all : t -> bool) =
          fun (x439 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x439) "writableAll")
        let (set_writable_all : t -> bool -> unit) =
          fun (x440 : t) ->
            fun (x441 : bool) ->
              Ojs.set_prop_ascii (t_to_js x440) "writableAll"
                (Ojs.bool_to_js x441)
        let (get_ipv6Only : t -> bool) =
          fun (x442 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x442) "ipv6Only")
        let (set_ipv6Only : t -> bool -> unit) =
          fun (x443 : t) ->
            fun (x444 : bool) ->
              Ojs.set_prop_ascii (t_to_js x443) "ipv6Only"
                (Ojs.bool_to_js x444)
      end
    module ServerOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x446 : Ojs.t) -> x446
        and t_to_js : t -> Ojs.t = fun (x445 : Ojs.t) -> x445
        let (get_allow_half_open : t -> bool) =
          fun (x447 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x447) "allowHalfOpen")
        let (set_allow_half_open : t -> bool -> unit) =
          fun (x448 : t) ->
            fun (x449 : bool) ->
              Ojs.set_prop_ascii (t_to_js x448) "allowHalfOpen"
                (Ojs.bool_to_js x449)
        let (get_pause_on_connect : t -> bool) =
          fun (x450 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x450) "pauseOnConnect")
        let (set_pause_on_connect : t -> bool -> unit) =
          fun (x451 : t) ->
            fun (x452 : bool) ->
              Ojs.set_prop_ascii (t_to_js x451) "pauseOnConnect"
                (Ojs.bool_to_js x452)
      end
    module Server =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x454 : Ojs.t) -> x454
        and t_to_js : t -> Ojs.t = fun (x453 : Ojs.t) -> x453
        let (create :
          ?connection_listener:(socket:Socket.t -> unit) -> unit -> t) =
          fun ?connection_listener:(x455 : (socket:Socket.t -> unit) option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Server")
                   (let x456 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x455 with
                     | Some x457 ->
                         ignore
                           (Ojs.call x456 "push"
                              [|(Ojs.fun_to_js 1
                                   (fun (x458 : Ojs.t) ->
                                      x457 ~socket:(Socket.t_of_js x458)))|])
                     | None -> ());
                    x456))
        let (create' :
          ?options:ServerOpts.t ->
            ?connection_listener:(socket:Socket.t -> unit) -> unit -> t)
          =
          fun ?options:(x459 : ServerOpts.t option) ->
            fun
              ?connection_listener:(x460 : (socket:Socket.t -> unit) option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Server")
                     (let x461 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x459 with
                       | Some x464 ->
                           ignore
                             (Ojs.call x461 "push"
                                [|(ServerOpts.t_to_js x464)|])
                       | None -> ());
                      (match x460 with
                       | Some x462 ->
                           ignore
                             (Ojs.call x461 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x463 : Ojs.t) ->
                                        x462 ~socket:(Socket.t_of_js x463)))|])
                       | None -> ());
                      x461))
        let (listen :
          t ->
            ?port:int ->
              ?hostname:string ->
                ?backlog:int ->
                  ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x474 : t) ->
            fun ?port:(x465 : int option) ->
              fun ?hostname:(x466 : string option) ->
                fun ?backlog:(x467 : int option) ->
                  fun ?listening_listener:(x468 : (unit -> unit) option) ->
                    fun () ->
                      t_of_js
                        (let x475 = t_to_js x474 in
                         Ojs.call (Ojs.get_prop_ascii x475 "listen") "apply"
                           [|x475;((let x469 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x465 with
                                     | Some x473 ->
                                         ignore
                                           (Ojs.call x469 "push"
                                              [|(Ojs.int_to_js x473)|])
                                     | None -> ());
                                    (match x466 with
                                     | Some x472 ->
                                         ignore
                                           (Ojs.call x469 "push"
                                              [|(Ojs.string_to_js x472)|])
                                     | None -> ());
                                    (match x467 with
                                     | Some x471 ->
                                         ignore
                                           (Ojs.call x469 "push"
                                              [|(Ojs.int_to_js x471)|])
                                     | None -> ());
                                    (match x468 with
                                     | Some x470 ->
                                         ignore
                                           (Ojs.call x469 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x470 ()))|])
                                     | None -> ());
                                    x469))|])
        let (listen' :
          t ->
            ?port:int ->
              ?hostname:string ->
                ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x483 : t) ->
            fun ?port:(x476 : int option) ->
              fun ?hostname:(x477 : string option) ->
                fun ?listening_listener:(x478 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x484 = t_to_js x483 in
                       Ojs.call (Ojs.get_prop_ascii x484 "listen") "apply"
                         [|x484;((let x479 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x476 with
                                   | Some x482 ->
                                       ignore
                                         (Ojs.call x479 "push"
                                            [|(Ojs.int_to_js x482)|])
                                   | None -> ());
                                  (match x477 with
                                   | Some x481 ->
                                       ignore
                                         (Ojs.call x479 "push"
                                            [|(Ojs.string_to_js x481)|])
                                   | None -> ());
                                  (match x478 with
                                   | Some x480 ->
                                       ignore
                                         (Ojs.call x479 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x480 ()))|])
                                   | None -> ());
                                  x479))|])
        let (listen'' :
          t ->
            ?port:int ->
              ?backlog:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x492 : t) ->
            fun ?port:(x485 : int option) ->
              fun ?backlog:(x486 : int option) ->
                fun ?listening_listener:(x487 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x493 = t_to_js x492 in
                       Ojs.call (Ojs.get_prop_ascii x493 "listen") "apply"
                         [|x493;((let x488 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x485 with
                                   | Some x491 ->
                                       ignore
                                         (Ojs.call x488 "push"
                                            [|(Ojs.int_to_js x491)|])
                                   | None -> ());
                                  (match x486 with
                                   | Some x490 ->
                                       ignore
                                         (Ojs.call x488 "push"
                                            [|(Ojs.int_to_js x490)|])
                                   | None -> ());
                                  (match x487 with
                                   | Some x489 ->
                                       ignore
                                         (Ojs.call x488 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x489 ()))|])
                                   | None -> ());
                                  x488))|])
        let (listen''' :
          t -> ?port:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x499 : t) ->
            fun ?port:(x494 : int option) ->
              fun ?listening_listener:(x495 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x500 = t_to_js x499 in
                     Ojs.call (Ojs.get_prop_ascii x500 "listen") "apply"
                       [|x500;((let x496 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x494 with
                                 | Some x498 ->
                                     ignore
                                       (Ojs.call x496 "push"
                                          [|(Ojs.int_to_js x498)|])
                                 | None -> ());
                                (match x495 with
                                 | Some x497 ->
                                     ignore
                                       (Ojs.call x496 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x497 ()))|])
                                 | None -> ());
                                x496))|])
        let (listen'''' :
          t ->
            path:string ->
              ?backlog:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x507 : t) ->
            fun ~path:(x501 : string) ->
              fun ?backlog:(x502 : int option) ->
                fun ?listening_listener:(x503 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x508 = t_to_js x507 in
                       Ojs.call (Ojs.get_prop_ascii x508 "listen") "apply"
                         [|x508;((let x504 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x504 "push"
                                       [|(Ojs.string_to_js x501)|]);
                                  (match x502 with
                                   | Some x506 ->
                                       ignore
                                         (Ojs.call x504 "push"
                                            [|(Ojs.int_to_js x506)|])
                                   | None -> ());
                                  (match x503 with
                                   | Some x505 ->
                                       ignore
                                         (Ojs.call x504 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x505 ()))|])
                                   | None -> ());
                                  x504))|])
        let (listen''''' :
          t -> path:string -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x513 : t) ->
            fun ~path:(x509 : string) ->
              fun ?listening_listener:(x510 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x514 = t_to_js x513 in
                     Ojs.call (Ojs.get_prop_ascii x514 "listen") "apply"
                       [|x514;((let x511 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x511 "push"
                                     [|(Ojs.string_to_js x509)|]);
                                (match x510 with
                                 | Some x512 ->
                                     ignore
                                       (Ojs.call x511 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x512 ()))|])
                                 | None -> ());
                                x511))|])
        let (listen'''''' :
          t ->
            options:ListenOptions.t ->
              ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x519 : t) ->
            fun ~options:(x515 : ListenOptions.t) ->
              fun ?listening_listener:(x516 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x520 = t_to_js x519 in
                     Ojs.call (Ojs.get_prop_ascii x520 "listen") "apply"
                       [|x520;((let x517 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x517 "push"
                                     [|(ListenOptions.t_to_js x515)|]);
                                (match x516 with
                                 | Some x518 ->
                                     ignore
                                       (Ojs.call x517 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x518 ()))|])
                                 | None -> ());
                                x517))|])
        let (listen''''''' :
          t ->
            handle:any ->
              ?backlog:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x527 : t) ->
            fun ~handle:(x521 : any) ->
              fun ?backlog:(x522 : int option) ->
                fun ?listening_listener:(x523 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x528 = t_to_js x527 in
                       Ojs.call (Ojs.get_prop_ascii x528 "listen") "apply"
                         [|x528;((let x524 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x524 "push"
                                       [|(any_to_js x521)|]);
                                  (match x522 with
                                   | Some x526 ->
                                       ignore
                                         (Ojs.call x524 "push"
                                            [|(Ojs.int_to_js x526)|])
                                   | None -> ());
                                  (match x523 with
                                   | Some x525 ->
                                       ignore
                                         (Ojs.call x524 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x525 ()))|])
                                   | None -> ());
                                  x524))|])
        let (listen'''''''' :
          t -> handle:any -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x533 : t) ->
            fun ~handle:(x529 : any) ->
              fun ?listening_listener:(x530 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x534 = t_to_js x533 in
                     Ojs.call (Ojs.get_prop_ascii x534 "listen") "apply"
                       [|x534;((let x531 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x531 "push" [|(any_to_js x529)|]);
                                (match x530 with
                                 | Some x532 ->
                                     ignore
                                       (Ojs.call x531 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x532 ()))|])
                                 | None -> ());
                                x531))|])
        let (close :
          t -> ?callback:(?err:Error.t -> unit -> unit) -> unit -> t) =
          fun (x540 : t) ->
            fun ?callback:(x535 : (?err:Error.t -> unit -> unit) option) ->
              fun () ->
                t_of_js
                  (let x541 = t_to_js x540 in
                   Ojs.call (Ojs.get_prop_ascii x541 "close") "apply"
                     [|x541;((let x536 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x535 with
                               | Some x537 ->
                                   ignore
                                     (Ojs.call x536 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x538 : Ojs.t) ->
                                                x537
                                                  ?err:(Ojs.option_of_js
                                                          Error.t_of_js x538)
                                                  ()))|])
                               | None -> ());
                              x536))|])
        let (address : t -> AddressInfo.t or_string or_null) =
          fun (x542 : t) ->
            or_null_of_js
              (fun (x543 : Ojs.t) -> or_string_of_js AddressInfo.t_of_js x543)
              (Ojs.call (t_to_js x542) "address" [||])
        let (get_connections :
          t -> cb:(error:Error.t or_null -> count:int -> unit) -> unit) =
          fun (x549 : t) ->
            fun ~cb:(x545 : error:Error.t or_null -> count:int -> unit) ->
              ignore
                (Ojs.call (t_to_js x549) "getConnections"
                   [|(Ojs.fun_to_js 2
                        (fun (x546 : Ojs.t) ->
                           fun (x548 : Ojs.t) ->
                             x545 ~error:(or_null_of_js Error.t_of_js x546)
                               ~count:(Ojs.int_of_js x548)))|])
        let (ref : t -> t) =
          fun (x550 : t) -> t_of_js (Ojs.call (t_to_js x550) "ref" [||])
        let (unref : t -> t) =
          fun (x551 : t) -> t_of_js (Ojs.call (t_to_js x551) "unref" [||])
        let (get_max_connections : t -> int) =
          fun (x552 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x552) "maxConnections")
        let (set_max_connections : t -> int -> unit) =
          fun (x553 : t) ->
            fun (x554 : int) ->
              Ojs.set_prop_ascii (t_to_js x553) "maxConnections"
                (Ojs.int_to_js x554)
        let (get_connections : t -> int) =
          fun (x555 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x555) "connections")
        let (set_connections : t -> int -> unit) =
          fun (x556 : t) ->
            fun (x557 : int) ->
              Ojs.set_prop_ascii (t_to_js x556) "connections"
                (Ojs.int_to_js x557)
        let (get_listening : t -> bool) =
          fun (x558 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x558) "listening")
        let (set_listening : t -> bool -> unit) =
          fun (x559 : t) ->
            fun (x560 : bool) ->
              Ojs.set_prop_ascii (t_to_js x559) "listening"
                (Ojs.bool_to_js x560)
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x565 : t) ->
            fun ~event:(x561 : string) ->
              fun ~listener:(x562 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x565) "addListener"
                     [|(Ojs.string_to_js x561);(Ojs.fun_to_js_args
                                                  (fun (x563 : _) ->
                                                     x562
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x563 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x568 : t) ->
            fun ~event:(x566 : [ `close ]) ->
              fun ~listener:(x567 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x568) "addListener"
                     [|((match x566 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x567 ()))|])
        let (add_listener'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x572 : t) ->
            fun ~event:(x569 : [ `connection ]) ->
              fun ~listener:(x570 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x572) "addListener"
                     [|((match x569 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x571 : Ojs.t) ->
                            x570 ~socket:(Socket.t_of_js x571)))|])
        let (add_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x576 : t) ->
            fun ~event:(x573 : [ `error ]) ->
              fun ~listener:(x574 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x576) "addListener"
                     [|((match x573 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x575 : Ojs.t) ->
                            x574 ~err:(Error.t_of_js x575)))|])
        let (add_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x579 : t) ->
            fun ~event:(x577 : [ `listening ]) ->
              fun ~listener:(x578 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x579) "addListener"
                     [|((match x577 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x578 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x585 : t) ->
            fun ~event:(x580 : symbol or_string) ->
              fun ~args:(x581 : any list) ->
                Ojs.bool_of_js
                  (let x586 = t_to_js x585 in
                   Ojs.call (Ojs.get_prop_ascii x586 "emit") "apply"
                     [|x586;((let x582 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x582 "push"
                                   [|(or_string_to_js symbol_to_js x580)|]);
                              List.iter
                                (fun (x583 : any) ->
                                   ignore
                                     (Ojs.call x582 "push"
                                        [|(any_to_js x583)|])) x581;
                              x582))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x588 : t) ->
            fun ~event:(x587 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x588) "emit"
                   [|((match x587 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `connection ] -> socket:Socket.t -> bool)
          =
          fun (x591 : t) ->
            fun ~event:(x589 : [ `connection ]) ->
              fun ~socket:(x590 : Socket.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x591) "emit"
                     [|((match x589 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Socket.t_to_js x590)|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x594 : t) ->
            fun ~event:(x592 : [ `error ]) ->
              fun ~err:(x593 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x594) "emit"
                     [|((match x592 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x593)|])
        let (emit'''' : t -> event:[ `listening ] -> bool) =
          fun (x596 : t) ->
            fun ~event:(x595 : [ `listening ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x596) "emit"
                   [|((match x595 with
                       | `listening -> Ojs.string_to_js "listening"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x601 : t) ->
            fun ~event:(x597 : string) ->
              fun ~listener:(x598 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x601) "on"
                     [|(Ojs.string_to_js x597);(Ojs.fun_to_js_args
                                                  (fun (x599 : _) ->
                                                     x598
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x599 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x604 : t) ->
            fun ~event:(x602 : [ `close ]) ->
              fun ~listener:(x603 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x604) "on"
                     [|((match x602 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x603 ()))|])
        let (on'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x608 : t) ->
            fun ~event:(x605 : [ `connection ]) ->
              fun ~listener:(x606 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x608) "on"
                     [|((match x605 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x607 : Ojs.t) ->
                            x606 ~socket:(Socket.t_of_js x607)))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x612 : t) ->
            fun ~event:(x609 : [ `error ]) ->
              fun ~listener:(x610 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x612) "on"
                     [|((match x609 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x611 : Ojs.t) ->
                            x610 ~err:(Error.t_of_js x611)))|])
        let (on'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x615 : t) ->
            fun ~event:(x613 : [ `listening ]) ->
              fun ~listener:(x614 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x615) "on"
                     [|((match x613 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x614 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x620 : t) ->
            fun ~event:(x616 : string) ->
              fun ~listener:(x617 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x620) "once"
                     [|(Ojs.string_to_js x616);(Ojs.fun_to_js_args
                                                  (fun (x618 : _) ->
                                                     x617
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x618 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x623 : t) ->
            fun ~event:(x621 : [ `close ]) ->
              fun ~listener:(x622 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x623) "once"
                     [|((match x621 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x622 ()))|])
        let (once'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x627 : t) ->
            fun ~event:(x624 : [ `connection ]) ->
              fun ~listener:(x625 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x627) "once"
                     [|((match x624 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x626 : Ojs.t) ->
                            x625 ~socket:(Socket.t_of_js x626)))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x631 : t) ->
            fun ~event:(x628 : [ `error ]) ->
              fun ~listener:(x629 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x631) "once"
                     [|((match x628 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x630 : Ojs.t) ->
                            x629 ~err:(Error.t_of_js x630)))|])
        let (once'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x634 : t) ->
            fun ~event:(x632 : [ `listening ]) ->
              fun ~listener:(x633 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x634) "once"
                     [|((match x632 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x633 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x639 : t) ->
            fun ~event:(x635 : string) ->
              fun ~listener:(x636 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x639) "prependListener"
                     [|(Ojs.string_to_js x635);(Ojs.fun_to_js_args
                                                  (fun (x637 : _) ->
                                                     x636
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x637 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x642 : t) ->
            fun ~event:(x640 : [ `close ]) ->
              fun ~listener:(x641 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x642) "prependListener"
                     [|((match x640 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x641 ()))|])
        let (prepend_listener'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x646 : t) ->
            fun ~event:(x643 : [ `connection ]) ->
              fun ~listener:(x644 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x646) "prependListener"
                     [|((match x643 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x645 : Ojs.t) ->
                            x644 ~socket:(Socket.t_of_js x645)))|])
        let (prepend_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x650 : t) ->
            fun ~event:(x647 : [ `error ]) ->
              fun ~listener:(x648 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x650) "prependListener"
                     [|((match x647 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x649 : Ojs.t) ->
                            x648 ~err:(Error.t_of_js x649)))|])
        let (prepend_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x653 : t) ->
            fun ~event:(x651 : [ `listening ]) ->
              fun ~listener:(x652 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x653) "prependListener"
                     [|((match x651 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x652 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x658 : t) ->
            fun ~event:(x654 : string) ->
              fun ~listener:(x655 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x658) "prependOnceListener"
                     [|(Ojs.string_to_js x654);(Ojs.fun_to_js_args
                                                  (fun (x656 : _) ->
                                                     x655
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x656 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x661 : t) ->
            fun ~event:(x659 : [ `close ]) ->
              fun ~listener:(x660 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x661) "prependOnceListener"
                     [|((match x659 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x660 ()))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x665 : t) ->
            fun ~event:(x662 : [ `connection ]) ->
              fun ~listener:(x663 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x665) "prependOnceListener"
                     [|((match x662 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x664 : Ojs.t) ->
                            x663 ~socket:(Socket.t_of_js x664)))|])
        let (prepend_once_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x669 : t) ->
            fun ~event:(x666 : [ `error ]) ->
              fun ~listener:(x667 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x669) "prependOnceListener"
                     [|((match x666 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x668 : Ojs.t) ->
                            x667 ~err:(Error.t_of_js x668)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x672 : t) ->
            fun ~event:(x670 : [ `listening ]) ->
              fun ~listener:(x671 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x672) "prependOnceListener"
                     [|((match x670 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x671 ()))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x673 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x673)
      end
    module TcpNetConnectOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x675 : Ojs.t) -> x675
        and t_to_js : t -> Ojs.t = fun (x674 : Ojs.t) -> x674
        let (get_timeout : t -> int) =
          fun (x676 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x676) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x677 : t) ->
            fun (x678 : int) ->
              Ojs.set_prop_ascii (t_to_js x677) "timeout"
                (Ojs.int_to_js x678)
        let (cast : t -> TcpSocketConnectOpts.t) =
          fun (x679 : t) -> TcpSocketConnectOpts.t_of_js (t_to_js x679)
        let (cast' : t -> SocketConstructorOpts.t) =
          fun (x680 : t) -> SocketConstructorOpts.t_of_js (t_to_js x680)
      end
    module IpcNetConnectOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x682 : Ojs.t) -> x682
        and t_to_js : t -> Ojs.t = fun (x681 : Ojs.t) -> x681
        let (get_timeout : t -> int) =
          fun (x683 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x683) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x684 : t) ->
            fun (x685 : int) ->
              Ojs.set_prop_ascii (t_to_js x684) "timeout"
                (Ojs.int_to_js x685)
        let (cast : t -> IpcSocketConnectOpts.t) =
          fun (x686 : t) -> IpcSocketConnectOpts.t_of_js (t_to_js x686)
        let (cast' : t -> SocketConstructorOpts.t) =
          fun (x687 : t) -> SocketConstructorOpts.t_of_js (t_to_js x687)
      end
    module NetConnectOpts =
      struct
        type t = (IpcNetConnectOpts.t, TcpNetConnectOpts.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x691 : Ojs.t) ->
            union2_of_js IpcNetConnectOpts.t_of_js TcpNetConnectOpts.t_of_js
              x691
        and t_to_js : t -> Ojs.t =
          fun (x688 : (IpcNetConnectOpts.t, TcpNetConnectOpts.t) union2) ->
            union2_to_js IpcNetConnectOpts.t_to_js TcpNetConnectOpts.t_to_js
              x688
      end
    let (create_server :
      ?connection_listener:(socket:Socket.t -> unit) -> unit -> Server.t) =
      fun ?connection_listener:(x694 : (socket:Socket.t -> unit) option) ->
        fun () ->
          Server.t_of_js
            (let x698 = Import.net in
             Ojs.call (Ojs.get_prop_ascii x698 "createServer") "apply"
               [|x698;((let x695 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x694 with
                         | Some x696 ->
                             ignore
                               (Ojs.call x695 "push"
                                  [|(Ojs.fun_to_js 1
                                       (fun (x697 : Ojs.t) ->
                                          x696 ~socket:(Socket.t_of_js x697)))|])
                         | None -> ());
                        x695))|])
    let (create_server :
      ?options:ServerOpts.t ->
        ?connection_listener:(socket:Socket.t -> unit) -> unit -> Server.t)
      =
      fun ?options:(x699 : ServerOpts.t option) ->
        fun ?connection_listener:(x700 : (socket:Socket.t -> unit) option) ->
          fun () ->
            Server.t_of_js
              (let x705 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x705 "createServer") "apply"
                 [|x705;((let x701 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x699 with
                           | Some x704 ->
                               ignore
                                 (Ojs.call x701 "push"
                                    [|(ServerOpts.t_to_js x704)|])
                           | None -> ());
                          (match x700 with
                           | Some x702 ->
                               ignore
                                 (Ojs.call x701 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x703 : Ojs.t) ->
                                            x702
                                              ~socket:(Socket.t_of_js x703)))|])
                           | None -> ());
                          x701))|])
    let (connect :
      options:NetConnectOpts.t ->
        ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~options:(x706 : NetConnectOpts.t) ->
        fun ?connection_listener:(x707 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x710 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x710 "connect") "apply"
                 [|x710;((let x708 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x708 "push"
                               [|(NetConnectOpts.t_to_js x706)|]);
                          (match x707 with
                           | Some x709 ->
                               ignore
                                 (Ojs.call x708 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x709 ()))|])
                           | None -> ());
                          x708))|])
    let (connect :
      port:int ->
        ?host:string ->
          ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~port:(x711 : int) ->
        fun ?host:(x712 : string option) ->
          fun ?connection_listener:(x713 : (unit -> unit) option) ->
            fun () ->
              Socket.t_of_js
                (let x717 = Import.net in
                 Ojs.call (Ojs.get_prop_ascii x717 "connect") "apply"
                   [|x717;((let x714 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x714 "push" [|(Ojs.int_to_js x711)|]);
                            (match x712 with
                             | Some x716 ->
                                 ignore
                                   (Ojs.call x714 "push"
                                      [|(Ojs.string_to_js x716)|])
                             | None -> ());
                            (match x713 with
                             | Some x715 ->
                                 ignore
                                   (Ojs.call x714 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x715 ()))|])
                             | None -> ());
                            x714))|])
    let (connect :
      path:string -> ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~path:(x718 : string) ->
        fun ?connection_listener:(x719 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x722 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x722 "connect") "apply"
                 [|x722;((let x720 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x720 "push" [|(Ojs.string_to_js x718)|]);
                          (match x719 with
                           | Some x721 ->
                               ignore
                                 (Ojs.call x720 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x721 ()))|])
                           | None -> ());
                          x720))|])
    let (create_connection :
      options:NetConnectOpts.t ->
        ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~options:(x723 : NetConnectOpts.t) ->
        fun ?connection_listener:(x724 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x727 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x727 "createConnection") "apply"
                 [|x727;((let x725 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x725 "push"
                               [|(NetConnectOpts.t_to_js x723)|]);
                          (match x724 with
                           | Some x726 ->
                               ignore
                                 (Ojs.call x725 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x726 ()))|])
                           | None -> ());
                          x725))|])
    let (create_connection :
      port:int ->
        ?host:string ->
          ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~port:(x728 : int) ->
        fun ?host:(x729 : string option) ->
          fun ?connection_listener:(x730 : (unit -> unit) option) ->
            fun () ->
              Socket.t_of_js
                (let x734 = Import.net in
                 Ojs.call (Ojs.get_prop_ascii x734 "createConnection")
                   "apply"
                   [|x734;((let x731 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x731 "push" [|(Ojs.int_to_js x728)|]);
                            (match x729 with
                             | Some x733 ->
                                 ignore
                                   (Ojs.call x731 "push"
                                      [|(Ojs.string_to_js x733)|])
                             | None -> ());
                            (match x730 with
                             | Some x732 ->
                                 ignore
                                   (Ojs.call x731 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x732 ()))|])
                             | None -> ());
                            x731))|])
    let (create_connection :
      path:string -> ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~path:(x735 : string) ->
        fun ?connection_listener:(x736 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x739 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x739 "createConnection") "apply"
                 [|x739;((let x737 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x737 "push" [|(Ojs.string_to_js x735)|]);
                          (match x736 with
                           | Some x738 ->
                               ignore
                                 (Ojs.call x737 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x738 ()))|])
                           | None -> ());
                          x737))|])
    let (is_ip : input:string -> int) =
      fun ~input:(x740 : string) ->
        Ojs.int_of_js
          (Ojs.call Import.net "isIP" [|(Ojs.string_to_js x740)|])
    let (is_i_pv4 : input:string -> bool) =
      fun ~input:(x741 : string) ->
        Ojs.bool_of_js
          (Ojs.call Import.net "isIPv4" [|(Ojs.string_to_js x741)|])
    let (is_i_pv6 : input:string -> bool) =
      fun ~input:(x742 : string) ->
        Ojs.bool_of_js
          (Ojs.call Import.net "isIPv6" [|(Ojs.string_to_js x742)|])
  end
