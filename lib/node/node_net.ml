[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module Net =
  struct
    open Node_stream
    open Node_dns
    module LookupFunction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
        and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
        let (apply :
          t ->
            hostname:string ->
              options:Dns.LookupOneOptions.t ->
                callback:(err:ErrnoException.t or_null ->
                            address:string -> family:int -> unit)
                  -> unit)
          =
          fun (x12 : t) ->
            fun ~hostname:(x5 : string) ->
              fun ~options:(x6 : Dns.LookupOneOptions.t) ->
                fun
                  ~callback:(x7 :
                              err:ErrnoException.t or_null ->
                                address:string -> family:int -> unit)
                  ->
                  ignore
                    (Ojs.apply (t_to_js x12)
                       [|(Ojs.string_to_js x5);(Dns.LookupOneOptions.t_to_js
                                                  x6);(Ojs.fun_to_js 3
                                                         (fun (x8 : Ojs.t) ->
                                                            fun (x10 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x11 : Ojs.t)
                                                                ->
                                                                x7
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x8)
                                                                  ~address:(
                                                                  Ojs.string_of_js
                                                                    x10)
                                                                  ~family:(
                                                                  Ojs.int_of_js
                                                                    x11)))|])
      end
    module AddressInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x14 : Ojs.t) -> x14
        and t_to_js : t -> Ojs.t = fun (x13 : Ojs.t) -> x13
        let (get_address : t -> string) =
          fun (x15 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15) "address")
        let (set_address : t -> string -> unit) =
          fun (x16 : t) ->
            fun (x17 : string) ->
              Ojs.set_prop_ascii (t_to_js x16) "address"
                (Ojs.string_to_js x17)
        let (get_family : t -> string) =
          fun (x18 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x18) "family")
        let (set_family : t -> string -> unit) =
          fun (x19 : t) ->
            fun (x20 : string) ->
              Ojs.set_prop_ascii (t_to_js x19) "family"
                (Ojs.string_to_js x20)
        let (get_port : t -> int) =
          fun (x21 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x21) "port")
        let (set_port : t -> int -> unit) =
          fun (x22 : t) ->
            fun (x23 : int) ->
              Ojs.set_prop_ascii (t_to_js x22) "port" (Ojs.int_to_js x23)
      end
    module SocketConstructorOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x25 : Ojs.t) -> x25
        and t_to_js : t -> Ojs.t = fun (x24 : Ojs.t) -> x24
        let (get_fd : t -> int) =
          fun (x26 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x26) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x27 : t) ->
            fun (x28 : int) ->
              Ojs.set_prop_ascii (t_to_js x27) "fd" (Ojs.int_to_js x28)
        let (get_allow_half_open : t -> bool) =
          fun (x29 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x29) "allowHalfOpen")
        let (set_allow_half_open : t -> bool -> unit) =
          fun (x30 : t) ->
            fun (x31 : bool) ->
              Ojs.set_prop_ascii (t_to_js x30) "allowHalfOpen"
                (Ojs.bool_to_js x31)
        let (get_readable : t -> bool) =
          fun (x32 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x32) "readable")
        let (set_readable : t -> bool -> unit) =
          fun (x33 : t) ->
            fun (x34 : bool) ->
              Ojs.set_prop_ascii (t_to_js x33) "readable"
                (Ojs.bool_to_js x34)
        let (get_writable : t -> bool) =
          fun (x35 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x35) "writable")
        let (set_writable : t -> bool -> unit) =
          fun (x36 : t) ->
            fun (x37 : bool) ->
              Ojs.set_prop_ascii (t_to_js x36) "writable"
                (Ojs.bool_to_js x37)
      end
    module OnReadOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
        and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
        let (get_buffer : t -> (Uint8Array.t, unit -> Uint8Array.t) union2) =
          fun (x40 : t) ->
            union2_of_js Uint8Array.t_of_js
              (fun (x42 : Ojs.t) ->
                 fun () -> Uint8Array.t_of_js (Ojs.apply x42 [||]))
              (Ojs.get_prop_ascii (t_to_js x40) "buffer")
        let (set_buffer :
          t -> (Uint8Array.t, unit -> Uint8Array.t) union2 -> unit) =
          fun (x43 : t) ->
            fun (x44 : (Uint8Array.t, unit -> Uint8Array.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x43) "buffer"
                (union2_to_js Uint8Array.t_to_js
                   (fun (x46 : unit -> Uint8Array.t) ->
                      Ojs.fun_to_js 1 (fun _ -> Uint8Array.t_to_js (x46 ())))
                   x44)
        let (callback : t -> bytes_written:int -> buf:Uint8Array.t -> bool) =
          fun (x49 : t) ->
            fun ~bytes_written:(x47 : int) ->
              fun ~buf:(x48 : Uint8Array.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x49) "callback"
                     [|(Ojs.int_to_js x47);(Uint8Array.t_to_js x48)|])
      end
    module ConnectOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
        and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
        let (get_onread : t -> OnReadOpts.t) =
          fun (x52 : t) ->
            OnReadOpts.t_of_js (Ojs.get_prop_ascii (t_to_js x52) "onread")
        let (set_onread : t -> OnReadOpts.t -> unit) =
          fun (x53 : t) ->
            fun (x54 : OnReadOpts.t) ->
              Ojs.set_prop_ascii (t_to_js x53) "onread"
                (OnReadOpts.t_to_js x54)
      end
    module TcpSocketConnectOpts =
      struct
        include struct include ConnectOpts end
        let (get_port : t -> int) =
          fun (x55 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x55) "port")
        let (set_port : t -> int -> unit) =
          fun (x56 : t) ->
            fun (x57 : int) ->
              Ojs.set_prop_ascii (t_to_js x56) "port" (Ojs.int_to_js x57)
        let (get_host : t -> string) =
          fun (x58 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x58) "host")
        let (set_host : t -> string -> unit) =
          fun (x59 : t) ->
            fun (x60 : string) ->
              Ojs.set_prop_ascii (t_to_js x59) "host" (Ojs.string_to_js x60)
        let (get_local_address : t -> string) =
          fun (x61 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x61) "localAddress")
        let (set_local_address : t -> string -> unit) =
          fun (x62 : t) ->
            fun (x63 : string) ->
              Ojs.set_prop_ascii (t_to_js x62) "localAddress"
                (Ojs.string_to_js x63)
        let (get_local_port : t -> int) =
          fun (x64 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x64) "localPort")
        let (set_local_port : t -> int -> unit) =
          fun (x65 : t) ->
            fun (x66 : int) ->
              Ojs.set_prop_ascii (t_to_js x65) "localPort"
                (Ojs.int_to_js x66)
        let (get_hints : t -> int) =
          fun (x67 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x67) "hints")
        let (set_hints : t -> int -> unit) =
          fun (x68 : t) ->
            fun (x69 : int) ->
              Ojs.set_prop_ascii (t_to_js x68) "hints" (Ojs.int_to_js x69)
        let (get_family : t -> int) =
          fun (x70 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x70) "family")
        let (set_family : t -> int -> unit) =
          fun (x71 : t) ->
            fun (x72 : int) ->
              Ojs.set_prop_ascii (t_to_js x71) "family" (Ojs.int_to_js x72)
        let (get_lookup : t -> LookupFunction.t) =
          fun (x73 : t) ->
            LookupFunction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x73) "lookup")
        let (set_lookup : t -> LookupFunction.t -> unit) =
          fun (x74 : t) ->
            fun (x75 : LookupFunction.t) ->
              Ojs.set_prop_ascii (t_to_js x74) "lookup"
                (LookupFunction.t_to_js x75)
      end
    module IpcSocketConnectOpts =
      struct
        include struct include ConnectOpts end
        let (get_path : t -> string) =
          fun (x76 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x76) "path")
        let (set_path : t -> string -> unit) =
          fun (x77 : t) ->
            fun (x78 : string) ->
              Ojs.set_prop_ascii (t_to_js x77) "path" (Ojs.string_to_js x78)
      end
    module SocketConnectOpts =
      struct
        type t = (IpcSocketConnectOpts.t, TcpSocketConnectOpts.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x82 : Ojs.t) ->
            union2_of_js IpcSocketConnectOpts.t_of_js
              TcpSocketConnectOpts.t_of_js x82
        and t_to_js : t -> Ojs.t =
          fun (x79 : (IpcSocketConnectOpts.t, TcpSocketConnectOpts.t) union2)
            ->
            union2_to_js IpcSocketConnectOpts.t_to_js
              TcpSocketConnectOpts.t_to_js x79
      end
    module Socket =
      struct
        include struct include Stream.Duplex end
        let (create : ?options:SocketConstructorOpts.t -> unit -> t) =
          fun ?options:(x85 : SocketConstructorOpts.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Socket")
                   (let x86 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x85 with
                     | Some x87 ->
                         ignore
                           (Ojs.call x86 "push"
                              [|(SocketConstructorOpts.t_to_js x87)|])
                     | None -> ());
                    x86))
        let (write :
          t ->
            buffer:Uint8Array.t or_string ->
              ?cb:(?err:Error.t -> unit -> unit) -> unit -> bool)
          =
          fun (x95 : t) ->
            fun ~buffer:(x88 : Uint8Array.t or_string) ->
              fun ?cb:(x89 : (?err:Error.t -> unit -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x96 = t_to_js x95 in
                     Ojs.call (Ojs.get_prop_ascii x96 "write") "apply"
                       [|x96;((let x90 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x90 "push"
                                    [|(or_string_to_js Uint8Array.t_to_js x88)|]);
                               (match x89 with
                                | Some x91 ->
                                    ignore
                                      (Ojs.call x90 "push"
                                         [|(Ojs.fun_to_js 1
                                              (fun (x92 : Ojs.t) ->
                                                 x91
                                                   ?err:(Ojs.option_of_js
                                                           Error.t_of_js x92)
                                                   ()))|])
                                | None -> ());
                               x90))|])
        let (write' :
          t ->
            str:Uint8Array.t or_string ->
              ?encoding:BufferEncoding.t ->
                ?cb:(?err:Error.t -> unit -> unit) -> unit -> bool)
          =
          fun (x106 : t) ->
            fun ~str:(x97 : Uint8Array.t or_string) ->
              fun ?encoding:(x98 : BufferEncoding.t option) ->
                fun ?cb:(x99 : (?err:Error.t -> unit -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x107 = t_to_js x106 in
                       Ojs.call (Ojs.get_prop_ascii x107 "write") "apply"
                         [|x107;((let x100 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x100 "push"
                                       [|(or_string_to_js Uint8Array.t_to_js
                                            x97)|]);
                                  (match x98 with
                                   | Some x104 ->
                                       ignore
                                         (Ojs.call x100 "push"
                                            [|(BufferEncoding.t_to_js x104)|])
                                   | None -> ());
                                  (match x99 with
                                   | Some x101 ->
                                       ignore
                                         (Ojs.call x100 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x102 : Ojs.t) ->
                                                    x101
                                                      ?err:(Ojs.option_of_js
                                                              Error.t_of_js
                                                              x102) ()))|])
                                   | None -> ());
                                  x100))|])
        let (connect :
          t ->
            options:SocketConnectOpts.t ->
              ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x112 : t) ->
            fun ~options:(x108 : SocketConnectOpts.t) ->
              fun ?connection_listener:(x109 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x113 = t_to_js x112 in
                     Ojs.call (Ojs.get_prop_ascii x113 "connect") "apply"
                       [|x113;((let x110 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x110 "push"
                                     [|(SocketConnectOpts.t_to_js x108)|]);
                                (match x109 with
                                 | Some x111 ->
                                     ignore
                                       (Ojs.call x110 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x111 ()))|])
                                 | None -> ());
                                x110))|])
        let (connect' :
          t ->
            port:int ->
              host:string -> ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x119 : t) ->
            fun ~port:(x114 : int) ->
              fun ~host:(x115 : string) ->
                fun ?connection_listener:(x116 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x120 = t_to_js x119 in
                       Ojs.call (Ojs.get_prop_ascii x120 "connect") "apply"
                         [|x120;((let x117 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x117 "push"
                                       [|(Ojs.int_to_js x114)|]);
                                  ignore
                                    (Ojs.call x117 "push"
                                       [|(Ojs.string_to_js x115)|]);
                                  (match x116 with
                                   | Some x118 ->
                                       ignore
                                         (Ojs.call x117 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x118 ()))|])
                                   | None -> ());
                                  x117))|])
        let (connect'' :
          t -> port:int -> ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x125 : t) ->
            fun ~port:(x121 : int) ->
              fun ?connection_listener:(x122 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x126 = t_to_js x125 in
                     Ojs.call (Ojs.get_prop_ascii x126 "connect") "apply"
                       [|x126;((let x123 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x123 "push"
                                     [|(Ojs.int_to_js x121)|]);
                                (match x122 with
                                 | Some x124 ->
                                     ignore
                                       (Ojs.call x123 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x124 ()))|])
                                 | None -> ());
                                x123))|])
        let (connect''' :
          t ->
            path:string -> ?connection_listener:(unit -> unit) -> unit -> t)
          =
          fun (x131 : t) ->
            fun ~path:(x127 : string) ->
              fun ?connection_listener:(x128 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x132 = t_to_js x131 in
                     Ojs.call (Ojs.get_prop_ascii x132 "connect") "apply"
                       [|x132;((let x129 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x129 "push"
                                     [|(Ojs.string_to_js x127)|]);
                                (match x128 with
                                 | Some x130 ->
                                     ignore
                                       (Ojs.call x129 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x130 ()))|])
                                 | None -> ());
                                x129))|])
        let (set_encoding : t -> ?encoding:BufferEncoding.t -> unit -> t) =
          fun (x136 : t) ->
            fun ?encoding:(x133 : BufferEncoding.t option) ->
              fun () ->
                t_of_js
                  (let x137 = t_to_js x136 in
                   Ojs.call (Ojs.get_prop_ascii x137 "setEncoding") "apply"
                     [|x137;((let x134 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x133 with
                               | Some x135 ->
                                   ignore
                                     (Ojs.call x134 "push"
                                        [|(BufferEncoding.t_to_js x135)|])
                               | None -> ());
                              x134))|])
        let (pause : t -> t) =
          fun (x138 : t) -> t_of_js (Ojs.call (t_to_js x138) "pause" [||])
        let (resume : t -> t) =
          fun (x139 : t) -> t_of_js (Ojs.call (t_to_js x139) "resume" [||])
        let (set_timeout :
          t -> timeout:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x144 : t) ->
            fun ~timeout:(x140 : int) ->
              fun ?callback:(x141 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x145 = t_to_js x144 in
                     Ojs.call (Ojs.get_prop_ascii x145 "setTimeout") "apply"
                       [|x145;((let x142 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x142 "push"
                                     [|(Ojs.int_to_js x140)|]);
                                (match x141 with
                                 | Some x143 ->
                                     ignore
                                       (Ojs.call x142 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x143 ()))|])
                                 | None -> ());
                                x142))|])
        let (set_no_delay : t -> ?no_delay:bool -> unit -> t) =
          fun (x149 : t) ->
            fun ?no_delay:(x146 : bool option) ->
              fun () ->
                t_of_js
                  (let x150 = t_to_js x149 in
                   Ojs.call (Ojs.get_prop_ascii x150 "setNoDelay") "apply"
                     [|x150;((let x147 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x146 with
                               | Some x148 ->
                                   ignore
                                     (Ojs.call x147 "push"
                                        [|(Ojs.bool_to_js x148)|])
                               | None -> ());
                              x147))|])
        let (set_keep_alive :
          t -> ?enable:bool -> ?initial_delay:int -> unit -> t) =
          fun (x156 : t) ->
            fun ?enable:(x151 : bool option) ->
              fun ?initial_delay:(x152 : int option) ->
                fun () ->
                  t_of_js
                    (let x157 = t_to_js x156 in
                     Ojs.call (Ojs.get_prop_ascii x157 "setKeepAlive")
                       "apply"
                       [|x157;((let x153 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x151 with
                                 | Some x155 ->
                                     ignore
                                       (Ojs.call x153 "push"
                                          [|(Ojs.bool_to_js x155)|])
                                 | None -> ());
                                (match x152 with
                                 | Some x154 ->
                                     ignore
                                       (Ojs.call x153 "push"
                                          [|(Ojs.int_to_js x154)|])
                                 | None -> ());
                                x153))|])
        let (address : t -> (AddressInfo.t, AnonymousInterface0.t) union2) =
          fun (x158 : t) ->
            union2_of_js AddressInfo.t_of_js AnonymousInterface0.t_of_js
              (Ojs.call (t_to_js x158) "address" [||])
        let (unref : t -> t) =
          fun (x161 : t) -> t_of_js (Ojs.call (t_to_js x161) "unref" [||])
        let (ref : t -> t) =
          fun (x162 : t) -> t_of_js (Ojs.call (t_to_js x162) "ref" [||])
        let (get_buffer_size : t -> int) =
          fun (x163 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x163) "bufferSize")
        let (get_bytes_read : t -> int) =
          fun (x164 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x164) "bytesRead")
        let (get_bytes_written : t -> int) =
          fun (x165 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x165) "bytesWritten")
        let (get_connecting : t -> bool) =
          fun (x166 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x166) "connecting")
        let (get_destroyed : t -> bool) =
          fun (x167 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x167) "destroyed")
        let (get_local_address : t -> string) =
          fun (x168 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x168) "localAddress")
        let (get_local_port : t -> int) =
          fun (x169 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x169) "localPort")
        let (get_remote_address : t -> string) =
          fun (x170 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x170) "remoteAddress")
        let (get_remote_family : t -> string) =
          fun (x171 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x171) "remoteFamily")
        let (get_remote_port : t -> int) =
          fun (x172 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x172) "remotePort")
        let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
          fun (x176 : t) ->
            fun ?cb:(x173 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x177 = t_to_js x176 in
                   Ojs.call (Ojs.get_prop_ascii x177 "end") "apply"
                     [|x177;((let x174 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x173 with
                               | Some x175 ->
                                   ignore
                                     (Ojs.call x174 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x175 ()))|])
                               | None -> ());
                              x174))|])
        let (end_' :
          t ->
            buffer:Uint8Array.t or_string ->
              ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x183 : t) ->
            fun ~buffer:(x178 : Uint8Array.t or_string) ->
              fun ?cb:(x179 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x184 = t_to_js x183 in
                     Ojs.call (Ojs.get_prop_ascii x184 "end") "apply"
                       [|x184;((let x180 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x180 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x178)|]);
                                (match x179 with
                                 | Some x181 ->
                                     ignore
                                       (Ojs.call x180 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x181 ()))|])
                                 | None -> ());
                                x180))|])
        let (end_'' :
          t ->
            str:Uint8Array.t or_string ->
              ?encoding:BufferEncoding.t ->
                ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x192 : t) ->
            fun ~str:(x185 : Uint8Array.t or_string) ->
              fun ?encoding:(x186 : BufferEncoding.t option) ->
                fun ?cb:(x187 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x193 = t_to_js x192 in
                       Ojs.call (Ojs.get_prop_ascii x193 "end") "apply"
                         [|x193;((let x188 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x188 "push"
                                       [|(or_string_to_js Uint8Array.t_to_js
                                            x185)|]);
                                  (match x186 with
                                   | Some x190 ->
                                       ignore
                                         (Ojs.call x188 "push"
                                            [|(BufferEncoding.t_to_js x190)|])
                                   | None -> ());
                                  (match x187 with
                                   | Some x189 ->
                                       ignore
                                         (Ojs.call x188 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x189 ()))|])
                                   | None -> ());
                                  x188))|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x198 : t) ->
            fun ~event:(x194 : string) ->
              fun ~listener:(x195 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x198) "addListener"
                     [|(Ojs.string_to_js x194);(Ojs.fun_to_js_args
                                                  (fun (x196 : _) ->
                                                     x195
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x196 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x202 : t) ->
            fun ~event:(x199 : [ `close ]) ->
              fun ~listener:(x200 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x202) "addListener"
                     [|((match x199 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x201 : Ojs.t) ->
                            x200 ~had_error:(Ojs.bool_of_js x201)))|])
        let (add_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x205 : t) ->
            fun ~event:(x203 : [ `connect ]) ->
              fun ~listener:(x204 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x205) "addListener"
                     [|((match x203 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x204 ()))|])
        let (add_listener''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x209 : t) ->
            fun ~event:(x206 : [ `data ]) ->
              fun ~listener:(x207 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x209) "addListener"
                     [|((match x206 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x208 : Ojs.t) ->
                            x207 ~data:(Buffer.t_of_js x208)))|])
        let (add_listener'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x212 : t) ->
            fun ~event:(x210 : [ `drain ]) ->
              fun ~listener:(x211 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x212) "addListener"
                     [|((match x210 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x211 ()))|])
        let (add_listener''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x215 : t) ->
            fun ~event:(x213 : [ `end_ ]) ->
              fun ~listener:(x214 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x215) "addListener"
                     [|((match x213 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x214 ()))|])
        let (add_listener'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x219 : t) ->
            fun ~event:(x216 : [ `error ]) ->
              fun ~listener:(x217 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x219) "addListener"
                     [|((match x216 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x218 : Ojs.t) ->
                            x217 ~err:(Error.t_of_js x218)))|])
        let (add_listener''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x227 : t) ->
            fun ~event:(x220 : [ `lookup ]) ->
              fun
                ~listener:(x221 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x227) "addListener"
                     [|((match x220 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x222 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x223 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x224 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x226 :
                                                                    Ojs.t) ->
                                                                    x221
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x222)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x223)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x224)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x226)))|])
        let (add_listener'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x230 : t) ->
            fun ~event:(x228 : [ `timeout ]) ->
              fun ~listener:(x229 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x230) "addListener"
                     [|((match x228 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x229 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x236 : t) ->
            fun ~event:(x231 : symbol or_string) ->
              fun ~args:(x232 : any list) ->
                Ojs.bool_of_js
                  (let x237 = t_to_js x236 in
                   Ojs.call (Ojs.get_prop_ascii x237 "emit") "apply"
                     [|x237;((let x233 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x233 "push"
                                   [|(or_string_to_js symbol_to_js x231)|]);
                              List.iter
                                (fun (x234 : any) ->
                                   ignore
                                     (Ojs.call x233 "push"
                                        [|(any_to_js x234)|])) x232;
                              x233))|])
        let (emit' : t -> event:[ `close ] -> had_error:bool -> bool) =
          fun (x240 : t) ->
            fun ~event:(x238 : [ `close ]) ->
              fun ~had_error:(x239 : bool) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x240) "emit"
                     [|((match x238 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.bool_to_js x239)|])
        let (emit'' : t -> event:[ `connect ] -> bool) =
          fun (x242 : t) ->
            fun ~event:(x241 : [ `connect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x242) "emit"
                   [|((match x241 with
                       | `connect -> Ojs.string_to_js "connect"))|])
        let (emit''' : t -> event:[ `data ] -> data:Buffer.t -> bool) =
          fun (x245 : t) ->
            fun ~event:(x243 : [ `data ]) ->
              fun ~data:(x244 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x245) "emit"
                     [|((match x243 with | `data -> Ojs.string_to_js "data"));(
                       Buffer.t_to_js x244)|])
        let (emit'''' : t -> event:[ `drain ] -> bool) =
          fun (x247 : t) ->
            fun ~event:(x246 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x247) "emit"
                   [|((match x246 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit''''' : t -> event:[ `end_ ] -> bool) =
          fun (x249 : t) ->
            fun ~event:(x248 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x249) "emit"
                   [|((match x248 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit'''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x252 : t) ->
            fun ~event:(x250 : [ `error ]) ->
              fun ~err:(x251 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x252) "emit"
                     [|((match x250 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x251)|])
        let (emit''''''' :
          t ->
            event:[ `lookup ] ->
              err:Error.t ->
                address:string ->
                  family:string or_number -> host:string -> bool)
          =
          fun (x259 : t) ->
            fun ~event:(x253 : [ `lookup ]) ->
              fun ~err:(x254 : Error.t) ->
                fun ~address:(x255 : string) ->
                  fun ~family:(x256 : string or_number) ->
                    fun ~host:(x258 : string) ->
                      Ojs.bool_of_js
                        (Ojs.call (t_to_js x259) "emit"
                           [|((match x253 with
                               | `lookup -> Ojs.string_to_js "lookup"));(
                             Error.t_to_js x254);(Ojs.string_to_js x255);(
                             or_number_to_js Ojs.string_to_js x256);(
                             Ojs.string_to_js x258)|])
        let (emit'''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x261 : t) ->
            fun ~event:(x260 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x261) "emit"
                   [|((match x260 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        module CloseListener =
          struct
            type t = had_error:bool -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x264 : Ojs.t) ->
                fun ~had_error:(x265 : bool) ->
                  ignore (Ojs.apply x264 [|(Ojs.bool_to_js x265)|])
            and t_to_js : t -> Ojs.t =
              fun (x262 : had_error:bool -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x263 : Ojs.t) ->
                     x262 ~had_error:(Ojs.bool_of_js x263))
          end
        module ConnectListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x267 : Ojs.t) -> fun () -> ignore (Ojs.apply x267 [||])
            and t_to_js : t -> Ojs.t =
              fun (x266 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x266 ())
          end
        module DataListener =
          struct
            type t = data:Buffer.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x270 : Ojs.t) ->
                fun ~data:(x271 : Buffer.t) ->
                  ignore (Ojs.apply x270 [|(Buffer.t_to_js x271)|])
            and t_to_js : t -> Ojs.t =
              fun (x268 : data:Buffer.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x269 : Ojs.t) -> x268 ~data:(Buffer.t_of_js x269))
          end
        module DrainListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x273 : Ojs.t) -> fun () -> ignore (Ojs.apply x273 [||])
            and t_to_js : t -> Ojs.t =
              fun (x272 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x272 ())
          end
        module EndListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x275 : Ojs.t) -> fun () -> ignore (Ojs.apply x275 [||])
            and t_to_js : t -> Ojs.t =
              fun (x274 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x274 ())
          end
        module ErrorListener =
          struct
            type t = err:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x278 : Ojs.t) ->
                fun ~err:(x279 : Error.t) ->
                  ignore (Ojs.apply x278 [|(Error.t_to_js x279)|])
            and t_to_js : t -> Ojs.t =
              fun (x276 : err:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x277 : Ojs.t) -> x276 ~err:(Error.t_of_js x277))
          end
        module LookupListener =
          struct
            type t =
              err:Error.t ->
                address:string ->
                  family:string or_number -> host:string -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x286 : Ojs.t) ->
                fun ~err:(x287 : Error.t) ->
                  fun ~address:(x288 : string) ->
                    fun ~family:(x289 : string or_number) ->
                      fun ~host:(x291 : string) ->
                        ignore
                          (Ojs.apply x286
                             [|(Error.t_to_js x287);(Ojs.string_to_js x288);(
                               or_number_to_js Ojs.string_to_js x289);(
                               Ojs.string_to_js x291)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x280 :
                  err:Error.t ->
                    address:string ->
                      family:string or_number -> host:string -> unit)
                ->
                Ojs.fun_to_js 4
                  (fun (x281 : Ojs.t) ->
                     fun (x282 : Ojs.t) ->
                       fun (x283 : Ojs.t) ->
                         fun (x285 : Ojs.t) ->
                           x280 ~err:(Error.t_of_js x281)
                             ~address:(Ojs.string_of_js x282)
                             ~family:(or_number_of_js Ojs.string_of_js x283)
                             ~host:(Ojs.string_of_js x285))
          end
        module TimeoutListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x293 : Ojs.t) -> fun () -> ignore (Ojs.apply x293 [||])
            and t_to_js : t -> Ojs.t =
              fun (x292 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x292 ())
          end
        type listener =
          [ `Close of CloseListener.t  | `Connect of ConnectListener.t 
          | `Data of DataListener.t  | `Drain of DrainListener.t 
          | `End_ of EndListener.t  | `Error of ErrorListener.t 
          | `Lookup of LookupListener.t  | `Timeout of TimeoutListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x294 :
              [ `Close of CloseListener.t  | `Connect of ConnectListener.t 
              | `Data of DataListener.t  | `Drain of DrainListener.t 
              | `End_ of EndListener.t  | `Error of ErrorListener.t 
              | `Lookup of LookupListener.t 
              | `Timeout of TimeoutListener.t ])
            ->
            match x294 with
            | `Close x295 -> CloseListener.t_to_js x295
            | `Connect x296 -> ConnectListener.t_to_js x296
            | `Data x297 -> DataListener.t_to_js x297
            | `Drain x298 -> DrainListener.t_to_js x298
            | `End_ x299 -> EndListener.t_to_js x299
            | `Error x300 -> ErrorListener.t_to_js x300
            | `Lookup x301 -> LookupListener.t_to_js x301
            | `Timeout x302 -> TimeoutListener.t_to_js x302
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x307 : t) ->
            fun (x305 : string) ->
              fun (x306 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x307) "on"
                     [|(Ojs.string_to_js x305);x306|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x310 : t) ->
            fun (x308 : string) ->
              fun (x309 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x310) "addListener"
                     [|(Ojs.string_to_js x308);x309|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x313 : t) ->
            fun (x311 : string) ->
              fun (x312 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x313) "once"
                     [|(Ojs.string_to_js x311);x312|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x316 : t) ->
            fun (x314 : string) ->
              fun (x315 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x316) "prependListener"
                     [|(Ojs.string_to_js x314);x315|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x319 : t) ->
            fun (x317 : string) ->
              fun (x318 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x319) "prependOnceListener"
                     [|(Ojs.string_to_js x317);x318|])
        let with_listener_fn fn t =
          function
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
          | `Connect f -> (fn t "connect") @@ (ConnectListener.t_to_js f)
          | `Data f -> (fn t "data") @@ (DataListener.t_to_js f)
          | `Drain f -> (fn t "drain") @@ (DrainListener.t_to_js f)
          | `End_ f -> (fn t "end_") @@ (EndListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Lookup f -> (fn t "lookup") @@ (LookupListener.t_to_js f)
          | `Timeout f -> (fn t "timeout") @@ (TimeoutListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x332 : t) ->
            fun ~event:(x328 : string) ->
              fun ~listener:(x329 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x332) "on"
                     [|(Ojs.string_to_js x328);(Ojs.fun_to_js_args
                                                  (fun (x330 : _) ->
                                                     x329
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x330 0)))|])
      end
    module ListenOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x334 : Ojs.t) -> x334
        and t_to_js : t -> Ojs.t = fun (x333 : Ojs.t) -> x333
        let (get_port : t -> int) =
          fun (x335 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x335) "port")
        let (set_port : t -> int -> unit) =
          fun (x336 : t) ->
            fun (x337 : int) ->
              Ojs.set_prop_ascii (t_to_js x336) "port" (Ojs.int_to_js x337)
        let (get_host : t -> string) =
          fun (x338 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x338) "host")
        let (set_host : t -> string -> unit) =
          fun (x339 : t) ->
            fun (x340 : string) ->
              Ojs.set_prop_ascii (t_to_js x339) "host"
                (Ojs.string_to_js x340)
        let (get_backlog : t -> int) =
          fun (x341 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x341) "backlog")
        let (set_backlog : t -> int -> unit) =
          fun (x342 : t) ->
            fun (x343 : int) ->
              Ojs.set_prop_ascii (t_to_js x342) "backlog"
                (Ojs.int_to_js x343)
        let (get_path : t -> string) =
          fun (x344 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x344) "path")
        let (set_path : t -> string -> unit) =
          fun (x345 : t) ->
            fun (x346 : string) ->
              Ojs.set_prop_ascii (t_to_js x345) "path"
                (Ojs.string_to_js x346)
        let (get_exclusive : t -> bool) =
          fun (x347 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x347) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x348 : t) ->
            fun (x349 : bool) ->
              Ojs.set_prop_ascii (t_to_js x348) "exclusive"
                (Ojs.bool_to_js x349)
        let (get_readable_all : t -> bool) =
          fun (x350 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x350) "readableAll")
        let (set_readable_all : t -> bool -> unit) =
          fun (x351 : t) ->
            fun (x352 : bool) ->
              Ojs.set_prop_ascii (t_to_js x351) "readableAll"
                (Ojs.bool_to_js x352)
        let (get_writable_all : t -> bool) =
          fun (x353 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x353) "writableAll")
        let (set_writable_all : t -> bool -> unit) =
          fun (x354 : t) ->
            fun (x355 : bool) ->
              Ojs.set_prop_ascii (t_to_js x354) "writableAll"
                (Ojs.bool_to_js x355)
        let (get_ipv6Only : t -> bool) =
          fun (x356 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x356) "ipv6Only")
        let (set_ipv6Only : t -> bool -> unit) =
          fun (x357 : t) ->
            fun (x358 : bool) ->
              Ojs.set_prop_ascii (t_to_js x357) "ipv6Only"
                (Ojs.bool_to_js x358)
      end
    module ServerOpts =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x360 : Ojs.t) -> x360
        and t_to_js : t -> Ojs.t = fun (x359 : Ojs.t) -> x359
        let (get_allow_half_open : t -> bool) =
          fun (x361 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x361) "allowHalfOpen")
        let (set_allow_half_open : t -> bool -> unit) =
          fun (x362 : t) ->
            fun (x363 : bool) ->
              Ojs.set_prop_ascii (t_to_js x362) "allowHalfOpen"
                (Ojs.bool_to_js x363)
        let (get_pause_on_connect : t -> bool) =
          fun (x364 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x364) "pauseOnConnect")
        let (set_pause_on_connect : t -> bool -> unit) =
          fun (x365 : t) ->
            fun (x366 : bool) ->
              Ojs.set_prop_ascii (t_to_js x365) "pauseOnConnect"
                (Ojs.bool_to_js x366)
      end
    module Server =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x368 : Ojs.t) -> x368
        and t_to_js : t -> Ojs.t = fun (x367 : Ojs.t) -> x367
        let (create :
          ?connection_listener:(socket:Socket.t -> unit) -> unit -> t) =
          fun ?connection_listener:(x369 : (socket:Socket.t -> unit) option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Server")
                   (let x370 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x369 with
                     | Some x371 ->
                         ignore
                           (Ojs.call x370 "push"
                              [|(Ojs.fun_to_js 1
                                   (fun (x372 : Ojs.t) ->
                                      x371 ~socket:(Socket.t_of_js x372)))|])
                     | None -> ());
                    x370))
        let (create' :
          ?options:ServerOpts.t ->
            ?connection_listener:(socket:Socket.t -> unit) -> unit -> t)
          =
          fun ?options:(x373 : ServerOpts.t option) ->
            fun
              ?connection_listener:(x374 : (socket:Socket.t -> unit) option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Server")
                     (let x375 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x373 with
                       | Some x378 ->
                           ignore
                             (Ojs.call x375 "push"
                                [|(ServerOpts.t_to_js x378)|])
                       | None -> ());
                      (match x374 with
                       | Some x376 ->
                           ignore
                             (Ojs.call x375 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x377 : Ojs.t) ->
                                        x376 ~socket:(Socket.t_of_js x377)))|])
                       | None -> ());
                      x375))
        let (listen :
          t ->
            ?port:int ->
              ?hostname:string ->
                ?backlog:int ->
                  ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x388 : t) ->
            fun ?port:(x379 : int option) ->
              fun ?hostname:(x380 : string option) ->
                fun ?backlog:(x381 : int option) ->
                  fun ?listening_listener:(x382 : (unit -> unit) option) ->
                    fun () ->
                      t_of_js
                        (let x389 = t_to_js x388 in
                         Ojs.call (Ojs.get_prop_ascii x389 "listen") "apply"
                           [|x389;((let x383 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x379 with
                                     | Some x387 ->
                                         ignore
                                           (Ojs.call x383 "push"
                                              [|(Ojs.int_to_js x387)|])
                                     | None -> ());
                                    (match x380 with
                                     | Some x386 ->
                                         ignore
                                           (Ojs.call x383 "push"
                                              [|(Ojs.string_to_js x386)|])
                                     | None -> ());
                                    (match x381 with
                                     | Some x385 ->
                                         ignore
                                           (Ojs.call x383 "push"
                                              [|(Ojs.int_to_js x385)|])
                                     | None -> ());
                                    (match x382 with
                                     | Some x384 ->
                                         ignore
                                           (Ojs.call x383 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x384 ()))|])
                                     | None -> ());
                                    x383))|])
        let (listen' :
          t ->
            ?port:int ->
              ?hostname:string ->
                ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x397 : t) ->
            fun ?port:(x390 : int option) ->
              fun ?hostname:(x391 : string option) ->
                fun ?listening_listener:(x392 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x398 = t_to_js x397 in
                       Ojs.call (Ojs.get_prop_ascii x398 "listen") "apply"
                         [|x398;((let x393 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x390 with
                                   | Some x396 ->
                                       ignore
                                         (Ojs.call x393 "push"
                                            [|(Ojs.int_to_js x396)|])
                                   | None -> ());
                                  (match x391 with
                                   | Some x395 ->
                                       ignore
                                         (Ojs.call x393 "push"
                                            [|(Ojs.string_to_js x395)|])
                                   | None -> ());
                                  (match x392 with
                                   | Some x394 ->
                                       ignore
                                         (Ojs.call x393 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x394 ()))|])
                                   | None -> ());
                                  x393))|])
        let (listen'' :
          t ->
            ?port:int ->
              ?backlog:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x406 : t) ->
            fun ?port:(x399 : int option) ->
              fun ?backlog:(x400 : int option) ->
                fun ?listening_listener:(x401 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x407 = t_to_js x406 in
                       Ojs.call (Ojs.get_prop_ascii x407 "listen") "apply"
                         [|x407;((let x402 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x399 with
                                   | Some x405 ->
                                       ignore
                                         (Ojs.call x402 "push"
                                            [|(Ojs.int_to_js x405)|])
                                   | None -> ());
                                  (match x400 with
                                   | Some x404 ->
                                       ignore
                                         (Ojs.call x402 "push"
                                            [|(Ojs.int_to_js x404)|])
                                   | None -> ());
                                  (match x401 with
                                   | Some x403 ->
                                       ignore
                                         (Ojs.call x402 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x403 ()))|])
                                   | None -> ());
                                  x402))|])
        let (listen''' :
          t -> ?port:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x413 : t) ->
            fun ?port:(x408 : int option) ->
              fun ?listening_listener:(x409 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x414 = t_to_js x413 in
                     Ojs.call (Ojs.get_prop_ascii x414 "listen") "apply"
                       [|x414;((let x410 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x408 with
                                 | Some x412 ->
                                     ignore
                                       (Ojs.call x410 "push"
                                          [|(Ojs.int_to_js x412)|])
                                 | None -> ());
                                (match x409 with
                                 | Some x411 ->
                                     ignore
                                       (Ojs.call x410 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x411 ()))|])
                                 | None -> ());
                                x410))|])
        let (listen'''' :
          t ->
            path:string ->
              ?backlog:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x421 : t) ->
            fun ~path:(x415 : string) ->
              fun ?backlog:(x416 : int option) ->
                fun ?listening_listener:(x417 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x422 = t_to_js x421 in
                       Ojs.call (Ojs.get_prop_ascii x422 "listen") "apply"
                         [|x422;((let x418 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x418 "push"
                                       [|(Ojs.string_to_js x415)|]);
                                  (match x416 with
                                   | Some x420 ->
                                       ignore
                                         (Ojs.call x418 "push"
                                            [|(Ojs.int_to_js x420)|])
                                   | None -> ());
                                  (match x417 with
                                   | Some x419 ->
                                       ignore
                                         (Ojs.call x418 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x419 ()))|])
                                   | None -> ());
                                  x418))|])
        let (listen''''' :
          t -> path:string -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x427 : t) ->
            fun ~path:(x423 : string) ->
              fun ?listening_listener:(x424 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x428 = t_to_js x427 in
                     Ojs.call (Ojs.get_prop_ascii x428 "listen") "apply"
                       [|x428;((let x425 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x425 "push"
                                     [|(Ojs.string_to_js x423)|]);
                                (match x424 with
                                 | Some x426 ->
                                     ignore
                                       (Ojs.call x425 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x426 ()))|])
                                 | None -> ());
                                x425))|])
        let (listen'''''' :
          t ->
            options:ListenOptions.t ->
              ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x433 : t) ->
            fun ~options:(x429 : ListenOptions.t) ->
              fun ?listening_listener:(x430 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x434 = t_to_js x433 in
                     Ojs.call (Ojs.get_prop_ascii x434 "listen") "apply"
                       [|x434;((let x431 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x431 "push"
                                     [|(ListenOptions.t_to_js x429)|]);
                                (match x430 with
                                 | Some x432 ->
                                     ignore
                                       (Ojs.call x431 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x432 ()))|])
                                 | None -> ());
                                x431))|])
        let (listen''''''' :
          t ->
            handle:any ->
              ?backlog:int -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x441 : t) ->
            fun ~handle:(x435 : any) ->
              fun ?backlog:(x436 : int option) ->
                fun ?listening_listener:(x437 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x442 = t_to_js x441 in
                       Ojs.call (Ojs.get_prop_ascii x442 "listen") "apply"
                         [|x442;((let x438 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x438 "push"
                                       [|(any_to_js x435)|]);
                                  (match x436 with
                                   | Some x440 ->
                                       ignore
                                         (Ojs.call x438 "push"
                                            [|(Ojs.int_to_js x440)|])
                                   | None -> ());
                                  (match x437 with
                                   | Some x439 ->
                                       ignore
                                         (Ojs.call x438 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x439 ()))|])
                                   | None -> ());
                                  x438))|])
        let (listen'''''''' :
          t -> handle:any -> ?listening_listener:(unit -> unit) -> unit -> t)
          =
          fun (x447 : t) ->
            fun ~handle:(x443 : any) ->
              fun ?listening_listener:(x444 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x448 = t_to_js x447 in
                     Ojs.call (Ojs.get_prop_ascii x448 "listen") "apply"
                       [|x448;((let x445 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x445 "push" [|(any_to_js x443)|]);
                                (match x444 with
                                 | Some x446 ->
                                     ignore
                                       (Ojs.call x445 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x446 ()))|])
                                 | None -> ());
                                x445))|])
        let (close :
          t -> ?callback:(?err:Error.t -> unit -> unit) -> unit -> t) =
          fun (x454 : t) ->
            fun ?callback:(x449 : (?err:Error.t -> unit -> unit) option) ->
              fun () ->
                t_of_js
                  (let x455 = t_to_js x454 in
                   Ojs.call (Ojs.get_prop_ascii x455 "close") "apply"
                     [|x455;((let x450 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x449 with
                               | Some x451 ->
                                   ignore
                                     (Ojs.call x450 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x452 : Ojs.t) ->
                                                x451
                                                  ?err:(Ojs.option_of_js
                                                          Error.t_of_js x452)
                                                  ()))|])
                               | None -> ());
                              x450))|])
        let (address : t -> AddressInfo.t or_string or_null) =
          fun (x456 : t) ->
            or_null_of_js
              (fun (x457 : Ojs.t) -> or_string_of_js AddressInfo.t_of_js x457)
              (Ojs.call (t_to_js x456) "address" [||])
        let (get_connections :
          t -> cb:(error:Error.t or_null -> count:int -> unit) -> unit) =
          fun (x463 : t) ->
            fun ~cb:(x459 : error:Error.t or_null -> count:int -> unit) ->
              ignore
                (Ojs.call (t_to_js x463) "getConnections"
                   [|(Ojs.fun_to_js 2
                        (fun (x460 : Ojs.t) ->
                           fun (x462 : Ojs.t) ->
                             x459 ~error:(or_null_of_js Error.t_of_js x460)
                               ~count:(Ojs.int_of_js x462)))|])
        let (ref : t -> t) =
          fun (x464 : t) -> t_of_js (Ojs.call (t_to_js x464) "ref" [||])
        let (unref : t -> t) =
          fun (x465 : t) -> t_of_js (Ojs.call (t_to_js x465) "unref" [||])
        let (get_max_connections : t -> int) =
          fun (x466 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x466) "maxConnections")
        let (set_max_connections : t -> int -> unit) =
          fun (x467 : t) ->
            fun (x468 : int) ->
              Ojs.set_prop_ascii (t_to_js x467) "maxConnections"
                (Ojs.int_to_js x468)
        let (get_connections : t -> int) =
          fun (x469 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x469) "connections")
        let (set_connections : t -> int -> unit) =
          fun (x470 : t) ->
            fun (x471 : int) ->
              Ojs.set_prop_ascii (t_to_js x470) "connections"
                (Ojs.int_to_js x471)
        let (get_listening : t -> bool) =
          fun (x472 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x472) "listening")
        let (set_listening : t -> bool -> unit) =
          fun (x473 : t) ->
            fun (x474 : bool) ->
              Ojs.set_prop_ascii (t_to_js x473) "listening"
                (Ojs.bool_to_js x474)
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x479 : t) ->
            fun ~event:(x475 : string) ->
              fun ~listener:(x476 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x479) "addListener"
                     [|(Ojs.string_to_js x475);(Ojs.fun_to_js_args
                                                  (fun (x477 : _) ->
                                                     x476
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x477 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x482 : t) ->
            fun ~event:(x480 : [ `close ]) ->
              fun ~listener:(x481 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x482) "addListener"
                     [|((match x480 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x481 ()))|])
        let (add_listener'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x486 : t) ->
            fun ~event:(x483 : [ `connection ]) ->
              fun ~listener:(x484 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x486) "addListener"
                     [|((match x483 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x485 : Ojs.t) ->
                            x484 ~socket:(Socket.t_of_js x485)))|])
        let (add_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x490 : t) ->
            fun ~event:(x487 : [ `error ]) ->
              fun ~listener:(x488 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x490) "addListener"
                     [|((match x487 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x489 : Ojs.t) ->
                            x488 ~err:(Error.t_of_js x489)))|])
        let (add_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x493 : t) ->
            fun ~event:(x491 : [ `listening ]) ->
              fun ~listener:(x492 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x493) "addListener"
                     [|((match x491 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x492 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x499 : t) ->
            fun ~event:(x494 : symbol or_string) ->
              fun ~args:(x495 : any list) ->
                Ojs.bool_of_js
                  (let x500 = t_to_js x499 in
                   Ojs.call (Ojs.get_prop_ascii x500 "emit") "apply"
                     [|x500;((let x496 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x496 "push"
                                   [|(or_string_to_js symbol_to_js x494)|]);
                              List.iter
                                (fun (x497 : any) ->
                                   ignore
                                     (Ojs.call x496 "push"
                                        [|(any_to_js x497)|])) x495;
                              x496))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x502 : t) ->
            fun ~event:(x501 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x502) "emit"
                   [|((match x501 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `connection ] -> socket:Socket.t -> bool)
          =
          fun (x505 : t) ->
            fun ~event:(x503 : [ `connection ]) ->
              fun ~socket:(x504 : Socket.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x505) "emit"
                     [|((match x503 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Socket.t_to_js x504)|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x508 : t) ->
            fun ~event:(x506 : [ `error ]) ->
              fun ~err:(x507 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x508) "emit"
                     [|((match x506 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x507)|])
        let (emit'''' : t -> event:[ `listening ] -> bool) =
          fun (x510 : t) ->
            fun ~event:(x509 : [ `listening ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x510) "emit"
                   [|((match x509 with
                       | `listening -> Ojs.string_to_js "listening"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x515 : t) ->
            fun ~event:(x511 : string) ->
              fun ~listener:(x512 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x515) "on"
                     [|(Ojs.string_to_js x511);(Ojs.fun_to_js_args
                                                  (fun (x513 : _) ->
                                                     x512
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x513 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x518 : t) ->
            fun ~event:(x516 : [ `close ]) ->
              fun ~listener:(x517 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x518) "on"
                     [|((match x516 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x517 ()))|])
        let (on'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x522 : t) ->
            fun ~event:(x519 : [ `connection ]) ->
              fun ~listener:(x520 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x522) "on"
                     [|((match x519 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x521 : Ojs.t) ->
                            x520 ~socket:(Socket.t_of_js x521)))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x526 : t) ->
            fun ~event:(x523 : [ `error ]) ->
              fun ~listener:(x524 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x526) "on"
                     [|((match x523 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x525 : Ojs.t) ->
                            x524 ~err:(Error.t_of_js x525)))|])
        let (on'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x529 : t) ->
            fun ~event:(x527 : [ `listening ]) ->
              fun ~listener:(x528 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x529) "on"
                     [|((match x527 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x528 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x534 : t) ->
            fun ~event:(x530 : string) ->
              fun ~listener:(x531 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x534) "once"
                     [|(Ojs.string_to_js x530);(Ojs.fun_to_js_args
                                                  (fun (x532 : _) ->
                                                     x531
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x532 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x537 : t) ->
            fun ~event:(x535 : [ `close ]) ->
              fun ~listener:(x536 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x537) "once"
                     [|((match x535 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x536 ()))|])
        let (once'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x541 : t) ->
            fun ~event:(x538 : [ `connection ]) ->
              fun ~listener:(x539 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x541) "once"
                     [|((match x538 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x540 : Ojs.t) ->
                            x539 ~socket:(Socket.t_of_js x540)))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x545 : t) ->
            fun ~event:(x542 : [ `error ]) ->
              fun ~listener:(x543 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x545) "once"
                     [|((match x542 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x544 : Ojs.t) ->
                            x543 ~err:(Error.t_of_js x544)))|])
        let (once'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x548 : t) ->
            fun ~event:(x546 : [ `listening ]) ->
              fun ~listener:(x547 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x548) "once"
                     [|((match x546 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x547 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x553 : t) ->
            fun ~event:(x549 : string) ->
              fun ~listener:(x550 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x553) "prependListener"
                     [|(Ojs.string_to_js x549);(Ojs.fun_to_js_args
                                                  (fun (x551 : _) ->
                                                     x550
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x551 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x556 : t) ->
            fun ~event:(x554 : [ `close ]) ->
              fun ~listener:(x555 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x556) "prependListener"
                     [|((match x554 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x555 ()))|])
        let (prepend_listener'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x560 : t) ->
            fun ~event:(x557 : [ `connection ]) ->
              fun ~listener:(x558 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x560) "prependListener"
                     [|((match x557 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x559 : Ojs.t) ->
                            x558 ~socket:(Socket.t_of_js x559)))|])
        let (prepend_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x564 : t) ->
            fun ~event:(x561 : [ `error ]) ->
              fun ~listener:(x562 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x564) "prependListener"
                     [|((match x561 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x563 : Ojs.t) ->
                            x562 ~err:(Error.t_of_js x563)))|])
        let (prepend_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x567 : t) ->
            fun ~event:(x565 : [ `listening ]) ->
              fun ~listener:(x566 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x567) "prependListener"
                     [|((match x565 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x566 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x572 : t) ->
            fun ~event:(x568 : string) ->
              fun ~listener:(x569 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x572) "prependOnceListener"
                     [|(Ojs.string_to_js x568);(Ojs.fun_to_js_args
                                                  (fun (x570 : _) ->
                                                     x569
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x570 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x575 : t) ->
            fun ~event:(x573 : [ `close ]) ->
              fun ~listener:(x574 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x575) "prependOnceListener"
                     [|((match x573 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x574 ()))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `connection ] -> listener:(socket:Socket.t -> unit) -> t)
          =
          fun (x579 : t) ->
            fun ~event:(x576 : [ `connection ]) ->
              fun ~listener:(x577 : socket:Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x579) "prependOnceListener"
                     [|((match x576 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x578 : Ojs.t) ->
                            x577 ~socket:(Socket.t_of_js x578)))|])
        let (prepend_once_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x583 : t) ->
            fun ~event:(x580 : [ `error ]) ->
              fun ~listener:(x581 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x583) "prependOnceListener"
                     [|((match x580 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x582 : Ojs.t) ->
                            x581 ~err:(Error.t_of_js x582)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x586 : t) ->
            fun ~event:(x584 : [ `listening ]) ->
              fun ~listener:(x585 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x586) "prependOnceListener"
                     [|((match x584 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x585 ()))|])
      end
    module TcpNetConnectOpts =
      struct
        include struct include TcpSocketConnectOpts end
        let (get_timeout : t -> int) =
          fun (x587 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x587) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x588 : t) ->
            fun (x589 : int) ->
              Ojs.set_prop_ascii (t_to_js x588) "timeout"
                (Ojs.int_to_js x589)
        let (cast' : t -> SocketConstructorOpts.t) =
          fun (x590 : t) -> SocketConstructorOpts.t_of_js (t_to_js x590)
      end
    module IpcNetConnectOpts =
      struct
        include struct include IpcSocketConnectOpts end
        let (get_timeout : t -> int) =
          fun (x591 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x591) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x592 : t) ->
            fun (x593 : int) ->
              Ojs.set_prop_ascii (t_to_js x592) "timeout"
                (Ojs.int_to_js x593)
        let (cast' : t -> SocketConstructorOpts.t) =
          fun (x594 : t) -> SocketConstructorOpts.t_of_js (t_to_js x594)
      end
    module NetConnectOpts =
      struct
        type t = (IpcNetConnectOpts.t, TcpNetConnectOpts.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x598 : Ojs.t) ->
            union2_of_js IpcNetConnectOpts.t_of_js TcpNetConnectOpts.t_of_js
              x598
        and t_to_js : t -> Ojs.t =
          fun (x595 : (IpcNetConnectOpts.t, TcpNetConnectOpts.t) union2) ->
            union2_to_js IpcNetConnectOpts.t_to_js TcpNetConnectOpts.t_to_js
              x595
      end
    let (create_server :
      ?connection_listener:(socket:Socket.t -> unit) -> unit -> Server.t) =
      fun ?connection_listener:(x601 : (socket:Socket.t -> unit) option) ->
        fun () ->
          Server.t_of_js
            (let x605 = Import.net in
             Ojs.call (Ojs.get_prop_ascii x605 "createServer") "apply"
               [|x605;((let x602 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x601 with
                         | Some x603 ->
                             ignore
                               (Ojs.call x602 "push"
                                  [|(Ojs.fun_to_js 1
                                       (fun (x604 : Ojs.t) ->
                                          x603 ~socket:(Socket.t_of_js x604)))|])
                         | None -> ());
                        x602))|])
    let (create_server :
      ?options:ServerOpts.t ->
        ?connection_listener:(socket:Socket.t -> unit) -> unit -> Server.t)
      =
      fun ?options:(x606 : ServerOpts.t option) ->
        fun ?connection_listener:(x607 : (socket:Socket.t -> unit) option) ->
          fun () ->
            Server.t_of_js
              (let x612 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x612 "createServer") "apply"
                 [|x612;((let x608 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x606 with
                           | Some x611 ->
                               ignore
                                 (Ojs.call x608 "push"
                                    [|(ServerOpts.t_to_js x611)|])
                           | None -> ());
                          (match x607 with
                           | Some x609 ->
                               ignore
                                 (Ojs.call x608 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x610 : Ojs.t) ->
                                            x609
                                              ~socket:(Socket.t_of_js x610)))|])
                           | None -> ());
                          x608))|])
    let (connect :
      options:NetConnectOpts.t ->
        ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~options:(x613 : NetConnectOpts.t) ->
        fun ?connection_listener:(x614 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x617 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x617 "connect") "apply"
                 [|x617;((let x615 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x615 "push"
                               [|(NetConnectOpts.t_to_js x613)|]);
                          (match x614 with
                           | Some x616 ->
                               ignore
                                 (Ojs.call x615 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x616 ()))|])
                           | None -> ());
                          x615))|])
    let (connect :
      port:int ->
        ?host:string ->
          ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~port:(x618 : int) ->
        fun ?host:(x619 : string option) ->
          fun ?connection_listener:(x620 : (unit -> unit) option) ->
            fun () ->
              Socket.t_of_js
                (let x624 = Import.net in
                 Ojs.call (Ojs.get_prop_ascii x624 "connect") "apply"
                   [|x624;((let x621 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x621 "push" [|(Ojs.int_to_js x618)|]);
                            (match x619 with
                             | Some x623 ->
                                 ignore
                                   (Ojs.call x621 "push"
                                      [|(Ojs.string_to_js x623)|])
                             | None -> ());
                            (match x620 with
                             | Some x622 ->
                                 ignore
                                   (Ojs.call x621 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x622 ()))|])
                             | None -> ());
                            x621))|])
    let (connect :
      path:string -> ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~path:(x625 : string) ->
        fun ?connection_listener:(x626 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x629 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x629 "connect") "apply"
                 [|x629;((let x627 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x627 "push" [|(Ojs.string_to_js x625)|]);
                          (match x626 with
                           | Some x628 ->
                               ignore
                                 (Ojs.call x627 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x628 ()))|])
                           | None -> ());
                          x627))|])
    let (create_connection :
      options:NetConnectOpts.t ->
        ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~options:(x630 : NetConnectOpts.t) ->
        fun ?connection_listener:(x631 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x634 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x634 "createConnection") "apply"
                 [|x634;((let x632 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x632 "push"
                               [|(NetConnectOpts.t_to_js x630)|]);
                          (match x631 with
                           | Some x633 ->
                               ignore
                                 (Ojs.call x632 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x633 ()))|])
                           | None -> ());
                          x632))|])
    let (create_connection :
      port:int ->
        ?host:string ->
          ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~port:(x635 : int) ->
        fun ?host:(x636 : string option) ->
          fun ?connection_listener:(x637 : (unit -> unit) option) ->
            fun () ->
              Socket.t_of_js
                (let x641 = Import.net in
                 Ojs.call (Ojs.get_prop_ascii x641 "createConnection")
                   "apply"
                   [|x641;((let x638 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x638 "push" [|(Ojs.int_to_js x635)|]);
                            (match x636 with
                             | Some x640 ->
                                 ignore
                                   (Ojs.call x638 "push"
                                      [|(Ojs.string_to_js x640)|])
                             | None -> ());
                            (match x637 with
                             | Some x639 ->
                                 ignore
                                   (Ojs.call x638 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x639 ()))|])
                             | None -> ());
                            x638))|])
    let (create_connection :
      path:string -> ?connection_listener:(unit -> unit) -> unit -> Socket.t)
      =
      fun ~path:(x642 : string) ->
        fun ?connection_listener:(x643 : (unit -> unit) option) ->
          fun () ->
            Socket.t_of_js
              (let x646 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x646 "createConnection") "apply"
                 [|x646;((let x644 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x644 "push" [|(Ojs.string_to_js x642)|]);
                          (match x643 with
                           | Some x645 ->
                               ignore
                                 (Ojs.call x644 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x645 ()))|])
                           | None -> ());
                          x644))|])
    let (is_ip : input:string -> int) =
      fun ~input:(x647 : string) ->
        Ojs.int_of_js
          (Ojs.call Import.net "isIP" [|(Ojs.string_to_js x647)|])
    let (is_i_pv4 : input:string -> bool) =
      fun ~input:(x648 : string) ->
        Ojs.bool_of_js
          (Ojs.call Import.net "isIPv4" [|(Ojs.string_to_js x648)|])
    let (is_i_pv6 : input:string -> bool) =
      fun ~input:(x649 : string) ->
        Ojs.bool_of_js
          (Ojs.call Import.net "isIPv6" [|(Ojs.string_to_js x649)|])
  end
