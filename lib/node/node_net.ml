[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type net_AddressInfo = [ `Net_AddressInfo ] intf
        and net_ConnectOpts = [ `Net_ConnectOpts ] intf
        and net_IpcNetConnectOpts =
          [ `Net_IpcNetConnectOpts  | `Net_ConnectOpts 
          | `Net_IpcSocketConnectOpts  | `Net_SocketConstructorOpts ] intf
        and net_IpcSocketConnectOpts =
          [ `Net_IpcSocketConnectOpts  | `Net_ConnectOpts ] intf
        and net_ListenOptions = [ `Net_ListenOptions ] intf
        and net_LookupFunction = [ `Net_LookupFunction ] intf
        and net_NetConnectOpts =
          (net_IpcNetConnectOpts, net_TcpNetConnectOpts) union2
        and net_OnReadOpts = [ `Net_OnReadOpts ] intf
        and net_Server = [ `Net_Server ] intf
        and net_ServerOpts = [ `Net_ServerOpts ] intf
        and net_Socket = [ `Net_Socket ] intf
        and net_SocketConnectOpts =
          (net_IpcSocketConnectOpts, net_TcpSocketConnectOpts) union2
        and net_SocketConstructorOpts = [ `Net_SocketConstructorOpts ] intf
        and net_TcpNetConnectOpts =
          [ `Net_TcpNetConnectOpts  | `Net_ConnectOpts 
          | `Net_SocketConstructorOpts  | `Net_TcpSocketConnectOpts ] intf
        and net_TcpSocketConnectOpts =
          [ `Net_TcpSocketConnectOpts  | `Net_ConnectOpts ] intf
        let rec net_AddressInfo_of_js : Ojs.t -> net_AddressInfo = Obj.magic
        and net_AddressInfo_to_js : net_AddressInfo -> Ojs.t = Obj.magic
        and net_ConnectOpts_of_js : Ojs.t -> net_ConnectOpts = Obj.magic
        and net_ConnectOpts_to_js : net_ConnectOpts -> Ojs.t = Obj.magic
        and net_IpcNetConnectOpts_of_js : Ojs.t -> net_IpcNetConnectOpts =
          Obj.magic
        and net_IpcNetConnectOpts_to_js : net_IpcNetConnectOpts -> Ojs.t =
          Obj.magic
        and net_IpcSocketConnectOpts_of_js :
          Ojs.t -> net_IpcSocketConnectOpts = Obj.magic
        and net_IpcSocketConnectOpts_to_js :
          net_IpcSocketConnectOpts -> Ojs.t = Obj.magic
        and net_ListenOptions_of_js : Ojs.t -> net_ListenOptions = Obj.magic
        and net_ListenOptions_to_js : net_ListenOptions -> Ojs.t = Obj.magic
        and net_LookupFunction_of_js : Ojs.t -> net_LookupFunction =
          Obj.magic
        and net_LookupFunction_to_js : net_LookupFunction -> Ojs.t =
          Obj.magic
        and net_NetConnectOpts_of_js : Ojs.t -> net_NetConnectOpts =
          fun (x4 : Ojs.t) ->
            union2_of_js net_IpcNetConnectOpts_of_js
              net_TcpNetConnectOpts_of_js x4
        and net_NetConnectOpts_to_js : net_NetConnectOpts -> Ojs.t =
          fun (x1 : (net_IpcNetConnectOpts, net_TcpNetConnectOpts) union2) ->
            union2_to_js net_IpcNetConnectOpts_to_js
              net_TcpNetConnectOpts_to_js x1
        and net_OnReadOpts_of_js : Ojs.t -> net_OnReadOpts = Obj.magic
        and net_OnReadOpts_to_js : net_OnReadOpts -> Ojs.t = Obj.magic
        and net_Server_of_js : Ojs.t -> net_Server = Obj.magic
        and net_Server_to_js : net_Server -> Ojs.t = Obj.magic
        and net_ServerOpts_of_js : Ojs.t -> net_ServerOpts = Obj.magic
        and net_ServerOpts_to_js : net_ServerOpts -> Ojs.t = Obj.magic
        and net_Socket_of_js : Ojs.t -> net_Socket = Obj.magic
        and net_Socket_to_js : net_Socket -> Ojs.t = Obj.magic
        and net_SocketConnectOpts_of_js : Ojs.t -> net_SocketConnectOpts =
          fun (x10 : Ojs.t) ->
            union2_of_js net_IpcSocketConnectOpts_of_js
              net_TcpSocketConnectOpts_of_js x10
        and net_SocketConnectOpts_to_js : net_SocketConnectOpts -> Ojs.t =
          fun
            (x7 :
              (net_IpcSocketConnectOpts, net_TcpSocketConnectOpts) union2)
            ->
            union2_to_js net_IpcSocketConnectOpts_to_js
              net_TcpSocketConnectOpts_to_js x7
        and net_SocketConstructorOpts_of_js :
          Ojs.t -> net_SocketConstructorOpts = Obj.magic
        and net_SocketConstructorOpts_to_js :
          net_SocketConstructorOpts -> Ojs.t = Obj.magic
        and net_TcpNetConnectOpts_of_js : Ojs.t -> net_TcpNetConnectOpts =
          Obj.magic
        and net_TcpNetConnectOpts_to_js : net_TcpNetConnectOpts -> Ojs.t =
          Obj.magic
        and net_TcpSocketConnectOpts_of_js :
          Ojs.t -> net_TcpSocketConnectOpts = Obj.magic
        and net_TcpSocketConnectOpts_to_js :
          net_TcpSocketConnectOpts -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x14 : Ojs.t) -> anonymous_interface_0_of_js x14
    and t_to_js : t -> Ojs.t =
      fun (x13 : anonymous_interface_0) -> anonymous_interface_0_to_js x13
  end
module Net =
  struct
    open Node_stream
    open Node_dns
    module LookupFunction =
      struct
        type t = net_LookupFunction
        let rec t_of_js : Ojs.t -> t =
          fun (x16 : Ojs.t) -> net_LookupFunction_of_js x16
        and t_to_js : t -> Ojs.t =
          fun (x15 : net_LookupFunction) -> net_LookupFunction_to_js x15
        let (apply :
          t ->
            hostname:string ->
              options:Dns.LookupOneOptions.t ->
                callback:(err:ErrnoException.t or_null ->
                            address:string -> family:int -> unit)
                  -> unit)
          =
          fun (x24 : t) ->
            fun ~hostname:(x17 : string) ->
              fun ~options:(x18 : Dns.LookupOneOptions.t) ->
                fun
                  ~callback:(x19 :
                              err:ErrnoException.t or_null ->
                                address:string -> family:int -> unit)
                  ->
                  ignore
                    (Ojs.apply (t_to_js x24)
                       [|(Ojs.string_to_js x17);(Dns.LookupOneOptions.t_to_js
                                                   x18);(Ojs.fun_to_js 3
                                                           (fun (x20 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x22 : Ojs.t)
                                                                ->
                                                                fun
                                                                  (x23 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x19
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x20)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x22)
                                                                    ~family:(
                                                                    Ojs.int_of_js
                                                                    x23)))|])
      end
    module AddressInfo =
      struct
        type t = net_AddressInfo
        let rec t_of_js : Ojs.t -> t =
          fun (x26 : Ojs.t) -> net_AddressInfo_of_js x26
        and t_to_js : t -> Ojs.t =
          fun (x25 : net_AddressInfo) -> net_AddressInfo_to_js x25
        let (get_address : t -> string) =
          fun (x27 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "address")
        let (set_address : t -> string -> unit) =
          fun (x28 : t) ->
            fun (x29 : string) ->
              Ojs.set_prop_ascii (t_to_js x28) "address"
                (Ojs.string_to_js x29)
        let (get_family : t -> string) =
          fun (x30 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x30) "family")
        let (set_family : t -> string -> unit) =
          fun (x31 : t) ->
            fun (x32 : string) ->
              Ojs.set_prop_ascii (t_to_js x31) "family"
                (Ojs.string_to_js x32)
        let (get_port : t -> int) =
          fun (x33 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x33) "port")
        let (set_port : t -> int -> unit) =
          fun (x34 : t) ->
            fun (x35 : int) ->
              Ojs.set_prop_ascii (t_to_js x34) "port" (Ojs.int_to_js x35)
      end
    module SocketConstructorOpts =
      struct
        type t = net_SocketConstructorOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x37 : Ojs.t) -> net_SocketConstructorOpts_of_js x37
        and t_to_js : t -> Ojs.t =
          fun (x36 : net_SocketConstructorOpts) ->
            net_SocketConstructorOpts_to_js x36
        let (get_fd : t -> int) =
          fun (x38 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x38) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x39 : t) ->
            fun (x40 : int) ->
              Ojs.set_prop_ascii (t_to_js x39) "fd" (Ojs.int_to_js x40)
        let (get_allowHalfOpen : t -> bool) =
          fun (x41 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x41) "allowHalfOpen")
        let (set_allowHalfOpen : t -> bool -> unit) =
          fun (x42 : t) ->
            fun (x43 : bool) ->
              Ojs.set_prop_ascii (t_to_js x42) "allowHalfOpen"
                (Ojs.bool_to_js x43)
        let (get_readable : t -> bool) =
          fun (x44 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x44) "readable")
        let (set_readable : t -> bool -> unit) =
          fun (x45 : t) ->
            fun (x46 : bool) ->
              Ojs.set_prop_ascii (t_to_js x45) "readable"
                (Ojs.bool_to_js x46)
        let (get_writable : t -> bool) =
          fun (x47 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x47) "writable")
        let (set_writable : t -> bool -> unit) =
          fun (x48 : t) ->
            fun (x49 : bool) ->
              Ojs.set_prop_ascii (t_to_js x48) "writable"
                (Ojs.bool_to_js x49)
      end
    module OnReadOpts =
      struct
        type t = net_OnReadOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x51 : Ojs.t) -> net_OnReadOpts_of_js x51
        and t_to_js : t -> Ojs.t =
          fun (x50 : net_OnReadOpts) -> net_OnReadOpts_to_js x50
        let (get_buffer : t -> (Uint8Array.t, unit -> Uint8Array.t) union2) =
          fun (x52 : t) ->
            union2_of_js Uint8Array.t_of_js
              (fun (x54 : Ojs.t) ->
                 fun () -> Uint8Array.t_of_js (Ojs.apply x54 [||]))
              (Ojs.get_prop_ascii (t_to_js x52) "buffer")
        let (set_buffer :
          t -> (Uint8Array.t, unit -> Uint8Array.t) union2 -> unit) =
          fun (x55 : t) ->
            fun (x56 : (Uint8Array.t, unit -> Uint8Array.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x55) "buffer"
                (union2_to_js Uint8Array.t_to_js
                   (fun (x58 : unit -> Uint8Array.t) ->
                      Ojs.fun_to_js 1 (fun _ -> Uint8Array.t_to_js (x58 ())))
                   x56)
        let (callback : t -> bytesWritten:int -> buf:Uint8Array.t -> bool) =
          fun (x61 : t) ->
            fun ~bytesWritten:(x59 : int) ->
              fun ~buf:(x60 : Uint8Array.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x61) "callback"
                     [|(Ojs.int_to_js x59);(Uint8Array.t_to_js x60)|])
      end
    module ConnectOpts =
      struct
        type t = net_ConnectOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x63 : Ojs.t) -> net_ConnectOpts_of_js x63
        and t_to_js : t -> Ojs.t =
          fun (x62 : net_ConnectOpts) -> net_ConnectOpts_to_js x62
        let (get_onread : t -> net_OnReadOpts) =
          fun (x64 : t) ->
            net_OnReadOpts_of_js (Ojs.get_prop_ascii (t_to_js x64) "onread")
        let (set_onread : t -> net_OnReadOpts -> unit) =
          fun (x65 : t) ->
            fun (x66 : net_OnReadOpts) ->
              Ojs.set_prop_ascii (t_to_js x65) "onread"
                (net_OnReadOpts_to_js x66)
      end
    module TcpSocketConnectOpts =
      struct
        type t = net_TcpSocketConnectOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x68 : Ojs.t) -> net_TcpSocketConnectOpts_of_js x68
        and t_to_js : t -> Ojs.t =
          fun (x67 : net_TcpSocketConnectOpts) ->
            net_TcpSocketConnectOpts_to_js x67
        let (get_port : t -> int) =
          fun (x69 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x69) "port")
        let (set_port : t -> int -> unit) =
          fun (x70 : t) ->
            fun (x71 : int) ->
              Ojs.set_prop_ascii (t_to_js x70) "port" (Ojs.int_to_js x71)
        let (get_host : t -> string) =
          fun (x72 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x72) "host")
        let (set_host : t -> string -> unit) =
          fun (x73 : t) ->
            fun (x74 : string) ->
              Ojs.set_prop_ascii (t_to_js x73) "host" (Ojs.string_to_js x74)
        let (get_localAddress : t -> string) =
          fun (x75 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x75) "localAddress")
        let (set_localAddress : t -> string -> unit) =
          fun (x76 : t) ->
            fun (x77 : string) ->
              Ojs.set_prop_ascii (t_to_js x76) "localAddress"
                (Ojs.string_to_js x77)
        let (get_localPort : t -> int) =
          fun (x78 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x78) "localPort")
        let (set_localPort : t -> int -> unit) =
          fun (x79 : t) ->
            fun (x80 : int) ->
              Ojs.set_prop_ascii (t_to_js x79) "localPort"
                (Ojs.int_to_js x80)
        let (get_hints : t -> int) =
          fun (x81 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x81) "hints")
        let (set_hints : t -> int -> unit) =
          fun (x82 : t) ->
            fun (x83 : int) ->
              Ojs.set_prop_ascii (t_to_js x82) "hints" (Ojs.int_to_js x83)
        let (get_family : t -> int) =
          fun (x84 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x84) "family")
        let (set_family : t -> int -> unit) =
          fun (x85 : t) ->
            fun (x86 : int) ->
              Ojs.set_prop_ascii (t_to_js x85) "family" (Ojs.int_to_js x86)
        let (get_lookup : t -> net_LookupFunction) =
          fun (x87 : t) ->
            net_LookupFunction_of_js
              (Ojs.get_prop_ascii (t_to_js x87) "lookup")
        let (set_lookup : t -> net_LookupFunction -> unit) =
          fun (x88 : t) ->
            fun (x89 : net_LookupFunction) ->
              Ojs.set_prop_ascii (t_to_js x88) "lookup"
                (net_LookupFunction_to_js x89)
        let (cast : t -> net_ConnectOpts) =
          fun (x90 : t) -> net_ConnectOpts_of_js (t_to_js x90)
      end
    module IpcSocketConnectOpts =
      struct
        type t = net_IpcSocketConnectOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x92 : Ojs.t) -> net_IpcSocketConnectOpts_of_js x92
        and t_to_js : t -> Ojs.t =
          fun (x91 : net_IpcSocketConnectOpts) ->
            net_IpcSocketConnectOpts_to_js x91
        let (get_path : t -> string) =
          fun (x93 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x93) "path")
        let (set_path : t -> string -> unit) =
          fun (x94 : t) ->
            fun (x95 : string) ->
              Ojs.set_prop_ascii (t_to_js x94) "path" (Ojs.string_to_js x95)
        let (cast : t -> net_ConnectOpts) =
          fun (x96 : t) -> net_ConnectOpts_of_js (t_to_js x96)
      end
    module SocketConnectOpts =
      struct
        type t = net_SocketConnectOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x98 : Ojs.t) -> net_SocketConnectOpts_of_js x98
        and t_to_js : t -> Ojs.t =
          fun (x97 : net_SocketConnectOpts) ->
            net_SocketConnectOpts_to_js x97
      end
    module Socket =
      struct
        type t = net_Socket
        let rec t_of_js : Ojs.t -> t =
          fun (x100 : Ojs.t) -> net_Socket_of_js x100
        and t_to_js : t -> Ojs.t =
          fun (x99 : net_Socket) -> net_Socket_to_js x99
        let (create : ?options:net_SocketConstructorOpts -> unit -> t) =
          fun ?options:(x101 : net_SocketConstructorOpts option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Socket")
                   (let x102 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x101 with
                     | Some x103 ->
                         ignore
                           (Ojs.call x102 "push"
                              [|(net_SocketConstructorOpts_to_js x103)|])
                     | None -> ());
                    x102))
        let (write :
          t ->
            buffer:Uint8Array.t or_string ->
              ?cb:(?err:Error.t -> unit -> unit) -> unit -> bool)
          =
          fun (x111 : t) ->
            fun ~buffer:(x104 : Uint8Array.t or_string) ->
              fun ?cb:(x105 : (?err:Error.t -> unit -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x112 = t_to_js x111 in
                     Ojs.call (Ojs.get_prop_ascii x112 "write") "apply"
                       [|x112;((let x106 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x106 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x104)|]);
                                (match x105 with
                                 | Some x107 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x108 : Ojs.t) ->
                                                  x107
                                                    ?err:(Ojs.option_of_js
                                                            Error.t_of_js
                                                            x108) ()))|])
                                 | None -> ());
                                x106))|])
        let (write' :
          t ->
            str:Uint8Array.t or_string ->
              ?encoding:BufferEncoding.t ->
                ?cb:(?err:Error.t -> unit -> unit) -> unit -> bool)
          =
          fun (x122 : t) ->
            fun ~str:(x113 : Uint8Array.t or_string) ->
              fun ?encoding:(x114 : BufferEncoding.t option) ->
                fun ?cb:(x115 : (?err:Error.t -> unit -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x123 = t_to_js x122 in
                       Ojs.call (Ojs.get_prop_ascii x123 "write") "apply"
                         [|x123;((let x116 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x116 "push"
                                       [|(or_string_to_js Uint8Array.t_to_js
                                            x113)|]);
                                  (match x114 with
                                   | Some x120 ->
                                       ignore
                                         (Ojs.call x116 "push"
                                            [|(BufferEncoding.t_to_js x120)|])
                                   | None -> ());
                                  (match x115 with
                                   | Some x117 ->
                                       ignore
                                         (Ojs.call x116 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x118 : Ojs.t) ->
                                                    x117
                                                      ?err:(Ojs.option_of_js
                                                              Error.t_of_js
                                                              x118) ()))|])
                                   | None -> ());
                                  x116))|])
        let (connect :
          t ->
            options:net_SocketConnectOpts ->
              ?connectionListener:(unit -> unit) -> unit -> t)
          =
          fun (x128 : t) ->
            fun ~options:(x124 : net_SocketConnectOpts) ->
              fun ?connectionListener:(x125 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x129 = t_to_js x128 in
                     Ojs.call (Ojs.get_prop_ascii x129 "connect") "apply"
                       [|x129;((let x126 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x126 "push"
                                     [|(net_SocketConnectOpts_to_js x124)|]);
                                (match x125 with
                                 | Some x127 ->
                                     ignore
                                       (Ojs.call x126 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x127 ()))|])
                                 | None -> ());
                                x126))|])
        let (connect' :
          t ->
            port:int ->
              host:string -> ?connectionListener:(unit -> unit) -> unit -> t)
          =
          fun (x135 : t) ->
            fun ~port:(x130 : int) ->
              fun ~host:(x131 : string) ->
                fun ?connectionListener:(x132 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x136 = t_to_js x135 in
                       Ojs.call (Ojs.get_prop_ascii x136 "connect") "apply"
                         [|x136;((let x133 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x133 "push"
                                       [|(Ojs.int_to_js x130)|]);
                                  ignore
                                    (Ojs.call x133 "push"
                                       [|(Ojs.string_to_js x131)|]);
                                  (match x132 with
                                   | Some x134 ->
                                       ignore
                                         (Ojs.call x133 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x134 ()))|])
                                   | None -> ());
                                  x133))|])
        let (connect'' :
          t -> port:int -> ?connectionListener:(unit -> unit) -> unit -> t) =
          fun (x141 : t) ->
            fun ~port:(x137 : int) ->
              fun ?connectionListener:(x138 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x142 = t_to_js x141 in
                     Ojs.call (Ojs.get_prop_ascii x142 "connect") "apply"
                       [|x142;((let x139 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x139 "push"
                                     [|(Ojs.int_to_js x137)|]);
                                (match x138 with
                                 | Some x140 ->
                                     ignore
                                       (Ojs.call x139 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x140 ()))|])
                                 | None -> ());
                                x139))|])
        let (connect''' :
          t -> path:string -> ?connectionListener:(unit -> unit) -> unit -> t)
          =
          fun (x147 : t) ->
            fun ~path:(x143 : string) ->
              fun ?connectionListener:(x144 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x148 = t_to_js x147 in
                     Ojs.call (Ojs.get_prop_ascii x148 "connect") "apply"
                       [|x148;((let x145 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x145 "push"
                                     [|(Ojs.string_to_js x143)|]);
                                (match x144 with
                                 | Some x146 ->
                                     ignore
                                       (Ojs.call x145 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x146 ()))|])
                                 | None -> ());
                                x145))|])
        let (setEncoding : t -> ?encoding:BufferEncoding.t -> unit -> t) =
          fun (x152 : t) ->
            fun ?encoding:(x149 : BufferEncoding.t option) ->
              fun () ->
                t_of_js
                  (let x153 = t_to_js x152 in
                   Ojs.call (Ojs.get_prop_ascii x153 "setEncoding") "apply"
                     [|x153;((let x150 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x149 with
                               | Some x151 ->
                                   ignore
                                     (Ojs.call x150 "push"
                                        [|(BufferEncoding.t_to_js x151)|])
                               | None -> ());
                              x150))|])
        let (pause : t -> t) =
          fun (x154 : t) -> t_of_js (Ojs.call (t_to_js x154) "pause" [||])
        let (resume : t -> t) =
          fun (x155 : t) -> t_of_js (Ojs.call (t_to_js x155) "resume" [||])
        let (setTimeout :
          t -> timeout:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x160 : t) ->
            fun ~timeout:(x156 : int) ->
              fun ?callback:(x157 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x161 = t_to_js x160 in
                     Ojs.call (Ojs.get_prop_ascii x161 "setTimeout") "apply"
                       [|x161;((let x158 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x158 "push"
                                     [|(Ojs.int_to_js x156)|]);
                                (match x157 with
                                 | Some x159 ->
                                     ignore
                                       (Ojs.call x158 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x159 ()))|])
                                 | None -> ());
                                x158))|])
        let (setNoDelay : t -> ?noDelay:bool -> unit -> t) =
          fun (x165 : t) ->
            fun ?noDelay:(x162 : bool option) ->
              fun () ->
                t_of_js
                  (let x166 = t_to_js x165 in
                   Ojs.call (Ojs.get_prop_ascii x166 "setNoDelay") "apply"
                     [|x166;((let x163 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x162 with
                               | Some x164 ->
                                   ignore
                                     (Ojs.call x163 "push"
                                        [|(Ojs.bool_to_js x164)|])
                               | None -> ());
                              x163))|])
        let (setKeepAlive :
          t -> ?enable:bool -> ?initialDelay:int -> unit -> t) =
          fun (x172 : t) ->
            fun ?enable:(x167 : bool option) ->
              fun ?initialDelay:(x168 : int option) ->
                fun () ->
                  t_of_js
                    (let x173 = t_to_js x172 in
                     Ojs.call (Ojs.get_prop_ascii x173 "setKeepAlive")
                       "apply"
                       [|x173;((let x169 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x167 with
                                 | Some x171 ->
                                     ignore
                                       (Ojs.call x169 "push"
                                          [|(Ojs.bool_to_js x171)|])
                                 | None -> ());
                                (match x168 with
                                 | Some x170 ->
                                     ignore
                                       (Ojs.call x169 "push"
                                          [|(Ojs.int_to_js x170)|])
                                 | None -> ());
                                x169))|])
        let (address : t -> (net_AddressInfo, anonymous_interface_0) union2)
          =
          fun (x174 : t) ->
            union2_of_js net_AddressInfo_of_js anonymous_interface_0_of_js
              (Ojs.call (t_to_js x174) "address" [||])
        let (unref : t -> t) =
          fun (x177 : t) -> t_of_js (Ojs.call (t_to_js x177) "unref" [||])
        let (ref : t -> t) =
          fun (x178 : t) -> t_of_js (Ojs.call (t_to_js x178) "ref" [||])
        let (get_bufferSize : t -> int) =
          fun (x179 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x179) "bufferSize")
        let (get_bytesRead : t -> int) =
          fun (x180 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x180) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x181 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x181) "bytesWritten")
        let (get_connecting : t -> bool) =
          fun (x182 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x182) "connecting")
        let (get_destroyed : t -> bool) =
          fun (x183 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x183) "destroyed")
        let (get_localAddress : t -> string) =
          fun (x184 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x184) "localAddress")
        let (get_localPort : t -> int) =
          fun (x185 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x185) "localPort")
        let (get_remoteAddress : t -> string) =
          fun (x186 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x186) "remoteAddress")
        let (get_remoteFamily : t -> string) =
          fun (x187 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x187) "remoteFamily")
        let (get_remotePort : t -> int) =
          fun (x188 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x188) "remotePort")
        let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
          fun (x192 : t) ->
            fun ?cb:(x189 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x193 = t_to_js x192 in
                   Ojs.call (Ojs.get_prop_ascii x193 "end") "apply"
                     [|x193;((let x190 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x189 with
                               | Some x191 ->
                                   ignore
                                     (Ojs.call x190 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x191 ()))|])
                               | None -> ());
                              x190))|])
        let (end_' :
          t ->
            buffer:Uint8Array.t or_string ->
              ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x199 : t) ->
            fun ~buffer:(x194 : Uint8Array.t or_string) ->
              fun ?cb:(x195 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x200 = t_to_js x199 in
                     Ojs.call (Ojs.get_prop_ascii x200 "end") "apply"
                       [|x200;((let x196 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x196 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x194)|]);
                                (match x195 with
                                 | Some x197 ->
                                     ignore
                                       (Ojs.call x196 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x197 ()))|])
                                 | None -> ());
                                x196))|])
        let (end_'' :
          t ->
            str:Uint8Array.t or_string ->
              ?encoding:BufferEncoding.t ->
                ?cb:(unit -> unit) -> unit -> unit)
          =
          fun (x208 : t) ->
            fun ~str:(x201 : Uint8Array.t or_string) ->
              fun ?encoding:(x202 : BufferEncoding.t option) ->
                fun ?cb:(x203 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x209 = t_to_js x208 in
                       Ojs.call (Ojs.get_prop_ascii x209 "end") "apply"
                         [|x209;((let x204 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x204 "push"
                                       [|(or_string_to_js Uint8Array.t_to_js
                                            x201)|]);
                                  (match x202 with
                                   | Some x206 ->
                                       ignore
                                         (Ojs.call x204 "push"
                                            [|(BufferEncoding.t_to_js x206)|])
                                   | None -> ());
                                  (match x203 with
                                   | Some x205 ->
                                       ignore
                                         (Ojs.call x204 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x205 ()))|])
                                   | None -> ());
                                  x204))|])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x214 : t) ->
            fun ~event:(x210 : string) ->
              fun ~listener:(x211 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x214) "addListener"
                     [|(Ojs.string_to_js x210);(Ojs.fun_to_js_args
                                                  (fun (x212 : _) ->
                                                     x211
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x212 0)))|])
        let (addListener' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x218 : t) ->
            fun ~event:(x215 : [ `close ]) ->
              fun ~listener:(x216 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x218) "addListener"
                     [|((match x215 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x217 : Ojs.t) ->
                            x216 ~had_error:(Ojs.bool_of_js x217)))|])
        let (addListener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x221 : t) ->
            fun ~event:(x219 : [ `connect ]) ->
              fun ~listener:(x220 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x221) "addListener"
                     [|((match x219 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x220 ()))|])
        let (addListener''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x225 : t) ->
            fun ~event:(x222 : [ `data ]) ->
              fun ~listener:(x223 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x225) "addListener"
                     [|((match x222 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x224 : Ojs.t) ->
                            x223 ~data:(Buffer.t_of_js x224)))|])
        let (addListener'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x228 : t) ->
            fun ~event:(x226 : [ `drain ]) ->
              fun ~listener:(x227 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x228) "addListener"
                     [|((match x226 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x227 ()))|])
        let (addListener''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x231 : t) ->
            fun ~event:(x229 : [ `end_ ]) ->
              fun ~listener:(x230 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x231) "addListener"
                     [|((match x229 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x230 ()))|])
        let (addListener'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x235 : t) ->
            fun ~event:(x232 : [ `error ]) ->
              fun ~listener:(x233 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x235) "addListener"
                     [|((match x232 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x234 : Ojs.t) ->
                            x233 ~err:(Error.t_of_js x234)))|])
        let (addListener''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x243 : t) ->
            fun ~event:(x236 : [ `lookup ]) ->
              fun
                ~listener:(x237 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x243) "addListener"
                     [|((match x236 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x238 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x239 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x240 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x242 :
                                                                    Ojs.t) ->
                                                                    x237
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x238)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x239)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x240)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x242)))|])
        let (addListener'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x246 : t) ->
            fun ~event:(x244 : [ `timeout ]) ->
              fun ~listener:(x245 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x246) "addListener"
                     [|((match x244 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x245 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x252 : t) ->
            fun ~event:(x247 : symbol or_string) ->
              fun ~args:(x248 : any list) ->
                Ojs.bool_of_js
                  (let x253 = t_to_js x252 in
                   Ojs.call (Ojs.get_prop_ascii x253 "emit") "apply"
                     [|x253;((let x249 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x249 "push"
                                   [|(or_string_to_js symbol_to_js x247)|]);
                              List.iter
                                (fun (x250 : any) ->
                                   ignore
                                     (Ojs.call x249 "push"
                                        [|(any_to_js x250)|])) x248;
                              x249))|])
        let (emit' : t -> event:[ `close ] -> had_error:bool -> bool) =
          fun (x256 : t) ->
            fun ~event:(x254 : [ `close ]) ->
              fun ~had_error:(x255 : bool) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x256) "emit"
                     [|((match x254 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.bool_to_js x255)|])
        let (emit'' : t -> event:[ `connect ] -> bool) =
          fun (x258 : t) ->
            fun ~event:(x257 : [ `connect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x258) "emit"
                   [|((match x257 with
                       | `connect -> Ojs.string_to_js "connect"))|])
        let (emit''' : t -> event:[ `data ] -> data:Buffer.t -> bool) =
          fun (x261 : t) ->
            fun ~event:(x259 : [ `data ]) ->
              fun ~data:(x260 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x261) "emit"
                     [|((match x259 with | `data -> Ojs.string_to_js "data"));(
                       Buffer.t_to_js x260)|])
        let (emit'''' : t -> event:[ `drain ] -> bool) =
          fun (x263 : t) ->
            fun ~event:(x262 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x263) "emit"
                   [|((match x262 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit''''' : t -> event:[ `end_ ] -> bool) =
          fun (x265 : t) ->
            fun ~event:(x264 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x265) "emit"
                   [|((match x264 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit'''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x268 : t) ->
            fun ~event:(x266 : [ `error ]) ->
              fun ~err:(x267 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x268) "emit"
                     [|((match x266 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x267)|])
        let (emit''''''' :
          t ->
            event:[ `lookup ] ->
              err:Error.t ->
                address:string ->
                  family:string or_number -> host:string -> bool)
          =
          fun (x275 : t) ->
            fun ~event:(x269 : [ `lookup ]) ->
              fun ~err:(x270 : Error.t) ->
                fun ~address:(x271 : string) ->
                  fun ~family:(x272 : string or_number) ->
                    fun ~host:(x274 : string) ->
                      Ojs.bool_of_js
                        (Ojs.call (t_to_js x275) "emit"
                           [|((match x269 with
                               | `lookup -> Ojs.string_to_js "lookup"));(
                             Error.t_to_js x270);(Ojs.string_to_js x271);(
                             or_number_to_js Ojs.string_to_js x272);(
                             Ojs.string_to_js x274)|])
        let (emit'''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x277 : t) ->
            fun ~event:(x276 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x277) "emit"
                   [|((match x276 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x282 : t) ->
            fun ~event:(x278 : string) ->
              fun ~listener:(x279 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x282) "on"
                     [|(Ojs.string_to_js x278);(Ojs.fun_to_js_args
                                                  (fun (x280 : _) ->
                                                     x279
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x280 0)))|])
        let (on' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x286 : t) ->
            fun ~event:(x283 : [ `close ]) ->
              fun ~listener:(x284 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x286) "on"
                     [|((match x283 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x285 : Ojs.t) ->
                            x284 ~had_error:(Ojs.bool_of_js x285)))|])
        let (on'' : t -> event:[ `connect ] -> listener:(unit -> unit) -> t)
          =
          fun (x289 : t) ->
            fun ~event:(x287 : [ `connect ]) ->
              fun ~listener:(x288 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x289) "on"
                     [|((match x287 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x288 ()))|])
        let (on''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x293 : t) ->
            fun ~event:(x290 : [ `data ]) ->
              fun ~listener:(x291 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x293) "on"
                     [|((match x290 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x292 : Ojs.t) ->
                            x291 ~data:(Buffer.t_of_js x292)))|])
        let (on'''' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t)
          =
          fun (x296 : t) ->
            fun ~event:(x294 : [ `drain ]) ->
              fun ~listener:(x295 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x296) "on"
                     [|((match x294 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x295 ()))|])
        let (on''''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
          =
          fun (x299 : t) ->
            fun ~event:(x297 : [ `end_ ]) ->
              fun ~listener:(x298 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x299) "on"
                     [|((match x297 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x298 ()))|])
        let (on'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x303 : t) ->
            fun ~event:(x300 : [ `error ]) ->
              fun ~listener:(x301 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x303) "on"
                     [|((match x300 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x302 : Ojs.t) ->
                            x301 ~err:(Error.t_of_js x302)))|])
        let (on''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x311 : t) ->
            fun ~event:(x304 : [ `lookup ]) ->
              fun
                ~listener:(x305 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x311) "on"
                     [|((match x304 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x306 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x307 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x308 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x310 :
                                                                    Ojs.t) ->
                                                                    x305
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x306)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x307)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x308)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x310)))|])
        let (on'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x314 : t) ->
            fun ~event:(x312 : [ `timeout ]) ->
              fun ~listener:(x313 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x314) "on"
                     [|((match x312 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x313 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x319 : t) ->
            fun ~event:(x315 : string) ->
              fun ~listener:(x316 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x319) "once"
                     [|(Ojs.string_to_js x315);(Ojs.fun_to_js_args
                                                  (fun (x317 : _) ->
                                                     x316
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x317 0)))|])
        let (once' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x323 : t) ->
            fun ~event:(x320 : [ `close ]) ->
              fun ~listener:(x321 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x323) "once"
                     [|((match x320 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x322 : Ojs.t) ->
                            x321 ~had_error:(Ojs.bool_of_js x322)))|])
        let (once'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x326 : t) ->
            fun ~event:(x324 : [ `connect ]) ->
              fun ~listener:(x325 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x326) "once"
                     [|((match x324 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x325 ()))|])
        let (once''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x330 : t) ->
            fun ~event:(x327 : [ `data ]) ->
              fun ~listener:(x328 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x330) "once"
                     [|((match x327 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x329 : Ojs.t) ->
                            x328 ~data:(Buffer.t_of_js x329)))|])
        let (once'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x333 : t) ->
            fun ~event:(x331 : [ `drain ]) ->
              fun ~listener:(x332 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x333) "once"
                     [|((match x331 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x332 ()))|])
        let (once''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x336 : t) ->
            fun ~event:(x334 : [ `end_ ]) ->
              fun ~listener:(x335 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x336) "once"
                     [|((match x334 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x335 ()))|])
        let (once'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x340 : t) ->
            fun ~event:(x337 : [ `error ]) ->
              fun ~listener:(x338 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x340) "once"
                     [|((match x337 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x339 : Ojs.t) ->
                            x338 ~err:(Error.t_of_js x339)))|])
        let (once''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x348 : t) ->
            fun ~event:(x341 : [ `lookup ]) ->
              fun
                ~listener:(x342 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x348) "once"
                     [|((match x341 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x343 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x344 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x345 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x347 :
                                                                    Ojs.t) ->
                                                                    x342
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x343)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x344)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x345)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x347)))|])
        let (once'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x351 : t) ->
            fun ~event:(x349 : [ `timeout ]) ->
              fun ~listener:(x350 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x351) "once"
                     [|((match x349 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x350 ()))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x356 : t) ->
            fun ~event:(x352 : string) ->
              fun ~listener:(x353 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x356) "prependListener"
                     [|(Ojs.string_to_js x352);(Ojs.fun_to_js_args
                                                  (fun (x354 : _) ->
                                                     x353
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x354 0)))|])
        let (prependListener' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x360 : t) ->
            fun ~event:(x357 : [ `close ]) ->
              fun ~listener:(x358 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x360) "prependListener"
                     [|((match x357 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x359 : Ojs.t) ->
                            x358 ~had_error:(Ojs.bool_of_js x359)))|])
        let (prependListener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x363 : t) ->
            fun ~event:(x361 : [ `connect ]) ->
              fun ~listener:(x362 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x363) "prependListener"
                     [|((match x361 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x362 ()))|])
        let (prependListener''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x367 : t) ->
            fun ~event:(x364 : [ `data ]) ->
              fun ~listener:(x365 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x367) "prependListener"
                     [|((match x364 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x366 : Ojs.t) ->
                            x365 ~data:(Buffer.t_of_js x366)))|])
        let (prependListener'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x370 : t) ->
            fun ~event:(x368 : [ `drain ]) ->
              fun ~listener:(x369 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x370) "prependListener"
                     [|((match x368 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x369 ()))|])
        let (prependListener''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x373 : t) ->
            fun ~event:(x371 : [ `end_ ]) ->
              fun ~listener:(x372 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x373) "prependListener"
                     [|((match x371 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x372 ()))|])
        let (prependListener'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x377 : t) ->
            fun ~event:(x374 : [ `error ]) ->
              fun ~listener:(x375 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x377) "prependListener"
                     [|((match x374 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x376 : Ojs.t) ->
                            x375 ~err:(Error.t_of_js x376)))|])
        let (prependListener''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x385 : t) ->
            fun ~event:(x378 : [ `lookup ]) ->
              fun
                ~listener:(x379 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x385) "prependListener"
                     [|((match x378 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x380 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x381 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x382 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x384 :
                                                                    Ojs.t) ->
                                                                    x379
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x380)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x381)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x382)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x384)))|])
        let (prependListener'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x388 : t) ->
            fun ~event:(x386 : [ `timeout ]) ->
              fun ~listener:(x387 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x388) "prependListener"
                     [|((match x386 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x387 ()))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x393 : t) ->
            fun ~event:(x389 : string) ->
              fun ~listener:(x390 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x393) "prependOnceListener"
                     [|(Ojs.string_to_js x389);(Ojs.fun_to_js_args
                                                  (fun (x391 : _) ->
                                                     x390
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x391 0)))|])
        let (prependOnceListener' :
          t -> event:[ `close ] -> listener:(had_error:bool -> unit) -> t) =
          fun (x397 : t) ->
            fun ~event:(x394 : [ `close ]) ->
              fun ~listener:(x395 : had_error:bool -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x397) "prependOnceListener"
                     [|((match x394 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1
                         (fun (x396 : Ojs.t) ->
                            x395 ~had_error:(Ojs.bool_of_js x396)))|])
        let (prependOnceListener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x400 : t) ->
            fun ~event:(x398 : [ `connect ]) ->
              fun ~listener:(x399 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x400) "prependOnceListener"
                     [|((match x398 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x399 ()))|])
        let (prependOnceListener''' :
          t -> event:[ `data ] -> listener:(data:Buffer.t -> unit) -> t) =
          fun (x404 : t) ->
            fun ~event:(x401 : [ `data ]) ->
              fun ~listener:(x402 : data:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x404) "prependOnceListener"
                     [|((match x401 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x403 : Ojs.t) ->
                            x402 ~data:(Buffer.t_of_js x403)))|])
        let (prependOnceListener'''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x407 : t) ->
            fun ~event:(x405 : [ `drain ]) ->
              fun ~listener:(x406 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x407) "prependOnceListener"
                     [|((match x405 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x406 ()))|])
        let (prependOnceListener''''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x410 : t) ->
            fun ~event:(x408 : [ `end_ ]) ->
              fun ~listener:(x409 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x410) "prependOnceListener"
                     [|((match x408 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x409 ()))|])
        let (prependOnceListener'''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x414 : t) ->
            fun ~event:(x411 : [ `error ]) ->
              fun ~listener:(x412 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x414) "prependOnceListener"
                     [|((match x411 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x413 : Ojs.t) ->
                            x412 ~err:(Error.t_of_js x413)))|])
        let (prependOnceListener''''''' :
          t ->
            event:[ `lookup ] ->
              listener:(err:Error.t ->
                          address:string ->
                            family:string or_number -> host:string -> unit)
                -> t)
          =
          fun (x422 : t) ->
            fun ~event:(x415 : [ `lookup ]) ->
              fun
                ~listener:(x416 :
                            err:Error.t ->
                              address:string ->
                                family:string or_number ->
                                  host:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x422) "prependOnceListener"
                     [|((match x415 with
                         | `lookup -> Ojs.string_to_js "lookup"));(Ojs.fun_to_js
                                                                    4
                                                                    (fun
                                                                    (x417 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x418 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x419 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x421 :
                                                                    Ojs.t) ->
                                                                    x416
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x417)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x418)
                                                                    ~family:(
                                                                    or_number_of_js
                                                                    Ojs.string_of_js
                                                                    x419)
                                                                    ~host:(
                                                                    Ojs.string_of_js
                                                                    x421)))|])
        let (prependOnceListener'''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x425 : t) ->
            fun ~event:(x423 : [ `timeout ]) ->
              fun ~listener:(x424 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x425) "prependOnceListener"
                     [|((match x423 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x424 ()))|])
        let (cast : t -> Stream.Duplex.t) =
          fun (x426 : t) -> Stream.Duplex.t_of_js (t_to_js x426)
      end
    module ListenOptions =
      struct
        type t = net_ListenOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x428 : Ojs.t) -> net_ListenOptions_of_js x428
        and t_to_js : t -> Ojs.t =
          fun (x427 : net_ListenOptions) -> net_ListenOptions_to_js x427
        let (get_port : t -> int) =
          fun (x429 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x429) "port")
        let (set_port : t -> int -> unit) =
          fun (x430 : t) ->
            fun (x431 : int) ->
              Ojs.set_prop_ascii (t_to_js x430) "port" (Ojs.int_to_js x431)
        let (get_host : t -> string) =
          fun (x432 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x432) "host")
        let (set_host : t -> string -> unit) =
          fun (x433 : t) ->
            fun (x434 : string) ->
              Ojs.set_prop_ascii (t_to_js x433) "host"
                (Ojs.string_to_js x434)
        let (get_backlog : t -> int) =
          fun (x435 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x435) "backlog")
        let (set_backlog : t -> int -> unit) =
          fun (x436 : t) ->
            fun (x437 : int) ->
              Ojs.set_prop_ascii (t_to_js x436) "backlog"
                (Ojs.int_to_js x437)
        let (get_path : t -> string) =
          fun (x438 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x438) "path")
        let (set_path : t -> string -> unit) =
          fun (x439 : t) ->
            fun (x440 : string) ->
              Ojs.set_prop_ascii (t_to_js x439) "path"
                (Ojs.string_to_js x440)
        let (get_exclusive : t -> bool) =
          fun (x441 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x441) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x442 : t) ->
            fun (x443 : bool) ->
              Ojs.set_prop_ascii (t_to_js x442) "exclusive"
                (Ojs.bool_to_js x443)
        let (get_readableAll : t -> bool) =
          fun (x444 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x444) "readableAll")
        let (set_readableAll : t -> bool -> unit) =
          fun (x445 : t) ->
            fun (x446 : bool) ->
              Ojs.set_prop_ascii (t_to_js x445) "readableAll"
                (Ojs.bool_to_js x446)
        let (get_writableAll : t -> bool) =
          fun (x447 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x447) "writableAll")
        let (set_writableAll : t -> bool -> unit) =
          fun (x448 : t) ->
            fun (x449 : bool) ->
              Ojs.set_prop_ascii (t_to_js x448) "writableAll"
                (Ojs.bool_to_js x449)
        let (get_ipv6Only : t -> bool) =
          fun (x450 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x450) "ipv6Only")
        let (set_ipv6Only : t -> bool -> unit) =
          fun (x451 : t) ->
            fun (x452 : bool) ->
              Ojs.set_prop_ascii (t_to_js x451) "ipv6Only"
                (Ojs.bool_to_js x452)
      end
    module ServerOpts =
      struct
        type t = net_ServerOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x454 : Ojs.t) -> net_ServerOpts_of_js x454
        and t_to_js : t -> Ojs.t =
          fun (x453 : net_ServerOpts) -> net_ServerOpts_to_js x453
        let (get_allowHalfOpen : t -> bool) =
          fun (x455 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x455) "allowHalfOpen")
        let (set_allowHalfOpen : t -> bool -> unit) =
          fun (x456 : t) ->
            fun (x457 : bool) ->
              Ojs.set_prop_ascii (t_to_js x456) "allowHalfOpen"
                (Ojs.bool_to_js x457)
        let (get_pauseOnConnect : t -> bool) =
          fun (x458 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x458) "pauseOnConnect")
        let (set_pauseOnConnect : t -> bool -> unit) =
          fun (x459 : t) ->
            fun (x460 : bool) ->
              Ojs.set_prop_ascii (t_to_js x459) "pauseOnConnect"
                (Ojs.bool_to_js x460)
      end
    module Server =
      struct
        type t = net_Server
        let rec t_of_js : Ojs.t -> t =
          fun (x462 : Ojs.t) -> net_Server_of_js x462
        and t_to_js : t -> Ojs.t =
          fun (x461 : net_Server) -> net_Server_to_js x461
        let (create :
          ?connectionListener:(socket:net_Socket -> unit) -> unit -> t) =
          fun ?connectionListener:(x463 : (socket:net_Socket -> unit) option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Server")
                   (let x464 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x463 with
                     | Some x465 ->
                         ignore
                           (Ojs.call x464 "push"
                              [|(Ojs.fun_to_js 1
                                   (fun (x466 : Ojs.t) ->
                                      x465 ~socket:(net_Socket_of_js x466)))|])
                     | None -> ());
                    x464))
        let (create' :
          ?options:net_ServerOpts ->
            ?connectionListener:(socket:net_Socket -> unit) -> unit -> t)
          =
          fun ?options:(x467 : net_ServerOpts option) ->
            fun
              ?connectionListener:(x468 : (socket:net_Socket -> unit) option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.net "Server")
                     (let x469 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x467 with
                       | Some x472 ->
                           ignore
                             (Ojs.call x469 "push"
                                [|(net_ServerOpts_to_js x472)|])
                       | None -> ());
                      (match x468 with
                       | Some x470 ->
                           ignore
                             (Ojs.call x469 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x471 : Ojs.t) ->
                                        x470 ~socket:(net_Socket_of_js x471)))|])
                       | None -> ());
                      x469))
        let (listen :
          t ->
            ?port:int ->
              ?hostname:string ->
                ?backlog:int ->
                  ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x482 : t) ->
            fun ?port:(x473 : int option) ->
              fun ?hostname:(x474 : string option) ->
                fun ?backlog:(x475 : int option) ->
                  fun ?listeningListener:(x476 : (unit -> unit) option) ->
                    fun () ->
                      t_of_js
                        (let x483 = t_to_js x482 in
                         Ojs.call (Ojs.get_prop_ascii x483 "listen") "apply"
                           [|x483;((let x477 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x473 with
                                     | Some x481 ->
                                         ignore
                                           (Ojs.call x477 "push"
                                              [|(Ojs.int_to_js x481)|])
                                     | None -> ());
                                    (match x474 with
                                     | Some x480 ->
                                         ignore
                                           (Ojs.call x477 "push"
                                              [|(Ojs.string_to_js x480)|])
                                     | None -> ());
                                    (match x475 with
                                     | Some x479 ->
                                         ignore
                                           (Ojs.call x477 "push"
                                              [|(Ojs.int_to_js x479)|])
                                     | None -> ());
                                    (match x476 with
                                     | Some x478 ->
                                         ignore
                                           (Ojs.call x477 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x478 ()))|])
                                     | None -> ());
                                    x477))|])
        let (listen' :
          t ->
            ?port:int ->
              ?hostname:string ->
                ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x491 : t) ->
            fun ?port:(x484 : int option) ->
              fun ?hostname:(x485 : string option) ->
                fun ?listeningListener:(x486 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x492 = t_to_js x491 in
                       Ojs.call (Ojs.get_prop_ascii x492 "listen") "apply"
                         [|x492;((let x487 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x484 with
                                   | Some x490 ->
                                       ignore
                                         (Ojs.call x487 "push"
                                            [|(Ojs.int_to_js x490)|])
                                   | None -> ());
                                  (match x485 with
                                   | Some x489 ->
                                       ignore
                                         (Ojs.call x487 "push"
                                            [|(Ojs.string_to_js x489)|])
                                   | None -> ());
                                  (match x486 with
                                   | Some x488 ->
                                       ignore
                                         (Ojs.call x487 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x488 ()))|])
                                   | None -> ());
                                  x487))|])
        let (listen'' :
          t ->
            ?port:int ->
              ?backlog:int -> ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x500 : t) ->
            fun ?port:(x493 : int option) ->
              fun ?backlog:(x494 : int option) ->
                fun ?listeningListener:(x495 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x501 = t_to_js x500 in
                       Ojs.call (Ojs.get_prop_ascii x501 "listen") "apply"
                         [|x501;((let x496 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x493 with
                                   | Some x499 ->
                                       ignore
                                         (Ojs.call x496 "push"
                                            [|(Ojs.int_to_js x499)|])
                                   | None -> ());
                                  (match x494 with
                                   | Some x498 ->
                                       ignore
                                         (Ojs.call x496 "push"
                                            [|(Ojs.int_to_js x498)|])
                                   | None -> ());
                                  (match x495 with
                                   | Some x497 ->
                                       ignore
                                         (Ojs.call x496 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x497 ()))|])
                                   | None -> ());
                                  x496))|])
        let (listen''' :
          t -> ?port:int -> ?listeningListener:(unit -> unit) -> unit -> t) =
          fun (x507 : t) ->
            fun ?port:(x502 : int option) ->
              fun ?listeningListener:(x503 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x508 = t_to_js x507 in
                     Ojs.call (Ojs.get_prop_ascii x508 "listen") "apply"
                       [|x508;((let x504 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x502 with
                                 | Some x506 ->
                                     ignore
                                       (Ojs.call x504 "push"
                                          [|(Ojs.int_to_js x506)|])
                                 | None -> ());
                                (match x503 with
                                 | Some x505 ->
                                     ignore
                                       (Ojs.call x504 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x505 ()))|])
                                 | None -> ());
                                x504))|])
        let (listen'''' :
          t ->
            path:string ->
              ?backlog:int -> ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x515 : t) ->
            fun ~path:(x509 : string) ->
              fun ?backlog:(x510 : int option) ->
                fun ?listeningListener:(x511 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x516 = t_to_js x515 in
                       Ojs.call (Ojs.get_prop_ascii x516 "listen") "apply"
                         [|x516;((let x512 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x512 "push"
                                       [|(Ojs.string_to_js x509)|]);
                                  (match x510 with
                                   | Some x514 ->
                                       ignore
                                         (Ojs.call x512 "push"
                                            [|(Ojs.int_to_js x514)|])
                                   | None -> ());
                                  (match x511 with
                                   | Some x513 ->
                                       ignore
                                         (Ojs.call x512 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x513 ()))|])
                                   | None -> ());
                                  x512))|])
        let (listen''''' :
          t -> path:string -> ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x521 : t) ->
            fun ~path:(x517 : string) ->
              fun ?listeningListener:(x518 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x522 = t_to_js x521 in
                     Ojs.call (Ojs.get_prop_ascii x522 "listen") "apply"
                       [|x522;((let x519 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x519 "push"
                                     [|(Ojs.string_to_js x517)|]);
                                (match x518 with
                                 | Some x520 ->
                                     ignore
                                       (Ojs.call x519 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x520 ()))|])
                                 | None -> ());
                                x519))|])
        let (listen'''''' :
          t ->
            options:net_ListenOptions ->
              ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x527 : t) ->
            fun ~options:(x523 : net_ListenOptions) ->
              fun ?listeningListener:(x524 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x528 = t_to_js x527 in
                     Ojs.call (Ojs.get_prop_ascii x528 "listen") "apply"
                       [|x528;((let x525 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x525 "push"
                                     [|(net_ListenOptions_to_js x523)|]);
                                (match x524 with
                                 | Some x526 ->
                                     ignore
                                       (Ojs.call x525 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x526 ()))|])
                                 | None -> ());
                                x525))|])
        let (listen''''''' :
          t ->
            handle:any ->
              ?backlog:int -> ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x535 : t) ->
            fun ~handle:(x529 : any) ->
              fun ?backlog:(x530 : int option) ->
                fun ?listeningListener:(x531 : (unit -> unit) option) ->
                  fun () ->
                    t_of_js
                      (let x536 = t_to_js x535 in
                       Ojs.call (Ojs.get_prop_ascii x536 "listen") "apply"
                         [|x536;((let x532 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x532 "push"
                                       [|(any_to_js x529)|]);
                                  (match x530 with
                                   | Some x534 ->
                                       ignore
                                         (Ojs.call x532 "push"
                                            [|(Ojs.int_to_js x534)|])
                                   | None -> ());
                                  (match x531 with
                                   | Some x533 ->
                                       ignore
                                         (Ojs.call x532 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x533 ()))|])
                                   | None -> ());
                                  x532))|])
        let (listen'''''''' :
          t -> handle:any -> ?listeningListener:(unit -> unit) -> unit -> t)
          =
          fun (x541 : t) ->
            fun ~handle:(x537 : any) ->
              fun ?listeningListener:(x538 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x542 = t_to_js x541 in
                     Ojs.call (Ojs.get_prop_ascii x542 "listen") "apply"
                       [|x542;((let x539 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x539 "push" [|(any_to_js x537)|]);
                                (match x538 with
                                 | Some x540 ->
                                     ignore
                                       (Ojs.call x539 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x540 ()))|])
                                 | None -> ());
                                x539))|])
        let (close :
          t -> ?callback:(?err:Error.t -> unit -> unit) -> unit -> t) =
          fun (x548 : t) ->
            fun ?callback:(x543 : (?err:Error.t -> unit -> unit) option) ->
              fun () ->
                t_of_js
                  (let x549 = t_to_js x548 in
                   Ojs.call (Ojs.get_prop_ascii x549 "close") "apply"
                     [|x549;((let x544 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x543 with
                               | Some x545 ->
                                   ignore
                                     (Ojs.call x544 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x546 : Ojs.t) ->
                                                x545
                                                  ?err:(Ojs.option_of_js
                                                          Error.t_of_js x546)
                                                  ()))|])
                               | None -> ());
                              x544))|])
        let (address : t -> net_AddressInfo or_string or_null) =
          fun (x550 : t) ->
            or_null_of_js
              (fun (x551 : Ojs.t) ->
                 or_string_of_js net_AddressInfo_of_js x551)
              (Ojs.call (t_to_js x550) "address" [||])
        let (getConnections :
          t -> cb:(error:Error.t or_null -> count:int -> unit) -> unit) =
          fun (x557 : t) ->
            fun ~cb:(x553 : error:Error.t or_null -> count:int -> unit) ->
              ignore
                (Ojs.call (t_to_js x557) "getConnections"
                   [|(Ojs.fun_to_js 2
                        (fun (x554 : Ojs.t) ->
                           fun (x556 : Ojs.t) ->
                             x553 ~error:(or_null_of_js Error.t_of_js x554)
                               ~count:(Ojs.int_of_js x556)))|])
        let (ref : t -> t) =
          fun (x558 : t) -> t_of_js (Ojs.call (t_to_js x558) "ref" [||])
        let (unref : t -> t) =
          fun (x559 : t) -> t_of_js (Ojs.call (t_to_js x559) "unref" [||])
        let (get_maxConnections : t -> int) =
          fun (x560 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x560) "maxConnections")
        let (set_maxConnections : t -> int -> unit) =
          fun (x561 : t) ->
            fun (x562 : int) ->
              Ojs.set_prop_ascii (t_to_js x561) "maxConnections"
                (Ojs.int_to_js x562)
        let (get_connections : t -> int) =
          fun (x563 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x563) "connections")
        let (set_connections : t -> int -> unit) =
          fun (x564 : t) ->
            fun (x565 : int) ->
              Ojs.set_prop_ascii (t_to_js x564) "connections"
                (Ojs.int_to_js x565)
        let (get_listening : t -> bool) =
          fun (x566 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x566) "listening")
        let (set_listening : t -> bool -> unit) =
          fun (x567 : t) ->
            fun (x568 : bool) ->
              Ojs.set_prop_ascii (t_to_js x567) "listening"
                (Ojs.bool_to_js x568)
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x573 : t) ->
            fun ~event:(x569 : string) ->
              fun ~listener:(x570 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x573) "addListener"
                     [|(Ojs.string_to_js x569);(Ojs.fun_to_js_args
                                                  (fun (x571 : _) ->
                                                     x570
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x571 0)))|])
        let (addListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x576 : t) ->
            fun ~event:(x574 : [ `close ]) ->
              fun ~listener:(x575 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x576) "addListener"
                     [|((match x574 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x575 ()))|])
        let (addListener'' :
          t ->
            event:[ `connection ] ->
              listener:(socket:net_Socket -> unit) -> t)
          =
          fun (x580 : t) ->
            fun ~event:(x577 : [ `connection ]) ->
              fun ~listener:(x578 : socket:net_Socket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x580) "addListener"
                     [|((match x577 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x579 : Ojs.t) ->
                            x578 ~socket:(net_Socket_of_js x579)))|])
        let (addListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x584 : t) ->
            fun ~event:(x581 : [ `error ]) ->
              fun ~listener:(x582 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x584) "addListener"
                     [|((match x581 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x583 : Ojs.t) ->
                            x582 ~err:(Error.t_of_js x583)))|])
        let (addListener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x587 : t) ->
            fun ~event:(x585 : [ `listening ]) ->
              fun ~listener:(x586 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x587) "addListener"
                     [|((match x585 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x586 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x593 : t) ->
            fun ~event:(x588 : symbol or_string) ->
              fun ~args:(x589 : any list) ->
                Ojs.bool_of_js
                  (let x594 = t_to_js x593 in
                   Ojs.call (Ojs.get_prop_ascii x594 "emit") "apply"
                     [|x594;((let x590 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x590 "push"
                                   [|(or_string_to_js symbol_to_js x588)|]);
                              List.iter
                                (fun (x591 : any) ->
                                   ignore
                                     (Ojs.call x590 "push"
                                        [|(any_to_js x591)|])) x589;
                              x590))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x596 : t) ->
            fun ~event:(x595 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x596) "emit"
                   [|((match x595 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' :
          t -> event:[ `connection ] -> socket:net_Socket -> bool) =
          fun (x599 : t) ->
            fun ~event:(x597 : [ `connection ]) ->
              fun ~socket:(x598 : net_Socket) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x599) "emit"
                     [|((match x597 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       net_Socket_to_js x598)|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x602 : t) ->
            fun ~event:(x600 : [ `error ]) ->
              fun ~err:(x601 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x602) "emit"
                     [|((match x600 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x601)|])
        let (emit'''' : t -> event:[ `listening ] -> bool) =
          fun (x604 : t) ->
            fun ~event:(x603 : [ `listening ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x604) "emit"
                   [|((match x603 with
                       | `listening -> Ojs.string_to_js "listening"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x609 : t) ->
            fun ~event:(x605 : string) ->
              fun ~listener:(x606 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x609) "on"
                     [|(Ojs.string_to_js x605);(Ojs.fun_to_js_args
                                                  (fun (x607 : _) ->
                                                     x606
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x607 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x612 : t) ->
            fun ~event:(x610 : [ `close ]) ->
              fun ~listener:(x611 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x612) "on"
                     [|((match x610 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x611 ()))|])
        let (on'' :
          t ->
            event:[ `connection ] ->
              listener:(socket:net_Socket -> unit) -> t)
          =
          fun (x616 : t) ->
            fun ~event:(x613 : [ `connection ]) ->
              fun ~listener:(x614 : socket:net_Socket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x616) "on"
                     [|((match x613 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x615 : Ojs.t) ->
                            x614 ~socket:(net_Socket_of_js x615)))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x620 : t) ->
            fun ~event:(x617 : [ `error ]) ->
              fun ~listener:(x618 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x620) "on"
                     [|((match x617 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x619 : Ojs.t) ->
                            x618 ~err:(Error.t_of_js x619)))|])
        let (on'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x623 : t) ->
            fun ~event:(x621 : [ `listening ]) ->
              fun ~listener:(x622 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x623) "on"
                     [|((match x621 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x622 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x628 : t) ->
            fun ~event:(x624 : string) ->
              fun ~listener:(x625 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x628) "once"
                     [|(Ojs.string_to_js x624);(Ojs.fun_to_js_args
                                                  (fun (x626 : _) ->
                                                     x625
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x626 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x631 : t) ->
            fun ~event:(x629 : [ `close ]) ->
              fun ~listener:(x630 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x631) "once"
                     [|((match x629 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x630 ()))|])
        let (once'' :
          t ->
            event:[ `connection ] ->
              listener:(socket:net_Socket -> unit) -> t)
          =
          fun (x635 : t) ->
            fun ~event:(x632 : [ `connection ]) ->
              fun ~listener:(x633 : socket:net_Socket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x635) "once"
                     [|((match x632 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x634 : Ojs.t) ->
                            x633 ~socket:(net_Socket_of_js x634)))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x639 : t) ->
            fun ~event:(x636 : [ `error ]) ->
              fun ~listener:(x637 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x639) "once"
                     [|((match x636 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x638 : Ojs.t) ->
                            x637 ~err:(Error.t_of_js x638)))|])
        let (once'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x642 : t) ->
            fun ~event:(x640 : [ `listening ]) ->
              fun ~listener:(x641 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x642) "once"
                     [|((match x640 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x641 ()))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x647 : t) ->
            fun ~event:(x643 : string) ->
              fun ~listener:(x644 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x647) "prependListener"
                     [|(Ojs.string_to_js x643);(Ojs.fun_to_js_args
                                                  (fun (x645 : _) ->
                                                     x644
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x645 0)))|])
        let (prependListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x650 : t) ->
            fun ~event:(x648 : [ `close ]) ->
              fun ~listener:(x649 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x650) "prependListener"
                     [|((match x648 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x649 ()))|])
        let (prependListener'' :
          t ->
            event:[ `connection ] ->
              listener:(socket:net_Socket -> unit) -> t)
          =
          fun (x654 : t) ->
            fun ~event:(x651 : [ `connection ]) ->
              fun ~listener:(x652 : socket:net_Socket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x654) "prependListener"
                     [|((match x651 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x653 : Ojs.t) ->
                            x652 ~socket:(net_Socket_of_js x653)))|])
        let (prependListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x658 : t) ->
            fun ~event:(x655 : [ `error ]) ->
              fun ~listener:(x656 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x658) "prependListener"
                     [|((match x655 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x657 : Ojs.t) ->
                            x656 ~err:(Error.t_of_js x657)))|])
        let (prependListener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x661 : t) ->
            fun ~event:(x659 : [ `listening ]) ->
              fun ~listener:(x660 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x661) "prependListener"
                     [|((match x659 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x660 ()))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x666 : t) ->
            fun ~event:(x662 : string) ->
              fun ~listener:(x663 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x666) "prependOnceListener"
                     [|(Ojs.string_to_js x662);(Ojs.fun_to_js_args
                                                  (fun (x664 : _) ->
                                                     x663
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x664 0)))|])
        let (prependOnceListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x669 : t) ->
            fun ~event:(x667 : [ `close ]) ->
              fun ~listener:(x668 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x669) "prependOnceListener"
                     [|((match x667 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x668 ()))|])
        let (prependOnceListener'' :
          t ->
            event:[ `connection ] ->
              listener:(socket:net_Socket -> unit) -> t)
          =
          fun (x673 : t) ->
            fun ~event:(x670 : [ `connection ]) ->
              fun ~listener:(x671 : socket:net_Socket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x673) "prependOnceListener"
                     [|((match x670 with
                         | `connection -> Ojs.string_to_js "connection"));(
                       Ojs.fun_to_js 1
                         (fun (x672 : Ojs.t) ->
                            x671 ~socket:(net_Socket_of_js x672)))|])
        let (prependOnceListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x677 : t) ->
            fun ~event:(x674 : [ `error ]) ->
              fun ~listener:(x675 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x677) "prependOnceListener"
                     [|((match x674 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x676 : Ojs.t) ->
                            x675 ~err:(Error.t_of_js x676)))|])
        let (prependOnceListener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x680 : t) ->
            fun ~event:(x678 : [ `listening ]) ->
              fun ~listener:(x679 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x680) "prependOnceListener"
                     [|((match x678 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x679 ()))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x681 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x681)
      end
    module TcpNetConnectOpts =
      struct
        type t = net_TcpNetConnectOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x683 : Ojs.t) -> net_TcpNetConnectOpts_of_js x683
        and t_to_js : t -> Ojs.t =
          fun (x682 : net_TcpNetConnectOpts) ->
            net_TcpNetConnectOpts_to_js x682
        let (get_timeout : t -> int) =
          fun (x684 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x684) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x685 : t) ->
            fun (x686 : int) ->
              Ojs.set_prop_ascii (t_to_js x685) "timeout"
                (Ojs.int_to_js x686)
        let (cast : t -> net_TcpSocketConnectOpts) =
          fun (x687 : t) -> net_TcpSocketConnectOpts_of_js (t_to_js x687)
        let (cast' : t -> net_SocketConstructorOpts) =
          fun (x688 : t) -> net_SocketConstructorOpts_of_js (t_to_js x688)
      end
    module IpcNetConnectOpts =
      struct
        type t = net_IpcNetConnectOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x690 : Ojs.t) -> net_IpcNetConnectOpts_of_js x690
        and t_to_js : t -> Ojs.t =
          fun (x689 : net_IpcNetConnectOpts) ->
            net_IpcNetConnectOpts_to_js x689
        let (get_timeout : t -> int) =
          fun (x691 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x691) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x692 : t) ->
            fun (x693 : int) ->
              Ojs.set_prop_ascii (t_to_js x692) "timeout"
                (Ojs.int_to_js x693)
        let (cast : t -> net_IpcSocketConnectOpts) =
          fun (x694 : t) -> net_IpcSocketConnectOpts_of_js (t_to_js x694)
        let (cast' : t -> net_SocketConstructorOpts) =
          fun (x695 : t) -> net_SocketConstructorOpts_of_js (t_to_js x695)
      end
    module NetConnectOpts =
      struct
        type t = net_NetConnectOpts
        let rec t_of_js : Ojs.t -> t =
          fun (x697 : Ojs.t) -> net_NetConnectOpts_of_js x697
        and t_to_js : t -> Ojs.t =
          fun (x696 : net_NetConnectOpts) -> net_NetConnectOpts_to_js x696
      end
    let (createServer :
      ?connectionListener:(socket:net_Socket -> unit) -> unit -> net_Server)
      =
      fun ?connectionListener:(x698 : (socket:net_Socket -> unit) option) ->
        fun () ->
          net_Server_of_js
            (let x702 = Import.net in
             Ojs.call (Ojs.get_prop_ascii x702 "createServer") "apply"
               [|x702;((let x699 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x698 with
                         | Some x700 ->
                             ignore
                               (Ojs.call x699 "push"
                                  [|(Ojs.fun_to_js 1
                                       (fun (x701 : Ojs.t) ->
                                          x700
                                            ~socket:(net_Socket_of_js x701)))|])
                         | None -> ());
                        x699))|])
    let (createServer :
      ?options:net_ServerOpts ->
        ?connectionListener:(socket:net_Socket -> unit) -> unit -> net_Server)
      =
      fun ?options:(x703 : net_ServerOpts option) ->
        fun ?connectionListener:(x704 : (socket:net_Socket -> unit) option)
          ->
          fun () ->
            net_Server_of_js
              (let x709 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x709 "createServer") "apply"
                 [|x709;((let x705 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x703 with
                           | Some x708 ->
                               ignore
                                 (Ojs.call x705 "push"
                                    [|(net_ServerOpts_to_js x708)|])
                           | None -> ());
                          (match x704 with
                           | Some x706 ->
                               ignore
                                 (Ojs.call x705 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x707 : Ojs.t) ->
                                            x706
                                              ~socket:(net_Socket_of_js x707)))|])
                           | None -> ());
                          x705))|])
    let (connect :
      options:net_NetConnectOpts ->
        ?connectionListener:(unit -> unit) -> unit -> net_Socket)
      =
      fun ~options:(x710 : net_NetConnectOpts) ->
        fun ?connectionListener:(x711 : (unit -> unit) option) ->
          fun () ->
            net_Socket_of_js
              (let x714 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x714 "connect") "apply"
                 [|x714;((let x712 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x712 "push"
                               [|(net_NetConnectOpts_to_js x710)|]);
                          (match x711 with
                           | Some x713 ->
                               ignore
                                 (Ojs.call x712 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x713 ()))|])
                           | None -> ());
                          x712))|])
    let (connect :
      port:int ->
        ?host:string ->
          ?connectionListener:(unit -> unit) -> unit -> net_Socket)
      =
      fun ~port:(x715 : int) ->
        fun ?host:(x716 : string option) ->
          fun ?connectionListener:(x717 : (unit -> unit) option) ->
            fun () ->
              net_Socket_of_js
                (let x721 = Import.net in
                 Ojs.call (Ojs.get_prop_ascii x721 "connect") "apply"
                   [|x721;((let x718 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x718 "push" [|(Ojs.int_to_js x715)|]);
                            (match x716 with
                             | Some x720 ->
                                 ignore
                                   (Ojs.call x718 "push"
                                      [|(Ojs.string_to_js x720)|])
                             | None -> ());
                            (match x717 with
                             | Some x719 ->
                                 ignore
                                   (Ojs.call x718 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x719 ()))|])
                             | None -> ());
                            x718))|])
    let (connect :
      path:string -> ?connectionListener:(unit -> unit) -> unit -> net_Socket)
      =
      fun ~path:(x722 : string) ->
        fun ?connectionListener:(x723 : (unit -> unit) option) ->
          fun () ->
            net_Socket_of_js
              (let x726 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x726 "connect") "apply"
                 [|x726;((let x724 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x724 "push" [|(Ojs.string_to_js x722)|]);
                          (match x723 with
                           | Some x725 ->
                               ignore
                                 (Ojs.call x724 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x725 ()))|])
                           | None -> ());
                          x724))|])
    let (createConnection :
      options:net_NetConnectOpts ->
        ?connectionListener:(unit -> unit) -> unit -> net_Socket)
      =
      fun ~options:(x727 : net_NetConnectOpts) ->
        fun ?connectionListener:(x728 : (unit -> unit) option) ->
          fun () ->
            net_Socket_of_js
              (let x731 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x731 "createConnection") "apply"
                 [|x731;((let x729 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x729 "push"
                               [|(net_NetConnectOpts_to_js x727)|]);
                          (match x728 with
                           | Some x730 ->
                               ignore
                                 (Ojs.call x729 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x730 ()))|])
                           | None -> ());
                          x729))|])
    let (createConnection :
      port:int ->
        ?host:string ->
          ?connectionListener:(unit -> unit) -> unit -> net_Socket)
      =
      fun ~port:(x732 : int) ->
        fun ?host:(x733 : string option) ->
          fun ?connectionListener:(x734 : (unit -> unit) option) ->
            fun () ->
              net_Socket_of_js
                (let x738 = Import.net in
                 Ojs.call (Ojs.get_prop_ascii x738 "createConnection")
                   "apply"
                   [|x738;((let x735 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x735 "push" [|(Ojs.int_to_js x732)|]);
                            (match x733 with
                             | Some x737 ->
                                 ignore
                                   (Ojs.call x735 "push"
                                      [|(Ojs.string_to_js x737)|])
                             | None -> ());
                            (match x734 with
                             | Some x736 ->
                                 ignore
                                   (Ojs.call x735 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x736 ()))|])
                             | None -> ());
                            x735))|])
    let (createConnection :
      path:string -> ?connectionListener:(unit -> unit) -> unit -> net_Socket)
      =
      fun ~path:(x739 : string) ->
        fun ?connectionListener:(x740 : (unit -> unit) option) ->
          fun () ->
            net_Socket_of_js
              (let x743 = Import.net in
               Ojs.call (Ojs.get_prop_ascii x743 "createConnection") "apply"
                 [|x743;((let x741 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x741 "push" [|(Ojs.string_to_js x739)|]);
                          (match x740 with
                           | Some x742 ->
                               ignore
                                 (Ojs.call x741 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x742 ()))|])
                           | None -> ());
                          x741))|])
    let (isIP : input:string -> int) =
      fun ~input:(x744 : string) ->
        Ojs.int_of_js
          (Ojs.call Import.net "isIP" [|(Ojs.string_to_js x744)|])
    let (isIPv4 : input:string -> bool) =
      fun ~input:(x745 : string) ->
        Ojs.bool_of_js
          (Ojs.call Import.net "isIPv4" [|(Ojs.string_to_js x745)|])
    let (isIPv6 : input:string -> bool) =
      fun ~input:(x746 : string) ->
        Ojs.bool_of_js
          (Ojs.call Import.net "isIPv6" [|(Ojs.string_to_js x746)|])
  end
