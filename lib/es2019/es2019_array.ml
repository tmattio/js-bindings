[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2018
module FlatArray =
  struct
    type ('Arr, 'Depth) t = Ojs.t
    let rec t_of_js :
      'Arr 'Depth .
        (Ojs.t -> 'Arr) -> (Ojs.t -> 'Depth) -> Ojs.t -> ('Arr, 'Depth) t
      = fun (type __Arr) -> fun (type __Depth) ->
      fun (__Arr_of_js : Ojs.t -> __Arr) ->
        fun (__Depth_of_js : Ojs.t -> __Depth) -> fun (x2 : Ojs.t) -> x2
    and t_to_js :
      'Arr 'Depth .
        ('Arr -> Ojs.t) -> ('Depth -> Ojs.t) -> ('Arr, 'Depth) t -> Ojs.t
      = fun (type __Arr) -> fun (type __Depth) ->
      fun (__Arr_to_js : __Arr -> Ojs.t) ->
        fun (__Depth_to_js : __Depth -> Ojs.t) -> fun (x1 : Ojs.t) -> x1
  end
module ReadonlyArray =
  struct
    include struct include ReadonlyArray end
    let (flat_map :
      'T t ->
        callback:(this:'This ->
                    value:'T ->
                      index:int -> array:'T list -> ('U, 'U t) union2)
          -> ?thisArg:'This -> unit -> 'U list)
      =
      fun (x15 : 'T t) ->
        fun
          ~callback:(x3 :
                      this:'This ->
                        value:'T ->
                          index:int -> array:'T list -> ('U, 'U t) union2)
          ->
          fun ?thisArg:(x4 : 'This option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x17 = t_to_js Obj.magic x15 in
                 Ojs.call (Ojs.get_prop_ascii x17 "flatMap") "apply"
                   [|x17;((let x5 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x5 "push"
                                [|(Ojs.fun_to_js 4
                                     (fun (x7 : Ojs.t) ->
                                        fun (x8 : Ojs.t) ->
                                          fun (x9 : Ojs.t) ->
                                            fun (x10 : Ojs.t) ->
                                              union2_to_js Obj.magic
                                                (fun (x13 : 'U t) ->
                                                   t_to_js Obj.magic x13)
                                                (x3 ~this:(Obj.magic x7)
                                                   ~value:(Obj.magic x8)
                                                   ~index:(Ojs.int_of_js x9)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x10))))|]);
                           (match x4 with
                            | Some x6 ->
                                ignore
                                  (Ojs.call x5 "push" [|(Obj.magic x6)|])
                            | None -> ());
                           x5))|])
    let (flat :
      'T t -> this:'A -> ?depth:'D -> unit -> ('A, 'D) FlatArray.t list) =
      fun (x23 : 'T t) ->
        fun ~this:(x19 : 'A) ->
          fun ?depth:(x20 : 'D option) ->
            fun () ->
              Ojs.list_of_js
                (fun (x26 : Ojs.t) ->
                   FlatArray.t_of_js Obj.magic Obj.magic x26)
                (let x25 = t_to_js Obj.magic x23 in
                 Ojs.call (Ojs.get_prop_ascii x25 "flat") "apply"
                   [|x25;((let x21 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x21 "push" [|(Obj.magic x19)|]);
                           (match x20 with
                            | Some x22 ->
                                ignore
                                  (Ojs.call x21 "push" [|(Obj.magic x22)|])
                            | None -> ());
                           x21))|])
    let (to_ml : 'T t -> 'T list) =
      fun (x29 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x29)
    let (of_ml : 'T list -> 'T t) =
      fun (x32 : 'T list) -> t_of_js Obj.magic (Ojs.list_to_js Obj.magic x32)
  end
module Array =
  struct
    include struct include Array end
    let (flat_map :
      'T t ->
        callback:(this:'This ->
                    value:'T ->
                      index:int ->
                        array:'T list -> ('U, 'U ReadonlyArray.t) union2)
          -> ?thisArg:'This -> unit -> 'U list)
      =
      fun (x47 : 'T t) ->
        fun
          ~callback:(x35 :
                      this:'This ->
                        value:'T ->
                          index:int ->
                            array:'T list -> ('U, 'U ReadonlyArray.t) union2)
          ->
          fun ?thisArg:(x36 : 'This option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x49 = t_to_js Obj.magic x47 in
                 Ojs.call (Ojs.get_prop_ascii x49 "flatMap") "apply"
                   [|x49;((let x37 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x37 "push"
                                [|(Ojs.fun_to_js 4
                                     (fun (x39 : Ojs.t) ->
                                        fun (x40 : Ojs.t) ->
                                          fun (x41 : Ojs.t) ->
                                            fun (x42 : Ojs.t) ->
                                              union2_to_js Obj.magic
                                                (fun
                                                   (x45 : 'U ReadonlyArray.t)
                                                   ->
                                                   ReadonlyArray.t_to_js
                                                     Obj.magic x45)
                                                (x35 ~this:(Obj.magic x39)
                                                   ~value:(Obj.magic x40)
                                                   ~index:(Ojs.int_of_js x41)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x42))))|]);
                           (match x36 with
                            | Some x38 ->
                                ignore
                                  (Ojs.call x37 "push" [|(Obj.magic x38)|])
                            | None -> ());
                           x37))|])
    let (flat :
      'T t -> this:'A -> ?depth:'D -> unit -> ('A, 'D) FlatArray.t list) =
      fun (x55 : 'T t) ->
        fun ~this:(x51 : 'A) ->
          fun ?depth:(x52 : 'D option) ->
            fun () ->
              Ojs.list_of_js
                (fun (x58 : Ojs.t) ->
                   FlatArray.t_of_js Obj.magic Obj.magic x58)
                (let x57 = t_to_js Obj.magic x55 in
                 Ojs.call (Ojs.get_prop_ascii x57 "flat") "apply"
                   [|x57;((let x53 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x53 "push" [|(Obj.magic x51)|]);
                           (match x52 with
                            | Some x54 ->
                                ignore
                                  (Ojs.call x53 "push" [|(Obj.magic x54)|])
                            | None -> ());
                           x53))|])
    let (to_ml : 'T t -> 'T list) =
      fun (x61 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x61)
    let (of_ml : 'T list -> 'T t) =
      fun (x64 : 'T list) -> t_of_js Obj.magic (Ojs.list_to_js Obj.magic x64)
  end
