[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_language : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "language")
    let (set_language : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "language" (Ojs.string_to_js x5)
    let (get_value : t -> string) =
      fun (x6 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "value")
    let (set_value : t -> string -> unit) =
      fun (x7 : t) ->
        fun (x8 : string) ->
          Ojs.set_prop_ascii (t_to_js x7) "value" (Ojs.string_to_js x8)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (get_reason : t -> string) =
      fun (x11 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x11) "reason")
    let (set_reason : t -> string -> unit) =
      fun (x12 : t) ->
        fun (x13 : string) ->
          Ojs.set_prop_ascii (t_to_js x12) "reason" (Ojs.string_to_js x13)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get : t -> string -> ChangeAnnotation.t) =
      fun (x16 : t) ->
        fun (x17 : string) ->
          ChangeAnnotation.t_of_js
            (Ojs.get_prop (t_to_js x16) (Ojs.string_to_js x17))
    let (set : t -> string -> ChangeAnnotation.t -> unit) =
      fun (x18 : t) ->
        fun (x19 : string) ->
          fun (x20 : ChangeAnnotation.t) ->
            Ojs.set_prop (t_to_js x18) (Ojs.string_to_js x19)
              (ChangeAnnotation.t_to_js x20)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x22 : Ojs.t) -> x22
    and t_to_js : t -> Ojs.t = fun (x21 : Ojs.t) -> x21
    let (get : t -> string -> TextEdit.t list) =
      fun (x23 : t) ->
        fun (x24 : string) ->
          Ojs.list_of_js TextEdit.t_of_js
            (Ojs.get_prop (t_to_js x23) (Ojs.string_to_js x24))
    let (set : t -> string -> TextEdit.t list -> unit) =
      fun (x26 : t) ->
        fun (x27 : string) ->
          fun (x28 : TextEdit.t list) ->
            Ojs.set_prop (t_to_js x26) (Ojs.string_to_js x27)
              (Ojs.list_to_js TextEdit.t_to_js x28)
  end
module DocumentUri =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> Ojs.string_of_js x31
    and t_to_js : t -> Ojs.t = fun (x30 : string) -> Ojs.string_to_js x30
  end
module URI =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t = fun (x33 : Ojs.t) -> Ojs.string_of_js x33
    and t_to_js : t -> Ojs.t = fun (x32 : string) -> Ojs.string_to_js x32
  end
module Integer =
  struct
    type t = int
    let rec t_of_js : Ojs.t -> t = fun (x35 : Ojs.t) -> Ojs.int_of_js x35
    and t_to_js : t -> Ojs.t = fun (x34 : int) -> Ojs.int_to_js x34
    let (min_value : any) =
      any_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "integer")
           "MIN_VALUE")
    let (max_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "integer")
           "MAX_VALUE")
  end
module Uinteger =
  struct
    type t = int
    let rec t_of_js : Ojs.t -> t = fun (x37 : Ojs.t) -> Ojs.int_of_js x37
    and t_to_js : t -> Ojs.t = fun (x36 : int) -> Ojs.int_to_js x36
    let (min_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "uinteger")
           "MIN_VALUE")
    let (max_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "uinteger")
           "MAX_VALUE")
  end
module Decimal =
  struct
    type t = int
    let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> Ojs.int_of_js x39
    and t_to_js : t -> Ojs.t = fun (x38 : int) -> Ojs.int_to_js x38
  end
module Position =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x41 : Ojs.t) -> x41
    and t_to_js : t -> Ojs.t = fun (x40 : Ojs.t) -> x40
    let (get_line : t -> uinteger) =
      fun (x42 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x42) "line")
    let (set_line : t -> uinteger -> unit) =
      fun (x43 : t) ->
        fun (x44 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x43) "line" (uinteger_to_js x44)
    let (get_character : t -> uinteger) =
      fun (x45 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x45) "character")
    let (set_character : t -> uinteger -> unit) =
      fun (x46 : t) ->
        fun (x47 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x46) "character" (uinteger_to_js x47)
    let (create_ : line:uinteger -> character:uinteger -> Position.t) =
      fun ~line:(x48 : uinteger) ->
        fun ~character:(x49 : uinteger) ->
          Position.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Position") "create"
               [|(uinteger_to_js x48);(uinteger_to_js x49)|])
    let (is : value:any -> bool) =
      fun ~value:(x50 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Position") "is"
             [|(any_to_js x50)|])
  end
module Range =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x52 : Ojs.t) -> x52
    and t_to_js : t -> Ojs.t = fun (x51 : Ojs.t) -> x51
    let (get_start : t -> Position.t) =
      fun (x53 : t) ->
        Position.t_of_js (Ojs.get_prop_ascii (t_to_js x53) "start")
    let (set_start : t -> Position.t -> unit) =
      fun (x54 : t) ->
        fun (x55 : Position.t) ->
          Ojs.set_prop_ascii (t_to_js x54) "start" (Position.t_to_js x55)
    let (get_end : t -> Position.t) =
      fun (x56 : t) ->
        Position.t_of_js (Ojs.get_prop_ascii (t_to_js x56) "end")
    let (set_end : t -> Position.t -> unit) =
      fun (x57 : t) ->
        fun (x58 : Position.t) ->
          Ojs.set_prop_ascii (t_to_js x57) "end" (Position.t_to_js x58)
    let (create_ : start:Position.t -> end_:Position.t -> Range.t) =
      fun ~start:(x59 : Position.t) ->
        fun ~end_:(x60 : Position.t) ->
          Range.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Range") "create"
               [|(Position.t_to_js x59);(Position.t_to_js x60)|])
    let (create_ :
      start_line:uinteger ->
        start_character:uinteger ->
          end_line:uinteger -> end_character:uinteger -> Range.t)
      =
      fun ~start_line:(x61 : uinteger) ->
        fun ~start_character:(x62 : uinteger) ->
          fun ~end_line:(x63 : uinteger) ->
            fun ~end_character:(x64 : uinteger) ->
              Range.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Range") "create"
                   [|(uinteger_to_js x61);(uinteger_to_js x62);(uinteger_to_js
                                                                  x63);(
                     uinteger_to_js x64)|])
    let (is : value:any -> bool) =
      fun ~value:(x65 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Range") "is"
             [|(any_to_js x65)|])
  end
module Location =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x67 : Ojs.t) -> x67
    and t_to_js : t -> Ojs.t = fun (x66 : Ojs.t) -> x66
    let (get_uri : t -> DocumentUri.t) =
      fun (x68 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x68) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x69 : t) ->
        fun (x70 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x69) "uri" (DocumentUri.t_to_js x70)
    let (get_range : t -> Range.t) =
      fun (x71 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x71) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x72 : t) ->
        fun (x73 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x72) "range" (Range.t_to_js x73)
    let (create_ : uri:DocumentUri.t -> range:Range.t -> Location.t) =
      fun ~uri:(x74 : DocumentUri.t) ->
        fun ~range:(x75 : Range.t) ->
          Location.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Location") "create"
               [|(DocumentUri.t_to_js x74);(Range.t_to_js x75)|])
    let (is : value:any -> bool) =
      fun ~value:(x76 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Location") "is"
             [|(any_to_js x76)|])
  end
module LocationLink =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x78 : Ojs.t) -> x78
    and t_to_js : t -> Ojs.t = fun (x77 : Ojs.t) -> x77
    let (get_origin_selection_range : t -> Range.t) =
      fun (x79 : t) ->
        Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x79) "originSelectionRange")
    let (set_origin_selection_range : t -> Range.t -> unit) =
      fun (x80 : t) ->
        fun (x81 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x80) "originSelectionRange"
            (Range.t_to_js x81)
    let (get_target_uri : t -> DocumentUri.t) =
      fun (x82 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x82) "targetUri")
    let (set_target_uri : t -> DocumentUri.t -> unit) =
      fun (x83 : t) ->
        fun (x84 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x83) "targetUri"
            (DocumentUri.t_to_js x84)
    let (get_target_range : t -> Range.t) =
      fun (x85 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x85) "targetRange")
    let (set_target_range : t -> Range.t -> unit) =
      fun (x86 : t) ->
        fun (x87 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x86) "targetRange" (Range.t_to_js x87)
    let (get_target_selection_range : t -> Range.t) =
      fun (x88 : t) ->
        Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x88) "targetSelectionRange")
    let (set_target_selection_range : t -> Range.t -> unit) =
      fun (x89 : t) ->
        fun (x90 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x89) "targetSelectionRange"
            (Range.t_to_js x90)
    let (create_ :
      target_uri:DocumentUri.t ->
        target_range:Range.t ->
          target_selection_range:Range.t ->
            ?origin_selection_range:Range.t -> unit -> LocationLink.t)
      =
      fun ~target_uri:(x91 : DocumentUri.t) ->
        fun ~target_range:(x92 : Range.t) ->
          fun ~target_selection_range:(x93 : Range.t) ->
            fun ?origin_selection_range:(x94 : Range.t option) ->
              fun () ->
                LocationLink.t_of_js
                  (let x97 = Ojs.get_prop_ascii Ojs.global "LocationLink" in
                   Ojs.call (Ojs.get_prop_ascii x97 "create") "apply"
                     [|x97;((let x95 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x95 "push"
                                  [|(DocumentUri.t_to_js x91)|]);
                             ignore
                               (Ojs.call x95 "push" [|(Range.t_to_js x92)|]);
                             ignore
                               (Ojs.call x95 "push" [|(Range.t_to_js x93)|]);
                             (match x94 with
                              | Some x96 ->
                                  ignore
                                    (Ojs.call x95 "push"
                                       [|(Range.t_to_js x96)|])
                              | None -> ());
                             x95))|])
    let (is : value:any -> bool) =
      fun ~value:(x98 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "LocationLink") "is"
             [|(any_to_js x98)|])
  end
module Color =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x100 : Ojs.t) -> x100
    and t_to_js : t -> Ojs.t = fun (x99 : Ojs.t) -> x99
    let (get_red : t -> decimal) =
      fun (x101 : t) ->
        decimal_of_js (Ojs.get_prop_ascii (t_to_js x101) "red")
    let (get_green : t -> decimal) =
      fun (x102 : t) ->
        decimal_of_js (Ojs.get_prop_ascii (t_to_js x102) "green")
    let (get_blue : t -> decimal) =
      fun (x103 : t) ->
        decimal_of_js (Ojs.get_prop_ascii (t_to_js x103) "blue")
    let (get_alpha : t -> decimal) =
      fun (x104 : t) ->
        decimal_of_js (Ojs.get_prop_ascii (t_to_js x104) "alpha")
    let (create_ :
      red:decimal ->
        green:decimal -> blue:decimal -> alpha:decimal -> Color.t)
      =
      fun ~red:(x105 : decimal) ->
        fun ~green:(x106 : decimal) ->
          fun ~blue:(x107 : decimal) ->
            fun ~alpha:(x108 : decimal) ->
              Color.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Color") "create"
                   [|(decimal_to_js x105);(decimal_to_js x106);(decimal_to_js
                                                                  x107);(
                     decimal_to_js x108)|])
    let (is : value:any -> bool) =
      fun ~value:(x109 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Color") "is"
             [|(any_to_js x109)|])
  end
module ColorInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x111 : Ojs.t) -> x111
    and t_to_js : t -> Ojs.t = fun (x110 : Ojs.t) -> x110
    let (get_range : t -> Range.t) =
      fun (x112 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x112) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x113 : t) ->
        fun (x114 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x113) "range" (Range.t_to_js x114)
    let (get_color : t -> Color.t) =
      fun (x115 : t) ->
        Color.t_of_js (Ojs.get_prop_ascii (t_to_js x115) "color")
    let (set_color : t -> Color.t -> unit) =
      fun (x116 : t) ->
        fun (x117 : Color.t) ->
          Ojs.set_prop_ascii (t_to_js x116) "color" (Color.t_to_js x117)
    let (create_ : range:Range.t -> color:Color.t -> ColorInformation.t) =
      fun ~range:(x118 : Range.t) ->
        fun ~color:(x119 : Color.t) ->
          ColorInformation.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "ColorInformation")
               "create" [|(Range.t_to_js x118);(Color.t_to_js x119)|])
    let (is : value:any -> bool) =
      fun ~value:(x120 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ColorInformation") "is"
             [|(any_to_js x120)|])
  end
module ColorPresentation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x122 : Ojs.t) -> x122
    and t_to_js : t -> Ojs.t = fun (x121 : Ojs.t) -> x121
    let (get_label : t -> string) =
      fun (x123 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x123) "label")
    let (set_label : t -> string -> unit) =
      fun (x124 : t) ->
        fun (x125 : string) ->
          Ojs.set_prop_ascii (t_to_js x124) "label" (Ojs.string_to_js x125)
    let (get_text_edit : t -> TextEdit.t) =
      fun (x126 : t) ->
        TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x126) "textEdit")
    let (set_text_edit : t -> TextEdit.t -> unit) =
      fun (x127 : t) ->
        fun (x128 : TextEdit.t) ->
          Ojs.set_prop_ascii (t_to_js x127) "textEdit"
            (TextEdit.t_to_js x128)
    let (get_additional_text_edits : t -> TextEdit.t list) =
      fun (x129 : t) ->
        Ojs.list_of_js TextEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x129) "additionalTextEdits")
    let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
      fun (x131 : t) ->
        fun (x132 : TextEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x131) "additionalTextEdits"
            (Ojs.list_to_js TextEdit.t_to_js x132)
    let (create_ :
      label:string ->
        ?text_edit:TextEdit.t ->
          ?additional_text_edits:TextEdit.t list ->
            unit -> ColorPresentation.t)
      =
      fun ~label:(x134 : string) ->
        fun ?text_edit:(x135 : TextEdit.t option) ->
          fun ?additional_text_edits:(x136 : TextEdit.t list option) ->
            fun () ->
              ColorPresentation.t_of_js
                (let x141 = Ojs.get_prop_ascii Ojs.global "ColorPresentation" in
                 Ojs.call (Ojs.get_prop_ascii x141 "create") "apply"
                   [|x141;((let x137 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x137 "push"
                                 [|(Ojs.string_to_js x134)|]);
                            (match x135 with
                             | Some x140 ->
                                 ignore
                                   (Ojs.call x137 "push"
                                      [|(TextEdit.t_to_js x140)|])
                             | None -> ());
                            (match x136 with
                             | Some x138 ->
                                 ignore
                                   (Ojs.call x137 "push"
                                      [|(Ojs.list_to_js TextEdit.t_to_js x138)|])
                             | None -> ());
                            x137))|])
    let (is : value:any -> bool) =
      fun ~value:(x142 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ColorPresentation") "is"
             [|(any_to_js x142)|])
  end
module FoldingRangeKind =
  struct
    type t = [ `Comment  | `Imports  | `Region ]
    let rec t_of_js : Ojs.t -> t =
      fun (x144 : Ojs.t) ->
        let x145 = x144 in
        match Ojs.string_of_js x145 with
        | "comment" -> `Comment
        | "imports" -> `Imports
        | "region" -> `Region
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x143 : [ `Comment  | `Imports  | `Region ]) ->
        match x143 with
        | `Comment -> Ojs.string_to_js "comment"
        | `Imports -> Ojs.string_to_js "imports"
        | `Region -> Ojs.string_to_js "region"
  end
module FoldingRange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x147 : Ojs.t) -> x147
    and t_to_js : t -> Ojs.t = fun (x146 : Ojs.t) -> x146
    let (get_start_line : t -> uinteger) =
      fun (x148 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x148) "startLine")
    let (set_start_line : t -> uinteger -> unit) =
      fun (x149 : t) ->
        fun (x150 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x149) "startLine" (uinteger_to_js x150)
    let (get_start_character : t -> uinteger) =
      fun (x151 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x151) "startCharacter")
    let (set_start_character : t -> uinteger -> unit) =
      fun (x152 : t) ->
        fun (x153 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x152) "startCharacter"
            (uinteger_to_js x153)
    let (get_end_line : t -> uinteger) =
      fun (x154 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x154) "endLine")
    let (set_end_line : t -> uinteger -> unit) =
      fun (x155 : t) ->
        fun (x156 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x155) "endLine" (uinteger_to_js x156)
    let (get_end_character : t -> uinteger) =
      fun (x157 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x157) "endCharacter")
    let (set_end_character : t -> uinteger -> unit) =
      fun (x158 : t) ->
        fun (x159 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x158) "endCharacter"
            (uinteger_to_js x159)
    let (get_kind : t -> string) =
      fun (x160 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x160) "kind")
    let (set_kind : t -> string -> unit) =
      fun (x161 : t) ->
        fun (x162 : string) ->
          Ojs.set_prop_ascii (t_to_js x161) "kind" (Ojs.string_to_js x162)
    let (create_ :
      start_line:uinteger ->
        end_line:uinteger ->
          ?start_character:uinteger ->
            ?end_character:uinteger -> ?kind:string -> unit -> FoldingRange.t)
      =
      fun ~start_line:(x163 : uinteger) ->
        fun ~end_line:(x164 : uinteger) ->
          fun ?start_character:(x165 : uinteger option) ->
            fun ?end_character:(x166 : uinteger option) ->
              fun ?kind:(x167 : string option) ->
                fun () ->
                  FoldingRange.t_of_js
                    (let x172 = Ojs.get_prop_ascii Ojs.global "FoldingRange" in
                     Ojs.call (Ojs.get_prop_ascii x172 "create") "apply"
                       [|x172;((let x168 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x168 "push"
                                     [|(uinteger_to_js x163)|]);
                                ignore
                                  (Ojs.call x168 "push"
                                     [|(uinteger_to_js x164)|]);
                                (match x165 with
                                 | Some x171 ->
                                     ignore
                                       (Ojs.call x168 "push"
                                          [|(uinteger_to_js x171)|])
                                 | None -> ());
                                (match x166 with
                                 | Some x170 ->
                                     ignore
                                       (Ojs.call x168 "push"
                                          [|(uinteger_to_js x170)|])
                                 | None -> ());
                                (match x167 with
                                 | Some x169 ->
                                     ignore
                                       (Ojs.call x168 "push"
                                          [|(Ojs.string_to_js x169)|])
                                 | None -> ());
                                x168))|])
    let (is : value:any -> bool) =
      fun ~value:(x173 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "FoldingRange") "is"
             [|(any_to_js x173)|])
  end
module DiagnosticRelatedInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x175 : Ojs.t) -> x175
    and t_to_js : t -> Ojs.t = fun (x174 : Ojs.t) -> x174
    let (get_location : t -> Location.t) =
      fun (x176 : t) ->
        Location.t_of_js (Ojs.get_prop_ascii (t_to_js x176) "location")
    let (set_location : t -> Location.t -> unit) =
      fun (x177 : t) ->
        fun (x178 : Location.t) ->
          Ojs.set_prop_ascii (t_to_js x177) "location"
            (Location.t_to_js x178)
    let (get_message : t -> string) =
      fun (x179 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x179) "message")
    let (set_message : t -> string -> unit) =
      fun (x180 : t) ->
        fun (x181 : string) ->
          Ojs.set_prop_ascii (t_to_js x180) "message" (Ojs.string_to_js x181)
    let (create_ :
      location:Location.t -> message:string -> DiagnosticRelatedInformation.t)
      =
      fun ~location:(x182 : Location.t) ->
        fun ~message:(x183 : string) ->
          DiagnosticRelatedInformation.t_of_js
            (Ojs.call
               (Ojs.get_prop_ascii Ojs.global "DiagnosticRelatedInformation")
               "create" [|(Location.t_to_js x182);(Ojs.string_to_js x183)|])
    let (is : value:any -> bool) =
      fun ~value:(x184 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "DiagnosticRelatedInformation")
             "is" [|(any_to_js x184)|])
  end
module DiagnosticSeverity =
  struct
    type t = [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x186 : Ojs.t) ->
        let x187 = x186 in
        match Ojs.int_of_js x187 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x185 : [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4 ]) ->
        match x185 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
        | `L_n_4 -> Ojs.int_to_js 4
    let (error : [ `L_n_1 ]) =
      let x188 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Error" in
      match Ojs.int_of_js x188 with | 1 -> `L_n_1 | _ -> assert false
    let (warning : [ `L_n_2 ]) =
      let x189 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Warning" in
      match Ojs.int_of_js x189 with | 2 -> `L_n_2 | _ -> assert false
    let (information : [ `L_n_3 ]) =
      let x190 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Information" in
      match Ojs.int_of_js x190 with | 3 -> `L_n_3 | _ -> assert false
    let (hint : [ `L_n_4 ]) =
      let x191 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Hint" in
      match Ojs.int_of_js x191 with | 4 -> `L_n_4 | _ -> assert false
  end
module DiagnosticTag =
  struct
    type t = [ `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x193 : Ojs.t) ->
        let x194 = x193 in
        match Ojs.int_of_js x194 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x192 : [ `L_n_1  | `L_n_2 ]) ->
        match x192 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (unnecessary : [ `L_n_1 ]) =
      let x195 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DiagnosticTag")
          "Unnecessary" in
      match Ojs.int_of_js x195 with | 1 -> `L_n_1 | _ -> assert false
    let (deprecated : [ `L_n_2 ]) =
      let x196 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DiagnosticTag")
          "Deprecated" in
      match Ojs.int_of_js x196 with | 2 -> `L_n_2 | _ -> assert false
  end
module CodeDescription =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x198 : Ojs.t) -> x198
    and t_to_js : t -> Ojs.t = fun (x197 : Ojs.t) -> x197
    let (get_href : t -> URI.t) =
      fun (x199 : t) ->
        URI.t_of_js (Ojs.get_prop_ascii (t_to_js x199) "href")
    let (set_href : t -> URI.t -> unit) =
      fun (x200 : t) ->
        fun (x201 : URI.t) ->
          Ojs.set_prop_ascii (t_to_js x200) "href" (URI.t_to_js x201)
    let (is : value:CodeDescription.t or_null_or_undefined -> bool) =
      fun ~value:(x202 : CodeDescription.t or_null_or_undefined) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeDescription") "is"
             [|(or_null_or_undefined_to_js CodeDescription.t_to_js x202)|])
  end
module Diagnostic =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x205 : Ojs.t) -> x205
    and t_to_js : t -> Ojs.t = fun (x204 : Ojs.t) -> x204
    let (get_range : t -> Range.t) =
      fun (x206 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x206) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x207 : t) ->
        fun (x208 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x207) "range" (Range.t_to_js x208)
    let (get_severity : t -> DiagnosticSeverity.t) =
      fun (x209 : t) ->
        DiagnosticSeverity.t_of_js
          (Ojs.get_prop_ascii (t_to_js x209) "severity")
    let (set_severity : t -> DiagnosticSeverity.t -> unit) =
      fun (x210 : t) ->
        fun (x211 : DiagnosticSeverity.t) ->
          Ojs.set_prop_ascii (t_to_js x210) "severity"
            (DiagnosticSeverity.t_to_js x211)
    let (get_code : t -> integer or_string) =
      fun (x212 : t) ->
        or_string_of_js integer_of_js
          (Ojs.get_prop_ascii (t_to_js x212) "code")
    let (set_code : t -> integer or_string -> unit) =
      fun (x214 : t) ->
        fun (x215 : integer or_string) ->
          Ojs.set_prop_ascii (t_to_js x214) "code"
            (or_string_to_js integer_to_js x215)
    let (get_code_description : t -> CodeDescription.t) =
      fun (x217 : t) ->
        CodeDescription.t_of_js
          (Ojs.get_prop_ascii (t_to_js x217) "codeDescription")
    let (set_code_description : t -> CodeDescription.t -> unit) =
      fun (x218 : t) ->
        fun (x219 : CodeDescription.t) ->
          Ojs.set_prop_ascii (t_to_js x218) "codeDescription"
            (CodeDescription.t_to_js x219)
    let (get_source : t -> string) =
      fun (x220 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x220) "source")
    let (set_source : t -> string -> unit) =
      fun (x221 : t) ->
        fun (x222 : string) ->
          Ojs.set_prop_ascii (t_to_js x221) "source" (Ojs.string_to_js x222)
    let (get_message : t -> string) =
      fun (x223 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x223) "message")
    let (set_message : t -> string -> unit) =
      fun (x224 : t) ->
        fun (x225 : string) ->
          Ojs.set_prop_ascii (t_to_js x224) "message" (Ojs.string_to_js x225)
    let (get_tags : t -> DiagnosticTag.t list) =
      fun (x226 : t) ->
        Ojs.list_of_js DiagnosticTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x226) "tags")
    let (set_tags : t -> DiagnosticTag.t list -> unit) =
      fun (x228 : t) ->
        fun (x229 : DiagnosticTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x228) "tags"
            (Ojs.list_to_js DiagnosticTag.t_to_js x229)
    let (get_related_information : t -> DiagnosticRelatedInformation.t list)
      =
      fun (x231 : t) ->
        Ojs.list_of_js DiagnosticRelatedInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x231) "relatedInformation")
    let (set_related_information :
      t -> DiagnosticRelatedInformation.t list -> unit) =
      fun (x233 : t) ->
        fun (x234 : DiagnosticRelatedInformation.t list) ->
          Ojs.set_prop_ascii (t_to_js x233) "relatedInformation"
            (Ojs.list_to_js DiagnosticRelatedInformation.t_to_js x234)
    let (get_data : t -> unknown) =
      fun (x236 : t) ->
        unknown_of_js (Ojs.get_prop_ascii (t_to_js x236) "data")
    let (set_data : t -> unknown -> unit) =
      fun (x237 : t) ->
        fun (x238 : unknown) ->
          Ojs.set_prop_ascii (t_to_js x237) "data" (unknown_to_js x238)
    let (create_ :
      range:Range.t ->
        message:string ->
          ?severity:DiagnosticSeverity.t ->
            ?code:integer or_string ->
              ?source:string ->
                ?related_information:DiagnosticRelatedInformation.t list ->
                  unit -> Diagnostic.t)
      =
      fun ~range:(x239 : Range.t) ->
        fun ~message:(x240 : string) ->
          fun ?severity:(x241 : DiagnosticSeverity.t option) ->
            fun ?code:(x242 : integer or_string option) ->
              fun ?source:(x243 : string option) ->
                fun
                  ?related_information:(x244 :
                                         DiagnosticRelatedInformation.t list
                                           option)
                  ->
                  fun () ->
                    Diagnostic.t_of_js
                      (let x252 = Ojs.get_prop_ascii Ojs.global "Diagnostic" in
                       Ojs.call (Ojs.get_prop_ascii x252 "create") "apply"
                         [|x252;((let x245 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x245 "push"
                                       [|(Range.t_to_js x239)|]);
                                  ignore
                                    (Ojs.call x245 "push"
                                       [|(Ojs.string_to_js x240)|]);
                                  (match x241 with
                                   | Some x251 ->
                                       ignore
                                         (Ojs.call x245 "push"
                                            [|(DiagnosticSeverity.t_to_js
                                                 x251)|])
                                   | None -> ());
                                  (match x242 with
                                   | Some x249 ->
                                       ignore
                                         (Ojs.call x245 "push"
                                            [|(or_string_to_js integer_to_js
                                                 x249)|])
                                   | None -> ());
                                  (match x243 with
                                   | Some x248 ->
                                       ignore
                                         (Ojs.call x245 "push"
                                            [|(Ojs.string_to_js x248)|])
                                   | None -> ());
                                  (match x244 with
                                   | Some x246 ->
                                       ignore
                                         (Ojs.call x245 "push"
                                            [|(Ojs.list_to_js
                                                 DiagnosticRelatedInformation.t_to_js
                                                 x246)|])
                                   | None -> ());
                                  x245))|])
    let (is : value:any -> bool) =
      fun ~value:(x253 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Diagnostic") "is"
             [|(any_to_js x253)|])
  end
module Command =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x255 : Ojs.t) -> x255
    and t_to_js : t -> Ojs.t = fun (x254 : Ojs.t) -> x254
    let (get_title : t -> string) =
      fun (x256 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x256) "title")
    let (set_title : t -> string -> unit) =
      fun (x257 : t) ->
        fun (x258 : string) ->
          Ojs.set_prop_ascii (t_to_js x257) "title" (Ojs.string_to_js x258)
    let (get_command : t -> string) =
      fun (x259 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x259) "command")
    let (set_command : t -> string -> unit) =
      fun (x260 : t) ->
        fun (x261 : string) ->
          Ojs.set_prop_ascii (t_to_js x260) "command" (Ojs.string_to_js x261)
    let (get_arguments : t -> any list) =
      fun (x262 : t) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (t_to_js x262) "arguments")
    let (set_arguments : t -> any list -> unit) =
      fun (x264 : t) ->
        fun (x265 : any list) ->
          Ojs.set_prop_ascii (t_to_js x264) "arguments"
            (Ojs.list_to_js any_to_js x265)
    let (create_ :
      title:string -> command:string -> args:any list -> Command.t) =
      fun ~title:(x267 : string) ->
        fun ~command:(x268 : string) ->
          fun ~args:(x269 : any list) ->
            Command.t_of_js
              (let x272 = Ojs.get_prop_ascii Ojs.global "Command" in
               Ojs.call (Ojs.get_prop_ascii x272 "create") "apply"
                 [|x272;((let x270 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x270 "push" [|(Ojs.string_to_js x267)|]);
                          ignore
                            (Ojs.call x270 "push" [|(Ojs.string_to_js x268)|]);
                          List.iter
                            (fun (x271 : any) ->
                               ignore
                                 (Ojs.call x270 "push" [|(any_to_js x271)|]))
                            x269;
                          x270))|])
    let (is : value:any -> bool) =
      fun ~value:(x273 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Command") "is"
             [|(any_to_js x273)|])
  end
module TextEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x275 : Ojs.t) -> x275
    and t_to_js : t -> Ojs.t = fun (x274 : Ojs.t) -> x274
    let (get_range : t -> Range.t) =
      fun (x276 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x276) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x277 : t) ->
        fun (x278 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x277) "range" (Range.t_to_js x278)
    let (get_new_text : t -> string) =
      fun (x279 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x279) "newText")
    let (set_new_text : t -> string -> unit) =
      fun (x280 : t) ->
        fun (x281 : string) ->
          Ojs.set_prop_ascii (t_to_js x280) "newText" (Ojs.string_to_js x281)
    let (replace : range:Range.t -> new_text:string -> TextEdit.t) =
      fun ~range:(x282 : Range.t) ->
        fun ~new_text:(x283 : string) ->
          TextEdit.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "replace"
               [|(Range.t_to_js x282);(Ojs.string_to_js x283)|])
    let (insert : position:Position.t -> new_text:string -> TextEdit.t) =
      fun ~position:(x284 : Position.t) ->
        fun ~new_text:(x285 : string) ->
          TextEdit.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "insert"
               [|(Position.t_to_js x284);(Ojs.string_to_js x285)|])
    let (del : range:Range.t -> TextEdit.t) =
      fun ~range:(x286 : Range.t) ->
        TextEdit.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "del"
             [|(Range.t_to_js x286)|])
    let (is : value:any -> bool) =
      fun ~value:(x287 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "is"
             [|(any_to_js x287)|])
  end
module ChangeAnnotation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x289 : Ojs.t) -> x289
    and t_to_js : t -> Ojs.t = fun (x288 : Ojs.t) -> x288
    let (get_label : t -> string) =
      fun (x290 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x290) "label")
    let (set_label : t -> string -> unit) =
      fun (x291 : t) ->
        fun (x292 : string) ->
          Ojs.set_prop_ascii (t_to_js x291) "label" (Ojs.string_to_js x292)
    let (get_needs_confirmation : t -> bool) =
      fun (x293 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x293) "needsConfirmation")
    let (set_needs_confirmation : t -> bool -> unit) =
      fun (x294 : t) ->
        fun (x295 : bool) ->
          Ojs.set_prop_ascii (t_to_js x294) "needsConfirmation"
            (Ojs.bool_to_js x295)
    let (get_description : t -> string) =
      fun (x296 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x296) "description")
    let (set_description : t -> string -> unit) =
      fun (x297 : t) ->
        fun (x298 : string) ->
          Ojs.set_prop_ascii (t_to_js x297) "description"
            (Ojs.string_to_js x298)
    let (create_ :
      label:string ->
        ?needs_confirmation:bool ->
          ?description:string -> unit -> ChangeAnnotation.t)
      =
      fun ~label:(x299 : string) ->
        fun ?needs_confirmation:(x300 : bool option) ->
          fun ?description:(x301 : string option) ->
            fun () ->
              ChangeAnnotation.t_of_js
                (let x305 = Ojs.get_prop_ascii Ojs.global "ChangeAnnotation" in
                 Ojs.call (Ojs.get_prop_ascii x305 "create") "apply"
                   [|x305;((let x302 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x302 "push"
                                 [|(Ojs.string_to_js x299)|]);
                            (match x300 with
                             | Some x304 ->
                                 ignore
                                   (Ojs.call x302 "push"
                                      [|(Ojs.bool_to_js x304)|])
                             | None -> ());
                            (match x301 with
                             | Some x303 ->
                                 ignore
                                   (Ojs.call x302 "push"
                                      [|(Ojs.string_to_js x303)|])
                             | None -> ());
                            x302))|])
    let (is : value:any -> bool) =
      fun ~value:(x306 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ChangeAnnotation") "is"
             [|(any_to_js x306)|])
  end
module ChangeAnnotationIdentifier =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x308 : Ojs.t) -> Ojs.string_of_js x308
    and t_to_js : t -> Ojs.t = fun (x307 : string) -> Ojs.string_to_js x307
    let (is : value:any -> bool) =
      fun ~value:(x309 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "ChangeAnnotationIdentifier")
             "is" [|(any_to_js x309)|])
  end
module AnnotatedTextEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x311 : Ojs.t) -> x311
    and t_to_js : t -> Ojs.t = fun (x310 : Ojs.t) -> x310
    let (get_annotation_id : t -> ChangeAnnotationIdentifier.t) =
      fun (x312 : t) ->
        ChangeAnnotationIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x312) "annotationId")
    let (set_annotation_id : t -> ChangeAnnotationIdentifier.t -> unit) =
      fun (x313 : t) ->
        fun (x314 : ChangeAnnotationIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x313) "annotationId"
            (ChangeAnnotationIdentifier.t_to_js x314)
    let (cast : t -> TextEdit.t) =
      fun (x315 : t) -> TextEdit.t_of_js (t_to_js x315)
    let (replace :
      range:Range.t ->
        new_text:string ->
          annotation:ChangeAnnotationIdentifier.t -> AnnotatedTextEdit.t)
      =
      fun ~range:(x316 : Range.t) ->
        fun ~new_text:(x317 : string) ->
          fun ~annotation:(x318 : ChangeAnnotationIdentifier.t) ->
            AnnotatedTextEdit.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit")
                 "replace"
                 [|(Range.t_to_js x316);(Ojs.string_to_js x317);(ChangeAnnotationIdentifier.t_to_js
                                                                   x318)|])
    let (insert :
      position:Position.t ->
        new_text:string ->
          annotation:ChangeAnnotationIdentifier.t -> AnnotatedTextEdit.t)
      =
      fun ~position:(x319 : Position.t) ->
        fun ~new_text:(x320 : string) ->
          fun ~annotation:(x321 : ChangeAnnotationIdentifier.t) ->
            AnnotatedTextEdit.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit")
                 "insert"
                 [|(Position.t_to_js x319);(Ojs.string_to_js x320);(ChangeAnnotationIdentifier.t_to_js
                                                                    x321)|])
    let (del :
      range:Range.t ->
        annotation:ChangeAnnotationIdentifier.t -> AnnotatedTextEdit.t)
      =
      fun ~range:(x322 : Range.t) ->
        fun ~annotation:(x323 : ChangeAnnotationIdentifier.t) ->
          AnnotatedTextEdit.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit")
               "del"
               [|(Range.t_to_js x322);(ChangeAnnotationIdentifier.t_to_js
                                         x323)|])
    let (is : value:any -> bool) =
      fun ~value:(x324 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit") "is"
             [|(any_to_js x324)|])
  end
module TextDocumentEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x326 : Ojs.t) -> x326
    and t_to_js : t -> Ojs.t = fun (x325 : Ojs.t) -> x325
    let (get_text_document : t -> OptionalVersionedTextDocumentIdentifier.t)
      =
      fun (x327 : t) ->
        OptionalVersionedTextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x327) "textDocument")
    let (set_text_document :
      t -> OptionalVersionedTextDocumentIdentifier.t -> unit) =
      fun (x328 : t) ->
        fun (x329 : OptionalVersionedTextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x328) "textDocument"
            (OptionalVersionedTextDocumentIdentifier.t_to_js x329)
    let (get_edits : t -> (AnnotatedTextEdit.t, TextEdit.t) union2 list) =
      fun (x330 : t) ->
        Ojs.list_of_js
          (fun (x331 : Ojs.t) ->
             union2_of_js AnnotatedTextEdit.t_of_js TextEdit.t_of_js x331)
          (Ojs.get_prop_ascii (t_to_js x330) "edits")
    let (set_edits :
      t -> (AnnotatedTextEdit.t, TextEdit.t) union2 list -> unit) =
      fun (x334 : t) ->
        fun (x335 : (AnnotatedTextEdit.t, TextEdit.t) union2 list) ->
          Ojs.set_prop_ascii (t_to_js x334) "edits"
            (Ojs.list_to_js
               (fun (x336 : (AnnotatedTextEdit.t, TextEdit.t) union2) ->
                  union2_to_js AnnotatedTextEdit.t_to_js TextEdit.t_to_js
                    x336) x335)
    let (create_ :
      text_document:OptionalVersionedTextDocumentIdentifier.t ->
        edits:(AnnotatedTextEdit.t, TextEdit.t) union2 list ->
          TextDocumentEdit.t)
      =
      fun ~text_document:(x339 : OptionalVersionedTextDocumentIdentifier.t)
        ->
        fun ~edits:(x340 : (AnnotatedTextEdit.t, TextEdit.t) union2 list) ->
          TextDocumentEdit.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentEdit")
               "create"
               [|(OptionalVersionedTextDocumentIdentifier.t_to_js x339);(
                 Ojs.list_to_js
                   (fun (x341 : (AnnotatedTextEdit.t, TextEdit.t) union2) ->
                      union2_to_js AnnotatedTextEdit.t_to_js TextEdit.t_to_js
                        x341) x340)|])
    let (is : value:any -> bool) =
      fun ~value:(x344 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentEdit") "is"
             [|(any_to_js x344)|])
  end
module ResourceOperation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x346 : Ojs.t) -> x346
    and t_to_js : t -> Ojs.t = fun (x345 : Ojs.t) -> x345
    let (get_kind : t -> string) =
      fun (x347 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x347) "kind")
    let (set_kind : t -> string -> unit) =
      fun (x348 : t) ->
        fun (x349 : string) ->
          Ojs.set_prop_ascii (t_to_js x348) "kind" (Ojs.string_to_js x349)
    let (get_annotation_id : t -> ChangeAnnotationIdentifier.t) =
      fun (x350 : t) ->
        ChangeAnnotationIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x350) "annotationId")
    let (set_annotation_id : t -> ChangeAnnotationIdentifier.t -> unit) =
      fun (x351 : t) ->
        fun (x352 : ChangeAnnotationIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x351) "annotationId"
            (ChangeAnnotationIdentifier.t_to_js x352)
  end
module CreateFileOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x354 : Ojs.t) -> x354
    and t_to_js : t -> Ojs.t = fun (x353 : Ojs.t) -> x353
    let (get_overwrite : t -> bool) =
      fun (x355 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x355) "overwrite")
    let (set_overwrite : t -> bool -> unit) =
      fun (x356 : t) ->
        fun (x357 : bool) ->
          Ojs.set_prop_ascii (t_to_js x356) "overwrite" (Ojs.bool_to_js x357)
    let (get_ignore_if_exists : t -> bool) =
      fun (x358 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x358) "ignoreIfExists")
    let (set_ignore_if_exists : t -> bool -> unit) =
      fun (x359 : t) ->
        fun (x360 : bool) ->
          Ojs.set_prop_ascii (t_to_js x359) "ignoreIfExists"
            (Ojs.bool_to_js x360)
  end
module CreateFile =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x362 : Ojs.t) -> x362
    and t_to_js : t -> Ojs.t = fun (x361 : Ojs.t) -> x361
    let (get_kind : t -> [ `L_s4_create ]) =
      fun (x363 : t) ->
        let x364 = Ojs.get_prop_ascii (t_to_js x363) "kind" in
        match Ojs.string_of_js x364 with
        | "create" -> `L_s4_create
        | _ -> assert false
    let (set_kind : t -> [ `L_s4_create ] -> unit) =
      fun (x365 : t) ->
        fun (x366 : [ `L_s4_create ]) ->
          Ojs.set_prop_ascii (t_to_js x365) "kind"
            (match x366 with | `L_s4_create -> Ojs.string_to_js "LS4Create")
    let (get_uri : t -> DocumentUri.t) =
      fun (x367 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x367) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x368 : t) ->
        fun (x369 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x368) "uri" (DocumentUri.t_to_js x369)
    let (get_options : t -> CreateFileOptions.t) =
      fun (x370 : t) ->
        CreateFileOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x370) "options")
    let (set_options : t -> CreateFileOptions.t -> unit) =
      fun (x371 : t) ->
        fun (x372 : CreateFileOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x371) "options"
            (CreateFileOptions.t_to_js x372)
    let (cast : t -> ResourceOperation.t) =
      fun (x373 : t) -> ResourceOperation.t_of_js (t_to_js x373)
    let (create_ :
      uri:DocumentUri.t ->
        ?options:CreateFileOptions.t ->
          ?annotation:ChangeAnnotationIdentifier.t -> unit -> CreateFile.t)
      =
      fun ~uri:(x374 : DocumentUri.t) ->
        fun ?options:(x375 : CreateFileOptions.t option) ->
          fun ?annotation:(x376 : ChangeAnnotationIdentifier.t option) ->
            fun () ->
              CreateFile.t_of_js
                (let x380 = Ojs.get_prop_ascii Ojs.global "CreateFile" in
                 Ojs.call (Ojs.get_prop_ascii x380 "create") "apply"
                   [|x380;((let x377 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x377 "push"
                                 [|(DocumentUri.t_to_js x374)|]);
                            (match x375 with
                             | Some x379 ->
                                 ignore
                                   (Ojs.call x377 "push"
                                      [|(CreateFileOptions.t_to_js x379)|])
                             | None -> ());
                            (match x376 with
                             | Some x378 ->
                                 ignore
                                   (Ojs.call x377 "push"
                                      [|(ChangeAnnotationIdentifier.t_to_js
                                           x378)|])
                             | None -> ());
                            x377))|])
    let (is : value:any -> bool) =
      fun ~value:(x381 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CreateFile") "is"
             [|(any_to_js x381)|])
  end
module RenameFileOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x383 : Ojs.t) -> x383
    and t_to_js : t -> Ojs.t = fun (x382 : Ojs.t) -> x382
    let (get_overwrite : t -> bool) =
      fun (x384 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x384) "overwrite")
    let (set_overwrite : t -> bool -> unit) =
      fun (x385 : t) ->
        fun (x386 : bool) ->
          Ojs.set_prop_ascii (t_to_js x385) "overwrite" (Ojs.bool_to_js x386)
    let (get_ignore_if_exists : t -> bool) =
      fun (x387 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x387) "ignoreIfExists")
    let (set_ignore_if_exists : t -> bool -> unit) =
      fun (x388 : t) ->
        fun (x389 : bool) ->
          Ojs.set_prop_ascii (t_to_js x388) "ignoreIfExists"
            (Ojs.bool_to_js x389)
  end
module RenameFile =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x391 : Ojs.t) -> x391
    and t_to_js : t -> Ojs.t = fun (x390 : Ojs.t) -> x390
    let (get_kind : t -> [ `L_s32_rename ]) =
      fun (x392 : t) ->
        let x393 = Ojs.get_prop_ascii (t_to_js x392) "kind" in
        match Ojs.string_of_js x393 with
        | "rename" -> `L_s32_rename
        | _ -> assert false
    let (set_kind : t -> [ `L_s32_rename ] -> unit) =
      fun (x394 : t) ->
        fun (x395 : [ `L_s32_rename ]) ->
          Ojs.set_prop_ascii (t_to_js x394) "kind"
            (match x395 with | `L_s32_rename -> Ojs.string_to_js "LS32Rename")
    let (get_old_uri : t -> DocumentUri.t) =
      fun (x396 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x396) "oldUri")
    let (set_old_uri : t -> DocumentUri.t -> unit) =
      fun (x397 : t) ->
        fun (x398 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x397) "oldUri"
            (DocumentUri.t_to_js x398)
    let (get_new_uri : t -> DocumentUri.t) =
      fun (x399 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x399) "newUri")
    let (set_new_uri : t -> DocumentUri.t -> unit) =
      fun (x400 : t) ->
        fun (x401 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x400) "newUri"
            (DocumentUri.t_to_js x401)
    let (get_options : t -> RenameFileOptions.t) =
      fun (x402 : t) ->
        RenameFileOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x402) "options")
    let (set_options : t -> RenameFileOptions.t -> unit) =
      fun (x403 : t) ->
        fun (x404 : RenameFileOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x403) "options"
            (RenameFileOptions.t_to_js x404)
    let (cast : t -> ResourceOperation.t) =
      fun (x405 : t) -> ResourceOperation.t_of_js (t_to_js x405)
    let (create_ :
      old_uri:DocumentUri.t ->
        new_uri:DocumentUri.t ->
          ?options:RenameFileOptions.t ->
            ?annotation:ChangeAnnotationIdentifier.t -> unit -> RenameFile.t)
      =
      fun ~old_uri:(x406 : DocumentUri.t) ->
        fun ~new_uri:(x407 : DocumentUri.t) ->
          fun ?options:(x408 : RenameFileOptions.t option) ->
            fun ?annotation:(x409 : ChangeAnnotationIdentifier.t option) ->
              fun () ->
                RenameFile.t_of_js
                  (let x413 = Ojs.get_prop_ascii Ojs.global "RenameFile" in
                   Ojs.call (Ojs.get_prop_ascii x413 "create") "apply"
                     [|x413;((let x410 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x410 "push"
                                   [|(DocumentUri.t_to_js x406)|]);
                              ignore
                                (Ojs.call x410 "push"
                                   [|(DocumentUri.t_to_js x407)|]);
                              (match x408 with
                               | Some x412 ->
                                   ignore
                                     (Ojs.call x410 "push"
                                        [|(RenameFileOptions.t_to_js x412)|])
                               | None -> ());
                              (match x409 with
                               | Some x411 ->
                                   ignore
                                     (Ojs.call x410 "push"
                                        [|(ChangeAnnotationIdentifier.t_to_js
                                             x411)|])
                               | None -> ());
                              x410))|])
    let (is : value:any -> bool) =
      fun ~value:(x414 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RenameFile") "is"
             [|(any_to_js x414)|])
  end
module DeleteFileOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x416 : Ojs.t) -> x416
    and t_to_js : t -> Ojs.t = fun (x415 : Ojs.t) -> x415
    let (get_recursive : t -> bool) =
      fun (x417 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x417) "recursive")
    let (set_recursive : t -> bool -> unit) =
      fun (x418 : t) ->
        fun (x419 : bool) ->
          Ojs.set_prop_ascii (t_to_js x418) "recursive" (Ojs.bool_to_js x419)
    let (get_ignore_if_not_exists : t -> bool) =
      fun (x420 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x420) "ignoreIfNotExists")
    let (set_ignore_if_not_exists : t -> bool -> unit) =
      fun (x421 : t) ->
        fun (x422 : bool) ->
          Ojs.set_prop_ascii (t_to_js x421) "ignoreIfNotExists"
            (Ojs.bool_to_js x422)
  end
module DeleteFile =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x424 : Ojs.t) -> x424
    and t_to_js : t -> Ojs.t = fun (x423 : Ojs.t) -> x423
    let (get_kind : t -> [ `L_s8_delete ]) =
      fun (x425 : t) ->
        let x426 = Ojs.get_prop_ascii (t_to_js x425) "kind" in
        match Ojs.string_of_js x426 with
        | "delete" -> `L_s8_delete
        | _ -> assert false
    let (set_kind : t -> [ `L_s8_delete ] -> unit) =
      fun (x427 : t) ->
        fun (x428 : [ `L_s8_delete ]) ->
          Ojs.set_prop_ascii (t_to_js x427) "kind"
            (match x428 with | `L_s8_delete -> Ojs.string_to_js "LS8Delete")
    let (get_uri : t -> DocumentUri.t) =
      fun (x429 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x429) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x430 : t) ->
        fun (x431 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x430) "uri" (DocumentUri.t_to_js x431)
    let (get_options : t -> DeleteFileOptions.t) =
      fun (x432 : t) ->
        DeleteFileOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x432) "options")
    let (set_options : t -> DeleteFileOptions.t -> unit) =
      fun (x433 : t) ->
        fun (x434 : DeleteFileOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x433) "options"
            (DeleteFileOptions.t_to_js x434)
    let (cast : t -> ResourceOperation.t) =
      fun (x435 : t) -> ResourceOperation.t_of_js (t_to_js x435)
    let (create_ :
      uri:DocumentUri.t ->
        ?options:DeleteFileOptions.t ->
          ?annotation:ChangeAnnotationIdentifier.t -> unit -> DeleteFile.t)
      =
      fun ~uri:(x436 : DocumentUri.t) ->
        fun ?options:(x437 : DeleteFileOptions.t option) ->
          fun ?annotation:(x438 : ChangeAnnotationIdentifier.t option) ->
            fun () ->
              DeleteFile.t_of_js
                (let x442 = Ojs.get_prop_ascii Ojs.global "DeleteFile" in
                 Ojs.call (Ojs.get_prop_ascii x442 "create") "apply"
                   [|x442;((let x439 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x439 "push"
                                 [|(DocumentUri.t_to_js x436)|]);
                            (match x437 with
                             | Some x441 ->
                                 ignore
                                   (Ojs.call x439 "push"
                                      [|(DeleteFileOptions.t_to_js x441)|])
                             | None -> ());
                            (match x438 with
                             | Some x440 ->
                                 ignore
                                   (Ojs.call x439 "push"
                                      [|(ChangeAnnotationIdentifier.t_to_js
                                           x440)|])
                             | None -> ());
                            x439))|])
    let (is : value:any -> bool) =
      fun ~value:(x443 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DeleteFile") "is"
             [|(any_to_js x443)|])
  end
module WorkspaceEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x445 : Ojs.t) -> x445
    and t_to_js : t -> Ojs.t = fun (x444 : Ojs.t) -> x444
    let (get_changes : t -> AnonymousInterface3.t) =
      fun (x446 : t) ->
        AnonymousInterface3.t_of_js
          (Ojs.get_prop_ascii (t_to_js x446) "changes")
    let (set_changes : t -> AnonymousInterface3.t -> unit) =
      fun (x447 : t) ->
        fun (x448 : AnonymousInterface3.t) ->
          Ojs.set_prop_ascii (t_to_js x447) "changes"
            (AnonymousInterface3.t_to_js x448)
    let (get_document_changes :
      t ->
        ([ `U_s4_create of CreateFile.t  | `U_s8_delete of DeleteFile.t 
         | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t) or_ list)
      =
      fun (x449 : t) ->
        Ojs.list_of_js
          (fun (x450 : Ojs.t) ->
             or__of_js
               (fun (x451 : Ojs.t) ->
                  let x452 = x451 in
                  match Ojs.string_of_js (Ojs.get_prop_ascii x452 "kind")
                  with
                  | "create" -> `U_s4_create (CreateFile.t_of_js x452)
                  | "delete" -> `U_s8_delete (DeleteFile.t_of_js x452)
                  | "rename" -> `U_s32_rename (RenameFile.t_of_js x452)
                  | _ -> assert false) TextDocumentEdit.t_of_js x450)
          (Ojs.get_prop_ascii (t_to_js x449) "documentChanges")
    let (set_document_changes :
      t ->
        ([ `U_s4_create of CreateFile.t  | `U_s8_delete of DeleteFile.t 
         | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t) or_ list ->
          unit)
      =
      fun (x454 : t) ->
        fun
          (x455 :
            ([ `U_s4_create of CreateFile.t  | `U_s8_delete of DeleteFile.t 
             | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t) or_ list)
          ->
          Ojs.set_prop_ascii (t_to_js x454) "documentChanges"
            (Ojs.list_to_js
               (fun
                  (x456 :
                    ([ `U_s4_create of CreateFile.t 
                     | `U_s8_delete of DeleteFile.t 
                     | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t)
                      or_)
                  ->
                  or__to_js
                    (fun
                       (x457 :
                         [ `U_s4_create of CreateFile.t 
                         | `U_s8_delete of DeleteFile.t 
                         | `U_s32_rename of RenameFile.t ])
                       ->
                       match x457 with
                       | `U_s4_create x458 -> CreateFile.t_to_js x458
                       | `U_s8_delete x459 -> DeleteFile.t_to_js x459
                       | `U_s32_rename x460 -> RenameFile.t_to_js x460)
                    TextDocumentEdit.t_to_js x456) x455)
    let (get_change_annotations : t -> AnonymousInterface2.t) =
      fun (x462 : t) ->
        AnonymousInterface2.t_of_js
          (Ojs.get_prop_ascii (t_to_js x462) "changeAnnotations")
    let (set_change_annotations : t -> AnonymousInterface2.t -> unit) =
      fun (x463 : t) ->
        fun (x464 : AnonymousInterface2.t) ->
          Ojs.set_prop_ascii (t_to_js x463) "changeAnnotations"
            (AnonymousInterface2.t_to_js x464)
    let (is : value:any -> bool) =
      fun ~value:(x465 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WorkspaceEdit") "is"
             [|(any_to_js x465)|])
  end
module TextEditChange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x467 : Ojs.t) -> x467
    and t_to_js : t -> Ojs.t = fun (x466 : Ojs.t) -> x466
    let (all : t -> (AnnotatedTextEdit.t, TextEdit.t) union2 list) =
      fun (x468 : t) ->
        Ojs.list_of_js
          (fun (x469 : Ojs.t) ->
             union2_of_js AnnotatedTextEdit.t_of_js TextEdit.t_of_js x469)
          (Ojs.call (t_to_js x468) "all" [||])
    let (clear : t -> unit) =
      fun (x472 : t) -> ignore (Ojs.call (t_to_js x472) "clear" [||])
    let (add : t -> edit:(AnnotatedTextEdit.t, TextEdit.t) union2 -> unit) =
      fun (x476 : t) ->
        fun ~edit:(x473 : (AnnotatedTextEdit.t, TextEdit.t) union2) ->
          ignore
            (Ojs.call (t_to_js x476) "add"
               [|(union2_to_js AnnotatedTextEdit.t_to_js TextEdit.t_to_js
                    x473)|])
    let (insert : t -> position:Position.t -> new_text:string -> unit) =
      fun (x479 : t) ->
        fun ~position:(x477 : Position.t) ->
          fun ~new_text:(x478 : string) ->
            ignore
              (Ojs.call (t_to_js x479) "insert"
                 [|(Position.t_to_js x477);(Ojs.string_to_js x478)|])
    let (insert' :
      t ->
        position:Position.t ->
          new_text:string ->
            annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
              union2 -> ChangeAnnotationIdentifier.t)
      =
      fun (x485 : t) ->
        fun ~position:(x480 : Position.t) ->
          fun ~new_text:(x481 : string) ->
            fun
              ~annotation:(x482 :
                            (ChangeAnnotation.t,
                              ChangeAnnotationIdentifier.t) union2)
              ->
              ChangeAnnotationIdentifier.t_of_js
                (Ojs.call (t_to_js x485) "insert"
                   [|(Position.t_to_js x480);(Ojs.string_to_js x481);(
                     union2_to_js ChangeAnnotation.t_to_js
                       ChangeAnnotationIdentifier.t_to_js x482)|])
    let (replace : t -> range:Range.t -> new_text:string -> unit) =
      fun (x488 : t) ->
        fun ~range:(x486 : Range.t) ->
          fun ~new_text:(x487 : string) ->
            ignore
              (Ojs.call (t_to_js x488) "replace"
                 [|(Range.t_to_js x486);(Ojs.string_to_js x487)|])
    let (replace' :
      t ->
        range:Range.t ->
          new_text:string ->
            ?annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
              union2 -> unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x496 : t) ->
        fun ~range:(x489 : Range.t) ->
          fun ~new_text:(x490 : string) ->
            fun
              ?annotation:(x491 :
                            (ChangeAnnotation.t,
                              ChangeAnnotationIdentifier.t) union2 option)
              ->
              fun () ->
                ChangeAnnotationIdentifier.t_of_js
                  (let x497 = t_to_js x496 in
                   Ojs.call (Ojs.get_prop_ascii x497 "replace") "apply"
                     [|x497;((let x492 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x492 "push"
                                   [|(Range.t_to_js x489)|]);
                              ignore
                                (Ojs.call x492 "push"
                                   [|(Ojs.string_to_js x490)|]);
                              (match x491 with
                               | Some x493 ->
                                   ignore
                                     (Ojs.call x492 "push"
                                        [|(union2_to_js
                                             ChangeAnnotation.t_to_js
                                             ChangeAnnotationIdentifier.t_to_js
                                             x493)|])
                               | None -> ());
                              x492))|])
    let (delete : t -> range:Range.t -> unit) =
      fun (x499 : t) ->
        fun ~range:(x498 : Range.t) ->
          ignore (Ojs.call (t_to_js x499) "delete" [|(Range.t_to_js x498)|])
    let (delete' :
      t ->
        range:Range.t ->
          ?annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
            union2 -> unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x506 : t) ->
        fun ~range:(x500 : Range.t) ->
          fun
            ?annotation:(x501 :
                          (ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
                            union2 option)
            ->
            fun () ->
              ChangeAnnotationIdentifier.t_of_js
                (let x507 = t_to_js x506 in
                 Ojs.call (Ojs.get_prop_ascii x507 "delete") "apply"
                   [|x507;((let x502 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x502 "push" [|(Range.t_to_js x500)|]);
                            (match x501 with
                             | Some x503 ->
                                 ignore
                                   (Ojs.call x502 "push"
                                      [|(union2_to_js
                                           ChangeAnnotation.t_to_js
                                           ChangeAnnotationIdentifier.t_to_js
                                           x503)|])
                             | None -> ());
                            x502))|])
  end
module WorkspaceChange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x509 : Ojs.t) -> x509
    and t_to_js : t -> Ojs.t = fun (x508 : Ojs.t) -> x508
    let (get_workspace_edit : t -> any) =
      fun (x510 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x510) "_workspaceEdit")
    let (set_workspace_edit : t -> any -> unit) =
      fun (x511 : t) ->
        fun (x512 : any) ->
          Ojs.set_prop_ascii (t_to_js x511) "_workspaceEdit" (any_to_js x512)
    let (get_text_edit_changes : t -> any) =
      fun (x513 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x513) "_textEditChanges")
    let (set_text_edit_changes : t -> any -> unit) =
      fun (x514 : t) ->
        fun (x515 : any) ->
          Ojs.set_prop_ascii (t_to_js x514) "_textEditChanges"
            (any_to_js x515)
    let (get_change_annotations : t -> any) =
      fun (x516 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x516) "_changeAnnotations")
    let (set_change_annotations : t -> any -> unit) =
      fun (x517 : t) ->
        fun (x518 : any) ->
          Ojs.set_prop_ascii (t_to_js x517) "_changeAnnotations"
            (any_to_js x518)
    let (create : ?workspace_edit:WorkspaceEdit.t -> unit -> t) =
      fun ?workspace_edit:(x519 : WorkspaceEdit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "WorkspaceChange")
               (let x520 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x519 with
                 | Some x521 ->
                     ignore
                       (Ojs.call x520 "push" [|(WorkspaceEdit.t_to_js x521)|])
                 | None -> ());
                x520))
    let (get_edit : t -> WorkspaceEdit.t) =
      fun (x522 : t) ->
        WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x522) "edit")
    let (get_text_edit_change :
      t ->
        text_document:OptionalVersionedTextDocumentIdentifier.t ->
          TextEditChange.t)
      =
      fun (x524 : t) ->
        fun ~text_document:(x523 : OptionalVersionedTextDocumentIdentifier.t)
          ->
          TextEditChange.t_of_js
            (Ojs.call (t_to_js x524) "getTextEditChange"
               [|(OptionalVersionedTextDocumentIdentifier.t_to_js x523)|])
    let (get_text_edit_change' : t -> uri:DocumentUri.t -> TextEditChange.t)
      =
      fun (x526 : t) ->
        fun ~uri:(x525 : DocumentUri.t) ->
          TextEditChange.t_of_js
            (Ojs.call (t_to_js x526) "getTextEditChange"
               [|(DocumentUri.t_to_js x525)|])
    let (get_init_document_changes : t -> any) =
      fun (x527 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x527) "initDocumentChanges")
    let (set_init_document_changes : t -> any -> unit) =
      fun (x528 : t) ->
        fun (x529 : any) ->
          Ojs.set_prop_ascii (t_to_js x528) "initDocumentChanges"
            (any_to_js x529)
    let (get_init_changes : t -> any) =
      fun (x530 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x530) "initChanges")
    let (set_init_changes : t -> any -> unit) =
      fun (x531 : t) ->
        fun (x532 : any) ->
          Ojs.set_prop_ascii (t_to_js x531) "initChanges" (any_to_js x532)
    let (create_file :
      t -> uri:DocumentUri.t -> ?options:CreateFileOptions.t -> unit -> unit)
      =
      fun (x537 : t) ->
        fun ~uri:(x533 : DocumentUri.t) ->
          fun ?options:(x534 : CreateFileOptions.t option) ->
            fun () ->
              ignore
                (let x538 = t_to_js x537 in
                 Ojs.call (Ojs.get_prop_ascii x538 "createFile") "apply"
                   [|x538;((let x535 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x535 "push"
                                 [|(DocumentUri.t_to_js x533)|]);
                            (match x534 with
                             | Some x536 ->
                                 ignore
                                   (Ojs.call x535 "push"
                                      [|(CreateFileOptions.t_to_js x536)|])
                             | None -> ());
                            x535))|])
    let (create_file' :
      t ->
        uri:DocumentUri.t ->
          annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
            union2 ->
            ?options:CreateFileOptions.t ->
              unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x546 : t) ->
        fun ~uri:(x539 : DocumentUri.t) ->
          fun
            ~annotation:(x540 :
                          (ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
                            union2)
            ->
            fun ?options:(x541 : CreateFileOptions.t option) ->
              fun () ->
                ChangeAnnotationIdentifier.t_of_js
                  (let x547 = t_to_js x546 in
                   Ojs.call (Ojs.get_prop_ascii x547 "createFile") "apply"
                     [|x547;((let x542 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x542 "push"
                                   [|(DocumentUri.t_to_js x539)|]);
                              ignore
                                (Ojs.call x542 "push"
                                   [|(union2_to_js ChangeAnnotation.t_to_js
                                        ChangeAnnotationIdentifier.t_to_js
                                        x540)|]);
                              (match x541 with
                               | Some x543 ->
                                   ignore
                                     (Ojs.call x542 "push"
                                        [|(CreateFileOptions.t_to_js x543)|])
                               | None -> ());
                              x542))|])
    let (rename_file :
      t ->
        old_uri:DocumentUri.t ->
          new_uri:DocumentUri.t ->
            ?options:RenameFileOptions.t -> unit -> unit)
      =
      fun (x553 : t) ->
        fun ~old_uri:(x548 : DocumentUri.t) ->
          fun ~new_uri:(x549 : DocumentUri.t) ->
            fun ?options:(x550 : RenameFileOptions.t option) ->
              fun () ->
                ignore
                  (let x554 = t_to_js x553 in
                   Ojs.call (Ojs.get_prop_ascii x554 "renameFile") "apply"
                     [|x554;((let x551 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x551 "push"
                                   [|(DocumentUri.t_to_js x548)|]);
                              ignore
                                (Ojs.call x551 "push"
                                   [|(DocumentUri.t_to_js x549)|]);
                              (match x550 with
                               | Some x552 ->
                                   ignore
                                     (Ojs.call x551 "push"
                                        [|(RenameFileOptions.t_to_js x552)|])
                               | None -> ());
                              x551))|])
    let (rename_file' :
      t ->
        old_uri:DocumentUri.t ->
          new_uri:DocumentUri.t ->
            ?annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
              union2 ->
              ?options:RenameFileOptions.t ->
                unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x564 : t) ->
        fun ~old_uri:(x555 : DocumentUri.t) ->
          fun ~new_uri:(x556 : DocumentUri.t) ->
            fun
              ?annotation:(x557 :
                            (ChangeAnnotation.t,
                              ChangeAnnotationIdentifier.t) union2 option)
              ->
              fun ?options:(x558 : RenameFileOptions.t option) ->
                fun () ->
                  ChangeAnnotationIdentifier.t_of_js
                    (let x565 = t_to_js x564 in
                     Ojs.call (Ojs.get_prop_ascii x565 "renameFile") "apply"
                       [|x565;((let x559 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x559 "push"
                                     [|(DocumentUri.t_to_js x555)|]);
                                ignore
                                  (Ojs.call x559 "push"
                                     [|(DocumentUri.t_to_js x556)|]);
                                (match x557 with
                                 | Some x561 ->
                                     ignore
                                       (Ojs.call x559 "push"
                                          [|(union2_to_js
                                               ChangeAnnotation.t_to_js
                                               ChangeAnnotationIdentifier.t_to_js
                                               x561)|])
                                 | None -> ());
                                (match x558 with
                                 | Some x560 ->
                                     ignore
                                       (Ojs.call x559 "push"
                                          [|(RenameFileOptions.t_to_js x560)|])
                                 | None -> ());
                                x559))|])
    let (delete_file :
      t -> uri:DocumentUri.t -> ?options:DeleteFileOptions.t -> unit -> unit)
      =
      fun (x570 : t) ->
        fun ~uri:(x566 : DocumentUri.t) ->
          fun ?options:(x567 : DeleteFileOptions.t option) ->
            fun () ->
              ignore
                (let x571 = t_to_js x570 in
                 Ojs.call (Ojs.get_prop_ascii x571 "deleteFile") "apply"
                   [|x571;((let x568 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x568 "push"
                                 [|(DocumentUri.t_to_js x566)|]);
                            (match x567 with
                             | Some x569 ->
                                 ignore
                                   (Ojs.call x568 "push"
                                      [|(DeleteFileOptions.t_to_js x569)|])
                             | None -> ());
                            x568))|])
    let (delete_file' :
      t ->
        uri:DocumentUri.t ->
          annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
            union2 ->
            ?options:DeleteFileOptions.t ->
              unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x579 : t) ->
        fun ~uri:(x572 : DocumentUri.t) ->
          fun
            ~annotation:(x573 :
                          (ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
                            union2)
            ->
            fun ?options:(x574 : DeleteFileOptions.t option) ->
              fun () ->
                ChangeAnnotationIdentifier.t_of_js
                  (let x580 = t_to_js x579 in
                   Ojs.call (Ojs.get_prop_ascii x580 "deleteFile") "apply"
                     [|x580;((let x575 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x575 "push"
                                   [|(DocumentUri.t_to_js x572)|]);
                              ignore
                                (Ojs.call x575 "push"
                                   [|(union2_to_js ChangeAnnotation.t_to_js
                                        ChangeAnnotationIdentifier.t_to_js
                                        x573)|]);
                              (match x574 with
                               | Some x576 ->
                                   ignore
                                     (Ojs.call x575 "push"
                                        [|(DeleteFileOptions.t_to_js x576)|])
                               | None -> ());
                              x575))|])
  end
module TextDocumentIdentifier =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x582 : Ojs.t) -> x582
    and t_to_js : t -> Ojs.t = fun (x581 : Ojs.t) -> x581
    let (get_uri : t -> DocumentUri.t) =
      fun (x583 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x583) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x584 : t) ->
        fun (x585 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x584) "uri" (DocumentUri.t_to_js x585)
    let (create_ : uri:DocumentUri.t -> TextDocumentIdentifier.t) =
      fun ~uri:(x586 : DocumentUri.t) ->
        TextDocumentIdentifier.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentIdentifier")
             "create" [|(DocumentUri.t_to_js x586)|])
    let (is : value:any -> bool) =
      fun ~value:(x587 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentIdentifier")
             "is" [|(any_to_js x587)|])
  end
module VersionedTextDocumentIdentifier =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x589 : Ojs.t) -> x589
    and t_to_js : t -> Ojs.t = fun (x588 : Ojs.t) -> x588
    let (get_version : t -> integer) =
      fun (x590 : t) ->
        integer_of_js (Ojs.get_prop_ascii (t_to_js x590) "version")
    let (set_version : t -> integer -> unit) =
      fun (x591 : t) ->
        fun (x592 : integer) ->
          Ojs.set_prop_ascii (t_to_js x591) "version" (integer_to_js x592)
    let (cast : t -> TextDocumentIdentifier.t) =
      fun (x593 : t) -> TextDocumentIdentifier.t_of_js (t_to_js x593)
    let (create_ :
      uri:DocumentUri.t ->
        version:integer -> VersionedTextDocumentIdentifier.t)
      =
      fun ~uri:(x594 : DocumentUri.t) ->
        fun ~version:(x595 : integer) ->
          VersionedTextDocumentIdentifier.t_of_js
            (Ojs.call
               (Ojs.get_prop_ascii Ojs.global
                  "VersionedTextDocumentIdentifier") "create"
               [|(DocumentUri.t_to_js x594);(integer_to_js x595)|])
    let (is : value:any -> bool) =
      fun ~value:(x596 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "VersionedTextDocumentIdentifier")
             "is" [|(any_to_js x596)|])
  end
module OptionalVersionedTextDocumentIdentifier =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x598 : Ojs.t) -> x598
    and t_to_js : t -> Ojs.t = fun (x597 : Ojs.t) -> x597
    let (get_version : t -> integer or_null) =
      fun (x599 : t) ->
        or_null_of_js integer_of_js
          (Ojs.get_prop_ascii (t_to_js x599) "version")
    let (set_version : t -> integer or_null -> unit) =
      fun (x601 : t) ->
        fun (x602 : integer or_null) ->
          Ojs.set_prop_ascii (t_to_js x601) "version"
            (or_null_to_js integer_to_js x602)
    let (cast : t -> TextDocumentIdentifier.t) =
      fun (x604 : t) -> TextDocumentIdentifier.t_of_js (t_to_js x604)
    let (create_ :
      uri:DocumentUri.t ->
        version:integer or_null -> OptionalVersionedTextDocumentIdentifier.t)
      =
      fun ~uri:(x605 : DocumentUri.t) ->
        fun ~version:(x606 : integer or_null) ->
          OptionalVersionedTextDocumentIdentifier.t_of_js
            (Ojs.call
               (Ojs.get_prop_ascii Ojs.global
                  "OptionalVersionedTextDocumentIdentifier") "create"
               [|(DocumentUri.t_to_js x605);(or_null_to_js integer_to_js x606)|])
    let (is : value:any -> bool) =
      fun ~value:(x608 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global
                "OptionalVersionedTextDocumentIdentifier") "is"
             [|(any_to_js x608)|])
  end
module TextDocumentItem =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x610 : Ojs.t) -> x610
    and t_to_js : t -> Ojs.t = fun (x609 : Ojs.t) -> x609
    let (get_uri : t -> DocumentUri.t) =
      fun (x611 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x611) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x612 : t) ->
        fun (x613 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x612) "uri" (DocumentUri.t_to_js x613)
    let (get_language_id : t -> string) =
      fun (x614 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x614) "languageId")
    let (set_language_id : t -> string -> unit) =
      fun (x615 : t) ->
        fun (x616 : string) ->
          Ojs.set_prop_ascii (t_to_js x615) "languageId"
            (Ojs.string_to_js x616)
    let (get_version : t -> integer) =
      fun (x617 : t) ->
        integer_of_js (Ojs.get_prop_ascii (t_to_js x617) "version")
    let (set_version : t -> integer -> unit) =
      fun (x618 : t) ->
        fun (x619 : integer) ->
          Ojs.set_prop_ascii (t_to_js x618) "version" (integer_to_js x619)
    let (get_text : t -> string) =
      fun (x620 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x620) "text")
    let (set_text : t -> string -> unit) =
      fun (x621 : t) ->
        fun (x622 : string) ->
          Ojs.set_prop_ascii (t_to_js x621) "text" (Ojs.string_to_js x622)
    let (create_ :
      uri:DocumentUri.t ->
        language_id:string ->
          version:integer -> text:string -> TextDocumentItem.t)
      =
      fun ~uri:(x623 : DocumentUri.t) ->
        fun ~language_id:(x624 : string) ->
          fun ~version:(x625 : integer) ->
            fun ~text:(x626 : string) ->
              TextDocumentItem.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentItem")
                   "create"
                   [|(DocumentUri.t_to_js x623);(Ojs.string_to_js x624);(
                     integer_to_js x625);(Ojs.string_to_js x626)|])
    let (is : value:any -> bool) =
      fun ~value:(x627 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentItem") "is"
             [|(any_to_js x627)|])
  end
module MarkupKind =
  struct
    type t = [ `L_s19_markdown  | `L_s27_plaintext ]
    let rec t_of_js : Ojs.t -> t =
      fun (x629 : Ojs.t) ->
        let x630 = x629 in
        match Ojs.string_of_js x630 with
        | "markdown" -> `L_s19_markdown
        | "plaintext" -> `L_s27_plaintext
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x628 : [ `L_s19_markdown  | `L_s27_plaintext ]) ->
        match x628 with
        | `L_s19_markdown -> Ojs.string_to_js "markdown"
        | `L_s27_plaintext -> Ojs.string_to_js "plaintext"
    let (plain_text : [ `L_s27_plaintext ]) =
      let x631 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MarkupKind")
          "PlainText" in
      match Ojs.string_of_js x631 with
      | "plaintext" -> `L_s27_plaintext
      | _ -> assert false
    let (markdown : [ `L_s19_markdown ]) =
      let x632 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MarkupKind")
          "Markdown" in
      match Ojs.string_of_js x632 with
      | "markdown" -> `L_s19_markdown
      | _ -> assert false
    let (is : value:any -> bool) =
      fun ~value:(x633 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "MarkupKind") "is"
             [|(any_to_js x633)|])
  end
module MarkupContent =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x635 : Ojs.t) -> x635
    and t_to_js : t -> Ojs.t = fun (x634 : Ojs.t) -> x634
    let (get_kind : t -> MarkupKind.t) =
      fun (x636 : t) ->
        MarkupKind.t_of_js (Ojs.get_prop_ascii (t_to_js x636) "kind")
    let (set_kind : t -> MarkupKind.t -> unit) =
      fun (x637 : t) ->
        fun (x638 : MarkupKind.t) ->
          Ojs.set_prop_ascii (t_to_js x637) "kind" (MarkupKind.t_to_js x638)
    let (get_value : t -> string) =
      fun (x639 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x639) "value")
    let (set_value : t -> string -> unit) =
      fun (x640 : t) ->
        fun (x641 : string) ->
          Ojs.set_prop_ascii (t_to_js x640) "value" (Ojs.string_to_js x641)
    let (is : value:any -> bool) =
      fun ~value:(x642 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "MarkupContent") "is"
             [|(any_to_js x642)|])
  end
module CompletionItemKind =
  struct
    type t =
      [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | `L_n_7 
      | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
      | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
      | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24  | `L_n_25 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x644 : Ojs.t) ->
        let x645 = x644 in
        match Ojs.int_of_js x645 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | 22 -> `L_n_22
        | 23 -> `L_n_23
        | 24 -> `L_n_24
        | 25 -> `L_n_25
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x643 :
          [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
          | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
          | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
          | `L_n_19  | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24 
          | `L_n_25 ])
        ->
        match x643 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
        | `L_n_4 -> Ojs.int_to_js 4
        | `L_n_5 -> Ojs.int_to_js 5
        | `L_n_6 -> Ojs.int_to_js 6
        | `L_n_7 -> Ojs.int_to_js 7
        | `L_n_8 -> Ojs.int_to_js 8
        | `L_n_9 -> Ojs.int_to_js 9
        | `L_n_10 -> Ojs.int_to_js 10
        | `L_n_11 -> Ojs.int_to_js 11
        | `L_n_12 -> Ojs.int_to_js 12
        | `L_n_13 -> Ojs.int_to_js 13
        | `L_n_14 -> Ojs.int_to_js 14
        | `L_n_15 -> Ojs.int_to_js 15
        | `L_n_16 -> Ojs.int_to_js 16
        | `L_n_17 -> Ojs.int_to_js 17
        | `L_n_18 -> Ojs.int_to_js 18
        | `L_n_19 -> Ojs.int_to_js 19
        | `L_n_20 -> Ojs.int_to_js 20
        | `L_n_21 -> Ojs.int_to_js 21
        | `L_n_22 -> Ojs.int_to_js 22
        | `L_n_23 -> Ojs.int_to_js 23
        | `L_n_24 -> Ojs.int_to_js 24
        | `L_n_25 -> Ojs.int_to_js 25
    let (text : [ `L_n_1 ]) =
      let x646 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Text" in
      match Ojs.int_of_js x646 with | 1 -> `L_n_1 | _ -> assert false
    let (method_ : [ `L_n_2 ]) =
      let x647 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Method" in
      match Ojs.int_of_js x647 with | 2 -> `L_n_2 | _ -> assert false
    let (function_ : [ `L_n_3 ]) =
      let x648 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Function" in
      match Ojs.int_of_js x648 with | 3 -> `L_n_3 | _ -> assert false
    let (constructor : [ `L_n_4 ]) =
      let x649 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Constructor" in
      match Ojs.int_of_js x649 with | 4 -> `L_n_4 | _ -> assert false
    let (field : [ `L_n_5 ]) =
      let x650 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Field" in
      match Ojs.int_of_js x650 with | 5 -> `L_n_5 | _ -> assert false
    let (variable : [ `L_n_6 ]) =
      let x651 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Variable" in
      match Ojs.int_of_js x651 with | 6 -> `L_n_6 | _ -> assert false
    let (class_ : [ `L_n_7 ]) =
      let x652 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Class" in
      match Ojs.int_of_js x652 with | 7 -> `L_n_7 | _ -> assert false
    let (interface : [ `L_n_8 ]) =
      let x653 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Interface" in
      match Ojs.int_of_js x653 with | 8 -> `L_n_8 | _ -> assert false
    let (module_ : [ `L_n_9 ]) =
      let x654 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Module" in
      match Ojs.int_of_js x654 with | 9 -> `L_n_9 | _ -> assert false
    let (property : [ `L_n_10 ]) =
      let x655 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Property" in
      match Ojs.int_of_js x655 with | 10 -> `L_n_10 | _ -> assert false
    let (unit : [ `L_n_11 ]) =
      let x656 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Unit" in
      match Ojs.int_of_js x656 with | 11 -> `L_n_11 | _ -> assert false
    let (value : [ `L_n_12 ]) =
      let x657 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Value" in
      match Ojs.int_of_js x657 with | 12 -> `L_n_12 | _ -> assert false
    let (enum : [ `L_n_13 ]) =
      let x658 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Enum" in
      match Ojs.int_of_js x658 with | 13 -> `L_n_13 | _ -> assert false
    let (keyword : [ `L_n_14 ]) =
      let x659 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Keyword" in
      match Ojs.int_of_js x659 with | 14 -> `L_n_14 | _ -> assert false
    let (snippet : [ `L_n_15 ]) =
      let x660 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Snippet" in
      match Ojs.int_of_js x660 with | 15 -> `L_n_15 | _ -> assert false
    let (color : [ `L_n_16 ]) =
      let x661 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Color" in
      match Ojs.int_of_js x661 with | 16 -> `L_n_16 | _ -> assert false
    let (file : [ `L_n_17 ]) =
      let x662 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "File" in
      match Ojs.int_of_js x662 with | 17 -> `L_n_17 | _ -> assert false
    let (reference : [ `L_n_18 ]) =
      let x663 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Reference" in
      match Ojs.int_of_js x663 with | 18 -> `L_n_18 | _ -> assert false
    let (folder : [ `L_n_19 ]) =
      let x664 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Folder" in
      match Ojs.int_of_js x664 with | 19 -> `L_n_19 | _ -> assert false
    let (enum_member : [ `L_n_20 ]) =
      let x665 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "EnumMember" in
      match Ojs.int_of_js x665 with | 20 -> `L_n_20 | _ -> assert false
    let (constant : [ `L_n_21 ]) =
      let x666 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Constant" in
      match Ojs.int_of_js x666 with | 21 -> `L_n_21 | _ -> assert false
    let (struct_ : [ `L_n_22 ]) =
      let x667 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Struct" in
      match Ojs.int_of_js x667 with | 22 -> `L_n_22 | _ -> assert false
    let (event : [ `L_n_23 ]) =
      let x668 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Event" in
      match Ojs.int_of_js x668 with | 23 -> `L_n_23 | _ -> assert false
    let (operator : [ `L_n_24 ]) =
      let x669 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Operator" in
      match Ojs.int_of_js x669 with | 24 -> `L_n_24 | _ -> assert false
    let (type_parameter : [ `L_n_25 ]) =
      let x670 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind")
          "TypeParameter" in
      match Ojs.int_of_js x670 with | 25 -> `L_n_25 | _ -> assert false
  end
module InsertTextFormat =
  struct
    type t = [ `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x672 : Ojs.t) ->
        let x673 = x672 in
        match Ojs.int_of_js x673 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x671 : [ `L_n_1  | `L_n_2 ]) ->
        match x671 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (plain_text : [ `L_n_1 ]) =
      let x674 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextFormat")
          "PlainText" in
      match Ojs.int_of_js x674 with | 1 -> `L_n_1 | _ -> assert false
    let (snippet : [ `L_n_2 ]) =
      let x675 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextFormat")
          "Snippet" in
      match Ojs.int_of_js x675 with | 2 -> `L_n_2 | _ -> assert false
  end
module CompletionItemTag =
  struct
    type t = [ `L_n_1 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x677 : Ojs.t) ->
        let x678 = x677 in
        match Ojs.int_of_js x678 with | 1 -> `L_n_1 | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x676 : [ `L_n_1 ]) -> match x676 with | `L_n_1 -> Ojs.int_to_js 1
    let (deprecated : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "CompletionItemTag") "Deprecated")
  end
module InsertReplaceEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x680 : Ojs.t) -> x680
    and t_to_js : t -> Ojs.t = fun (x679 : Ojs.t) -> x679
    let (get_new_text : t -> string) =
      fun (x681 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x681) "newText")
    let (set_new_text : t -> string -> unit) =
      fun (x682 : t) ->
        fun (x683 : string) ->
          Ojs.set_prop_ascii (t_to_js x682) "newText" (Ojs.string_to_js x683)
    let (get_insert : t -> Range.t) =
      fun (x684 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x684) "insert")
    let (set_insert : t -> Range.t -> unit) =
      fun (x685 : t) ->
        fun (x686 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x685) "insert" (Range.t_to_js x686)
    let (get_replace : t -> Range.t) =
      fun (x687 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x687) "replace")
    let (set_replace : t -> Range.t -> unit) =
      fun (x688 : t) ->
        fun (x689 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x688) "replace" (Range.t_to_js x689)
    let (create_ :
      new_text:string ->
        insert:Range.t -> replace:Range.t -> InsertReplaceEdit.t)
      =
      fun ~new_text:(x690 : string) ->
        fun ~insert:(x691 : Range.t) ->
          fun ~replace:(x692 : Range.t) ->
            InsertReplaceEdit.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "InsertReplaceEdit")
                 "create"
                 [|(Ojs.string_to_js x690);(Range.t_to_js x691);(Range.t_to_js
                                                                   x692)|])
    let (is : value:(InsertReplaceEdit.t, TextEdit.t) union2 -> bool) =
      fun ~value:(x693 : (InsertReplaceEdit.t, TextEdit.t) union2) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "InsertReplaceEdit") "is"
             [|(union2_to_js InsertReplaceEdit.t_to_js TextEdit.t_to_js x693)|])
  end
module InsertTextMode =
  struct
    type t = [ `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x697 : Ojs.t) ->
        let x698 = x697 in
        match Ojs.int_of_js x698 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x696 : [ `L_n_1  | `L_n_2 ]) ->
        match x696 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (as_is : [ `L_n_1 ]) =
      let x699 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextMode")
          "asIs" in
      match Ojs.int_of_js x699 with | 1 -> `L_n_1 | _ -> assert false
    let (adjust_indentation : [ `L_n_2 ]) =
      let x700 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextMode")
          "adjustIndentation" in
      match Ojs.int_of_js x700 with | 2 -> `L_n_2 | _ -> assert false
  end
module CompletionItemLabelDetails =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x702 : Ojs.t) -> x702
    and t_to_js : t -> Ojs.t = fun (x701 : Ojs.t) -> x701
    let (get_parameters : t -> string) =
      fun (x703 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x703) "parameters")
    let (set_parameters : t -> string -> unit) =
      fun (x704 : t) ->
        fun (x705 : string) ->
          Ojs.set_prop_ascii (t_to_js x704) "parameters"
            (Ojs.string_to_js x705)
    let (get_qualifier : t -> string) =
      fun (x706 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x706) "qualifier")
    let (set_qualifier : t -> string -> unit) =
      fun (x707 : t) ->
        fun (x708 : string) ->
          Ojs.set_prop_ascii (t_to_js x707) "qualifier"
            (Ojs.string_to_js x708)
    let (get_type : t -> string) =
      fun (x709 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x709) "type")
    let (set_type : t -> string -> unit) =
      fun (x710 : t) ->
        fun (x711 : string) ->
          Ojs.set_prop_ascii (t_to_js x710) "type" (Ojs.string_to_js x711)
    let (is : value:any -> bool) =
      fun ~value:(x712 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "CompletionItemLabelDetails")
             "is" [|(any_to_js x712)|])
  end
module CompletionItem =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x714 : Ojs.t) -> x714
    and t_to_js : t -> Ojs.t = fun (x713 : Ojs.t) -> x713
    let (get_label : t -> string) =
      fun (x715 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x715) "label")
    let (set_label : t -> string -> unit) =
      fun (x716 : t) ->
        fun (x717 : string) ->
          Ojs.set_prop_ascii (t_to_js x716) "label" (Ojs.string_to_js x717)
    let (get_label_details : t -> CompletionItemLabelDetails.t) =
      fun (x718 : t) ->
        CompletionItemLabelDetails.t_of_js
          (Ojs.get_prop_ascii (t_to_js x718) "labelDetails")
    let (set_label_details : t -> CompletionItemLabelDetails.t -> unit) =
      fun (x719 : t) ->
        fun (x720 : CompletionItemLabelDetails.t) ->
          Ojs.set_prop_ascii (t_to_js x719) "labelDetails"
            (CompletionItemLabelDetails.t_to_js x720)
    let (get_kind : t -> CompletionItemKind.t) =
      fun (x721 : t) ->
        CompletionItemKind.t_of_js (Ojs.get_prop_ascii (t_to_js x721) "kind")
    let (set_kind : t -> CompletionItemKind.t -> unit) =
      fun (x722 : t) ->
        fun (x723 : CompletionItemKind.t) ->
          Ojs.set_prop_ascii (t_to_js x722) "kind"
            (CompletionItemKind.t_to_js x723)
    let (get_tags : t -> CompletionItemTag.t list) =
      fun (x724 : t) ->
        Ojs.list_of_js CompletionItemTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x724) "tags")
    let (set_tags : t -> CompletionItemTag.t list -> unit) =
      fun (x726 : t) ->
        fun (x727 : CompletionItemTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x726) "tags"
            (Ojs.list_to_js CompletionItemTag.t_to_js x727)
    let (get_detail : t -> string) =
      fun (x729 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x729) "detail")
    let (set_detail : t -> string -> unit) =
      fun (x730 : t) ->
        fun (x731 : string) ->
          Ojs.set_prop_ascii (t_to_js x730) "detail" (Ojs.string_to_js x731)
    let (get_documentation : t -> MarkupContent.t or_string) =
      fun (x732 : t) ->
        or_string_of_js MarkupContent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x732) "documentation")
    let (set_documentation : t -> MarkupContent.t or_string -> unit) =
      fun (x734 : t) ->
        fun (x735 : MarkupContent.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x734) "documentation"
            (or_string_to_js MarkupContent.t_to_js x735)
    let (get_deprecated : t -> bool) =
      fun (x737 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x737) "deprecated")
    let (set_deprecated : t -> bool -> unit) =
      fun (x738 : t) ->
        fun (x739 : bool) ->
          Ojs.set_prop_ascii (t_to_js x738) "deprecated"
            (Ojs.bool_to_js x739)
    let (get_preselect : t -> bool) =
      fun (x740 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x740) "preselect")
    let (set_preselect : t -> bool -> unit) =
      fun (x741 : t) ->
        fun (x742 : bool) ->
          Ojs.set_prop_ascii (t_to_js x741) "preselect" (Ojs.bool_to_js x742)
    let (get_sort_text : t -> string) =
      fun (x743 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x743) "sortText")
    let (set_sort_text : t -> string -> unit) =
      fun (x744 : t) ->
        fun (x745 : string) ->
          Ojs.set_prop_ascii (t_to_js x744) "sortText"
            (Ojs.string_to_js x745)
    let (get_filter_text : t -> string) =
      fun (x746 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x746) "filterText")
    let (set_filter_text : t -> string -> unit) =
      fun (x747 : t) ->
        fun (x748 : string) ->
          Ojs.set_prop_ascii (t_to_js x747) "filterText"
            (Ojs.string_to_js x748)
    let (get_insert_text : t -> string) =
      fun (x749 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x749) "insertText")
    let (set_insert_text : t -> string -> unit) =
      fun (x750 : t) ->
        fun (x751 : string) ->
          Ojs.set_prop_ascii (t_to_js x750) "insertText"
            (Ojs.string_to_js x751)
    let (get_insert_text_format : t -> InsertTextFormat.t) =
      fun (x752 : t) ->
        InsertTextFormat.t_of_js
          (Ojs.get_prop_ascii (t_to_js x752) "insertTextFormat")
    let (set_insert_text_format : t -> InsertTextFormat.t -> unit) =
      fun (x753 : t) ->
        fun (x754 : InsertTextFormat.t) ->
          Ojs.set_prop_ascii (t_to_js x753) "insertTextFormat"
            (InsertTextFormat.t_to_js x754)
    let (get_insert_text_mode : t -> InsertTextMode.t) =
      fun (x755 : t) ->
        InsertTextMode.t_of_js
          (Ojs.get_prop_ascii (t_to_js x755) "insertTextMode")
    let (set_insert_text_mode : t -> InsertTextMode.t -> unit) =
      fun (x756 : t) ->
        fun (x757 : InsertTextMode.t) ->
          Ojs.set_prop_ascii (t_to_js x756) "insertTextMode"
            (InsertTextMode.t_to_js x757)
    let (get_text_edit : t -> (InsertReplaceEdit.t, TextEdit.t) union2) =
      fun (x758 : t) ->
        union2_of_js InsertReplaceEdit.t_of_js TextEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x758) "textEdit")
    let (set_text_edit :
      t -> (InsertReplaceEdit.t, TextEdit.t) union2 -> unit) =
      fun (x761 : t) ->
        fun (x762 : (InsertReplaceEdit.t, TextEdit.t) union2) ->
          Ojs.set_prop_ascii (t_to_js x761) "textEdit"
            (union2_to_js InsertReplaceEdit.t_to_js TextEdit.t_to_js x762)
    let (get_additional_text_edits : t -> TextEdit.t list) =
      fun (x765 : t) ->
        Ojs.list_of_js TextEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x765) "additionalTextEdits")
    let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
      fun (x767 : t) ->
        fun (x768 : TextEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x767) "additionalTextEdits"
            (Ojs.list_to_js TextEdit.t_to_js x768)
    let (get_commit_characters : t -> string list) =
      fun (x770 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x770) "commitCharacters")
    let (set_commit_characters : t -> string list -> unit) =
      fun (x772 : t) ->
        fun (x773 : string list) ->
          Ojs.set_prop_ascii (t_to_js x772) "commitCharacters"
            (Ojs.list_to_js Ojs.string_to_js x773)
    let (get_command : t -> Command.t) =
      fun (x775 : t) ->
        Command.t_of_js (Ojs.get_prop_ascii (t_to_js x775) "command")
    let (set_command : t -> Command.t -> unit) =
      fun (x776 : t) ->
        fun (x777 : Command.t) ->
          Ojs.set_prop_ascii (t_to_js x776) "command" (Command.t_to_js x777)
    let (get_data : t -> any) =
      fun (x778 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x778) "data")
    let (set_data : t -> any -> unit) =
      fun (x779 : t) ->
        fun (x780 : any) ->
          Ojs.set_prop_ascii (t_to_js x779) "data" (any_to_js x780)
    let (create_ : label:string -> CompletionItem.t) =
      fun ~label:(x781 : string) ->
        CompletionItem.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CompletionItem") "create"
             [|(Ojs.string_to_js x781)|])
  end
module CompletionList =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x783 : Ojs.t) -> x783
    and t_to_js : t -> Ojs.t = fun (x782 : Ojs.t) -> x782
    let (get_is_incomplete : t -> bool) =
      fun (x784 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x784) "isIncomplete")
    let (set_is_incomplete : t -> bool -> unit) =
      fun (x785 : t) ->
        fun (x786 : bool) ->
          Ojs.set_prop_ascii (t_to_js x785) "isIncomplete"
            (Ojs.bool_to_js x786)
    let (get_items : t -> CompletionItem.t list) =
      fun (x787 : t) ->
        Ojs.list_of_js CompletionItem.t_of_js
          (Ojs.get_prop_ascii (t_to_js x787) "items")
    let (set_items : t -> CompletionItem.t list -> unit) =
      fun (x789 : t) ->
        fun (x790 : CompletionItem.t list) ->
          Ojs.set_prop_ascii (t_to_js x789) "items"
            (Ojs.list_to_js CompletionItem.t_to_js x790)
    let (create_ :
      ?items:CompletionItem.t list ->
        ?is_incomplete:bool -> unit -> CompletionList.t)
      =
      fun ?items:(x792 : CompletionItem.t list option) ->
        fun ?is_incomplete:(x793 : bool option) ->
          fun () ->
            CompletionList.t_of_js
              (let x798 = Ojs.get_prop_ascii Ojs.global "CompletionList" in
               Ojs.call (Ojs.get_prop_ascii x798 "create") "apply"
                 [|x798;((let x794 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x792 with
                           | Some x796 ->
                               ignore
                                 (Ojs.call x794 "push"
                                    [|(Ojs.list_to_js CompletionItem.t_to_js
                                         x796)|])
                           | None -> ());
                          (match x793 with
                           | Some x795 ->
                               ignore
                                 (Ojs.call x794 "push"
                                    [|(Ojs.bool_to_js x795)|])
                           | None -> ());
                          x794))|])
  end
module MarkedString =
  struct
    type t = AnonymousInterface0.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x801 : Ojs.t) -> or_string_of_js AnonymousInterface0.t_of_js x801
    and t_to_js : t -> Ojs.t =
      fun (x799 : AnonymousInterface0.t or_string) ->
        or_string_to_js AnonymousInterface0.t_to_js x799
    let (from_plain_text : plain_text:string -> string) =
      fun ~plain_text:(x803 : string) ->
        Ojs.string_of_js
          (Ojs.call Ojs.global "fromPlainText" [|(Ojs.string_to_js x803)|])
    let (is : value:any -> bool) =
      fun ~value:(x804 : any) ->
        Ojs.bool_of_js (Ojs.call Ojs.global "is" [|(any_to_js x804)|])
  end
module Hover =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x806 : Ojs.t) -> x806
    and t_to_js : t -> Ojs.t = fun (x805 : Ojs.t) -> x805
    let (get_contents :
      t ->
        ((MarkedString.t, MarkupContent.t) union2, MarkedString.t) or_array)
      =
      fun (x807 : t) ->
        or_array_of_js
          (fun (x808 : Ojs.t) ->
             union2_of_js MarkedString.t_of_js MarkupContent.t_of_js x808)
          MarkedString.t_of_js (Ojs.get_prop_ascii (t_to_js x807) "contents")
    let (set_contents :
      t ->
        ((MarkedString.t, MarkupContent.t) union2, MarkedString.t) or_array
          -> unit)
      =
      fun (x812 : t) ->
        fun
          (x813 :
            ((MarkedString.t, MarkupContent.t) union2, MarkedString.t)
              or_array)
          ->
          Ojs.set_prop_ascii (t_to_js x812) "contents"
            (or_array_to_js
               (fun (x814 : (MarkedString.t, MarkupContent.t) union2) ->
                  union2_to_js MarkedString.t_to_js MarkupContent.t_to_js
                    x814) MarkedString.t_to_js x813)
    let (get_range : t -> Range.t) =
      fun (x818 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x818) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x819 : t) ->
        fun (x820 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x819) "range" (Range.t_to_js x820)
    let (is : value:any -> bool) =
      fun ~value:(x821 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Hover") "is"
             [|(any_to_js x821)|])
  end
module ParameterInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x823 : Ojs.t) -> x823
    and t_to_js : t -> Ojs.t = fun (x822 : Ojs.t) -> x822
    let (get_label : t -> (uinteger * uinteger) or_string) =
      fun (x824 : t) ->
        or_string_of_js
          (fun (x825 : Ojs.t) ->
             let x826 = x825 in
             ((uinteger_of_js (Ojs.array_get x826 0)),
               (uinteger_of_js (Ojs.array_get x826 1))))
          (Ojs.get_prop_ascii (t_to_js x824) "label")
    let (set_label : t -> (uinteger * uinteger) or_string -> unit) =
      fun (x827 : t) ->
        fun (x828 : (uinteger * uinteger) or_string) ->
          Ojs.set_prop_ascii (t_to_js x827) "label"
            (or_string_to_js
               (fun (x829 : (uinteger * uinteger)) ->
                  let (x830, x831) = x829 in
                  let x832 = Ojs.array_make 2 in
                  Ojs.array_set x832 0 (uinteger_to_js x830);
                  Ojs.array_set x832 1 (uinteger_to_js x831);
                  x832) x828)
    let (get_documentation : t -> MarkupContent.t or_string) =
      fun (x833 : t) ->
        or_string_of_js MarkupContent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x833) "documentation")
    let (set_documentation : t -> MarkupContent.t or_string -> unit) =
      fun (x835 : t) ->
        fun (x836 : MarkupContent.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x835) "documentation"
            (or_string_to_js MarkupContent.t_to_js x836)
    let (create_ :
      label:(uinteger * uinteger) or_string ->
        ?documentation:string -> unit -> ParameterInformation.t)
      =
      fun ~label:(x838 : (uinteger * uinteger) or_string) ->
        fun ?documentation:(x839 : string option) ->
          fun () ->
            ParameterInformation.t_of_js
              (let x846 =
                 Ojs.get_prop_ascii Ojs.global "ParameterInformation" in
               Ojs.call (Ojs.get_prop_ascii x846 "create") "apply"
                 [|x846;((let x840 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x840 "push"
                               [|(or_string_to_js
                                    (fun (x842 : (uinteger * uinteger)) ->
                                       let (x843, x844) = x842 in
                                       let x845 = Ojs.array_make 2 in
                                       Ojs.array_set x845 0
                                         (uinteger_to_js x843);
                                       Ojs.array_set x845 1
                                         (uinteger_to_js x844);
                                       x845) x838)|]);
                          (match x839 with
                           | Some x841 ->
                               ignore
                                 (Ojs.call x840 "push"
                                    [|(Ojs.string_to_js x841)|])
                           | None -> ());
                          x840))|])
  end
module SignatureInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x848 : Ojs.t) -> x848
    and t_to_js : t -> Ojs.t = fun (x847 : Ojs.t) -> x847
    let (get_label : t -> string) =
      fun (x849 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x849) "label")
    let (set_label : t -> string -> unit) =
      fun (x850 : t) ->
        fun (x851 : string) ->
          Ojs.set_prop_ascii (t_to_js x850) "label" (Ojs.string_to_js x851)
    let (get_documentation : t -> MarkupContent.t or_string) =
      fun (x852 : t) ->
        or_string_of_js MarkupContent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x852) "documentation")
    let (set_documentation : t -> MarkupContent.t or_string -> unit) =
      fun (x854 : t) ->
        fun (x855 : MarkupContent.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x854) "documentation"
            (or_string_to_js MarkupContent.t_to_js x855)
    let (get_parameters : t -> ParameterInformation.t list) =
      fun (x857 : t) ->
        Ojs.list_of_js ParameterInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x857) "parameters")
    let (set_parameters : t -> ParameterInformation.t list -> unit) =
      fun (x859 : t) ->
        fun (x860 : ParameterInformation.t list) ->
          Ojs.set_prop_ascii (t_to_js x859) "parameters"
            (Ojs.list_to_js ParameterInformation.t_to_js x860)
    let (get_active_parameter : t -> uinteger) =
      fun (x862 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x862) "activeParameter")
    let (set_active_parameter : t -> uinteger -> unit) =
      fun (x863 : t) ->
        fun (x864 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x863) "activeParameter"
            (uinteger_to_js x864)
    let (create_ :
      label:string ->
        ?documentation:string ->
          parameters:ParameterInformation.t list -> SignatureInformation.t)
      =
      fun ~label:(x865 : string) ->
        fun ?documentation:(x866 : string option) ->
          fun ~parameters:(x867 : ParameterInformation.t list) ->
            SignatureInformation.t_of_js
              (let x871 =
                 Ojs.get_prop_ascii Ojs.global "SignatureInformation" in
               Ojs.call (Ojs.get_prop_ascii x871 "create") "apply"
                 [|x871;((let x868 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x868 "push" [|(Ojs.string_to_js x865)|]);
                          (match x866 with
                           | Some x870 ->
                               ignore
                                 (Ojs.call x868 "push"
                                    [|(Ojs.string_to_js x870)|])
                           | None -> ());
                          List.iter
                            (fun (x869 : ParameterInformation.t) ->
                               ignore
                                 (Ojs.call x868 "push"
                                    [|(ParameterInformation.t_to_js x869)|]))
                            x867;
                          x868))|])
  end
module SignatureHelp =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x873 : Ojs.t) -> x873
    and t_to_js : t -> Ojs.t = fun (x872 : Ojs.t) -> x872
    let (get_signatures : t -> SignatureInformation.t list) =
      fun (x874 : t) ->
        Ojs.list_of_js SignatureInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x874) "signatures")
    let (set_signatures : t -> SignatureInformation.t list -> unit) =
      fun (x876 : t) ->
        fun (x877 : SignatureInformation.t list) ->
          Ojs.set_prop_ascii (t_to_js x876) "signatures"
            (Ojs.list_to_js SignatureInformation.t_to_js x877)
    let (get_active_signature : t -> uinteger or_null) =
      fun (x879 : t) ->
        or_null_of_js uinteger_of_js
          (Ojs.get_prop_ascii (t_to_js x879) "activeSignature")
    let (set_active_signature : t -> uinteger or_null -> unit) =
      fun (x881 : t) ->
        fun (x882 : uinteger or_null) ->
          Ojs.set_prop_ascii (t_to_js x881) "activeSignature"
            (or_null_to_js uinteger_to_js x882)
    let (get_active_parameter : t -> uinteger or_null) =
      fun (x884 : t) ->
        or_null_of_js uinteger_of_js
          (Ojs.get_prop_ascii (t_to_js x884) "activeParameter")
    let (set_active_parameter : t -> uinteger or_null -> unit) =
      fun (x886 : t) ->
        fun (x887 : uinteger or_null) ->
          Ojs.set_prop_ascii (t_to_js x886) "activeParameter"
            (or_null_to_js uinteger_to_js x887)
  end
module Definition =
  struct
    type t = (Location.t, Location.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x892 : Ojs.t) ->
        or_array_of_js Location.t_of_js Location.t_of_js x892
    and t_to_js : t -> Ojs.t =
      fun (x889 : (Location.t, Location.t) or_array) ->
        or_array_to_js Location.t_to_js Location.t_to_js x889
  end
module DefinitionLink =
  struct
    type t = LocationLink.t
    let rec t_of_js : Ojs.t -> t =
      fun (x896 : Ojs.t) -> LocationLink.t_of_js x896
    and t_to_js : t -> Ojs.t =
      fun (x895 : LocationLink.t) -> LocationLink.t_to_js x895
  end
module Declaration =
  struct
    type t = (Location.t, Location.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x900 : Ojs.t) ->
        or_array_of_js Location.t_of_js Location.t_of_js x900
    and t_to_js : t -> Ojs.t =
      fun (x897 : (Location.t, Location.t) or_array) ->
        or_array_to_js Location.t_to_js Location.t_to_js x897
  end
module DeclarationLink =
  struct
    type t = LocationLink.t
    let rec t_of_js : Ojs.t -> t =
      fun (x904 : Ojs.t) -> LocationLink.t_of_js x904
    and t_to_js : t -> Ojs.t =
      fun (x903 : LocationLink.t) -> LocationLink.t_to_js x903
  end
module ReferenceContext =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x906 : Ojs.t) -> x906
    and t_to_js : t -> Ojs.t = fun (x905 : Ojs.t) -> x905
    let (get_include_declaration : t -> bool) =
      fun (x907 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x907) "includeDeclaration")
    let (set_include_declaration : t -> bool -> unit) =
      fun (x908 : t) ->
        fun (x909 : bool) ->
          Ojs.set_prop_ascii (t_to_js x908) "includeDeclaration"
            (Ojs.bool_to_js x909)
  end
module DocumentHighlightKind =
  struct
    type t = [ `L_n_1  | `L_n_2  | `L_n_3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x911 : Ojs.t) ->
        let x912 = x911 in
        match Ojs.int_of_js x912 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x910 : [ `L_n_1  | `L_n_2  | `L_n_3 ]) ->
        match x910 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
    let (text : [ `L_n_1 ]) =
      let x913 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DocumentHighlightKind") "Text" in
      match Ojs.int_of_js x913 with | 1 -> `L_n_1 | _ -> assert false
    let (read : [ `L_n_2 ]) =
      let x914 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DocumentHighlightKind") "Read" in
      match Ojs.int_of_js x914 with | 2 -> `L_n_2 | _ -> assert false
    let (write : [ `L_n_3 ]) =
      let x915 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DocumentHighlightKind") "Write" in
      match Ojs.int_of_js x915 with | 3 -> `L_n_3 | _ -> assert false
  end
module DocumentHighlight =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x917 : Ojs.t) -> x917
    and t_to_js : t -> Ojs.t = fun (x916 : Ojs.t) -> x916
    let (get_range : t -> Range.t) =
      fun (x918 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x918) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x919 : t) ->
        fun (x920 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x919) "range" (Range.t_to_js x920)
    let (get_kind : t -> DocumentHighlightKind.t) =
      fun (x921 : t) ->
        DocumentHighlightKind.t_of_js
          (Ojs.get_prop_ascii (t_to_js x921) "kind")
    let (set_kind : t -> DocumentHighlightKind.t -> unit) =
      fun (x922 : t) ->
        fun (x923 : DocumentHighlightKind.t) ->
          Ojs.set_prop_ascii (t_to_js x922) "kind"
            (DocumentHighlightKind.t_to_js x923)
    let (create_ :
      range:Range.t ->
        ?kind:DocumentHighlightKind.t -> unit -> DocumentHighlight.t)
      =
      fun ~range:(x924 : Range.t) ->
        fun ?kind:(x925 : DocumentHighlightKind.t option) ->
          fun () ->
            DocumentHighlight.t_of_js
              (let x928 = Ojs.get_prop_ascii Ojs.global "DocumentHighlight" in
               Ojs.call (Ojs.get_prop_ascii x928 "create") "apply"
                 [|x928;((let x926 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x926 "push" [|(Range.t_to_js x924)|]);
                          (match x925 with
                           | Some x927 ->
                               ignore
                                 (Ojs.call x926 "push"
                                    [|(DocumentHighlightKind.t_to_js x927)|])
                           | None -> ());
                          x926))|])
  end
module SymbolKind =
  struct
    type t =
      [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | `L_n_7 
      | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
      | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
      | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24  | `L_n_25 
      | `L_n_26 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x930 : Ojs.t) ->
        let x931 = x930 in
        match Ojs.int_of_js x931 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | 22 -> `L_n_22
        | 23 -> `L_n_23
        | 24 -> `L_n_24
        | 25 -> `L_n_25
        | 26 -> `L_n_26
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x929 :
          [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
          | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
          | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
          | `L_n_19  | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24 
          | `L_n_25  | `L_n_26 ])
        ->
        match x929 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
        | `L_n_4 -> Ojs.int_to_js 4
        | `L_n_5 -> Ojs.int_to_js 5
        | `L_n_6 -> Ojs.int_to_js 6
        | `L_n_7 -> Ojs.int_to_js 7
        | `L_n_8 -> Ojs.int_to_js 8
        | `L_n_9 -> Ojs.int_to_js 9
        | `L_n_10 -> Ojs.int_to_js 10
        | `L_n_11 -> Ojs.int_to_js 11
        | `L_n_12 -> Ojs.int_to_js 12
        | `L_n_13 -> Ojs.int_to_js 13
        | `L_n_14 -> Ojs.int_to_js 14
        | `L_n_15 -> Ojs.int_to_js 15
        | `L_n_16 -> Ojs.int_to_js 16
        | `L_n_17 -> Ojs.int_to_js 17
        | `L_n_18 -> Ojs.int_to_js 18
        | `L_n_19 -> Ojs.int_to_js 19
        | `L_n_20 -> Ojs.int_to_js 20
        | `L_n_21 -> Ojs.int_to_js 21
        | `L_n_22 -> Ojs.int_to_js 22
        | `L_n_23 -> Ojs.int_to_js 23
        | `L_n_24 -> Ojs.int_to_js 24
        | `L_n_25 -> Ojs.int_to_js 25
        | `L_n_26 -> Ojs.int_to_js 26
    let (file : [ `L_n_1 ]) =
      let x932 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "File" in
      match Ojs.int_of_js x932 with | 1 -> `L_n_1 | _ -> assert false
    let (module_ : [ `L_n_2 ]) =
      let x933 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Module" in
      match Ojs.int_of_js x933 with | 2 -> `L_n_2 | _ -> assert false
    let (namespace : [ `L_n_3 ]) =
      let x934 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Namespace" in
      match Ojs.int_of_js x934 with | 3 -> `L_n_3 | _ -> assert false
    let (package : [ `L_n_4 ]) =
      let x935 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Package" in
      match Ojs.int_of_js x935 with | 4 -> `L_n_4 | _ -> assert false
    let (class_ : [ `L_n_5 ]) =
      let x936 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Class" in
      match Ojs.int_of_js x936 with | 5 -> `L_n_5 | _ -> assert false
    let (method_ : [ `L_n_6 ]) =
      let x937 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Method" in
      match Ojs.int_of_js x937 with | 6 -> `L_n_6 | _ -> assert false
    let (property : [ `L_n_7 ]) =
      let x938 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Property" in
      match Ojs.int_of_js x938 with | 7 -> `L_n_7 | _ -> assert false
    let (field : [ `L_n_8 ]) =
      let x939 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Field" in
      match Ojs.int_of_js x939 with | 8 -> `L_n_8 | _ -> assert false
    let (constructor : [ `L_n_9 ]) =
      let x940 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Constructor" in
      match Ojs.int_of_js x940 with | 9 -> `L_n_9 | _ -> assert false
    let (enum : [ `L_n_10 ]) =
      let x941 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Enum" in
      match Ojs.int_of_js x941 with | 10 -> `L_n_10 | _ -> assert false
    let (interface : [ `L_n_11 ]) =
      let x942 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Interface" in
      match Ojs.int_of_js x942 with | 11 -> `L_n_11 | _ -> assert false
    let (function_ : [ `L_n_12 ]) =
      let x943 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Function" in
      match Ojs.int_of_js x943 with | 12 -> `L_n_12 | _ -> assert false
    let (variable : [ `L_n_13 ]) =
      let x944 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Variable" in
      match Ojs.int_of_js x944 with | 13 -> `L_n_13 | _ -> assert false
    let (constant : [ `L_n_14 ]) =
      let x945 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Constant" in
      match Ojs.int_of_js x945 with | 14 -> `L_n_14 | _ -> assert false
    let (string : [ `L_n_15 ]) =
      let x946 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "String" in
      match Ojs.int_of_js x946 with | 15 -> `L_n_15 | _ -> assert false
    let (number : [ `L_n_16 ]) =
      let x947 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Number" in
      match Ojs.int_of_js x947 with | 16 -> `L_n_16 | _ -> assert false
    let (boolean : [ `L_n_17 ]) =
      let x948 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Boolean" in
      match Ojs.int_of_js x948 with | 17 -> `L_n_17 | _ -> assert false
    let (array : [ `L_n_18 ]) =
      let x949 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Array" in
      match Ojs.int_of_js x949 with | 18 -> `L_n_18 | _ -> assert false
    let (object_ : [ `L_n_19 ]) =
      let x950 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Object" in
      match Ojs.int_of_js x950 with | 19 -> `L_n_19 | _ -> assert false
    let (key : [ `L_n_20 ]) =
      let x951 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind") "Key" in
      match Ojs.int_of_js x951 with | 20 -> `L_n_20 | _ -> assert false
    let (null : [ `L_n_21 ]) =
      let x952 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Null" in
      match Ojs.int_of_js x952 with | 21 -> `L_n_21 | _ -> assert false
    let (enum_member : [ `L_n_22 ]) =
      let x953 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "EnumMember" in
      match Ojs.int_of_js x953 with | 22 -> `L_n_22 | _ -> assert false
    let (struct_ : [ `L_n_23 ]) =
      let x954 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Struct" in
      match Ojs.int_of_js x954 with | 23 -> `L_n_23 | _ -> assert false
    let (event : [ `L_n_24 ]) =
      let x955 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Event" in
      match Ojs.int_of_js x955 with | 24 -> `L_n_24 | _ -> assert false
    let (operator : [ `L_n_25 ]) =
      let x956 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Operator" in
      match Ojs.int_of_js x956 with | 25 -> `L_n_25 | _ -> assert false
    let (type_parameter : [ `L_n_26 ]) =
      let x957 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "TypeParameter" in
      match Ojs.int_of_js x957 with | 26 -> `L_n_26 | _ -> assert false
  end
module SymbolTag =
  struct
    type t = [ `L_n_1 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x959 : Ojs.t) ->
        let x960 = x959 in
        match Ojs.int_of_js x960 with | 1 -> `L_n_1 | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x958 : [ `L_n_1 ]) -> match x958 with | `L_n_1 -> Ojs.int_to_js 1
    let (deprecated : [ `L_n_1 ]) =
      let x961 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolTag")
          "Deprecated" in
      match Ojs.int_of_js x961 with | 1 -> `L_n_1 | _ -> assert false
  end
module SymbolInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x963 : Ojs.t) -> x963
    and t_to_js : t -> Ojs.t = fun (x962 : Ojs.t) -> x962
    let (get_name : t -> string) =
      fun (x964 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x964) "name")
    let (set_name : t -> string -> unit) =
      fun (x965 : t) ->
        fun (x966 : string) ->
          Ojs.set_prop_ascii (t_to_js x965) "name" (Ojs.string_to_js x966)
    let (get_kind : t -> SymbolKind.t) =
      fun (x967 : t) ->
        SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x967) "kind")
    let (set_kind : t -> SymbolKind.t -> unit) =
      fun (x968 : t) ->
        fun (x969 : SymbolKind.t) ->
          Ojs.set_prop_ascii (t_to_js x968) "kind" (SymbolKind.t_to_js x969)
    let (get_tags : t -> SymbolTag.t list) =
      fun (x970 : t) ->
        Ojs.list_of_js SymbolTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x970) "tags")
    let (set_tags : t -> SymbolTag.t list -> unit) =
      fun (x972 : t) ->
        fun (x973 : SymbolTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x972) "tags"
            (Ojs.list_to_js SymbolTag.t_to_js x973)
    let (get_deprecated : t -> bool) =
      fun (x975 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x975) "deprecated")
    let (set_deprecated : t -> bool -> unit) =
      fun (x976 : t) ->
        fun (x977 : bool) ->
          Ojs.set_prop_ascii (t_to_js x976) "deprecated"
            (Ojs.bool_to_js x977)
    let (get_location : t -> Location.t) =
      fun (x978 : t) ->
        Location.t_of_js (Ojs.get_prop_ascii (t_to_js x978) "location")
    let (set_location : t -> Location.t -> unit) =
      fun (x979 : t) ->
        fun (x980 : Location.t) ->
          Ojs.set_prop_ascii (t_to_js x979) "location"
            (Location.t_to_js x980)
    let (get_container_name : t -> string) =
      fun (x981 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x981) "containerName")
    let (set_container_name : t -> string -> unit) =
      fun (x982 : t) ->
        fun (x983 : string) ->
          Ojs.set_prop_ascii (t_to_js x982) "containerName"
            (Ojs.string_to_js x983)
    let (create_ :
      name:string ->
        kind:SymbolKind.t ->
          range:Range.t ->
            ?uri:string ->
              ?container_name:string -> unit -> SymbolInformation.t)
      =
      fun ~name:(x984 : string) ->
        fun ~kind:(x985 : SymbolKind.t) ->
          fun ~range:(x986 : Range.t) ->
            fun ?uri:(x987 : string option) ->
              fun ?container_name:(x988 : string option) ->
                fun () ->
                  SymbolInformation.t_of_js
                    (let x992 =
                       Ojs.get_prop_ascii Ojs.global "SymbolInformation" in
                     Ojs.call (Ojs.get_prop_ascii x992 "create") "apply"
                       [|x992;((let x989 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x989 "push"
                                     [|(Ojs.string_to_js x984)|]);
                                ignore
                                  (Ojs.call x989 "push"
                                     [|(SymbolKind.t_to_js x985)|]);
                                ignore
                                  (Ojs.call x989 "push"
                                     [|(Range.t_to_js x986)|]);
                                (match x987 with
                                 | Some x991 ->
                                     ignore
                                       (Ojs.call x989 "push"
                                          [|(Ojs.string_to_js x991)|])
                                 | None -> ());
                                (match x988 with
                                 | Some x990 ->
                                     ignore
                                       (Ojs.call x989 "push"
                                          [|(Ojs.string_to_js x990)|])
                                 | None -> ());
                                x989))|])
  end
module DocumentSymbol =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x994 : Ojs.t) -> x994
    and t_to_js : t -> Ojs.t = fun (x993 : Ojs.t) -> x993
    let (get_name : t -> string) =
      fun (x995 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x995) "name")
    let (set_name : t -> string -> unit) =
      fun (x996 : t) ->
        fun (x997 : string) ->
          Ojs.set_prop_ascii (t_to_js x996) "name" (Ojs.string_to_js x997)
    let (get_detail : t -> string) =
      fun (x998 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x998) "detail")
    let (set_detail : t -> string -> unit) =
      fun (x999 : t) ->
        fun (x1000 : string) ->
          Ojs.set_prop_ascii (t_to_js x999) "detail" (Ojs.string_to_js x1000)
    let (get_kind : t -> SymbolKind.t) =
      fun (x1001 : t) ->
        SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1001) "kind")
    let (set_kind : t -> SymbolKind.t -> unit) =
      fun (x1002 : t) ->
        fun (x1003 : SymbolKind.t) ->
          Ojs.set_prop_ascii (t_to_js x1002) "kind"
            (SymbolKind.t_to_js x1003)
    let (get_tags : t -> SymbolTag.t list) =
      fun (x1004 : t) ->
        Ojs.list_of_js SymbolTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1004) "tags")
    let (set_tags : t -> SymbolTag.t list -> unit) =
      fun (x1006 : t) ->
        fun (x1007 : SymbolTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x1006) "tags"
            (Ojs.list_to_js SymbolTag.t_to_js x1007)
    let (get_deprecated : t -> bool) =
      fun (x1009 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1009) "deprecated")
    let (set_deprecated : t -> bool -> unit) =
      fun (x1010 : t) ->
        fun (x1011 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1010) "deprecated"
            (Ojs.bool_to_js x1011)
    let (get_range : t -> Range.t) =
      fun (x1012 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1012) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1013 : t) ->
        fun (x1014 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1013) "range" (Range.t_to_js x1014)
    let (get_selection_range : t -> Range.t) =
      fun (x1015 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1015) "selectionRange")
    let (set_selection_range : t -> Range.t -> unit) =
      fun (x1016 : t) ->
        fun (x1017 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1016) "selectionRange"
            (Range.t_to_js x1017)
    let (get_children : t -> t list) =
      fun (x1018 : t) ->
        Ojs.list_of_js t_of_js
          (Ojs.get_prop_ascii (t_to_js x1018) "children")
    let (set_children : t -> t list -> unit) =
      fun (x1020 : t) ->
        fun (x1021 : t list) ->
          Ojs.set_prop_ascii (t_to_js x1020) "children"
            (Ojs.list_to_js t_to_js x1021)
    let (create_ :
      name:string ->
        detail:string or_undefined ->
          kind:SymbolKind.t ->
            range:Range.t ->
              selection_range:Range.t ->
                ?children:DocumentSymbol.t list -> unit -> DocumentSymbol.t)
      =
      fun ~name:(x1023 : string) ->
        fun ~detail:(x1024 : string or_undefined) ->
          fun ~kind:(x1025 : SymbolKind.t) ->
            fun ~range:(x1026 : Range.t) ->
              fun ~selection_range:(x1027 : Range.t) ->
                fun ?children:(x1028 : DocumentSymbol.t list option) ->
                  fun () ->
                    DocumentSymbol.t_of_js
                      (let x1033 =
                         Ojs.get_prop_ascii Ojs.global "DocumentSymbol" in
                       Ojs.call (Ojs.get_prop_ascii x1033 "create") "apply"
                         [|x1033;((let x1029 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1029 "push"
                                        [|(Ojs.string_to_js x1023)|]);
                                   ignore
                                     (Ojs.call x1029 "push"
                                        [|(or_undefined_to_js
                                             Ojs.string_to_js x1024)|]);
                                   ignore
                                     (Ojs.call x1029 "push"
                                        [|(SymbolKind.t_to_js x1025)|]);
                                   ignore
                                     (Ojs.call x1029 "push"
                                        [|(Range.t_to_js x1026)|]);
                                   ignore
                                     (Ojs.call x1029 "push"
                                        [|(Range.t_to_js x1027)|]);
                                   (match x1028 with
                                    | Some x1030 ->
                                        ignore
                                          (Ojs.call x1029 "push"
                                             [|(Ojs.list_to_js
                                                  DocumentSymbol.t_to_js
                                                  x1030)|])
                                    | None -> ());
                                   x1029))|])
    let (is : value:any -> bool) =
      fun ~value:(x1034 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DocumentSymbol") "is"
             [|(any_to_js x1034)|])
  end
module CodeActionKind =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x1036 : Ojs.t) -> Ojs.string_of_js x1036
    and t_to_js : t -> Ojs.t = fun (x1035 : string) -> Ojs.string_to_js x1035
    let (empty : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "Empty")
    let (quick_fix : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "QuickFix")
    let (refactor : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "Refactor")
    let (refactor_extract : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "RefactorExtract")
    let (refactor_inline : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "RefactorInline")
    let (refactor_rewrite : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "RefactorRewrite")
    let (source : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "Source")
    let (source_organize_imports : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "SourceOrganizeImports")
    let (source_fix_all : CodeActionKind.t) =
      CodeActionKind.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "SourceFixAll")
  end
module CodeActionContext =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1038 : Ojs.t) -> x1038
    and t_to_js : t -> Ojs.t = fun (x1037 : Ojs.t) -> x1037
    let (get_diagnostics : t -> Diagnostic.t list) =
      fun (x1039 : t) ->
        Ojs.list_of_js Diagnostic.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1039) "diagnostics")
    let (set_diagnostics : t -> Diagnostic.t list -> unit) =
      fun (x1041 : t) ->
        fun (x1042 : Diagnostic.t list) ->
          Ojs.set_prop_ascii (t_to_js x1041) "diagnostics"
            (Ojs.list_to_js Diagnostic.t_to_js x1042)
    let (get_only : t -> CodeActionKind.t list) =
      fun (x1044 : t) ->
        Ojs.list_of_js CodeActionKind.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1044) "only")
    let (set_only : t -> CodeActionKind.t list -> unit) =
      fun (x1046 : t) ->
        fun (x1047 : CodeActionKind.t list) ->
          Ojs.set_prop_ascii (t_to_js x1046) "only"
            (Ojs.list_to_js CodeActionKind.t_to_js x1047)
    let (create_ :
      diagnostics:Diagnostic.t list ->
        ?only:CodeActionKind.t list -> unit -> CodeActionContext.t)
      =
      fun ~diagnostics:(x1049 : Diagnostic.t list) ->
        fun ?only:(x1050 : CodeActionKind.t list option) ->
          fun () ->
            CodeActionContext.t_of_js
              (let x1055 = Ojs.get_prop_ascii Ojs.global "CodeActionContext" in
               Ojs.call (Ojs.get_prop_ascii x1055 "create") "apply"
                 [|x1055;((let x1051 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1051 "push"
                                [|(Ojs.list_to_js Diagnostic.t_to_js x1049)|]);
                           (match x1050 with
                            | Some x1052 ->
                                ignore
                                  (Ojs.call x1051 "push"
                                     [|(Ojs.list_to_js CodeActionKind.t_to_js
                                          x1052)|])
                            | None -> ());
                           x1051))|])
    let (is : value:any -> bool) =
      fun ~value:(x1056 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeActionContext") "is"
             [|(any_to_js x1056)|])
  end
module CodeAction =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1058 : Ojs.t) -> x1058
    and t_to_js : t -> Ojs.t = fun (x1057 : Ojs.t) -> x1057
    let (get_title : t -> string) =
      fun (x1059 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1059) "title")
    let (set_title : t -> string -> unit) =
      fun (x1060 : t) ->
        fun (x1061 : string) ->
          Ojs.set_prop_ascii (t_to_js x1060) "title" (Ojs.string_to_js x1061)
    let (get_kind : t -> CodeActionKind.t) =
      fun (x1062 : t) ->
        CodeActionKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1062) "kind")
    let (set_kind : t -> CodeActionKind.t -> unit) =
      fun (x1063 : t) ->
        fun (x1064 : CodeActionKind.t) ->
          Ojs.set_prop_ascii (t_to_js x1063) "kind"
            (CodeActionKind.t_to_js x1064)
    let (get_diagnostics : t -> Diagnostic.t list) =
      fun (x1065 : t) ->
        Ojs.list_of_js Diagnostic.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1065) "diagnostics")
    let (set_diagnostics : t -> Diagnostic.t list -> unit) =
      fun (x1067 : t) ->
        fun (x1068 : Diagnostic.t list) ->
          Ojs.set_prop_ascii (t_to_js x1067) "diagnostics"
            (Ojs.list_to_js Diagnostic.t_to_js x1068)
    let (get_is_preferred : t -> bool) =
      fun (x1070 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1070) "isPreferred")
    let (set_is_preferred : t -> bool -> unit) =
      fun (x1071 : t) ->
        fun (x1072 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1071) "isPreferred"
            (Ojs.bool_to_js x1072)
    let (get_disabled : t -> AnonymousInterface1.t) =
      fun (x1073 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1073) "disabled")
    let (set_disabled : t -> AnonymousInterface1.t -> unit) =
      fun (x1074 : t) ->
        fun (x1075 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x1074) "disabled"
            (AnonymousInterface1.t_to_js x1075)
    let (get_edit : t -> WorkspaceEdit.t) =
      fun (x1076 : t) ->
        WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1076) "edit")
    let (set_edit : t -> WorkspaceEdit.t -> unit) =
      fun (x1077 : t) ->
        fun (x1078 : WorkspaceEdit.t) ->
          Ojs.set_prop_ascii (t_to_js x1077) "edit"
            (WorkspaceEdit.t_to_js x1078)
    let (get_command : t -> Command.t) =
      fun (x1079 : t) ->
        Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1079) "command")
    let (set_command : t -> Command.t -> unit) =
      fun (x1080 : t) ->
        fun (x1081 : Command.t) ->
          Ojs.set_prop_ascii (t_to_js x1080) "command"
            (Command.t_to_js x1081)
    let (get_data : t -> unknown) =
      fun (x1082 : t) ->
        unknown_of_js (Ojs.get_prop_ascii (t_to_js x1082) "data")
    let (set_data : t -> unknown -> unit) =
      fun (x1083 : t) ->
        fun (x1084 : unknown) ->
          Ojs.set_prop_ascii (t_to_js x1083) "data" (unknown_to_js x1084)
    let (create_ :
      title:string -> ?kind:CodeActionKind.t -> unit -> CodeAction.t) =
      fun ~title:(x1085 : string) ->
        fun ?kind:(x1086 : CodeActionKind.t option) ->
          fun () ->
            CodeAction.t_of_js
              (let x1089 = Ojs.get_prop_ascii Ojs.global "CodeAction" in
               Ojs.call (Ojs.get_prop_ascii x1089 "create") "apply"
                 [|x1089;((let x1087 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1087 "push"
                                [|(Ojs.string_to_js x1085)|]);
                           (match x1086 with
                            | Some x1088 ->
                                ignore
                                  (Ojs.call x1087 "push"
                                     [|(CodeActionKind.t_to_js x1088)|])
                            | None -> ());
                           x1087))|])
    let (create_'' :
      title:string ->
        command:Command.t -> ?kind:CodeActionKind.t -> unit -> CodeAction.t)
      =
      fun ~title:(x1090 : string) ->
        fun ~command:(x1091 : Command.t) ->
          fun ?kind:(x1092 : CodeActionKind.t option) ->
            fun () ->
              CodeAction.t_of_js
                (let x1095 = Ojs.get_prop_ascii Ojs.global "CodeAction" in
                 Ojs.call (Ojs.get_prop_ascii x1095 "create") "apply"
                   [|x1095;((let x1093 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1093 "push"
                                  [|(Ojs.string_to_js x1090)|]);
                             ignore
                               (Ojs.call x1093 "push"
                                  [|(Command.t_to_js x1091)|]);
                             (match x1092 with
                              | Some x1094 ->
                                  ignore
                                    (Ojs.call x1093 "push"
                                       [|(CodeActionKind.t_to_js x1094)|])
                              | None -> ());
                             x1093))|])
    let (create_'' :
      title:string ->
        edit:WorkspaceEdit.t ->
          ?kind:CodeActionKind.t -> unit -> CodeAction.t)
      =
      fun ~title:(x1096 : string) ->
        fun ~edit:(x1097 : WorkspaceEdit.t) ->
          fun ?kind:(x1098 : CodeActionKind.t option) ->
            fun () ->
              CodeAction.t_of_js
                (let x1101 = Ojs.get_prop_ascii Ojs.global "CodeAction" in
                 Ojs.call (Ojs.get_prop_ascii x1101 "create") "apply"
                   [|x1101;((let x1099 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1099 "push"
                                  [|(Ojs.string_to_js x1096)|]);
                             ignore
                               (Ojs.call x1099 "push"
                                  [|(WorkspaceEdit.t_to_js x1097)|]);
                             (match x1098 with
                              | Some x1100 ->
                                  ignore
                                    (Ojs.call x1099 "push"
                                       [|(CodeActionKind.t_to_js x1100)|])
                              | None -> ());
                             x1099))|])
    let (is : value:any -> bool) =
      fun ~value:(x1102 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeAction") "is"
             [|(any_to_js x1102)|])
  end
module CodeLens =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1104 : Ojs.t) -> x1104
    and t_to_js : t -> Ojs.t = fun (x1103 : Ojs.t) -> x1103
    let (get_range : t -> Range.t) =
      fun (x1105 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1105) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1106 : t) ->
        fun (x1107 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1106) "range" (Range.t_to_js x1107)
    let (get_command : t -> Command.t) =
      fun (x1108 : t) ->
        Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1108) "command")
    let (set_command : t -> Command.t -> unit) =
      fun (x1109 : t) ->
        fun (x1110 : Command.t) ->
          Ojs.set_prop_ascii (t_to_js x1109) "command"
            (Command.t_to_js x1110)
    let (get_data : t -> any) =
      fun (x1111 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x1111) "data")
    let (set_data : t -> any -> unit) =
      fun (x1112 : t) ->
        fun (x1113 : any) ->
          Ojs.set_prop_ascii (t_to_js x1112) "data" (any_to_js x1113)
    let (create_ : range:Range.t -> ?data:any -> unit -> CodeLens.t) =
      fun ~range:(x1114 : Range.t) ->
        fun ?data:(x1115 : any option) ->
          fun () ->
            CodeLens.t_of_js
              (let x1118 = Ojs.get_prop_ascii Ojs.global "CodeLens" in
               Ojs.call (Ojs.get_prop_ascii x1118 "create") "apply"
                 [|x1118;((let x1116 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1116 "push" [|(Range.t_to_js x1114)|]);
                           (match x1115 with
                            | Some x1117 ->
                                ignore
                                  (Ojs.call x1116 "push"
                                     [|(any_to_js x1117)|])
                            | None -> ());
                           x1116))|])
    let (is : value:any -> bool) =
      fun ~value:(x1119 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeLens") "is"
             [|(any_to_js x1119)|])
  end
module FormattingOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1121 : Ojs.t) -> x1121
    and t_to_js : t -> Ojs.t = fun (x1120 : Ojs.t) -> x1120
    let (get_tab_size : t -> uinteger) =
      fun (x1122 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x1122) "tabSize")
    let (set_tab_size : t -> uinteger -> unit) =
      fun (x1123 : t) ->
        fun (x1124 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x1123) "tabSize" (uinteger_to_js x1124)
    let (get_insert_spaces : t -> bool) =
      fun (x1125 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1125) "insertSpaces")
    let (set_insert_spaces : t -> bool -> unit) =
      fun (x1126 : t) ->
        fun (x1127 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1126) "insertSpaces"
            (Ojs.bool_to_js x1127)
    let (get_trim_trailing_whitespace : t -> bool) =
      fun (x1128 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x1128) "trimTrailingWhitespace")
    let (set_trim_trailing_whitespace : t -> bool -> unit) =
      fun (x1129 : t) ->
        fun (x1130 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1129) "trimTrailingWhitespace"
            (Ojs.bool_to_js x1130)
    let (get_insert_final_newline : t -> bool) =
      fun (x1131 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x1131) "insertFinalNewline")
    let (set_insert_final_newline : t -> bool -> unit) =
      fun (x1132 : t) ->
        fun (x1133 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1132) "insertFinalNewline"
            (Ojs.bool_to_js x1133)
    let (get_trim_final_newlines : t -> bool) =
      fun (x1134 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x1134) "trimFinalNewlines")
    let (set_trim_final_newlines : t -> bool -> unit) =
      fun (x1135 : t) ->
        fun (x1136 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1135) "trimFinalNewlines"
            (Ojs.bool_to_js x1136)
    let (get : t -> string -> integer or_boolean or_string or_undefined) =
      fun (x1137 : t) ->
        fun (x1138 : string) ->
          or_undefined_of_js
            (fun (x1139 : Ojs.t) ->
               or_string_of_js
                 (fun (x1140 : Ojs.t) -> or_boolean_of_js integer_of_js x1140)
                 x1139)
            (Ojs.get_prop (t_to_js x1137) (Ojs.string_to_js x1138))
    let (set :
      t -> string -> integer or_boolean or_string or_undefined -> unit) =
      fun (x1142 : t) ->
        fun (x1143 : string) ->
          fun (x1144 : integer or_boolean or_string or_undefined) ->
            Ojs.set_prop (t_to_js x1142) (Ojs.string_to_js x1143)
              (or_undefined_to_js
                 (fun (x1145 : integer or_boolean or_string) ->
                    or_string_to_js
                      (fun (x1146 : integer or_boolean) ->
                         or_boolean_to_js integer_to_js x1146) x1145) x1144)
    let (create_ :
      tab_size:uinteger -> insert_spaces:bool -> FormattingOptions.t) =
      fun ~tab_size:(x1148 : uinteger) ->
        fun ~insert_spaces:(x1149 : bool) ->
          FormattingOptions.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "FormattingOptions")
               "create" [|(uinteger_to_js x1148);(Ojs.bool_to_js x1149)|])
    let (is : value:any -> bool) =
      fun ~value:(x1150 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "FormattingOptions") "is"
             [|(any_to_js x1150)|])
  end
module DocumentLink =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1152 : Ojs.t) -> x1152
    and t_to_js : t -> Ojs.t = fun (x1151 : Ojs.t) -> x1151
    let (get_range : t -> Range.t) =
      fun (x1153 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1153) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1154 : t) ->
        fun (x1155 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1154) "range" (Range.t_to_js x1155)
    let (get_target : t -> string) =
      fun (x1156 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1156) "target")
    let (set_target : t -> string -> unit) =
      fun (x1157 : t) ->
        fun (x1158 : string) ->
          Ojs.set_prop_ascii (t_to_js x1157) "target"
            (Ojs.string_to_js x1158)
    let (get_tooltip : t -> string) =
      fun (x1159 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1159) "tooltip")
    let (set_tooltip : t -> string -> unit) =
      fun (x1160 : t) ->
        fun (x1161 : string) ->
          Ojs.set_prop_ascii (t_to_js x1160) "tooltip"
            (Ojs.string_to_js x1161)
    let (get_data : t -> any) =
      fun (x1162 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x1162) "data")
    let (set_data : t -> any -> unit) =
      fun (x1163 : t) ->
        fun (x1164 : any) ->
          Ojs.set_prop_ascii (t_to_js x1163) "data" (any_to_js x1164)
    let (create_ :
      range:Range.t -> ?target:string -> ?data:any -> unit -> DocumentLink.t)
      =
      fun ~range:(x1165 : Range.t) ->
        fun ?target:(x1166 : string option) ->
          fun ?data:(x1167 : any option) ->
            fun () ->
              DocumentLink.t_of_js
                (let x1171 = Ojs.get_prop_ascii Ojs.global "DocumentLink" in
                 Ojs.call (Ojs.get_prop_ascii x1171 "create") "apply"
                   [|x1171;((let x1168 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1168 "push"
                                  [|(Range.t_to_js x1165)|]);
                             (match x1166 with
                              | Some x1170 ->
                                  ignore
                                    (Ojs.call x1168 "push"
                                       [|(Ojs.string_to_js x1170)|])
                              | None -> ());
                             (match x1167 with
                              | Some x1169 ->
                                  ignore
                                    (Ojs.call x1168 "push"
                                       [|(any_to_js x1169)|])
                              | None -> ());
                             x1168))|])
    let (is : value:any -> bool) =
      fun ~value:(x1172 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DocumentLink") "is"
             [|(any_to_js x1172)|])
  end
module SelectionRange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1174 : Ojs.t) -> x1174
    and t_to_js : t -> Ojs.t = fun (x1173 : Ojs.t) -> x1173
    let (get_range : t -> Range.t) =
      fun (x1175 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1175) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1176 : t) ->
        fun (x1177 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1176) "range" (Range.t_to_js x1177)
    let (get_parent : t -> t) =
      fun (x1178 : t) ->
        t_of_js (Ojs.get_prop_ascii (t_to_js x1178) "parent")
    let (set_parent : t -> t -> unit) =
      fun (x1179 : t) ->
        fun (x1180 : t) ->
          Ojs.set_prop_ascii (t_to_js x1179) "parent" (t_to_js x1180)
    let (create_ :
      range:Range.t -> ?parent:SelectionRange.t -> unit -> SelectionRange.t)
      =
      fun ~range:(x1181 : Range.t) ->
        fun ?parent:(x1182 : SelectionRange.t option) ->
          fun () ->
            SelectionRange.t_of_js
              (let x1185 = Ojs.get_prop_ascii Ojs.global "SelectionRange" in
               Ojs.call (Ojs.get_prop_ascii x1185 "create") "apply"
                 [|x1185;((let x1183 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1183 "push" [|(Range.t_to_js x1181)|]);
                           (match x1182 with
                            | Some x1184 ->
                                ignore
                                  (Ojs.call x1183 "push"
                                     [|(SelectionRange.t_to_js x1184)|])
                            | None -> ());
                           x1183))|])
    let (is : value:any -> bool) =
      fun ~value:(x1186 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "SelectionRange") "is"
             [|(any_to_js x1186)|])
  end
module CallHierarchyItem =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1188 : Ojs.t) -> x1188
    and t_to_js : t -> Ojs.t = fun (x1187 : Ojs.t) -> x1187
    let (get_name : t -> string) =
      fun (x1189 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1189) "name")
    let (set_name : t -> string -> unit) =
      fun (x1190 : t) ->
        fun (x1191 : string) ->
          Ojs.set_prop_ascii (t_to_js x1190) "name" (Ojs.string_to_js x1191)
    let (get_kind : t -> SymbolKind.t) =
      fun (x1192 : t) ->
        SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1192) "kind")
    let (set_kind : t -> SymbolKind.t -> unit) =
      fun (x1193 : t) ->
        fun (x1194 : SymbolKind.t) ->
          Ojs.set_prop_ascii (t_to_js x1193) "kind"
            (SymbolKind.t_to_js x1194)
    let (get_tags : t -> SymbolTag.t list) =
      fun (x1195 : t) ->
        Ojs.list_of_js SymbolTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1195) "tags")
    let (set_tags : t -> SymbolTag.t list -> unit) =
      fun (x1197 : t) ->
        fun (x1198 : SymbolTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x1197) "tags"
            (Ojs.list_to_js SymbolTag.t_to_js x1198)
    let (get_detail : t -> string) =
      fun (x1200 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1200) "detail")
    let (set_detail : t -> string -> unit) =
      fun (x1201 : t) ->
        fun (x1202 : string) ->
          Ojs.set_prop_ascii (t_to_js x1201) "detail"
            (Ojs.string_to_js x1202)
    let (get_uri : t -> DocumentUri.t) =
      fun (x1203 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x1203) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x1204 : t) ->
        fun (x1205 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x1204) "uri"
            (DocumentUri.t_to_js x1205)
    let (get_range : t -> Range.t) =
      fun (x1206 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1206) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1207 : t) ->
        fun (x1208 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1207) "range" (Range.t_to_js x1208)
    let (get_selection_range : t -> Range.t) =
      fun (x1209 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1209) "selectionRange")
    let (set_selection_range : t -> Range.t -> unit) =
      fun (x1210 : t) ->
        fun (x1211 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1210) "selectionRange"
            (Range.t_to_js x1211)
    let (get_data : t -> unknown) =
      fun (x1212 : t) ->
        unknown_of_js (Ojs.get_prop_ascii (t_to_js x1212) "data")
    let (set_data : t -> unknown -> unit) =
      fun (x1213 : t) ->
        fun (x1214 : unknown) ->
          Ojs.set_prop_ascii (t_to_js x1213) "data" (unknown_to_js x1214)
  end
module CallHierarchyIncomingCall =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1216 : Ojs.t) -> x1216
    and t_to_js : t -> Ojs.t = fun (x1215 : Ojs.t) -> x1215
    let (get_from : t -> CallHierarchyItem.t) =
      fun (x1217 : t) ->
        CallHierarchyItem.t_of_js (Ojs.get_prop_ascii (t_to_js x1217) "from")
    let (set_from : t -> CallHierarchyItem.t -> unit) =
      fun (x1218 : t) ->
        fun (x1219 : CallHierarchyItem.t) ->
          Ojs.set_prop_ascii (t_to_js x1218) "from"
            (CallHierarchyItem.t_to_js x1219)
    let (get_from_ranges : t -> Range.t list) =
      fun (x1220 : t) ->
        Ojs.list_of_js Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1220) "fromRanges")
    let (set_from_ranges : t -> Range.t list -> unit) =
      fun (x1222 : t) ->
        fun (x1223 : Range.t list) ->
          Ojs.set_prop_ascii (t_to_js x1222) "fromRanges"
            (Ojs.list_to_js Range.t_to_js x1223)
  end
module CallHierarchyOutgoingCall =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1226 : Ojs.t) -> x1226
    and t_to_js : t -> Ojs.t = fun (x1225 : Ojs.t) -> x1225
    let (get_to : t -> CallHierarchyItem.t) =
      fun (x1227 : t) ->
        CallHierarchyItem.t_of_js (Ojs.get_prop_ascii (t_to_js x1227) "to")
    let (set_to : t -> CallHierarchyItem.t -> unit) =
      fun (x1228 : t) ->
        fun (x1229 : CallHierarchyItem.t) ->
          Ojs.set_prop_ascii (t_to_js x1228) "to"
            (CallHierarchyItem.t_to_js x1229)
    let (get_from_ranges : t -> Range.t list) =
      fun (x1230 : t) ->
        Ojs.list_of_js Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1230) "fromRanges")
    let (set_from_ranges : t -> Range.t list -> unit) =
      fun (x1232 : t) ->
        fun (x1233 : Range.t list) ->
          Ojs.set_prop_ascii (t_to_js x1232) "fromRanges"
            (Ojs.list_to_js Range.t_to_js x1233)
  end
module SemanticTokenTypes =
  struct
    type t =
      [ `namespace  | `type_  | `class_  | `enum  | `interface  | `struct_ 
      | `typeParameter  | `parameter  | `variable  | `property 
      | `enumMember  | `event  | `function_  | `method_  | `macro 
      | `keyword  | `modifier  | `comment  | `string  | `number  | `regexp 
      | `operator ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1236 : Ojs.t) ->
        let x1237 = x1236 in
        match Ojs.string_of_js x1237 with
        | "namespace" -> `namespace
        | "type" -> `type_
        | "class" -> `class_
        | "enum" -> `enum
        | "interface" -> `interface
        | "struct" -> `struct_
        | "typeParameter" -> `typeParameter
        | "parameter" -> `parameter
        | "variable" -> `variable
        | "property" -> `property
        | "enumMember" -> `enumMember
        | "event" -> `event
        | "function" -> `function_
        | "method" -> `method_
        | "macro" -> `macro
        | "keyword" -> `keyword
        | "modifier" -> `modifier
        | "comment" -> `comment
        | "string" -> `string
        | "number" -> `number
        | "regexp" -> `regexp
        | "operator" -> `operator
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1235 :
          [ `namespace  | `type_  | `class_  | `enum  | `interface 
          | `struct_  | `typeParameter  | `parameter  | `variable 
          | `property  | `enumMember  | `event  | `function_  | `method_ 
          | `macro  | `keyword  | `modifier  | `comment  | `string 
          | `number  | `regexp  | `operator ])
        ->
        match x1235 with
        | `namespace -> Ojs.string_to_js "namespace"
        | `type_ -> Ojs.string_to_js "type"
        | `class_ -> Ojs.string_to_js "class"
        | `enum -> Ojs.string_to_js "enum"
        | `interface -> Ojs.string_to_js "interface"
        | `struct_ -> Ojs.string_to_js "struct"
        | `typeParameter -> Ojs.string_to_js "typeParameter"
        | `parameter -> Ojs.string_to_js "parameter"
        | `variable -> Ojs.string_to_js "variable"
        | `property -> Ojs.string_to_js "property"
        | `enumMember -> Ojs.string_to_js "enumMember"
        | `event -> Ojs.string_to_js "event"
        | `function_ -> Ojs.string_to_js "function"
        | `method_ -> Ojs.string_to_js "method"
        | `macro -> Ojs.string_to_js "macro"
        | `keyword -> Ojs.string_to_js "keyword"
        | `modifier -> Ojs.string_to_js "modifier"
        | `comment -> Ojs.string_to_js "comment"
        | `string -> Ojs.string_to_js "string"
        | `number -> Ojs.string_to_js "number"
        | `regexp -> Ojs.string_to_js "regexp"
        | `operator -> Ojs.string_to_js "operator"
  end
module SemanticTokenModifiers =
  struct
    type t =
      [ `declaration  | `definition  | `readonly  | `static  | `deprecated 
      | `abstract  | `async  | `modification  | `documentation 
      | `defaultLibrary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1239 : Ojs.t) ->
        let x1240 = x1239 in
        match Ojs.string_of_js x1240 with
        | "declaration" -> `declaration
        | "definition" -> `definition
        | "readonly" -> `readonly
        | "static" -> `static
        | "deprecated" -> `deprecated
        | "abstract" -> `abstract
        | "async" -> `async
        | "modification" -> `modification
        | "documentation" -> `documentation
        | "defaultLibrary" -> `defaultLibrary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1238 :
          [ `declaration  | `definition  | `readonly  | `static 
          | `deprecated  | `abstract  | `async  | `modification 
          | `documentation  | `defaultLibrary ])
        ->
        match x1238 with
        | `declaration -> Ojs.string_to_js "declaration"
        | `definition -> Ojs.string_to_js "definition"
        | `readonly -> Ojs.string_to_js "readonly"
        | `static -> Ojs.string_to_js "static"
        | `deprecated -> Ojs.string_to_js "deprecated"
        | `abstract -> Ojs.string_to_js "abstract"
        | `async -> Ojs.string_to_js "async"
        | `modification -> Ojs.string_to_js "modification"
        | `documentation -> Ojs.string_to_js "documentation"
        | `defaultLibrary -> Ojs.string_to_js "defaultLibrary"
  end
module SemanticTokensLegend =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1242 : Ojs.t) -> x1242
    and t_to_js : t -> Ojs.t = fun (x1241 : Ojs.t) -> x1241
    let (get_token_types : t -> string list) =
      fun (x1243 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x1243) "tokenTypes")
    let (set_token_types : t -> string list -> unit) =
      fun (x1245 : t) ->
        fun (x1246 : string list) ->
          Ojs.set_prop_ascii (t_to_js x1245) "tokenTypes"
            (Ojs.list_to_js Ojs.string_to_js x1246)
    let (get_token_modifiers : t -> string list) =
      fun (x1248 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x1248) "tokenModifiers")
    let (set_token_modifiers : t -> string list -> unit) =
      fun (x1250 : t) ->
        fun (x1251 : string list) ->
          Ojs.set_prop_ascii (t_to_js x1250) "tokenModifiers"
            (Ojs.list_to_js Ojs.string_to_js x1251)
  end
module SemanticTokens =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1254 : Ojs.t) -> x1254
    and t_to_js : t -> Ojs.t = fun (x1253 : Ojs.t) -> x1253
    let (get_result_id : t -> string) =
      fun (x1255 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1255) "resultId")
    let (set_result_id : t -> string -> unit) =
      fun (x1256 : t) ->
        fun (x1257 : string) ->
          Ojs.set_prop_ascii (t_to_js x1256) "resultId"
            (Ojs.string_to_js x1257)
    let (get_data : t -> uinteger list) =
      fun (x1258 : t) ->
        Ojs.list_of_js uinteger_of_js
          (Ojs.get_prop_ascii (t_to_js x1258) "data")
    let (set_data : t -> uinteger list -> unit) =
      fun (x1260 : t) ->
        fun (x1261 : uinteger list) ->
          Ojs.set_prop_ascii (t_to_js x1260) "data"
            (Ojs.list_to_js uinteger_to_js x1261)
    let (is : value:any -> bool) =
      fun ~value:(x1263 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "SemanticTokens") "is"
             [|(any_to_js x1263)|])
  end
module SemanticTokensEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1265 : Ojs.t) -> x1265
    and t_to_js : t -> Ojs.t = fun (x1264 : Ojs.t) -> x1264
    let (get_start : t -> uinteger) =
      fun (x1266 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x1266) "start")
    let (set_start : t -> uinteger -> unit) =
      fun (x1267 : t) ->
        fun (x1268 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x1267) "start" (uinteger_to_js x1268)
    let (get_delete_count : t -> uinteger) =
      fun (x1269 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x1269) "deleteCount")
    let (set_delete_count : t -> uinteger -> unit) =
      fun (x1270 : t) ->
        fun (x1271 : uinteger) ->
          Ojs.set_prop_ascii (t_to_js x1270) "deleteCount"
            (uinteger_to_js x1271)
    let (get_data : t -> uinteger list) =
      fun (x1272 : t) ->
        Ojs.list_of_js uinteger_of_js
          (Ojs.get_prop_ascii (t_to_js x1272) "data")
    let (set_data : t -> uinteger list -> unit) =
      fun (x1274 : t) ->
        fun (x1275 : uinteger list) ->
          Ojs.set_prop_ascii (t_to_js x1274) "data"
            (Ojs.list_to_js uinteger_to_js x1275)
  end
module SemanticTokensDelta =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1278 : Ojs.t) -> x1278
    and t_to_js : t -> Ojs.t = fun (x1277 : Ojs.t) -> x1277
    let (get_result_id : t -> string) =
      fun (x1279 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1279) "resultId")
    let (get_edits : t -> SemanticTokensEdit.t list) =
      fun (x1280 : t) ->
        Ojs.list_of_js SemanticTokensEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1280) "edits")
    let (set_edits : t -> SemanticTokensEdit.t list -> unit) =
      fun (x1282 : t) ->
        fun (x1283 : SemanticTokensEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x1282) "edits"
            (Ojs.list_to_js SemanticTokensEdit.t_to_js x1283)
  end
let (e_ol : string list) =
  Ojs.list_of_js Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "EOL")
module TextDocument =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1287 : Ojs.t) -> x1287
    and t_to_js : t -> Ojs.t = fun (x1286 : Ojs.t) -> x1286
    let (get_uri : t -> DocumentUri.t) =
      fun (x1288 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x1288) "uri")
    let (get_language_id : t -> string) =
      fun (x1289 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1289) "languageId")
    let (get_version : t -> integer) =
      fun (x1290 : t) ->
        integer_of_js (Ojs.get_prop_ascii (t_to_js x1290) "version")
    let (get_text : t -> ?range:Range.t -> unit -> string) =
      fun (x1294 : t) ->
        fun ?range:(x1291 : Range.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x1295 = t_to_js x1294 in
               Ojs.call (Ojs.get_prop_ascii x1295 "getText") "apply"
                 [|x1295;((let x1292 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1291 with
                            | Some x1293 ->
                                ignore
                                  (Ojs.call x1292 "push"
                                     [|(Range.t_to_js x1293)|])
                            | None -> ());
                           x1292))|])
    let (position_at : t -> offset:uinteger -> Position.t) =
      fun (x1297 : t) ->
        fun ~offset:(x1296 : uinteger) ->
          Position.t_of_js
            (Ojs.call (t_to_js x1297) "positionAt" [|(uinteger_to_js x1296)|])
    let (offset_at : t -> position:Position.t -> uinteger) =
      fun (x1299 : t) ->
        fun ~position:(x1298 : Position.t) ->
          uinteger_of_js
            (Ojs.call (t_to_js x1299) "offsetAt" [|(Position.t_to_js x1298)|])
    let (get_line_count : t -> uinteger) =
      fun (x1300 : t) ->
        uinteger_of_js (Ojs.get_prop_ascii (t_to_js x1300) "lineCount")
    let (create_ :
      uri:DocumentUri.t ->
        language_id:string ->
          version:integer -> content:string -> TextDocument.t)
      =
      fun ~uri:(x1301 : DocumentUri.t) ->
        fun ~language_id:(x1302 : string) ->
          fun ~version:(x1303 : integer) ->
            fun ~content:(x1304 : string) ->
              TextDocument.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocument")
                   "create"
                   [|(DocumentUri.t_to_js x1301);(Ojs.string_to_js x1302);(
                     integer_to_js x1303);(Ojs.string_to_js x1304)|])
    let (is : value:any -> bool) =
      fun ~value:(x1305 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocument") "is"
             [|(any_to_js x1305)|])
    let (apply_edits :
      document:TextDocument.t -> edits:TextEdit.t list -> string) =
      fun ~document:(x1306 : TextDocument.t) ->
        fun ~edits:(x1307 : TextEdit.t list) ->
          Ojs.string_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocument")
               "applyEdits"
               [|(TextDocument.t_to_js x1306);(Ojs.list_to_js
                                                 TextEdit.t_to_js x1307)|])
  end
