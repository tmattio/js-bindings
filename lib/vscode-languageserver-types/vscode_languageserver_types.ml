[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module DocumentUri =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.string_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : string) -> Ojs.string_to_js x1
  end
module URI =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> Ojs.string_of_js x4
    and t_to_js : t -> Ojs.t = fun (x3 : string) -> Ojs.string_to_js x3
  end
module Integer =
  struct
    type t = int
    let rec t_of_js : Ojs.t -> t = fun (x6 : Ojs.t) -> Ojs.int_of_js x6
    and t_to_js : t -> Ojs.t = fun (x5 : int) -> Ojs.int_to_js x5
    let (min_value : any) =
      any_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "integer")
           "MIN_VALUE")
    let (max_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "integer")
           "MAX_VALUE")
  end
module Uinteger =
  struct
    type t = int
    let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> Ojs.int_of_js x8
    and t_to_js : t -> Ojs.t = fun (x7 : int) -> Ojs.int_to_js x7
    let (min_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "uinteger")
           "MIN_VALUE")
    let (max_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "uinteger")
           "MAX_VALUE")
  end
module Decimal =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> Ojs.float_of_js x10
    and t_to_js : t -> Ojs.t = fun (x9 : float) -> Ojs.float_to_js x9
  end
module Position =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x12 : Ojs.t) -> x12
    and t_to_js : t -> Ojs.t = fun (x11 : Ojs.t) -> x11
    let (get_line : t -> Uinteger.t) =
      fun (x13 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x13) "line")
    let (set_line : t -> Uinteger.t -> unit) =
      fun (x14 : t) ->
        fun (x15 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x14) "line" (Uinteger.t_to_js x15)
    let (get_character : t -> Uinteger.t) =
      fun (x16 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x16) "character")
    let (set_character : t -> Uinteger.t -> unit) =
      fun (x17 : t) ->
        fun (x18 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x17) "character" (Uinteger.t_to_js x18)
    let (create_ : line:Uinteger.t -> character:Uinteger.t -> t) =
      fun ~line:(x19 : Uinteger.t) ->
        fun ~character:(x20 : Uinteger.t) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Position") "create"
               [|(Uinteger.t_to_js x19);(Uinteger.t_to_js x20)|])
    let (is : value:any -> bool) =
      fun ~value:(x21 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Position") "is"
             [|(any_to_js x21)|])
  end
module Range =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
    and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
    let (get_start : t -> Position.t) =
      fun (x24 : t) ->
        Position.t_of_js (Ojs.get_prop_ascii (t_to_js x24) "start")
    let (set_start : t -> Position.t -> unit) =
      fun (x25 : t) ->
        fun (x26 : Position.t) ->
          Ojs.set_prop_ascii (t_to_js x25) "start" (Position.t_to_js x26)
    let (get_end : t -> Position.t) =
      fun (x27 : t) ->
        Position.t_of_js (Ojs.get_prop_ascii (t_to_js x27) "end")
    let (set_end : t -> Position.t -> unit) =
      fun (x28 : t) ->
        fun (x29 : Position.t) ->
          Ojs.set_prop_ascii (t_to_js x28) "end" (Position.t_to_js x29)
    let (create_ : start:Position.t -> end_:Position.t -> t) =
      fun ~start:(x30 : Position.t) ->
        fun ~end_:(x31 : Position.t) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Range") "create"
               [|(Position.t_to_js x30);(Position.t_to_js x31)|])
    let (create_ :
      start_line:Uinteger.t ->
        start_character:Uinteger.t ->
          end_line:Uinteger.t -> end_character:Uinteger.t -> t)
      =
      fun ~start_line:(x32 : Uinteger.t) ->
        fun ~start_character:(x33 : Uinteger.t) ->
          fun ~end_line:(x34 : Uinteger.t) ->
            fun ~end_character:(x35 : Uinteger.t) ->
              t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Range") "create"
                   [|(Uinteger.t_to_js x32);(Uinteger.t_to_js x33);(Uinteger.t_to_js
                                                                    x34);(
                     Uinteger.t_to_js x35)|])
    let (is : value:any -> bool) =
      fun ~value:(x36 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Range") "is"
             [|(any_to_js x36)|])
  end
module Location =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x38 : Ojs.t) -> x38
    and t_to_js : t -> Ojs.t = fun (x37 : Ojs.t) -> x37
    let (get_uri : t -> DocumentUri.t) =
      fun (x39 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x39) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x40 : t) ->
        fun (x41 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x40) "uri" (DocumentUri.t_to_js x41)
    let (get_range : t -> Range.t) =
      fun (x42 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x42) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x43 : t) ->
        fun (x44 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x43) "range" (Range.t_to_js x44)
    let (create_ : uri:DocumentUri.t -> range:Range.t -> t) =
      fun ~uri:(x45 : DocumentUri.t) ->
        fun ~range:(x46 : Range.t) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Location") "create"
               [|(DocumentUri.t_to_js x45);(Range.t_to_js x46)|])
    let (is : value:any -> bool) =
      fun ~value:(x47 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Location") "is"
             [|(any_to_js x47)|])
  end
module LocationLink =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x49 : Ojs.t) -> x49
    and t_to_js : t -> Ojs.t = fun (x48 : Ojs.t) -> x48
    let (get_origin_selection_range : t -> Range.t) =
      fun (x50 : t) ->
        Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x50) "originSelectionRange")
    let (set_origin_selection_range : t -> Range.t -> unit) =
      fun (x51 : t) ->
        fun (x52 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x51) "originSelectionRange"
            (Range.t_to_js x52)
    let (get_target_uri : t -> DocumentUri.t) =
      fun (x53 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x53) "targetUri")
    let (set_target_uri : t -> DocumentUri.t -> unit) =
      fun (x54 : t) ->
        fun (x55 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x54) "targetUri"
            (DocumentUri.t_to_js x55)
    let (get_target_range : t -> Range.t) =
      fun (x56 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x56) "targetRange")
    let (set_target_range : t -> Range.t -> unit) =
      fun (x57 : t) ->
        fun (x58 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x57) "targetRange" (Range.t_to_js x58)
    let (get_target_selection_range : t -> Range.t) =
      fun (x59 : t) ->
        Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x59) "targetSelectionRange")
    let (set_target_selection_range : t -> Range.t -> unit) =
      fun (x60 : t) ->
        fun (x61 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x60) "targetSelectionRange"
            (Range.t_to_js x61)
    let (create_ :
      target_uri:DocumentUri.t ->
        target_range:Range.t ->
          target_selection_range:Range.t ->
            ?origin_selection_range:Range.t -> unit -> t)
      =
      fun ~target_uri:(x62 : DocumentUri.t) ->
        fun ~target_range:(x63 : Range.t) ->
          fun ~target_selection_range:(x64 : Range.t) ->
            fun ?origin_selection_range:(x65 : Range.t option) ->
              fun () ->
                t_of_js
                  (let x68 = Ojs.get_prop_ascii Ojs.global "LocationLink" in
                   Ojs.call (Ojs.get_prop_ascii x68 "create") "apply"
                     [|x68;((let x66 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x66 "push"
                                  [|(DocumentUri.t_to_js x62)|]);
                             ignore
                               (Ojs.call x66 "push" [|(Range.t_to_js x63)|]);
                             ignore
                               (Ojs.call x66 "push" [|(Range.t_to_js x64)|]);
                             (match x65 with
                              | Some x67 ->
                                  ignore
                                    (Ojs.call x66 "push"
                                       [|(Range.t_to_js x67)|])
                              | None -> ());
                             x66))|])
    let (is : value:any -> bool) =
      fun ~value:(x69 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "LocationLink") "is"
             [|(any_to_js x69)|])
  end
module Color =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x71 : Ojs.t) -> x71
    and t_to_js : t -> Ojs.t = fun (x70 : Ojs.t) -> x70
    let (get_red : t -> Decimal.t) =
      fun (x72 : t) ->
        Decimal.t_of_js (Ojs.get_prop_ascii (t_to_js x72) "red")
    let (get_green : t -> Decimal.t) =
      fun (x73 : t) ->
        Decimal.t_of_js (Ojs.get_prop_ascii (t_to_js x73) "green")
    let (get_blue : t -> Decimal.t) =
      fun (x74 : t) ->
        Decimal.t_of_js (Ojs.get_prop_ascii (t_to_js x74) "blue")
    let (get_alpha : t -> Decimal.t) =
      fun (x75 : t) ->
        Decimal.t_of_js (Ojs.get_prop_ascii (t_to_js x75) "alpha")
    let (create_ :
      red:Decimal.t ->
        green:Decimal.t -> blue:Decimal.t -> alpha:Decimal.t -> t)
      =
      fun ~red:(x76 : Decimal.t) ->
        fun ~green:(x77 : Decimal.t) ->
          fun ~blue:(x78 : Decimal.t) ->
            fun ~alpha:(x79 : Decimal.t) ->
              t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Color") "create"
                   [|(Decimal.t_to_js x76);(Decimal.t_to_js x77);(Decimal.t_to_js
                                                                    x78);(
                     Decimal.t_to_js x79)|])
    let (is : value:any -> bool) =
      fun ~value:(x80 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Color") "is"
             [|(any_to_js x80)|])
  end
module ColorInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x82 : Ojs.t) -> x82
    and t_to_js : t -> Ojs.t = fun (x81 : Ojs.t) -> x81
    let (get_range : t -> Range.t) =
      fun (x83 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x83) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x84 : t) ->
        fun (x85 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x84) "range" (Range.t_to_js x85)
    let (get_color : t -> Color.t) =
      fun (x86 : t) ->
        Color.t_of_js (Ojs.get_prop_ascii (t_to_js x86) "color")
    let (set_color : t -> Color.t -> unit) =
      fun (x87 : t) ->
        fun (x88 : Color.t) ->
          Ojs.set_prop_ascii (t_to_js x87) "color" (Color.t_to_js x88)
    let (create_ : range:Range.t -> color:Color.t -> t) =
      fun ~range:(x89 : Range.t) ->
        fun ~color:(x90 : Color.t) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "ColorInformation")
               "create" [|(Range.t_to_js x89);(Color.t_to_js x90)|])
    let (is : value:any -> bool) =
      fun ~value:(x91 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ColorInformation") "is"
             [|(any_to_js x91)|])
  end
module TextEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x93 : Ojs.t) -> x93
    and t_to_js : t -> Ojs.t = fun (x92 : Ojs.t) -> x92
    let (get_range : t -> Range.t) =
      fun (x94 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x94) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x95 : t) ->
        fun (x96 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x95) "range" (Range.t_to_js x96)
    let (get_new_text : t -> string) =
      fun (x97 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x97) "newText")
    let (set_new_text : t -> string -> unit) =
      fun (x98 : t) ->
        fun (x99 : string) ->
          Ojs.set_prop_ascii (t_to_js x98) "newText" (Ojs.string_to_js x99)
    let (replace : range:Range.t -> new_text:string -> t) =
      fun ~range:(x100 : Range.t) ->
        fun ~new_text:(x101 : string) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "replace"
               [|(Range.t_to_js x100);(Ojs.string_to_js x101)|])
    let (insert : position:Position.t -> new_text:string -> t) =
      fun ~position:(x102 : Position.t) ->
        fun ~new_text:(x103 : string) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "insert"
               [|(Position.t_to_js x102);(Ojs.string_to_js x103)|])
    let (del : range:Range.t -> t) =
      fun ~range:(x104 : Range.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "del"
             [|(Range.t_to_js x104)|])
    let (is : value:any -> bool) =
      fun ~value:(x105 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextEdit") "is"
             [|(any_to_js x105)|])
  end
module ColorPresentation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x107 : Ojs.t) -> x107
    and t_to_js : t -> Ojs.t = fun (x106 : Ojs.t) -> x106
    let (get_label : t -> string) =
      fun (x108 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x108) "label")
    let (set_label : t -> string -> unit) =
      fun (x109 : t) ->
        fun (x110 : string) ->
          Ojs.set_prop_ascii (t_to_js x109) "label" (Ojs.string_to_js x110)
    let (get_text_edit : t -> TextEdit.t) =
      fun (x111 : t) ->
        TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x111) "textEdit")
    let (set_text_edit : t -> TextEdit.t -> unit) =
      fun (x112 : t) ->
        fun (x113 : TextEdit.t) ->
          Ojs.set_prop_ascii (t_to_js x112) "textEdit"
            (TextEdit.t_to_js x113)
    let (get_additional_text_edits : t -> TextEdit.t list) =
      fun (x114 : t) ->
        Ojs.list_of_js TextEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x114) "additionalTextEdits")
    let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
      fun (x116 : t) ->
        fun (x117 : TextEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x116) "additionalTextEdits"
            (Ojs.list_to_js TextEdit.t_to_js x117)
    let (create_ :
      label:string ->
        ?text_edit:TextEdit.t ->
          ?additional_text_edits:TextEdit.t list -> unit -> t)
      =
      fun ~label:(x119 : string) ->
        fun ?text_edit:(x120 : TextEdit.t option) ->
          fun ?additional_text_edits:(x121 : TextEdit.t list option) ->
            fun () ->
              t_of_js
                (let x126 = Ojs.get_prop_ascii Ojs.global "ColorPresentation" in
                 Ojs.call (Ojs.get_prop_ascii x126 "create") "apply"
                   [|x126;((let x122 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x122 "push"
                                 [|(Ojs.string_to_js x119)|]);
                            (match x120 with
                             | Some x125 ->
                                 ignore
                                   (Ojs.call x122 "push"
                                      [|(TextEdit.t_to_js x125)|])
                             | None -> ());
                            (match x121 with
                             | Some x123 ->
                                 ignore
                                   (Ojs.call x122 "push"
                                      [|(Ojs.list_to_js TextEdit.t_to_js x123)|])
                             | None -> ());
                            x122))|])
    let (is : value:any -> bool) =
      fun ~value:(x127 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ColorPresentation") "is"
             [|(any_to_js x127)|])
  end
module FoldingRangeKind =
  struct
    type t = [ `Comment  | `Imports  | `Region ]
    let rec t_of_js : Ojs.t -> t =
      fun (x129 : Ojs.t) ->
        let x130 = x129 in
        match Ojs.string_of_js x130 with
        | "comment" -> `Comment
        | "imports" -> `Imports
        | "region" -> `Region
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x128 : [ `Comment  | `Imports  | `Region ]) ->
        match x128 with
        | `Comment -> Ojs.string_to_js "comment"
        | `Imports -> Ojs.string_to_js "imports"
        | `Region -> Ojs.string_to_js "region"
  end
module FoldingRange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x132 : Ojs.t) -> x132
    and t_to_js : t -> Ojs.t = fun (x131 : Ojs.t) -> x131
    let (get_start_line : t -> Uinteger.t) =
      fun (x133 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x133) "startLine")
    let (set_start_line : t -> Uinteger.t -> unit) =
      fun (x134 : t) ->
        fun (x135 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x134) "startLine"
            (Uinteger.t_to_js x135)
    let (get_start_character : t -> Uinteger.t) =
      fun (x136 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x136) "startCharacter")
    let (set_start_character : t -> Uinteger.t -> unit) =
      fun (x137 : t) ->
        fun (x138 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x137) "startCharacter"
            (Uinteger.t_to_js x138)
    let (get_end_line : t -> Uinteger.t) =
      fun (x139 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x139) "endLine")
    let (set_end_line : t -> Uinteger.t -> unit) =
      fun (x140 : t) ->
        fun (x141 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x140) "endLine" (Uinteger.t_to_js x141)
    let (get_end_character : t -> Uinteger.t) =
      fun (x142 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x142) "endCharacter")
    let (set_end_character : t -> Uinteger.t -> unit) =
      fun (x143 : t) ->
        fun (x144 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x143) "endCharacter"
            (Uinteger.t_to_js x144)
    let (get_kind : t -> string) =
      fun (x145 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x145) "kind")
    let (set_kind : t -> string -> unit) =
      fun (x146 : t) ->
        fun (x147 : string) ->
          Ojs.set_prop_ascii (t_to_js x146) "kind" (Ojs.string_to_js x147)
    let (create_ :
      start_line:Uinteger.t ->
        end_line:Uinteger.t ->
          ?start_character:Uinteger.t ->
            ?end_character:Uinteger.t -> ?kind:string -> unit -> t)
      =
      fun ~start_line:(x148 : Uinteger.t) ->
        fun ~end_line:(x149 : Uinteger.t) ->
          fun ?start_character:(x150 : Uinteger.t option) ->
            fun ?end_character:(x151 : Uinteger.t option) ->
              fun ?kind:(x152 : string option) ->
                fun () ->
                  t_of_js
                    (let x157 = Ojs.get_prop_ascii Ojs.global "FoldingRange" in
                     Ojs.call (Ojs.get_prop_ascii x157 "create") "apply"
                       [|x157;((let x153 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x153 "push"
                                     [|(Uinteger.t_to_js x148)|]);
                                ignore
                                  (Ojs.call x153 "push"
                                     [|(Uinteger.t_to_js x149)|]);
                                (match x150 with
                                 | Some x156 ->
                                     ignore
                                       (Ojs.call x153 "push"
                                          [|(Uinteger.t_to_js x156)|])
                                 | None -> ());
                                (match x151 with
                                 | Some x155 ->
                                     ignore
                                       (Ojs.call x153 "push"
                                          [|(Uinteger.t_to_js x155)|])
                                 | None -> ());
                                (match x152 with
                                 | Some x154 ->
                                     ignore
                                       (Ojs.call x153 "push"
                                          [|(Ojs.string_to_js x154)|])
                                 | None -> ());
                                x153))|])
    let (is : value:any -> bool) =
      fun ~value:(x158 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "FoldingRange") "is"
             [|(any_to_js x158)|])
  end
module DiagnosticRelatedInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x160 : Ojs.t) -> x160
    and t_to_js : t -> Ojs.t = fun (x159 : Ojs.t) -> x159
    let (get_location : t -> Location.t) =
      fun (x161 : t) ->
        Location.t_of_js (Ojs.get_prop_ascii (t_to_js x161) "location")
    let (set_location : t -> Location.t -> unit) =
      fun (x162 : t) ->
        fun (x163 : Location.t) ->
          Ojs.set_prop_ascii (t_to_js x162) "location"
            (Location.t_to_js x163)
    let (get_message : t -> string) =
      fun (x164 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x164) "message")
    let (set_message : t -> string -> unit) =
      fun (x165 : t) ->
        fun (x166 : string) ->
          Ojs.set_prop_ascii (t_to_js x165) "message" (Ojs.string_to_js x166)
    let (create_ : location:Location.t -> message:string -> t) =
      fun ~location:(x167 : Location.t) ->
        fun ~message:(x168 : string) ->
          t_of_js
            (Ojs.call
               (Ojs.get_prop_ascii Ojs.global "DiagnosticRelatedInformation")
               "create" [|(Location.t_to_js x167);(Ojs.string_to_js x168)|])
    let (is : value:any -> bool) =
      fun ~value:(x169 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "DiagnosticRelatedInformation")
             "is" [|(any_to_js x169)|])
  end
module DiagnosticSeverity =
  struct
    type t = [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x171 : Ojs.t) ->
        let x172 = x171 in
        match Ojs.int_of_js x172 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x170 : [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4 ]) ->
        match x170 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
        | `L_n_4 -> Ojs.int_to_js 4
    let (error : [ `L_n_1 ]) =
      let x173 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Error" in
      match Ojs.int_of_js x173 with | 1 -> `L_n_1 | _ -> assert false
    let (warning : [ `L_n_2 ]) =
      let x174 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Warning" in
      match Ojs.int_of_js x174 with | 2 -> `L_n_2 | _ -> assert false
    let (information : [ `L_n_3 ]) =
      let x175 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Information" in
      match Ojs.int_of_js x175 with | 3 -> `L_n_3 | _ -> assert false
    let (hint : [ `L_n_4 ]) =
      let x176 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DiagnosticSeverity") "Hint" in
      match Ojs.int_of_js x176 with | 4 -> `L_n_4 | _ -> assert false
  end
module DiagnosticTag =
  struct
    type t = [ `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x178 : Ojs.t) ->
        let x179 = x178 in
        match Ojs.int_of_js x179 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x177 : [ `L_n_1  | `L_n_2 ]) ->
        match x177 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (unnecessary : [ `L_n_1 ]) =
      let x180 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DiagnosticTag")
          "Unnecessary" in
      match Ojs.int_of_js x180 with | 1 -> `L_n_1 | _ -> assert false
    let (deprecated : [ `L_n_2 ]) =
      let x181 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DiagnosticTag")
          "Deprecated" in
      match Ojs.int_of_js x181 with | 2 -> `L_n_2 | _ -> assert false
  end
module CodeDescription =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x183 : Ojs.t) -> x183
    and t_to_js : t -> Ojs.t = fun (x182 : Ojs.t) -> x182
    let (get_href : t -> URI.t) =
      fun (x184 : t) ->
        URI.t_of_js (Ojs.get_prop_ascii (t_to_js x184) "href")
    let (set_href : t -> URI.t -> unit) =
      fun (x185 : t) ->
        fun (x186 : URI.t) ->
          Ojs.set_prop_ascii (t_to_js x185) "href" (URI.t_to_js x186)
    let (is : value:t or_null_or_undefined -> bool) =
      fun ~value:(x187 : t or_null_or_undefined) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeDescription") "is"
             [|(or_null_or_undefined_to_js t_to_js x187)|])
  end
module Diagnostic =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x190 : Ojs.t) -> x190
    and t_to_js : t -> Ojs.t = fun (x189 : Ojs.t) -> x189
    let (get_range : t -> Range.t) =
      fun (x191 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x191) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x192 : t) ->
        fun (x193 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x192) "range" (Range.t_to_js x193)
    let (get_severity : t -> DiagnosticSeverity.t) =
      fun (x194 : t) ->
        DiagnosticSeverity.t_of_js
          (Ojs.get_prop_ascii (t_to_js x194) "severity")
    let (set_severity : t -> DiagnosticSeverity.t -> unit) =
      fun (x195 : t) ->
        fun (x196 : DiagnosticSeverity.t) ->
          Ojs.set_prop_ascii (t_to_js x195) "severity"
            (DiagnosticSeverity.t_to_js x196)
    let (get_code : t -> Integer.t or_string) =
      fun (x197 : t) ->
        or_string_of_js Integer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x197) "code")
    let (set_code : t -> Integer.t or_string -> unit) =
      fun (x199 : t) ->
        fun (x200 : Integer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x199) "code"
            (or_string_to_js Integer.t_to_js x200)
    let (get_code_description : t -> CodeDescription.t) =
      fun (x202 : t) ->
        CodeDescription.t_of_js
          (Ojs.get_prop_ascii (t_to_js x202) "codeDescription")
    let (set_code_description : t -> CodeDescription.t -> unit) =
      fun (x203 : t) ->
        fun (x204 : CodeDescription.t) ->
          Ojs.set_prop_ascii (t_to_js x203) "codeDescription"
            (CodeDescription.t_to_js x204)
    let (get_source : t -> string) =
      fun (x205 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x205) "source")
    let (set_source : t -> string -> unit) =
      fun (x206 : t) ->
        fun (x207 : string) ->
          Ojs.set_prop_ascii (t_to_js x206) "source" (Ojs.string_to_js x207)
    let (get_message : t -> string) =
      fun (x208 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x208) "message")
    let (set_message : t -> string -> unit) =
      fun (x209 : t) ->
        fun (x210 : string) ->
          Ojs.set_prop_ascii (t_to_js x209) "message" (Ojs.string_to_js x210)
    let (get_tags : t -> DiagnosticTag.t list) =
      fun (x211 : t) ->
        Ojs.list_of_js DiagnosticTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x211) "tags")
    let (set_tags : t -> DiagnosticTag.t list -> unit) =
      fun (x213 : t) ->
        fun (x214 : DiagnosticTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x213) "tags"
            (Ojs.list_to_js DiagnosticTag.t_to_js x214)
    let (get_related_information : t -> DiagnosticRelatedInformation.t list)
      =
      fun (x216 : t) ->
        Ojs.list_of_js DiagnosticRelatedInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x216) "relatedInformation")
    let (set_related_information :
      t -> DiagnosticRelatedInformation.t list -> unit) =
      fun (x218 : t) ->
        fun (x219 : DiagnosticRelatedInformation.t list) ->
          Ojs.set_prop_ascii (t_to_js x218) "relatedInformation"
            (Ojs.list_to_js DiagnosticRelatedInformation.t_to_js x219)
    let (get_data : t -> unknown) =
      fun (x221 : t) ->
        unknown_of_js (Ojs.get_prop_ascii (t_to_js x221) "data")
    let (set_data : t -> unknown -> unit) =
      fun (x222 : t) ->
        fun (x223 : unknown) ->
          Ojs.set_prop_ascii (t_to_js x222) "data" (unknown_to_js x223)
    let (create_ :
      range:Range.t ->
        message:string ->
          ?severity:DiagnosticSeverity.t ->
            ?code:Integer.t or_string ->
              ?source:string ->
                ?related_information:DiagnosticRelatedInformation.t list ->
                  unit -> t)
      =
      fun ~range:(x224 : Range.t) ->
        fun ~message:(x225 : string) ->
          fun ?severity:(x226 : DiagnosticSeverity.t option) ->
            fun ?code:(x227 : Integer.t or_string option) ->
              fun ?source:(x228 : string option) ->
                fun
                  ?related_information:(x229 :
                                         DiagnosticRelatedInformation.t list
                                           option)
                  ->
                  fun () ->
                    t_of_js
                      (let x237 = Ojs.get_prop_ascii Ojs.global "Diagnostic" in
                       Ojs.call (Ojs.get_prop_ascii x237 "create") "apply"
                         [|x237;((let x230 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x230 "push"
                                       [|(Range.t_to_js x224)|]);
                                  ignore
                                    (Ojs.call x230 "push"
                                       [|(Ojs.string_to_js x225)|]);
                                  (match x226 with
                                   | Some x236 ->
                                       ignore
                                         (Ojs.call x230 "push"
                                            [|(DiagnosticSeverity.t_to_js
                                                 x236)|])
                                   | None -> ());
                                  (match x227 with
                                   | Some x234 ->
                                       ignore
                                         (Ojs.call x230 "push"
                                            [|(or_string_to_js
                                                 Integer.t_to_js x234)|])
                                   | None -> ());
                                  (match x228 with
                                   | Some x233 ->
                                       ignore
                                         (Ojs.call x230 "push"
                                            [|(Ojs.string_to_js x233)|])
                                   | None -> ());
                                  (match x229 with
                                   | Some x231 ->
                                       ignore
                                         (Ojs.call x230 "push"
                                            [|(Ojs.list_to_js
                                                 DiagnosticRelatedInformation.t_to_js
                                                 x231)|])
                                   | None -> ());
                                  x230))|])
    let (is : value:any -> bool) =
      fun ~value:(x238 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Diagnostic") "is"
             [|(any_to_js x238)|])
  end
module Command =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x240 : Ojs.t) -> x240
    and t_to_js : t -> Ojs.t = fun (x239 : Ojs.t) -> x239
    let (get_title : t -> string) =
      fun (x241 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x241) "title")
    let (set_title : t -> string -> unit) =
      fun (x242 : t) ->
        fun (x243 : string) ->
          Ojs.set_prop_ascii (t_to_js x242) "title" (Ojs.string_to_js x243)
    let (get_command : t -> string) =
      fun (x244 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x244) "command")
    let (set_command : t -> string -> unit) =
      fun (x245 : t) ->
        fun (x246 : string) ->
          Ojs.set_prop_ascii (t_to_js x245) "command" (Ojs.string_to_js x246)
    let (get_arguments : t -> any list) =
      fun (x247 : t) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (t_to_js x247) "arguments")
    let (set_arguments : t -> any list -> unit) =
      fun (x249 : t) ->
        fun (x250 : any list) ->
          Ojs.set_prop_ascii (t_to_js x249) "arguments"
            (Ojs.list_to_js any_to_js x250)
    let (create_ : title:string -> command:string -> args:any list -> t) =
      fun ~title:(x252 : string) ->
        fun ~command:(x253 : string) ->
          fun ~args:(x254 : any list) ->
            t_of_js
              (let x257 = Ojs.get_prop_ascii Ojs.global "Command" in
               Ojs.call (Ojs.get_prop_ascii x257 "create") "apply"
                 [|x257;((let x255 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x255 "push" [|(Ojs.string_to_js x252)|]);
                          ignore
                            (Ojs.call x255 "push" [|(Ojs.string_to_js x253)|]);
                          List.iter
                            (fun (x256 : any) ->
                               ignore
                                 (Ojs.call x255 "push" [|(any_to_js x256)|]))
                            x254;
                          x255))|])
    let (is : value:any -> bool) =
      fun ~value:(x258 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Command") "is"
             [|(any_to_js x258)|])
  end
module ChangeAnnotation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x260 : Ojs.t) -> x260
    and t_to_js : t -> Ojs.t = fun (x259 : Ojs.t) -> x259
    let (get_label : t -> string) =
      fun (x261 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x261) "label")
    let (set_label : t -> string -> unit) =
      fun (x262 : t) ->
        fun (x263 : string) ->
          Ojs.set_prop_ascii (t_to_js x262) "label" (Ojs.string_to_js x263)
    let (get_needs_confirmation : t -> bool) =
      fun (x264 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x264) "needsConfirmation")
    let (set_needs_confirmation : t -> bool -> unit) =
      fun (x265 : t) ->
        fun (x266 : bool) ->
          Ojs.set_prop_ascii (t_to_js x265) "needsConfirmation"
            (Ojs.bool_to_js x266)
    let (get_description : t -> string) =
      fun (x267 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x267) "description")
    let (set_description : t -> string -> unit) =
      fun (x268 : t) ->
        fun (x269 : string) ->
          Ojs.set_prop_ascii (t_to_js x268) "description"
            (Ojs.string_to_js x269)
    let (create_ :
      label:string ->
        ?needs_confirmation:bool -> ?description:string -> unit -> t)
      =
      fun ~label:(x270 : string) ->
        fun ?needs_confirmation:(x271 : bool option) ->
          fun ?description:(x272 : string option) ->
            fun () ->
              t_of_js
                (let x276 = Ojs.get_prop_ascii Ojs.global "ChangeAnnotation" in
                 Ojs.call (Ojs.get_prop_ascii x276 "create") "apply"
                   [|x276;((let x273 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x273 "push"
                                 [|(Ojs.string_to_js x270)|]);
                            (match x271 with
                             | Some x275 ->
                                 ignore
                                   (Ojs.call x273 "push"
                                      [|(Ojs.bool_to_js x275)|])
                             | None -> ());
                            (match x272 with
                             | Some x274 ->
                                 ignore
                                   (Ojs.call x273 "push"
                                      [|(Ojs.string_to_js x274)|])
                             | None -> ());
                            x273))|])
    let (is : value:any -> bool) =
      fun ~value:(x277 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ChangeAnnotation") "is"
             [|(any_to_js x277)|])
  end
module ChangeAnnotationIdentifier =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x279 : Ojs.t) -> Ojs.string_of_js x279
    and t_to_js : t -> Ojs.t = fun (x278 : string) -> Ojs.string_to_js x278
    let (is : value:any -> bool) =
      fun ~value:(x280 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "ChangeAnnotationIdentifier")
             "is" [|(any_to_js x280)|])
  end
module AnnotatedTextEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x282 : Ojs.t) -> x282
    and t_to_js : t -> Ojs.t = fun (x281 : Ojs.t) -> x281
    let (get_annotation_id : t -> ChangeAnnotationIdentifier.t) =
      fun (x283 : t) ->
        ChangeAnnotationIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x283) "annotationId")
    let (set_annotation_id : t -> ChangeAnnotationIdentifier.t -> unit) =
      fun (x284 : t) ->
        fun (x285 : ChangeAnnotationIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x284) "annotationId"
            (ChangeAnnotationIdentifier.t_to_js x285)
    include struct include TextEdit end
    let (replace :
      range:Range.t ->
        new_text:string -> annotation:ChangeAnnotationIdentifier.t -> t)
      =
      fun ~range:(x286 : Range.t) ->
        fun ~new_text:(x287 : string) ->
          fun ~annotation:(x288 : ChangeAnnotationIdentifier.t) ->
            t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit")
                 "replace"
                 [|(Range.t_to_js x286);(Ojs.string_to_js x287);(ChangeAnnotationIdentifier.t_to_js
                                                                   x288)|])
    let (insert :
      position:Position.t ->
        new_text:string -> annotation:ChangeAnnotationIdentifier.t -> t)
      =
      fun ~position:(x289 : Position.t) ->
        fun ~new_text:(x290 : string) ->
          fun ~annotation:(x291 : ChangeAnnotationIdentifier.t) ->
            t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit")
                 "insert"
                 [|(Position.t_to_js x289);(Ojs.string_to_js x290);(ChangeAnnotationIdentifier.t_to_js
                                                                    x291)|])
    let (del : range:Range.t -> annotation:ChangeAnnotationIdentifier.t -> t)
      =
      fun ~range:(x292 : Range.t) ->
        fun ~annotation:(x293 : ChangeAnnotationIdentifier.t) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit")
               "del"
               [|(Range.t_to_js x292);(ChangeAnnotationIdentifier.t_to_js
                                         x293)|])
    let (is : value:any -> bool) =
      fun ~value:(x294 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "AnnotatedTextEdit") "is"
             [|(any_to_js x294)|])
  end
module TextDocumentIdentifier =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x296 : Ojs.t) -> x296
    and t_to_js : t -> Ojs.t = fun (x295 : Ojs.t) -> x295
    let (get_uri : t -> DocumentUri.t) =
      fun (x297 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x297) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x298 : t) ->
        fun (x299 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x298) "uri" (DocumentUri.t_to_js x299)
    let (create_ : uri:DocumentUri.t -> t) =
      fun ~uri:(x300 : DocumentUri.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentIdentifier")
             "create" [|(DocumentUri.t_to_js x300)|])
    let (is : value:any -> bool) =
      fun ~value:(x301 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentIdentifier")
             "is" [|(any_to_js x301)|])
  end
module VersionedTextDocumentIdentifier =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x303 : Ojs.t) -> x303
    and t_to_js : t -> Ojs.t = fun (x302 : Ojs.t) -> x302
    let (get_version : t -> Integer.t) =
      fun (x304 : t) ->
        Integer.t_of_js (Ojs.get_prop_ascii (t_to_js x304) "version")
    let (set_version : t -> Integer.t -> unit) =
      fun (x305 : t) ->
        fun (x306 : Integer.t) ->
          Ojs.set_prop_ascii (t_to_js x305) "version" (Integer.t_to_js x306)
    include struct include TextDocumentIdentifier end
    let (create_ : uri:DocumentUri.t -> version:Integer.t -> t) =
      fun ~uri:(x307 : DocumentUri.t) ->
        fun ~version:(x308 : Integer.t) ->
          t_of_js
            (Ojs.call
               (Ojs.get_prop_ascii Ojs.global
                  "VersionedTextDocumentIdentifier") "create"
               [|(DocumentUri.t_to_js x307);(Integer.t_to_js x308)|])
    let (is : value:any -> bool) =
      fun ~value:(x309 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "VersionedTextDocumentIdentifier")
             "is" [|(any_to_js x309)|])
  end
module OptionalVersionedTextDocumentIdentifier =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x311 : Ojs.t) -> x311
    and t_to_js : t -> Ojs.t = fun (x310 : Ojs.t) -> x310
    let (get_version : t -> Integer.t or_null) =
      fun (x312 : t) ->
        or_null_of_js Integer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x312) "version")
    let (set_version : t -> Integer.t or_null -> unit) =
      fun (x314 : t) ->
        fun (x315 : Integer.t or_null) ->
          Ojs.set_prop_ascii (t_to_js x314) "version"
            (or_null_to_js Integer.t_to_js x315)
    include struct include TextDocumentIdentifier end
    let (create_ : uri:DocumentUri.t -> version:Integer.t or_null -> t) =
      fun ~uri:(x317 : DocumentUri.t) ->
        fun ~version:(x318 : Integer.t or_null) ->
          t_of_js
            (Ojs.call
               (Ojs.get_prop_ascii Ojs.global
                  "OptionalVersionedTextDocumentIdentifier") "create"
               [|(DocumentUri.t_to_js x317);(or_null_to_js Integer.t_to_js
                                               x318)|])
    let (is : value:any -> bool) =
      fun ~value:(x320 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global
                "OptionalVersionedTextDocumentIdentifier") "is"
             [|(any_to_js x320)|])
  end
module TextDocumentEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x322 : Ojs.t) -> x322
    and t_to_js : t -> Ojs.t = fun (x321 : Ojs.t) -> x321
    let (get_text_document : t -> OptionalVersionedTextDocumentIdentifier.t)
      =
      fun (x323 : t) ->
        OptionalVersionedTextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x323) "textDocument")
    let (set_text_document :
      t -> OptionalVersionedTextDocumentIdentifier.t -> unit) =
      fun (x324 : t) ->
        fun (x325 : OptionalVersionedTextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x324) "textDocument"
            (OptionalVersionedTextDocumentIdentifier.t_to_js x325)
    let (get_edits : t -> (AnnotatedTextEdit.t, TextEdit.t) union2 list) =
      fun (x326 : t) ->
        Ojs.list_of_js
          (fun (x327 : Ojs.t) ->
             union2_of_js AnnotatedTextEdit.t_of_js TextEdit.t_of_js x327)
          (Ojs.get_prop_ascii (t_to_js x326) "edits")
    let (set_edits :
      t -> (AnnotatedTextEdit.t, TextEdit.t) union2 list -> unit) =
      fun (x330 : t) ->
        fun (x331 : (AnnotatedTextEdit.t, TextEdit.t) union2 list) ->
          Ojs.set_prop_ascii (t_to_js x330) "edits"
            (Ojs.list_to_js
               (fun (x332 : (AnnotatedTextEdit.t, TextEdit.t) union2) ->
                  union2_to_js AnnotatedTextEdit.t_to_js TextEdit.t_to_js
                    x332) x331)
    let (create_ :
      text_document:OptionalVersionedTextDocumentIdentifier.t ->
        edits:(AnnotatedTextEdit.t, TextEdit.t) union2 list -> t)
      =
      fun ~text_document:(x335 : OptionalVersionedTextDocumentIdentifier.t)
        ->
        fun ~edits:(x336 : (AnnotatedTextEdit.t, TextEdit.t) union2 list) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentEdit")
               "create"
               [|(OptionalVersionedTextDocumentIdentifier.t_to_js x335);(
                 Ojs.list_to_js
                   (fun (x337 : (AnnotatedTextEdit.t, TextEdit.t) union2) ->
                      union2_to_js AnnotatedTextEdit.t_to_js TextEdit.t_to_js
                        x337) x336)|])
    let (is : value:any -> bool) =
      fun ~value:(x340 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentEdit") "is"
             [|(any_to_js x340)|])
  end
module ResourceOperation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x342 : Ojs.t) -> x342
    and t_to_js : t -> Ojs.t = fun (x341 : Ojs.t) -> x341
    let (get_kind : t -> string) =
      fun (x343 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x343) "kind")
    let (set_kind : t -> string -> unit) =
      fun (x344 : t) ->
        fun (x345 : string) ->
          Ojs.set_prop_ascii (t_to_js x344) "kind" (Ojs.string_to_js x345)
    let (get_annotation_id : t -> ChangeAnnotationIdentifier.t) =
      fun (x346 : t) ->
        ChangeAnnotationIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x346) "annotationId")
    let (set_annotation_id : t -> ChangeAnnotationIdentifier.t -> unit) =
      fun (x347 : t) ->
        fun (x348 : ChangeAnnotationIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x347) "annotationId"
            (ChangeAnnotationIdentifier.t_to_js x348)
  end
module CreateFileOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x350 : Ojs.t) -> x350
    and t_to_js : t -> Ojs.t = fun (x349 : Ojs.t) -> x349
    let (get_overwrite : t -> bool) =
      fun (x351 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x351) "overwrite")
    let (set_overwrite : t -> bool -> unit) =
      fun (x352 : t) ->
        fun (x353 : bool) ->
          Ojs.set_prop_ascii (t_to_js x352) "overwrite" (Ojs.bool_to_js x353)
    let (get_ignore_if_exists : t -> bool) =
      fun (x354 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x354) "ignoreIfExists")
    let (set_ignore_if_exists : t -> bool -> unit) =
      fun (x355 : t) ->
        fun (x356 : bool) ->
          Ojs.set_prop_ascii (t_to_js x355) "ignoreIfExists"
            (Ojs.bool_to_js x356)
  end
module CreateFile =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x358 : Ojs.t) -> x358
    and t_to_js : t -> Ojs.t = fun (x357 : Ojs.t) -> x357
    let (get_kind : t -> [ `L_s4_create ]) =
      fun (x359 : t) ->
        let x360 = Ojs.get_prop_ascii (t_to_js x359) "kind" in
        match Ojs.string_of_js x360 with
        | "create" -> `L_s4_create
        | _ -> assert false
    let (set_kind : t -> [ `L_s4_create ] -> unit) =
      fun (x361 : t) ->
        fun (x362 : [ `L_s4_create ]) ->
          Ojs.set_prop_ascii (t_to_js x361) "kind"
            (match x362 with | `L_s4_create -> Ojs.string_to_js "LS4Create")
    let (get_uri : t -> DocumentUri.t) =
      fun (x363 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x363) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x364 : t) ->
        fun (x365 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x364) "uri" (DocumentUri.t_to_js x365)
    let (get_options : t -> CreateFileOptions.t) =
      fun (x366 : t) ->
        CreateFileOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x366) "options")
    let (set_options : t -> CreateFileOptions.t -> unit) =
      fun (x367 : t) ->
        fun (x368 : CreateFileOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x367) "options"
            (CreateFileOptions.t_to_js x368)
    include struct include ResourceOperation end
    let (create_ :
      uri:DocumentUri.t ->
        ?options:CreateFileOptions.t ->
          ?annotation:ChangeAnnotationIdentifier.t -> unit -> t)
      =
      fun ~uri:(x369 : DocumentUri.t) ->
        fun ?options:(x370 : CreateFileOptions.t option) ->
          fun ?annotation:(x371 : ChangeAnnotationIdentifier.t option) ->
            fun () ->
              t_of_js
                (let x375 = Ojs.get_prop_ascii Ojs.global "CreateFile" in
                 Ojs.call (Ojs.get_prop_ascii x375 "create") "apply"
                   [|x375;((let x372 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x372 "push"
                                 [|(DocumentUri.t_to_js x369)|]);
                            (match x370 with
                             | Some x374 ->
                                 ignore
                                   (Ojs.call x372 "push"
                                      [|(CreateFileOptions.t_to_js x374)|])
                             | None -> ());
                            (match x371 with
                             | Some x373 ->
                                 ignore
                                   (Ojs.call x372 "push"
                                      [|(ChangeAnnotationIdentifier.t_to_js
                                           x373)|])
                             | None -> ());
                            x372))|])
    let (is : value:any -> bool) =
      fun ~value:(x376 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CreateFile") "is"
             [|(any_to_js x376)|])
  end
module RenameFileOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x378 : Ojs.t) -> x378
    and t_to_js : t -> Ojs.t = fun (x377 : Ojs.t) -> x377
    let (get_overwrite : t -> bool) =
      fun (x379 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x379) "overwrite")
    let (set_overwrite : t -> bool -> unit) =
      fun (x380 : t) ->
        fun (x381 : bool) ->
          Ojs.set_prop_ascii (t_to_js x380) "overwrite" (Ojs.bool_to_js x381)
    let (get_ignore_if_exists : t -> bool) =
      fun (x382 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x382) "ignoreIfExists")
    let (set_ignore_if_exists : t -> bool -> unit) =
      fun (x383 : t) ->
        fun (x384 : bool) ->
          Ojs.set_prop_ascii (t_to_js x383) "ignoreIfExists"
            (Ojs.bool_to_js x384)
  end
module RenameFile =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x386 : Ojs.t) -> x386
    and t_to_js : t -> Ojs.t = fun (x385 : Ojs.t) -> x385
    let (get_kind : t -> [ `L_s32_rename ]) =
      fun (x387 : t) ->
        let x388 = Ojs.get_prop_ascii (t_to_js x387) "kind" in
        match Ojs.string_of_js x388 with
        | "rename" -> `L_s32_rename
        | _ -> assert false
    let (set_kind : t -> [ `L_s32_rename ] -> unit) =
      fun (x389 : t) ->
        fun (x390 : [ `L_s32_rename ]) ->
          Ojs.set_prop_ascii (t_to_js x389) "kind"
            (match x390 with | `L_s32_rename -> Ojs.string_to_js "LS32Rename")
    let (get_old_uri : t -> DocumentUri.t) =
      fun (x391 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x391) "oldUri")
    let (set_old_uri : t -> DocumentUri.t -> unit) =
      fun (x392 : t) ->
        fun (x393 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x392) "oldUri"
            (DocumentUri.t_to_js x393)
    let (get_new_uri : t -> DocumentUri.t) =
      fun (x394 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x394) "newUri")
    let (set_new_uri : t -> DocumentUri.t -> unit) =
      fun (x395 : t) ->
        fun (x396 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x395) "newUri"
            (DocumentUri.t_to_js x396)
    let (get_options : t -> RenameFileOptions.t) =
      fun (x397 : t) ->
        RenameFileOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x397) "options")
    let (set_options : t -> RenameFileOptions.t -> unit) =
      fun (x398 : t) ->
        fun (x399 : RenameFileOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x398) "options"
            (RenameFileOptions.t_to_js x399)
    include struct include ResourceOperation end
    let (create_ :
      old_uri:DocumentUri.t ->
        new_uri:DocumentUri.t ->
          ?options:RenameFileOptions.t ->
            ?annotation:ChangeAnnotationIdentifier.t -> unit -> t)
      =
      fun ~old_uri:(x400 : DocumentUri.t) ->
        fun ~new_uri:(x401 : DocumentUri.t) ->
          fun ?options:(x402 : RenameFileOptions.t option) ->
            fun ?annotation:(x403 : ChangeAnnotationIdentifier.t option) ->
              fun () ->
                t_of_js
                  (let x407 = Ojs.get_prop_ascii Ojs.global "RenameFile" in
                   Ojs.call (Ojs.get_prop_ascii x407 "create") "apply"
                     [|x407;((let x404 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x404 "push"
                                   [|(DocumentUri.t_to_js x400)|]);
                              ignore
                                (Ojs.call x404 "push"
                                   [|(DocumentUri.t_to_js x401)|]);
                              (match x402 with
                               | Some x406 ->
                                   ignore
                                     (Ojs.call x404 "push"
                                        [|(RenameFileOptions.t_to_js x406)|])
                               | None -> ());
                              (match x403 with
                               | Some x405 ->
                                   ignore
                                     (Ojs.call x404 "push"
                                        [|(ChangeAnnotationIdentifier.t_to_js
                                             x405)|])
                               | None -> ());
                              x404))|])
    let (is : value:any -> bool) =
      fun ~value:(x408 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RenameFile") "is"
             [|(any_to_js x408)|])
  end
module DeleteFileOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x410 : Ojs.t) -> x410
    and t_to_js : t -> Ojs.t = fun (x409 : Ojs.t) -> x409
    let (get_recursive : t -> bool) =
      fun (x411 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x411) "recursive")
    let (set_recursive : t -> bool -> unit) =
      fun (x412 : t) ->
        fun (x413 : bool) ->
          Ojs.set_prop_ascii (t_to_js x412) "recursive" (Ojs.bool_to_js x413)
    let (get_ignore_if_not_exists : t -> bool) =
      fun (x414 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x414) "ignoreIfNotExists")
    let (set_ignore_if_not_exists : t -> bool -> unit) =
      fun (x415 : t) ->
        fun (x416 : bool) ->
          Ojs.set_prop_ascii (t_to_js x415) "ignoreIfNotExists"
            (Ojs.bool_to_js x416)
  end
module DeleteFile =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x418 : Ojs.t) -> x418
    and t_to_js : t -> Ojs.t = fun (x417 : Ojs.t) -> x417
    let (get_kind : t -> [ `L_s8_delete ]) =
      fun (x419 : t) ->
        let x420 = Ojs.get_prop_ascii (t_to_js x419) "kind" in
        match Ojs.string_of_js x420 with
        | "delete" -> `L_s8_delete
        | _ -> assert false
    let (set_kind : t -> [ `L_s8_delete ] -> unit) =
      fun (x421 : t) ->
        fun (x422 : [ `L_s8_delete ]) ->
          Ojs.set_prop_ascii (t_to_js x421) "kind"
            (match x422 with | `L_s8_delete -> Ojs.string_to_js "LS8Delete")
    let (get_uri : t -> DocumentUri.t) =
      fun (x423 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x423) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x424 : t) ->
        fun (x425 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x424) "uri" (DocumentUri.t_to_js x425)
    let (get_options : t -> DeleteFileOptions.t) =
      fun (x426 : t) ->
        DeleteFileOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x426) "options")
    let (set_options : t -> DeleteFileOptions.t -> unit) =
      fun (x427 : t) ->
        fun (x428 : DeleteFileOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x427) "options"
            (DeleteFileOptions.t_to_js x428)
    include struct include ResourceOperation end
    let (create_ :
      uri:DocumentUri.t ->
        ?options:DeleteFileOptions.t ->
          ?annotation:ChangeAnnotationIdentifier.t -> unit -> t)
      =
      fun ~uri:(x429 : DocumentUri.t) ->
        fun ?options:(x430 : DeleteFileOptions.t option) ->
          fun ?annotation:(x431 : ChangeAnnotationIdentifier.t option) ->
            fun () ->
              t_of_js
                (let x435 = Ojs.get_prop_ascii Ojs.global "DeleteFile" in
                 Ojs.call (Ojs.get_prop_ascii x435 "create") "apply"
                   [|x435;((let x432 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x432 "push"
                                 [|(DocumentUri.t_to_js x429)|]);
                            (match x430 with
                             | Some x434 ->
                                 ignore
                                   (Ojs.call x432 "push"
                                      [|(DeleteFileOptions.t_to_js x434)|])
                             | None -> ());
                            (match x431 with
                             | Some x433 ->
                                 ignore
                                   (Ojs.call x432 "push"
                                      [|(ChangeAnnotationIdentifier.t_to_js
                                           x433)|])
                             | None -> ());
                            x432))|])
    let (is : value:any -> bool) =
      fun ~value:(x436 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DeleteFile") "is"
             [|(any_to_js x436)|])
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x438 : Ojs.t) -> x438
    and t_to_js : t -> Ojs.t = fun (x437 : Ojs.t) -> x437
    let (get : t -> string -> ChangeAnnotation.t) =
      fun (x439 : t) ->
        fun (x440 : string) ->
          ChangeAnnotation.t_of_js
            (Ojs.get_prop (t_to_js x439) (Ojs.string_to_js x440))
    let (set : t -> string -> ChangeAnnotation.t -> unit) =
      fun (x441 : t) ->
        fun (x442 : string) ->
          fun (x443 : ChangeAnnotation.t) ->
            Ojs.set_prop (t_to_js x441) (Ojs.string_to_js x442)
              (ChangeAnnotation.t_to_js x443)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x445 : Ojs.t) -> x445
    and t_to_js : t -> Ojs.t = fun (x444 : Ojs.t) -> x444
    let (get : t -> string -> TextEdit.t list) =
      fun (x446 : t) ->
        fun (x447 : string) ->
          Ojs.list_of_js TextEdit.t_of_js
            (Ojs.get_prop (t_to_js x446) (Ojs.string_to_js x447))
    let (set : t -> string -> TextEdit.t list -> unit) =
      fun (x449 : t) ->
        fun (x450 : string) ->
          fun (x451 : TextEdit.t list) ->
            Ojs.set_prop (t_to_js x449) (Ojs.string_to_js x450)
              (Ojs.list_to_js TextEdit.t_to_js x451)
  end
module WorkspaceEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x454 : Ojs.t) -> x454
    and t_to_js : t -> Ojs.t = fun (x453 : Ojs.t) -> x453
    let (get_changes : t -> AnonymousInterface3.t) =
      fun (x455 : t) ->
        AnonymousInterface3.t_of_js
          (Ojs.get_prop_ascii (t_to_js x455) "changes")
    let (set_changes : t -> AnonymousInterface3.t -> unit) =
      fun (x456 : t) ->
        fun (x457 : AnonymousInterface3.t) ->
          Ojs.set_prop_ascii (t_to_js x456) "changes"
            (AnonymousInterface3.t_to_js x457)
    let (get_document_changes :
      t ->
        ([ `U_s4_create of CreateFile.t  | `U_s8_delete of DeleteFile.t 
         | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t) or_ list)
      =
      fun (x458 : t) ->
        Ojs.list_of_js
          (fun (x459 : Ojs.t) ->
             or__of_js
               (fun (x460 : Ojs.t) ->
                  let x461 = x460 in
                  match Ojs.string_of_js (Ojs.get_prop_ascii x461 "kind")
                  with
                  | "create" -> `U_s4_create (CreateFile.t_of_js x461)
                  | "delete" -> `U_s8_delete (DeleteFile.t_of_js x461)
                  | "rename" -> `U_s32_rename (RenameFile.t_of_js x461)
                  | _ -> assert false) TextDocumentEdit.t_of_js x459)
          (Ojs.get_prop_ascii (t_to_js x458) "documentChanges")
    let (set_document_changes :
      t ->
        ([ `U_s4_create of CreateFile.t  | `U_s8_delete of DeleteFile.t 
         | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t) or_ list ->
          unit)
      =
      fun (x463 : t) ->
        fun
          (x464 :
            ([ `U_s4_create of CreateFile.t  | `U_s8_delete of DeleteFile.t 
             | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t) or_ list)
          ->
          Ojs.set_prop_ascii (t_to_js x463) "documentChanges"
            (Ojs.list_to_js
               (fun
                  (x465 :
                    ([ `U_s4_create of CreateFile.t 
                     | `U_s8_delete of DeleteFile.t 
                     | `U_s32_rename of RenameFile.t ], TextDocumentEdit.t)
                      or_)
                  ->
                  or__to_js
                    (fun
                       (x466 :
                         [ `U_s4_create of CreateFile.t 
                         | `U_s8_delete of DeleteFile.t 
                         | `U_s32_rename of RenameFile.t ])
                       ->
                       match x466 with
                       | `U_s4_create x467 -> CreateFile.t_to_js x467
                       | `U_s8_delete x468 -> DeleteFile.t_to_js x468
                       | `U_s32_rename x469 -> RenameFile.t_to_js x469)
                    TextDocumentEdit.t_to_js x465) x464)
    let (get_change_annotations : t -> AnonymousInterface2.t) =
      fun (x471 : t) ->
        AnonymousInterface2.t_of_js
          (Ojs.get_prop_ascii (t_to_js x471) "changeAnnotations")
    let (set_change_annotations : t -> AnonymousInterface2.t -> unit) =
      fun (x472 : t) ->
        fun (x473 : AnonymousInterface2.t) ->
          Ojs.set_prop_ascii (t_to_js x472) "changeAnnotations"
            (AnonymousInterface2.t_to_js x473)
    let (is : value:any -> bool) =
      fun ~value:(x474 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WorkspaceEdit") "is"
             [|(any_to_js x474)|])
  end
module TextEditChange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x476 : Ojs.t) -> x476
    and t_to_js : t -> Ojs.t = fun (x475 : Ojs.t) -> x475
    let (all : t -> (AnnotatedTextEdit.t, TextEdit.t) union2 list) =
      fun (x477 : t) ->
        Ojs.list_of_js
          (fun (x478 : Ojs.t) ->
             union2_of_js AnnotatedTextEdit.t_of_js TextEdit.t_of_js x478)
          (Ojs.call (t_to_js x477) "all" [||])
    let (clear : t -> unit) =
      fun (x481 : t) -> ignore (Ojs.call (t_to_js x481) "clear" [||])
    let (add : t -> edit:(AnnotatedTextEdit.t, TextEdit.t) union2 -> unit) =
      fun (x485 : t) ->
        fun ~edit:(x482 : (AnnotatedTextEdit.t, TextEdit.t) union2) ->
          ignore
            (Ojs.call (t_to_js x485) "add"
               [|(union2_to_js AnnotatedTextEdit.t_to_js TextEdit.t_to_js
                    x482)|])
    let (insert : t -> position:Position.t -> new_text:string -> unit) =
      fun (x488 : t) ->
        fun ~position:(x486 : Position.t) ->
          fun ~new_text:(x487 : string) ->
            ignore
              (Ojs.call (t_to_js x488) "insert"
                 [|(Position.t_to_js x486);(Ojs.string_to_js x487)|])
    let (insert' :
      t ->
        position:Position.t ->
          new_text:string ->
            annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
              union2 -> ChangeAnnotationIdentifier.t)
      =
      fun (x494 : t) ->
        fun ~position:(x489 : Position.t) ->
          fun ~new_text:(x490 : string) ->
            fun
              ~annotation:(x491 :
                            (ChangeAnnotation.t,
                              ChangeAnnotationIdentifier.t) union2)
              ->
              ChangeAnnotationIdentifier.t_of_js
                (Ojs.call (t_to_js x494) "insert"
                   [|(Position.t_to_js x489);(Ojs.string_to_js x490);(
                     union2_to_js ChangeAnnotation.t_to_js
                       ChangeAnnotationIdentifier.t_to_js x491)|])
    let (replace : t -> range:Range.t -> new_text:string -> unit) =
      fun (x497 : t) ->
        fun ~range:(x495 : Range.t) ->
          fun ~new_text:(x496 : string) ->
            ignore
              (Ojs.call (t_to_js x497) "replace"
                 [|(Range.t_to_js x495);(Ojs.string_to_js x496)|])
    let (replace' :
      t ->
        range:Range.t ->
          new_text:string ->
            ?annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
              union2 -> unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x505 : t) ->
        fun ~range:(x498 : Range.t) ->
          fun ~new_text:(x499 : string) ->
            fun
              ?annotation:(x500 :
                            (ChangeAnnotation.t,
                              ChangeAnnotationIdentifier.t) union2 option)
              ->
              fun () ->
                ChangeAnnotationIdentifier.t_of_js
                  (let x506 = t_to_js x505 in
                   Ojs.call (Ojs.get_prop_ascii x506 "replace") "apply"
                     [|x506;((let x501 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x501 "push"
                                   [|(Range.t_to_js x498)|]);
                              ignore
                                (Ojs.call x501 "push"
                                   [|(Ojs.string_to_js x499)|]);
                              (match x500 with
                               | Some x502 ->
                                   ignore
                                     (Ojs.call x501 "push"
                                        [|(union2_to_js
                                             ChangeAnnotation.t_to_js
                                             ChangeAnnotationIdentifier.t_to_js
                                             x502)|])
                               | None -> ());
                              x501))|])
    let (delete : t -> range:Range.t -> unit) =
      fun (x508 : t) ->
        fun ~range:(x507 : Range.t) ->
          ignore (Ojs.call (t_to_js x508) "delete" [|(Range.t_to_js x507)|])
    let (delete' :
      t ->
        range:Range.t ->
          ?annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
            union2 -> unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x515 : t) ->
        fun ~range:(x509 : Range.t) ->
          fun
            ?annotation:(x510 :
                          (ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
                            union2 option)
            ->
            fun () ->
              ChangeAnnotationIdentifier.t_of_js
                (let x516 = t_to_js x515 in
                 Ojs.call (Ojs.get_prop_ascii x516 "delete") "apply"
                   [|x516;((let x511 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x511 "push" [|(Range.t_to_js x509)|]);
                            (match x510 with
                             | Some x512 ->
                                 ignore
                                   (Ojs.call x511 "push"
                                      [|(union2_to_js
                                           ChangeAnnotation.t_to_js
                                           ChangeAnnotationIdentifier.t_to_js
                                           x512)|])
                             | None -> ());
                            x511))|])
  end
module WorkspaceChange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x518 : Ojs.t) -> x518
    and t_to_js : t -> Ojs.t = fun (x517 : Ojs.t) -> x517
    let (get_workspace_edit : t -> any) =
      fun (x519 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x519) "_workspaceEdit")
    let (set_workspace_edit : t -> any -> unit) =
      fun (x520 : t) ->
        fun (x521 : any) ->
          Ojs.set_prop_ascii (t_to_js x520) "_workspaceEdit" (any_to_js x521)
    let (get_text_edit_changes : t -> any) =
      fun (x522 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x522) "_textEditChanges")
    let (set_text_edit_changes : t -> any -> unit) =
      fun (x523 : t) ->
        fun (x524 : any) ->
          Ojs.set_prop_ascii (t_to_js x523) "_textEditChanges"
            (any_to_js x524)
    let (get_change_annotations : t -> any) =
      fun (x525 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x525) "_changeAnnotations")
    let (set_change_annotations : t -> any -> unit) =
      fun (x526 : t) ->
        fun (x527 : any) ->
          Ojs.set_prop_ascii (t_to_js x526) "_changeAnnotations"
            (any_to_js x527)
    let (create : ?workspace_edit:WorkspaceEdit.t -> unit -> t) =
      fun ?workspace_edit:(x528 : WorkspaceEdit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "WorkspaceChange")
               (let x529 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x528 with
                 | Some x530 ->
                     ignore
                       (Ojs.call x529 "push" [|(WorkspaceEdit.t_to_js x530)|])
                 | None -> ());
                x529))
    let (get_edit : t -> WorkspaceEdit.t) =
      fun (x531 : t) ->
        WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x531) "edit")
    let (get_text_edit_change :
      t ->
        text_document:OptionalVersionedTextDocumentIdentifier.t ->
          TextEditChange.t)
      =
      fun (x533 : t) ->
        fun ~text_document:(x532 : OptionalVersionedTextDocumentIdentifier.t)
          ->
          TextEditChange.t_of_js
            (Ojs.call (t_to_js x533) "getTextEditChange"
               [|(OptionalVersionedTextDocumentIdentifier.t_to_js x532)|])
    let (get_text_edit_change' : t -> uri:DocumentUri.t -> TextEditChange.t)
      =
      fun (x535 : t) ->
        fun ~uri:(x534 : DocumentUri.t) ->
          TextEditChange.t_of_js
            (Ojs.call (t_to_js x535) "getTextEditChange"
               [|(DocumentUri.t_to_js x534)|])
    let (get_init_document_changes : t -> any) =
      fun (x536 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x536) "initDocumentChanges")
    let (set_init_document_changes : t -> any -> unit) =
      fun (x537 : t) ->
        fun (x538 : any) ->
          Ojs.set_prop_ascii (t_to_js x537) "initDocumentChanges"
            (any_to_js x538)
    let (get_init_changes : t -> any) =
      fun (x539 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x539) "initChanges")
    let (set_init_changes : t -> any -> unit) =
      fun (x540 : t) ->
        fun (x541 : any) ->
          Ojs.set_prop_ascii (t_to_js x540) "initChanges" (any_to_js x541)
    let (create_file :
      t -> uri:DocumentUri.t -> ?options:CreateFileOptions.t -> unit -> unit)
      =
      fun (x546 : t) ->
        fun ~uri:(x542 : DocumentUri.t) ->
          fun ?options:(x543 : CreateFileOptions.t option) ->
            fun () ->
              ignore
                (let x547 = t_to_js x546 in
                 Ojs.call (Ojs.get_prop_ascii x547 "createFile") "apply"
                   [|x547;((let x544 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x544 "push"
                                 [|(DocumentUri.t_to_js x542)|]);
                            (match x543 with
                             | Some x545 ->
                                 ignore
                                   (Ojs.call x544 "push"
                                      [|(CreateFileOptions.t_to_js x545)|])
                             | None -> ());
                            x544))|])
    let (create_file' :
      t ->
        uri:DocumentUri.t ->
          annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
            union2 ->
            ?options:CreateFileOptions.t ->
              unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x555 : t) ->
        fun ~uri:(x548 : DocumentUri.t) ->
          fun
            ~annotation:(x549 :
                          (ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
                            union2)
            ->
            fun ?options:(x550 : CreateFileOptions.t option) ->
              fun () ->
                ChangeAnnotationIdentifier.t_of_js
                  (let x556 = t_to_js x555 in
                   Ojs.call (Ojs.get_prop_ascii x556 "createFile") "apply"
                     [|x556;((let x551 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x551 "push"
                                   [|(DocumentUri.t_to_js x548)|]);
                              ignore
                                (Ojs.call x551 "push"
                                   [|(union2_to_js ChangeAnnotation.t_to_js
                                        ChangeAnnotationIdentifier.t_to_js
                                        x549)|]);
                              (match x550 with
                               | Some x552 ->
                                   ignore
                                     (Ojs.call x551 "push"
                                        [|(CreateFileOptions.t_to_js x552)|])
                               | None -> ());
                              x551))|])
    let (rename_file :
      t ->
        old_uri:DocumentUri.t ->
          new_uri:DocumentUri.t ->
            ?options:RenameFileOptions.t -> unit -> unit)
      =
      fun (x562 : t) ->
        fun ~old_uri:(x557 : DocumentUri.t) ->
          fun ~new_uri:(x558 : DocumentUri.t) ->
            fun ?options:(x559 : RenameFileOptions.t option) ->
              fun () ->
                ignore
                  (let x563 = t_to_js x562 in
                   Ojs.call (Ojs.get_prop_ascii x563 "renameFile") "apply"
                     [|x563;((let x560 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x560 "push"
                                   [|(DocumentUri.t_to_js x557)|]);
                              ignore
                                (Ojs.call x560 "push"
                                   [|(DocumentUri.t_to_js x558)|]);
                              (match x559 with
                               | Some x561 ->
                                   ignore
                                     (Ojs.call x560 "push"
                                        [|(RenameFileOptions.t_to_js x561)|])
                               | None -> ());
                              x560))|])
    let (rename_file' :
      t ->
        old_uri:DocumentUri.t ->
          new_uri:DocumentUri.t ->
            ?annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
              union2 ->
              ?options:RenameFileOptions.t ->
                unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x573 : t) ->
        fun ~old_uri:(x564 : DocumentUri.t) ->
          fun ~new_uri:(x565 : DocumentUri.t) ->
            fun
              ?annotation:(x566 :
                            (ChangeAnnotation.t,
                              ChangeAnnotationIdentifier.t) union2 option)
              ->
              fun ?options:(x567 : RenameFileOptions.t option) ->
                fun () ->
                  ChangeAnnotationIdentifier.t_of_js
                    (let x574 = t_to_js x573 in
                     Ojs.call (Ojs.get_prop_ascii x574 "renameFile") "apply"
                       [|x574;((let x568 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x568 "push"
                                     [|(DocumentUri.t_to_js x564)|]);
                                ignore
                                  (Ojs.call x568 "push"
                                     [|(DocumentUri.t_to_js x565)|]);
                                (match x566 with
                                 | Some x570 ->
                                     ignore
                                       (Ojs.call x568 "push"
                                          [|(union2_to_js
                                               ChangeAnnotation.t_to_js
                                               ChangeAnnotationIdentifier.t_to_js
                                               x570)|])
                                 | None -> ());
                                (match x567 with
                                 | Some x569 ->
                                     ignore
                                       (Ojs.call x568 "push"
                                          [|(RenameFileOptions.t_to_js x569)|])
                                 | None -> ());
                                x568))|])
    let (delete_file :
      t -> uri:DocumentUri.t -> ?options:DeleteFileOptions.t -> unit -> unit)
      =
      fun (x579 : t) ->
        fun ~uri:(x575 : DocumentUri.t) ->
          fun ?options:(x576 : DeleteFileOptions.t option) ->
            fun () ->
              ignore
                (let x580 = t_to_js x579 in
                 Ojs.call (Ojs.get_prop_ascii x580 "deleteFile") "apply"
                   [|x580;((let x577 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x577 "push"
                                 [|(DocumentUri.t_to_js x575)|]);
                            (match x576 with
                             | Some x578 ->
                                 ignore
                                   (Ojs.call x577 "push"
                                      [|(DeleteFileOptions.t_to_js x578)|])
                             | None -> ());
                            x577))|])
    let (delete_file' :
      t ->
        uri:DocumentUri.t ->
          annotation:(ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
            union2 ->
            ?options:DeleteFileOptions.t ->
              unit -> ChangeAnnotationIdentifier.t)
      =
      fun (x588 : t) ->
        fun ~uri:(x581 : DocumentUri.t) ->
          fun
            ~annotation:(x582 :
                          (ChangeAnnotation.t, ChangeAnnotationIdentifier.t)
                            union2)
            ->
            fun ?options:(x583 : DeleteFileOptions.t option) ->
              fun () ->
                ChangeAnnotationIdentifier.t_of_js
                  (let x589 = t_to_js x588 in
                   Ojs.call (Ojs.get_prop_ascii x589 "deleteFile") "apply"
                     [|x589;((let x584 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x584 "push"
                                   [|(DocumentUri.t_to_js x581)|]);
                              ignore
                                (Ojs.call x584 "push"
                                   [|(union2_to_js ChangeAnnotation.t_to_js
                                        ChangeAnnotationIdentifier.t_to_js
                                        x582)|]);
                              (match x583 with
                               | Some x585 ->
                                   ignore
                                     (Ojs.call x584 "push"
                                        [|(DeleteFileOptions.t_to_js x585)|])
                               | None -> ());
                              x584))|])
  end
module TextDocumentItem =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x591 : Ojs.t) -> x591
    and t_to_js : t -> Ojs.t = fun (x590 : Ojs.t) -> x590
    let (get_uri : t -> DocumentUri.t) =
      fun (x592 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x592) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x593 : t) ->
        fun (x594 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x593) "uri" (DocumentUri.t_to_js x594)
    let (get_language_id : t -> string) =
      fun (x595 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x595) "languageId")
    let (set_language_id : t -> string -> unit) =
      fun (x596 : t) ->
        fun (x597 : string) ->
          Ojs.set_prop_ascii (t_to_js x596) "languageId"
            (Ojs.string_to_js x597)
    let (get_version : t -> Integer.t) =
      fun (x598 : t) ->
        Integer.t_of_js (Ojs.get_prop_ascii (t_to_js x598) "version")
    let (set_version : t -> Integer.t -> unit) =
      fun (x599 : t) ->
        fun (x600 : Integer.t) ->
          Ojs.set_prop_ascii (t_to_js x599) "version" (Integer.t_to_js x600)
    let (get_text : t -> string) =
      fun (x601 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x601) "text")
    let (set_text : t -> string -> unit) =
      fun (x602 : t) ->
        fun (x603 : string) ->
          Ojs.set_prop_ascii (t_to_js x602) "text" (Ojs.string_to_js x603)
    let (create_ :
      uri:DocumentUri.t ->
        language_id:string -> version:Integer.t -> text:string -> t)
      =
      fun ~uri:(x604 : DocumentUri.t) ->
        fun ~language_id:(x605 : string) ->
          fun ~version:(x606 : Integer.t) ->
            fun ~text:(x607 : string) ->
              t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentItem")
                   "create"
                   [|(DocumentUri.t_to_js x604);(Ojs.string_to_js x605);(
                     Integer.t_to_js x606);(Ojs.string_to_js x607)|])
    let (is : value:any -> bool) =
      fun ~value:(x608 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocumentItem") "is"
             [|(any_to_js x608)|])
  end
module MarkupKind =
  struct
    type t = [ `L_s19_markdown  | `L_s27_plaintext ]
    let rec t_of_js : Ojs.t -> t =
      fun (x610 : Ojs.t) ->
        let x611 = x610 in
        match Ojs.string_of_js x611 with
        | "markdown" -> `L_s19_markdown
        | "plaintext" -> `L_s27_plaintext
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x609 : [ `L_s19_markdown  | `L_s27_plaintext ]) ->
        match x609 with
        | `L_s19_markdown -> Ojs.string_to_js "markdown"
        | `L_s27_plaintext -> Ojs.string_to_js "plaintext"
    let (plain_text : [ `L_s27_plaintext ]) =
      let x612 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MarkupKind")
          "PlainText" in
      match Ojs.string_of_js x612 with
      | "plaintext" -> `L_s27_plaintext
      | _ -> assert false
    let (markdown : [ `L_s19_markdown ]) =
      let x613 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MarkupKind")
          "Markdown" in
      match Ojs.string_of_js x613 with
      | "markdown" -> `L_s19_markdown
      | _ -> assert false
    let (is : value:any -> bool) =
      fun ~value:(x614 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "MarkupKind") "is"
             [|(any_to_js x614)|])
  end
module MarkupContent =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x616 : Ojs.t) -> x616
    and t_to_js : t -> Ojs.t = fun (x615 : Ojs.t) -> x615
    let (get_kind : t -> MarkupKind.t) =
      fun (x617 : t) ->
        MarkupKind.t_of_js (Ojs.get_prop_ascii (t_to_js x617) "kind")
    let (set_kind : t -> MarkupKind.t -> unit) =
      fun (x618 : t) ->
        fun (x619 : MarkupKind.t) ->
          Ojs.set_prop_ascii (t_to_js x618) "kind" (MarkupKind.t_to_js x619)
    let (get_value : t -> string) =
      fun (x620 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x620) "value")
    let (set_value : t -> string -> unit) =
      fun (x621 : t) ->
        fun (x622 : string) ->
          Ojs.set_prop_ascii (t_to_js x621) "value" (Ojs.string_to_js x622)
    let (is : value:any -> bool) =
      fun ~value:(x623 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "MarkupContent") "is"
             [|(any_to_js x623)|])
  end
module CompletionItemKind =
  struct
    type t =
      [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | `L_n_7 
      | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
      | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
      | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24  | `L_n_25 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x625 : Ojs.t) ->
        let x626 = x625 in
        match Ojs.int_of_js x626 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | 22 -> `L_n_22
        | 23 -> `L_n_23
        | 24 -> `L_n_24
        | 25 -> `L_n_25
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x624 :
          [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
          | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
          | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
          | `L_n_19  | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24 
          | `L_n_25 ])
        ->
        match x624 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
        | `L_n_4 -> Ojs.int_to_js 4
        | `L_n_5 -> Ojs.int_to_js 5
        | `L_n_6 -> Ojs.int_to_js 6
        | `L_n_7 -> Ojs.int_to_js 7
        | `L_n_8 -> Ojs.int_to_js 8
        | `L_n_9 -> Ojs.int_to_js 9
        | `L_n_10 -> Ojs.int_to_js 10
        | `L_n_11 -> Ojs.int_to_js 11
        | `L_n_12 -> Ojs.int_to_js 12
        | `L_n_13 -> Ojs.int_to_js 13
        | `L_n_14 -> Ojs.int_to_js 14
        | `L_n_15 -> Ojs.int_to_js 15
        | `L_n_16 -> Ojs.int_to_js 16
        | `L_n_17 -> Ojs.int_to_js 17
        | `L_n_18 -> Ojs.int_to_js 18
        | `L_n_19 -> Ojs.int_to_js 19
        | `L_n_20 -> Ojs.int_to_js 20
        | `L_n_21 -> Ojs.int_to_js 21
        | `L_n_22 -> Ojs.int_to_js 22
        | `L_n_23 -> Ojs.int_to_js 23
        | `L_n_24 -> Ojs.int_to_js 24
        | `L_n_25 -> Ojs.int_to_js 25
    let (text : [ `L_n_1 ]) =
      let x627 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Text" in
      match Ojs.int_of_js x627 with | 1 -> `L_n_1 | _ -> assert false
    let (method_ : [ `L_n_2 ]) =
      let x628 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Method" in
      match Ojs.int_of_js x628 with | 2 -> `L_n_2 | _ -> assert false
    let (function_ : [ `L_n_3 ]) =
      let x629 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Function" in
      match Ojs.int_of_js x629 with | 3 -> `L_n_3 | _ -> assert false
    let (constructor : [ `L_n_4 ]) =
      let x630 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Constructor" in
      match Ojs.int_of_js x630 with | 4 -> `L_n_4 | _ -> assert false
    let (field : [ `L_n_5 ]) =
      let x631 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Field" in
      match Ojs.int_of_js x631 with | 5 -> `L_n_5 | _ -> assert false
    let (variable : [ `L_n_6 ]) =
      let x632 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Variable" in
      match Ojs.int_of_js x632 with | 6 -> `L_n_6 | _ -> assert false
    let (class_ : [ `L_n_7 ]) =
      let x633 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Class" in
      match Ojs.int_of_js x633 with | 7 -> `L_n_7 | _ -> assert false
    let (interface : [ `L_n_8 ]) =
      let x634 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Interface" in
      match Ojs.int_of_js x634 with | 8 -> `L_n_8 | _ -> assert false
    let (module_ : [ `L_n_9 ]) =
      let x635 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Module" in
      match Ojs.int_of_js x635 with | 9 -> `L_n_9 | _ -> assert false
    let (property : [ `L_n_10 ]) =
      let x636 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Property" in
      match Ojs.int_of_js x636 with | 10 -> `L_n_10 | _ -> assert false
    let (unit : [ `L_n_11 ]) =
      let x637 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Unit" in
      match Ojs.int_of_js x637 with | 11 -> `L_n_11 | _ -> assert false
    let (value : [ `L_n_12 ]) =
      let x638 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Value" in
      match Ojs.int_of_js x638 with | 12 -> `L_n_12 | _ -> assert false
    let (enum : [ `L_n_13 ]) =
      let x639 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Enum" in
      match Ojs.int_of_js x639 with | 13 -> `L_n_13 | _ -> assert false
    let (keyword : [ `L_n_14 ]) =
      let x640 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Keyword" in
      match Ojs.int_of_js x640 with | 14 -> `L_n_14 | _ -> assert false
    let (snippet : [ `L_n_15 ]) =
      let x641 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Snippet" in
      match Ojs.int_of_js x641 with | 15 -> `L_n_15 | _ -> assert false
    let (color : [ `L_n_16 ]) =
      let x642 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Color" in
      match Ojs.int_of_js x642 with | 16 -> `L_n_16 | _ -> assert false
    let (file : [ `L_n_17 ]) =
      let x643 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "File" in
      match Ojs.int_of_js x643 with | 17 -> `L_n_17 | _ -> assert false
    let (reference : [ `L_n_18 ]) =
      let x644 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Reference" in
      match Ojs.int_of_js x644 with | 18 -> `L_n_18 | _ -> assert false
    let (folder : [ `L_n_19 ]) =
      let x645 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Folder" in
      match Ojs.int_of_js x645 with | 19 -> `L_n_19 | _ -> assert false
    let (enum_member : [ `L_n_20 ]) =
      let x646 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "EnumMember" in
      match Ojs.int_of_js x646 with | 20 -> `L_n_20 | _ -> assert false
    let (constant : [ `L_n_21 ]) =
      let x647 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Constant" in
      match Ojs.int_of_js x647 with | 21 -> `L_n_21 | _ -> assert false
    let (struct_ : [ `L_n_22 ]) =
      let x648 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Struct" in
      match Ojs.int_of_js x648 with | 22 -> `L_n_22 | _ -> assert false
    let (event : [ `L_n_23 ]) =
      let x649 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Event" in
      match Ojs.int_of_js x649 with | 23 -> `L_n_23 | _ -> assert false
    let (operator : [ `L_n_24 ]) =
      let x650 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind") "Operator" in
      match Ojs.int_of_js x650 with | 24 -> `L_n_24 | _ -> assert false
    let (type_parameter : [ `L_n_25 ]) =
      let x651 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "CompletionItemKind")
          "TypeParameter" in
      match Ojs.int_of_js x651 with | 25 -> `L_n_25 | _ -> assert false
  end
module InsertTextFormat =
  struct
    type t = [ `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x653 : Ojs.t) ->
        let x654 = x653 in
        match Ojs.int_of_js x654 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x652 : [ `L_n_1  | `L_n_2 ]) ->
        match x652 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (plain_text : [ `L_n_1 ]) =
      let x655 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextFormat")
          "PlainText" in
      match Ojs.int_of_js x655 with | 1 -> `L_n_1 | _ -> assert false
    let (snippet : [ `L_n_2 ]) =
      let x656 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextFormat")
          "Snippet" in
      match Ojs.int_of_js x656 with | 2 -> `L_n_2 | _ -> assert false
  end
module CompletionItemTag =
  struct
    type t = [ `L_n_1 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x658 : Ojs.t) ->
        let x659 = x658 in
        match Ojs.int_of_js x659 with | 1 -> `L_n_1 | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x657 : [ `L_n_1 ]) -> match x657 with | `L_n_1 -> Ojs.int_to_js 1
    let (deprecated : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "CompletionItemTag") "Deprecated")
  end
module InsertReplaceEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x661 : Ojs.t) -> x661
    and t_to_js : t -> Ojs.t = fun (x660 : Ojs.t) -> x660
    let (get_new_text : t -> string) =
      fun (x662 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x662) "newText")
    let (set_new_text : t -> string -> unit) =
      fun (x663 : t) ->
        fun (x664 : string) ->
          Ojs.set_prop_ascii (t_to_js x663) "newText" (Ojs.string_to_js x664)
    let (get_insert : t -> Range.t) =
      fun (x665 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x665) "insert")
    let (set_insert : t -> Range.t -> unit) =
      fun (x666 : t) ->
        fun (x667 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x666) "insert" (Range.t_to_js x667)
    let (get_replace : t -> Range.t) =
      fun (x668 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x668) "replace")
    let (set_replace : t -> Range.t -> unit) =
      fun (x669 : t) ->
        fun (x670 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x669) "replace" (Range.t_to_js x670)
    let (create_ : new_text:string -> insert:Range.t -> replace:Range.t -> t)
      =
      fun ~new_text:(x671 : string) ->
        fun ~insert:(x672 : Range.t) ->
          fun ~replace:(x673 : Range.t) ->
            t_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "InsertReplaceEdit")
                 "create"
                 [|(Ojs.string_to_js x671);(Range.t_to_js x672);(Range.t_to_js
                                                                   x673)|])
    let (is : value:(t, TextEdit.t) union2 -> bool) =
      fun ~value:(x674 : (t, TextEdit.t) union2) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "InsertReplaceEdit") "is"
             [|(union2_to_js t_to_js TextEdit.t_to_js x674)|])
  end
module InsertTextMode =
  struct
    type t = [ `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x678 : Ojs.t) ->
        let x679 = x678 in
        match Ojs.int_of_js x679 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x677 : [ `L_n_1  | `L_n_2 ]) ->
        match x677 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (as_is : [ `L_n_1 ]) =
      let x680 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextMode")
          "asIs" in
      match Ojs.int_of_js x680 with | 1 -> `L_n_1 | _ -> assert false
    let (adjust_indentation : [ `L_n_2 ]) =
      let x681 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "InsertTextMode")
          "adjustIndentation" in
      match Ojs.int_of_js x681 with | 2 -> `L_n_2 | _ -> assert false
  end
module CompletionItemLabelDetails =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x683 : Ojs.t) -> x683
    and t_to_js : t -> Ojs.t = fun (x682 : Ojs.t) -> x682
    let (get_parameters : t -> string) =
      fun (x684 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x684) "parameters")
    let (set_parameters : t -> string -> unit) =
      fun (x685 : t) ->
        fun (x686 : string) ->
          Ojs.set_prop_ascii (t_to_js x685) "parameters"
            (Ojs.string_to_js x686)
    let (get_qualifier : t -> string) =
      fun (x687 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x687) "qualifier")
    let (set_qualifier : t -> string -> unit) =
      fun (x688 : t) ->
        fun (x689 : string) ->
          Ojs.set_prop_ascii (t_to_js x688) "qualifier"
            (Ojs.string_to_js x689)
    let (get_type : t -> string) =
      fun (x690 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x690) "type")
    let (set_type : t -> string -> unit) =
      fun (x691 : t) ->
        fun (x692 : string) ->
          Ojs.set_prop_ascii (t_to_js x691) "type" (Ojs.string_to_js x692)
    let (is : value:any -> bool) =
      fun ~value:(x693 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii Ojs.global "CompletionItemLabelDetails")
             "is" [|(any_to_js x693)|])
  end
module CompletionItem =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x695 : Ojs.t) -> x695
    and t_to_js : t -> Ojs.t = fun (x694 : Ojs.t) -> x694
    let (get_label : t -> string) =
      fun (x696 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x696) "label")
    let (set_label : t -> string -> unit) =
      fun (x697 : t) ->
        fun (x698 : string) ->
          Ojs.set_prop_ascii (t_to_js x697) "label" (Ojs.string_to_js x698)
    let (get_label_details : t -> CompletionItemLabelDetails.t) =
      fun (x699 : t) ->
        CompletionItemLabelDetails.t_of_js
          (Ojs.get_prop_ascii (t_to_js x699) "labelDetails")
    let (set_label_details : t -> CompletionItemLabelDetails.t -> unit) =
      fun (x700 : t) ->
        fun (x701 : CompletionItemLabelDetails.t) ->
          Ojs.set_prop_ascii (t_to_js x700) "labelDetails"
            (CompletionItemLabelDetails.t_to_js x701)
    let (get_kind : t -> CompletionItemKind.t) =
      fun (x702 : t) ->
        CompletionItemKind.t_of_js (Ojs.get_prop_ascii (t_to_js x702) "kind")
    let (set_kind : t -> CompletionItemKind.t -> unit) =
      fun (x703 : t) ->
        fun (x704 : CompletionItemKind.t) ->
          Ojs.set_prop_ascii (t_to_js x703) "kind"
            (CompletionItemKind.t_to_js x704)
    let (get_tags : t -> CompletionItemTag.t list) =
      fun (x705 : t) ->
        Ojs.list_of_js CompletionItemTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x705) "tags")
    let (set_tags : t -> CompletionItemTag.t list -> unit) =
      fun (x707 : t) ->
        fun (x708 : CompletionItemTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x707) "tags"
            (Ojs.list_to_js CompletionItemTag.t_to_js x708)
    let (get_detail : t -> string) =
      fun (x710 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x710) "detail")
    let (set_detail : t -> string -> unit) =
      fun (x711 : t) ->
        fun (x712 : string) ->
          Ojs.set_prop_ascii (t_to_js x711) "detail" (Ojs.string_to_js x712)
    let (get_documentation : t -> MarkupContent.t or_string) =
      fun (x713 : t) ->
        or_string_of_js MarkupContent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x713) "documentation")
    let (set_documentation : t -> MarkupContent.t or_string -> unit) =
      fun (x715 : t) ->
        fun (x716 : MarkupContent.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x715) "documentation"
            (or_string_to_js MarkupContent.t_to_js x716)
    let (get_deprecated : t -> bool) =
      fun (x718 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x718) "deprecated")
    let (set_deprecated : t -> bool -> unit) =
      fun (x719 : t) ->
        fun (x720 : bool) ->
          Ojs.set_prop_ascii (t_to_js x719) "deprecated"
            (Ojs.bool_to_js x720)
    let (get_preselect : t -> bool) =
      fun (x721 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x721) "preselect")
    let (set_preselect : t -> bool -> unit) =
      fun (x722 : t) ->
        fun (x723 : bool) ->
          Ojs.set_prop_ascii (t_to_js x722) "preselect" (Ojs.bool_to_js x723)
    let (get_sort_text : t -> string) =
      fun (x724 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x724) "sortText")
    let (set_sort_text : t -> string -> unit) =
      fun (x725 : t) ->
        fun (x726 : string) ->
          Ojs.set_prop_ascii (t_to_js x725) "sortText"
            (Ojs.string_to_js x726)
    let (get_filter_text : t -> string) =
      fun (x727 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x727) "filterText")
    let (set_filter_text : t -> string -> unit) =
      fun (x728 : t) ->
        fun (x729 : string) ->
          Ojs.set_prop_ascii (t_to_js x728) "filterText"
            (Ojs.string_to_js x729)
    let (get_insert_text : t -> string) =
      fun (x730 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x730) "insertText")
    let (set_insert_text : t -> string -> unit) =
      fun (x731 : t) ->
        fun (x732 : string) ->
          Ojs.set_prop_ascii (t_to_js x731) "insertText"
            (Ojs.string_to_js x732)
    let (get_insert_text_format : t -> InsertTextFormat.t) =
      fun (x733 : t) ->
        InsertTextFormat.t_of_js
          (Ojs.get_prop_ascii (t_to_js x733) "insertTextFormat")
    let (set_insert_text_format : t -> InsertTextFormat.t -> unit) =
      fun (x734 : t) ->
        fun (x735 : InsertTextFormat.t) ->
          Ojs.set_prop_ascii (t_to_js x734) "insertTextFormat"
            (InsertTextFormat.t_to_js x735)
    let (get_insert_text_mode : t -> InsertTextMode.t) =
      fun (x736 : t) ->
        InsertTextMode.t_of_js
          (Ojs.get_prop_ascii (t_to_js x736) "insertTextMode")
    let (set_insert_text_mode : t -> InsertTextMode.t -> unit) =
      fun (x737 : t) ->
        fun (x738 : InsertTextMode.t) ->
          Ojs.set_prop_ascii (t_to_js x737) "insertTextMode"
            (InsertTextMode.t_to_js x738)
    let (get_text_edit : t -> (InsertReplaceEdit.t, TextEdit.t) union2) =
      fun (x739 : t) ->
        union2_of_js InsertReplaceEdit.t_of_js TextEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x739) "textEdit")
    let (set_text_edit :
      t -> (InsertReplaceEdit.t, TextEdit.t) union2 -> unit) =
      fun (x742 : t) ->
        fun (x743 : (InsertReplaceEdit.t, TextEdit.t) union2) ->
          Ojs.set_prop_ascii (t_to_js x742) "textEdit"
            (union2_to_js InsertReplaceEdit.t_to_js TextEdit.t_to_js x743)
    let (get_additional_text_edits : t -> TextEdit.t list) =
      fun (x746 : t) ->
        Ojs.list_of_js TextEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x746) "additionalTextEdits")
    let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
      fun (x748 : t) ->
        fun (x749 : TextEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x748) "additionalTextEdits"
            (Ojs.list_to_js TextEdit.t_to_js x749)
    let (get_commit_characters : t -> string list) =
      fun (x751 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x751) "commitCharacters")
    let (set_commit_characters : t -> string list -> unit) =
      fun (x753 : t) ->
        fun (x754 : string list) ->
          Ojs.set_prop_ascii (t_to_js x753) "commitCharacters"
            (Ojs.list_to_js Ojs.string_to_js x754)
    let (get_command : t -> Command.t) =
      fun (x756 : t) ->
        Command.t_of_js (Ojs.get_prop_ascii (t_to_js x756) "command")
    let (set_command : t -> Command.t -> unit) =
      fun (x757 : t) ->
        fun (x758 : Command.t) ->
          Ojs.set_prop_ascii (t_to_js x757) "command" (Command.t_to_js x758)
    let (get_data : t -> any) =
      fun (x759 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x759) "data")
    let (set_data : t -> any -> unit) =
      fun (x760 : t) ->
        fun (x761 : any) ->
          Ojs.set_prop_ascii (t_to_js x760) "data" (any_to_js x761)
    let (create_ : label:string -> t) =
      fun ~label:(x762 : string) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CompletionItem") "create"
             [|(Ojs.string_to_js x762)|])
  end
module CompletionList =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x764 : Ojs.t) -> x764
    and t_to_js : t -> Ojs.t = fun (x763 : Ojs.t) -> x763
    let (get_is_incomplete : t -> bool) =
      fun (x765 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x765) "isIncomplete")
    let (set_is_incomplete : t -> bool -> unit) =
      fun (x766 : t) ->
        fun (x767 : bool) ->
          Ojs.set_prop_ascii (t_to_js x766) "isIncomplete"
            (Ojs.bool_to_js x767)
    let (get_items : t -> CompletionItem.t list) =
      fun (x768 : t) ->
        Ojs.list_of_js CompletionItem.t_of_js
          (Ojs.get_prop_ascii (t_to_js x768) "items")
    let (set_items : t -> CompletionItem.t list -> unit) =
      fun (x770 : t) ->
        fun (x771 : CompletionItem.t list) ->
          Ojs.set_prop_ascii (t_to_js x770) "items"
            (Ojs.list_to_js CompletionItem.t_to_js x771)
    let (create_ :
      ?items:CompletionItem.t list -> ?is_incomplete:bool -> unit -> t) =
      fun ?items:(x773 : CompletionItem.t list option) ->
        fun ?is_incomplete:(x774 : bool option) ->
          fun () ->
            t_of_js
              (let x779 = Ojs.get_prop_ascii Ojs.global "CompletionList" in
               Ojs.call (Ojs.get_prop_ascii x779 "create") "apply"
                 [|x779;((let x775 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x773 with
                           | Some x777 ->
                               ignore
                                 (Ojs.call x775 "push"
                                    [|(Ojs.list_to_js CompletionItem.t_to_js
                                         x777)|])
                           | None -> ());
                          (match x774 with
                           | Some x776 ->
                               ignore
                                 (Ojs.call x775 "push"
                                    [|(Ojs.bool_to_js x776)|])
                           | None -> ());
                          x775))|])
  end
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x781 : Ojs.t) -> x781
    and t_to_js : t -> Ojs.t = fun (x780 : Ojs.t) -> x780
    let (get_language : t -> string) =
      fun (x782 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x782) "language")
    let (set_language : t -> string -> unit) =
      fun (x783 : t) ->
        fun (x784 : string) ->
          Ojs.set_prop_ascii (t_to_js x783) "language"
            (Ojs.string_to_js x784)
    let (get_value : t -> string) =
      fun (x785 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x785) "value")
    let (set_value : t -> string -> unit) =
      fun (x786 : t) ->
        fun (x787 : string) ->
          Ojs.set_prop_ascii (t_to_js x786) "value" (Ojs.string_to_js x787)
  end
module MarkedString =
  struct
    type t = AnonymousInterface0.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x790 : Ojs.t) -> or_string_of_js AnonymousInterface0.t_of_js x790
    and t_to_js : t -> Ojs.t =
      fun (x788 : AnonymousInterface0.t or_string) ->
        or_string_to_js AnonymousInterface0.t_to_js x788
    let (from_plain_text : plain_text:string -> string) =
      fun ~plain_text:(x792 : string) ->
        Ojs.string_of_js
          (Ojs.call Ojs.global "fromPlainText" [|(Ojs.string_to_js x792)|])
    let (is : value:any -> bool) =
      fun ~value:(x793 : any) ->
        Ojs.bool_of_js (Ojs.call Ojs.global "is" [|(any_to_js x793)|])
  end
module Hover =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x795 : Ojs.t) -> x795
    and t_to_js : t -> Ojs.t = fun (x794 : Ojs.t) -> x794
    let (get_contents :
      t ->
        ((MarkedString.t, MarkupContent.t) union2, MarkedString.t) or_array)
      =
      fun (x796 : t) ->
        or_array_of_js
          (fun (x797 : Ojs.t) ->
             union2_of_js MarkedString.t_of_js MarkupContent.t_of_js x797)
          MarkedString.t_of_js (Ojs.get_prop_ascii (t_to_js x796) "contents")
    let (set_contents :
      t ->
        ((MarkedString.t, MarkupContent.t) union2, MarkedString.t) or_array
          -> unit)
      =
      fun (x801 : t) ->
        fun
          (x802 :
            ((MarkedString.t, MarkupContent.t) union2, MarkedString.t)
              or_array)
          ->
          Ojs.set_prop_ascii (t_to_js x801) "contents"
            (or_array_to_js
               (fun (x803 : (MarkedString.t, MarkupContent.t) union2) ->
                  union2_to_js MarkedString.t_to_js MarkupContent.t_to_js
                    x803) MarkedString.t_to_js x802)
    let (get_range : t -> Range.t) =
      fun (x807 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x807) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x808 : t) ->
        fun (x809 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x808) "range" (Range.t_to_js x809)
    let (is : value:any -> bool) =
      fun ~value:(x810 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Hover") "is"
             [|(any_to_js x810)|])
  end
module ParameterInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x812 : Ojs.t) -> x812
    and t_to_js : t -> Ojs.t = fun (x811 : Ojs.t) -> x811
    let (get_label : t -> (Uinteger.t * Uinteger.t) or_string) =
      fun (x813 : t) ->
        or_string_of_js
          (fun (x814 : Ojs.t) ->
             let x815 = x814 in
             ((Uinteger.t_of_js (Ojs.array_get x815 0)),
               (Uinteger.t_of_js (Ojs.array_get x815 1))))
          (Ojs.get_prop_ascii (t_to_js x813) "label")
    let (set_label : t -> (Uinteger.t * Uinteger.t) or_string -> unit) =
      fun (x816 : t) ->
        fun (x817 : (Uinteger.t * Uinteger.t) or_string) ->
          Ojs.set_prop_ascii (t_to_js x816) "label"
            (or_string_to_js
               (fun (x818 : (Uinteger.t * Uinteger.t)) ->
                  let (x819, x820) = x818 in
                  let x821 = Ojs.array_make 2 in
                  Ojs.array_set x821 0 (Uinteger.t_to_js x819);
                  Ojs.array_set x821 1 (Uinteger.t_to_js x820);
                  x821) x817)
    let (get_documentation : t -> MarkupContent.t or_string) =
      fun (x822 : t) ->
        or_string_of_js MarkupContent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x822) "documentation")
    let (set_documentation : t -> MarkupContent.t or_string -> unit) =
      fun (x824 : t) ->
        fun (x825 : MarkupContent.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x824) "documentation"
            (or_string_to_js MarkupContent.t_to_js x825)
    let (create_ :
      label:(Uinteger.t * Uinteger.t) or_string ->
        ?documentation:string -> unit -> t)
      =
      fun ~label:(x827 : (Uinteger.t * Uinteger.t) or_string) ->
        fun ?documentation:(x828 : string option) ->
          fun () ->
            t_of_js
              (let x835 =
                 Ojs.get_prop_ascii Ojs.global "ParameterInformation" in
               Ojs.call (Ojs.get_prop_ascii x835 "create") "apply"
                 [|x835;((let x829 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x829 "push"
                               [|(or_string_to_js
                                    (fun (x831 : (Uinteger.t * Uinteger.t))
                                       ->
                                       let (x832, x833) = x831 in
                                       let x834 = Ojs.array_make 2 in
                                       Ojs.array_set x834 0
                                         (Uinteger.t_to_js x832);
                                       Ojs.array_set x834 1
                                         (Uinteger.t_to_js x833);
                                       x834) x827)|]);
                          (match x828 with
                           | Some x830 ->
                               ignore
                                 (Ojs.call x829 "push"
                                    [|(Ojs.string_to_js x830)|])
                           | None -> ());
                          x829))|])
  end
module SignatureInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x837 : Ojs.t) -> x837
    and t_to_js : t -> Ojs.t = fun (x836 : Ojs.t) -> x836
    let (get_label : t -> string) =
      fun (x838 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x838) "label")
    let (set_label : t -> string -> unit) =
      fun (x839 : t) ->
        fun (x840 : string) ->
          Ojs.set_prop_ascii (t_to_js x839) "label" (Ojs.string_to_js x840)
    let (get_documentation : t -> MarkupContent.t or_string) =
      fun (x841 : t) ->
        or_string_of_js MarkupContent.t_of_js
          (Ojs.get_prop_ascii (t_to_js x841) "documentation")
    let (set_documentation : t -> MarkupContent.t or_string -> unit) =
      fun (x843 : t) ->
        fun (x844 : MarkupContent.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x843) "documentation"
            (or_string_to_js MarkupContent.t_to_js x844)
    let (get_parameters : t -> ParameterInformation.t list) =
      fun (x846 : t) ->
        Ojs.list_of_js ParameterInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x846) "parameters")
    let (set_parameters : t -> ParameterInformation.t list -> unit) =
      fun (x848 : t) ->
        fun (x849 : ParameterInformation.t list) ->
          Ojs.set_prop_ascii (t_to_js x848) "parameters"
            (Ojs.list_to_js ParameterInformation.t_to_js x849)
    let (get_active_parameter : t -> Uinteger.t) =
      fun (x851 : t) ->
        Uinteger.t_of_js
          (Ojs.get_prop_ascii (t_to_js x851) "activeParameter")
    let (set_active_parameter : t -> Uinteger.t -> unit) =
      fun (x852 : t) ->
        fun (x853 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x852) "activeParameter"
            (Uinteger.t_to_js x853)
    let (create_ :
      label:string ->
        ?documentation:string -> parameters:ParameterInformation.t list -> t)
      =
      fun ~label:(x854 : string) ->
        fun ?documentation:(x855 : string option) ->
          fun ~parameters:(x856 : ParameterInformation.t list) ->
            t_of_js
              (let x860 =
                 Ojs.get_prop_ascii Ojs.global "SignatureInformation" in
               Ojs.call (Ojs.get_prop_ascii x860 "create") "apply"
                 [|x860;((let x857 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x857 "push" [|(Ojs.string_to_js x854)|]);
                          (match x855 with
                           | Some x859 ->
                               ignore
                                 (Ojs.call x857 "push"
                                    [|(Ojs.string_to_js x859)|])
                           | None -> ());
                          List.iter
                            (fun (x858 : ParameterInformation.t) ->
                               ignore
                                 (Ojs.call x857 "push"
                                    [|(ParameterInformation.t_to_js x858)|]))
                            x856;
                          x857))|])
  end
module SignatureHelp =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x862 : Ojs.t) -> x862
    and t_to_js : t -> Ojs.t = fun (x861 : Ojs.t) -> x861
    let (get_signatures : t -> SignatureInformation.t list) =
      fun (x863 : t) ->
        Ojs.list_of_js SignatureInformation.t_of_js
          (Ojs.get_prop_ascii (t_to_js x863) "signatures")
    let (set_signatures : t -> SignatureInformation.t list -> unit) =
      fun (x865 : t) ->
        fun (x866 : SignatureInformation.t list) ->
          Ojs.set_prop_ascii (t_to_js x865) "signatures"
            (Ojs.list_to_js SignatureInformation.t_to_js x866)
    let (get_active_signature : t -> Uinteger.t or_null) =
      fun (x868 : t) ->
        or_null_of_js Uinteger.t_of_js
          (Ojs.get_prop_ascii (t_to_js x868) "activeSignature")
    let (set_active_signature : t -> Uinteger.t or_null -> unit) =
      fun (x870 : t) ->
        fun (x871 : Uinteger.t or_null) ->
          Ojs.set_prop_ascii (t_to_js x870) "activeSignature"
            (or_null_to_js Uinteger.t_to_js x871)
    let (get_active_parameter : t -> Uinteger.t or_null) =
      fun (x873 : t) ->
        or_null_of_js Uinteger.t_of_js
          (Ojs.get_prop_ascii (t_to_js x873) "activeParameter")
    let (set_active_parameter : t -> Uinteger.t or_null -> unit) =
      fun (x875 : t) ->
        fun (x876 : Uinteger.t or_null) ->
          Ojs.set_prop_ascii (t_to_js x875) "activeParameter"
            (or_null_to_js Uinteger.t_to_js x876)
  end
module Definition =
  struct
    type t = (Location.t, Location.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x881 : Ojs.t) ->
        or_array_of_js Location.t_of_js Location.t_of_js x881
    and t_to_js : t -> Ojs.t =
      fun (x878 : (Location.t, Location.t) or_array) ->
        or_array_to_js Location.t_to_js Location.t_to_js x878
  end
module DefinitionLink =
  struct
    type t = LocationLink.t
    let rec t_of_js : Ojs.t -> t =
      fun (x885 : Ojs.t) -> LocationLink.t_of_js x885
    and t_to_js : t -> Ojs.t =
      fun (x884 : LocationLink.t) -> LocationLink.t_to_js x884
  end
module Declaration =
  struct
    type t = (Location.t, Location.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x889 : Ojs.t) ->
        or_array_of_js Location.t_of_js Location.t_of_js x889
    and t_to_js : t -> Ojs.t =
      fun (x886 : (Location.t, Location.t) or_array) ->
        or_array_to_js Location.t_to_js Location.t_to_js x886
  end
module DeclarationLink =
  struct
    type t = LocationLink.t
    let rec t_of_js : Ojs.t -> t =
      fun (x893 : Ojs.t) -> LocationLink.t_of_js x893
    and t_to_js : t -> Ojs.t =
      fun (x892 : LocationLink.t) -> LocationLink.t_to_js x892
  end
module ReferenceContext =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x895 : Ojs.t) -> x895
    and t_to_js : t -> Ojs.t = fun (x894 : Ojs.t) -> x894
    let (get_include_declaration : t -> bool) =
      fun (x896 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x896) "includeDeclaration")
    let (set_include_declaration : t -> bool -> unit) =
      fun (x897 : t) ->
        fun (x898 : bool) ->
          Ojs.set_prop_ascii (t_to_js x897) "includeDeclaration"
            (Ojs.bool_to_js x898)
  end
module DocumentHighlightKind =
  struct
    type t = [ `L_n_1  | `L_n_2  | `L_n_3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x900 : Ojs.t) ->
        let x901 = x900 in
        match Ojs.int_of_js x901 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x899 : [ `L_n_1  | `L_n_2  | `L_n_3 ]) ->
        match x899 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
    let (text : [ `L_n_1 ]) =
      let x902 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DocumentHighlightKind") "Text" in
      match Ojs.int_of_js x902 with | 1 -> `L_n_1 | _ -> assert false
    let (read : [ `L_n_2 ]) =
      let x903 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DocumentHighlightKind") "Read" in
      match Ojs.int_of_js x903 with | 2 -> `L_n_2 | _ -> assert false
    let (write : [ `L_n_3 ]) =
      let x904 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DocumentHighlightKind") "Write" in
      match Ojs.int_of_js x904 with | 3 -> `L_n_3 | _ -> assert false
  end
module DocumentHighlight =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x906 : Ojs.t) -> x906
    and t_to_js : t -> Ojs.t = fun (x905 : Ojs.t) -> x905
    let (get_range : t -> Range.t) =
      fun (x907 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x907) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x908 : t) ->
        fun (x909 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x908) "range" (Range.t_to_js x909)
    let (get_kind : t -> DocumentHighlightKind.t) =
      fun (x910 : t) ->
        DocumentHighlightKind.t_of_js
          (Ojs.get_prop_ascii (t_to_js x910) "kind")
    let (set_kind : t -> DocumentHighlightKind.t -> unit) =
      fun (x911 : t) ->
        fun (x912 : DocumentHighlightKind.t) ->
          Ojs.set_prop_ascii (t_to_js x911) "kind"
            (DocumentHighlightKind.t_to_js x912)
    let (create_ :
      range:Range.t -> ?kind:DocumentHighlightKind.t -> unit -> t) =
      fun ~range:(x913 : Range.t) ->
        fun ?kind:(x914 : DocumentHighlightKind.t option) ->
          fun () ->
            t_of_js
              (let x917 = Ojs.get_prop_ascii Ojs.global "DocumentHighlight" in
               Ojs.call (Ojs.get_prop_ascii x917 "create") "apply"
                 [|x917;((let x915 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x915 "push" [|(Range.t_to_js x913)|]);
                          (match x914 with
                           | Some x916 ->
                               ignore
                                 (Ojs.call x915 "push"
                                    [|(DocumentHighlightKind.t_to_js x916)|])
                           | None -> ());
                          x915))|])
  end
module SymbolKind =
  struct
    type t =
      [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | `L_n_7 
      | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
      | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
      | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24  | `L_n_25 
      | `L_n_26 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x919 : Ojs.t) ->
        let x920 = x919 in
        match Ojs.int_of_js x920 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | 22 -> `L_n_22
        | 23 -> `L_n_23
        | 24 -> `L_n_24
        | 25 -> `L_n_25
        | 26 -> `L_n_26
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x918 :
          [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
          | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
          | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
          | `L_n_19  | `L_n_20  | `L_n_21  | `L_n_22  | `L_n_23  | `L_n_24 
          | `L_n_25  | `L_n_26 ])
        ->
        match x918 with
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
        | `L_n_3 -> Ojs.int_to_js 3
        | `L_n_4 -> Ojs.int_to_js 4
        | `L_n_5 -> Ojs.int_to_js 5
        | `L_n_6 -> Ojs.int_to_js 6
        | `L_n_7 -> Ojs.int_to_js 7
        | `L_n_8 -> Ojs.int_to_js 8
        | `L_n_9 -> Ojs.int_to_js 9
        | `L_n_10 -> Ojs.int_to_js 10
        | `L_n_11 -> Ojs.int_to_js 11
        | `L_n_12 -> Ojs.int_to_js 12
        | `L_n_13 -> Ojs.int_to_js 13
        | `L_n_14 -> Ojs.int_to_js 14
        | `L_n_15 -> Ojs.int_to_js 15
        | `L_n_16 -> Ojs.int_to_js 16
        | `L_n_17 -> Ojs.int_to_js 17
        | `L_n_18 -> Ojs.int_to_js 18
        | `L_n_19 -> Ojs.int_to_js 19
        | `L_n_20 -> Ojs.int_to_js 20
        | `L_n_21 -> Ojs.int_to_js 21
        | `L_n_22 -> Ojs.int_to_js 22
        | `L_n_23 -> Ojs.int_to_js 23
        | `L_n_24 -> Ojs.int_to_js 24
        | `L_n_25 -> Ojs.int_to_js 25
        | `L_n_26 -> Ojs.int_to_js 26
    let (file : [ `L_n_1 ]) =
      let x921 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "File" in
      match Ojs.int_of_js x921 with | 1 -> `L_n_1 | _ -> assert false
    let (module_ : [ `L_n_2 ]) =
      let x922 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Module" in
      match Ojs.int_of_js x922 with | 2 -> `L_n_2 | _ -> assert false
    let (namespace : [ `L_n_3 ]) =
      let x923 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Namespace" in
      match Ojs.int_of_js x923 with | 3 -> `L_n_3 | _ -> assert false
    let (package : [ `L_n_4 ]) =
      let x924 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Package" in
      match Ojs.int_of_js x924 with | 4 -> `L_n_4 | _ -> assert false
    let (class_ : [ `L_n_5 ]) =
      let x925 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Class" in
      match Ojs.int_of_js x925 with | 5 -> `L_n_5 | _ -> assert false
    let (method_ : [ `L_n_6 ]) =
      let x926 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Method" in
      match Ojs.int_of_js x926 with | 6 -> `L_n_6 | _ -> assert false
    let (property : [ `L_n_7 ]) =
      let x927 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Property" in
      match Ojs.int_of_js x927 with | 7 -> `L_n_7 | _ -> assert false
    let (field : [ `L_n_8 ]) =
      let x928 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Field" in
      match Ojs.int_of_js x928 with | 8 -> `L_n_8 | _ -> assert false
    let (constructor : [ `L_n_9 ]) =
      let x929 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Constructor" in
      match Ojs.int_of_js x929 with | 9 -> `L_n_9 | _ -> assert false
    let (enum : [ `L_n_10 ]) =
      let x930 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Enum" in
      match Ojs.int_of_js x930 with | 10 -> `L_n_10 | _ -> assert false
    let (interface : [ `L_n_11 ]) =
      let x931 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Interface" in
      match Ojs.int_of_js x931 with | 11 -> `L_n_11 | _ -> assert false
    let (function_ : [ `L_n_12 ]) =
      let x932 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Function" in
      match Ojs.int_of_js x932 with | 12 -> `L_n_12 | _ -> assert false
    let (variable : [ `L_n_13 ]) =
      let x933 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Variable" in
      match Ojs.int_of_js x933 with | 13 -> `L_n_13 | _ -> assert false
    let (constant : [ `L_n_14 ]) =
      let x934 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Constant" in
      match Ojs.int_of_js x934 with | 14 -> `L_n_14 | _ -> assert false
    let (string : [ `L_n_15 ]) =
      let x935 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "String" in
      match Ojs.int_of_js x935 with | 15 -> `L_n_15 | _ -> assert false
    let (number : [ `L_n_16 ]) =
      let x936 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Number" in
      match Ojs.int_of_js x936 with | 16 -> `L_n_16 | _ -> assert false
    let (boolean : [ `L_n_17 ]) =
      let x937 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Boolean" in
      match Ojs.int_of_js x937 with | 17 -> `L_n_17 | _ -> assert false
    let (array : [ `L_n_18 ]) =
      let x938 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Array" in
      match Ojs.int_of_js x938 with | 18 -> `L_n_18 | _ -> assert false
    let (object_ : [ `L_n_19 ]) =
      let x939 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Object" in
      match Ojs.int_of_js x939 with | 19 -> `L_n_19 | _ -> assert false
    let (key : [ `L_n_20 ]) =
      let x940 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind") "Key" in
      match Ojs.int_of_js x940 with | 20 -> `L_n_20 | _ -> assert false
    let (null : [ `L_n_21 ]) =
      let x941 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Null" in
      match Ojs.int_of_js x941 with | 21 -> `L_n_21 | _ -> assert false
    let (enum_member : [ `L_n_22 ]) =
      let x942 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "EnumMember" in
      match Ojs.int_of_js x942 with | 22 -> `L_n_22 | _ -> assert false
    let (struct_ : [ `L_n_23 ]) =
      let x943 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Struct" in
      match Ojs.int_of_js x943 with | 23 -> `L_n_23 | _ -> assert false
    let (event : [ `L_n_24 ]) =
      let x944 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Event" in
      match Ojs.int_of_js x944 with | 24 -> `L_n_24 | _ -> assert false
    let (operator : [ `L_n_25 ]) =
      let x945 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "Operator" in
      match Ojs.int_of_js x945 with | 25 -> `L_n_25 | _ -> assert false
    let (type_parameter : [ `L_n_26 ]) =
      let x946 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolKind")
          "TypeParameter" in
      match Ojs.int_of_js x946 with | 26 -> `L_n_26 | _ -> assert false
  end
module SymbolTag =
  struct
    type t = [ `L_n_1 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x948 : Ojs.t) ->
        let x949 = x948 in
        match Ojs.int_of_js x949 with | 1 -> `L_n_1 | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x947 : [ `L_n_1 ]) -> match x947 with | `L_n_1 -> Ojs.int_to_js 1
    let (deprecated : [ `L_n_1 ]) =
      let x950 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SymbolTag")
          "Deprecated" in
      match Ojs.int_of_js x950 with | 1 -> `L_n_1 | _ -> assert false
  end
module SymbolInformation =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x952 : Ojs.t) -> x952
    and t_to_js : t -> Ojs.t = fun (x951 : Ojs.t) -> x951
    let (get_name : t -> string) =
      fun (x953 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x953) "name")
    let (set_name : t -> string -> unit) =
      fun (x954 : t) ->
        fun (x955 : string) ->
          Ojs.set_prop_ascii (t_to_js x954) "name" (Ojs.string_to_js x955)
    let (get_kind : t -> SymbolKind.t) =
      fun (x956 : t) ->
        SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x956) "kind")
    let (set_kind : t -> SymbolKind.t -> unit) =
      fun (x957 : t) ->
        fun (x958 : SymbolKind.t) ->
          Ojs.set_prop_ascii (t_to_js x957) "kind" (SymbolKind.t_to_js x958)
    let (get_tags : t -> SymbolTag.t list) =
      fun (x959 : t) ->
        Ojs.list_of_js SymbolTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x959) "tags")
    let (set_tags : t -> SymbolTag.t list -> unit) =
      fun (x961 : t) ->
        fun (x962 : SymbolTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x961) "tags"
            (Ojs.list_to_js SymbolTag.t_to_js x962)
    let (get_deprecated : t -> bool) =
      fun (x964 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x964) "deprecated")
    let (set_deprecated : t -> bool -> unit) =
      fun (x965 : t) ->
        fun (x966 : bool) ->
          Ojs.set_prop_ascii (t_to_js x965) "deprecated"
            (Ojs.bool_to_js x966)
    let (get_location : t -> Location.t) =
      fun (x967 : t) ->
        Location.t_of_js (Ojs.get_prop_ascii (t_to_js x967) "location")
    let (set_location : t -> Location.t -> unit) =
      fun (x968 : t) ->
        fun (x969 : Location.t) ->
          Ojs.set_prop_ascii (t_to_js x968) "location"
            (Location.t_to_js x969)
    let (get_container_name : t -> string) =
      fun (x970 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x970) "containerName")
    let (set_container_name : t -> string -> unit) =
      fun (x971 : t) ->
        fun (x972 : string) ->
          Ojs.set_prop_ascii (t_to_js x971) "containerName"
            (Ojs.string_to_js x972)
    let (create_ :
      name:string ->
        kind:SymbolKind.t ->
          range:Range.t -> ?uri:string -> ?container_name:string -> unit -> t)
      =
      fun ~name:(x973 : string) ->
        fun ~kind:(x974 : SymbolKind.t) ->
          fun ~range:(x975 : Range.t) ->
            fun ?uri:(x976 : string option) ->
              fun ?container_name:(x977 : string option) ->
                fun () ->
                  t_of_js
                    (let x981 =
                       Ojs.get_prop_ascii Ojs.global "SymbolInformation" in
                     Ojs.call (Ojs.get_prop_ascii x981 "create") "apply"
                       [|x981;((let x978 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x978 "push"
                                     [|(Ojs.string_to_js x973)|]);
                                ignore
                                  (Ojs.call x978 "push"
                                     [|(SymbolKind.t_to_js x974)|]);
                                ignore
                                  (Ojs.call x978 "push"
                                     [|(Range.t_to_js x975)|]);
                                (match x976 with
                                 | Some x980 ->
                                     ignore
                                       (Ojs.call x978 "push"
                                          [|(Ojs.string_to_js x980)|])
                                 | None -> ());
                                (match x977 with
                                 | Some x979 ->
                                     ignore
                                       (Ojs.call x978 "push"
                                          [|(Ojs.string_to_js x979)|])
                                 | None -> ());
                                x978))|])
  end
module DocumentSymbol =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x983 : Ojs.t) -> x983
    and t_to_js : t -> Ojs.t = fun (x982 : Ojs.t) -> x982
    let (get_name : t -> string) =
      fun (x984 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x984) "name")
    let (set_name : t -> string -> unit) =
      fun (x985 : t) ->
        fun (x986 : string) ->
          Ojs.set_prop_ascii (t_to_js x985) "name" (Ojs.string_to_js x986)
    let (get_detail : t -> string) =
      fun (x987 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x987) "detail")
    let (set_detail : t -> string -> unit) =
      fun (x988 : t) ->
        fun (x989 : string) ->
          Ojs.set_prop_ascii (t_to_js x988) "detail" (Ojs.string_to_js x989)
    let (get_kind : t -> SymbolKind.t) =
      fun (x990 : t) ->
        SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x990) "kind")
    let (set_kind : t -> SymbolKind.t -> unit) =
      fun (x991 : t) ->
        fun (x992 : SymbolKind.t) ->
          Ojs.set_prop_ascii (t_to_js x991) "kind" (SymbolKind.t_to_js x992)
    let (get_tags : t -> SymbolTag.t list) =
      fun (x993 : t) ->
        Ojs.list_of_js SymbolTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x993) "tags")
    let (set_tags : t -> SymbolTag.t list -> unit) =
      fun (x995 : t) ->
        fun (x996 : SymbolTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x995) "tags"
            (Ojs.list_to_js SymbolTag.t_to_js x996)
    let (get_deprecated : t -> bool) =
      fun (x998 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x998) "deprecated")
    let (set_deprecated : t -> bool -> unit) =
      fun (x999 : t) ->
        fun (x1000 : bool) ->
          Ojs.set_prop_ascii (t_to_js x999) "deprecated"
            (Ojs.bool_to_js x1000)
    let (get_range : t -> Range.t) =
      fun (x1001 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1001) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1002 : t) ->
        fun (x1003 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1002) "range" (Range.t_to_js x1003)
    let (get_selection_range : t -> Range.t) =
      fun (x1004 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1004) "selectionRange")
    let (set_selection_range : t -> Range.t -> unit) =
      fun (x1005 : t) ->
        fun (x1006 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1005) "selectionRange"
            (Range.t_to_js x1006)
    let (get_children : t -> t list) =
      fun (x1007 : t) ->
        Ojs.list_of_js t_of_js
          (Ojs.get_prop_ascii (t_to_js x1007) "children")
    let (set_children : t -> t list -> unit) =
      fun (x1009 : t) ->
        fun (x1010 : t list) ->
          Ojs.set_prop_ascii (t_to_js x1009) "children"
            (Ojs.list_to_js t_to_js x1010)
    let (create_ :
      name:string ->
        detail:string or_undefined ->
          kind:SymbolKind.t ->
            range:Range.t ->
              selection_range:Range.t -> ?children:t list -> unit -> t)
      =
      fun ~name:(x1012 : string) ->
        fun ~detail:(x1013 : string or_undefined) ->
          fun ~kind:(x1014 : SymbolKind.t) ->
            fun ~range:(x1015 : Range.t) ->
              fun ~selection_range:(x1016 : Range.t) ->
                fun ?children:(x1017 : t list option) ->
                  fun () ->
                    t_of_js
                      (let x1022 =
                         Ojs.get_prop_ascii Ojs.global "DocumentSymbol" in
                       Ojs.call (Ojs.get_prop_ascii x1022 "create") "apply"
                         [|x1022;((let x1018 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1018 "push"
                                        [|(Ojs.string_to_js x1012)|]);
                                   ignore
                                     (Ojs.call x1018 "push"
                                        [|(or_undefined_to_js
                                             Ojs.string_to_js x1013)|]);
                                   ignore
                                     (Ojs.call x1018 "push"
                                        [|(SymbolKind.t_to_js x1014)|]);
                                   ignore
                                     (Ojs.call x1018 "push"
                                        [|(Range.t_to_js x1015)|]);
                                   ignore
                                     (Ojs.call x1018 "push"
                                        [|(Range.t_to_js x1016)|]);
                                   (match x1017 with
                                    | Some x1019 ->
                                        ignore
                                          (Ojs.call x1018 "push"
                                             [|(Ojs.list_to_js t_to_js x1019)|])
                                    | None -> ());
                                   x1018))|])
    let (is : value:any -> bool) =
      fun ~value:(x1023 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DocumentSymbol") "is"
             [|(any_to_js x1023)|])
  end
module CodeActionKind =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x1025 : Ojs.t) -> Ojs.string_of_js x1025
    and t_to_js : t -> Ojs.t = fun (x1024 : string) -> Ojs.string_to_js x1024
    let (empty : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "Empty")
    let (quick_fix : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "QuickFix")
    let (refactor : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "Refactor")
    let (refactor_extract : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "RefactorExtract")
    let (refactor_inline : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "RefactorInline")
    let (refactor_rewrite : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "RefactorRewrite")
    let (source : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "Source")
    let (source_organize_imports : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "SourceOrganizeImports")
    let (source_fix_all : t) =
      t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CodeActionKind")
           "SourceFixAll")
  end
module CodeActionContext =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1027 : Ojs.t) -> x1027
    and t_to_js : t -> Ojs.t = fun (x1026 : Ojs.t) -> x1026
    let (get_diagnostics : t -> Diagnostic.t list) =
      fun (x1028 : t) ->
        Ojs.list_of_js Diagnostic.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1028) "diagnostics")
    let (set_diagnostics : t -> Diagnostic.t list -> unit) =
      fun (x1030 : t) ->
        fun (x1031 : Diagnostic.t list) ->
          Ojs.set_prop_ascii (t_to_js x1030) "diagnostics"
            (Ojs.list_to_js Diagnostic.t_to_js x1031)
    let (get_only : t -> CodeActionKind.t list) =
      fun (x1033 : t) ->
        Ojs.list_of_js CodeActionKind.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1033) "only")
    let (set_only : t -> CodeActionKind.t list -> unit) =
      fun (x1035 : t) ->
        fun (x1036 : CodeActionKind.t list) ->
          Ojs.set_prop_ascii (t_to_js x1035) "only"
            (Ojs.list_to_js CodeActionKind.t_to_js x1036)
    let (create_ :
      diagnostics:Diagnostic.t list ->
        ?only:CodeActionKind.t list -> unit -> t)
      =
      fun ~diagnostics:(x1038 : Diagnostic.t list) ->
        fun ?only:(x1039 : CodeActionKind.t list option) ->
          fun () ->
            t_of_js
              (let x1044 = Ojs.get_prop_ascii Ojs.global "CodeActionContext" in
               Ojs.call (Ojs.get_prop_ascii x1044 "create") "apply"
                 [|x1044;((let x1040 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1040 "push"
                                [|(Ojs.list_to_js Diagnostic.t_to_js x1038)|]);
                           (match x1039 with
                            | Some x1041 ->
                                ignore
                                  (Ojs.call x1040 "push"
                                     [|(Ojs.list_to_js CodeActionKind.t_to_js
                                          x1041)|])
                            | None -> ());
                           x1040))|])
    let (is : value:any -> bool) =
      fun ~value:(x1045 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeActionContext") "is"
             [|(any_to_js x1045)|])
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1047 : Ojs.t) -> x1047
    and t_to_js : t -> Ojs.t = fun (x1046 : Ojs.t) -> x1046
    let (get_reason : t -> string) =
      fun (x1048 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1048) "reason")
    let (set_reason : t -> string -> unit) =
      fun (x1049 : t) ->
        fun (x1050 : string) ->
          Ojs.set_prop_ascii (t_to_js x1049) "reason"
            (Ojs.string_to_js x1050)
  end
module CodeAction =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1052 : Ojs.t) -> x1052
    and t_to_js : t -> Ojs.t = fun (x1051 : Ojs.t) -> x1051
    let (get_title : t -> string) =
      fun (x1053 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1053) "title")
    let (set_title : t -> string -> unit) =
      fun (x1054 : t) ->
        fun (x1055 : string) ->
          Ojs.set_prop_ascii (t_to_js x1054) "title" (Ojs.string_to_js x1055)
    let (get_kind : t -> CodeActionKind.t) =
      fun (x1056 : t) ->
        CodeActionKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1056) "kind")
    let (set_kind : t -> CodeActionKind.t -> unit) =
      fun (x1057 : t) ->
        fun (x1058 : CodeActionKind.t) ->
          Ojs.set_prop_ascii (t_to_js x1057) "kind"
            (CodeActionKind.t_to_js x1058)
    let (get_diagnostics : t -> Diagnostic.t list) =
      fun (x1059 : t) ->
        Ojs.list_of_js Diagnostic.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1059) "diagnostics")
    let (set_diagnostics : t -> Diagnostic.t list -> unit) =
      fun (x1061 : t) ->
        fun (x1062 : Diagnostic.t list) ->
          Ojs.set_prop_ascii (t_to_js x1061) "diagnostics"
            (Ojs.list_to_js Diagnostic.t_to_js x1062)
    let (get_is_preferred : t -> bool) =
      fun (x1064 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1064) "isPreferred")
    let (set_is_preferred : t -> bool -> unit) =
      fun (x1065 : t) ->
        fun (x1066 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1065) "isPreferred"
            (Ojs.bool_to_js x1066)
    let (get_disabled : t -> AnonymousInterface1.t) =
      fun (x1067 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1067) "disabled")
    let (set_disabled : t -> AnonymousInterface1.t -> unit) =
      fun (x1068 : t) ->
        fun (x1069 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x1068) "disabled"
            (AnonymousInterface1.t_to_js x1069)
    let (get_edit : t -> WorkspaceEdit.t) =
      fun (x1070 : t) ->
        WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1070) "edit")
    let (set_edit : t -> WorkspaceEdit.t -> unit) =
      fun (x1071 : t) ->
        fun (x1072 : WorkspaceEdit.t) ->
          Ojs.set_prop_ascii (t_to_js x1071) "edit"
            (WorkspaceEdit.t_to_js x1072)
    let (get_command : t -> Command.t) =
      fun (x1073 : t) ->
        Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1073) "command")
    let (set_command : t -> Command.t -> unit) =
      fun (x1074 : t) ->
        fun (x1075 : Command.t) ->
          Ojs.set_prop_ascii (t_to_js x1074) "command"
            (Command.t_to_js x1075)
    let (get_data : t -> unknown) =
      fun (x1076 : t) ->
        unknown_of_js (Ojs.get_prop_ascii (t_to_js x1076) "data")
    let (set_data : t -> unknown -> unit) =
      fun (x1077 : t) ->
        fun (x1078 : unknown) ->
          Ojs.set_prop_ascii (t_to_js x1077) "data" (unknown_to_js x1078)
    let (create_ : title:string -> ?kind:CodeActionKind.t -> unit -> t) =
      fun ~title:(x1079 : string) ->
        fun ?kind:(x1080 : CodeActionKind.t option) ->
          fun () ->
            t_of_js
              (let x1083 = Ojs.get_prop_ascii Ojs.global "CodeAction" in
               Ojs.call (Ojs.get_prop_ascii x1083 "create") "apply"
                 [|x1083;((let x1081 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1081 "push"
                                [|(Ojs.string_to_js x1079)|]);
                           (match x1080 with
                            | Some x1082 ->
                                ignore
                                  (Ojs.call x1081 "push"
                                     [|(CodeActionKind.t_to_js x1082)|])
                            | None -> ());
                           x1081))|])
    let (create_'' :
      title:string ->
        command:Command.t -> ?kind:CodeActionKind.t -> unit -> t)
      =
      fun ~title:(x1084 : string) ->
        fun ~command:(x1085 : Command.t) ->
          fun ?kind:(x1086 : CodeActionKind.t option) ->
            fun () ->
              t_of_js
                (let x1089 = Ojs.get_prop_ascii Ojs.global "CodeAction" in
                 Ojs.call (Ojs.get_prop_ascii x1089 "create") "apply"
                   [|x1089;((let x1087 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1087 "push"
                                  [|(Ojs.string_to_js x1084)|]);
                             ignore
                               (Ojs.call x1087 "push"
                                  [|(Command.t_to_js x1085)|]);
                             (match x1086 with
                              | Some x1088 ->
                                  ignore
                                    (Ojs.call x1087 "push"
                                       [|(CodeActionKind.t_to_js x1088)|])
                              | None -> ());
                             x1087))|])
    let (create_'' :
      title:string ->
        edit:WorkspaceEdit.t -> ?kind:CodeActionKind.t -> unit -> t)
      =
      fun ~title:(x1090 : string) ->
        fun ~edit:(x1091 : WorkspaceEdit.t) ->
          fun ?kind:(x1092 : CodeActionKind.t option) ->
            fun () ->
              t_of_js
                (let x1095 = Ojs.get_prop_ascii Ojs.global "CodeAction" in
                 Ojs.call (Ojs.get_prop_ascii x1095 "create") "apply"
                   [|x1095;((let x1093 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1093 "push"
                                  [|(Ojs.string_to_js x1090)|]);
                             ignore
                               (Ojs.call x1093 "push"
                                  [|(WorkspaceEdit.t_to_js x1091)|]);
                             (match x1092 with
                              | Some x1094 ->
                                  ignore
                                    (Ojs.call x1093 "push"
                                       [|(CodeActionKind.t_to_js x1094)|])
                              | None -> ());
                             x1093))|])
    let (is : value:any -> bool) =
      fun ~value:(x1096 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeAction") "is"
             [|(any_to_js x1096)|])
  end
module CodeLens =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1098 : Ojs.t) -> x1098
    and t_to_js : t -> Ojs.t = fun (x1097 : Ojs.t) -> x1097
    let (get_range : t -> Range.t) =
      fun (x1099 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1099) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1100 : t) ->
        fun (x1101 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1100) "range" (Range.t_to_js x1101)
    let (get_command : t -> Command.t) =
      fun (x1102 : t) ->
        Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1102) "command")
    let (set_command : t -> Command.t -> unit) =
      fun (x1103 : t) ->
        fun (x1104 : Command.t) ->
          Ojs.set_prop_ascii (t_to_js x1103) "command"
            (Command.t_to_js x1104)
    let (get_data : t -> any) =
      fun (x1105 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x1105) "data")
    let (set_data : t -> any -> unit) =
      fun (x1106 : t) ->
        fun (x1107 : any) ->
          Ojs.set_prop_ascii (t_to_js x1106) "data" (any_to_js x1107)
    let (create_ : range:Range.t -> ?data:any -> unit -> t) =
      fun ~range:(x1108 : Range.t) ->
        fun ?data:(x1109 : any option) ->
          fun () ->
            t_of_js
              (let x1112 = Ojs.get_prop_ascii Ojs.global "CodeLens" in
               Ojs.call (Ojs.get_prop_ascii x1112 "create") "apply"
                 [|x1112;((let x1110 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1110 "push" [|(Range.t_to_js x1108)|]);
                           (match x1109 with
                            | Some x1111 ->
                                ignore
                                  (Ojs.call x1110 "push"
                                     [|(any_to_js x1111)|])
                            | None -> ());
                           x1110))|])
    let (is : value:any -> bool) =
      fun ~value:(x1113 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "CodeLens") "is"
             [|(any_to_js x1113)|])
  end
module FormattingOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1115 : Ojs.t) -> x1115
    and t_to_js : t -> Ojs.t = fun (x1114 : Ojs.t) -> x1114
    let (get_tab_size : t -> Uinteger.t) =
      fun (x1116 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x1116) "tabSize")
    let (set_tab_size : t -> Uinteger.t -> unit) =
      fun (x1117 : t) ->
        fun (x1118 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x1117) "tabSize"
            (Uinteger.t_to_js x1118)
    let (get_insert_spaces : t -> bool) =
      fun (x1119 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1119) "insertSpaces")
    let (set_insert_spaces : t -> bool -> unit) =
      fun (x1120 : t) ->
        fun (x1121 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1120) "insertSpaces"
            (Ojs.bool_to_js x1121)
    let (get_trim_trailing_whitespace : t -> bool) =
      fun (x1122 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x1122) "trimTrailingWhitespace")
    let (set_trim_trailing_whitespace : t -> bool -> unit) =
      fun (x1123 : t) ->
        fun (x1124 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1123) "trimTrailingWhitespace"
            (Ojs.bool_to_js x1124)
    let (get_insert_final_newline : t -> bool) =
      fun (x1125 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x1125) "insertFinalNewline")
    let (set_insert_final_newline : t -> bool -> unit) =
      fun (x1126 : t) ->
        fun (x1127 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1126) "insertFinalNewline"
            (Ojs.bool_to_js x1127)
    let (get_trim_final_newlines : t -> bool) =
      fun (x1128 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x1128) "trimFinalNewlines")
    let (set_trim_final_newlines : t -> bool -> unit) =
      fun (x1129 : t) ->
        fun (x1130 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1129) "trimFinalNewlines"
            (Ojs.bool_to_js x1130)
    let (get : t -> string -> Integer.t or_boolean or_string or_undefined) =
      fun (x1131 : t) ->
        fun (x1132 : string) ->
          or_undefined_of_js
            (fun (x1133 : Ojs.t) ->
               or_string_of_js
                 (fun (x1134 : Ojs.t) ->
                    or_boolean_of_js Integer.t_of_js x1134) x1133)
            (Ojs.get_prop (t_to_js x1131) (Ojs.string_to_js x1132))
    let (set :
      t -> string -> Integer.t or_boolean or_string or_undefined -> unit) =
      fun (x1136 : t) ->
        fun (x1137 : string) ->
          fun (x1138 : Integer.t or_boolean or_string or_undefined) ->
            Ojs.set_prop (t_to_js x1136) (Ojs.string_to_js x1137)
              (or_undefined_to_js
                 (fun (x1139 : Integer.t or_boolean or_string) ->
                    or_string_to_js
                      (fun (x1140 : Integer.t or_boolean) ->
                         or_boolean_to_js Integer.t_to_js x1140) x1139) x1138)
    let (create_ : tab_size:Uinteger.t -> insert_spaces:bool -> t) =
      fun ~tab_size:(x1142 : Uinteger.t) ->
        fun ~insert_spaces:(x1143 : bool) ->
          t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "FormattingOptions")
               "create" [|(Uinteger.t_to_js x1142);(Ojs.bool_to_js x1143)|])
    let (is : value:any -> bool) =
      fun ~value:(x1144 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "FormattingOptions") "is"
             [|(any_to_js x1144)|])
  end
module DocumentLink =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1146 : Ojs.t) -> x1146
    and t_to_js : t -> Ojs.t = fun (x1145 : Ojs.t) -> x1145
    let (get_range : t -> Range.t) =
      fun (x1147 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1147) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1148 : t) ->
        fun (x1149 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1148) "range" (Range.t_to_js x1149)
    let (get_target : t -> string) =
      fun (x1150 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1150) "target")
    let (set_target : t -> string -> unit) =
      fun (x1151 : t) ->
        fun (x1152 : string) ->
          Ojs.set_prop_ascii (t_to_js x1151) "target"
            (Ojs.string_to_js x1152)
    let (get_tooltip : t -> string) =
      fun (x1153 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1153) "tooltip")
    let (set_tooltip : t -> string -> unit) =
      fun (x1154 : t) ->
        fun (x1155 : string) ->
          Ojs.set_prop_ascii (t_to_js x1154) "tooltip"
            (Ojs.string_to_js x1155)
    let (get_data : t -> any) =
      fun (x1156 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x1156) "data")
    let (set_data : t -> any -> unit) =
      fun (x1157 : t) ->
        fun (x1158 : any) ->
          Ojs.set_prop_ascii (t_to_js x1157) "data" (any_to_js x1158)
    let (create_ : range:Range.t -> ?target:string -> ?data:any -> unit -> t)
      =
      fun ~range:(x1159 : Range.t) ->
        fun ?target:(x1160 : string option) ->
          fun ?data:(x1161 : any option) ->
            fun () ->
              t_of_js
                (let x1165 = Ojs.get_prop_ascii Ojs.global "DocumentLink" in
                 Ojs.call (Ojs.get_prop_ascii x1165 "create") "apply"
                   [|x1165;((let x1162 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1162 "push"
                                  [|(Range.t_to_js x1159)|]);
                             (match x1160 with
                              | Some x1164 ->
                                  ignore
                                    (Ojs.call x1162 "push"
                                       [|(Ojs.string_to_js x1164)|])
                              | None -> ());
                             (match x1161 with
                              | Some x1163 ->
                                  ignore
                                    (Ojs.call x1162 "push"
                                       [|(any_to_js x1163)|])
                              | None -> ());
                             x1162))|])
    let (is : value:any -> bool) =
      fun ~value:(x1166 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DocumentLink") "is"
             [|(any_to_js x1166)|])
  end
module SelectionRange =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1168 : Ojs.t) -> x1168
    and t_to_js : t -> Ojs.t = fun (x1167 : Ojs.t) -> x1167
    let (get_range : t -> Range.t) =
      fun (x1169 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1169) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1170 : t) ->
        fun (x1171 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1170) "range" (Range.t_to_js x1171)
    let (get_parent : t -> t) =
      fun (x1172 : t) ->
        t_of_js (Ojs.get_prop_ascii (t_to_js x1172) "parent")
    let (set_parent : t -> t -> unit) =
      fun (x1173 : t) ->
        fun (x1174 : t) ->
          Ojs.set_prop_ascii (t_to_js x1173) "parent" (t_to_js x1174)
    let (create_ : range:Range.t -> ?parent:t -> unit -> t) =
      fun ~range:(x1175 : Range.t) ->
        fun ?parent:(x1176 : t option) ->
          fun () ->
            t_of_js
              (let x1179 = Ojs.get_prop_ascii Ojs.global "SelectionRange" in
               Ojs.call (Ojs.get_prop_ascii x1179 "create") "apply"
                 [|x1179;((let x1177 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1177 "push" [|(Range.t_to_js x1175)|]);
                           (match x1176 with
                            | Some x1178 ->
                                ignore
                                  (Ojs.call x1177 "push" [|(t_to_js x1178)|])
                            | None -> ());
                           x1177))|])
    let (is : value:any -> bool) =
      fun ~value:(x1180 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "SelectionRange") "is"
             [|(any_to_js x1180)|])
  end
module CallHierarchyItem =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1182 : Ojs.t) -> x1182
    and t_to_js : t -> Ojs.t = fun (x1181 : Ojs.t) -> x1181
    let (get_name : t -> string) =
      fun (x1183 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1183) "name")
    let (set_name : t -> string -> unit) =
      fun (x1184 : t) ->
        fun (x1185 : string) ->
          Ojs.set_prop_ascii (t_to_js x1184) "name" (Ojs.string_to_js x1185)
    let (get_kind : t -> SymbolKind.t) =
      fun (x1186 : t) ->
        SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1186) "kind")
    let (set_kind : t -> SymbolKind.t -> unit) =
      fun (x1187 : t) ->
        fun (x1188 : SymbolKind.t) ->
          Ojs.set_prop_ascii (t_to_js x1187) "kind"
            (SymbolKind.t_to_js x1188)
    let (get_tags : t -> SymbolTag.t list) =
      fun (x1189 : t) ->
        Ojs.list_of_js SymbolTag.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1189) "tags")
    let (set_tags : t -> SymbolTag.t list -> unit) =
      fun (x1191 : t) ->
        fun (x1192 : SymbolTag.t list) ->
          Ojs.set_prop_ascii (t_to_js x1191) "tags"
            (Ojs.list_to_js SymbolTag.t_to_js x1192)
    let (get_detail : t -> string) =
      fun (x1194 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1194) "detail")
    let (set_detail : t -> string -> unit) =
      fun (x1195 : t) ->
        fun (x1196 : string) ->
          Ojs.set_prop_ascii (t_to_js x1195) "detail"
            (Ojs.string_to_js x1196)
    let (get_uri : t -> DocumentUri.t) =
      fun (x1197 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x1197) "uri")
    let (set_uri : t -> DocumentUri.t -> unit) =
      fun (x1198 : t) ->
        fun (x1199 : DocumentUri.t) ->
          Ojs.set_prop_ascii (t_to_js x1198) "uri"
            (DocumentUri.t_to_js x1199)
    let (get_range : t -> Range.t) =
      fun (x1200 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1200) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x1201 : t) ->
        fun (x1202 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1201) "range" (Range.t_to_js x1202)
    let (get_selection_range : t -> Range.t) =
      fun (x1203 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1203) "selectionRange")
    let (set_selection_range : t -> Range.t -> unit) =
      fun (x1204 : t) ->
        fun (x1205 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x1204) "selectionRange"
            (Range.t_to_js x1205)
    let (get_data : t -> unknown) =
      fun (x1206 : t) ->
        unknown_of_js (Ojs.get_prop_ascii (t_to_js x1206) "data")
    let (set_data : t -> unknown -> unit) =
      fun (x1207 : t) ->
        fun (x1208 : unknown) ->
          Ojs.set_prop_ascii (t_to_js x1207) "data" (unknown_to_js x1208)
  end
module CallHierarchyIncomingCall =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1210 : Ojs.t) -> x1210
    and t_to_js : t -> Ojs.t = fun (x1209 : Ojs.t) -> x1209
    let (get_from : t -> CallHierarchyItem.t) =
      fun (x1211 : t) ->
        CallHierarchyItem.t_of_js (Ojs.get_prop_ascii (t_to_js x1211) "from")
    let (set_from : t -> CallHierarchyItem.t -> unit) =
      fun (x1212 : t) ->
        fun (x1213 : CallHierarchyItem.t) ->
          Ojs.set_prop_ascii (t_to_js x1212) "from"
            (CallHierarchyItem.t_to_js x1213)
    let (get_from_ranges : t -> Range.t list) =
      fun (x1214 : t) ->
        Ojs.list_of_js Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1214) "fromRanges")
    let (set_from_ranges : t -> Range.t list -> unit) =
      fun (x1216 : t) ->
        fun (x1217 : Range.t list) ->
          Ojs.set_prop_ascii (t_to_js x1216) "fromRanges"
            (Ojs.list_to_js Range.t_to_js x1217)
  end
module CallHierarchyOutgoingCall =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1220 : Ojs.t) -> x1220
    and t_to_js : t -> Ojs.t = fun (x1219 : Ojs.t) -> x1219
    let (get_to : t -> CallHierarchyItem.t) =
      fun (x1221 : t) ->
        CallHierarchyItem.t_of_js (Ojs.get_prop_ascii (t_to_js x1221) "to")
    let (set_to : t -> CallHierarchyItem.t -> unit) =
      fun (x1222 : t) ->
        fun (x1223 : CallHierarchyItem.t) ->
          Ojs.set_prop_ascii (t_to_js x1222) "to"
            (CallHierarchyItem.t_to_js x1223)
    let (get_from_ranges : t -> Range.t list) =
      fun (x1224 : t) ->
        Ojs.list_of_js Range.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1224) "fromRanges")
    let (set_from_ranges : t -> Range.t list -> unit) =
      fun (x1226 : t) ->
        fun (x1227 : Range.t list) ->
          Ojs.set_prop_ascii (t_to_js x1226) "fromRanges"
            (Ojs.list_to_js Range.t_to_js x1227)
  end
module SemanticTokenTypes =
  struct
    type t =
      [ `namespace  | `type_  | `class_  | `enum  | `interface  | `struct_ 
      | `typeParameter  | `parameter  | `variable  | `property 
      | `enumMember  | `event  | `function_  | `method_  | `macro 
      | `keyword  | `modifier  | `comment  | `string  | `number  | `regexp 
      | `operator ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1230 : Ojs.t) ->
        let x1231 = x1230 in
        match Ojs.string_of_js x1231 with
        | "namespace" -> `namespace
        | "type" -> `type_
        | "class" -> `class_
        | "enum" -> `enum
        | "interface" -> `interface
        | "struct" -> `struct_
        | "typeParameter" -> `typeParameter
        | "parameter" -> `parameter
        | "variable" -> `variable
        | "property" -> `property
        | "enumMember" -> `enumMember
        | "event" -> `event
        | "function" -> `function_
        | "method" -> `method_
        | "macro" -> `macro
        | "keyword" -> `keyword
        | "modifier" -> `modifier
        | "comment" -> `comment
        | "string" -> `string
        | "number" -> `number
        | "regexp" -> `regexp
        | "operator" -> `operator
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1229 :
          [ `namespace  | `type_  | `class_  | `enum  | `interface 
          | `struct_  | `typeParameter  | `parameter  | `variable 
          | `property  | `enumMember  | `event  | `function_  | `method_ 
          | `macro  | `keyword  | `modifier  | `comment  | `string 
          | `number  | `regexp  | `operator ])
        ->
        match x1229 with
        | `namespace -> Ojs.string_to_js "namespace"
        | `type_ -> Ojs.string_to_js "type"
        | `class_ -> Ojs.string_to_js "class"
        | `enum -> Ojs.string_to_js "enum"
        | `interface -> Ojs.string_to_js "interface"
        | `struct_ -> Ojs.string_to_js "struct"
        | `typeParameter -> Ojs.string_to_js "typeParameter"
        | `parameter -> Ojs.string_to_js "parameter"
        | `variable -> Ojs.string_to_js "variable"
        | `property -> Ojs.string_to_js "property"
        | `enumMember -> Ojs.string_to_js "enumMember"
        | `event -> Ojs.string_to_js "event"
        | `function_ -> Ojs.string_to_js "function"
        | `method_ -> Ojs.string_to_js "method"
        | `macro -> Ojs.string_to_js "macro"
        | `keyword -> Ojs.string_to_js "keyword"
        | `modifier -> Ojs.string_to_js "modifier"
        | `comment -> Ojs.string_to_js "comment"
        | `string -> Ojs.string_to_js "string"
        | `number -> Ojs.string_to_js "number"
        | `regexp -> Ojs.string_to_js "regexp"
        | `operator -> Ojs.string_to_js "operator"
  end
module SemanticTokenModifiers =
  struct
    type t =
      [ `declaration  | `definition  | `readonly  | `static  | `deprecated 
      | `abstract  | `async  | `modification  | `documentation 
      | `defaultLibrary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1233 : Ojs.t) ->
        let x1234 = x1233 in
        match Ojs.string_of_js x1234 with
        | "declaration" -> `declaration
        | "definition" -> `definition
        | "readonly" -> `readonly
        | "static" -> `static
        | "deprecated" -> `deprecated
        | "abstract" -> `abstract
        | "async" -> `async
        | "modification" -> `modification
        | "documentation" -> `documentation
        | "defaultLibrary" -> `defaultLibrary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1232 :
          [ `declaration  | `definition  | `readonly  | `static 
          | `deprecated  | `abstract  | `async  | `modification 
          | `documentation  | `defaultLibrary ])
        ->
        match x1232 with
        | `declaration -> Ojs.string_to_js "declaration"
        | `definition -> Ojs.string_to_js "definition"
        | `readonly -> Ojs.string_to_js "readonly"
        | `static -> Ojs.string_to_js "static"
        | `deprecated -> Ojs.string_to_js "deprecated"
        | `abstract -> Ojs.string_to_js "abstract"
        | `async -> Ojs.string_to_js "async"
        | `modification -> Ojs.string_to_js "modification"
        | `documentation -> Ojs.string_to_js "documentation"
        | `defaultLibrary -> Ojs.string_to_js "defaultLibrary"
  end
module SemanticTokensLegend =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1236 : Ojs.t) -> x1236
    and t_to_js : t -> Ojs.t = fun (x1235 : Ojs.t) -> x1235
    let (get_token_types : t -> string list) =
      fun (x1237 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x1237) "tokenTypes")
    let (set_token_types : t -> string list -> unit) =
      fun (x1239 : t) ->
        fun (x1240 : string list) ->
          Ojs.set_prop_ascii (t_to_js x1239) "tokenTypes"
            (Ojs.list_to_js Ojs.string_to_js x1240)
    let (get_token_modifiers : t -> string list) =
      fun (x1242 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x1242) "tokenModifiers")
    let (set_token_modifiers : t -> string list -> unit) =
      fun (x1244 : t) ->
        fun (x1245 : string list) ->
          Ojs.set_prop_ascii (t_to_js x1244) "tokenModifiers"
            (Ojs.list_to_js Ojs.string_to_js x1245)
  end
module SemanticTokens =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1248 : Ojs.t) -> x1248
    and t_to_js : t -> Ojs.t = fun (x1247 : Ojs.t) -> x1247
    let (get_result_id : t -> string) =
      fun (x1249 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1249) "resultId")
    let (set_result_id : t -> string -> unit) =
      fun (x1250 : t) ->
        fun (x1251 : string) ->
          Ojs.set_prop_ascii (t_to_js x1250) "resultId"
            (Ojs.string_to_js x1251)
    let (get_data : t -> Uinteger.t list) =
      fun (x1252 : t) ->
        Ojs.list_of_js Uinteger.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1252) "data")
    let (set_data : t -> Uinteger.t list -> unit) =
      fun (x1254 : t) ->
        fun (x1255 : Uinteger.t list) ->
          Ojs.set_prop_ascii (t_to_js x1254) "data"
            (Ojs.list_to_js Uinteger.t_to_js x1255)
    let (is : value:any -> bool) =
      fun ~value:(x1257 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "SemanticTokens") "is"
             [|(any_to_js x1257)|])
  end
module SemanticTokensEdit =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1259 : Ojs.t) -> x1259
    and t_to_js : t -> Ojs.t = fun (x1258 : Ojs.t) -> x1258
    let (get_start : t -> Uinteger.t) =
      fun (x1260 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x1260) "start")
    let (set_start : t -> Uinteger.t -> unit) =
      fun (x1261 : t) ->
        fun (x1262 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x1261) "start" (Uinteger.t_to_js x1262)
    let (get_delete_count : t -> Uinteger.t) =
      fun (x1263 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x1263) "deleteCount")
    let (set_delete_count : t -> Uinteger.t -> unit) =
      fun (x1264 : t) ->
        fun (x1265 : Uinteger.t) ->
          Ojs.set_prop_ascii (t_to_js x1264) "deleteCount"
            (Uinteger.t_to_js x1265)
    let (get_data : t -> Uinteger.t list) =
      fun (x1266 : t) ->
        Ojs.list_of_js Uinteger.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1266) "data")
    let (set_data : t -> Uinteger.t list -> unit) =
      fun (x1268 : t) ->
        fun (x1269 : Uinteger.t list) ->
          Ojs.set_prop_ascii (t_to_js x1268) "data"
            (Ojs.list_to_js Uinteger.t_to_js x1269)
  end
module SemanticTokensDelta =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1272 : Ojs.t) -> x1272
    and t_to_js : t -> Ojs.t = fun (x1271 : Ojs.t) -> x1271
    let (get_result_id : t -> string) =
      fun (x1273 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1273) "resultId")
    let (get_edits : t -> SemanticTokensEdit.t list) =
      fun (x1274 : t) ->
        Ojs.list_of_js SemanticTokensEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1274) "edits")
    let (set_edits : t -> SemanticTokensEdit.t list -> unit) =
      fun (x1276 : t) ->
        fun (x1277 : SemanticTokensEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x1276) "edits"
            (Ojs.list_to_js SemanticTokensEdit.t_to_js x1277)
  end
let (e_ol : string list) =
  Ojs.list_of_js Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "EOL")
module TextDocument =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1281 : Ojs.t) -> x1281
    and t_to_js : t -> Ojs.t = fun (x1280 : Ojs.t) -> x1280
    let (get_uri : t -> DocumentUri.t) =
      fun (x1282 : t) ->
        DocumentUri.t_of_js (Ojs.get_prop_ascii (t_to_js x1282) "uri")
    let (get_language_id : t -> string) =
      fun (x1283 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1283) "languageId")
    let (get_version : t -> Integer.t) =
      fun (x1284 : t) ->
        Integer.t_of_js (Ojs.get_prop_ascii (t_to_js x1284) "version")
    let (get_text : t -> ?range:Range.t -> unit -> string) =
      fun (x1288 : t) ->
        fun ?range:(x1285 : Range.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x1289 = t_to_js x1288 in
               Ojs.call (Ojs.get_prop_ascii x1289 "getText") "apply"
                 [|x1289;((let x1286 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1285 with
                            | Some x1287 ->
                                ignore
                                  (Ojs.call x1286 "push"
                                     [|(Range.t_to_js x1287)|])
                            | None -> ());
                           x1286))|])
    let (position_at : t -> offset:Uinteger.t -> Position.t) =
      fun (x1291 : t) ->
        fun ~offset:(x1290 : Uinteger.t) ->
          Position.t_of_js
            (Ojs.call (t_to_js x1291) "positionAt"
               [|(Uinteger.t_to_js x1290)|])
    let (offset_at : t -> position:Position.t -> Uinteger.t) =
      fun (x1293 : t) ->
        fun ~position:(x1292 : Position.t) ->
          Uinteger.t_of_js
            (Ojs.call (t_to_js x1293) "offsetAt" [|(Position.t_to_js x1292)|])
    let (get_line_count : t -> Uinteger.t) =
      fun (x1294 : t) ->
        Uinteger.t_of_js (Ojs.get_prop_ascii (t_to_js x1294) "lineCount")
    let (create_ :
      uri:DocumentUri.t ->
        language_id:string -> version:Integer.t -> content:string -> t)
      =
      fun ~uri:(x1295 : DocumentUri.t) ->
        fun ~language_id:(x1296 : string) ->
          fun ~version:(x1297 : Integer.t) ->
            fun ~content:(x1298 : string) ->
              t_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocument")
                   "create"
                   [|(DocumentUri.t_to_js x1295);(Ojs.string_to_js x1296);(
                     Integer.t_to_js x1297);(Ojs.string_to_js x1298)|])
    let (is : value:any -> bool) =
      fun ~value:(x1299 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocument") "is"
             [|(any_to_js x1299)|])
    let (apply_edits : document:t -> edits:TextEdit.t list -> string) =
      fun ~document:(x1300 : t) ->
        fun ~edits:(x1301 : TextEdit.t list) ->
          Ojs.string_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "TextDocument")
               "applyEdits"
               [|(t_to_js x1300);(Ojs.list_to_js TextEdit.t_to_js x1301)|])
  end
