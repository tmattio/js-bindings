[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2016
module SharedArrayBuffer =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_byte_length : t -> int) =
      fun (x3 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3) "byteLength")
    let (slice : t -> begin_:int -> ?end_:int -> unit -> t) =
      fun (x8 : t) ->
        fun ~begin_:(x4 : int) ->
          fun ?end_:(x5 : int option) ->
            fun () ->
              t_of_js
                (let x9 = t_to_js x8 in
                 Ojs.call (Ojs.get_prop_ascii x9 "slice") "apply"
                   [|x9;((let x6 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore (Ojs.call x6 "push" [|(Ojs.int_to_js x4)|]);
                          (match x5 with
                           | Some x7 ->
                               ignore
                                 (Ojs.call x6 "push" [|(Ojs.int_to_js x7)|])
                           | None -> ());
                          x6))|])
    let (create : byte_length:int -> t) =
      fun ~byte_length:(x10 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SharedArrayBuffer")
             [|(Ojs.int_to_js x10)|])
  end
module SharedArrayBufferConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x12 : Ojs.t) -> x12
    and t_to_js : t -> Ojs.t = fun (x11 : Ojs.t) -> x11
    let (get_prototype : t -> SharedArrayBuffer.t) =
      fun (x13 : t) ->
        SharedArrayBuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x13) "prototype")
    let (create : t -> byte_length:int -> SharedArrayBuffer.t) =
      fun (x15 : t) ->
        fun ~byte_length:(x14 : int) ->
          SharedArrayBuffer.t_of_js
            (Ojs.new_obj (t_to_js x15) [|(Ojs.int_to_js x14)|])
  end
let (shared_array_buffer : SharedArrayBufferConstructor.t) =
  SharedArrayBufferConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "SharedArrayBuffer")
module ArrayBufferTypes =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x17 : Ojs.t) -> x17
    and t_to_js : t -> Ojs.t = fun (x16 : Ojs.t) -> x16
    let (get_shared_array_buffer : t -> SharedArrayBuffer.t) =
      fun (x18 : t) ->
        SharedArrayBuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x18) "SharedArrayBuffer")
    let (set_shared_array_buffer : t -> SharedArrayBuffer.t -> unit) =
      fun (x19 : t) ->
        fun (x20 : SharedArrayBuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x19) "SharedArrayBuffer"
            (SharedArrayBuffer.t_to_js x20)
  end
module Atomics =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x22 : Ojs.t) -> x22
    and t_to_js : t -> Ojs.t = fun (x21 : Ojs.t) -> x21
    let (add :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> value:int -> int)
      =
      fun (x32 : t) ->
        fun
          ~typed_array:(x23 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x30 : int) ->
            fun ~value:(x31 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x32) "add"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x23);(
                     Ojs.int_to_js x30);(Ojs.int_to_js x31)|])
    let (and_ :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> value:int -> int)
      =
      fun (x42 : t) ->
        fun
          ~typed_array:(x33 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x40 : int) ->
            fun ~value:(x41 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x42) "and"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x33);(
                     Ojs.int_to_js x40);(Ojs.int_to_js x41)|])
    let (compare_exchange :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> expected_value:int -> replacement_value:int -> int)
      =
      fun (x53 : t) ->
        fun
          ~typed_array:(x43 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x50 : int) ->
            fun ~expected_value:(x51 : int) ->
              fun ~replacement_value:(x52 : int) ->
                Ojs.int_of_js
                  (Ojs.call (t_to_js x53) "compareExchange"
                     [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                          Int8Array.t_to_js Uint16Array.t_to_js
                          Uint32Array.t_to_js Uint8Array.t_to_js x43);(
                       Ojs.int_to_js x50);(Ojs.int_to_js x51);(Ojs.int_to_js
                                                                 x52)|])
    let (exchange :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> value:int -> int)
      =
      fun (x63 : t) ->
        fun
          ~typed_array:(x54 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x61 : int) ->
            fun ~value:(x62 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x63) "exchange"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x54);(
                     Ojs.int_to_js x61);(Ojs.int_to_js x62)|])
    let (is_lock_free : t -> size:int -> bool) =
      fun (x65 : t) ->
        fun ~size:(x64 : int) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x65) "isLockFree" [|(Ojs.int_to_js x64)|])
    let (load :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 -> index:int -> int)
      =
      fun (x74 : t) ->
        fun
          ~typed_array:(x66 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x73 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x74) "load"
                 [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                      Int8Array.t_to_js Uint16Array.t_to_js
                      Uint32Array.t_to_js Uint8Array.t_to_js x66);(Ojs.int_to_js
                                                                    x73)|])
    let (or_ :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> value:int -> int)
      =
      fun (x84 : t) ->
        fun
          ~typed_array:(x75 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x82 : int) ->
            fun ~value:(x83 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x84) "or"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x75);(
                     Ojs.int_to_js x82);(Ojs.int_to_js x83)|])
    let (store :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> value:int -> int)
      =
      fun (x94 : t) ->
        fun
          ~typed_array:(x85 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x92 : int) ->
            fun ~value:(x93 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x94) "store"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x85);(
                     Ojs.int_to_js x92);(Ojs.int_to_js x93)|])
    let (sub :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> value:int -> int)
      =
      fun (x104 : t) ->
        fun
          ~typed_array:(x95 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x102 : int) ->
            fun ~value:(x103 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x104) "sub"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x95);(
                     Ojs.int_to_js x102);(Ojs.int_to_js x103)|])
    let (wait :
      t ->
        typed_array:Int32Array.t ->
          index:int ->
            value:int ->
              ?timeout:int -> unit -> [ `not_equal  | `ok  | `timed_out ])
      =
      fun (x111 : t) ->
        fun ~typed_array:(x105 : Int32Array.t) ->
          fun ~index:(x106 : int) ->
            fun ~value:(x107 : int) ->
              fun ?timeout:(x108 : int option) ->
                fun () ->
                  let x113 =
                    let x112 = t_to_js x111 in
                    Ojs.call (Ojs.get_prop_ascii x112 "wait") "apply"
                      [|x112;((let x109 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x109 "push"
                                    [|(Int32Array.t_to_js x105)|]);
                               ignore
                                 (Ojs.call x109 "push"
                                    [|(Ojs.int_to_js x106)|]);
                               ignore
                                 (Ojs.call x109 "push"
                                    [|(Ojs.int_to_js x107)|]);
                               (match x108 with
                                | Some x110 ->
                                    ignore
                                      (Ojs.call x109 "push"
                                         [|(Ojs.int_to_js x110)|])
                                | None -> ());
                               x109))|] in
                  match Ojs.string_of_js x113 with
                  | "not-equal" -> `not_equal
                  | "ok" -> `ok
                  | "timed-out" -> `timed_out
                  | _ -> assert false
    let (notify :
      t -> typed_array:Int32Array.t -> index:int -> ?count:int -> unit -> int)
      =
      fun (x119 : t) ->
        fun ~typed_array:(x114 : Int32Array.t) ->
          fun ~index:(x115 : int) ->
            fun ?count:(x116 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x120 = t_to_js x119 in
                   Ojs.call (Ojs.get_prop_ascii x120 "notify") "apply"
                     [|x120;((let x117 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x117 "push"
                                   [|(Int32Array.t_to_js x114)|]);
                              ignore
                                (Ojs.call x117 "push"
                                   [|(Ojs.int_to_js x115)|]);
                              (match x116 with
                               | Some x118 ->
                                   ignore
                                     (Ojs.call x117 "push"
                                        [|(Ojs.int_to_js x118)|])
                               | None -> ());
                              x117))|])
    let (xor :
      t ->
        typed_array:(Int16Array.t, Int32Array.t, Int8Array.t, Uint16Array.t,
          Uint32Array.t, Uint8Array.t) union6 ->
          index:int -> value:int -> int)
      =
      fun (x130 : t) ->
        fun
          ~typed_array:(x121 :
                         (Int16Array.t, Int32Array.t, Int8Array.t,
                           Uint16Array.t, Uint32Array.t, Uint8Array.t) union6)
          ->
          fun ~index:(x128 : int) ->
            fun ~value:(x129 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x130) "xor"
                   [|(union6_to_js Int16Array.t_to_js Int32Array.t_to_js
                        Int8Array.t_to_js Uint16Array.t_to_js
                        Uint32Array.t_to_js Uint8Array.t_to_js x121);(
                     Ojs.int_to_js x128);(Ojs.int_to_js x129)|])
  end
let (atomics : Atomics.t) =
  Atomics.t_of_js (Ojs.get_prop_ascii Ojs.global "Atomics")
