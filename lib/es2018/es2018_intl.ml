[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2017
module Intl =
  struct
    module LDMLPluralRule =
      struct
        type t = [ `few  | `many  | `one  | `other  | `two  | `zero ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2 : Ojs.t) ->
            let x3 = x2 in
            match Ojs.string_of_js x3 with
            | "few" -> `few
            | "many" -> `many
            | "one" -> `one
            | "other" -> `other
            | "two" -> `two
            | "zero" -> `zero
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1 : [ `few  | `many  | `one  | `other  | `two  | `zero ]) ->
            match x1 with
            | `few -> Ojs.string_to_js "few"
            | `many -> Ojs.string_to_js "many"
            | `one -> Ojs.string_to_js "one"
            | `other -> Ojs.string_to_js "other"
            | `two -> Ojs.string_to_js "two"
            | `zero -> Ojs.string_to_js "zero"
      end
    module PluralRuleType =
      struct
        type t = [ `cardinal  | `ordinal ]
        let rec t_of_js : Ojs.t -> t =
          fun (x5 : Ojs.t) ->
            let x6 = x5 in
            match Ojs.string_of_js x6 with
            | "cardinal" -> `cardinal
            | "ordinal" -> `ordinal
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4 : [ `cardinal  | `ordinal ]) ->
            match x4 with
            | `cardinal -> Ojs.string_to_js "cardinal"
            | `ordinal -> Ojs.string_to_js "ordinal"
      end
    module PluralRulesOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> x8
        and t_to_js : t -> Ojs.t = fun (x7 : Ojs.t) -> x7
        let (get_localeMatcher : t -> [ `best_fit  | `lookup ]) =
          fun (x9 : t) ->
            let x10 = Ojs.get_prop_ascii (t_to_js x9) "localeMatcher" in
            match Ojs.string_of_js x10 with
            | "best fit" -> `best_fit
            | "lookup" -> `lookup
            | _ -> assert false
        let (set_localeMatcher : t -> [ `best_fit  | `lookup ] -> unit) =
          fun (x11 : t) ->
            fun (x12 : [ `best_fit  | `lookup ]) ->
              Ojs.set_prop_ascii (t_to_js x11) "localeMatcher"
                (match x12 with
                 | `best_fit -> Ojs.string_to_js "bestFit"
                 | `lookup -> Ojs.string_to_js "lookup")
        let (get_type : t -> PluralRuleType.t) =
          fun (x13 : t) ->
            PluralRuleType.t_of_js (Ojs.get_prop_ascii (t_to_js x13) "type")
        let (set_type : t -> PluralRuleType.t -> unit) =
          fun (x14 : t) ->
            fun (x15 : PluralRuleType.t) ->
              Ojs.set_prop_ascii (t_to_js x14) "type"
                (PluralRuleType.t_to_js x15)
        let (get_minimumIntegerDigits : t -> int) =
          fun (x16 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x16) "minimumIntegerDigits")
        let (set_minimumIntegerDigits : t -> int -> unit) =
          fun (x17 : t) ->
            fun (x18 : int) ->
              Ojs.set_prop_ascii (t_to_js x17) "minimumIntegerDigits"
                (Ojs.int_to_js x18)
        let (get_minimumFractionDigits : t -> int) =
          fun (x19 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x19) "minimumFractionDigits")
        let (set_minimumFractionDigits : t -> int -> unit) =
          fun (x20 : t) ->
            fun (x21 : int) ->
              Ojs.set_prop_ascii (t_to_js x20) "minimumFractionDigits"
                (Ojs.int_to_js x21)
        let (get_maximumFractionDigits : t -> int) =
          fun (x22 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x22) "maximumFractionDigits")
        let (set_maximumFractionDigits : t -> int -> unit) =
          fun (x23 : t) ->
            fun (x24 : int) ->
              Ojs.set_prop_ascii (t_to_js x23) "maximumFractionDigits"
                (Ojs.int_to_js x24)
        let (get_minimumSignificantDigits : t -> int) =
          fun (x25 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x25) "minimumSignificantDigits")
        let (set_minimumSignificantDigits : t -> int -> unit) =
          fun (x26 : t) ->
            fun (x27 : int) ->
              Ojs.set_prop_ascii (t_to_js x26) "minimumSignificantDigits"
                (Ojs.int_to_js x27)
        let (get_maximumSignificantDigits : t -> int) =
          fun (x28 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x28) "maximumSignificantDigits")
        let (set_maximumSignificantDigits : t -> int -> unit) =
          fun (x29 : t) ->
            fun (x30 : int) ->
              Ojs.set_prop_ascii (t_to_js x29) "maximumSignificantDigits"
                (Ojs.int_to_js x30)
      end
    module ResolvedPluralRulesOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x32 : Ojs.t) -> x32
        and t_to_js : t -> Ojs.t = fun (x31 : Ojs.t) -> x31
        let (get_locale : t -> string) =
          fun (x33 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x33) "locale")
        let (set_locale : t -> string -> unit) =
          fun (x34 : t) ->
            fun (x35 : string) ->
              Ojs.set_prop_ascii (t_to_js x34) "locale"
                (Ojs.string_to_js x35)
        let (get_pluralCategories : t -> LDMLPluralRule.t list) =
          fun (x36 : t) ->
            Ojs.list_of_js LDMLPluralRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x36) "pluralCategories")
        let (set_pluralCategories : t -> LDMLPluralRule.t list -> unit) =
          fun (x38 : t) ->
            fun (x39 : LDMLPluralRule.t list) ->
              Ojs.set_prop_ascii (t_to_js x38) "pluralCategories"
                (Ojs.list_to_js LDMLPluralRule.t_to_js x39)
        let (get_type : t -> PluralRuleType.t) =
          fun (x41 : t) ->
            PluralRuleType.t_of_js (Ojs.get_prop_ascii (t_to_js x41) "type")
        let (set_type : t -> PluralRuleType.t -> unit) =
          fun (x42 : t) ->
            fun (x43 : PluralRuleType.t) ->
              Ojs.set_prop_ascii (t_to_js x42) "type"
                (PluralRuleType.t_to_js x43)
        let (get_minimumIntegerDigits : t -> int) =
          fun (x44 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x44) "minimumIntegerDigits")
        let (set_minimumIntegerDigits : t -> int -> unit) =
          fun (x45 : t) ->
            fun (x46 : int) ->
              Ojs.set_prop_ascii (t_to_js x45) "minimumIntegerDigits"
                (Ojs.int_to_js x46)
        let (get_minimumFractionDigits : t -> int) =
          fun (x47 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x47) "minimumFractionDigits")
        let (set_minimumFractionDigits : t -> int -> unit) =
          fun (x48 : t) ->
            fun (x49 : int) ->
              Ojs.set_prop_ascii (t_to_js x48) "minimumFractionDigits"
                (Ojs.int_to_js x49)
        let (get_maximumFractionDigits : t -> int) =
          fun (x50 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x50) "maximumFractionDigits")
        let (set_maximumFractionDigits : t -> int -> unit) =
          fun (x51 : t) ->
            fun (x52 : int) ->
              Ojs.set_prop_ascii (t_to_js x51) "maximumFractionDigits"
                (Ojs.int_to_js x52)
        let (get_minimumSignificantDigits : t -> int) =
          fun (x53 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x53) "minimumSignificantDigits")
        let (set_minimumSignificantDigits : t -> int -> unit) =
          fun (x54 : t) ->
            fun (x55 : int) ->
              Ojs.set_prop_ascii (t_to_js x54) "minimumSignificantDigits"
                (Ojs.int_to_js x55)
        let (get_maximumSignificantDigits : t -> int) =
          fun (x56 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x56) "maximumSignificantDigits")
        let (set_maximumSignificantDigits : t -> int -> unit) =
          fun (x57 : t) ->
            fun (x58 : int) ->
              Ojs.set_prop_ascii (t_to_js x57) "maximumSignificantDigits"
                (Ojs.int_to_js x58)
      end
    module PluralRules =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x60 : Ojs.t) -> x60
        and t_to_js : t -> Ojs.t = fun (x59 : Ojs.t) -> x59
        let (resolvedOptions : t -> ResolvedPluralRulesOptions.t) =
          fun (x61 : t) ->
            ResolvedPluralRulesOptions.t_of_js
              (Ojs.call (t_to_js x61) "resolvedOptions" [||])
        let (select : t -> n:int -> LDMLPluralRule.t) =
          fun (x63 : t) ->
            fun ~n:(x62 : int) ->
              LDMLPluralRule.t_of_js
                (Ojs.call (t_to_js x63) "select" [|(Ojs.int_to_js x62)|])
      end
    module AnonymousInterface0 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x65 : Ojs.t) -> x65
        and t_to_js : t -> Ojs.t = fun (x64 : Ojs.t) -> x64
        let (create :
          t ->
            ?locales:string list or_string ->
              ?options:PluralRulesOptions.t -> unit -> PluralRules.t)
          =
          fun (x73 : t) ->
            fun ?locales:(x66 : string list or_string option) ->
              fun ?options:(x67 : PluralRulesOptions.t option) ->
                fun () ->
                  PluralRules.t_of_js
                    (Ojs.new_obj_arr (t_to_js x73)
                       (let x68 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x66 with
                         | Some x70 ->
                             ignore
                               (Ojs.call x68 "push"
                                  [|(or_string_to_js
                                       (fun (x71 : string list) ->
                                          Ojs.list_to_js Ojs.string_to_js x71)
                                       x70)|])
                         | None -> ());
                        (match x67 with
                         | Some x69 ->
                             ignore
                               (Ojs.call x68 "push"
                                  [|(PluralRulesOptions.t_to_js x69)|])
                         | None -> ());
                        x68))
        let (apply :
          t ->
            ?locales:string list or_string ->
              ?options:PluralRulesOptions.t -> unit -> PluralRules.t)
          =
          fun (x81 : t) ->
            fun ?locales:(x74 : string list or_string option) ->
              fun ?options:(x75 : PluralRulesOptions.t option) ->
                fun () ->
                  PluralRules.t_of_js
                    (Ojs.call (t_to_js x81) "apply"
                       [|Ojs.null;((let x76 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x74 with
                                     | Some x78 ->
                                         ignore
                                           (Ojs.call x76 "push"
                                              [|(or_string_to_js
                                                   (fun (x79 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js x79)
                                                   x78)|])
                                     | None -> ());
                                    (match x75 with
                                     | Some x77 ->
                                         ignore
                                           (Ojs.call x76 "push"
                                              [|(PluralRulesOptions.t_to_js
                                                   x77)|])
                                     | None -> ());
                                    x76))|])
        let (supportedLocalesOf :
          t ->
            locales:string list or_string ->
              ?options:PluralRulesOptions.t -> unit -> string list)
          =
          fun (x88 : t) ->
            fun ~locales:(x82 : string list or_string) ->
              fun ?options:(x83 : PluralRulesOptions.t option) ->
                fun () ->
                  Ojs.list_of_js Ojs.string_of_js
                    (let x89 = t_to_js x88 in
                     Ojs.call (Ojs.get_prop_ascii x89 "supportedLocalesOf")
                       "apply"
                       [|x89;((let x84 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x84 "push"
                                    [|(or_string_to_js
                                         (fun (x86 : string list) ->
                                            Ojs.list_to_js Ojs.string_to_js
                                              x86) x82)|]);
                               (match x83 with
                                | Some x85 ->
                                    ignore
                                      (Ojs.call x84 "push"
                                         [|(PluralRulesOptions.t_to_js x85)|])
                                | None -> ());
                               x84))|])
      end
    let (pluralRules : AnonymousInterface0.t) =
      AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl")
           "PluralRules")
  end
include struct include Intl end
