[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2015
module Vscode =
  struct
    let (version : string) =
      Ojs.string_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii
              (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
              "vscode") "version")
    module Command =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (title : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "title")
        let (set_title : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "title" (Ojs.string_to_js x5)
        let (command : t -> string) =
          fun (x6 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "command")
        let (set_command : t -> string -> unit) =
          fun (x7 : t) ->
            fun (x8 : string) ->
              Ojs.set_prop_ascii (t_to_js x7) "command" (Ojs.string_to_js x8)
        let (tooltip : t -> string) =
          fun (x9 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x9) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x10 : t) ->
            fun (x11 : string) ->
              Ojs.set_prop_ascii (t_to_js x10) "tooltip"
                (Ojs.string_to_js x11)
        let (arguments : t -> any list) =
          fun (x12 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x12) "arguments")
        let (set_arguments : t -> any list -> unit) =
          fun (x14 : t) ->
            fun (x15 : any list) ->
              Ojs.set_prop_ascii (t_to_js x14) "arguments"
                (Ojs.list_to_js any_to_js x15)
      end
    module Position =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x18 : Ojs.t) -> x18
        and t_to_js : t -> Ojs.t = fun (x17 : Ojs.t) -> x17
        let (line : t -> int) =
          fun (x19 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x19) "line")
        let (character : t -> int) =
          fun (x20 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x20) "character")
        let (create : line:int -> character:int -> t) =
          fun ~line:(x21 : int) ->
            fun ~character:(x22 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Position")
                   [|(Ojs.int_to_js x21);(Ojs.int_to_js x22)|])
        let (is_before : t -> other:t -> bool) =
          fun (x24 : t) ->
            fun ~other:(x23 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x24) "isBefore" [|(t_to_js x23)|])
        let (is_before_or_equal : t -> other:t -> bool) =
          fun (x26 : t) ->
            fun ~other:(x25 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x26) "isBeforeOrEqual" [|(t_to_js x25)|])
        let (is_after : t -> other:t -> bool) =
          fun (x28 : t) ->
            fun ~other:(x27 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x28) "isAfter" [|(t_to_js x27)|])
        let (is_after_or_equal : t -> other:t -> bool) =
          fun (x30 : t) ->
            fun ~other:(x29 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x30) "isAfterOrEqual" [|(t_to_js x29)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x32 : t) ->
            fun ~other:(x31 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x32) "isEqual" [|(t_to_js x31)|])
        let (compare_to : t -> other:t -> int) =
          fun (x34 : t) ->
            fun ~other:(x33 : t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x34) "compareTo" [|(t_to_js x33)|])
        let (translate :
          t -> ?line_delta:int -> ?character_delta:int -> unit -> t) =
          fun (x40 : t) ->
            fun ?line_delta:(x35 : int option) ->
              fun ?character_delta:(x36 : int option) ->
                fun () ->
                  t_of_js
                    (let x41 = t_to_js x40 in
                     Ojs.call (Ojs.get_prop_ascii x41 "translate") "apply"
                       [|x41;((let x37 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x35 with
                                | Some x39 ->
                                    ignore
                                      (Ojs.call x37 "push"
                                         [|(Ojs.int_to_js x39)|])
                                | None -> ());
                               (match x36 with
                                | Some x38 ->
                                    ignore
                                      (Ojs.call x37 "push"
                                         [|(Ojs.int_to_js x38)|])
                                | None -> ());
                               x37))|])
        module TranslateChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x43 : Ojs.t) -> x43
            and t_to_js : t -> Ojs.t = fun (x42 : Ojs.t) -> x42
            let (line_delta : t -> int) =
              fun (x44 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x44) "lineDelta")
            let (set_line_delta : t -> int -> unit) =
              fun (x45 : t) ->
                fun (x46 : int) ->
                  Ojs.set_prop_ascii (t_to_js x45) "lineDelta"
                    (Ojs.int_to_js x46)
            let (character_delta : t -> int) =
              fun (x47 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x47) "characterDelta")
            let (set_character_delta : t -> int -> unit) =
              fun (x48 : t) ->
                fun (x49 : int) ->
                  Ojs.set_prop_ascii (t_to_js x48) "characterDelta"
                    (Ojs.int_to_js x49)
          end
        let (translate' : t -> TranslateChange.t -> t) =
          fun (x51 : t) ->
            fun (x50 : TranslateChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x51) "translate"
                   [|(TranslateChange.t_to_js x50)|])
        let (with_ : t -> ?line:int -> ?character:int -> unit -> t) =
          fun (x57 : t) ->
            fun ?line:(x52 : int option) ->
              fun ?character:(x53 : int option) ->
                fun () ->
                  t_of_js
                    (let x58 = t_to_js x57 in
                     Ojs.call (Ojs.get_prop_ascii x58 "with") "apply"
                       [|x58;((let x54 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x52 with
                                | Some x56 ->
                                    ignore
                                      (Ojs.call x54 "push"
                                         [|(Ojs.int_to_js x56)|])
                                | None -> ());
                               (match x53 with
                                | Some x55 ->
                                    ignore
                                      (Ojs.call x54 "push"
                                         [|(Ojs.int_to_js x55)|])
                                | None -> ());
                               x54))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x60 : Ojs.t) -> x60
            and t_to_js : t -> Ojs.t = fun (x59 : Ojs.t) -> x59
            let (line : t -> int) =
              fun (x61 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x61) "line")
            let (set_line : t -> int -> unit) =
              fun (x62 : t) ->
                fun (x63 : int) ->
                  Ojs.set_prop_ascii (t_to_js x62) "line" (Ojs.int_to_js x63)
            let (character : t -> int) =
              fun (x64 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x64) "character")
            let (set_character : t -> int -> unit) =
              fun (x65 : t) ->
                fun (x66 : int) ->
                  Ojs.set_prop_ascii (t_to_js x65) "character"
                    (Ojs.int_to_js x66)
          end
        let (with' : t -> WithChange.t -> t) =
          fun (x68 : t) ->
            fun (x67 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x68) "with" [|(WithChange.t_to_js x67)|])
      end
    module Range =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x70 : Ojs.t) -> x70
        and t_to_js : t -> Ojs.t = fun (x69 : Ojs.t) -> x69
        let (start : t -> Position.t) =
          fun (x71 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x71) "start")
        let (end_ : t -> Position.t) =
          fun (x72 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x72) "end")
        let (create : start:Position.t -> end_:Position.t -> t) =
          fun ~start:(x73 : Position.t) ->
            fun ~end_:(x74 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                   [|(Position.t_to_js x73);(Position.t_to_js x74)|])
        let (create' :
          start_line:int ->
            start_character:int -> end_line:int -> end_character:int -> t)
          =
          fun ~start_line:(x75 : int) ->
            fun ~start_character:(x76 : int) ->
              fun ~end_line:(x77 : int) ->
                fun ~end_character:(x78 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                       [|(Ojs.int_to_js x75);(Ojs.int_to_js x76);(Ojs.int_to_js
                                                                    x77);(
                         Ojs.int_to_js x78)|])
        let (is_empty : t -> bool) =
          fun (x79 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x79) "isEmpty")
        let (set_is_empty : t -> bool -> unit) =
          fun (x80 : t) ->
            fun (x81 : bool) ->
              Ojs.set_prop_ascii (t_to_js x80) "isEmpty" (Ojs.bool_to_js x81)
        let (is_single_line : t -> bool) =
          fun (x82 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x82) "isSingleLine")
        let (set_is_single_line : t -> bool -> unit) =
          fun (x83 : t) ->
            fun (x84 : bool) ->
              Ojs.set_prop_ascii (t_to_js x83) "isSingleLine"
                (Ojs.bool_to_js x84)
        let (contains : t -> (Position.t, t) union2 -> bool) =
          fun (x88 : t) ->
            fun (x85 : (Position.t, t) union2) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x88) "contains"
                   [|(union2_to_js Position.t_to_js t_to_js x85)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x90 : t) ->
            fun ~other:(x89 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x90) "isEqual" [|(t_to_js x89)|])
        let (intersection : t -> range:t -> t or_undefined) =
          fun (x92 : t) ->
            fun ~range:(x91 : t) ->
              or_undefined_of_js t_of_js
                (Ojs.call (t_to_js x92) "intersection" [|(t_to_js x91)|])
        let (union : t -> other:t -> t) =
          fun (x95 : t) ->
            fun ~other:(x94 : t) ->
              t_of_js (Ojs.call (t_to_js x95) "union" [|(t_to_js x94)|])
        let (with_ : t -> ?start:Position.t -> ?end_:Position.t -> unit -> t)
          =
          fun (x101 : t) ->
            fun ?start:(x96 : Position.t option) ->
              fun ?end_:(x97 : Position.t option) ->
                fun () ->
                  t_of_js
                    (let x102 = t_to_js x101 in
                     Ojs.call (Ojs.get_prop_ascii x102 "with") "apply"
                       [|x102;((let x98 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x96 with
                                 | Some x100 ->
                                     ignore
                                       (Ojs.call x98 "push"
                                          [|(Position.t_to_js x100)|])
                                 | None -> ());
                                (match x97 with
                                 | Some x99 ->
                                     ignore
                                       (Ojs.call x98 "push"
                                          [|(Position.t_to_js x99)|])
                                 | None -> ());
                                x98))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x104 : Ojs.t) -> x104
            and t_to_js : t -> Ojs.t = fun (x103 : Ojs.t) -> x103
            let (start : t -> Position.t) =
              fun (x105 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x105) "start")
            let (set_start : t -> Position.t -> unit) =
              fun (x106 : t) ->
                fun (x107 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x106) "start"
                    (Position.t_to_js x107)
            let (end_ : t -> Position.t) =
              fun (x108 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x108) "end")
            let (set_end : t -> Position.t -> unit) =
              fun (x109 : t) ->
                fun (x110 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x109) "end"
                    (Position.t_to_js x110)
          end
        let (with' : t -> change:WithChange.t -> t) =
          fun (x112 : t) ->
            fun ~change:(x111 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x112) "with" [|(WithChange.t_to_js x111)|])
      end
    module Uri =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x114 : Ojs.t) -> x114
        and t_to_js : t -> Ojs.t = fun (x113 : Ojs.t) -> x113
        let (parse : string -> ?strict:bool -> unit -> t) =
          fun (x115 : string) ->
            fun ?strict:(x116 : bool option) ->
              fun () ->
                t_of_js
                  (let x119 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                   Ojs.call (Ojs.get_prop_ascii x119 "parse") "apply"
                     [|x119;((let x117 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x117 "push"
                                   [|(Ojs.string_to_js x115)|]);
                              (match x116 with
                               | Some x118 ->
                                   ignore
                                     (Ojs.call x117 "push"
                                        [|(Ojs.bool_to_js x118)|])
                               | None -> ());
                              x117))|])
        let (file : string -> t) =
          fun (x120 : string) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Uri") "file"
                 [|(Ojs.string_to_js x120)|])
        let (join_path : t -> string list -> t) =
          fun (x121 : t) ->
            fun (x122 : string list) ->
              t_of_js
                (let x125 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                 Ojs.call (Ojs.get_prop_ascii x125 "joinPath") "apply"
                   [|x125;((let x123 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x123 "push" [|(t_to_js x121)|]);
                            List.iter
                              (fun (x124 : string) ->
                                 ignore
                                   (Ojs.call x123 "push"
                                      [|(Ojs.string_to_js x124)|])) x122;
                            x123))|])
        let (create :
          scheme:string ->
            authority:string ->
              path:string -> query:string -> fragment:string -> t)
          =
          fun ~scheme:(x126 : string) ->
            fun ~authority:(x127 : string) ->
              fun ~path:(x128 : string) ->
                fun ~query:(x129 : string) ->
                  fun ~fragment:(x130 : string) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode") "Uri")
                         [|(Ojs.string_to_js x126);(Ojs.string_to_js x127);(
                           Ojs.string_to_js x128);(Ojs.string_to_js x129);(
                           Ojs.string_to_js x130)|])
        let (scheme : t -> string) =
          fun (x131 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x131) "scheme")
        let (authority : t -> string) =
          fun (x132 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x132) "authority")
        let (path : t -> string) =
          fun (x133 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x133) "path")
        let (query : t -> string) =
          fun (x134 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x134) "query")
        let (fragment : t -> string) =
          fun (x135 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x135) "fragment")
        let (fs_path : t -> string) =
          fun (x136 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x136) "fsPath")
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x138 : Ojs.t) -> x138
            and t_to_js : t -> Ojs.t = fun (x137 : Ojs.t) -> x137
            let (scheme : t -> string) =
              fun (x139 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x139) "scheme")
            let (set_scheme : t -> string -> unit) =
              fun (x140 : t) ->
                fun (x141 : string) ->
                  Ojs.set_prop_ascii (t_to_js x140) "scheme"
                    (Ojs.string_to_js x141)
            let (authority : t -> string) =
              fun (x142 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x142) "authority")
            let (set_authority : t -> string -> unit) =
              fun (x143 : t) ->
                fun (x144 : string) ->
                  Ojs.set_prop_ascii (t_to_js x143) "authority"
                    (Ojs.string_to_js x144)
            let (path : t -> string) =
              fun (x145 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x145) "path")
            let (set_path : t -> string -> unit) =
              fun (x146 : t) ->
                fun (x147 : string) ->
                  Ojs.set_prop_ascii (t_to_js x146) "path"
                    (Ojs.string_to_js x147)
            let (query : t -> string) =
              fun (x148 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x148) "query")
            let (set_query : t -> string -> unit) =
              fun (x149 : t) ->
                fun (x150 : string) ->
                  Ojs.set_prop_ascii (t_to_js x149) "query"
                    (Ojs.string_to_js x150)
            let (fragment : t -> string) =
              fun (x151 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x151) "fragment")
            let (set_fragment : t -> string -> unit) =
              fun (x152 : t) ->
                fun (x153 : string) ->
                  Ojs.set_prop_ascii (t_to_js x152) "fragment"
                    (Ojs.string_to_js x153)
          end
        let (with_ : t -> WithChange.t -> t) =
          fun (x155 : t) ->
            fun (x154 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x155) "with" [|(WithChange.t_to_js x154)|])
        let (to_string : t -> ?skip_encoding:bool -> unit -> string) =
          fun (x159 : t) ->
            fun ?skip_encoding:(x156 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x160 = t_to_js x159 in
                   Ojs.call (Ojs.get_prop_ascii x160 "toString") "apply"
                     [|x160;((let x157 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x156 with
                               | Some x158 ->
                                   ignore
                                     (Ojs.call x157 "push"
                                        [|(Ojs.bool_to_js x158)|])
                               | None -> ());
                              x157))|])
        let (to_json : t -> any) =
          fun (x161 : t) -> any_of_js (Ojs.call (t_to_js x161) "toJSON" [||])
      end
    module TextLine =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x163 : Ojs.t) -> x163
        and t_to_js : t -> Ojs.t = fun (x162 : Ojs.t) -> x162
        let (line_number : t -> int) =
          fun (x164 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x164) "lineNumber")
        let (text : t -> string) =
          fun (x165 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x165) "text")
        let (range : t -> Range.t) =
          fun (x166 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x166) "range")
        let (range_including_line_break : t -> Range.t) =
          fun (x167 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x167) "rangeIncludingLineBreak")
        let (first_non_whitespace_character_index : t -> int) =
          fun (x168 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x168)
                 "firstNonWhitespaceCharacterIndex")
        let (is_empty_or_whitespace : t -> bool) =
          fun (x169 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x169) "isEmptyOrWhitespace")
      end
    module EndOfLine =
      struct
        type t = [ `CRLF ]
        let rec t_of_js : Ojs.t -> t =
          fun (x171 : Ojs.t) ->
            let x172 = x171 in
            match Ojs.int_of_js x172 with | 2 -> `CRLF | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x170 : [ `CRLF ]) ->
            match x170 with | `CRLF -> Ojs.int_to_js 2
      end
    module TextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x174 : Ojs.t) -> x174
        and t_to_js : t -> Ojs.t = fun (x173 : Ojs.t) -> x173
        let (uri : t -> Uri.t) =
          fun (x175 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x175) "uri")
        let (file_name : t -> string) =
          fun (x176 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x176) "fileName")
        let (is_untitled : t -> bool) =
          fun (x177 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x177) "isUntitled")
        let (language_id : t -> string) =
          fun (x178 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x178) "languageId")
        let (version : t -> int) =
          fun (x179 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x179) "version")
        let (is_dirty : t -> bool) =
          fun (x180 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x180) "isDirty")
        let (is_closed : t -> bool) =
          fun (x181 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x181) "isClosed")
        let (save : t -> bool Promise.t) =
          fun (x182 : t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (t_to_js x182) "save" [||])
        let (eol : t -> EndOfLine.t) =
          fun (x184 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x184) "eol")
        let (line_count : t -> int) =
          fun (x185 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x185) "lineCount")
        let (line_at : t -> int -> TextLine.t) =
          fun (x187 : t) ->
            fun (x186 : int) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x187) "lineAt" [|(Ojs.int_to_js x186)|])
        let (line_at' : t -> Position.t -> TextLine.t) =
          fun (x189 : t) ->
            fun (x188 : Position.t) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x189) "lineAt" [|(Position.t_to_js x188)|])
        let (offset_at : t -> Position.t -> int) =
          fun (x191 : t) ->
            fun (x190 : Position.t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x191) "offsetAt"
                   [|(Position.t_to_js x190)|])
        let (position_at : t -> int -> Position.t) =
          fun (x193 : t) ->
            fun (x192 : int) ->
              Position.t_of_js
                (Ojs.call (t_to_js x193) "positionAt"
                   [|(Ojs.int_to_js x192)|])
        let (get_text : t -> ?range:Range.t -> unit -> string) =
          fun (x197 : t) ->
            fun ?range:(x194 : Range.t option) ->
              fun () ->
                Ojs.string_of_js
                  (let x198 = t_to_js x197 in
                   Ojs.call (Ojs.get_prop_ascii x198 "getText") "apply"
                     [|x198;((let x195 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x194 with
                               | Some x196 ->
                                   ignore
                                     (Ojs.call x195 "push"
                                        [|(Range.t_to_js x196)|])
                               | None -> ());
                              x195))|])
        let (get_word_range_at_position :
          t -> Position.t -> ?regex:regexp -> unit -> Range.t or_undefined) =
          fun (x203 : t) ->
            fun (x199 : Position.t) ->
              fun ?regex:(x200 : regexp option) ->
                fun () ->
                  or_undefined_of_js Range.t_of_js
                    (let x204 = t_to_js x203 in
                     Ojs.call
                       (Ojs.get_prop_ascii x204 "getWordRangeAtPosition")
                       "apply"
                       [|x204;((let x201 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x201 "push"
                                     [|(Position.t_to_js x199)|]);
                                (match x200 with
                                 | Some x202 ->
                                     ignore
                                       (Ojs.call x201 "push"
                                          [|(regexp_to_js x202)|])
                                 | None -> ());
                                x201))|])
        let (validate_range : t -> Range.t -> Range.t) =
          fun (x207 : t) ->
            fun (x206 : Range.t) ->
              Range.t_of_js
                (Ojs.call (t_to_js x207) "validateRange"
                   [|(Range.t_to_js x206)|])
        let (validate_position : t -> Position.t -> Position.t) =
          fun (x209 : t) ->
            fun (x208 : Position.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x209) "validatePosition"
                   [|(Position.t_to_js x208)|])
      end
    module Selection =
      struct
        include struct include Range end
        let (anchor : t -> Position.t) =
          fun (x210 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x210) "anchor")
        let (set_anchor : t -> Position.t -> unit) =
          fun (x211 : t) ->
            fun (x212 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x211) "anchor"
                (Position.t_to_js x212)
        let (active : t -> Position.t) =
          fun (x213 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x213) "active")
        let (set_active : t -> Position.t -> unit) =
          fun (x214 : t) ->
            fun (x215 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x214) "active"
                (Position.t_to_js x215)
        let (create : anchor:Position.t -> active:Position.t -> t) =
          fun ~anchor:(x216 : Position.t) ->
            fun ~active:(x217 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Selection")
                   [|(Position.t_to_js x216);(Position.t_to_js x217)|])
        let (create' :
          anchor_line:int ->
            anchor_character:int ->
              active_line:int -> active_character:int -> t)
          =
          fun ~anchor_line:(x218 : int) ->
            fun ~anchor_character:(x219 : int) ->
              fun ~active_line:(x220 : int) ->
                fun ~active_character:(x221 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Selection")
                       [|(Ojs.int_to_js x218);(Ojs.int_to_js x219);(Ojs.int_to_js
                                                                    x220);(
                         Ojs.int_to_js x221)|])
        let (is_reversed : t -> bool) =
          fun (x222 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x222) "isReversed")
        let (set_is_reversed : t -> bool -> unit) =
          fun (x223 : t) ->
            fun (x224 : bool) ->
              Ojs.set_prop_ascii (t_to_js x223) "isReversed"
                (Ojs.bool_to_js x224)
      end
    module TextEditorCursorStyle =
      struct
        type t =
          [ `Block  | `Underline  | `LineThin  | `BlockOutline 
          | `UnderlineThin ]
        let rec t_of_js : Ojs.t -> t =
          fun (x226 : Ojs.t) ->
            let x227 = x226 in
            match Ojs.int_of_js x227 with
            | 2 -> `Block
            | 3 -> `Underline
            | 4 -> `LineThin
            | 5 -> `BlockOutline
            | 6 -> `UnderlineThin
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x225 :
              [ `Block  | `Underline  | `LineThin  | `BlockOutline 
              | `UnderlineThin ])
            ->
            match x225 with
            | `Block -> Ojs.int_to_js 2
            | `Underline -> Ojs.int_to_js 3
            | `LineThin -> Ojs.int_to_js 4
            | `BlockOutline -> Ojs.int_to_js 5
            | `UnderlineThin -> Ojs.int_to_js 6
      end
    module TextEditorLineNumbersStyle =
      struct
        type t = [ `On  | `Relative ]
        let rec t_of_js : Ojs.t -> t =
          fun (x229 : Ojs.t) ->
            let x230 = x229 in
            match Ojs.int_of_js x230 with
            | 1 -> `On
            | 2 -> `Relative
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x228 : [ `On  | `Relative ]) ->
            match x228 with
            | `On -> Ojs.int_to_js 1
            | `Relative -> Ojs.int_to_js 2
      end
    module TextEditorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x232 : Ojs.t) -> x232
        and t_to_js : t -> Ojs.t = fun (x231 : Ojs.t) -> x231
        let (tab_size : t -> string or_number) =
          fun (x233 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x233) "tabSize")
        let (set_tab_size : t -> string or_number -> unit) =
          fun (x235 : t) ->
            fun (x236 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x235) "tabSize"
                (or_number_to_js Ojs.string_to_js x236)
        let (insert_spaces : t -> bool or_string) =
          fun (x238 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x238) "insertSpaces")
        let (set_insert_spaces : t -> bool or_string -> unit) =
          fun (x240 : t) ->
            fun (x241 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x240) "insertSpaces"
                (or_string_to_js Ojs.bool_to_js x241)
        let (cursor_style : t -> TextEditorCursorStyle.t) =
          fun (x243 : t) ->
            TextEditorCursorStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x243) "cursorStyle")
        let (set_cursor_style : t -> TextEditorCursorStyle.t -> unit) =
          fun (x244 : t) ->
            fun (x245 : TextEditorCursorStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x244) "cursorStyle"
                (TextEditorCursorStyle.t_to_js x245)
        let (line_numbers : t -> TextEditorLineNumbersStyle.t) =
          fun (x246 : t) ->
            TextEditorLineNumbersStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x246) "lineNumbers")
        let (set_line_numbers : t -> TextEditorLineNumbersStyle.t -> unit) =
          fun (x247 : t) ->
            fun (x248 : TextEditorLineNumbersStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x247) "lineNumbers"
                (TextEditorLineNumbersStyle.t_to_js x248)
      end
    module TextEditorDecorationType =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x250 : Ojs.t) -> x250
        and t_to_js : t -> Ojs.t = fun (x249 : Ojs.t) -> x249
        let (key : t -> string) =
          fun (x251 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x251) "key")
        let (dispose : t -> unit) =
          fun (x252 : t) -> ignore (Ojs.call (t_to_js x252) "dispose" [||])
      end
    module TextEditorRevealType =
      struct
        type t = [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ]
        let rec t_of_js : Ojs.t -> t =
          fun (x254 : Ojs.t) ->
            let x255 = x254 in
            match Ojs.int_of_js x255 with
            | 1 -> `InCenter
            | 2 -> `InCenterIfOutsideViewport
            | 3 -> `AtTop
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x253 : [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ])
            ->
            match x253 with
            | `InCenter -> Ojs.int_to_js 1
            | `InCenterIfOutsideViewport -> Ojs.int_to_js 2
            | `AtTop -> Ojs.int_to_js 3
      end
    module TextEditorSelectionChangeKind =
      struct
        type t = [ `Mouse  | `Command ]
        let rec t_of_js : Ojs.t -> t =
          fun (x257 : Ojs.t) ->
            let x258 = x257 in
            match Ojs.int_of_js x258 with
            | 2 -> `Mouse
            | 3 -> `Command
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x256 : [ `Mouse  | `Command ]) ->
            match x256 with
            | `Mouse -> Ojs.int_to_js 2
            | `Command -> Ojs.int_to_js 3
      end
    module TextEditorEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x260 : Ojs.t) -> x260
        and t_to_js : t -> Ojs.t = fun (x259 : Ojs.t) -> x259
        let (replace :
          t ->
            location:(Position.t, Range.t, Selection.t) union3 ->
              value:string -> unit)
          =
          fun (x266 : t) ->
            fun ~location:(x261 : (Position.t, Range.t, Selection.t) union3)
              ->
              fun ~value:(x265 : string) ->
                ignore
                  (Ojs.call (t_to_js x266) "replace"
                     [|(union3_to_js Position.t_to_js Range.t_to_js
                          Selection.t_to_js x261);(Ojs.string_to_js x265)|])
        let (insert : t -> location:Position.t -> value:string -> unit) =
          fun (x269 : t) ->
            fun ~location:(x267 : Position.t) ->
              fun ~value:(x268 : string) ->
                ignore
                  (Ojs.call (t_to_js x269) "insert"
                     [|(Position.t_to_js x267);(Ojs.string_to_js x268)|])
        let (delete : t -> (Range.t, Selection.t) union2 -> unit) =
          fun (x273 : t) ->
            fun (x270 : (Range.t, Selection.t) union2) ->
              ignore
                (Ojs.call (t_to_js x273) "delete"
                   [|(union2_to_js Range.t_to_js Selection.t_to_js x270)|])
        let (set_end_of_line : t -> EndOfLine.t -> unit) =
          fun (x275 : t) ->
            fun (x274 : EndOfLine.t) ->
              ignore
                (Ojs.call (t_to_js x275) "setEndOfLine"
                   [|(EndOfLine.t_to_js x274)|])
      end
    module ViewColumn =
      struct
        type t =
          [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | `Six 
          | `Seven  | `Eight  | `Nine ]
        let rec t_of_js : Ojs.t -> t =
          fun (x277 : Ojs.t) ->
            let x278 = x277 in
            match Ojs.int_of_js x278 with
            | (-2) -> `Beside
            | 1 -> `One
            | 2 -> `Two
            | 3 -> `Three
            | 4 -> `Four
            | 5 -> `Five
            | 6 -> `Six
            | 7 -> `Seven
            | 8 -> `Eight
            | 9 -> `Nine
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x276 :
              [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | 
                `Six 
              | `Seven  | `Eight  | `Nine ])
            ->
            match x276 with
            | `Beside -> Ojs.int_to_js (-2)
            | `One -> Ojs.int_to_js 1
            | `Two -> Ojs.int_to_js 2
            | `Three -> Ojs.int_to_js 3
            | `Four -> Ojs.int_to_js 4
            | `Five -> Ojs.int_to_js 5
            | `Six -> Ojs.int_to_js 6
            | `Seven -> Ojs.int_to_js 7
            | `Eight -> Ojs.int_to_js 8
            | `Nine -> Ojs.int_to_js 9
      end
    module SnippetString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x280 : Ojs.t) -> x280
        and t_to_js : t -> Ojs.t = fun (x279 : Ojs.t) -> x279
        let (value : t -> string) =
          fun (x281 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x281) "value")
        let (set_value : t -> string -> unit) =
          fun (x282 : t) ->
            fun (x283 : string) ->
              Ojs.set_prop_ascii (t_to_js x282) "value"
                (Ojs.string_to_js x283)
        let (create : ?value:string -> unit -> t) =
          fun ?value:(x284 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SnippetString")
                   (let x285 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x284 with
                     | Some x286 ->
                         ignore
                           (Ojs.call x285 "push" [|(Ojs.string_to_js x286)|])
                     | None -> ());
                    x285))
        let (append_text : t -> string -> t) =
          fun (x288 : t) ->
            fun (x287 : string) ->
              t_of_js
                (Ojs.call (t_to_js x288) "appendText"
                   [|(Ojs.string_to_js x287)|])
        let (append_tabstop : t -> ?number:int -> unit -> t) =
          fun (x292 : t) ->
            fun ?number:(x289 : int option) ->
              fun () ->
                t_of_js
                  (let x293 = t_to_js x292 in
                   Ojs.call (Ojs.get_prop_ascii x293 "appendTabstop") "apply"
                     [|x293;((let x290 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x289 with
                               | Some x291 ->
                                   ignore
                                     (Ojs.call x290 "push"
                                        [|(Ojs.int_to_js x291)|])
                               | None -> ());
                              x290))|])
        let (append_placeholder : t -> string -> ?number:int -> unit -> t) =
          fun (x298 : t) ->
            fun (x294 : string) ->
              fun ?number:(x295 : int option) ->
                fun () ->
                  t_of_js
                    (let x299 = t_to_js x298 in
                     Ojs.call (Ojs.get_prop_ascii x299 "appendPlaceholder")
                       "apply"
                       [|x299;((let x296 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x296 "push"
                                     [|(Ojs.string_to_js x294)|]);
                                (match x295 with
                                 | Some x297 ->
                                     ignore
                                       (Ojs.call x296 "push"
                                          [|(Ojs.int_to_js x297)|])
                                 | None -> ());
                                x296))|])
        let (append_choice : t -> string list -> ?number:int -> unit -> t) =
          fun (x305 : t) ->
            fun (x300 : string list) ->
              fun ?number:(x301 : int option) ->
                fun () ->
                  t_of_js
                    (let x306 = t_to_js x305 in
                     Ojs.call (Ojs.get_prop_ascii x306 "appendChoice")
                       "apply"
                       [|x306;((let x302 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x302 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x300)|]);
                                (match x301 with
                                 | Some x303 ->
                                     ignore
                                       (Ojs.call x302 "push"
                                          [|(Ojs.int_to_js x303)|])
                                 | None -> ());
                                x302))|])
        let (append_variable : t -> string -> default:string -> t) =
          fun (x309 : t) ->
            fun (x307 : string) ->
              fun ~default:(x308 : string) ->
                t_of_js
                  (Ojs.call (t_to_js x309) "appendVariable"
                     [|(Ojs.string_to_js x307);(Ojs.string_to_js x308)|])
      end
    module ThemeColor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x311 : Ojs.t) -> x311
        and t_to_js : t -> Ojs.t = fun (x310 : Ojs.t) -> x310
        let (create : string -> t) =
          fun (x312 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeColor")
                 [|(Ojs.string_to_js x312)|])
      end
    module ThemeIcon =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x314 : Ojs.t) -> x314
        and t_to_js : t -> Ojs.t = fun (x313 : Ojs.t) -> x313
        let (file : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "File")
        let (folder : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "Folder")
        let (id : t -> string) =
          fun (x315 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x315) "id")
        let (color : t -> ThemeColor.t) =
          fun (x316 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x316) "color")
        let (create : string -> ?color:ThemeColor.t -> unit -> t) =
          fun (x317 : string) ->
            fun ?color:(x318 : ThemeColor.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                     (let x319 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x319 "push" [|(Ojs.string_to_js x317)|]);
                      (match x318 with
                       | Some x320 ->
                           ignore
                             (Ojs.call x319 "push"
                                [|(ThemeColor.t_to_js x320)|])
                       | None -> ());
                      x319))
      end
    module ThemableDecorationAttachmentRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x322 : Ojs.t) -> x322
        and t_to_js : t -> Ojs.t = fun (x321 : Ojs.t) -> x321
        let (content_text : t -> string) =
          fun (x323 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x323) "contentText")
        let (set_content_text : t -> string -> unit) =
          fun (x324 : t) ->
            fun (x325 : string) ->
              Ojs.set_prop_ascii (t_to_js x324) "contentText"
                (Ojs.string_to_js x325)
        let (content_icon_path : t -> Uri.t or_string) =
          fun (x326 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x326) "contentIconPath")
        let (set_content_icon_path : t -> Uri.t or_string -> unit) =
          fun (x328 : t) ->
            fun (x329 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x328) "contentIconPath"
                (or_string_to_js Uri.t_to_js x329)
        let (border : t -> string) =
          fun (x331 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x331) "border")
        let (set_border : t -> string -> unit) =
          fun (x332 : t) ->
            fun (x333 : string) ->
              Ojs.set_prop_ascii (t_to_js x332) "border"
                (Ojs.string_to_js x333)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x334 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x334) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x336 : t) ->
            fun (x337 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x336) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x337)
        let (font_style : t -> string) =
          fun (x339 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x339) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x340 : t) ->
            fun (x341 : string) ->
              Ojs.set_prop_ascii (t_to_js x340) "fontStyle"
                (Ojs.string_to_js x341)
        let (font_weight : t -> string) =
          fun (x342 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x342) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x343 : t) ->
            fun (x344 : string) ->
              Ojs.set_prop_ascii (t_to_js x343) "fontWeight"
                (Ojs.string_to_js x344)
        let (text_decoration : t -> string) =
          fun (x345 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x345) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x346 : t) ->
            fun (x347 : string) ->
              Ojs.set_prop_ascii (t_to_js x346) "textDecoration"
                (Ojs.string_to_js x347)
        let (color : t -> ThemeColor.t or_string) =
          fun (x348 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x348) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x350 : t) ->
            fun (x351 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x350) "color"
                (or_string_to_js ThemeColor.t_to_js x351)
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x353 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x353) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x355 : t) ->
            fun (x356 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x355) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x356)
        let (margin : t -> string) =
          fun (x358 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x358) "margin")
        let (set_margin : t -> string -> unit) =
          fun (x359 : t) ->
            fun (x360 : string) ->
              Ojs.set_prop_ascii (t_to_js x359) "margin"
                (Ojs.string_to_js x360)
        let (width : t -> string) =
          fun (x361 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x361) "width")
        let (set_width : t -> string -> unit) =
          fun (x362 : t) ->
            fun (x363 : string) ->
              Ojs.set_prop_ascii (t_to_js x362) "width"
                (Ojs.string_to_js x363)
        let (height : t -> string) =
          fun (x364 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x364) "height")
        let (set_height : t -> string -> unit) =
          fun (x365 : t) ->
            fun (x366 : string) ->
              Ojs.set_prop_ascii (t_to_js x365) "height"
                (Ojs.string_to_js x366)
      end
    module ThemableDecorationRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x368 : Ojs.t) -> x368
        and t_to_js : t -> Ojs.t = fun (x367 : Ojs.t) -> x367
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x369 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x369) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x371 : t) ->
            fun (x372 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x371) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x372)
        let (outline : t -> string) =
          fun (x374 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x374) "outline")
        let (set_outline : t -> string -> unit) =
          fun (x375 : t) ->
            fun (x376 : string) ->
              Ojs.set_prop_ascii (t_to_js x375) "outline"
                (Ojs.string_to_js x376)
        let (outline_color : t -> ThemeColor.t or_string) =
          fun (x377 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x377) "outlineColor")
        let (set_outline_color : t -> ThemeColor.t or_string -> unit) =
          fun (x379 : t) ->
            fun (x380 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x379) "outlineColor"
                (or_string_to_js ThemeColor.t_to_js x380)
        let (outline_style : t -> string) =
          fun (x382 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x382) "outlineStyle")
        let (set_outline_style : t -> string -> unit) =
          fun (x383 : t) ->
            fun (x384 : string) ->
              Ojs.set_prop_ascii (t_to_js x383) "outlineStyle"
                (Ojs.string_to_js x384)
        let (outline_width : t -> string) =
          fun (x385 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x385) "outlineWidth")
        let (set_outline_width : t -> string -> unit) =
          fun (x386 : t) ->
            fun (x387 : string) ->
              Ojs.set_prop_ascii (t_to_js x386) "outlineWidth"
                (Ojs.string_to_js x387)
        let (border : t -> string) =
          fun (x388 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x388) "border")
        let (set_border : t -> string -> unit) =
          fun (x389 : t) ->
            fun (x390 : string) ->
              Ojs.set_prop_ascii (t_to_js x389) "border"
                (Ojs.string_to_js x390)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x391 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x391) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x393 : t) ->
            fun (x394 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x393) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x394)
        let (border_radius : t -> string) =
          fun (x396 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x396) "borderRadius")
        let (set_border_radius : t -> string -> unit) =
          fun (x397 : t) ->
            fun (x398 : string) ->
              Ojs.set_prop_ascii (t_to_js x397) "borderRadius"
                (Ojs.string_to_js x398)
        let (border_spacing : t -> string) =
          fun (x399 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x399) "borderSpacing")
        let (set_border_spacing : t -> string -> unit) =
          fun (x400 : t) ->
            fun (x401 : string) ->
              Ojs.set_prop_ascii (t_to_js x400) "borderSpacing"
                (Ojs.string_to_js x401)
        let (border_style : t -> string) =
          fun (x402 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x402) "borderStyle")
        let (set_border_style : t -> string -> unit) =
          fun (x403 : t) ->
            fun (x404 : string) ->
              Ojs.set_prop_ascii (t_to_js x403) "borderStyle"
                (Ojs.string_to_js x404)
        let (border_width : t -> string) =
          fun (x405 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x405) "borderWidth")
        let (set_border_width : t -> string -> unit) =
          fun (x406 : t) ->
            fun (x407 : string) ->
              Ojs.set_prop_ascii (t_to_js x406) "borderWidth"
                (Ojs.string_to_js x407)
        let (font_style : t -> string) =
          fun (x408 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x408) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x409 : t) ->
            fun (x410 : string) ->
              Ojs.set_prop_ascii (t_to_js x409) "fontStyle"
                (Ojs.string_to_js x410)
        let (font_weight : t -> string) =
          fun (x411 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x411) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x412 : t) ->
            fun (x413 : string) ->
              Ojs.set_prop_ascii (t_to_js x412) "fontWeight"
                (Ojs.string_to_js x413)
        let (text_decoration : t -> string) =
          fun (x414 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x414) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x415 : t) ->
            fun (x416 : string) ->
              Ojs.set_prop_ascii (t_to_js x415) "textDecoration"
                (Ojs.string_to_js x416)
        let (cursor : t -> string) =
          fun (x417 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x417) "cursor")
        let (set_cursor : t -> string -> unit) =
          fun (x418 : t) ->
            fun (x419 : string) ->
              Ojs.set_prop_ascii (t_to_js x418) "cursor"
                (Ojs.string_to_js x419)
        let (color : t -> ThemeColor.t or_string) =
          fun (x420 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x420) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x422 : t) ->
            fun (x423 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x422) "color"
                (or_string_to_js ThemeColor.t_to_js x423)
        let (opacity : t -> string) =
          fun (x425 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x425) "opacity")
        let (set_opacity : t -> string -> unit) =
          fun (x426 : t) ->
            fun (x427 : string) ->
              Ojs.set_prop_ascii (t_to_js x426) "opacity"
                (Ojs.string_to_js x427)
        let (letter_spacing : t -> string) =
          fun (x428 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x428) "letterSpacing")
        let (set_letter_spacing : t -> string -> unit) =
          fun (x429 : t) ->
            fun (x430 : string) ->
              Ojs.set_prop_ascii (t_to_js x429) "letterSpacing"
                (Ojs.string_to_js x430)
        let (gutter_icon_path : t -> Uri.t or_string) =
          fun (x431 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x431) "gutterIconPath")
        let (set_gutter_icon_path : t -> Uri.t or_string -> unit) =
          fun (x433 : t) ->
            fun (x434 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x433) "gutterIconPath"
                (or_string_to_js Uri.t_to_js x434)
        let (gutter_icon_size : t -> string) =
          fun (x436 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x436) "gutterIconSize")
        let (set_gutter_icon_size : t -> string -> unit) =
          fun (x437 : t) ->
            fun (x438 : string) ->
              Ojs.set_prop_ascii (t_to_js x437) "gutterIconSize"
                (Ojs.string_to_js x438)
        let (overview_ruler_color : t -> ThemeColor.t or_string) =
          fun (x439 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x439) "overviewRulerColor")
        let (set_overview_ruler_color : t -> ThemeColor.t or_string -> unit)
          =
          fun (x441 : t) ->
            fun (x442 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x441) "overviewRulerColor"
                (or_string_to_js ThemeColor.t_to_js x442)
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x444 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x444) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x445 : t) ->
            fun (x446 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x445) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x446)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x447 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x447) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x448 : t) ->
            fun (x449 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x448) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x449)
      end
    module OverviewRulerLane =
      struct
        type t = [ `Center  | `Right  | `Full ]
        let rec t_of_js : Ojs.t -> t =
          fun (x451 : Ojs.t) ->
            let x452 = x451 in
            match Ojs.int_of_js x452 with
            | 2 -> `Center
            | 4 -> `Right
            | 7 -> `Full
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x450 : [ `Center  | `Right  | `Full ]) ->
            match x450 with
            | `Center -> Ojs.int_to_js 2
            | `Right -> Ojs.int_to_js 4
            | `Full -> Ojs.int_to_js 7
      end
    module DecorationRangeBehavior =
      struct
        type t = [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]
        let rec t_of_js : Ojs.t -> t =
          fun (x454 : Ojs.t) ->
            let x455 = x454 in
            match Ojs.int_of_js x455 with
            | 1 -> `ClosedClosed
            | 2 -> `OpenClosed
            | 3 -> `ClosedOpen
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x453 : [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]) ->
            match x453 with
            | `ClosedClosed -> Ojs.int_to_js 1
            | `OpenClosed -> Ojs.int_to_js 2
            | `ClosedOpen -> Ojs.int_to_js 3
      end
    module DecorationRenderOptions =
      struct
        include struct include ThemableDecorationRenderOptions end
        let (is_whole_line : t -> bool) =
          fun (x456 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x456) "isWholeLine")
        let (set_is_whole_line : t -> bool -> unit) =
          fun (x457 : t) ->
            fun (x458 : bool) ->
              Ojs.set_prop_ascii (t_to_js x457) "isWholeLine"
                (Ojs.bool_to_js x458)
        let (range_behavior : t -> DecorationRangeBehavior.t) =
          fun (x459 : t) ->
            DecorationRangeBehavior.t_of_js
              (Ojs.get_prop_ascii (t_to_js x459) "rangeBehavior")
        let (set_range_behavior : t -> DecorationRangeBehavior.t -> unit) =
          fun (x460 : t) ->
            fun (x461 : DecorationRangeBehavior.t) ->
              Ojs.set_prop_ascii (t_to_js x460) "rangeBehavior"
                (DecorationRangeBehavior.t_to_js x461)
        let (overview_ruler_lane : t -> OverviewRulerLane.t) =
          fun (x462 : t) ->
            OverviewRulerLane.t_of_js
              (Ojs.get_prop_ascii (t_to_js x462) "overviewRulerLane")
        let (set_overview_ruler_lane : t -> OverviewRulerLane.t -> unit) =
          fun (x463 : t) ->
            fun (x464 : OverviewRulerLane.t) ->
              Ojs.set_prop_ascii (t_to_js x463) "overviewRulerLane"
                (OverviewRulerLane.t_to_js x464)
        let (light : t -> ThemableDecorationRenderOptions.t) =
          fun (x465 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x465) "light")
        let (set_light : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x466 : t) ->
            fun (x467 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x466) "light"
                (ThemableDecorationRenderOptions.t_to_js x467)
        let (dark : t -> ThemableDecorationRenderOptions.t) =
          fun (x468 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x468) "dark")
        let (set_dark : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x469 : t) ->
            fun (x470 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x469) "dark"
                (ThemableDecorationRenderOptions.t_to_js x470)
      end
    module ThemableDecorationInstanceRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x472 : Ojs.t) -> x472
        and t_to_js : t -> Ojs.t = fun (x471 : Ojs.t) -> x471
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x473 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x473) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x474 : t) ->
            fun (x475 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x474) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x475)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x476 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x476) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x477 : t) ->
            fun (x478 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x477) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x478)
      end
    module DecorationInstanceRenderOptions =
      struct
        include struct include ThemableDecorationInstanceRenderOptions end
        let (light : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x479 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x479) "light")
        let (set_light :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x480 : t) ->
            fun (x481 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x480) "light"
                (ThemableDecorationInstanceRenderOptions.t_to_js x481)
        let (dark : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x482 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x482) "dark")
        let (set_dark :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x483 : t) ->
            fun (x484 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x483) "dark"
                (ThemableDecorationInstanceRenderOptions.t_to_js x484)
      end
    module MarkedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x486 : Ojs.t) -> x486
        and t_to_js : t -> Ojs.t = fun (x485 : Ojs.t) -> x485
      end
    module DecorationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x488 : Ojs.t) -> x488
        and t_to_js : t -> Ojs.t = fun (x487 : Ojs.t) -> x487
        let (range : t -> Range.t) =
          fun (x489 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x489) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x490 : t) ->
            fun (x491 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x490) "range" (Range.t_to_js x491)
        let (hover_message : t -> (MarkedString.t, MarkedString.t) or_array)
          =
          fun (x492 : t) ->
            or_array_of_js MarkedString.t_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x492) "hoverMessage")
        let (set_hover_message :
          t -> (MarkedString.t, MarkedString.t) or_array -> unit) =
          fun (x495 : t) ->
            fun (x496 : (MarkedString.t, MarkedString.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x495) "hoverMessage"
                (or_array_to_js MarkedString.t_to_js MarkedString.t_to_js
                   x496)
        let (render_options : t -> DecorationInstanceRenderOptions.t) =
          fun (x499 : t) ->
            DecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x499) "renderOptions")
        let (set_render_options :
          t -> DecorationInstanceRenderOptions.t -> unit) =
          fun (x500 : t) ->
            fun (x501 : DecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x500) "renderOptions"
                (DecorationInstanceRenderOptions.t_to_js x501)
      end
    module TextEditor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x503 : Ojs.t) -> x503
        and t_to_js : t -> Ojs.t = fun (x502 : Ojs.t) -> x502
        let (document : t -> TextDocument.t) =
          fun (x504 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x504) "document")
        let (selection : t -> Selection.t) =
          fun (x505 : t) ->
            Selection.t_of_js (Ojs.get_prop_ascii (t_to_js x505) "selection")
        let (set_selection : t -> Selection.t -> unit) =
          fun (x506 : t) ->
            fun (x507 : Selection.t) ->
              Ojs.set_prop_ascii (t_to_js x506) "selection"
                (Selection.t_to_js x507)
        let (selections : t -> Selection.t list) =
          fun (x508 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x508) "selections")
        let (set_selections : t -> Selection.t list -> unit) =
          fun (x510 : t) ->
            fun (x511 : Selection.t list) ->
              Ojs.set_prop_ascii (t_to_js x510) "selections"
                (Ojs.list_to_js Selection.t_to_js x511)
        let (visible_ranges : t -> Range.t list) =
          fun (x513 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x513) "visibleRanges")
        let (options : t -> TextEditorOptions.t) =
          fun (x515 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x515) "options")
        let (set_options : t -> TextEditorOptions.t -> unit) =
          fun (x516 : t) ->
            fun (x517 : TextEditorOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x516) "options"
                (TextEditorOptions.t_to_js x517)
        let (view_column : t -> ViewColumn.t) =
          fun (x518 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x518) "viewColumn")
        module EditOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x520 : Ojs.t) -> x520
            and t_to_js : t -> Ojs.t = fun (x519 : Ojs.t) -> x519
            let (undo_stop_before : t -> bool) =
              fun (x521 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x521) "undoStopBefore")
            let (set_undo_stop_before : t -> bool -> unit) =
              fun (x522 : t) ->
                fun (x523 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x522) "undoStopBefore"
                    (Ojs.bool_to_js x523)
            let (undo_stop_after : t -> bool) =
              fun (x524 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x524) "undoStopAfter")
            let (set_undo_stop_after : t -> bool -> unit) =
              fun (x525 : t) ->
                fun (x526 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x525) "undoStopAfter"
                    (Ojs.bool_to_js x526)
          end
        let (edit :
          t ->
            (TextEditorEdit.t -> unit) ->
              ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x532 : t) ->
            fun (x527 : TextEditorEdit.t -> unit) ->
              fun ?options:(x528 : EditOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x533 = t_to_js x532 in
                     Ojs.call (Ojs.get_prop_ascii x533 "edit") "apply"
                       [|x533;((let x529 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x529 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x531 : Ojs.t) ->
                                             x527
                                               (TextEditorEdit.t_of_js x531)))|]);
                                (match x528 with
                                 | Some x530 ->
                                     ignore
                                       (Ojs.call x529 "push"
                                          [|(EditOptions.t_to_js x530)|])
                                 | None -> ());
                                x529))|])
        let (insert_snippet :
          t ->
            SnippetString.t ->
              ?location:(Position.t, Range.t, Position.t list, Range.t list)
                union4 -> ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x547 : t) ->
            fun (x535 : SnippetString.t) ->
              fun
                ?location:(x536 :
                            (Position.t, Range.t, Position.t list,
                              Range.t list) union4 option)
                ->
                fun ?options:(x537 : EditOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.bool_of_js
                      (let x548 = t_to_js x547 in
                       Ojs.call (Ojs.get_prop_ascii x548 "insertSnippet")
                         "apply"
                         [|x548;((let x538 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x538 "push"
                                       [|(SnippetString.t_to_js x535)|]);
                                  (match x536 with
                                   | Some x540 ->
                                       ignore
                                         (Ojs.call x538 "push"
                                            [|(union4_to_js Position.t_to_js
                                                 Range.t_to_js
                                                 (fun
                                                    (x543 : Position.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Position.t_to_js x543)
                                                 (fun (x545 : Range.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Range.t_to_js x545)
                                                 x540)|])
                                   | None -> ());
                                  (match x537 with
                                   | Some x539 ->
                                       ignore
                                         (Ojs.call x538 "push"
                                            [|(EditOptions.t_to_js x539)|])
                                   | None -> ());
                                  x538))|])
        let (set_decorations :
          t ->
            TextEditorDecorationType.t ->
              (DecorationOptions.t, Range.t) union2 list -> unit)
          =
          fun (x555 : t) ->
            fun (x550 : TextEditorDecorationType.t) ->
              fun (x551 : (DecorationOptions.t, Range.t) union2 list) ->
                ignore
                  (Ojs.call (t_to_js x555) "setDecorations"
                     [|(TextEditorDecorationType.t_to_js x550);(Ojs.list_to_js
                                                                  (fun
                                                                    (x552 :
                                                                    (DecorationOptions.t,
                                                                    Range.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    DecorationOptions.t_to_js
                                                                    Range.t_to_js
                                                                    x552)
                                                                  x551)|])
        let (reveal_range :
          t ->
            Range.t -> ?reveal_type_:TextEditorRevealType.t -> unit -> unit)
          =
          fun (x560 : t) ->
            fun (x556 : Range.t) ->
              fun ?reveal_type_:(x557 : TextEditorRevealType.t option) ->
                fun () ->
                  ignore
                    (let x561 = t_to_js x560 in
                     Ojs.call (Ojs.get_prop_ascii x561 "revealRange") "apply"
                       [|x561;((let x558 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x558 "push"
                                     [|(Range.t_to_js x556)|]);
                                (match x557 with
                                 | Some x559 ->
                                     ignore
                                       (Ojs.call x558 "push"
                                          [|(TextEditorRevealType.t_to_js
                                               x559)|])
                                 | None -> ());
                                x558))|])
        let (show : t -> ?column:ViewColumn.t -> unit -> unit) =
          fun (x565 : t) ->
            fun ?column:(x562 : ViewColumn.t option) ->
              fun () ->
                ignore
                  (let x566 = t_to_js x565 in
                   Ojs.call (Ojs.get_prop_ascii x566 "show") "apply"
                     [|x566;((let x563 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x562 with
                               | Some x564 ->
                                   ignore
                                     (Ojs.call x563 "push"
                                        [|(ViewColumn.t_to_js x564)|])
                               | None -> ());
                              x563))|])
        let (hide : t -> unit) =
          fun (x567 : t) -> ignore (Ojs.call (t_to_js x567) "hide" [||])
      end
    module TextEditorSelectionChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x569 : Ojs.t) -> x569
        and t_to_js : t -> Ojs.t = fun (x568 : Ojs.t) -> x568
        let (text_editor : t -> TextEditor.t) =
          fun (x570 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x570) "textEditor")
        let (selections : t -> Selection.t list) =
          fun (x571 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x571) "selections")
        let (kind : t -> TextEditorSelectionChangeKind.t) =
          fun (x573 : t) ->
            TextEditorSelectionChangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x573) "kind")
      end
    module TextEditorVisibleRangesChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x575 : Ojs.t) -> x575
        and t_to_js : t -> Ojs.t = fun (x574 : Ojs.t) -> x574
        let (text_editor : t -> TextEditor.t) =
          fun (x576 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x576) "textEditor")
        let (visible_ranges : t -> Range.t list) =
          fun (x577 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x577) "visibleRanges")
      end
    module TextEditorOptionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x580 : Ojs.t) -> x580
        and t_to_js : t -> Ojs.t = fun (x579 : Ojs.t) -> x579
        let (text_editor : t -> TextEditor.t) =
          fun (x581 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x581) "textEditor")
        let (options : t -> TextEditorOptions.t) =
          fun (x582 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x582) "options")
      end
    module TextEditorViewColumnChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x584 : Ojs.t) -> x584
        and t_to_js : t -> Ojs.t = fun (x583 : Ojs.t) -> x583
        let (text_editor : t -> TextEditor.t) =
          fun (x585 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x585) "textEditor")
        let (view_column : t -> ViewColumn.t) =
          fun (x586 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x586) "viewColumn")
      end
    module TextDocumentShowOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x588 : Ojs.t) -> x588
        and t_to_js : t -> Ojs.t = fun (x587 : Ojs.t) -> x587
        let (view_column : t -> ViewColumn.t) =
          fun (x589 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x589) "viewColumn")
        let (set_view_column : t -> ViewColumn.t -> unit) =
          fun (x590 : t) ->
            fun (x591 : ViewColumn.t) ->
              Ojs.set_prop_ascii (t_to_js x590) "viewColumn"
                (ViewColumn.t_to_js x591)
        let (preserve_focus : t -> bool) =
          fun (x592 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x592) "preserveFocus")
        let (set_preserve_focus : t -> bool -> unit) =
          fun (x593 : t) ->
            fun (x594 : bool) ->
              Ojs.set_prop_ascii (t_to_js x593) "preserveFocus"
                (Ojs.bool_to_js x594)
        let (preview : t -> bool) =
          fun (x595 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x595) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x596 : t) ->
            fun (x597 : bool) ->
              Ojs.set_prop_ascii (t_to_js x596) "preview"
                (Ojs.bool_to_js x597)
        let (selection : t -> Range.t) =
          fun (x598 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x598) "selection")
        let (set_selection : t -> Range.t -> unit) =
          fun (x599 : t) ->
            fun (x600 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x599) "selection"
                (Range.t_to_js x600)
      end
    module DisposableLike =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x602 : Ojs.t) -> x602
        and t_to_js : t -> Ojs.t = fun (x601 : Ojs.t) -> x601
        let (dispose : t -> any) =
          fun (x603 : t) ->
            any_of_js (Ojs.call (t_to_js x603) "dispose" [||])
      end
    module Disposable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x605 : Ojs.t) -> x605
        and t_to_js : t -> Ojs.t = fun (x604 : Ojs.t) -> x604
        let (from : DisposableLike.t list -> t) =
          fun (x606 : DisposableLike.t list) ->
            t_of_js
              (let x609 =
                 Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                      "vscode") "Disposable" in
               Ojs.call (Ojs.get_prop_ascii x609 "from") "apply"
                 [|x609;((let x607 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x608 : DisposableLike.t) ->
                               ignore
                                 (Ojs.call x607 "push"
                                    [|(DisposableLike.t_to_js x608)|])) x606;
                          x607))|])
        let (create : untyped_function -> t) =
          fun (x610 : untyped_function) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Disposable")
                 [|(untyped_function_to_js x610)|])
        let (dispose : t -> any) =
          fun (x611 : t) ->
            any_of_js (Ojs.call (t_to_js x611) "dispose" [||])
      end
    module Event =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x613 : Ojs.t) -> x613
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x612 : Ojs.t) -> x612
        let (apply :
          'T t ->
            ('T -> any) ->
              ?this_args:any ->
                ?disposables:Disposable.t list -> unit -> Disposable.t)
          =
          fun (x622 : 'T t) ->
            fun (x614 : 'T -> any) ->
              fun ?this_args:(x615 : any option) ->
                fun ?disposables:(x616 : Disposable.t list option) ->
                  fun () ->
                    Disposable.t_of_js
                      (Ojs.call (t_to_js Obj.magic x622) "apply"
                         [|Ojs.null;((let x617 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x617 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x621 : Ojs.t) ->
                                                   any_to_js
                                                     (x614 (Obj.magic x621))))|]);
                                      (match x615 with
                                       | Some x620 ->
                                           ignore
                                             (Ojs.call x617 "push"
                                                [|(any_to_js x620)|])
                                       | None -> ());
                                      (match x616 with
                                       | Some x618 ->
                                           ignore
                                             (Ojs.call x617 "push"
                                                [|(Ojs.list_to_js
                                                     Disposable.t_to_js x618)|])
                                       | None -> ());
                                      x617))|])
      end
    module CancellationToken =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x625 : Ojs.t) -> x625
        and t_to_js : t -> Ojs.t = fun (x624 : Ojs.t) -> x624
        let (is_cancellation_requested : t -> bool) =
          fun (x626 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x626) "isCancellationRequested")
        let (set_is_cancellation_requested : t -> bool -> unit) =
          fun (x627 : t) ->
            fun (x628 : bool) ->
              Ojs.set_prop_ascii (t_to_js x627) "isCancellationRequested"
                (Ojs.bool_to_js x628)
        let (on_cancellation_requested : t -> any Event.t) =
          fun (x629 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x629) "onCancellationRequested")
        let (set_on_cancellation_requested : t -> any Event.t -> unit) =
          fun (x631 : t) ->
            fun (x632 : any Event.t) ->
              Ojs.set_prop_ascii (t_to_js x631) "onCancellationRequested"
                (Event.t_to_js any_to_js x632)
      end
    module CancellationTokenSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x635 : Ojs.t) -> x635
        and t_to_js : t -> Ojs.t = fun (x634 : Ojs.t) -> x634
        let (token : t -> CancellationToken.t) =
          fun (x636 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x636) "token")
        let (set_token : t -> CancellationToken.t -> unit) =
          fun (x637 : t) ->
            fun (x638 : CancellationToken.t) ->
              Ojs.set_prop_ascii (t_to_js x637) "token"
                (CancellationToken.t_to_js x638)
        let (cancel : t -> unit) =
          fun (x639 : t) -> ignore (Ojs.call (t_to_js x639) "cancel" [||])
        let (dispose : t -> unit) =
          fun (x640 : t) -> ignore (Ojs.call (t_to_js x640) "dispose" [||])
      end
    module CancellationError =
      struct
        include struct include Error end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CancellationError") [||])
      end
    module EventEmitter =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x642 : Ojs.t) -> x642
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x641 : Ojs.t) -> x641
        let (event : 'T t -> 'T Event.t) =
          fun (x643 : 'T t) ->
            Event.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x643) "event")
        let (set_event : 'T t -> 'T Event.t -> unit) =
          fun (x646 : 'T t) ->
            fun (x647 : 'T Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x646) "event"
                (Event.t_to_js Obj.magic x647)
        let (fire : 'T t -> data:'T -> unit) =
          fun (x651 : 'T t) ->
            fun ~data:(x650 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x651) "fire"
                   [|(Obj.magic x650)|])
        let (dispose : 'T t -> unit) =
          fun (x653 : 'T t) ->
            ignore (Ojs.call (t_to_js Obj.magic x653) "dispose" [||])
      end
    module FileSystemWatcher =
      struct
        include struct include Disposable end
        let (ignore_create_events : t -> bool) =
          fun (x655 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x655) "ignoreCreateEvents")
        let (set_ignore_create_events : t -> bool -> unit) =
          fun (x656 : t) ->
            fun (x657 : bool) ->
              Ojs.set_prop_ascii (t_to_js x656) "ignoreCreateEvents"
                (Ojs.bool_to_js x657)
        let (ignore_change_events : t -> bool) =
          fun (x658 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x658) "ignoreChangeEvents")
        let (set_ignore_change_events : t -> bool -> unit) =
          fun (x659 : t) ->
            fun (x660 : bool) ->
              Ojs.set_prop_ascii (t_to_js x659) "ignoreChangeEvents"
                (Ojs.bool_to_js x660)
        let (ignore_delete_events : t -> bool) =
          fun (x661 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x661) "ignoreDeleteEvents")
        let (set_ignore_delete_events : t -> bool -> unit) =
          fun (x662 : t) ->
            fun (x663 : bool) ->
              Ojs.set_prop_ascii (t_to_js x662) "ignoreDeleteEvents"
                (Ojs.bool_to_js x663)
        let (on_did_create : t -> Uri.t Event.t) =
          fun (x664 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x664) "onDidCreate")
        let (set_on_did_create : t -> Uri.t Event.t -> unit) =
          fun (x666 : t) ->
            fun (x667 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x666) "onDidCreate"
                (Event.t_to_js Uri.t_to_js x667)
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x669 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x669) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x671 : t) ->
            fun (x672 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x671) "onDidChange"
                (Event.t_to_js Uri.t_to_js x672)
        let (on_did_delete : t -> Uri.t Event.t) =
          fun (x674 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x674) "onDidDelete")
        let (set_on_did_delete : t -> Uri.t Event.t -> unit) =
          fun (x676 : t) ->
            fun (x677 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x676) "onDidDelete"
                (Event.t_to_js Uri.t_to_js x677)
      end
    module ProviderResult =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x680 : Ojs.t) -> x680
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x679 : Ojs.t) -> x679
      end
    module TextDocumentContentProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x682 : Ojs.t) -> x682
        and t_to_js : t -> Ojs.t = fun (x681 : Ojs.t) -> x681
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x683 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x683) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x685 : t) ->
            fun (x686 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x685) "onDidChange"
                (Event.t_to_js Uri.t_to_js x686)
        let (provide_text_document_content :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> string ProviderResult.t)
          =
          fun (x690 : t) ->
            fun ~uri:(x688 : Uri.t) ->
              fun ~token:(x689 : CancellationToken.t) ->
                ProviderResult.t_of_js Ojs.string_of_js
                  (Ojs.call (t_to_js x690) "provideTextDocumentContent"
                     [|(Uri.t_to_js x688);(CancellationToken.t_to_js x689)|])
      end
    module QuickPickItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x693 : Ojs.t) -> x693
        and t_to_js : t -> Ojs.t = fun (x692 : Ojs.t) -> x692
        let (label : t -> string) =
          fun (x694 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x694) "label")
        let (set_label : t -> string -> unit) =
          fun (x695 : t) ->
            fun (x696 : string) ->
              Ojs.set_prop_ascii (t_to_js x695) "label"
                (Ojs.string_to_js x696)
        let (description : t -> string) =
          fun (x697 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x697) "description")
        let (set_description : t -> string -> unit) =
          fun (x698 : t) ->
            fun (x699 : string) ->
              Ojs.set_prop_ascii (t_to_js x698) "description"
                (Ojs.string_to_js x699)
        let (detail : t -> string) =
          fun (x700 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x700) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x701 : t) ->
            fun (x702 : string) ->
              Ojs.set_prop_ascii (t_to_js x701) "detail"
                (Ojs.string_to_js x702)
        let (picked : t -> bool) =
          fun (x703 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x703) "picked")
        let (set_picked : t -> bool -> unit) =
          fun (x704 : t) ->
            fun (x705 : bool) ->
              Ojs.set_prop_ascii (t_to_js x704) "picked"
                (Ojs.bool_to_js x705)
        let (always_show : t -> bool) =
          fun (x706 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x706) "alwaysShow")
        let (set_always_show : t -> bool -> unit) =
          fun (x707 : t) ->
            fun (x708 : bool) ->
              Ojs.set_prop_ascii (t_to_js x707) "alwaysShow"
                (Ojs.bool_to_js x708)
      end
    module QuickPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x710 : Ojs.t) -> x710
        and t_to_js : t -> Ojs.t = fun (x709 : Ojs.t) -> x709
        let (match_on_description : t -> bool) =
          fun (x711 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x711) "matchOnDescription")
        let (set_match_on_description : t -> bool -> unit) =
          fun (x712 : t) ->
            fun (x713 : bool) ->
              Ojs.set_prop_ascii (t_to_js x712) "matchOnDescription"
                (Ojs.bool_to_js x713)
        let (match_on_detail : t -> bool) =
          fun (x714 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x714) "matchOnDetail")
        let (set_match_on_detail : t -> bool -> unit) =
          fun (x715 : t) ->
            fun (x716 : bool) ->
              Ojs.set_prop_ascii (t_to_js x715) "matchOnDetail"
                (Ojs.bool_to_js x716)
        let (place_holder : t -> string) =
          fun (x717 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x717) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x718 : t) ->
            fun (x719 : string) ->
              Ojs.set_prop_ascii (t_to_js x718) "placeHolder"
                (Ojs.string_to_js x719)
        let (ignore_focus_out : t -> bool) =
          fun (x720 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x720) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x721 : t) ->
            fun (x722 : bool) ->
              Ojs.set_prop_ascii (t_to_js x721) "ignoreFocusOut"
                (Ojs.bool_to_js x722)
        let (can_pick_many : t -> bool) =
          fun (x723 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x723) "canPickMany")
        let (set_can_pick_many : t -> bool -> unit) =
          fun (x724 : t) ->
            fun (x725 : bool) ->
              Ojs.set_prop_ascii (t_to_js x724) "canPickMany"
                (Ojs.bool_to_js x725)
        let (on_did_select_item : t -> item:QuickPickItem.t or_string -> any)
          =
          fun (x728 : t) ->
            fun ~item:(x726 : QuickPickItem.t or_string) ->
              any_of_js
                (Ojs.call (t_to_js x728) "onDidSelectItem"
                   [|(or_string_to_js QuickPickItem.t_to_js x726)|])
      end
    module WorkspaceFolderPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x730 : Ojs.t) -> x730
        and t_to_js : t -> Ojs.t = fun (x729 : Ojs.t) -> x729
        let (place_holder : t -> string) =
          fun (x731 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x731) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x732 : t) ->
            fun (x733 : string) ->
              Ojs.set_prop_ascii (t_to_js x732) "placeHolder"
                (Ojs.string_to_js x733)
        let (ignore_focus_out : t -> bool) =
          fun (x734 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x734) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x735 : t) ->
            fun (x736 : bool) ->
              Ojs.set_prop_ascii (t_to_js x735) "ignoreFocusOut"
                (Ojs.bool_to_js x736)
      end
    module OpenDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x738 : Ojs.t) -> x738
        and t_to_js : t -> Ojs.t = fun (x737 : Ojs.t) -> x737
        let (default_uri : t -> Uri.t) =
          fun (x739 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x739) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x740 : t) ->
            fun (x741 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x740) "defaultUri"
                (Uri.t_to_js x741)
        let (open_label : t -> string) =
          fun (x742 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x742) "openLabel")
        let (set_open_label : t -> string -> unit) =
          fun (x743 : t) ->
            fun (x744 : string) ->
              Ojs.set_prop_ascii (t_to_js x743) "openLabel"
                (Ojs.string_to_js x744)
        let (can_select_files : t -> bool) =
          fun (x745 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x745) "canSelectFiles")
        let (set_can_select_files : t -> bool -> unit) =
          fun (x746 : t) ->
            fun (x747 : bool) ->
              Ojs.set_prop_ascii (t_to_js x746) "canSelectFiles"
                (Ojs.bool_to_js x747)
        let (can_select_folders : t -> bool) =
          fun (x748 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x748) "canSelectFolders")
        let (set_can_select_folders : t -> bool -> unit) =
          fun (x749 : t) ->
            fun (x750 : bool) ->
              Ojs.set_prop_ascii (t_to_js x749) "canSelectFolders"
                (Ojs.bool_to_js x750)
        let (can_select_many : t -> bool) =
          fun (x751 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x751) "canSelectMany")
        let (set_can_select_many : t -> bool -> unit) =
          fun (x752 : t) ->
            fun (x753 : bool) ->
              Ojs.set_prop_ascii (t_to_js x752) "canSelectMany"
                (Ojs.bool_to_js x753)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x755 : Ojs.t) -> x755
            and t_to_js : t -> Ojs.t = fun (x754 : Ojs.t) -> x754
            let (get : t -> string -> string list) =
              fun (x756 : t) ->
                fun (x757 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x756) (Ojs.string_to_js x757))
            let (set : t -> string -> string list -> unit) =
              fun (x759 : t) ->
                fun (x760 : string) ->
                  fun (x761 : string list) ->
                    Ojs.set_prop (t_to_js x759) (Ojs.string_to_js x760)
                      (Ojs.list_to_js Ojs.string_to_js x761)
          end
        let (filters : t -> Filters.t) =
          fun (x763 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x763) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x764 : t) ->
            fun (x765 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x764) "filters"
                (Filters.t_to_js x765)
        let (title : t -> string) =
          fun (x766 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x766) "title")
        let (set_title : t -> string -> unit) =
          fun (x767 : t) ->
            fun (x768 : string) ->
              Ojs.set_prop_ascii (t_to_js x767) "title"
                (Ojs.string_to_js x768)
      end
    module SaveDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x770 : Ojs.t) -> x770
        and t_to_js : t -> Ojs.t = fun (x769 : Ojs.t) -> x769
        let (default_uri : t -> Uri.t) =
          fun (x771 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x771) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x772 : t) ->
            fun (x773 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x772) "defaultUri"
                (Uri.t_to_js x773)
        let (save_label : t -> string) =
          fun (x774 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x774) "saveLabel")
        let (set_save_label : t -> string -> unit) =
          fun (x775 : t) ->
            fun (x776 : string) ->
              Ojs.set_prop_ascii (t_to_js x775) "saveLabel"
                (Ojs.string_to_js x776)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x778 : Ojs.t) -> x778
            and t_to_js : t -> Ojs.t = fun (x777 : Ojs.t) -> x777
            let (get : t -> string -> string list) =
              fun (x779 : t) ->
                fun (x780 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x779) (Ojs.string_to_js x780))
            let (set : t -> string -> string list -> unit) =
              fun (x782 : t) ->
                fun (x783 : string) ->
                  fun (x784 : string list) ->
                    Ojs.set_prop (t_to_js x782) (Ojs.string_to_js x783)
                      (Ojs.list_to_js Ojs.string_to_js x784)
          end
        let (filters : t -> Filters.t) =
          fun (x786 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x786) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x787 : t) ->
            fun (x788 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x787) "filters"
                (Filters.t_to_js x788)
        let (title : t -> string) =
          fun (x789 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x789) "title")
        let (set_title : t -> string -> unit) =
          fun (x790 : t) ->
            fun (x791 : string) ->
              Ojs.set_prop_ascii (t_to_js x790) "title"
                (Ojs.string_to_js x791)
      end
    module MessageItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x793 : Ojs.t) -> x793
        and t_to_js : t -> Ojs.t = fun (x792 : Ojs.t) -> x792
        let (title : t -> string) =
          fun (x794 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x794) "title")
        let (set_title : t -> string -> unit) =
          fun (x795 : t) ->
            fun (x796 : string) ->
              Ojs.set_prop_ascii (t_to_js x795) "title"
                (Ojs.string_to_js x796)
        let (is_close_affordance : t -> bool) =
          fun (x797 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x797) "isCloseAffordance")
        let (set_is_close_affordance : t -> bool -> unit) =
          fun (x798 : t) ->
            fun (x799 : bool) ->
              Ojs.set_prop_ascii (t_to_js x798) "isCloseAffordance"
                (Ojs.bool_to_js x799)
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x801 : Ojs.t) -> x801
        and t_to_js : t -> Ojs.t = fun (x800 : Ojs.t) -> x800
        let (modal : t -> bool) =
          fun (x802 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x802) "modal")
        let (set_modal : t -> bool -> unit) =
          fun (x803 : t) ->
            fun (x804 : bool) ->
              Ojs.set_prop_ascii (t_to_js x803) "modal" (Ojs.bool_to_js x804)
      end
    module InputBoxOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x806 : Ojs.t) -> x806
        and t_to_js : t -> Ojs.t = fun (x805 : Ojs.t) -> x805
        let (value : t -> string) =
          fun (x807 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x807) "value")
        let (set_value : t -> string -> unit) =
          fun (x808 : t) ->
            fun (x809 : string) ->
              Ojs.set_prop_ascii (t_to_js x808) "value"
                (Ojs.string_to_js x809)
        let (value_selection : t -> (int * int)) =
          fun (x810 : t) ->
            let x811 = Ojs.get_prop_ascii (t_to_js x810) "valueSelection" in
            ((Ojs.int_of_js (Ojs.array_get x811 0)),
              (Ojs.int_of_js (Ojs.array_get x811 1)))
        let (set_value_selection : t -> (int * int) -> unit) =
          fun (x812 : t) ->
            fun (x813 : (int * int)) ->
              Ojs.set_prop_ascii (t_to_js x812) "valueSelection"
                (let (x814, x815) = x813 in
                 let x816 = Ojs.array_make 2 in
                 Ojs.array_set x816 0 (Ojs.int_to_js x814);
                 Ojs.array_set x816 1 (Ojs.int_to_js x815);
                 x816)
        let (prompt : t -> string) =
          fun (x817 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x817) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x818 : t) ->
            fun (x819 : string) ->
              Ojs.set_prop_ascii (t_to_js x818) "prompt"
                (Ojs.string_to_js x819)
        let (place_holder : t -> string) =
          fun (x820 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x820) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x821 : t) ->
            fun (x822 : string) ->
              Ojs.set_prop_ascii (t_to_js x821) "placeHolder"
                (Ojs.string_to_js x822)
        let (password : t -> bool) =
          fun (x823 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x823) "password")
        let (set_password : t -> bool -> unit) =
          fun (x824 : t) ->
            fun (x825 : bool) ->
              Ojs.set_prop_ascii (t_to_js x824) "password"
                (Ojs.bool_to_js x825)
        let (ignore_focus_out : t -> bool) =
          fun (x826 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x826) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x827 : t) ->
            fun (x828 : bool) ->
              Ojs.set_prop_ascii (t_to_js x827) "ignoreFocusOut"
                (Ojs.bool_to_js x828)
        let (validate_input :
          t ->
            value:string ->
              string or_null_or_undefined Promise.t or_string
                or_null_or_undefined)
          =
          fun (x830 : t) ->
            fun ~value:(x829 : string) ->
              or_null_or_undefined_of_js
                (fun (x831 : Ojs.t) ->
                   or_string_of_js
                     (fun (x832 : Ojs.t) ->
                        Promise.t_of_js
                          (fun (x833 : Ojs.t) ->
                             or_null_or_undefined_of_js Ojs.string_of_js x833)
                          x832) x831)
                (Ojs.call (t_to_js x830) "validateInput"
                   [|(Ojs.string_to_js x829)|])
      end
    module WorkspaceFolder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x836 : Ojs.t) -> x836
        and t_to_js : t -> Ojs.t = fun (x835 : Ojs.t) -> x835
        let (uri : t -> Uri.t) =
          fun (x837 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x837) "uri")
        let (name : t -> string) =
          fun (x838 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x838) "name")
        let (index : t -> int) =
          fun (x839 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x839) "index")
      end
    module RelativePattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x841 : Ojs.t) -> x841
        and t_to_js : t -> Ojs.t = fun (x840 : Ojs.t) -> x840
        let (base : t -> string) =
          fun (x842 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x842) "base")
        let (set_base : t -> string -> unit) =
          fun (x843 : t) ->
            fun (x844 : string) ->
              Ojs.set_prop_ascii (t_to_js x843) "base"
                (Ojs.string_to_js x844)
        let (pattern : t -> string) =
          fun (x845 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x845) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x846 : t) ->
            fun (x847 : string) ->
              Ojs.set_prop_ascii (t_to_js x846) "pattern"
                (Ojs.string_to_js x847)
        let (create :
          base:(Uri.t, WorkspaceFolder.t) union2 or_string ->
            pattern:string -> t)
          =
          fun ~base:(x848 : (Uri.t, WorkspaceFolder.t) union2 or_string) ->
            fun ~pattern:(x852 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "RelativePattern")
                   [|(or_string_to_js
                        (fun (x849 : (Uri.t, WorkspaceFolder.t) union2) ->
                           union2_to_js Uri.t_to_js WorkspaceFolder.t_to_js
                             x849) x848);(Ojs.string_to_js x852)|])
      end
    module GlobPattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x854 : Ojs.t) -> x854
        and t_to_js : t -> Ojs.t = fun (x853 : Ojs.t) -> x853
      end
    module DocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x856 : Ojs.t) -> x856
        and t_to_js : t -> Ojs.t = fun (x855 : Ojs.t) -> x855
        let (language : t -> string) =
          fun (x857 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x857) "language")
        let (scheme : t -> string) =
          fun (x858 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x858) "scheme")
        let (pattern : t -> GlobPattern.t) =
          fun (x859 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x859) "pattern")
      end
    module DocumentSelector =
      struct
        type t =
          (DocumentFilter.t, DocumentFilter.t or_string list) union2
            or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x866 : Ojs.t) ->
            or_string_of_js
              (fun (x867 : Ojs.t) ->
                 union2_of_js DocumentFilter.t_of_js
                   (fun (x869 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x870 : Ojs.t) ->
                           or_string_of_js DocumentFilter.t_of_js x870) x869)
                   x867) x866
        and t_to_js : t -> Ojs.t =
          fun
            (x860 :
              (DocumentFilter.t, DocumentFilter.t or_string list) union2
                or_string)
            ->
            or_string_to_js
              (fun
                 (x861 :
                   (DocumentFilter.t, DocumentFilter.t or_string list) union2)
                 ->
                 union2_to_js DocumentFilter.t_to_js
                   (fun (x863 : DocumentFilter.t or_string list) ->
                      Ojs.list_to_js
                        (fun (x864 : DocumentFilter.t or_string) ->
                           or_string_to_js DocumentFilter.t_to_js x864) x863)
                   x861) x860
      end
    module Location =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x873 : Ojs.t) -> x873
        and t_to_js : t -> Ojs.t = fun (x872 : Ojs.t) -> x872
        let (uri : t -> Uri.t) =
          fun (x874 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x874) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x875 : t) ->
            fun (x876 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x875) "uri" (Uri.t_to_js x876)
        let (range : t -> Range.t) =
          fun (x877 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x877) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x878 : t) ->
            fun (x879 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x878) "range" (Range.t_to_js x879)
        let (create :
          uri:Uri.t -> range_or_position:(Position.t, Range.t) union2 -> t) =
          fun ~uri:(x880 : Uri.t) ->
            fun ~range_or_position:(x881 : (Position.t, Range.t) union2) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Location")
                   [|(Uri.t_to_js x880);(union2_to_js Position.t_to_js
                                           Range.t_to_js x881)|])
      end
    module DiagnosticChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x885 : Ojs.t) -> x885
        and t_to_js : t -> Ojs.t = fun (x884 : Ojs.t) -> x884
        let (uris : t -> Uri.t list) =
          fun (x886 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x886) "uris")
      end
    module DiagnosticSeverity =
      struct
        type t = [ `Warning  | `Information  | `Hint ]
        let rec t_of_js : Ojs.t -> t =
          fun (x889 : Ojs.t) ->
            let x890 = x889 in
            match Ojs.int_of_js x890 with
            | 1 -> `Warning
            | 2 -> `Information
            | 3 -> `Hint
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x888 : [ `Warning  | `Information  | `Hint ]) ->
            match x888 with
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
            | `Hint -> Ojs.int_to_js 3
      end
    module DiagnosticRelatedInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x892 : Ojs.t) -> x892
        and t_to_js : t -> Ojs.t = fun (x891 : Ojs.t) -> x891
        let (location : t -> Location.t) =
          fun (x893 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x893) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x894 : t) ->
            fun (x895 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x894) "location"
                (Location.t_to_js x895)
        let (message : t -> string) =
          fun (x896 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x896) "message")
        let (set_message : t -> string -> unit) =
          fun (x897 : t) ->
            fun (x898 : string) ->
              Ojs.set_prop_ascii (t_to_js x897) "message"
                (Ojs.string_to_js x898)
        let (create : location:Location.t -> message:string -> t) =
          fun ~location:(x899 : Location.t) ->
            fun ~message:(x900 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "DiagnosticRelatedInformation")
                   [|(Location.t_to_js x899);(Ojs.string_to_js x900)|])
      end
    module DiagnosticTag =
      struct
        type t = [ `Deprecated ]
        let rec t_of_js : Ojs.t -> t =
          fun (x902 : Ojs.t) ->
            let x903 = x902 in
            match Ojs.int_of_js x903 with
            | 2 -> `Deprecated
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x901 : [ `Deprecated ]) ->
            match x901 with | `Deprecated -> Ojs.int_to_js 2
      end
    module Diagnostic =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x905 : Ojs.t) -> x905
        and t_to_js : t -> Ojs.t = fun (x904 : Ojs.t) -> x904
        let (range : t -> Range.t) =
          fun (x906 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x906) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x907 : t) ->
            fun (x908 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x907) "range" (Range.t_to_js x908)
        let (message : t -> string) =
          fun (x909 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x909) "message")
        let (set_message : t -> string -> unit) =
          fun (x910 : t) ->
            fun (x911 : string) ->
              Ojs.set_prop_ascii (t_to_js x910) "message"
                (Ojs.string_to_js x911)
        let (severity : t -> DiagnosticSeverity.t) =
          fun (x912 : t) ->
            DiagnosticSeverity.t_of_js
              (Ojs.get_prop_ascii (t_to_js x912) "severity")
        let (set_severity : t -> DiagnosticSeverity.t -> unit) =
          fun (x913 : t) ->
            fun (x914 : DiagnosticSeverity.t) ->
              Ojs.set_prop_ascii (t_to_js x913) "severity"
                (DiagnosticSeverity.t_to_js x914)
        let (source : t -> string) =
          fun (x915 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x915) "source")
        let (set_source : t -> string -> unit) =
          fun (x916 : t) ->
            fun (x917 : string) ->
              Ojs.set_prop_ascii (t_to_js x916) "source"
                (Ojs.string_to_js x917)
        module Code =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x919 : Ojs.t) -> x919
            and t_to_js : t -> Ojs.t = fun (x918 : Ojs.t) -> x918
            let (value : t -> string or_number) =
              fun (x920 : t) ->
                or_number_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x920) "value")
            let (set_value : t -> string or_number -> unit) =
              fun (x922 : t) ->
                fun (x923 : string or_number) ->
                  Ojs.set_prop_ascii (t_to_js x922) "value"
                    (or_number_to_js Ojs.string_to_js x923)
            let (target : t -> Uri.t) =
              fun (x925 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x925) "target")
            let (set_target : t -> Uri.t -> unit) =
              fun (x926 : t) ->
                fun (x927 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x926) "target"
                    (Uri.t_to_js x927)
          end
        let (code : t -> Code.t or_string or_number) =
          fun (x928 : t) ->
            or_number_of_js
              (fun (x929 : Ojs.t) -> or_string_of_js Code.t_of_js x929)
              (Ojs.get_prop_ascii (t_to_js x928) "code")
        let (set_code : t -> Code.t or_string or_number -> unit) =
          fun (x931 : t) ->
            fun (x932 : Code.t or_string or_number) ->
              Ojs.set_prop_ascii (t_to_js x931) "code"
                (or_number_to_js
                   (fun (x933 : Code.t or_string) ->
                      or_string_to_js Code.t_to_js x933) x932)
        let (related_information : t -> DiagnosticRelatedInformation.t list)
          =
          fun (x935 : t) ->
            Ojs.list_of_js DiagnosticRelatedInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x935) "relatedInformation")
        let (set_related_information :
          t -> DiagnosticRelatedInformation.t list -> unit) =
          fun (x937 : t) ->
            fun (x938 : DiagnosticRelatedInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x937) "relatedInformation"
                (Ojs.list_to_js DiagnosticRelatedInformation.t_to_js x938)
        let (tags : t -> DiagnosticTag.t list) =
          fun (x940 : t) ->
            Ojs.list_of_js DiagnosticTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x940) "tags")
        let (set_tags : t -> DiagnosticTag.t list -> unit) =
          fun (x942 : t) ->
            fun (x943 : DiagnosticTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x942) "tags"
                (Ojs.list_to_js DiagnosticTag.t_to_js x943)
        let (create :
          range:Range.t ->
            message:string -> ?severity:DiagnosticSeverity.t -> unit -> t)
          =
          fun ~range:(x945 : Range.t) ->
            fun ~message:(x946 : string) ->
              fun ?severity:(x947 : DiagnosticSeverity.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Diagnostic")
                       (let x948 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x948 "push" [|(Range.t_to_js x945)|]);
                        ignore
                          (Ojs.call x948 "push" [|(Ojs.string_to_js x946)|]);
                        (match x947 with
                         | Some x949 ->
                             ignore
                               (Ojs.call x948 "push"
                                  [|(DiagnosticSeverity.t_to_js x949)|])
                         | None -> ());
                        x948))
      end
    module DiagnosticCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x951 : Ojs.t) -> x951
        and t_to_js : t -> Ojs.t = fun (x950 : Ojs.t) -> x950
        let (name : t -> string) =
          fun (x952 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x952) "name")
        let (set :
          t ->
            uri:Uri.t -> diagnostics:Diagnostic.t list or_undefined -> unit)
          =
          fun (x957 : t) ->
            fun ~uri:(x953 : Uri.t) ->
              fun ~diagnostics:(x954 : Diagnostic.t list or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x957) "set"
                     [|(Uri.t_to_js x953);(or_undefined_to_js
                                             (fun (x955 : Diagnostic.t list)
                                                ->
                                                Ojs.list_to_js
                                                  Diagnostic.t_to_js x955)
                                             x954)|])
        let (set' :
          t -> entries:(Uri.t * Diagnostic.t list or_undefined) list -> unit)
          =
          fun (x965 : t) ->
            fun
              ~entries:(x958 : (Uri.t * Diagnostic.t list or_undefined) list)
              ->
              ignore
                (Ojs.call (t_to_js x965) "set"
                   [|(Ojs.list_to_js
                        (fun
                           (x959 : (Uri.t * Diagnostic.t list or_undefined))
                           ->
                           let (x960, x961) = x959 in
                           let x962 = Ojs.array_make 2 in
                           Ojs.array_set x962 0 (Uri.t_to_js x960);
                           Ojs.array_set x962 1
                             (or_undefined_to_js
                                (fun (x963 : Diagnostic.t list) ->
                                   Ojs.list_to_js Diagnostic.t_to_js x963)
                                x961);
                           x962) x958)|])
        let (delete : t -> uri:Uri.t -> unit) =
          fun (x967 : t) ->
            fun ~uri:(x966 : Uri.t) ->
              ignore
                (Ojs.call (t_to_js x967) "delete" [|(Uri.t_to_js x966)|])
        let (clear : t -> unit) =
          fun (x968 : t) -> ignore (Ojs.call (t_to_js x968) "clear" [||])
        let (for_each :
          t ->
            callback:(uri:Uri.t ->
                        diagnostics:Diagnostic.t list -> collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x977 : t) ->
            fun
              ~callback:(x969 :
                          uri:Uri.t ->
                            diagnostics:Diagnostic.t list ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x970 : any option) ->
                fun () ->
                  ignore
                    (let x978 = t_to_js x977 in
                     Ojs.call (Ojs.get_prop_ascii x978 "forEach") "apply"
                       [|x978;((let x971 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x971 "push"
                                     [|(Ojs.fun_to_js 3
                                          (fun (x973 : Ojs.t) ->
                                             fun (x974 : Ojs.t) ->
                                               fun (x976 : Ojs.t) ->
                                                 any_to_js
                                                   (x969
                                                      ~uri:(Uri.t_of_js x973)
                                                      ~diagnostics:(Ojs.list_of_js
                                                                    Diagnostic.t_of_js
                                                                    x974)
                                                      ~collection:(t_of_js
                                                                    x976))))|]);
                                (match x970 with
                                 | Some x972 ->
                                     ignore
                                       (Ojs.call x971 "push"
                                          [|(any_to_js x972)|])
                                 | None -> ());
                                x971))|])
        let (get : t -> uri:Uri.t -> Diagnostic.t list or_undefined) =
          fun (x980 : t) ->
            fun ~uri:(x979 : Uri.t) ->
              or_undefined_of_js
                (fun (x981 : Ojs.t) -> Ojs.list_of_js Diagnostic.t_of_js x981)
                (Ojs.call (t_to_js x980) "get" [|(Uri.t_to_js x979)|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x984 : t) ->
            fun ~uri:(x983 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x984) "has" [|(Uri.t_to_js x983)|])
        let (dispose : t -> unit) =
          fun (x985 : t) -> ignore (Ojs.call (t_to_js x985) "dispose" [||])
      end
    module CodeActionKind =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x987 : Ojs.t) -> x987
        and t_to_js : t -> Ojs.t = fun (x986 : Ojs.t) -> x986
        let (empty : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Empty")
        let (quick_fix : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "QuickFix")
        let (refactor : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Refactor")
        let (refactor_extract : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorExtract")
        let (refactor_inline : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorInline")
        let (refactor_rewrite : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorRewrite")
        let (source : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Source")
        let (source_organize_imports : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceOrganizeImports")
        let (source_fix_all : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceFixAll")
        let (create : value:string -> t) =
          fun ~value:(x988 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") [|(Ojs.string_to_js x988)|])
        let (value : t -> string) =
          fun (x989 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x989) "value")
        let (append : t -> parts:string -> t) =
          fun (x991 : t) ->
            fun ~parts:(x990 : string) ->
              t_of_js
                (Ojs.call (t_to_js x991) "append" [|(Ojs.string_to_js x990)|])
        let (intersects : t -> other:t -> bool) =
          fun (x993 : t) ->
            fun ~other:(x992 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x993) "intersects" [|(t_to_js x992)|])
        let (contains : t -> other:t -> bool) =
          fun (x995 : t) ->
            fun ~other:(x994 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x995) "contains" [|(t_to_js x994)|])
      end
    module CodeActionTriggerKind =
      struct
        type t = [ `Automatic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x997 : Ojs.t) ->
            let x998 = x997 in
            match Ojs.int_of_js x998 with
            | 2 -> `Automatic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x996 : [ `Automatic ]) ->
            match x996 with | `Automatic -> Ojs.int_to_js 2
      end
    module CodeActionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1000 : Ojs.t) -> x1000
        and t_to_js : t -> Ojs.t = fun (x999 : Ojs.t) -> x999
        let (trigger_kind : t -> CodeActionTriggerKind.t) =
          fun (x1001 : t) ->
            CodeActionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1001) "triggerKind")
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1002 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1002) "diagnostics")
        let (only : t -> CodeActionKind.t) =
          fun (x1004 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1004) "only")
      end
    module CodeLens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1006 : Ojs.t) -> x1006
        and t_to_js : t -> Ojs.t = fun (x1005 : Ojs.t) -> x1005
        let (range : t -> Range.t) =
          fun (x1007 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1007) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1008 : t) ->
            fun (x1009 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1008) "range"
                (Range.t_to_js x1009)
        let (command : t -> Command.t) =
          fun (x1010 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1010) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1011 : t) ->
            fun (x1012 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1011) "command"
                (Command.t_to_js x1012)
        let (is_resolved : t -> bool) =
          fun (x1013 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1013) "isResolved")
        let (create : range:Range.t -> ?command:Command.t -> unit -> t) =
          fun ~range:(x1014 : Range.t) ->
            fun ?command:(x1015 : Command.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "CodeLens")
                     (let x1016 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1016 "push" [|(Range.t_to_js x1014)|]);
                      (match x1015 with
                       | Some x1017 ->
                           ignore
                             (Ojs.call x1016 "push"
                                [|(Command.t_to_js x1017)|])
                       | None -> ());
                      x1016))
      end
    module CodeLensProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1019 : Ojs.t) -> x1019
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1018 : Ojs.t) -> x1018
        let (on_did_change_code_lenses : 'T t -> unit Event.t) =
          fun (x1020 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1020)
                 "onDidChangeCodeLenses")
        let (set_on_did_change_code_lenses : 'T t -> unit Event.t -> unit) =
          fun (x1023 : 'T t) ->
            fun (x1024 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1023)
                "onDidChangeCodeLenses" (Event.t_to_js Ojs.unit_to_js x1024)
        let (provide_code_lenses :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1029 : 'T t) ->
            fun ~document:(x1027 : TextDocument.t) ->
              fun ~token:(x1028 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1031 : Ojs.t) -> Ojs.list_of_js Obj.magic x1031)
                  (Ojs.call (t_to_js Obj.magic x1029) "provideCodeLenses"
                     [|(TextDocument.t_to_js x1027);(CancellationToken.t_to_js
                                                       x1028)|])
        let (resolve_code_lens :
          'T t ->
            code_lens:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1035 : 'T t) ->
            fun ~code_lens:(x1033 : 'T) ->
              fun ~token:(x1034 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1035) "resolveCodeLens"
                     [|(Obj.magic x1033);(CancellationToken.t_to_js x1034)|])
      end
    module DefinitionLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1039 : Ojs.t) -> x1039
        and t_to_js : t -> Ojs.t = fun (x1038 : Ojs.t) -> x1038
      end
    module Definition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1041 : Ojs.t) -> x1041
        and t_to_js : t -> Ojs.t = fun (x1040 : Ojs.t) -> x1040
      end
    module DefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1043 : Ojs.t) -> x1043
        and t_to_js : t -> Ojs.t = fun (x1042 : Ojs.t) -> x1042
        let (provide_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1047 : t) ->
            fun ~document:(x1044 : TextDocument.t) ->
              fun ~position:(x1045 : Position.t) ->
                fun ~token:(x1046 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1048 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1048)
                    (Ojs.call (t_to_js x1047) "provideDefinition"
                       [|(TextDocument.t_to_js x1044);(Position.t_to_js x1045);(
                         CancellationToken.t_to_js x1046)|])
      end
    module ImplementationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1052 : Ojs.t) -> x1052
        and t_to_js : t -> Ojs.t = fun (x1051 : Ojs.t) -> x1051
        let (provide_implementation :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1056 : t) ->
            fun ~document:(x1053 : TextDocument.t) ->
              fun ~position:(x1054 : Position.t) ->
                fun ~token:(x1055 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1057 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1057)
                    (Ojs.call (t_to_js x1056) "provideImplementation"
                       [|(TextDocument.t_to_js x1053);(Position.t_to_js x1054);(
                         CancellationToken.t_to_js x1055)|])
      end
    module TypeDefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1061 : Ojs.t) -> x1061
        and t_to_js : t -> Ojs.t = fun (x1060 : Ojs.t) -> x1060
        let (provide_type_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1065 : t) ->
            fun ~document:(x1062 : TextDocument.t) ->
              fun ~position:(x1063 : Position.t) ->
                fun ~token:(x1064 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1066 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1066)
                    (Ojs.call (t_to_js x1065) "provideTypeDefinition"
                       [|(TextDocument.t_to_js x1062);(Position.t_to_js x1063);(
                         CancellationToken.t_to_js x1064)|])
      end
    module Declaration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1070 : Ojs.t) -> x1070
        and t_to_js : t -> Ojs.t = fun (x1069 : Ojs.t) -> x1069
      end
    module DeclarationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1072 : Ojs.t) -> x1072
        and t_to_js : t -> Ojs.t = fun (x1071 : Ojs.t) -> x1071
        let (provide_declaration :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Declaration.t ProviderResult.t)
          =
          fun (x1076 : t) ->
            fun ~document:(x1073 : TextDocument.t) ->
              fun ~position:(x1074 : Position.t) ->
                fun ~token:(x1075 : CancellationToken.t) ->
                  ProviderResult.t_of_js Declaration.t_of_js
                    (Ojs.call (t_to_js x1076) "provideDeclaration"
                       [|(TextDocument.t_to_js x1073);(Position.t_to_js x1074);(
                         CancellationToken.t_to_js x1075)|])
      end
    module MarkdownString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1079 : Ojs.t) -> x1079
        and t_to_js : t -> Ojs.t = fun (x1078 : Ojs.t) -> x1078
        let (value : t -> string) =
          fun (x1080 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1080) "value")
        let (set_value : t -> string -> unit) =
          fun (x1081 : t) ->
            fun (x1082 : string) ->
              Ojs.set_prop_ascii (t_to_js x1081) "value"
                (Ojs.string_to_js x1082)
        let (is_trusted : t -> bool) =
          fun (x1083 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1083) "isTrusted")
        let (set_is_trusted : t -> bool -> unit) =
          fun (x1084 : t) ->
            fun (x1085 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1084) "isTrusted"
                (Ojs.bool_to_js x1085)
        let (support_theme_icons : t -> bool) =
          fun (x1086 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1086) "supportThemeIcons")
        let (create :
          ?value:string -> ?support_theme_icons:bool -> unit -> t) =
          fun ?value:(x1087 : string option) ->
            fun ?support_theme_icons:(x1088 : bool option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "MarkdownString")
                     (let x1089 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1087 with
                       | Some x1091 ->
                           ignore
                             (Ojs.call x1089 "push"
                                [|(Ojs.string_to_js x1091)|])
                       | None -> ());
                      (match x1088 with
                       | Some x1090 ->
                           ignore
                             (Ojs.call x1089 "push"
                                [|(Ojs.bool_to_js x1090)|])
                       | None -> ());
                      x1089))
        let (append_text : t -> value:string -> t) =
          fun (x1093 : t) ->
            fun ~value:(x1092 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1093) "appendText"
                   [|(Ojs.string_to_js x1092)|])
        let (append_markdown : t -> value:string -> t) =
          fun (x1095 : t) ->
            fun ~value:(x1094 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1095) "appendMarkdown"
                   [|(Ojs.string_to_js x1094)|])
        let (append_codeblock :
          t -> value:string -> ?language:string -> unit -> t) =
          fun (x1100 : t) ->
            fun ~value:(x1096 : string) ->
              fun ?language:(x1097 : string option) ->
                fun () ->
                  t_of_js
                    (let x1101 = t_to_js x1100 in
                     Ojs.call (Ojs.get_prop_ascii x1101 "appendCodeblock")
                       "apply"
                       [|x1101;((let x1098 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1098 "push"
                                      [|(Ojs.string_to_js x1096)|]);
                                 (match x1097 with
                                  | Some x1099 ->
                                      ignore
                                        (Ojs.call x1098 "push"
                                           [|(Ojs.string_to_js x1099)|])
                                  | None -> ());
                                 x1098))|])
      end
    module Hover =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1103 : Ojs.t) -> x1103
        and t_to_js : t -> Ojs.t = fun (x1102 : Ojs.t) -> x1102
        let (contents : t -> MarkedString.t list) =
          fun (x1104 : t) ->
            Ojs.list_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1104) "contents")
        let (set_contents : t -> MarkedString.t list -> unit) =
          fun (x1106 : t) ->
            fun (x1107 : MarkedString.t list) ->
              Ojs.set_prop_ascii (t_to_js x1106) "contents"
                (Ojs.list_to_js MarkedString.t_to_js x1107)
        let (range : t -> Range.t) =
          fun (x1109 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1109) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1110 : t) ->
            fun (x1111 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1110) "range"
                (Range.t_to_js x1111)
        let (create :
          contents:(MarkedString.t, MarkedString.t) or_array ->
            ?range:Range.t -> unit -> t)
          =
          fun ~contents:(x1112 : (MarkedString.t, MarkedString.t) or_array)
            ->
            fun ?range:(x1113 : Range.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "Hover")
                     (let x1114 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1114 "push"
                           [|(or_array_to_js MarkedString.t_to_js
                                MarkedString.t_to_js x1112)|]);
                      (match x1113 with
                       | Some x1115 ->
                           ignore
                             (Ojs.call x1114 "push" [|(Range.t_to_js x1115)|])
                       | None -> ());
                      x1114))
      end
    module HoverProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1119 : Ojs.t) -> x1119
        and t_to_js : t -> Ojs.t = fun (x1118 : Ojs.t) -> x1118
        let (provide_hover :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Hover.t ProviderResult.t)
          =
          fun (x1123 : t) ->
            fun ~document:(x1120 : TextDocument.t) ->
              fun ~position:(x1121 : Position.t) ->
                fun ~token:(x1122 : CancellationToken.t) ->
                  ProviderResult.t_of_js Hover.t_of_js
                    (Ojs.call (t_to_js x1123) "provideHover"
                       [|(TextDocument.t_to_js x1120);(Position.t_to_js x1121);(
                         CancellationToken.t_to_js x1122)|])
      end
    module EvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1126 : Ojs.t) -> x1126
        and t_to_js : t -> Ojs.t = fun (x1125 : Ojs.t) -> x1125
        let (range : t -> Range.t) =
          fun (x1127 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1127) "range")
        let (expression : t -> string) =
          fun (x1128 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1128) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1129 : Range.t) ->
            fun ?expression:(x1130 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "EvaluatableExpression")
                     (let x1131 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1131 "push" [|(Range.t_to_js x1129)|]);
                      (match x1130 with
                       | Some x1132 ->
                           ignore
                             (Ojs.call x1131 "push"
                                [|(Ojs.string_to_js x1132)|])
                       | None -> ());
                      x1131))
      end
    module EvaluatableExpressionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1134 : Ojs.t) -> x1134
        and t_to_js : t -> Ojs.t = fun (x1133 : Ojs.t) -> x1133
        let (provide_evaluatable_expression :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  EvaluatableExpression.t ProviderResult.t)
          =
          fun (x1138 : t) ->
            fun ~document:(x1135 : TextDocument.t) ->
              fun ~position:(x1136 : Position.t) ->
                fun ~token:(x1137 : CancellationToken.t) ->
                  ProviderResult.t_of_js EvaluatableExpression.t_of_js
                    (Ojs.call (t_to_js x1138) "provideEvaluatableExpression"
                       [|(TextDocument.t_to_js x1135);(Position.t_to_js x1136);(
                         CancellationToken.t_to_js x1137)|])
      end
    module InlineValueText =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1141 : Ojs.t) -> x1141
        and t_to_js : t -> Ojs.t = fun (x1140 : Ojs.t) -> x1140
        let (range : t -> Range.t) =
          fun (x1142 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1142) "range")
        let (text : t -> string) =
          fun (x1143 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1143) "text")
        let (create : range:Range.t -> text:string -> t) =
          fun ~range:(x1144 : Range.t) ->
            fun ~text:(x1145 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "InlineValueText")
                   [|(Range.t_to_js x1144);(Ojs.string_to_js x1145)|])
      end
    module InlineValueVariableLookup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1147 : Ojs.t) -> x1147
        and t_to_js : t -> Ojs.t = fun (x1146 : Ojs.t) -> x1146
        let (range : t -> Range.t) =
          fun (x1148 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1148) "range")
        let (variable_name : t -> string) =
          fun (x1149 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1149) "variableName")
        let (case_sensitive_lookup : t -> bool) =
          fun (x1150 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1150) "caseSensitiveLookup")
        let (create :
          range:Range.t ->
            ?variable_name:string -> ?case_sensitive_lookup:bool -> unit -> t)
          =
          fun ~range:(x1151 : Range.t) ->
            fun ?variable_name:(x1152 : string option) ->
              fun ?case_sensitive_lookup:(x1153 : bool option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "InlineValueVariableLookup")
                       (let x1154 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1154 "push" [|(Range.t_to_js x1151)|]);
                        (match x1152 with
                         | Some x1156 ->
                             ignore
                               (Ojs.call x1154 "push"
                                  [|(Ojs.string_to_js x1156)|])
                         | None -> ());
                        (match x1153 with
                         | Some x1155 ->
                             ignore
                               (Ojs.call x1154 "push"
                                  [|(Ojs.bool_to_js x1155)|])
                         | None -> ());
                        x1154))
      end
    module InlineValueEvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1158 : Ojs.t) -> x1158
        and t_to_js : t -> Ojs.t = fun (x1157 : Ojs.t) -> x1157
        let (range : t -> Range.t) =
          fun (x1159 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1159) "range")
        let (expression : t -> string) =
          fun (x1160 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1160) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1161 : Range.t) ->
            fun ?expression:(x1162 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "InlineValueEvaluatableExpression")
                     (let x1163 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1163 "push" [|(Range.t_to_js x1161)|]);
                      (match x1162 with
                       | Some x1164 ->
                           ignore
                             (Ojs.call x1163 "push"
                                [|(Ojs.string_to_js x1164)|])
                       | None -> ());
                      x1163))
      end
    module InlineValue =
      struct
        type t =
          (InlineValueEvaluatableExpression.t, InlineValueText.t,
            InlineValueVariableLookup.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x1169 : Ojs.t) ->
            union3_of_js InlineValueEvaluatableExpression.t_of_js
              InlineValueText.t_of_js InlineValueVariableLookup.t_of_js x1169
        and t_to_js : t -> Ojs.t =
          fun
            (x1165 :
              (InlineValueEvaluatableExpression.t, InlineValueText.t,
                InlineValueVariableLookup.t) union3)
            ->
            union3_to_js InlineValueEvaluatableExpression.t_to_js
              InlineValueText.t_to_js InlineValueVariableLookup.t_to_js x1165
      end
    module InlineValueContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1174 : Ojs.t) -> x1174
        and t_to_js : t -> Ojs.t = fun (x1173 : Ojs.t) -> x1173
        let (frame_id : t -> int) =
          fun (x1175 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1175) "frameId")
        let (stopped_location : t -> Range.t) =
          fun (x1176 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1176) "stoppedLocation")
      end
    module InlineValuesProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1178 : Ojs.t) -> x1178
        and t_to_js : t -> Ojs.t = fun (x1177 : Ojs.t) -> x1177
        let (on_did_change_inline_values : t -> unit Event.t or_undefined) =
          fun (x1179 : t) ->
            or_undefined_of_js
              (fun (x1180 : Ojs.t) -> Event.t_of_js Ojs.unit_of_js x1180)
              (Ojs.get_prop_ascii (t_to_js x1179) "onDidChangeInlineValues")
        let (set_on_did_change_inline_values :
          t -> unit Event.t or_undefined -> unit) =
          fun (x1182 : t) ->
            fun (x1183 : unit Event.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1182) "onDidChangeInlineValues"
                (or_undefined_to_js
                   (fun (x1184 : unit Event.t) ->
                      Event.t_to_js Ojs.unit_to_js x1184) x1183)
        let (provide_inline_values :
          t ->
            document:TextDocument.t ->
              view_port:Range.t ->
                context:InlineValueContext.t ->
                  token:CancellationToken.t ->
                    InlineValue.t list ProviderResult.t)
          =
          fun (x1190 : t) ->
            fun ~document:(x1186 : TextDocument.t) ->
              fun ~view_port:(x1187 : Range.t) ->
                fun ~context:(x1188 : InlineValueContext.t) ->
                  fun ~token:(x1189 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1191 : Ojs.t) ->
                         Ojs.list_of_js InlineValue.t_of_js x1191)
                      (Ojs.call (t_to_js x1190) "provideInlineValues"
                         [|(TextDocument.t_to_js x1186);(Range.t_to_js x1187);(
                           InlineValueContext.t_to_js x1188);(CancellationToken.t_to_js
                                                                x1189)|])
      end
    module DocumentHighlightKind =
      struct
        type t = [ `Read  | `Write ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1194 : Ojs.t) ->
            let x1195 = x1194 in
            match Ojs.int_of_js x1195 with
            | 1 -> `Read
            | 2 -> `Write
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1193 : [ `Read  | `Write ]) ->
            match x1193 with
            | `Read -> Ojs.int_to_js 1
            | `Write -> Ojs.int_to_js 2
      end
    module DocumentHighlight =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1197 : Ojs.t) -> x1197
        and t_to_js : t -> Ojs.t = fun (x1196 : Ojs.t) -> x1196
        let (range : t -> Range.t) =
          fun (x1198 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1198) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1199 : t) ->
            fun (x1200 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1199) "range"
                (Range.t_to_js x1200)
        let (kind : t -> DocumentHighlightKind.t) =
          fun (x1201 : t) ->
            DocumentHighlightKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1201) "kind")
        let (set_kind : t -> DocumentHighlightKind.t -> unit) =
          fun (x1202 : t) ->
            fun (x1203 : DocumentHighlightKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1202) "kind"
                (DocumentHighlightKind.t_to_js x1203)
        let (create :
          range:Range.t -> ?kind:DocumentHighlightKind.t -> unit -> t) =
          fun ~range:(x1204 : Range.t) ->
            fun ?kind:(x1205 : DocumentHighlightKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentHighlight")
                     (let x1206 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1206 "push" [|(Range.t_to_js x1204)|]);
                      (match x1205 with
                       | Some x1207 ->
                           ignore
                             (Ojs.call x1206 "push"
                                [|(DocumentHighlightKind.t_to_js x1207)|])
                       | None -> ());
                      x1206))
      end
    module DocumentHighlightProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1209 : Ojs.t) -> x1209
        and t_to_js : t -> Ojs.t = fun (x1208 : Ojs.t) -> x1208
        let (provide_document_highlights :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  DocumentHighlight.t list ProviderResult.t)
          =
          fun (x1213 : t) ->
            fun ~document:(x1210 : TextDocument.t) ->
              fun ~position:(x1211 : Position.t) ->
                fun ~token:(x1212 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1214 : Ojs.t) ->
                       Ojs.list_of_js DocumentHighlight.t_of_js x1214)
                    (Ojs.call (t_to_js x1213) "provideDocumentHighlights"
                       [|(TextDocument.t_to_js x1210);(Position.t_to_js x1211);(
                         CancellationToken.t_to_js x1212)|])
      end
    module SymbolKind =
      struct
        type t =
          [ `Module  | `Namespace  | `Package  | `Class  | `Method 
          | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
          | `Function  | `Variable  | `Constant  | `String  | `Number 
          | `Boolean  | `Array  | `Object  | `Key  | `Null  | `EnumMember 
          | `Struct  | `Event  | `Operator  | `TypeParameter ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1217 : Ojs.t) ->
            let x1218 = x1217 in
            match Ojs.int_of_js x1218 with
            | 1 -> `Module
            | 2 -> `Namespace
            | 3 -> `Package
            | 4 -> `Class
            | 5 -> `Method
            | 6 -> `Property
            | 7 -> `Field
            | 8 -> `Constructor
            | 9 -> `Enum
            | 10 -> `Interface
            | 11 -> `Function
            | 12 -> `Variable
            | 13 -> `Constant
            | 14 -> `String
            | 15 -> `Number
            | 16 -> `Boolean
            | 17 -> `Array
            | 18 -> `Object
            | 19 -> `Key
            | 20 -> `Null
            | 21 -> `EnumMember
            | 22 -> `Struct
            | 23 -> `Event
            | 24 -> `Operator
            | 25 -> `TypeParameter
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1216 :
              [ `Module  | `Namespace  | `Package  | `Class  | `Method 
              | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
              | `Function  | `Variable  | `Constant  | `String  | `Number 
              | `Boolean  | `Array  | `Object  | `Key  | `Null 
              | `EnumMember  | `Struct  | `Event  | `Operator 
              | `TypeParameter ])
            ->
            match x1216 with
            | `Module -> Ojs.int_to_js 1
            | `Namespace -> Ojs.int_to_js 2
            | `Package -> Ojs.int_to_js 3
            | `Class -> Ojs.int_to_js 4
            | `Method -> Ojs.int_to_js 5
            | `Property -> Ojs.int_to_js 6
            | `Field -> Ojs.int_to_js 7
            | `Constructor -> Ojs.int_to_js 8
            | `Enum -> Ojs.int_to_js 9
            | `Interface -> Ojs.int_to_js 10
            | `Function -> Ojs.int_to_js 11
            | `Variable -> Ojs.int_to_js 12
            | `Constant -> Ojs.int_to_js 13
            | `String -> Ojs.int_to_js 14
            | `Number -> Ojs.int_to_js 15
            | `Boolean -> Ojs.int_to_js 16
            | `Array -> Ojs.int_to_js 17
            | `Object -> Ojs.int_to_js 18
            | `Key -> Ojs.int_to_js 19
            | `Null -> Ojs.int_to_js 20
            | `EnumMember -> Ojs.int_to_js 21
            | `Struct -> Ojs.int_to_js 22
            | `Event -> Ojs.int_to_js 23
            | `Operator -> Ojs.int_to_js 24
            | `TypeParameter -> Ojs.int_to_js 25
      end
    module SymbolTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1220 : Ojs.t) -> x1220
        and t_to_js : t -> Ojs.t = fun (x1219 : Ojs.t) -> x1219
      end
    module SymbolInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1222 : Ojs.t) -> x1222
        and t_to_js : t -> Ojs.t = fun (x1221 : Ojs.t) -> x1221
        let (name : t -> string) =
          fun (x1223 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1223) "name")
        let (set_name : t -> string -> unit) =
          fun (x1224 : t) ->
            fun (x1225 : string) ->
              Ojs.set_prop_ascii (t_to_js x1224) "name"
                (Ojs.string_to_js x1225)
        let (container_name : t -> string) =
          fun (x1226 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1226) "containerName")
        let (set_container_name : t -> string -> unit) =
          fun (x1227 : t) ->
            fun (x1228 : string) ->
              Ojs.set_prop_ascii (t_to_js x1227) "containerName"
                (Ojs.string_to_js x1228)
        let (kind : t -> SymbolKind.t) =
          fun (x1229 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1229) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1230 : t) ->
            fun (x1231 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1230) "kind"
                (SymbolKind.t_to_js x1231)
        let (tags : t -> SymbolTag.t list) =
          fun (x1232 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1232) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1234 : t) ->
            fun (x1235 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1234) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1235)
        let (location : t -> Location.t) =
          fun (x1237 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x1237) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x1238 : t) ->
            fun (x1239 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x1238) "location"
                (Location.t_to_js x1239)
        let (create :
          name:string ->
            kind:SymbolKind.t ->
              container_name:string -> location:Location.t -> t)
          =
          fun ~name:(x1240 : string) ->
            fun ~kind:(x1241 : SymbolKind.t) ->
              fun ~container_name:(x1242 : string) ->
                fun ~location:(x1243 : Location.t) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SymbolInformation")
                       [|(Ojs.string_to_js x1240);(SymbolKind.t_to_js x1241);(
                         Ojs.string_to_js x1242);(Location.t_to_js x1243)|])
        let (create' :
          name:string ->
            kind:SymbolKind.t ->
              range:Range.t ->
                ?uri:Uri.t -> ?container_name:string -> unit -> t)
          =
          fun ~name:(x1244 : string) ->
            fun ~kind:(x1245 : SymbolKind.t) ->
              fun ~range:(x1246 : Range.t) ->
                fun ?uri:(x1247 : Uri.t option) ->
                  fun ?container_name:(x1248 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SymbolInformation")
                           (let x1249 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x1249 "push"
                                 [|(Ojs.string_to_js x1244)|]);
                            ignore
                              (Ojs.call x1249 "push"
                                 [|(SymbolKind.t_to_js x1245)|]);
                            ignore
                              (Ojs.call x1249 "push"
                                 [|(Range.t_to_js x1246)|]);
                            (match x1247 with
                             | Some x1251 ->
                                 ignore
                                   (Ojs.call x1249 "push"
                                      [|(Uri.t_to_js x1251)|])
                             | None -> ());
                            (match x1248 with
                             | Some x1250 ->
                                 ignore
                                   (Ojs.call x1249 "push"
                                      [|(Ojs.string_to_js x1250)|])
                             | None -> ());
                            x1249))
      end
    module DocumentSymbol =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1253 : Ojs.t) -> x1253
        and t_to_js : t -> Ojs.t = fun (x1252 : Ojs.t) -> x1252
        let (name : t -> string) =
          fun (x1254 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1254) "name")
        let (set_name : t -> string -> unit) =
          fun (x1255 : t) ->
            fun (x1256 : string) ->
              Ojs.set_prop_ascii (t_to_js x1255) "name"
                (Ojs.string_to_js x1256)
        let (detail : t -> string) =
          fun (x1257 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1257) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1258 : t) ->
            fun (x1259 : string) ->
              Ojs.set_prop_ascii (t_to_js x1258) "detail"
                (Ojs.string_to_js x1259)
        let (kind : t -> SymbolKind.t) =
          fun (x1260 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1260) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1261 : t) ->
            fun (x1262 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1261) "kind"
                (SymbolKind.t_to_js x1262)
        let (tags : t -> SymbolTag.t list) =
          fun (x1263 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1263) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1265 : t) ->
            fun (x1266 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1265) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1266)
        let (range : t -> Range.t) =
          fun (x1268 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1268) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1269 : t) ->
            fun (x1270 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1269) "range"
                (Range.t_to_js x1270)
        let (selection_range : t -> Range.t) =
          fun (x1271 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1271) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x1272 : t) ->
            fun (x1273 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1272) "selectionRange"
                (Range.t_to_js x1273)
        let (children : t -> t list) =
          fun (x1274 : t) ->
            Ojs.list_of_js t_of_js
              (Ojs.get_prop_ascii (t_to_js x1274) "children")
        let (set_children : t -> t list -> unit) =
          fun (x1276 : t) ->
            fun (x1277 : t list) ->
              Ojs.set_prop_ascii (t_to_js x1276) "children"
                (Ojs.list_to_js t_to_js x1277)
        let (create :
          name:string ->
            detail:string ->
              kind:SymbolKind.t ->
                range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~name:(x1279 : string) ->
            fun ~detail:(x1280 : string) ->
              fun ~kind:(x1281 : SymbolKind.t) ->
                fun ~range:(x1282 : Range.t) ->
                  fun ~selection_range:(x1283 : Range.t) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "DocumentSymbol")
                         [|(Ojs.string_to_js x1279);(Ojs.string_to_js x1280);(
                           SymbolKind.t_to_js x1281);(Range.t_to_js x1282);(
                           Range.t_to_js x1283)|])
      end
    module DocumentSymbolProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1285 : Ojs.t) -> x1285
        and t_to_js : t -> Ojs.t = fun (x1284 : Ojs.t) -> x1284
        let (provide_document_symbols :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                [ `U_n_0 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_1 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_2 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_3 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_4 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_5 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_6 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_7 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_8 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_9 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_10 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_11 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_12 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_13 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_14 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_15 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_16 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_17 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_18 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_19 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_20 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_21 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_22 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_23 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_24 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_25 of (DocumentSymbol.t, SymbolInformation.t) union2 ]
                  list ProviderResult.t)
          =
          fun (x1288 : t) ->
            fun ~document:(x1286 : TextDocument.t) ->
              fun ~token:(x1287 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1289 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x1290 : Ojs.t) ->
                          let x1291 = x1290 in
                          match Ojs.int_of_js
                                  (Ojs.get_prop_ascii x1291 "kind")
                          with
                          | 0 ->
                              `U_n_0
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 1 ->
                              `U_n_1
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 2 ->
                              `U_n_2
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 3 ->
                              `U_n_3
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 4 ->
                              `U_n_4
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 5 ->
                              `U_n_5
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 6 ->
                              `U_n_6
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 7 ->
                              `U_n_7
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 8 ->
                              `U_n_8
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 9 ->
                              `U_n_9
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 10 ->
                              `U_n_10
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 11 ->
                              `U_n_11
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 12 ->
                              `U_n_12
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 13 ->
                              `U_n_13
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 14 ->
                              `U_n_14
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 15 ->
                              `U_n_15
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 16 ->
                              `U_n_16
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 17 ->
                              `U_n_17
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 18 ->
                              `U_n_18
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 19 ->
                              `U_n_19
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 20 ->
                              `U_n_20
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 21 ->
                              `U_n_21
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 22 ->
                              `U_n_22
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 23 ->
                              `U_n_23
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 24 ->
                              `U_n_24
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | 25 ->
                              `U_n_25
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1291)
                          | _ -> assert false) x1289)
                  (Ojs.call (t_to_js x1288) "provideDocumentSymbols"
                     [|(TextDocument.t_to_js x1286);(CancellationToken.t_to_js
                                                       x1287)|])
      end
    module DocumentSymbolProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1345 : Ojs.t) -> x1345
        and t_to_js : t -> Ojs.t = fun (x1344 : Ojs.t) -> x1344
        let (label : t -> string) =
          fun (x1346 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1346) "label")
        let (set_label : t -> string -> unit) =
          fun (x1347 : t) ->
            fun (x1348 : string) ->
              Ojs.set_prop_ascii (t_to_js x1347) "label"
                (Ojs.string_to_js x1348)
      end
    module WorkspaceSymbolProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1350 : Ojs.t) -> x1350
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1349 : Ojs.t) -> x1349
        let (provide_workspace_symbols :
          'T t ->
            query:string ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1353 : 'T t) ->
            fun ~query:(x1351 : string) ->
              fun ~token:(x1352 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1355 : Ojs.t) -> Ojs.list_of_js Obj.magic x1355)
                  (Ojs.call (t_to_js Obj.magic x1353)
                     "provideWorkspaceSymbols"
                     [|(Ojs.string_to_js x1351);(CancellationToken.t_to_js
                                                   x1352)|])
        let (resolve_workspace_symbol :
          'T t ->
            symbol:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1359 : 'T t) ->
            fun ~symbol:(x1357 : 'T) ->
              fun ~token:(x1358 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1359)
                     "resolveWorkspaceSymbol"
                     [|(Obj.magic x1357);(CancellationToken.t_to_js x1358)|])
      end
    module ReferenceContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1363 : Ojs.t) -> x1363
        and t_to_js : t -> Ojs.t = fun (x1362 : Ojs.t) -> x1362
        let (include_declaration : t -> bool) =
          fun (x1364 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1364) "includeDeclaration")
        let (set_include_declaration : t -> bool -> unit) =
          fun (x1365 : t) ->
            fun (x1366 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1365) "includeDeclaration"
                (Ojs.bool_to_js x1366)
      end
    module ReferenceProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1368 : Ojs.t) -> x1368
        and t_to_js : t -> Ojs.t = fun (x1367 : Ojs.t) -> x1367
        let (provide_references :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                context:ReferenceContext.t ->
                  token:CancellationToken.t ->
                    Location.t list ProviderResult.t)
          =
          fun (x1373 : t) ->
            fun ~document:(x1369 : TextDocument.t) ->
              fun ~position:(x1370 : Position.t) ->
                fun ~context:(x1371 : ReferenceContext.t) ->
                  fun ~token:(x1372 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1374 : Ojs.t) ->
                         Ojs.list_of_js Location.t_of_js x1374)
                      (Ojs.call (t_to_js x1373) "provideReferences"
                         [|(TextDocument.t_to_js x1369);(Position.t_to_js
                                                           x1370);(ReferenceContext.t_to_js
                                                                    x1371);(
                           CancellationToken.t_to_js x1372)|])
      end
    module TextEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1377 : Ojs.t) -> x1377
        and t_to_js : t -> Ojs.t = fun (x1376 : Ojs.t) -> x1376
        let (replace : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1378 : Range.t) ->
            fun ~new_text:(x1379 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "replace"
                   [|(Range.t_to_js x1378);(Ojs.string_to_js x1379)|])
        let (insert : position:Position.t -> new_text:string -> t) =
          fun ~position:(x1380 : Position.t) ->
            fun ~new_text:(x1381 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "insert"
                   [|(Position.t_to_js x1380);(Ojs.string_to_js x1381)|])
        let (delete : range:Range.t -> t) =
          fun ~range:(x1382 : Range.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "delete" [|(Range.t_to_js x1382)|])
        let (set_end_of_line : eol:EndOfLine.t -> t) =
          fun ~eol:(x1383 : EndOfLine.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "setEndOfLine" [|(EndOfLine.t_to_js x1383)|])
        let (range : t -> Range.t) =
          fun (x1384 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1384) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1385 : t) ->
            fun (x1386 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1385) "range"
                (Range.t_to_js x1386)
        let (new_text : t -> string) =
          fun (x1387 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1387) "newText")
        let (set_new_text : t -> string -> unit) =
          fun (x1388 : t) ->
            fun (x1389 : string) ->
              Ojs.set_prop_ascii (t_to_js x1388) "newText"
                (Ojs.string_to_js x1389)
        let (new_eol : t -> EndOfLine.t) =
          fun (x1390 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x1390) "newEol")
        let (set_new_eol : t -> EndOfLine.t -> unit) =
          fun (x1391 : t) ->
            fun (x1392 : EndOfLine.t) ->
              Ojs.set_prop_ascii (t_to_js x1391) "newEol"
                (EndOfLine.t_to_js x1392)
        let (create : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1393 : Range.t) ->
            fun ~new_text:(x1394 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   [|(Range.t_to_js x1393);(Ojs.string_to_js x1394)|])
      end
    module IconPath =
      struct
        type t =
          {
          light: [ `String of string  | `Uri of Uri.t ] ;
          dark: [ `String of string  | `Uri of Uri.t ] }
        let rec t_to_js : t -> Ojs.t =
          fun (x1395 : t) ->
            Ojs.obj
              [|("light",
                  ((match x1395.light with
                    | `String x1396 -> Ojs.string_to_js x1396
                    | `Uri x1397 -> Uri.t_to_js x1397)));("dark",
                                                           ((match x1395.dark
                                                             with
                                                             | `String x1398
                                                                 ->
                                                                 Ojs.string_to_js
                                                                   x1398
                                                             | `Uri x1399 ->
                                                                 Uri.t_to_js
                                                                   x1399)))|]
        let t_of_js js_val =
          let light_js = Ojs.get js_val "light" in
          let dark_js = Ojs.get js_val "dark" in
          let light =
            if Ojs.has_property light_js "parse"
            then `Uri (Uri.t_of_js light_js)
            else `String (Ojs.string_of_js light_js) in
          let dark =
            if Ojs.has_property dark_js "parse"
            then `Uri (Uri.t_of_js dark_js)
            else `String (Ojs.string_of_js dark_js) in
          { light; dark }
      end
    module WorkspaceEditEntryMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1407 : Ojs.t) -> x1407
        and t_to_js : t -> Ojs.t = fun (x1406 : Ojs.t) -> x1406
        let (needs_confirmation : t -> bool) =
          fun (x1408 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1408) "needsConfirmation")
        let (set_needs_confirmation : t -> bool -> unit) =
          fun (x1409 : t) ->
            fun (x1410 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1409) "needsConfirmation"
                (Ojs.bool_to_js x1410)
        let (label : t -> string) =
          fun (x1411 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1411) "label")
        let (set_label : t -> string -> unit) =
          fun (x1412 : t) ->
            fun (x1413 : string) ->
              Ojs.set_prop_ascii (t_to_js x1412) "label"
                (Ojs.string_to_js x1413)
        let (description : t -> string) =
          fun (x1414 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1414) "description")
        let (set_description : t -> string -> unit) =
          fun (x1415 : t) ->
            fun (x1416 : string) ->
              Ojs.set_prop_ascii (t_to_js x1415) "description"
                (Ojs.string_to_js x1416)
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x1417 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1417) "iconPath")
        let (set_icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 -> unit) =
          fun (x1421 : t) ->
            fun (x1422 : (ThemeIcon.t, Uri.t, IconPath.t) union3) ->
              Ojs.set_prop_ascii (t_to_js x1421) "iconPath"
                (union3_to_js ThemeIcon.t_to_js Uri.t_to_js IconPath.t_to_js
                   x1422)
      end
    module WorkspaceEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1427 : Ojs.t) -> x1427
        and t_to_js : t -> Ojs.t = fun (x1426 : Ojs.t) -> x1426
        let (size : t -> int) =
          fun (x1428 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1428) "size")
        let (replace :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1435 : t) ->
            fun ~uri:(x1429 : Uri.t) ->
              fun ~range:(x1430 : Range.t) ->
                fun ~new_text:(x1431 : string) ->
                  fun ?metadata:(x1432 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1436 = t_to_js x1435 in
                         Ojs.call (Ojs.get_prop_ascii x1436 "replace")
                           "apply"
                           [|x1436;((let x1433 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1433 "push"
                                          [|(Uri.t_to_js x1429)|]);
                                     ignore
                                       (Ojs.call x1433 "push"
                                          [|(Range.t_to_js x1430)|]);
                                     ignore
                                       (Ojs.call x1433 "push"
                                          [|(Ojs.string_to_js x1431)|]);
                                     (match x1432 with
                                      | Some x1434 ->
                                          ignore
                                            (Ojs.call x1433 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1434)|])
                                      | None -> ());
                                     x1433))|])
        let (insert :
          t ->
            uri:Uri.t ->
              position:Position.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1443 : t) ->
            fun ~uri:(x1437 : Uri.t) ->
              fun ~position:(x1438 : Position.t) ->
                fun ~new_text:(x1439 : string) ->
                  fun ?metadata:(x1440 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1444 = t_to_js x1443 in
                         Ojs.call (Ojs.get_prop_ascii x1444 "insert") "apply"
                           [|x1444;((let x1441 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1441 "push"
                                          [|(Uri.t_to_js x1437)|]);
                                     ignore
                                       (Ojs.call x1441 "push"
                                          [|(Position.t_to_js x1438)|]);
                                     ignore
                                       (Ojs.call x1441 "push"
                                          [|(Ojs.string_to_js x1439)|]);
                                     (match x1440 with
                                      | Some x1442 ->
                                          ignore
                                            (Ojs.call x1441 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1442)|])
                                      | None -> ());
                                     x1441))|])
        let (delete :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1450 : t) ->
            fun ~uri:(x1445 : Uri.t) ->
              fun ~range:(x1446 : Range.t) ->
                fun ?metadata:(x1447 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1451 = t_to_js x1450 in
                       Ojs.call (Ojs.get_prop_ascii x1451 "delete") "apply"
                         [|x1451;((let x1448 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1448 "push"
                                        [|(Uri.t_to_js x1445)|]);
                                   ignore
                                     (Ojs.call x1448 "push"
                                        [|(Range.t_to_js x1446)|]);
                                   (match x1447 with
                                    | Some x1449 ->
                                        ignore
                                          (Ojs.call x1448 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1449)|])
                                    | None -> ());
                                   x1448))|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x1453 : t) ->
            fun ~uri:(x1452 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1453) "has" [|(Uri.t_to_js x1452)|])
        let (set_ : t -> uri:Uri.t -> edits:TextEdit.t list -> unit) =
          fun (x1457 : t) ->
            fun ~uri:(x1454 : Uri.t) ->
              fun ~edits:(x1455 : TextEdit.t list) ->
                ignore
                  (Ojs.call (t_to_js x1457) "set"
                     [|(Uri.t_to_js x1454);(Ojs.list_to_js TextEdit.t_to_js
                                              x1455)|])
        let (get : t -> uri:Uri.t -> TextEdit.t list) =
          fun (x1459 : t) ->
            fun ~uri:(x1458 : Uri.t) ->
              Ojs.list_of_js TextEdit.t_of_js
                (Ojs.call (t_to_js x1459) "get" [|(Uri.t_to_js x1458)|])
        module CreateFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1462 : Ojs.t) -> x1462
            and t_to_js : t -> Ojs.t = fun (x1461 : Ojs.t) -> x1461
            let (overwrite : t -> bool) =
              fun (x1463 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1463) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x1464 : t) ->
                fun (x1465 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1464) "overwrite"
                    (Ojs.bool_to_js x1465)
            let (ignore_if_exists : t -> bool) =
              fun (x1466 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1466) "ignoreIfExists")
            let (set_ignore_if_exists : t -> bool -> unit) =
              fun (x1467 : t) ->
                fun (x1468 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1467) "ignoreIfExists"
                    (Ojs.bool_to_js x1468)
          end
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1470 : Ojs.t) -> x1470
            and t_to_js : t -> Ojs.t = fun (x1469 : Ojs.t) -> x1469
            let (recursive : t -> bool) =
              fun (x1471 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1471) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x1472 : t) ->
                fun (x1473 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1472) "recursive"
                    (Ojs.bool_to_js x1473)
            let (ignore_if_not_exists : t -> bool) =
              fun (x1474 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1474) "ignoreIfNotExists")
            let (set_ignore_if_not_exists : t -> bool -> unit) =
              fun (x1475 : t) ->
                fun (x1476 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1475) "ignoreIfNotExists"
                    (Ojs.bool_to_js x1476)
          end
        let (create_file :
          t ->
            uri:Uri.t ->
              ?options:CreateFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1483 : t) ->
            fun ~uri:(x1477 : Uri.t) ->
              fun ?options:(x1478 : CreateFileOptions.t option) ->
                fun ?metadata:(x1479 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1484 = t_to_js x1483 in
                       Ojs.call (Ojs.get_prop_ascii x1484 "createFile")
                         "apply"
                         [|x1484;((let x1480 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1480 "push"
                                        [|(Uri.t_to_js x1477)|]);
                                   (match x1478 with
                                    | Some x1482 ->
                                        ignore
                                          (Ojs.call x1480 "push"
                                             [|(CreateFileOptions.t_to_js
                                                  x1482)|])
                                    | None -> ());
                                   (match x1479 with
                                    | Some x1481 ->
                                        ignore
                                          (Ojs.call x1480 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1481)|])
                                    | None -> ());
                                   x1480))|])
        let (delete_file :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1491 : t) ->
            fun ~uri:(x1485 : Uri.t) ->
              fun ?options:(x1486 : DeleteFileOptions.t option) ->
                fun ?metadata:(x1487 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1492 = t_to_js x1491 in
                       Ojs.call (Ojs.get_prop_ascii x1492 "deleteFile")
                         "apply"
                         [|x1492;((let x1488 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1488 "push"
                                        [|(Uri.t_to_js x1485)|]);
                                   (match x1486 with
                                    | Some x1490 ->
                                        ignore
                                          (Ojs.call x1488 "push"
                                             [|(DeleteFileOptions.t_to_js
                                                  x1490)|])
                                    | None -> ());
                                   (match x1487 with
                                    | Some x1489 ->
                                        ignore
                                          (Ojs.call x1488 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1489)|])
                                    | None -> ());
                                   x1488))|])
        let (rename_file :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                ?options:CreateFileOptions.t ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1500 : t) ->
            fun ~old_uri:(x1493 : Uri.t) ->
              fun ~new_uri:(x1494 : Uri.t) ->
                fun ?options:(x1495 : CreateFileOptions.t option) ->
                  fun ?metadata:(x1496 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1501 = t_to_js x1500 in
                         Ojs.call (Ojs.get_prop_ascii x1501 "renameFile")
                           "apply"
                           [|x1501;((let x1497 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1497 "push"
                                          [|(Uri.t_to_js x1493)|]);
                                     ignore
                                       (Ojs.call x1497 "push"
                                          [|(Uri.t_to_js x1494)|]);
                                     (match x1495 with
                                      | Some x1499 ->
                                          ignore
                                            (Ojs.call x1497 "push"
                                               [|(CreateFileOptions.t_to_js
                                                    x1499)|])
                                      | None -> ());
                                     (match x1496 with
                                      | Some x1498 ->
                                          ignore
                                            (Ojs.call x1497 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1498)|])
                                      | None -> ());
                                     x1497))|])
        let (entries : t -> (Uri.t * TextEdit.t list) list) =
          fun (x1502 : t) ->
            Ojs.list_of_js
              (fun (x1503 : Ojs.t) ->
                 let x1504 = x1503 in
                 ((Uri.t_of_js (Ojs.array_get x1504 0)),
                   (Ojs.list_of_js TextEdit.t_of_js (Ojs.array_get x1504 1))))
              (Ojs.call (t_to_js x1502) "entries" [||])
      end
    module CodeAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1507 : Ojs.t) -> x1507
        and t_to_js : t -> Ojs.t = fun (x1506 : Ojs.t) -> x1506
        module Disabled =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1509 : Ojs.t) -> x1509
            and t_to_js : t -> Ojs.t = fun (x1508 : Ojs.t) -> x1508
            let (reason : t -> string) =
              fun (x1510 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1510) "reason")
          end
        let (title : t -> string) =
          fun (x1511 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1511) "title")
        let (set_title : t -> string -> unit) =
          fun (x1512 : t) ->
            fun (x1513 : string) ->
              Ojs.set_prop_ascii (t_to_js x1512) "title"
                (Ojs.string_to_js x1513)
        let (edit : t -> WorkspaceEdit.t) =
          fun (x1514 : t) ->
            WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1514) "edit")
        let (set_edit : t -> WorkspaceEdit.t -> unit) =
          fun (x1515 : t) ->
            fun (x1516 : WorkspaceEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1515) "edit"
                (WorkspaceEdit.t_to_js x1516)
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1517 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1517) "diagnostics")
        let (set_diagnostics : t -> Diagnostic.t list -> unit) =
          fun (x1519 : t) ->
            fun (x1520 : Diagnostic.t list) ->
              Ojs.set_prop_ascii (t_to_js x1519) "diagnostics"
                (Ojs.list_to_js Diagnostic.t_to_js x1520)
        let (command : t -> Command.t) =
          fun (x1522 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1522) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1523 : t) ->
            fun (x1524 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1523) "command"
                (Command.t_to_js x1524)
        let (kind : t -> CodeActionKind.t) =
          fun (x1525 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1525) "kind")
        let (set_kind : t -> CodeActionKind.t -> unit) =
          fun (x1526 : t) ->
            fun (x1527 : CodeActionKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1526) "kind"
                (CodeActionKind.t_to_js x1527)
        let (is_preferred : t -> bool) =
          fun (x1528 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1528) "isPreferred")
        let (set_is_preferred : t -> bool -> unit) =
          fun (x1529 : t) ->
            fun (x1530 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1529) "isPreferred"
                (Ojs.bool_to_js x1530)
        let (disabled : t -> Disabled.t) =
          fun (x1531 : t) ->
            Disabled.t_of_js (Ojs.get_prop_ascii (t_to_js x1531) "disabled")
        let (set_disabled : t -> Disabled.t -> unit) =
          fun (x1532 : t) ->
            fun (x1533 : Disabled.t) ->
              Ojs.set_prop_ascii (t_to_js x1532) "disabled"
                (Disabled.t_to_js x1533)
        let (create : title:string -> ?kind:CodeActionKind.t -> unit -> t) =
          fun ~title:(x1534 : string) ->
            fun ?kind:(x1535 : CodeActionKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CodeAction")
                     (let x1536 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1536 "push" [|(Ojs.string_to_js x1534)|]);
                      (match x1535 with
                       | Some x1537 ->
                           ignore
                             (Ojs.call x1536 "push"
                                [|(CodeActionKind.t_to_js x1537)|])
                       | None -> ());
                      x1536))
      end
    module CodeActionProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1539 : Ojs.t) -> x1539
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1538 : Ojs.t) -> x1538
        let (provide_code_actions :
          'T t ->
            document:TextDocument.t ->
              range:(Range.t, Selection.t) union2 ->
                context:CodeActionContext.t ->
                  token:CancellationToken.t ->
                    (Command.t, 'T) union2 list ProviderResult.t)
          =
          fun (x1546 : 'T t) ->
            fun ~document:(x1540 : TextDocument.t) ->
              fun ~range:(x1541 : (Range.t, Selection.t) union2) ->
                fun ~context:(x1544 : CodeActionContext.t) ->
                  fun ~token:(x1545 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1548 : Ojs.t) ->
                         Ojs.list_of_js
                           (fun (x1549 : Ojs.t) ->
                              union2_of_js Command.t_of_js Obj.magic x1549)
                           x1548)
                      (Ojs.call (t_to_js Obj.magic x1546)
                         "provideCodeActions"
                         [|(TextDocument.t_to_js x1540);(union2_to_js
                                                           Range.t_to_js
                                                           Selection.t_to_js
                                                           x1541);(CodeActionContext.t_to_js
                                                                    x1544);(
                           CancellationToken.t_to_js x1545)|])
        let (resolve_code_action :
          'T t ->
            code_action:'T ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1554 : 'T t) ->
            fun ~code_action:(x1552 : 'T) ->
              fun ~token:(x1553 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1554) "resolveCodeAction"
                     [|(Obj.magic x1552);(CancellationToken.t_to_js x1553)|])
      end
    module CodeActionProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1558 : Ojs.t) -> x1558
        and t_to_js : t -> Ojs.t = fun (x1557 : Ojs.t) -> x1557
        let (provided_code_action_kinds : t -> CodeActionKind.t list) =
          fun (x1559 : t) ->
            Ojs.list_of_js CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1559) "providedCodeActionKinds")
        module Documentation =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1562 : Ojs.t) -> x1562
            and t_to_js : t -> Ojs.t = fun (x1561 : Ojs.t) -> x1561
            let (kind : t -> CodeActionKind.t) =
              fun (x1563 : t) ->
                CodeActionKind.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1563) "kind")
            let (command : t -> Command.t) =
              fun (x1564 : t) ->
                Command.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1564) "command")
          end
        let (documentation : t -> Documentation.t list) =
          fun (x1565 : t) ->
            Ojs.list_of_js Documentation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1565) "documentation")
      end
    module RenameProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1568 : Ojs.t) -> x1568
        and t_to_js : t -> Ojs.t = fun (x1567 : Ojs.t) -> x1567
        let (provide_rename_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                new_name:string ->
                  token:CancellationToken.t ->
                    WorkspaceEdit.t ProviderResult.t)
          =
          fun (x1573 : t) ->
            fun ~document:(x1569 : TextDocument.t) ->
              fun ~position:(x1570 : Position.t) ->
                fun ~new_name:(x1571 : string) ->
                  fun ~token:(x1572 : CancellationToken.t) ->
                    ProviderResult.t_of_js WorkspaceEdit.t_of_js
                      (Ojs.call (t_to_js x1573) "provideRenameEdits"
                         [|(TextDocument.t_to_js x1569);(Position.t_to_js
                                                           x1570);(Ojs.string_to_js
                                                                    x1571);(
                           CancellationToken.t_to_js x1572)|])
        module RangeWithPlaceHolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1576 : Ojs.t) -> x1576
            and t_to_js : t -> Ojs.t = fun (x1575 : Ojs.t) -> x1575
            let (range : t -> Range.t) =
              fun (x1577 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1577) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x1578 : t) ->
                fun (x1579 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1578) "range"
                    (Range.t_to_js x1579)
            let (placeholder : t -> string) =
              fun (x1580 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1580) "placeholder")
            let (set_placeholder : t -> string -> unit) =
              fun (x1581 : t) ->
                fun (x1582 : string) ->
                  Ojs.set_prop_ascii (t_to_js x1581) "placeholder"
                    (Ojs.string_to_js x1582)
          end
        let (prepare_rename :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Range.t, RangeWithPlaceHolder.t) union2 ProviderResult.t)
          =
          fun (x1586 : t) ->
            fun ~document:(x1583 : TextDocument.t) ->
              fun ~position:(x1584 : Position.t) ->
                fun ~token:(x1585 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1587 : Ojs.t) ->
                       union2_of_js Range.t_of_js
                         RangeWithPlaceHolder.t_of_js x1587)
                    (Ojs.call (t_to_js x1586) "prepareRename"
                       [|(TextDocument.t_to_js x1583);(Position.t_to_js x1584);(
                         CancellationToken.t_to_js x1585)|])
      end
    module SemanticTokensLegend =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1591 : Ojs.t) -> x1591
        and t_to_js : t -> Ojs.t = fun (x1590 : Ojs.t) -> x1590
        let (token_types : t -> string list) =
          fun (x1592 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1592) "tokenTypes")
        let (token_modifiers : t -> string list) =
          fun (x1594 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1594) "tokenModifiers")
        let (create :
          token_types:string list ->
            ?token_modifiers:string list -> unit -> t)
          =
          fun ~token_types:(x1596 : string list) ->
            fun ?token_modifiers:(x1597 : string list option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensLegend")
                     (let x1598 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1598 "push"
                           [|(Ojs.list_to_js Ojs.string_to_js x1596)|]);
                      (match x1597 with
                       | Some x1599 ->
                           ignore
                             (Ojs.call x1598 "push"
                                [|(Ojs.list_to_js Ojs.string_to_js x1599)|])
                       | None -> ());
                      x1598))
      end
    module SemanticTokens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1603 : Ojs.t) -> x1603
        and t_to_js : t -> Ojs.t = fun (x1602 : Ojs.t) -> x1602
        let (result_id : t -> string) =
          fun (x1604 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1604) "resultId")
        let (data : t -> Uint32Array.t) =
          fun (x1605 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1605) "data")
        let (create : data:Uint32Array.t -> ?result_id:string -> unit -> t) =
          fun ~data:(x1606 : Uint32Array.t) ->
            fun ?result_id:(x1607 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokens")
                     (let x1608 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1608 "push"
                           [|(Uint32Array.t_to_js x1606)|]);
                      (match x1607 with
                       | Some x1609 ->
                           ignore
                             (Ojs.call x1608 "push"
                                [|(Ojs.string_to_js x1609)|])
                       | None -> ());
                      x1608))
      end
    module SemanticTokensEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1611 : Ojs.t) -> x1611
        and t_to_js : t -> Ojs.t = fun (x1610 : Ojs.t) -> x1610
        let (start : t -> int) =
          fun (x1612 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1612) "start")
        let (delete_count : t -> int) =
          fun (x1613 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1613) "deleteCount")
        let (data : t -> Uint32Array.t) =
          fun (x1614 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1614) "data")
        let (create :
          start:int -> delete_count:int -> ?data:Uint32Array.t -> unit -> t)
          =
          fun ~start:(x1615 : int) ->
            fun ~delete_count:(x1616 : int) ->
              fun ?data:(x1617 : Uint32Array.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SemanticTokensEdit")
                       (let x1618 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1618 "push" [|(Ojs.int_to_js x1615)|]);
                        ignore
                          (Ojs.call x1618 "push" [|(Ojs.int_to_js x1616)|]);
                        (match x1617 with
                         | Some x1619 ->
                             ignore
                               (Ojs.call x1618 "push"
                                  [|(Uint32Array.t_to_js x1619)|])
                         | None -> ());
                        x1618))
      end
    module SemanticTokensEdits =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1621 : Ojs.t) -> x1621
        and t_to_js : t -> Ojs.t = fun (x1620 : Ojs.t) -> x1620
        let (result_id : t -> string) =
          fun (x1622 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1622) "resultId")
        let (edits : t -> SemanticTokensEdit.t list) =
          fun (x1623 : t) ->
            Ojs.list_of_js SemanticTokensEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1623) "edits")
        let (create :
          edits:SemanticTokensEdit.t list -> ?result_id:string -> unit -> t)
          =
          fun ~edits:(x1625 : SemanticTokensEdit.t list) ->
            fun ?result_id:(x1626 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensEdits")
                     (let x1627 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1627 "push"
                           [|(Ojs.list_to_js SemanticTokensEdit.t_to_js x1625)|]);
                      (match x1626 with
                       | Some x1628 ->
                           ignore
                             (Ojs.call x1627 "push"
                                [|(Ojs.string_to_js x1628)|])
                       | None -> ());
                      x1627))
      end
    module SemanticTokensBuilder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1631 : Ojs.t) -> x1631
        and t_to_js : t -> Ojs.t = fun (x1630 : Ojs.t) -> x1630
        let (create : ?legend:SemanticTokensLegend.t -> unit -> t) =
          fun ?legend:(x1632 : SemanticTokensLegend.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SemanticTokensBuilder")
                   (let x1633 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x1632 with
                     | Some x1634 ->
                         ignore
                           (Ojs.call x1633 "push"
                              [|(SemanticTokensLegend.t_to_js x1634)|])
                     | None -> ());
                    x1633))
        let (push :
          t ->
            line:int ->
              char:int ->
                length:int ->
                  token_type_:int -> ?token_modifiers:int -> unit -> unit)
          =
          fun (x1642 : t) ->
            fun ~line:(x1635 : int) ->
              fun ~char:(x1636 : int) ->
                fun ~length:(x1637 : int) ->
                  fun ~token_type_:(x1638 : int) ->
                    fun ?token_modifiers:(x1639 : int option) ->
                      fun () ->
                        ignore
                          (let x1643 = t_to_js x1642 in
                           Ojs.call (Ojs.get_prop_ascii x1643 "push") "apply"
                             [|x1643;((let x1640 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1640 "push"
                                            [|(Ojs.int_to_js x1635)|]);
                                       ignore
                                         (Ojs.call x1640 "push"
                                            [|(Ojs.int_to_js x1636)|]);
                                       ignore
                                         (Ojs.call x1640 "push"
                                            [|(Ojs.int_to_js x1637)|]);
                                       ignore
                                         (Ojs.call x1640 "push"
                                            [|(Ojs.int_to_js x1638)|]);
                                       (match x1639 with
                                        | Some x1641 ->
                                            ignore
                                              (Ojs.call x1640 "push"
                                                 [|(Ojs.int_to_js x1641)|])
                                        | None -> ());
                                       x1640))|])
        let (push' :
          t ->
            range:Range.t ->
              token_type_:string ->
                ?token_modifiers:string list -> unit -> unit)
          =
          fun (x1650 : t) ->
            fun ~range:(x1644 : Range.t) ->
              fun ~token_type_:(x1645 : string) ->
                fun ?token_modifiers:(x1646 : string list option) ->
                  fun () ->
                    ignore
                      (let x1651 = t_to_js x1650 in
                       Ojs.call (Ojs.get_prop_ascii x1651 "push") "apply"
                         [|x1651;((let x1647 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1647 "push"
                                        [|(Range.t_to_js x1644)|]);
                                   ignore
                                     (Ojs.call x1647 "push"
                                        [|(Ojs.string_to_js x1645)|]);
                                   (match x1646 with
                                    | Some x1648 ->
                                        ignore
                                          (Ojs.call x1647 "push"
                                             [|(Ojs.list_to_js
                                                  Ojs.string_to_js x1648)|])
                                    | None -> ());
                                   x1647))|])
        let (build : t -> ?result_id:string -> unit -> SemanticTokens.t) =
          fun (x1655 : t) ->
            fun ?result_id:(x1652 : string option) ->
              fun () ->
                SemanticTokens.t_of_js
                  (let x1656 = t_to_js x1655 in
                   Ojs.call (Ojs.get_prop_ascii x1656 "build") "apply"
                     [|x1656;((let x1653 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1652 with
                                | Some x1654 ->
                                    ignore
                                      (Ojs.call x1653 "push"
                                         [|(Ojs.string_to_js x1654)|])
                                | None -> ());
                               x1653))|])
      end
    module DocumentSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1658 : Ojs.t) -> x1658
        and t_to_js : t -> Ojs.t = fun (x1657 : Ojs.t) -> x1657
        let (on_did_change_semantic_tokens : t -> unit Event.t) =
          fun (x1659 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1659) "onDidChangeSemanticTokens")
        let (set_on_did_change_semantic_tokens : t -> unit Event.t -> unit) =
          fun (x1661 : t) ->
            fun (x1662 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1661) "onDidChangeSemanticTokens"
                (Event.t_to_js Ojs.unit_to_js x1662)
        let (provide_document_semantic_tokens :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> SemanticTokens.t ProviderResult.t)
          =
          fun (x1666 : t) ->
            fun ~document:(x1664 : TextDocument.t) ->
              fun ~token:(x1665 : CancellationToken.t) ->
                ProviderResult.t_of_js SemanticTokens.t_of_js
                  (Ojs.call (t_to_js x1666) "provideDocumentSemanticTokens"
                     [|(TextDocument.t_to_js x1664);(CancellationToken.t_to_js
                                                       x1665)|])
        let (provide_document_semantic_tokens_edits :
          t ->
            document:TextDocument.t ->
              previous_result_id:string ->
                token:CancellationToken.t ->
                  (SemanticTokens.t, SemanticTokensEdits.t) union2
                    ProviderResult.t)
          =
          fun (x1671 : t) ->
            fun ~document:(x1668 : TextDocument.t) ->
              fun ~previous_result_id:(x1669 : string) ->
                fun ~token:(x1670 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1672 : Ojs.t) ->
                       union2_of_js SemanticTokens.t_of_js
                         SemanticTokensEdits.t_of_js x1672)
                    (Ojs.call (t_to_js x1671)
                       "provideDocumentSemanticTokensEdits"
                       [|(TextDocument.t_to_js x1668);(Ojs.string_to_js x1669);(
                         CancellationToken.t_to_js x1670)|])
      end
    module DocumentRangeSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1676 : Ojs.t) -> x1676
        and t_to_js : t -> Ojs.t = fun (x1675 : Ojs.t) -> x1675
        let (provide_document_range_semantic_tokens :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                token:CancellationToken.t ->
                  SemanticTokens.t ProviderResult.t)
          =
          fun (x1680 : t) ->
            fun ~document:(x1677 : TextDocument.t) ->
              fun ~range:(x1678 : Range.t) ->
                fun ~token:(x1679 : CancellationToken.t) ->
                  ProviderResult.t_of_js SemanticTokens.t_of_js
                    (Ojs.call (t_to_js x1680)
                       "provideDocumentRangeSemanticTokens"
                       [|(TextDocument.t_to_js x1677);(Range.t_to_js x1678);(
                         CancellationToken.t_to_js x1679)|])
      end
    module FormattingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1683 : Ojs.t) -> x1683
        and t_to_js : t -> Ojs.t = fun (x1682 : Ojs.t) -> x1682
        let (tab_size : t -> int) =
          fun (x1684 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1684) "tabSize")
        let (set_tab_size : t -> int -> unit) =
          fun (x1685 : t) ->
            fun (x1686 : int) ->
              Ojs.set_prop_ascii (t_to_js x1685) "tabSize"
                (Ojs.int_to_js x1686)
        let (insert_spaces : t -> bool) =
          fun (x1687 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1687) "insertSpaces")
        let (set_insert_spaces : t -> bool -> unit) =
          fun (x1688 : t) ->
            fun (x1689 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1688) "insertSpaces"
                (Ojs.bool_to_js x1689)
        let (get : t -> string -> bool or_string or_number) =
          fun (x1690 : t) ->
            fun (x1691 : string) ->
              or_number_of_js
                (fun (x1692 : Ojs.t) -> or_string_of_js Ojs.bool_of_js x1692)
                (Ojs.get_prop (t_to_js x1690) (Ojs.string_to_js x1691))
        let (set : t -> string -> bool or_string or_number -> unit) =
          fun (x1694 : t) ->
            fun (x1695 : string) ->
              fun (x1696 : bool or_string or_number) ->
                Ojs.set_prop (t_to_js x1694) (Ojs.string_to_js x1695)
                  (or_number_to_js
                     (fun (x1697 : bool or_string) ->
                        or_string_to_js Ojs.bool_to_js x1697) x1696)
      end
    module DocumentFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1700 : Ojs.t) -> x1700
        and t_to_js : t -> Ojs.t = fun (x1699 : Ojs.t) -> x1699
        let (provide_document_formatting_edits :
          t ->
            document:TextDocument.t ->
              options:FormattingOptions.t ->
                token:CancellationToken.t -> TextEdit.t list ProviderResult.t)
          =
          fun (x1704 : t) ->
            fun ~document:(x1701 : TextDocument.t) ->
              fun ~options:(x1702 : FormattingOptions.t) ->
                fun ~token:(x1703 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1705 : Ojs.t) ->
                       Ojs.list_of_js TextEdit.t_of_js x1705)
                    (Ojs.call (t_to_js x1704)
                       "provideDocumentFormattingEdits"
                       [|(TextDocument.t_to_js x1701);(FormattingOptions.t_to_js
                                                         x1702);(CancellationToken.t_to_js
                                                                   x1703)|])
      end
    module DocumentRangeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1708 : Ojs.t) -> x1708
        and t_to_js : t -> Ojs.t = fun (x1707 : Ojs.t) -> x1707
        let (provide_document_range_formatting_edits :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                options:FormattingOptions.t ->
                  token:CancellationToken.t ->
                    TextEdit.t list ProviderResult.t)
          =
          fun (x1713 : t) ->
            fun ~document:(x1709 : TextDocument.t) ->
              fun ~range:(x1710 : Range.t) ->
                fun ~options:(x1711 : FormattingOptions.t) ->
                  fun ~token:(x1712 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1714 : Ojs.t) ->
                         Ojs.list_of_js TextEdit.t_of_js x1714)
                      (Ojs.call (t_to_js x1713)
                         "provideDocumentRangeFormattingEdits"
                         [|(TextDocument.t_to_js x1709);(Range.t_to_js x1710);(
                           FormattingOptions.t_to_js x1711);(CancellationToken.t_to_js
                                                               x1712)|])
      end
    module OnTypeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1717 : Ojs.t) -> x1717
        and t_to_js : t -> Ojs.t = fun (x1716 : Ojs.t) -> x1716
        let (provide_on_type_formatting_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                ch:string ->
                  options:FormattingOptions.t ->
                    token:CancellationToken.t ->
                      TextEdit.t list ProviderResult.t)
          =
          fun (x1723 : t) ->
            fun ~document:(x1718 : TextDocument.t) ->
              fun ~position:(x1719 : Position.t) ->
                fun ~ch:(x1720 : string) ->
                  fun ~options:(x1721 : FormattingOptions.t) ->
                    fun ~token:(x1722 : CancellationToken.t) ->
                      ProviderResult.t_of_js
                        (fun (x1724 : Ojs.t) ->
                           Ojs.list_of_js TextEdit.t_of_js x1724)
                        (Ojs.call (t_to_js x1723)
                           "provideOnTypeFormattingEdits"
                           [|(TextDocument.t_to_js x1718);(Position.t_to_js
                                                             x1719);(
                             Ojs.string_to_js x1720);(FormattingOptions.t_to_js
                                                        x1721);(CancellationToken.t_to_js
                                                                  x1722)|])
      end
    module ParameterInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1727 : Ojs.t) -> x1727
        and t_to_js : t -> Ojs.t = fun (x1726 : Ojs.t) -> x1726
        let (label : t -> (int * int) or_string) =
          fun (x1728 : t) ->
            or_string_of_js
              (fun (x1729 : Ojs.t) ->
                 let x1730 = x1729 in
                 ((Ojs.int_of_js (Ojs.array_get x1730 0)),
                   (Ojs.int_of_js (Ojs.array_get x1730 1))))
              (Ojs.get_prop_ascii (t_to_js x1728) "label")
        let (set_label : t -> (int * int) or_string -> unit) =
          fun (x1731 : t) ->
            fun (x1732 : (int * int) or_string) ->
              Ojs.set_prop_ascii (t_to_js x1731) "label"
                (or_string_to_js
                   (fun (x1733 : (int * int)) ->
                      let (x1734, x1735) = x1733 in
                      let x1736 = Ojs.array_make 2 in
                      Ojs.array_set x1736 0 (Ojs.int_to_js x1734);
                      Ojs.array_set x1736 1 (Ojs.int_to_js x1735);
                      x1736) x1732)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1737 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1737) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1739 : t) ->
            fun (x1740 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1739) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1740)
        let (create :
          label:(int * int) or_string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1742 : (int * int) or_string) ->
            fun ?documentation:(x1743 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ParameterInformation")
                     (let x1744 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1744 "push"
                           [|(or_string_to_js
                                (fun (x1747 : (int * int)) ->
                                   let (x1748, x1749) = x1747 in
                                   let x1750 = Ojs.array_make 2 in
                                   Ojs.array_set x1750 0
                                     (Ojs.int_to_js x1748);
                                   Ojs.array_set x1750 1
                                     (Ojs.int_to_js x1749);
                                   x1750) x1742)|]);
                      (match x1743 with
                       | Some x1745 ->
                           ignore
                             (Ojs.call x1744 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1745)|])
                       | None -> ());
                      x1744))
      end
    module SignatureInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1752 : Ojs.t) -> x1752
        and t_to_js : t -> Ojs.t = fun (x1751 : Ojs.t) -> x1751
        let (label : t -> string) =
          fun (x1753 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1753) "label")
        let (set_label : t -> string -> unit) =
          fun (x1754 : t) ->
            fun (x1755 : string) ->
              Ojs.set_prop_ascii (t_to_js x1754) "label"
                (Ojs.string_to_js x1755)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1756 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1756) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1758 : t) ->
            fun (x1759 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1758) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1759)
        let (parameters : t -> ParameterInformation.t list) =
          fun (x1761 : t) ->
            Ojs.list_of_js ParameterInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1761) "parameters")
        let (set_parameters : t -> ParameterInformation.t list -> unit) =
          fun (x1763 : t) ->
            fun (x1764 : ParameterInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1763) "parameters"
                (Ojs.list_to_js ParameterInformation.t_to_js x1764)
        let (active_parameter : t -> int) =
          fun (x1766 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1766) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1767 : t) ->
            fun (x1768 : int) ->
              Ojs.set_prop_ascii (t_to_js x1767) "activeParameter"
                (Ojs.int_to_js x1768)
        let (create :
          label:string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1769 : string) ->
            fun ?documentation:(x1770 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SignatureInformation")
                     (let x1771 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1771 "push" [|(Ojs.string_to_js x1769)|]);
                      (match x1770 with
                       | Some x1772 ->
                           ignore
                             (Ojs.call x1771 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1772)|])
                       | None -> ());
                      x1771))
      end
    module SignatureHelp =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1775 : Ojs.t) -> x1775
        and t_to_js : t -> Ojs.t = fun (x1774 : Ojs.t) -> x1774
        let (signatures : t -> SignatureInformation.t list) =
          fun (x1776 : t) ->
            Ojs.list_of_js SignatureInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1776) "signatures")
        let (set_signatures : t -> SignatureInformation.t list -> unit) =
          fun (x1778 : t) ->
            fun (x1779 : SignatureInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1778) "signatures"
                (Ojs.list_to_js SignatureInformation.t_to_js x1779)
        let (active_signature : t -> int) =
          fun (x1781 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1781) "activeSignature")
        let (set_active_signature : t -> int -> unit) =
          fun (x1782 : t) ->
            fun (x1783 : int) ->
              Ojs.set_prop_ascii (t_to_js x1782) "activeSignature"
                (Ojs.int_to_js x1783)
        let (active_parameter : t -> int) =
          fun (x1784 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1784) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1785 : t) ->
            fun (x1786 : int) ->
              Ojs.set_prop_ascii (t_to_js x1785) "activeParameter"
                (Ojs.int_to_js x1786)
      end
    module SignatureHelpTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `ContentChange ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1788 : Ojs.t) ->
            let x1789 = x1788 in
            match Ojs.int_of_js x1789 with
            | 2 -> `TriggerCharacter
            | 3 -> `ContentChange
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1787 : [ `TriggerCharacter  | `ContentChange ]) ->
            match x1787 with
            | `TriggerCharacter -> Ojs.int_to_js 2
            | `ContentChange -> Ojs.int_to_js 3
      end
    module SignatureHelpContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1791 : Ojs.t) -> x1791
        and t_to_js : t -> Ojs.t = fun (x1790 : Ojs.t) -> x1790
        let (trigger_kind : t -> SignatureHelpTriggerKind.t) =
          fun (x1792 : t) ->
            SignatureHelpTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1792) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1793 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1793) "triggerCharacter")
        let (is_retrigger : t -> bool) =
          fun (x1794 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1794) "isRetrigger")
        let (active_signature_help : t -> SignatureHelp.t) =
          fun (x1795 : t) ->
            SignatureHelp.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1795) "activeSignatureHelp")
      end
    module SignatureHelpProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1797 : Ojs.t) -> x1797
        and t_to_js : t -> Ojs.t = fun (x1796 : Ojs.t) -> x1796
        let (provide_signature_help :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:SignatureHelpContext.t ->
                    SignatureHelp.t ProviderResult.t)
          =
          fun (x1802 : t) ->
            fun ~document:(x1798 : TextDocument.t) ->
              fun ~position:(x1799 : Position.t) ->
                fun ~token:(x1800 : CancellationToken.t) ->
                  fun ~context:(x1801 : SignatureHelpContext.t) ->
                    ProviderResult.t_of_js SignatureHelp.t_of_js
                      (Ojs.call (t_to_js x1802) "provideSignatureHelp"
                         [|(TextDocument.t_to_js x1798);(Position.t_to_js
                                                           x1799);(CancellationToken.t_to_js
                                                                    x1800);(
                           SignatureHelpContext.t_to_js x1801)|])
      end
    module SignatureHelpProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1805 : Ojs.t) -> x1805
        and t_to_js : t -> Ojs.t = fun (x1804 : Ojs.t) -> x1804
        let (trigger_characters : t -> string list) =
          fun (x1806 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1806) "triggerCharacters")
        let (retrigger_characters : t -> string list) =
          fun (x1808 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1808) "retriggerCharacters")
      end
    module CompletionItemKind =
      struct
        type t =
          [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
          | `Class  | `Interface  | `Module  | `Property  | `Unit  | 
            `Value 
          | `Enum  | `Keyword  | `Snippet  | `Color  | `Reference  | 
            `File 
          | `Folder  | `EnumMember  | `Constant  | `Struct  | `Event 
          | `Operator  | `TypeParameter  | `User  | `Issue ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1811 : Ojs.t) ->
            let x1812 = x1811 in
            match Ojs.int_of_js x1812 with
            | 1 -> `Method
            | 2 -> `Function
            | 3 -> `Constructor
            | 4 -> `Field
            | 5 -> `Variable
            | 6 -> `Class
            | 7 -> `Interface
            | 8 -> `Module
            | 9 -> `Property
            | 10 -> `Unit
            | 11 -> `Value
            | 12 -> `Enum
            | 13 -> `Keyword
            | 14 -> `Snippet
            | 15 -> `Color
            | 17 -> `Reference
            | 16 -> `File
            | 18 -> `Folder
            | 19 -> `EnumMember
            | 20 -> `Constant
            | 21 -> `Struct
            | 22 -> `Event
            | 23 -> `Operator
            | 24 -> `TypeParameter
            | 25 -> `User
            | 26 -> `Issue
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1810 :
              [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
              | `Class  | `Interface  | `Module  | `Property  | `Unit 
              | `Value  | `Enum  | `Keyword  | `Snippet  | `Color 
              | `Reference  | `File  | `Folder  | `EnumMember  | `Constant 
              | `Struct  | `Event  | `Operator  | `TypeParameter  | `User 
              | `Issue ])
            ->
            match x1810 with
            | `Method -> Ojs.int_to_js 1
            | `Function -> Ojs.int_to_js 2
            | `Constructor -> Ojs.int_to_js 3
            | `Field -> Ojs.int_to_js 4
            | `Variable -> Ojs.int_to_js 5
            | `Class -> Ojs.int_to_js 6
            | `Interface -> Ojs.int_to_js 7
            | `Module -> Ojs.int_to_js 8
            | `Property -> Ojs.int_to_js 9
            | `Unit -> Ojs.int_to_js 10
            | `Value -> Ojs.int_to_js 11
            | `Enum -> Ojs.int_to_js 12
            | `Keyword -> Ojs.int_to_js 13
            | `Snippet -> Ojs.int_to_js 14
            | `Color -> Ojs.int_to_js 15
            | `Reference -> Ojs.int_to_js 17
            | `File -> Ojs.int_to_js 16
            | `Folder -> Ojs.int_to_js 18
            | `EnumMember -> Ojs.int_to_js 19
            | `Constant -> Ojs.int_to_js 20
            | `Struct -> Ojs.int_to_js 21
            | `Event -> Ojs.int_to_js 22
            | `Operator -> Ojs.int_to_js 23
            | `TypeParameter -> Ojs.int_to_js 24
            | `User -> Ojs.int_to_js 25
            | `Issue -> Ojs.int_to_js 26
      end
    module CompletionItemTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1814 : Ojs.t) -> x1814
        and t_to_js : t -> Ojs.t = fun (x1813 : Ojs.t) -> x1813
      end
    module CompletionItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1816 : Ojs.t) -> x1816
        and t_to_js : t -> Ojs.t = fun (x1815 : Ojs.t) -> x1815
        let (label : t -> string) =
          fun (x1817 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1817) "label")
        let (set_label : t -> string -> unit) =
          fun (x1818 : t) ->
            fun (x1819 : string) ->
              Ojs.set_prop_ascii (t_to_js x1818) "label"
                (Ojs.string_to_js x1819)
        let (kind : t -> CompletionItemKind.t) =
          fun (x1820 : t) ->
            CompletionItemKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1820) "kind")
        let (set_kind : t -> CompletionItemKind.t -> unit) =
          fun (x1821 : t) ->
            fun (x1822 : CompletionItemKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1821) "kind"
                (CompletionItemKind.t_to_js x1822)
        let (tags : t -> CompletionItemTag.t list) =
          fun (x1823 : t) ->
            Ojs.list_of_js CompletionItemTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1823) "tags")
        let (set_tags : t -> CompletionItemTag.t list -> unit) =
          fun (x1825 : t) ->
            fun (x1826 : CompletionItemTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1825) "tags"
                (Ojs.list_to_js CompletionItemTag.t_to_js x1826)
        let (detail : t -> string) =
          fun (x1828 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1828) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1829 : t) ->
            fun (x1830 : string) ->
              Ojs.set_prop_ascii (t_to_js x1829) "detail"
                (Ojs.string_to_js x1830)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1831 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1831) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1833 : t) ->
            fun (x1834 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1833) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1834)
        let (sort_text : t -> string) =
          fun (x1836 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1836) "sortText")
        let (set_sort_text : t -> string -> unit) =
          fun (x1837 : t) ->
            fun (x1838 : string) ->
              Ojs.set_prop_ascii (t_to_js x1837) "sortText"
                (Ojs.string_to_js x1838)
        let (filter_text : t -> string) =
          fun (x1839 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1839) "filterText")
        let (set_filter_text : t -> string -> unit) =
          fun (x1840 : t) ->
            fun (x1841 : string) ->
              Ojs.set_prop_ascii (t_to_js x1840) "filterText"
                (Ojs.string_to_js x1841)
        let (preselect : t -> bool) =
          fun (x1842 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1842) "preselect")
        let (set_preselect : t -> bool -> unit) =
          fun (x1843 : t) ->
            fun (x1844 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1843) "preselect"
                (Ojs.bool_to_js x1844)
        let (insert_text : t -> SnippetString.t or_string) =
          fun (x1845 : t) ->
            or_string_of_js SnippetString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1845) "insertText")
        let (set_insert_text : t -> SnippetString.t or_string -> unit) =
          fun (x1847 : t) ->
            fun (x1848 : SnippetString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1847) "insertText"
                (or_string_to_js SnippetString.t_to_js x1848)
        module RangeWithEdit =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1851 : Ojs.t) -> x1851
            and t_to_js : t -> Ojs.t = fun (x1850 : Ojs.t) -> x1850
            let (inserting : t -> Range.t) =
              fun (x1852 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1852) "inserting")
            let (set_inserting : t -> Range.t -> unit) =
              fun (x1853 : t) ->
                fun (x1854 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1853) "inserting"
                    (Range.t_to_js x1854)
            let (replacing : t -> Range.t) =
              fun (x1855 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1855) "replacing")
            let (set_replacing : t -> Range.t -> unit) =
              fun (x1856 : t) ->
                fun (x1857 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1856) "replacing"
                    (Range.t_to_js x1857)
          end
        let (range : t -> (Range.t, RangeWithEdit.t) union2) =
          fun (x1858 : t) ->
            union2_of_js Range.t_of_js RangeWithEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1858) "range")
        let (set_range : t -> (Range.t, RangeWithEdit.t) union2 -> unit) =
          fun (x1861 : t) ->
            fun (x1862 : (Range.t, RangeWithEdit.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x1861) "range"
                (union2_to_js Range.t_to_js RangeWithEdit.t_to_js x1862)
        let (commit_characters : t -> string list) =
          fun (x1865 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1865) "commitCharacters")
        let (set_commit_characters : t -> string list -> unit) =
          fun (x1867 : t) ->
            fun (x1868 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1867) "commitCharacters"
                (Ojs.list_to_js Ojs.string_to_js x1868)
        let (keep_whitespace : t -> bool) =
          fun (x1870 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1870) "keepWhitespace")
        let (set_keep_whitespace : t -> bool -> unit) =
          fun (x1871 : t) ->
            fun (x1872 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1871) "keepWhitespace"
                (Ojs.bool_to_js x1872)
        let (text_edit : t -> TextEdit.t) =
          fun (x1873 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1873) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x1874 : t) ->
            fun (x1875 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1874) "textEdit"
                (TextEdit.t_to_js x1875)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x1876 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1876) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x1878 : t) ->
            fun (x1879 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x1878) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x1879)
        let (command : t -> Command.t) =
          fun (x1881 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1881) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1882 : t) ->
            fun (x1883 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1882) "command"
                (Command.t_to_js x1883)
        let (create :
          label:string -> ?kind:CompletionItemKind.t -> unit -> t) =
          fun ~label:(x1884 : string) ->
            fun ?kind:(x1885 : CompletionItemKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionItem")
                     (let x1886 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1886 "push" [|(Ojs.string_to_js x1884)|]);
                      (match x1885 with
                       | Some x1887 ->
                           ignore
                             (Ojs.call x1886 "push"
                                [|(CompletionItemKind.t_to_js x1887)|])
                       | None -> ());
                      x1886))
      end
    module CompletionList =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1889 : Ojs.t) -> x1889
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1888 : Ojs.t) -> x1888
        let (is_incomplete : 'T t -> bool) =
          fun (x1890 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1890) "isIncomplete")
        let (set_is_incomplete : 'T t -> bool -> unit) =
          fun (x1892 : 'T t) ->
            fun (x1893 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1892) "isIncomplete"
                (Ojs.bool_to_js x1893)
        let (items : 'T t -> 'T list) =
          fun (x1895 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1895) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x1898 : 'T t) ->
            fun (x1899 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1898) "items"
                (Ojs.list_to_js Obj.magic x1899)
        let (create : ?items:'T list -> ?is_incomplete:bool -> unit -> 'T t)
          =
          fun ?items:(x1902 : 'T list option) ->
            fun ?is_incomplete:(x1903 : bool option) ->
              fun () ->
                t_of_js Obj.magic
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionList")
                     (let x1904 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1902 with
                       | Some x1906 ->
                           ignore
                             (Ojs.call x1904 "push"
                                [|(Ojs.list_to_js Obj.magic x1906)|])
                       | None -> ());
                      (match x1903 with
                       | Some x1905 ->
                           ignore
                             (Ojs.call x1904 "push"
                                [|(Ojs.bool_to_js x1905)|])
                       | None -> ());
                      x1904))
      end
    module CompletionTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `TriggerForIncompleteCompletions ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1910 : Ojs.t) ->
            let x1911 = x1910 in
            match Ojs.int_of_js x1911 with
            | 1 -> `TriggerCharacter
            | 2 -> `TriggerForIncompleteCompletions
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1909 :
              [ `TriggerCharacter  | `TriggerForIncompleteCompletions ])
            ->
            match x1909 with
            | `TriggerCharacter -> Ojs.int_to_js 1
            | `TriggerForIncompleteCompletions -> Ojs.int_to_js 2
      end
    module CompletionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1913 : Ojs.t) -> x1913
        and t_to_js : t -> Ojs.t = fun (x1912 : Ojs.t) -> x1912
        let (trigger_kind : t -> CompletionTriggerKind.t) =
          fun (x1914 : t) ->
            CompletionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1914) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1915 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1915) "triggerCharacter")
      end
    module CompletionItemProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1917 : Ojs.t) -> x1917
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1916 : Ojs.t) -> x1916
        let (provide_completion_items :
          'T t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:CompletionContext.t ->
                    ('T CompletionList.t, 'T) or_array ProviderResult.t)
          =
          fun (x1922 : 'T t) ->
            fun ~document:(x1918 : TextDocument.t) ->
              fun ~position:(x1919 : Position.t) ->
                fun ~token:(x1920 : CancellationToken.t) ->
                  fun ~context:(x1921 : CompletionContext.t) ->
                    ProviderResult.t_of_js
                      (fun (x1924 : Ojs.t) ->
                         or_array_of_js
                           (fun (x1925 : Ojs.t) ->
                              CompletionList.t_of_js Obj.magic x1925)
                           Obj.magic x1924)
                      (Ojs.call (t_to_js Obj.magic x1922)
                         "provideCompletionItems"
                         [|(TextDocument.t_to_js x1918);(Position.t_to_js
                                                           x1919);(CancellationToken.t_to_js
                                                                    x1920);(
                           CompletionContext.t_to_js x1921)|])
        let (resolve_completion_item :
          'T t -> item:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1930 : 'T t) ->
            fun ~item:(x1928 : 'T) ->
              fun ~token:(x1929 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1930) "resolveCompletionItem"
                     [|(Obj.magic x1928);(CancellationToken.t_to_js x1929)|])
      end
    module DocumentLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1934 : Ojs.t) -> x1934
        and t_to_js : t -> Ojs.t = fun (x1933 : Ojs.t) -> x1933
        let (range : t -> Range.t) =
          fun (x1935 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1935) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1936 : t) ->
            fun (x1937 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1936) "range"
                (Range.t_to_js x1937)
        let (target : t -> Uri.t) =
          fun (x1938 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1938) "target")
        let (set_target : t -> Uri.t -> unit) =
          fun (x1939 : t) ->
            fun (x1940 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1939) "target" (Uri.t_to_js x1940)
        let (tooltip : t -> string) =
          fun (x1941 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1941) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x1942 : t) ->
            fun (x1943 : string) ->
              Ojs.set_prop_ascii (t_to_js x1942) "tooltip"
                (Ojs.string_to_js x1943)
        let (create : range:Range.t -> ?target:Uri.t -> unit -> t) =
          fun ~range:(x1944 : Range.t) ->
            fun ?target:(x1945 : Uri.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentLink")
                     (let x1946 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1946 "push" [|(Range.t_to_js x1944)|]);
                      (match x1945 with
                       | Some x1947 ->
                           ignore
                             (Ojs.call x1946 "push" [|(Uri.t_to_js x1947)|])
                       | None -> ());
                      x1946))
      end
    module DocumentLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1949 : Ojs.t) -> x1949
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1948 : Ojs.t) -> x1948
        let (provide_document_links :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1952 : 'T t) ->
            fun ~document:(x1950 : TextDocument.t) ->
              fun ~token:(x1951 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1954 : Ojs.t) -> Ojs.list_of_js Obj.magic x1954)
                  (Ojs.call (t_to_js Obj.magic x1952) "provideDocumentLinks"
                     [|(TextDocument.t_to_js x1950);(CancellationToken.t_to_js
                                                       x1951)|])
        let (resolve_document_link :
          'T t -> link:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1958 : 'T t) ->
            fun ~link:(x1956 : 'T) ->
              fun ~token:(x1957 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1958) "resolveDocumentLink"
                     [|(Obj.magic x1956);(CancellationToken.t_to_js x1957)|])
      end
    module Color =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1962 : Ojs.t) -> x1962
        and t_to_js : t -> Ojs.t = fun (x1961 : Ojs.t) -> x1961
        let (red : t -> int) =
          fun (x1963 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1963) "red")
        let (green : t -> int) =
          fun (x1964 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1964) "green")
        let (blue : t -> int) =
          fun (x1965 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1965) "blue")
        let (alpha : t -> int) =
          fun (x1966 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1966) "alpha")
        let (create : red:int -> green:int -> blue:int -> alpha:int -> t) =
          fun ~red:(x1967 : int) ->
            fun ~green:(x1968 : int) ->
              fun ~blue:(x1969 : int) ->
                fun ~alpha:(x1970 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Color")
                       [|(Ojs.int_to_js x1967);(Ojs.int_to_js x1968);(
                         Ojs.int_to_js x1969);(Ojs.int_to_js x1970)|])
      end
    module ColorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1972 : Ojs.t) -> x1972
        and t_to_js : t -> Ojs.t = fun (x1971 : Ojs.t) -> x1971
        let (range : t -> Range.t) =
          fun (x1973 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1973) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1974 : t) ->
            fun (x1975 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1974) "range"
                (Range.t_to_js x1975)
        let (color : t -> Color.t) =
          fun (x1976 : t) ->
            Color.t_of_js (Ojs.get_prop_ascii (t_to_js x1976) "color")
        let (set_color : t -> Color.t -> unit) =
          fun (x1977 : t) ->
            fun (x1978 : Color.t) ->
              Ojs.set_prop_ascii (t_to_js x1977) "color"
                (Color.t_to_js x1978)
        let (create : range:Range.t -> color:Color.t -> t) =
          fun ~range:(x1979 : Range.t) ->
            fun ~color:(x1980 : Color.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "ColorInformation")
                   [|(Range.t_to_js x1979);(Color.t_to_js x1980)|])
      end
    module ColorPresentation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1982 : Ojs.t) -> x1982
        and t_to_js : t -> Ojs.t = fun (x1981 : Ojs.t) -> x1981
        let (label : t -> string) =
          fun (x1983 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1983) "label")
        let (set_label : t -> string -> unit) =
          fun (x1984 : t) ->
            fun (x1985 : string) ->
              Ojs.set_prop_ascii (t_to_js x1984) "label"
                (Ojs.string_to_js x1985)
        let (text_edit : t -> TextEdit.t) =
          fun (x1986 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1986) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x1987 : t) ->
            fun (x1988 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1987) "textEdit"
                (TextEdit.t_to_js x1988)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x1989 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1989) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x1991 : t) ->
            fun (x1992 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x1991) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x1992)
        let (create : label:string -> t) =
          fun ~label:(x1994 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "ColorPresentation") [|(Ojs.string_to_js x1994)|])
      end
    module DocumentColorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1996 : Ojs.t) -> x1996
        and t_to_js : t -> Ojs.t = fun (x1995 : Ojs.t) -> x1995
        let (provide_document_colors :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                ColorInformation.t list ProviderResult.t)
          =
          fun (x1999 : t) ->
            fun ~document:(x1997 : TextDocument.t) ->
              fun ~token:(x1998 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2000 : Ojs.t) ->
                     Ojs.list_of_js ColorInformation.t_of_js x2000)
                  (Ojs.call (t_to_js x1999) "provideDocumentColors"
                     [|(TextDocument.t_to_js x1997);(CancellationToken.t_to_js
                                                       x1998)|])
        module Context =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2003 : Ojs.t) -> x2003
            and t_to_js : t -> Ojs.t = fun (x2002 : Ojs.t) -> x2002
            let (document : t -> TextDocument.t) =
              fun (x2004 : t) ->
                TextDocument.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x2004) "document")
            let (set_document : t -> TextDocument.t -> unit) =
              fun (x2005 : t) ->
                fun (x2006 : TextDocument.t) ->
                  Ojs.set_prop_ascii (t_to_js x2005) "document"
                    (TextDocument.t_to_js x2006)
            let (range : t -> Range.t) =
              fun (x2007 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2007) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x2008 : t) ->
                fun (x2009 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x2008) "range"
                    (Range.t_to_js x2009)
          end
        let (provide_color_presentations :
          t ->
            color:Color.t ->
              context:Context.t ->
                token:CancellationToken.t ->
                  ColorPresentation.t list ProviderResult.t)
          =
          fun (x2013 : t) ->
            fun ~color:(x2010 : Color.t) ->
              fun ~context:(x2011 : Context.t) ->
                fun ~token:(x2012 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2014 : Ojs.t) ->
                       Ojs.list_of_js ColorPresentation.t_of_js x2014)
                    (Ojs.call (t_to_js x2013) "provideColorPresentations"
                       [|(Color.t_to_js x2010);(Context.t_to_js x2011);(
                         CancellationToken.t_to_js x2012)|])
      end
    module FoldingRangeKind =
      struct
        type t = [ `Imports  | `Region ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2017 : Ojs.t) ->
            let x2018 = x2017 in
            match Ojs.int_of_js x2018 with
            | 2 -> `Imports
            | 3 -> `Region
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2016 : [ `Imports  | `Region ]) ->
            match x2016 with
            | `Imports -> Ojs.int_to_js 2
            | `Region -> Ojs.int_to_js 3
      end
    module FoldingRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2020 : Ojs.t) -> x2020
        and t_to_js : t -> Ojs.t = fun (x2019 : Ojs.t) -> x2019
        let (start : t -> int) =
          fun (x2021 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2021) "start")
        let (set_start : t -> int -> unit) =
          fun (x2022 : t) ->
            fun (x2023 : int) ->
              Ojs.set_prop_ascii (t_to_js x2022) "start"
                (Ojs.int_to_js x2023)
        let (end_ : t -> int) =
          fun (x2024 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2024) "end")
        let (set_end : t -> int -> unit) =
          fun (x2025 : t) ->
            fun (x2026 : int) ->
              Ojs.set_prop_ascii (t_to_js x2025) "end" (Ojs.int_to_js x2026)
        let (kind : t -> FoldingRangeKind.t) =
          fun (x2027 : t) ->
            FoldingRangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2027) "kind")
        let (set_kind : t -> FoldingRangeKind.t -> unit) =
          fun (x2028 : t) ->
            fun (x2029 : FoldingRangeKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2028) "kind"
                (FoldingRangeKind.t_to_js x2029)
        let (create :
          start:int -> end_:int -> ?kind:FoldingRangeKind.t -> unit -> t) =
          fun ~start:(x2030 : int) ->
            fun ~end_:(x2031 : int) ->
              fun ?kind:(x2032 : FoldingRangeKind.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FoldingRange")
                       (let x2033 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2033 "push" [|(Ojs.int_to_js x2030)|]);
                        ignore
                          (Ojs.call x2033 "push" [|(Ojs.int_to_js x2031)|]);
                        (match x2032 with
                         | Some x2034 ->
                             ignore
                               (Ojs.call x2033 "push"
                                  [|(FoldingRangeKind.t_to_js x2034)|])
                         | None -> ());
                        x2033))
      end
    module FoldingContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2036 : Ojs.t) -> x2036
        and t_to_js : t -> Ojs.t = fun (x2035 : Ojs.t) -> x2035
      end
    module FoldingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2038 : Ojs.t) -> x2038
        and t_to_js : t -> Ojs.t = fun (x2037 : Ojs.t) -> x2037
        let (on_did_change_folding_ranges : t -> unit Event.t) =
          fun (x2039 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x2039) "onDidChangeFoldingRanges")
        let (set_on_did_change_folding_ranges : t -> unit Event.t -> unit) =
          fun (x2041 : t) ->
            fun (x2042 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2041) "onDidChangeFoldingRanges"
                (Event.t_to_js Ojs.unit_to_js x2042)
        let (provide_folding_ranges :
          t ->
            document:TextDocument.t ->
              context:FoldingContext.t ->
                token:CancellationToken.t ->
                  FoldingRange.t list ProviderResult.t)
          =
          fun (x2047 : t) ->
            fun ~document:(x2044 : TextDocument.t) ->
              fun ~context:(x2045 : FoldingContext.t) ->
                fun ~token:(x2046 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2048 : Ojs.t) ->
                       Ojs.list_of_js FoldingRange.t_of_js x2048)
                    (Ojs.call (t_to_js x2047) "provideFoldingRanges"
                       [|(TextDocument.t_to_js x2044);(FoldingContext.t_to_js
                                                         x2045);(CancellationToken.t_to_js
                                                                   x2046)|])
      end
    module SelectionRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2051 : Ojs.t) -> x2051
        and t_to_js : t -> Ojs.t = fun (x2050 : Ojs.t) -> x2050
        let (range : t -> Range.t) =
          fun (x2052 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2052) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2053 : t) ->
            fun (x2054 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2053) "range"
                (Range.t_to_js x2054)
        let (parent : t -> t) =
          fun (x2055 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x2055) "parent")
        let (set_parent : t -> t -> unit) =
          fun (x2056 : t) ->
            fun (x2057 : t) ->
              Ojs.set_prop_ascii (t_to_js x2056) "parent" (t_to_js x2057)
        let (create : range:Range.t -> ?parent:t -> unit -> t) =
          fun ~range:(x2058 : Range.t) ->
            fun ?parent:(x2059 : t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SelectionRange")
                     (let x2060 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2060 "push" [|(Range.t_to_js x2058)|]);
                      (match x2059 with
                       | Some x2061 ->
                           ignore (Ojs.call x2060 "push" [|(t_to_js x2061)|])
                       | None -> ());
                      x2060))
      end
    module SelectionRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2063 : Ojs.t) -> x2063
        and t_to_js : t -> Ojs.t = fun (x2062 : Ojs.t) -> x2062
        let (provide_selection_ranges :
          t ->
            document:TextDocument.t ->
              positions:Position.t list ->
                token:CancellationToken.t ->
                  SelectionRange.t list ProviderResult.t)
          =
          fun (x2068 : t) ->
            fun ~document:(x2064 : TextDocument.t) ->
              fun ~positions:(x2065 : Position.t list) ->
                fun ~token:(x2067 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2069 : Ojs.t) ->
                       Ojs.list_of_js SelectionRange.t_of_js x2069)
                    (Ojs.call (t_to_js x2068) "provideSelectionRanges"
                       [|(TextDocument.t_to_js x2064);(Ojs.list_to_js
                                                         Position.t_to_js
                                                         x2065);(CancellationToken.t_to_js
                                                                   x2067)|])
      end
    module CallHierarchyItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2072 : Ojs.t) -> x2072
        and t_to_js : t -> Ojs.t = fun (x2071 : Ojs.t) -> x2071
        let (name : t -> string) =
          fun (x2073 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2073) "name")
        let (set_name : t -> string -> unit) =
          fun (x2074 : t) ->
            fun (x2075 : string) ->
              Ojs.set_prop_ascii (t_to_js x2074) "name"
                (Ojs.string_to_js x2075)
        let (kind : t -> SymbolKind.t) =
          fun (x2076 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x2076) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x2077 : t) ->
            fun (x2078 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2077) "kind"
                (SymbolKind.t_to_js x2078)
        let (tags : t -> SymbolTag.t list) =
          fun (x2079 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2079) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x2081 : t) ->
            fun (x2082 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x2081) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x2082)
        let (detail : t -> string) =
          fun (x2084 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2084) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x2085 : t) ->
            fun (x2086 : string) ->
              Ojs.set_prop_ascii (t_to_js x2085) "detail"
                (Ojs.string_to_js x2086)
        let (uri : t -> Uri.t) =
          fun (x2087 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2087) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x2088 : t) ->
            fun (x2089 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2088) "uri" (Uri.t_to_js x2089)
        let (range : t -> Range.t) =
          fun (x2090 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2090) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2091 : t) ->
            fun (x2092 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2091) "range"
                (Range.t_to_js x2092)
        let (selection_range : t -> Range.t) =
          fun (x2093 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2093) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x2094 : t) ->
            fun (x2095 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2094) "selectionRange"
                (Range.t_to_js x2095)
        let (create :
          kind:SymbolKind.t ->
            name:string ->
              detail:string ->
                uri:Uri.t -> range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~kind:(x2096 : SymbolKind.t) ->
            fun ~name:(x2097 : string) ->
              fun ~detail:(x2098 : string) ->
                fun ~uri:(x2099 : Uri.t) ->
                  fun ~range:(x2100 : Range.t) ->
                    fun ~selection_range:(x2101 : Range.t) ->
                      t_of_js
                        (Ojs.new_obj
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "CallHierarchyItem")
                           [|(SymbolKind.t_to_js x2096);(Ojs.string_to_js
                                                           x2097);(Ojs.string_to_js
                                                                    x2098);(
                             Uri.t_to_js x2099);(Range.t_to_js x2100);(
                             Range.t_to_js x2101)|])
      end
    module CallHierarchyIncomingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2103 : Ojs.t) -> x2103
        and t_to_js : t -> Ojs.t = fun (x2102 : Ojs.t) -> x2102
        let (from : t -> CallHierarchyItem.t) =
          fun (x2104 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2104) "from")
        let (set_from : t -> CallHierarchyItem.t -> unit) =
          fun (x2105 : t) ->
            fun (x2106 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2105) "from"
                (CallHierarchyItem.t_to_js x2106)
        let (from_ranges : t -> Range.t list) =
          fun (x2107 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2107) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2109 : t) ->
            fun (x2110 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2109) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2110)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2112 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2113 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyIncomingCall")
                   [|(CallHierarchyItem.t_to_js x2112);(Ojs.list_to_js
                                                          Range.t_to_js x2113)|])
      end
    module CallHierarchyOutgoingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2116 : Ojs.t) -> x2116
        and t_to_js : t -> Ojs.t = fun (x2115 : Ojs.t) -> x2115
        let (to_ : t -> CallHierarchyItem.t) =
          fun (x2117 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2117) "to")
        let (set_to : t -> CallHierarchyItem.t -> unit) =
          fun (x2118 : t) ->
            fun (x2119 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2118) "to"
                (CallHierarchyItem.t_to_js x2119)
        let (from_ranges : t -> Range.t list) =
          fun (x2120 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2120) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2122 : t) ->
            fun (x2123 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2122) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2123)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2125 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2126 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyOutgoingCall")
                   [|(CallHierarchyItem.t_to_js x2125);(Ojs.list_to_js
                                                          Range.t_to_js x2126)|])
      end
    module CallHierarchyProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2129 : Ojs.t) -> x2129
        and t_to_js : t -> Ojs.t = fun (x2128 : Ojs.t) -> x2128
        let (prepare_call_hierarchy :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (CallHierarchyItem.t, CallHierarchyItem.t) or_array
                    ProviderResult.t)
          =
          fun (x2133 : t) ->
            fun ~document:(x2130 : TextDocument.t) ->
              fun ~position:(x2131 : Position.t) ->
                fun ~token:(x2132 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2134 : Ojs.t) ->
                       or_array_of_js CallHierarchyItem.t_of_js
                         CallHierarchyItem.t_of_js x2134)
                    (Ojs.call (t_to_js x2133) "prepareCallHierarchy"
                       [|(TextDocument.t_to_js x2130);(Position.t_to_js x2131);(
                         CancellationToken.t_to_js x2132)|])
        let (provide_call_hierarchy_incoming_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyIncomingCall.t list ProviderResult.t)
          =
          fun (x2139 : t) ->
            fun ~item:(x2137 : CallHierarchyItem.t) ->
              fun ~token:(x2138 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2140 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyIncomingCall.t_of_js x2140)
                  (Ojs.call (t_to_js x2139)
                     "provideCallHierarchyIncomingCalls"
                     [|(CallHierarchyItem.t_to_js x2137);(CancellationToken.t_to_js
                                                            x2138)|])
        let (provide_call_hierarchy_outgoing_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyOutgoingCall.t list ProviderResult.t)
          =
          fun (x2144 : t) ->
            fun ~item:(x2142 : CallHierarchyItem.t) ->
              fun ~token:(x2143 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2145 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyOutgoingCall.t_of_js x2145)
                  (Ojs.call (t_to_js x2144)
                     "provideCallHierarchyOutgoingCalls"
                     [|(CallHierarchyItem.t_to_js x2142);(CancellationToken.t_to_js
                                                            x2143)|])
      end
    module LinkedEditingRanges =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2148 : Ojs.t) -> x2148
        and t_to_js : t -> Ojs.t = fun (x2147 : Ojs.t) -> x2147
        let (create :
          ranges:Range.t list -> ?word_pattern:regexp -> unit -> t) =
          fun ~ranges:(x2149 : Range.t list) ->
            fun ?word_pattern:(x2150 : regexp option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "LinkedEditingRanges")
                     (let x2151 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2151 "push"
                           [|(Ojs.list_to_js Range.t_to_js x2149)|]);
                      (match x2150 with
                       | Some x2152 ->
                           ignore
                             (Ojs.call x2151 "push" [|(regexp_to_js x2152)|])
                       | None -> ());
                      x2151))
        let (ranges : t -> Range.t list) =
          fun (x2154 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2154) "ranges")
        let (word_pattern : t -> regexp) =
          fun (x2156 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2156) "wordPattern")
      end
    module LinkedEditingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2158 : Ojs.t) -> x2158
        and t_to_js : t -> Ojs.t = fun (x2157 : Ojs.t) -> x2157
        let (provide_linked_editing_ranges :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  LinkedEditingRanges.t ProviderResult.t)
          =
          fun (x2162 : t) ->
            fun ~document:(x2159 : TextDocument.t) ->
              fun ~position:(x2160 : Position.t) ->
                fun ~token:(x2161 : CancellationToken.t) ->
                  ProviderResult.t_of_js LinkedEditingRanges.t_of_js
                    (Ojs.call (t_to_js x2162) "provideLinkedEditingRanges"
                       [|(TextDocument.t_to_js x2159);(Position.t_to_js x2160);(
                         CancellationToken.t_to_js x2161)|])
      end
    module CharacterPair =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2165 : Ojs.t) -> x2165
        and t_to_js : t -> Ojs.t = fun (x2164 : Ojs.t) -> x2164
      end
    module CommentRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2167 : Ojs.t) -> x2167
        and t_to_js : t -> Ojs.t = fun (x2166 : Ojs.t) -> x2166
        let (line_comment : t -> string) =
          fun (x2168 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2168) "lineComment")
        let (set_line_comment : t -> string -> unit) =
          fun (x2169 : t) ->
            fun (x2170 : string) ->
              Ojs.set_prop_ascii (t_to_js x2169) "lineComment"
                (Ojs.string_to_js x2170)
        let (block_comment : t -> CharacterPair.t) =
          fun (x2171 : t) ->
            CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2171) "blockComment")
        let (set_block_comment : t -> CharacterPair.t -> unit) =
          fun (x2172 : t) ->
            fun (x2173 : CharacterPair.t) ->
              Ojs.set_prop_ascii (t_to_js x2172) "blockComment"
                (CharacterPair.t_to_js x2173)
      end
    module IndentationRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2175 : Ojs.t) -> x2175
        and t_to_js : t -> Ojs.t = fun (x2174 : Ojs.t) -> x2174
        let (decrease_indent_pattern : t -> regexp) =
          fun (x2176 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2176) "decreaseIndentPattern")
        let (set_decrease_indent_pattern : t -> regexp -> unit) =
          fun (x2177 : t) ->
            fun (x2178 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2177) "decreaseIndentPattern"
                (regexp_to_js x2178)
        let (increase_indent_pattern : t -> regexp) =
          fun (x2179 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2179) "increaseIndentPattern")
        let (set_increase_indent_pattern : t -> regexp -> unit) =
          fun (x2180 : t) ->
            fun (x2181 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2180) "increaseIndentPattern"
                (regexp_to_js x2181)
        let (indent_next_line_pattern : t -> regexp) =
          fun (x2182 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2182) "indentNextLinePattern")
        let (set_indent_next_line_pattern : t -> regexp -> unit) =
          fun (x2183 : t) ->
            fun (x2184 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2183) "indentNextLinePattern"
                (regexp_to_js x2184)
        let (un_indented_line_pattern : t -> regexp) =
          fun (x2185 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2185) "unIndentedLinePattern")
        let (set_un_indented_line_pattern : t -> regexp -> unit) =
          fun (x2186 : t) ->
            fun (x2187 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2186) "unIndentedLinePattern"
                (regexp_to_js x2187)
      end
    module IndentAction =
      struct
        type t = [ `Indent  | `IndentOutdent  | `Outdent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2189 : Ojs.t) ->
            let x2190 = x2189 in
            match Ojs.int_of_js x2190 with
            | 1 -> `Indent
            | 2 -> `IndentOutdent
            | 3 -> `Outdent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2188 : [ `Indent  | `IndentOutdent  | `Outdent ]) ->
            match x2188 with
            | `Indent -> Ojs.int_to_js 1
            | `IndentOutdent -> Ojs.int_to_js 2
            | `Outdent -> Ojs.int_to_js 3
      end
    module EnterAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2192 : Ojs.t) -> x2192
        and t_to_js : t -> Ojs.t = fun (x2191 : Ojs.t) -> x2191
        let (indent_action : t -> IndentAction.t) =
          fun (x2193 : t) ->
            IndentAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2193) "indentAction")
        let (set_indent_action : t -> IndentAction.t -> unit) =
          fun (x2194 : t) ->
            fun (x2195 : IndentAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2194) "indentAction"
                (IndentAction.t_to_js x2195)
        let (append_text : t -> string) =
          fun (x2196 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2196) "appendText")
        let (set_append_text : t -> string -> unit) =
          fun (x2197 : t) ->
            fun (x2198 : string) ->
              Ojs.set_prop_ascii (t_to_js x2197) "appendText"
                (Ojs.string_to_js x2198)
        let (remove_text : t -> int) =
          fun (x2199 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2199) "removeText")
        let (set_remove_text : t -> int -> unit) =
          fun (x2200 : t) ->
            fun (x2201 : int) ->
              Ojs.set_prop_ascii (t_to_js x2200) "removeText"
                (Ojs.int_to_js x2201)
      end
    module OnEnterRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2203 : Ojs.t) -> x2203
        and t_to_js : t -> Ojs.t = fun (x2202 : Ojs.t) -> x2202
        let (before_text : t -> regexp) =
          fun (x2204 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2204) "beforeText")
        let (set_before_text : t -> regexp -> unit) =
          fun (x2205 : t) ->
            fun (x2206 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2205) "beforeText"
                (regexp_to_js x2206)
        let (after_text : t -> regexp) =
          fun (x2207 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2207) "afterText")
        let (set_after_text : t -> regexp -> unit) =
          fun (x2208 : t) ->
            fun (x2209 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2208) "afterText"
                (regexp_to_js x2209)
        let (previous_line_text : t -> regexp) =
          fun (x2210 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2210) "previousLineText")
        let (set_previous_line_text : t -> regexp -> unit) =
          fun (x2211 : t) ->
            fun (x2212 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2211) "previousLineText"
                (regexp_to_js x2212)
        let (action : t -> EnterAction.t) =
          fun (x2213 : t) ->
            EnterAction.t_of_js (Ojs.get_prop_ascii (t_to_js x2213) "action")
        let (set_action : t -> EnterAction.t -> unit) =
          fun (x2214 : t) ->
            fun (x2215 : EnterAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2214) "action"
                (EnterAction.t_to_js x2215)
      end
    module AutoClosingPairs =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2217 : Ojs.t) -> x2217
        and t_to_js : t -> Ojs.t = fun (x2216 : Ojs.t) -> x2216
        let (open_ : t -> string) =
          fun (x2218 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2218) "open")
        let (set_open : t -> string -> unit) =
          fun (x2219 : t) ->
            fun (x2220 : string) ->
              Ojs.set_prop_ascii (t_to_js x2219) "open"
                (Ojs.string_to_js x2220)
        let (close : t -> string) =
          fun (x2221 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2221) "close")
        let (set_close : t -> string -> unit) =
          fun (x2222 : t) ->
            fun (x2223 : string) ->
              Ojs.set_prop_ascii (t_to_js x2222) "close"
                (Ojs.string_to_js x2223)
        let (not_in : t -> string list) =
          fun (x2224 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2224) "notIn")
        let (set_not_in : t -> string list -> unit) =
          fun (x2226 : t) ->
            fun (x2227 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2226) "notIn"
                (Ojs.list_to_js Ojs.string_to_js x2227)
      end
    module CharacterPairSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2230 : Ojs.t) -> x2230
        and t_to_js : t -> Ojs.t = fun (x2229 : Ojs.t) -> x2229
        let (auto_closing_pairs : t -> AutoClosingPairs.t list) =
          fun (x2231 : t) ->
            Ojs.list_of_js AutoClosingPairs.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2231) "autoClosingPairs")
        let (set_auto_closing_pairs : t -> AutoClosingPairs.t list -> unit) =
          fun (x2233 : t) ->
            fun (x2234 : AutoClosingPairs.t list) ->
              Ojs.set_prop_ascii (t_to_js x2233) "autoClosingPairs"
                (Ojs.list_to_js AutoClosingPairs.t_to_js x2234)
      end
    module DocComment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2237 : Ojs.t) -> x2237
        and t_to_js : t -> Ojs.t = fun (x2236 : Ojs.t) -> x2236
        let (scope : t -> string) =
          fun (x2238 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2238) "scope")
        let (set_scope : t -> string -> unit) =
          fun (x2239 : t) ->
            fun (x2240 : string) ->
              Ojs.set_prop_ascii (t_to_js x2239) "scope"
                (Ojs.string_to_js x2240)
        let (open_ : t -> string) =
          fun (x2241 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2241) "open")
        let (set_open : t -> string -> unit) =
          fun (x2242 : t) ->
            fun (x2243 : string) ->
              Ojs.set_prop_ascii (t_to_js x2242) "open"
                (Ojs.string_to_js x2243)
        let (line_start : t -> string) =
          fun (x2244 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2244) "lineStart")
        let (set_line_start : t -> string -> unit) =
          fun (x2245 : t) ->
            fun (x2246 : string) ->
              Ojs.set_prop_ascii (t_to_js x2245) "lineStart"
                (Ojs.string_to_js x2246)
        let (close : t -> string) =
          fun (x2247 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2247) "close")
        let (set_close : t -> string -> unit) =
          fun (x2248 : t) ->
            fun (x2249 : string) ->
              Ojs.set_prop_ascii (t_to_js x2248) "close"
                (Ojs.string_to_js x2249)
      end
    module ElectricCharacterSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2251 : Ojs.t) -> x2251
        and t_to_js : t -> Ojs.t = fun (x2250 : Ojs.t) -> x2250
        let (brackets : t -> any) =
          fun (x2252 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x2252) "brackets")
        let (set_brackets : t -> any -> unit) =
          fun (x2253 : t) ->
            fun (x2254 : any) ->
              Ojs.set_prop_ascii (t_to_js x2253) "brackets" (any_to_js x2254)
        let (doc_comment : t -> DocComment.t) =
          fun (x2255 : t) ->
            DocComment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2255) "docComment")
        let (set_doc_comment : t -> DocComment.t -> unit) =
          fun (x2256 : t) ->
            fun (x2257 : DocComment.t) ->
              Ojs.set_prop_ascii (t_to_js x2256) "docComment"
                (DocComment.t_to_js x2257)
      end
    module LanguageConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2259 : Ojs.t) -> x2259
        and t_to_js : t -> Ojs.t = fun (x2258 : Ojs.t) -> x2258
        let (comments : t -> CommentRule.t) =
          fun (x2260 : t) ->
            CommentRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2260) "comments")
        let (set_comments : t -> CommentRule.t -> unit) =
          fun (x2261 : t) ->
            fun (x2262 : CommentRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2261) "comments"
                (CommentRule.t_to_js x2262)
        let (brackets : t -> CharacterPair.t list) =
          fun (x2263 : t) ->
            Ojs.list_of_js CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2263) "brackets")
        let (set_brackets : t -> CharacterPair.t list -> unit) =
          fun (x2265 : t) ->
            fun (x2266 : CharacterPair.t list) ->
              Ojs.set_prop_ascii (t_to_js x2265) "brackets"
                (Ojs.list_to_js CharacterPair.t_to_js x2266)
        let (word_pattern : t -> regexp) =
          fun (x2268 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2268) "wordPattern")
        let (set_word_pattern : t -> regexp -> unit) =
          fun (x2269 : t) ->
            fun (x2270 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2269) "wordPattern"
                (regexp_to_js x2270)
        let (indentation_rules : t -> IndentationRule.t) =
          fun (x2271 : t) ->
            IndentationRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2271) "indentationRules")
        let (set_indentation_rules : t -> IndentationRule.t -> unit) =
          fun (x2272 : t) ->
            fun (x2273 : IndentationRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2272) "indentationRules"
                (IndentationRule.t_to_js x2273)
        let (on_enter_rules : t -> OnEnterRule.t list) =
          fun (x2274 : t) ->
            Ojs.list_of_js OnEnterRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2274) "onEnterRules")
        let (set_on_enter_rules : t -> OnEnterRule.t list -> unit) =
          fun (x2276 : t) ->
            fun (x2277 : OnEnterRule.t list) ->
              Ojs.set_prop_ascii (t_to_js x2276) "onEnterRules"
                (Ojs.list_to_js OnEnterRule.t_to_js x2277)
        let (electric_character_support : t -> ElectricCharacterSupport.t) =
          fun (x2279 : t) ->
            ElectricCharacterSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2279)
                 "__electricCharacterSupport")
        let (set_electric_character_support :
          t -> ElectricCharacterSupport.t -> unit) =
          fun (x2280 : t) ->
            fun (x2281 : ElectricCharacterSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2280) "__electricCharacterSupport"
                (ElectricCharacterSupport.t_to_js x2281)
        let (character_pair_support : t -> CharacterPairSupport.t) =
          fun (x2282 : t) ->
            CharacterPairSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2282) "__characterPairSupport")
        let (set_character_pair_support :
          t -> CharacterPairSupport.t -> unit) =
          fun (x2283 : t) ->
            fun (x2284 : CharacterPairSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2283) "__characterPairSupport"
                (CharacterPairSupport.t_to_js x2284)
      end
    module ConfigurationTarget =
      struct
        type t = [ `Workspace  | `WorkspaceFolder ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2286 : Ojs.t) ->
            let x2287 = x2286 in
            match Ojs.int_of_js x2287 with
            | 2 -> `Workspace
            | 3 -> `WorkspaceFolder
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2285 : [ `Workspace  | `WorkspaceFolder ]) ->
            match x2285 with
            | `Workspace -> Ojs.int_to_js 2
            | `WorkspaceFolder -> Ojs.int_to_js 3
      end
    module InspectionResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2289 : Ojs.t) -> x2289
        and t_to_js : t -> Ojs.t = fun (x2288 : Ojs.t) -> x2288
        let (key : t -> string) =
          fun (x2290 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2290) "key")
        let (set_key : t -> string -> unit) =
          fun (x2291 : t) ->
            fun (x2292 : string) ->
              Ojs.set_prop_ascii (t_to_js x2291) "key"
                (Ojs.string_to_js x2292)
        let (default : t -> 'T) =
          fun (x2293 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2293) "defaultValue")
        let (set_default : t -> 'T -> unit) =
          fun (x2294 : t) ->
            fun (x2295 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2294) "defaultValue"
                (Obj.magic x2295)
        let (global_value : t -> 'T) =
          fun (x2296 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2296) "globalValue")
        let (set_global_value : t -> 'T -> unit) =
          fun (x2297 : t) ->
            fun (x2298 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2297) "globalValue"
                (Obj.magic x2298)
        let (workspace_value : t -> 'T) =
          fun (x2299 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2299) "workspaceValue")
        let (set_workspace_value : t -> 'T -> unit) =
          fun (x2300 : t) ->
            fun (x2301 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2300) "workspaceValue"
                (Obj.magic x2301)
        let (workspace_folder_value : t -> 'T) =
          fun (x2302 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2302) "workspaceFolderValue")
        let (set_workspace_folder_value : t -> 'T -> unit) =
          fun (x2303 : t) ->
            fun (x2304 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2303) "workspaceFolderValue"
                (Obj.magic x2304)
        let (default_language_value : t -> 'T) =
          fun (x2305 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2305) "defaultLanguageValue")
        let (set_default_language_value : t -> 'T -> unit) =
          fun (x2306 : t) ->
            fun (x2307 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2306) "defaultLanguageValue"
                (Obj.magic x2307)
        let (global_language_value : t -> 'T) =
          fun (x2308 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2308) "globalLanguageValue")
        let (set_global_language_value : t -> 'T -> unit) =
          fun (x2309 : t) ->
            fun (x2310 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2309) "globalLanguageValue"
                (Obj.magic x2310)
        let (workspace_language_value : t -> 'T) =
          fun (x2311 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2311) "workspaceLanguageValue")
        let (set_workspace_language_value : t -> 'T -> unit) =
          fun (x2312 : t) ->
            fun (x2313 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2312) "workspaceLanguageValue"
                (Obj.magic x2313)
        let (workspace_folder_language_value : t -> 'T) =
          fun (x2314 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2314)
                 "workspaceFolderLanguageValue")
        let (set_workspace_folder_language_value : t -> 'T -> unit) =
          fun (x2315 : t) ->
            fun (x2316 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2315)
                "workspaceFolderLanguageValue" (Obj.magic x2316)
        let (language_ids : t -> string list) =
          fun (x2317 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2317) "languageIds")
        let (set_language_ids : t -> string list -> unit) =
          fun (x2319 : t) ->
            fun (x2320 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2319) "languageIds"
                (Ojs.list_to_js Ojs.string_to_js x2320)
      end
    module WorkspaceConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2323 : Ojs.t) -> x2323
        and t_to_js : t -> Ojs.t = fun (x2322 : Ojs.t) -> x2322
        let (get : t -> string -> 'T or_undefined) =
          fun (x2325 : t) ->
            fun (x2324 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2325) "get" [|(Ojs.string_to_js x2324)|])
        let (get' : t -> string -> default:'T -> 'T) =
          fun (x2329 : t) ->
            fun (x2327 : string) ->
              fun ~default:(x2328 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2329) "get"
                     [|(Ojs.string_to_js x2327);(Obj.magic x2328)|])
        let (has : t -> string -> bool) =
          fun (x2331 : t) ->
            fun (x2330 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2331) "has" [|(Ojs.string_to_js x2330)|])
        let (inspect : t -> string -> InspectionResult.t or_undefined) =
          fun (x2333 : t) ->
            fun (x2332 : string) ->
              or_undefined_of_js InspectionResult.t_of_js
                (Ojs.call (t_to_js x2333) "inspect"
                   [|(Ojs.string_to_js x2332)|])
        let (update :
          t ->
            string ->
              any ->
                ?configuration_target:ConfigurationTarget.t or_boolean ->
                  ?override_in_language:bool -> unit -> unit Promise.t)
          =
          fun (x2343 : t) ->
            fun (x2335 : string) ->
              fun (x2336 : any) ->
                fun
                  ?configuration_target:(x2337 :
                                          ConfigurationTarget.t or_boolean
                                            option)
                  ->
                  fun ?override_in_language:(x2338 : bool option) ->
                    fun () ->
                      Promise.t_of_js Ojs.unit_of_js
                        (let x2344 = t_to_js x2343 in
                         Ojs.call (Ojs.get_prop_ascii x2344 "update") "apply"
                           [|x2344;((let x2339 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x2339 "push"
                                          [|(Ojs.string_to_js x2335)|]);
                                     ignore
                                       (Ojs.call x2339 "push"
                                          [|(any_to_js x2336)|]);
                                     (match x2337 with
                                      | Some x2341 ->
                                          ignore
                                            (Ojs.call x2339 "push"
                                               [|(or_boolean_to_js
                                                    ConfigurationTarget.t_to_js
                                                    x2341)|])
                                      | None -> ());
                                     (match x2338 with
                                      | Some x2340 ->
                                          ignore
                                            (Ojs.call x2339 "push"
                                               [|(Ojs.bool_to_js x2340)|])
                                      | None -> ());
                                     x2339))|])
        let (get : t -> string -> any) =
          fun (x2346 : t) ->
            fun (x2347 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2346) (Ojs.string_to_js x2347))
      end
    module LocationLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2349 : Ojs.t) -> x2349
        and t_to_js : t -> Ojs.t = fun (x2348 : Ojs.t) -> x2348
        let (origin_selection_range : t -> Range.t) =
          fun (x2350 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2350) "originSelectionRange")
        let (set_origin_selection_range : t -> Range.t -> unit) =
          fun (x2351 : t) ->
            fun (x2352 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2351) "originSelectionRange"
                (Range.t_to_js x2352)
        let (target_uri : t -> Uri.t) =
          fun (x2353 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2353) "targetUri")
        let (set_target_uri : t -> Uri.t -> unit) =
          fun (x2354 : t) ->
            fun (x2355 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2354) "targetUri"
                (Uri.t_to_js x2355)
        let (target_range : t -> Range.t) =
          fun (x2356 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2356) "targetRange")
        let (set_target_range : t -> Range.t -> unit) =
          fun (x2357 : t) ->
            fun (x2358 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2357) "targetRange"
                (Range.t_to_js x2358)
        let (target_selection_range : t -> Range.t) =
          fun (x2359 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2359) "targetSelectionRange")
        let (set_target_selection_range : t -> Range.t -> unit) =
          fun (x2360 : t) ->
            fun (x2361 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2360) "targetSelectionRange"
                (Range.t_to_js x2361)
      end
    module OutputChannel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2363 : Ojs.t) -> x2363
        and t_to_js : t -> Ojs.t = fun (x2362 : Ojs.t) -> x2362
        let (name : t -> string) =
          fun (x2364 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2364) "name")
        let (append : t -> value:string -> unit) =
          fun (x2366 : t) ->
            fun ~value:(x2365 : string) ->
              ignore
                (Ojs.call (t_to_js x2366) "append"
                   [|(Ojs.string_to_js x2365)|])
        let (append_line : t -> value:string -> unit) =
          fun (x2368 : t) ->
            fun ~value:(x2367 : string) ->
              ignore
                (Ojs.call (t_to_js x2368) "appendLine"
                   [|(Ojs.string_to_js x2367)|])
        let (clear : t -> unit) =
          fun (x2369 : t) -> ignore (Ojs.call (t_to_js x2369) "clear" [||])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2373 : t) ->
            fun ?preserve_focus:(x2370 : bool option) ->
              fun () ->
                ignore
                  (let x2374 = t_to_js x2373 in
                   Ojs.call (Ojs.get_prop_ascii x2374 "show") "apply"
                     [|x2374;((let x2371 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2370 with
                                | Some x2372 ->
                                    ignore
                                      (Ojs.call x2371 "push"
                                         [|(Ojs.bool_to_js x2372)|])
                                | None -> ());
                               x2371))|])
        let (show' :
          t -> ?column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x2380 : t) ->
            fun ?column:(x2375 : ViewColumn.t option) ->
              fun ?preserve_focus:(x2376 : bool option) ->
                fun () ->
                  ignore
                    (let x2381 = t_to_js x2380 in
                     Ojs.call (Ojs.get_prop_ascii x2381 "show") "apply"
                       [|x2381;((let x2377 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x2375 with
                                  | Some x2379 ->
                                      ignore
                                        (Ojs.call x2377 "push"
                                           [|(ViewColumn.t_to_js x2379)|])
                                  | None -> ());
                                 (match x2376 with
                                  | Some x2378 ->
                                      ignore
                                        (Ojs.call x2377 "push"
                                           [|(Ojs.bool_to_js x2378)|])
                                  | None -> ());
                                 x2377))|])
        let (hide : t -> unit) =
          fun (x2382 : t) -> ignore (Ojs.call (t_to_js x2382) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2383 : t) -> ignore (Ojs.call (t_to_js x2383) "dispose" [||])
      end
    module AccessibilityInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2385 : Ojs.t) -> x2385
        and t_to_js : t -> Ojs.t = fun (x2384 : Ojs.t) -> x2384
        let (label : t -> string) =
          fun (x2386 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2386) "label")
        let (set_label : t -> string -> unit) =
          fun (x2387 : t) ->
            fun (x2388 : string) ->
              Ojs.set_prop_ascii (t_to_js x2387) "label"
                (Ojs.string_to_js x2388)
        let (role : t -> string) =
          fun (x2389 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2389) "role")
        let (set_role : t -> string -> unit) =
          fun (x2390 : t) ->
            fun (x2391 : string) ->
              Ojs.set_prop_ascii (t_to_js x2390) "role"
                (Ojs.string_to_js x2391)
      end
    module StatusBarAlignment =
      struct
        type t = [ `Right ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2393 : Ojs.t) ->
            let x2394 = x2393 in
            match Ojs.int_of_js x2394 with | 2 -> `Right | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2392 : [ `Right ]) ->
            match x2392 with | `Right -> Ojs.int_to_js 2
      end
    module StatusBarItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2396 : Ojs.t) -> x2396
        and t_to_js : t -> Ojs.t = fun (x2395 : Ojs.t) -> x2395
        let (alignment : t -> StatusBarAlignment.t) =
          fun (x2397 : t) ->
            StatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2397) "alignment")
        let (priority : t -> int) =
          fun (x2398 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2398) "priority")
        let (text : t -> string) =
          fun (x2399 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2399) "text")
        let (set_text : t -> string -> unit) =
          fun (x2400 : t) ->
            fun (x2401 : string) ->
              Ojs.set_prop_ascii (t_to_js x2400) "text"
                (Ojs.string_to_js x2401)
        let (tooltip : t -> string or_undefined) =
          fun (x2402 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2402) "tooltip")
        let (set_tooltip : t -> string or_undefined -> unit) =
          fun (x2404 : t) ->
            fun (x2405 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2404) "tooltip"
                (or_undefined_to_js Ojs.string_to_js x2405)
        let (color : t -> ThemeColor.t or_string or_undefined) =
          fun (x2407 : t) ->
            or_undefined_of_js
              (fun (x2408 : Ojs.t) ->
                 or_string_of_js ThemeColor.t_of_js x2408)
              (Ojs.get_prop_ascii (t_to_js x2407) "color")
        let (set_color : t -> ThemeColor.t or_string or_undefined -> unit) =
          fun (x2410 : t) ->
            fun (x2411 : ThemeColor.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2410) "color"
                (or_undefined_to_js
                   (fun (x2412 : ThemeColor.t or_string) ->
                      or_string_to_js ThemeColor.t_to_js x2412) x2411)
        let (background_color : t -> ThemeColor.t or_undefined) =
          fun (x2414 : t) ->
            or_undefined_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2414) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_undefined -> unit) =
          fun (x2416 : t) ->
            fun (x2417 : ThemeColor.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2416) "backgroundColor"
                (or_undefined_to_js ThemeColor.t_to_js x2417)
        let (command : t -> Command.t or_string or_undefined) =
          fun (x2419 : t) ->
            or_undefined_of_js
              (fun (x2420 : Ojs.t) -> or_string_of_js Command.t_of_js x2420)
              (Ojs.get_prop_ascii (t_to_js x2419) "command")
        let (set_command : t -> Command.t or_string or_undefined -> unit) =
          fun (x2422 : t) ->
            fun (x2423 : Command.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2422) "command"
                (or_undefined_to_js
                   (fun (x2424 : Command.t or_string) ->
                      or_string_to_js Command.t_to_js x2424) x2423)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x2426 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2426) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x2427 : t) ->
            fun (x2428 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x2427) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x2428)
        let (show : t -> unit) =
          fun (x2429 : t) -> ignore (Ojs.call (t_to_js x2429) "show" [||])
        let (hide : t -> unit) =
          fun (x2430 : t) -> ignore (Ojs.call (t_to_js x2430) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2431 : t) -> ignore (Ojs.call (t_to_js x2431) "dispose" [||])
      end
    module Progress =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2433 : Ojs.t) -> x2433
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2432 : Ojs.t) -> x2432
        let (report : 'T t -> value:'T -> unit) =
          fun (x2435 : 'T t) ->
            fun ~value:(x2434 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x2435) "report"
                   [|(Obj.magic x2434)|])
      end
    module TerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2438 : Ojs.t) -> x2438
        and t_to_js : t -> Ojs.t = fun (x2437 : Ojs.t) -> x2437
        let (name : t -> string) =
          fun (x2439 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2439) "name")
        let (set_name : t -> string -> unit) =
          fun (x2440 : t) ->
            fun (x2441 : string) ->
              Ojs.set_prop_ascii (t_to_js x2440) "name"
                (Ojs.string_to_js x2441)
        let (shell_path : t -> string) =
          fun (x2442 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2442) "shellPath")
        let (set_shell_path : t -> string -> unit) =
          fun (x2443 : t) ->
            fun (x2444 : string) ->
              Ojs.set_prop_ascii (t_to_js x2443) "shellPath"
                (Ojs.string_to_js x2444)
        let (shell_args : t -> string list or_string) =
          fun (x2445 : t) ->
            or_string_of_js
              (fun (x2446 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x2446)
              (Ojs.get_prop_ascii (t_to_js x2445) "shellArgs")
        let (set_shell_args : t -> string list or_string -> unit) =
          fun (x2448 : t) ->
            fun (x2449 : string list or_string) ->
              Ojs.set_prop_ascii (t_to_js x2448) "shellArgs"
                (or_string_to_js
                   (fun (x2450 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x2450) x2449)
        let (cwd : t -> Uri.t or_string) =
          fun (x2452 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2452) "cwd")
        let (set_cwd : t -> Uri.t or_string -> unit) =
          fun (x2454 : t) ->
            fun (x2455 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2454) "cwd"
                (or_string_to_js Uri.t_to_js x2455)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2458 : Ojs.t) -> x2458
            and t_to_js : t -> Ojs.t = fun (x2457 : Ojs.t) -> x2457
            let (get : t -> string -> string or_null_or_undefined) =
              fun (x2459 : t) ->
                fun (x2460 : string) ->
                  or_null_or_undefined_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2459) (Ojs.string_to_js x2460))
            let (set : t -> string -> string or_null_or_undefined -> unit) =
              fun (x2462 : t) ->
                fun (x2463 : string) ->
                  fun (x2464 : string or_null_or_undefined) ->
                    Ojs.set_prop (t_to_js x2462) (Ojs.string_to_js x2463)
                      (or_null_or_undefined_to_js Ojs.string_to_js x2464)
          end
        let (env : t -> Env.t) =
          fun (x2466 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2466) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2467 : t) ->
            fun (x2468 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2467) "env" (Env.t_to_js x2468)
        let (strict_env : t -> bool) =
          fun (x2469 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2469) "strictEnv")
        let (set_strict_env : t -> bool -> unit) =
          fun (x2470 : t) ->
            fun (x2471 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2470) "strictEnv"
                (Ojs.bool_to_js x2471)
        let (hide_from_user : t -> bool) =
          fun (x2472 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2472) "hideFromUser")
        let (set_hide_from_user : t -> bool -> unit) =
          fun (x2473 : t) ->
            fun (x2474 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2473) "hideFromUser"
                (Ojs.bool_to_js x2474)
      end
    module TerminalDimensions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2476 : Ojs.t) -> x2476
        and t_to_js : t -> Ojs.t = fun (x2475 : Ojs.t) -> x2475
        let (columns : t -> int) =
          fun (x2477 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2477) "columns")
        let (rows : t -> int) =
          fun (x2478 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2478) "rows")
      end
    module TerminalExitStatus =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2480 : Ojs.t) -> x2480
        and t_to_js : t -> Ojs.t = fun (x2479 : Ojs.t) -> x2479
        let (code : t -> int or_undefined) =
          fun (x2481 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x2481) "code")
      end
    module Pseudoterminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2484 : Ojs.t) -> x2484
        and t_to_js : t -> Ojs.t = fun (x2483 : Ojs.t) -> x2483
        let (on_did_write : t -> string Event.t) =
          fun (x2485 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2485) "onDidWrite")
        let (set_on_did_write : t -> string Event.t -> unit) =
          fun (x2487 : t) ->
            fun (x2488 : string Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2487) "onDidWrite"
                (Event.t_to_js Ojs.string_to_js x2488)
        let (on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t) =
          fun (x2490 : t) ->
            Event.t_of_js
              (fun (x2491 : Ojs.t) ->
                 or_undefined_of_js TerminalDimensions.t_of_js x2491)
              (Ojs.get_prop_ascii (t_to_js x2490) "onDidOverrideDimensions")
        let (set_on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t -> unit) =
          fun (x2493 : t) ->
            fun (x2494 : TerminalDimensions.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2493) "onDidOverrideDimensions"
                (Event.t_to_js
                   (fun (x2495 : TerminalDimensions.t or_undefined) ->
                      or_undefined_to_js TerminalDimensions.t_to_js x2495)
                   x2494)
        let (on_did_close : t -> unit or_number Event.t) =
          fun (x2497 : t) ->
            Event.t_of_js
              (fun (x2498 : Ojs.t) -> or_number_of_js Ojs.unit_of_js x2498)
              (Ojs.get_prop_ascii (t_to_js x2497) "onDidClose")
        let (set_on_did_close : t -> unit or_number Event.t -> unit) =
          fun (x2500 : t) ->
            fun (x2501 : unit or_number Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2500) "onDidClose"
                (Event.t_to_js
                   (fun (x2502 : unit or_number) ->
                      or_number_to_js Ojs.unit_to_js x2502) x2501)
        let (open_ :
          t -> initial_dimensions:TerminalDimensions.t or_undefined -> unit)
          =
          fun (x2506 : t) ->
            fun
              ~initial_dimensions:(x2504 : TerminalDimensions.t or_undefined)
              ->
              ignore
                (Ojs.call (t_to_js x2506) "open"
                   [|(or_undefined_to_js TerminalDimensions.t_to_js x2504)|])
        let (close : t -> unit) =
          fun (x2507 : t) -> ignore (Ojs.call (t_to_js x2507) "close" [||])
        let (handle_input : t -> data:string -> unit) =
          fun (x2509 : t) ->
            fun ~data:(x2508 : string) ->
              ignore
                (Ojs.call (t_to_js x2509) "handleInput"
                   [|(Ojs.string_to_js x2508)|])
        let (set_dimensions : t -> dimensions:TerminalDimensions.t -> unit) =
          fun (x2511 : t) ->
            fun ~dimensions:(x2510 : TerminalDimensions.t) ->
              ignore
                (Ojs.call (t_to_js x2511) "setDimensions"
                   [|(TerminalDimensions.t_to_js x2510)|])
      end
    module ExtensionTerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2513 : Ojs.t) -> x2513
        and t_to_js : t -> Ojs.t = fun (x2512 : Ojs.t) -> x2512
        let (name : t -> string) =
          fun (x2514 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2514) "name")
        let (set_name : t -> string -> unit) =
          fun (x2515 : t) ->
            fun (x2516 : string) ->
              Ojs.set_prop_ascii (t_to_js x2515) "name"
                (Ojs.string_to_js x2516)
        let (pty : t -> Pseudoterminal.t) =
          fun (x2517 : t) ->
            Pseudoterminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2517) "pty")
        let (set_pty : t -> Pseudoterminal.t -> unit) =
          fun (x2518 : t) ->
            fun (x2519 : Pseudoterminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2518) "pty"
                (Pseudoterminal.t_to_js x2519)
      end
    module Terminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2521 : Ojs.t) -> x2521
        and t_to_js : t -> Ojs.t = fun (x2520 : Ojs.t) -> x2520
        let (name : t -> string) =
          fun (x2522 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2522) "name")
        let (process_id : t -> int or_undefined Promise.t) =
          fun (x2523 : t) ->
            Promise.t_of_js
              (fun (x2524 : Ojs.t) -> or_undefined_of_js Ojs.int_of_js x2524)
              (Ojs.get_prop_ascii (t_to_js x2523) "processId")
        let (creation_options :
          t ->
            (ExtensionTerminalOptions.t, TerminalOptions.t) union2 Readonly.t)
          =
          fun (x2526 : t) ->
            Readonly.t_of_js
              (fun (x2527 : Ojs.t) ->
                 union2_of_js ExtensionTerminalOptions.t_of_js
                   TerminalOptions.t_of_js x2527)
              (Ojs.get_prop_ascii (t_to_js x2526) "creationOptions")
        let (exit_status : t -> TerminalExitStatus.t or_undefined) =
          fun (x2530 : t) ->
            or_undefined_of_js TerminalExitStatus.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2530) "exitStatus")
        let (send_text :
          t -> text:string -> ?add_new_line:bool -> unit -> unit) =
          fun (x2536 : t) ->
            fun ~text:(x2532 : string) ->
              fun ?add_new_line:(x2533 : bool option) ->
                fun () ->
                  ignore
                    (let x2537 = t_to_js x2536 in
                     Ojs.call (Ojs.get_prop_ascii x2537 "sendText") "apply"
                       [|x2537;((let x2534 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2534 "push"
                                      [|(Ojs.string_to_js x2532)|]);
                                 (match x2533 with
                                  | Some x2535 ->
                                      ignore
                                        (Ojs.call x2534 "push"
                                           [|(Ojs.bool_to_js x2535)|])
                                  | None -> ());
                                 x2534))|])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2541 : t) ->
            fun ?preserve_focus:(x2538 : bool option) ->
              fun () ->
                ignore
                  (let x2542 = t_to_js x2541 in
                   Ojs.call (Ojs.get_prop_ascii x2542 "show") "apply"
                     [|x2542;((let x2539 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2538 with
                                | Some x2540 ->
                                    ignore
                                      (Ojs.call x2539 "push"
                                         [|(Ojs.bool_to_js x2540)|])
                                | None -> ());
                               x2539))|])
        let (hide : t -> unit) =
          fun (x2543 : t) -> ignore (Ojs.call (t_to_js x2543) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2544 : t) -> ignore (Ojs.call (t_to_js x2544) "dispose" [||])
      end
    module TerminalLinkContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2546 : Ojs.t) -> x2546
        and t_to_js : t -> Ojs.t = fun (x2545 : Ojs.t) -> x2545
        let (line : t -> string) =
          fun (x2547 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2547) "line")
        let (set_line : t -> string -> unit) =
          fun (x2548 : t) ->
            fun (x2549 : string) ->
              Ojs.set_prop_ascii (t_to_js x2548) "line"
                (Ojs.string_to_js x2549)
        let (terminal : t -> Terminal.t) =
          fun (x2550 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2550) "terminal")
        let (set_terminal : t -> Terminal.t -> unit) =
          fun (x2551 : t) ->
            fun (x2552 : Terminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2551) "terminal"
                (Terminal.t_to_js x2552)
      end
    module TerminalLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2554 : Ojs.t) -> x2554
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2553 : Ojs.t) -> x2553
        let (provide_terminal_links :
          'T t ->
            context:TerminalLinkContext.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x2557 : 'T t) ->
            fun ~context:(x2555 : TerminalLinkContext.t) ->
              fun ~token:(x2556 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2559 : Ojs.t) -> Ojs.list_of_js Obj.magic x2559)
                  (Ojs.call (t_to_js Obj.magic x2557) "provideTerminalLinks"
                     [|(TerminalLinkContext.t_to_js x2555);(CancellationToken.t_to_js
                                                              x2556)|])
        let (handle_terminal_link : 'T t -> link:'T -> unit ProviderResult.t)
          =
          fun (x2562 : 'T t) ->
            fun ~link:(x2561 : 'T) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js Obj.magic x2562) "handleTerminalLink"
                   [|(Obj.magic x2561)|])
      end
    module TerminalLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2566 : Ojs.t) -> x2566
        and t_to_js : t -> Ojs.t = fun (x2565 : Ojs.t) -> x2565
        let (start_index : t -> int) =
          fun (x2567 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2567) "startIndex")
        let (set_start_index : t -> int -> unit) =
          fun (x2568 : t) ->
            fun (x2569 : int) ->
              Ojs.set_prop_ascii (t_to_js x2568) "startIndex"
                (Ojs.int_to_js x2569)
        let (length : t -> int) =
          fun (x2570 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2570) "length")
        let (set_length : t -> int -> unit) =
          fun (x2571 : t) ->
            fun (x2572 : int) ->
              Ojs.set_prop_ascii (t_to_js x2571) "length"
                (Ojs.int_to_js x2572)
        let (tooltip : t -> string) =
          fun (x2573 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2573) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2574 : t) ->
            fun (x2575 : string) ->
              Ojs.set_prop_ascii (t_to_js x2574) "tooltip"
                (Ojs.string_to_js x2575)
      end
    module FileDecoration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2577 : Ojs.t) -> x2577
        and t_to_js : t -> Ojs.t = fun (x2576 : Ojs.t) -> x2576
        let (badge : t -> string) =
          fun (x2578 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2578) "badge")
        let (set_badge : t -> string -> unit) =
          fun (x2579 : t) ->
            fun (x2580 : string) ->
              Ojs.set_prop_ascii (t_to_js x2579) "badge"
                (Ojs.string_to_js x2580)
        let (tooltip : t -> string) =
          fun (x2581 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2581) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2582 : t) ->
            fun (x2583 : string) ->
              Ojs.set_prop_ascii (t_to_js x2582) "tooltip"
                (Ojs.string_to_js x2583)
        let (color : t -> ThemeColor.t) =
          fun (x2584 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x2584) "color")
        let (set_color : t -> ThemeColor.t -> unit) =
          fun (x2585 : t) ->
            fun (x2586 : ThemeColor.t) ->
              Ojs.set_prop_ascii (t_to_js x2585) "color"
                (ThemeColor.t_to_js x2586)
        let (propagate : t -> bool) =
          fun (x2587 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2587) "propagate")
        let (set_propagate : t -> bool -> unit) =
          fun (x2588 : t) ->
            fun (x2589 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2588) "propagate"
                (Ojs.bool_to_js x2589)
        let (create :
          ?badge:string ->
            ?tooltip:string -> ?color:ThemeColor.t -> unit -> t)
          =
          fun ?badge:(x2590 : string option) ->
            fun ?tooltip:(x2591 : string option) ->
              fun ?color:(x2592 : ThemeColor.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FileDecoration")
                       (let x2593 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x2590 with
                         | Some x2596 ->
                             ignore
                               (Ojs.call x2593 "push"
                                  [|(Ojs.string_to_js x2596)|])
                         | None -> ());
                        (match x2591 with
                         | Some x2595 ->
                             ignore
                               (Ojs.call x2593 "push"
                                  [|(Ojs.string_to_js x2595)|])
                         | None -> ());
                        (match x2592 with
                         | Some x2594 ->
                             ignore
                               (Ojs.call x2593 "push"
                                  [|(ThemeColor.t_to_js x2594)|])
                         | None -> ());
                        x2593))
      end
    module FileDecorationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2598 : Ojs.t) -> x2598
        and t_to_js : t -> Ojs.t = fun (x2597 : Ojs.t) -> x2597
        let (on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t) =
          fun (x2599 : t) ->
            Event.t_of_js
              (fun (x2600 : Ojs.t) ->
                 or_undefined_of_js
                   (fun (x2601 : Ojs.t) ->
                      or_array_of_js Uri.t_of_js Uri.t_of_js x2601) x2600)
              (Ojs.get_prop_ascii (t_to_js x2599)
                 "onDidChangeFileDecorations")
        let (set_on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t -> unit) =
          fun (x2604 : t) ->
            fun (x2605 : (Uri.t, Uri.t) or_array or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2604) "onDidChangeFileDecorations"
                (Event.t_to_js
                   (fun (x2606 : (Uri.t, Uri.t) or_array or_undefined) ->
                      or_undefined_to_js
                        (fun (x2607 : (Uri.t, Uri.t) or_array) ->
                           or_array_to_js Uri.t_to_js Uri.t_to_js x2607)
                        x2606) x2605)
        let (provide_file_decoration :
          t ->
            uri:Uri.t ->
              token:CancellationToken.t -> FileDecoration.t ProviderResult.t)
          =
          fun (x2612 : t) ->
            fun ~uri:(x2610 : Uri.t) ->
              fun ~token:(x2611 : CancellationToken.t) ->
                ProviderResult.t_of_js FileDecoration.t_of_js
                  (Ojs.call (t_to_js x2612) "provideFileDecoration"
                     [|(Uri.t_to_js x2610);(CancellationToken.t_to_js x2611)|])
      end
    module ExtensionKind =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2615 : Ojs.t) ->
            let x2616 = x2615 in
            match Ojs.int_of_js x2616 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2614 : [ `Workspace ]) ->
            match x2614 with | `Workspace -> Ojs.int_to_js 2
      end
    module Extension =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2618 : Ojs.t) -> x2618
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2617 : Ojs.t) -> x2617
        let (id : 'T t -> string) =
          fun (x2619 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2619) "id")
        let (extension_uri : 'T t -> Uri.t) =
          fun (x2621 : 'T t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2621) "extensionUri")
        let (extension_path : 'T t -> string) =
          fun (x2623 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2623) "extensionPath")
        let (is_active : 'T t -> bool) =
          fun (x2625 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2625) "isActive")
        let (package_json : 'T t -> any) =
          fun (x2627 : 'T t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2627) "packageJSON")
        let (extension_kind : 'T t -> ExtensionKind.t) =
          fun (x2629 : 'T t) ->
            ExtensionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2629) "extensionKind")
        let (set_extension_kind : 'T t -> ExtensionKind.t -> unit) =
          fun (x2631 : 'T t) ->
            fun (x2632 : ExtensionKind.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x2631) "extensionKind"
                (ExtensionKind.t_to_js x2632)
        let (exports : 'T t -> 'T) =
          fun (x2634 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2634) "exports")
        let (activate : 'T t -> 'T Promise.t) =
          fun (x2636 : 'T t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call (t_to_js Obj.magic x2636) "activate" [||])
      end
    module ExtensionMode =
      struct
        type t = [ `Development  | `Test ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2640 : Ojs.t) ->
            let x2641 = x2640 in
            match Ojs.int_of_js x2641 with
            | 2 -> `Development
            | 3 -> `Test
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2639 : [ `Development  | `Test ]) ->
            match x2639 with
            | `Development -> Ojs.int_to_js 2
            | `Test -> Ojs.int_to_js 3
      end
    module Memento =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2643 : Ojs.t) -> x2643
        and t_to_js : t -> Ojs.t = fun (x2642 : Ojs.t) -> x2642
        let (get : t -> key:string -> 'T or_undefined) =
          fun (x2645 : t) ->
            fun ~key:(x2644 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2645) "get" [|(Ojs.string_to_js x2644)|])
        let (get' : t -> key:string -> default:'T -> 'T) =
          fun (x2649 : t) ->
            fun ~key:(x2647 : string) ->
              fun ~default:(x2648 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2649) "get"
                     [|(Ojs.string_to_js x2647);(Obj.magic x2648)|])
        let (update : t -> key:string -> value:any -> unit Promise.t) =
          fun (x2652 : t) ->
            fun ~key:(x2650 : string) ->
              fun ~value:(x2651 : any) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2652) "update"
                     [|(Ojs.string_to_js x2650);(any_to_js x2651)|])
      end
    module SecretStorageChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2655 : Ojs.t) -> x2655
        and t_to_js : t -> Ojs.t = fun (x2654 : Ojs.t) -> x2654
        let (key : t -> string) =
          fun (x2656 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2656) "key")
      end
    module SecretStorage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2658 : Ojs.t) -> x2658
        and t_to_js : t -> Ojs.t = fun (x2657 : Ojs.t) -> x2657
        let (get : t -> key:string -> string or_undefined Promise.t) =
          fun (x2660 : t) ->
            fun ~key:(x2659 : string) ->
              Promise.t_of_js
                (fun (x2661 : Ojs.t) ->
                   or_undefined_of_js Ojs.string_of_js x2661)
                (Ojs.call (t_to_js x2660) "get" [|(Ojs.string_to_js x2659)|])
        let (store : t -> key:string -> value:string -> unit Promise.t) =
          fun (x2665 : t) ->
            fun ~key:(x2663 : string) ->
              fun ~value:(x2664 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2665) "store"
                     [|(Ojs.string_to_js x2663);(Ojs.string_to_js x2664)|])
        let (delete : t -> key:string -> unit Promise.t) =
          fun (x2668 : t) ->
            fun ~key:(x2667 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x2668) "delete"
                   [|(Ojs.string_to_js x2667)|])
        let (on_did_change : t -> SecretStorageChangeEvent.t Event.t) =
          fun (x2670 : t) ->
            Event.t_of_js SecretStorageChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2670) "onDidChange")
        let (set_on_did_change :
          t -> SecretStorageChangeEvent.t Event.t -> unit) =
          fun (x2672 : t) ->
            fun (x2673 : SecretStorageChangeEvent.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2672) "onDidChange"
                (Event.t_to_js SecretStorageChangeEvent.t_to_js x2673)
      end
    module EnvironmentVariableMutatorType =
      struct
        type t = [ `Append  | `Prepend ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2676 : Ojs.t) ->
            let x2677 = x2676 in
            match Ojs.int_of_js x2677 with
            | 2 -> `Append
            | 3 -> `Prepend
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2675 : [ `Append  | `Prepend ]) ->
            match x2675 with
            | `Append -> Ojs.int_to_js 2
            | `Prepend -> Ojs.int_to_js 3
      end
    module EnvironmentVariableMutator =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2679 : Ojs.t) -> x2679
        and t_to_js : t -> Ojs.t = fun (x2678 : Ojs.t) -> x2678
        let (type_ : t -> EnvironmentVariableMutatorType.t) =
          fun (x2680 : t) ->
            EnvironmentVariableMutatorType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2680) "type")
        let (value : t -> string) =
          fun (x2681 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2681) "value")
      end
    module EnvironmentVariableCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2683 : Ojs.t) -> x2683
        and t_to_js : t -> Ojs.t = fun (x2682 : Ojs.t) -> x2682
        let (persistent : t -> bool) =
          fun (x2684 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2684) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x2685 : t) ->
            fun (x2686 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2685) "persistent"
                (Ojs.bool_to_js x2686)
        let (replace : t -> variable:string -> value:string -> unit) =
          fun (x2689 : t) ->
            fun ~variable:(x2687 : string) ->
              fun ~value:(x2688 : string) ->
                ignore
                  (Ojs.call (t_to_js x2689) "replace"
                     [|(Ojs.string_to_js x2687);(Ojs.string_to_js x2688)|])
        let (append : t -> variable:string -> value:string -> unit) =
          fun (x2692 : t) ->
            fun ~variable:(x2690 : string) ->
              fun ~value:(x2691 : string) ->
                ignore
                  (Ojs.call (t_to_js x2692) "append"
                     [|(Ojs.string_to_js x2690);(Ojs.string_to_js x2691)|])
        let (prepend : t -> variable:string -> value:string -> unit) =
          fun (x2695 : t) ->
            fun ~variable:(x2693 : string) ->
              fun ~value:(x2694 : string) ->
                ignore
                  (Ojs.call (t_to_js x2695) "prepend"
                     [|(Ojs.string_to_js x2693);(Ojs.string_to_js x2694)|])
        let (get :
          t -> variable:string -> EnvironmentVariableMutator.t or_undefined)
          =
          fun (x2697 : t) ->
            fun ~variable:(x2696 : string) ->
              or_undefined_of_js EnvironmentVariableMutator.t_of_js
                (Ojs.call (t_to_js x2697) "get" [|(Ojs.string_to_js x2696)|])
        let (for_each :
          t ->
            callback:(variable:string ->
                        mutator:EnvironmentVariableMutator.t ->
                          collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x2706 : t) ->
            fun
              ~callback:(x2699 :
                          variable:string ->
                            mutator:EnvironmentVariableMutator.t ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x2700 : any option) ->
                fun () ->
                  ignore
                    (let x2707 = t_to_js x2706 in
                     Ojs.call (Ojs.get_prop_ascii x2707 "forEach") "apply"
                       [|x2707;((let x2701 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2701 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x2703 : Ojs.t) ->
                                              fun (x2704 : Ojs.t) ->
                                                fun (x2705 : Ojs.t) ->
                                                  any_to_js
                                                    (x2699
                                                       ~variable:(Ojs.string_of_js
                                                                    x2703)
                                                       ~mutator:(EnvironmentVariableMutator.t_of_js
                                                                   x2704)
                                                       ~collection:(t_of_js
                                                                    x2705))))|]);
                                 (match x2700 with
                                  | Some x2702 ->
                                      ignore
                                        (Ojs.call x2701 "push"
                                           [|(any_to_js x2702)|])
                                  | None -> ());
                                 x2701))|])
        let (delete : t -> variable:string -> unit) =
          fun (x2709 : t) ->
            fun ~variable:(x2708 : string) ->
              ignore
                (Ojs.call (t_to_js x2709) "delete"
                   [|(Ojs.string_to_js x2708)|])
        let (clear : t -> unit) =
          fun (x2710 : t) -> ignore (Ojs.call (t_to_js x2710) "clear" [||])
      end
    module ExtensionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2712 : Ojs.t) -> x2712
        and t_to_js : t -> Ojs.t = fun (x2711 : Ojs.t) -> x2711
        module Subscription =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2714 : Ojs.t) -> x2714
            and t_to_js : t -> Ojs.t = fun (x2713 : Ojs.t) -> x2713
            let (dispose : t -> any) =
              fun (x2715 : t) ->
                any_of_js (Ojs.call (t_to_js x2715) "dispose" [||])
          end
        module GlobalState =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2717 : Ojs.t) -> x2717
            and t_to_js : t -> Ojs.t = fun (x2716 : Ojs.t) -> x2716
            let (set_keys_for_sync : t -> keys:string list -> unit) =
              fun (x2720 : t) ->
                fun ~keys:(x2718 : string list) ->
                  ignore
                    (Ojs.call (t_to_js x2720) "setKeysForSync"
                       [|(Ojs.list_to_js Ojs.string_to_js x2718)|])
          end
        let (subscriptions : t -> Subscription.t list) =
          fun (x2721 : t) ->
            Ojs.list_of_js Subscription.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2721) "subscriptions")
        let (workspace_state : t -> Memento.t) =
          fun (x2723 : t) ->
            Memento.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2723) "workspaceState")
        let (global_state : t -> (Memento.t, GlobalState.t) intersection2) =
          fun (x2724 : t) ->
            intersection2_of_js Memento.t_of_js GlobalState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2724) "globalState")
        let (secrets : t -> SecretStorage.t) =
          fun (x2727 : t) ->
            SecretStorage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2727) "secrets")
        let (extension_uri : t -> Uri.t) =
          fun (x2728 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2728) "extensionUri")
        let (extension_path : t -> string) =
          fun (x2729 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2729) "extensionPath")
        let (environment_variable_collection :
          t -> EnvironmentVariableCollection.t) =
          fun (x2730 : t) ->
            EnvironmentVariableCollection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2730)
                 "environmentVariableCollection")
        let (as_absolute_path : t -> relative_path:string -> string) =
          fun (x2732 : t) ->
            fun ~relative_path:(x2731 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x2732) "asAbsolutePath"
                   [|(Ojs.string_to_js x2731)|])
        let (storage_uri : t -> Uri.t or_undefined) =
          fun (x2733 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2733) "storageUri")
        let (storage_path : t -> string or_undefined) =
          fun (x2735 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2735) "storagePath")
        let (global_storage_uri : t -> Uri.t) =
          fun (x2737 : t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2737) "globalStorageUri")
        let (global_storage_path : t -> string) =
          fun (x2738 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2738) "globalStoragePath")
        let (log_uri : t -> Uri.t) =
          fun (x2739 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2739) "logUri")
        let (log_path : t -> string) =
          fun (x2740 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2740) "logPath")
        let (extension_mode : t -> ExtensionMode.t) =
          fun (x2741 : t) ->
            ExtensionMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2741) "extensionMode")
        let (extension : t -> any Extension.t) =
          fun (x2742 : t) ->
            Extension.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x2742) "extension")
        let subscribe t disposable =
          let subscriptions = Ojs.get (t_to_js t) "subscriptions" in
          let (_ : Ojs.t) =
            Ojs.call subscriptions "push" [|(Disposable.t_to_js disposable)|] in
          ()
      end
    module ColorThemeKind =
      struct
        type t = [ `Dark  | `HighContrast ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2747 : Ojs.t) ->
            let x2748 = x2747 in
            match Ojs.int_of_js x2748 with
            | 2 -> `Dark
            | 3 -> `HighContrast
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2746 : [ `Dark  | `HighContrast ]) ->
            match x2746 with
            | `Dark -> Ojs.int_to_js 2
            | `HighContrast -> Ojs.int_to_js 3
      end
    module ColorTheme =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2750 : Ojs.t) -> x2750
        and t_to_js : t -> Ojs.t = fun (x2749 : Ojs.t) -> x2749
        let (kind : t -> ColorThemeKind.t) =
          fun (x2751 : t) ->
            ColorThemeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2751) "kind")
      end
    module TaskRevealKind =
      struct
        type t = [ `Silent  | `Never ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2753 : Ojs.t) ->
            let x2754 = x2753 in
            match Ojs.int_of_js x2754 with
            | 2 -> `Silent
            | 3 -> `Never
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2752 : [ `Silent  | `Never ]) ->
            match x2752 with
            | `Silent -> Ojs.int_to_js 2
            | `Never -> Ojs.int_to_js 3
      end
    module TaskPanelKind =
      struct
        type t = [ `Dedicated  | `New ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2756 : Ojs.t) ->
            let x2757 = x2756 in
            match Ojs.int_of_js x2757 with
            | 2 -> `Dedicated
            | 3 -> `New
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2755 : [ `Dedicated  | `New ]) ->
            match x2755 with
            | `Dedicated -> Ojs.int_to_js 2
            | `New -> Ojs.int_to_js 3
      end
    module TaskPresentationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2759 : Ojs.t) -> x2759
        and t_to_js : t -> Ojs.t = fun (x2758 : Ojs.t) -> x2758
        let (reveal : t -> TaskRevealKind.t) =
          fun (x2760 : t) ->
            TaskRevealKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2760) "reveal")
        let (set_reveal : t -> TaskRevealKind.t -> unit) =
          fun (x2761 : t) ->
            fun (x2762 : TaskRevealKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2761) "reveal"
                (TaskRevealKind.t_to_js x2762)
        let (echo : t -> bool) =
          fun (x2763 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2763) "echo")
        let (set_echo : t -> bool -> unit) =
          fun (x2764 : t) ->
            fun (x2765 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2764) "echo"
                (Ojs.bool_to_js x2765)
        let (focus : t -> bool) =
          fun (x2766 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2766) "focus")
        let (set_focus : t -> bool -> unit) =
          fun (x2767 : t) ->
            fun (x2768 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2767) "focus"
                (Ojs.bool_to_js x2768)
        let (panel : t -> TaskPanelKind.t) =
          fun (x2769 : t) ->
            TaskPanelKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2769) "panel")
        let (set_panel : t -> TaskPanelKind.t -> unit) =
          fun (x2770 : t) ->
            fun (x2771 : TaskPanelKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2770) "panel"
                (TaskPanelKind.t_to_js x2771)
        let (show_reuse_message : t -> bool) =
          fun (x2772 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2772) "showReuseMessage")
        let (set_show_reuse_message : t -> bool -> unit) =
          fun (x2773 : t) ->
            fun (x2774 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2773) "showReuseMessage"
                (Ojs.bool_to_js x2774)
        let (clear : t -> bool) =
          fun (x2775 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2775) "clear")
        let (set_clear : t -> bool -> unit) =
          fun (x2776 : t) ->
            fun (x2777 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2776) "clear"
                (Ojs.bool_to_js x2777)
      end
    module TaskGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2779 : Ojs.t) -> x2779
        and t_to_js : t -> Ojs.t = fun (x2778 : Ojs.t) -> x2778
        let (clean : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Clean")
        let (set_clean : t -> unit) =
          fun (x2780 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Clean" (t_to_js x2780)
        let (build : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Build")
        let (set_build : t -> unit) =
          fun (x2781 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Build" (t_to_js x2781)
        let (rebuild : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Rebuild")
        let (set_rebuild : t -> unit) =
          fun (x2782 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Rebuild" (t_to_js x2782)
        let (test : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Test")
        let (set_test : t -> unit) =
          fun (x2783 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Test" (t_to_js x2783)
        let (create : id:string -> label:string -> t) =
          fun ~id:(x2784 : string) ->
            fun ~label:(x2785 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                   [|(Ojs.string_to_js x2784);(Ojs.string_to_js x2785)|])
      end
    module TaskDefinition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2787 : Ojs.t) -> x2787
        and t_to_js : t -> Ojs.t = fun (x2786 : Ojs.t) -> x2786
        let (type_ : t -> string) =
          fun (x2788 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2788) "type")
        let (get : t -> string -> any) =
          fun (x2789 : t) ->
            fun (x2790 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2789) (Ojs.string_to_js x2790))
        let (set : t -> string -> any -> unit) =
          fun (x2791 : t) ->
            fun (x2792 : string) ->
              fun (x2793 : any) ->
                Ojs.set_prop (t_to_js x2791) (Ojs.string_to_js x2792)
                  (any_to_js x2793)
      end
    module ProcessExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2795 : Ojs.t) -> x2795
        and t_to_js : t -> Ojs.t = fun (x2794 : Ojs.t) -> x2794
        let (cwd : t -> string) =
          fun (x2796 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2796) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2797 : t) ->
            fun (x2798 : string) ->
              Ojs.set_prop_ascii (t_to_js x2797) "cwd"
                (Ojs.string_to_js x2798)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2800 : Ojs.t) -> x2800
            and t_to_js : t -> Ojs.t = fun (x2799 : Ojs.t) -> x2799
            let (get : t -> string -> string) =
              fun (x2801 : t) ->
                fun (x2802 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2801) (Ojs.string_to_js x2802))
            let (set : t -> string -> string -> unit) =
              fun (x2803 : t) ->
                fun (x2804 : string) ->
                  fun (x2805 : string) ->
                    Ojs.set_prop (t_to_js x2803) (Ojs.string_to_js x2804)
                      (Ojs.string_to_js x2805)
          end
        let (env : t -> Env.t) =
          fun (x2806 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2806) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2807 : t) ->
            fun (x2808 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2807) "env" (Env.t_to_js x2808)
      end
    module ProcessExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2810 : Ojs.t) -> x2810
        and t_to_js : t -> Ojs.t = fun (x2809 : Ojs.t) -> x2809
        let (create :
          process:string -> ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2811 : string) ->
            fun ?options:(x2812 : ProcessExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ProcessExecution")
                     (let x2813 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2813 "push" [|(Ojs.string_to_js x2811)|]);
                      (match x2812 with
                       | Some x2814 ->
                           ignore
                             (Ojs.call x2813 "push"
                                [|(ProcessExecutionOptions.t_to_js x2814)|])
                       | None -> ());
                      x2813))
        let (create' :
          process:string ->
            args:string list ->
              ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2815 : string) ->
            fun ~args:(x2816 : string list) ->
              fun ?options:(x2817 : ProcessExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ProcessExecution")
                       (let x2818 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2818 "push" [|(Ojs.string_to_js x2815)|]);
                        ignore
                          (Ojs.call x2818 "push"
                             [|(Ojs.list_to_js Ojs.string_to_js x2816)|]);
                        (match x2817 with
                         | Some x2819 ->
                             ignore
                               (Ojs.call x2818 "push"
                                  [|(ProcessExecutionOptions.t_to_js x2819)|])
                         | None -> ());
                        x2818))
        let (process : t -> string) =
          fun (x2821 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2821) "process")
        let (set_process : t -> string -> unit) =
          fun (x2822 : t) ->
            fun (x2823 : string) ->
              Ojs.set_prop_ascii (t_to_js x2822) "process"
                (Ojs.string_to_js x2823)
        let (args : t -> string list) =
          fun (x2824 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2824) "args")
        let (set_args : t -> string list -> unit) =
          fun (x2826 : t) ->
            fun (x2827 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2826) "args"
                (Ojs.list_to_js Ojs.string_to_js x2827)
        let (options : t -> ProcessExecutionOptions.t) =
          fun (x2829 : t) ->
            ProcessExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2829) "options")
        let (set_options : t -> ProcessExecutionOptions.t -> unit) =
          fun (x2830 : t) ->
            fun (x2831 : ProcessExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2830) "options"
                (ProcessExecutionOptions.t_to_js x2831)
      end
    module ShellQuotingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2833 : Ojs.t) -> x2833
        and t_to_js : t -> Ojs.t = fun (x2832 : Ojs.t) -> x2832
        module Escape =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2835 : Ojs.t) -> x2835
            and t_to_js : t -> Ojs.t = fun (x2834 : Ojs.t) -> x2834
            let (escape_char : t -> string) =
              fun (x2836 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2836) "escapeChar")
            let (set_escape_char : t -> string -> unit) =
              fun (x2837 : t) ->
                fun (x2838 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2837) "escapeChar"
                    (Ojs.string_to_js x2838)
            let (chars_to_escape : t -> string) =
              fun (x2839 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2839) "charsToEscape")
            let (set_chars_to_escape : t -> string -> unit) =
              fun (x2840 : t) ->
                fun (x2841 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2840) "charsToEscape"
                    (Ojs.string_to_js x2841)
          end
        let (escape : t -> Escape.t or_string) =
          fun (x2842 : t) ->
            or_string_of_js Escape.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2842) "escape")
        let (set_escape : t -> Escape.t or_string -> unit) =
          fun (x2844 : t) ->
            fun (x2845 : Escape.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2844) "escape"
                (or_string_to_js Escape.t_to_js x2845)
        let (strong : t -> string) =
          fun (x2847 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2847) "strong")
        let (set_strong : t -> string -> unit) =
          fun (x2848 : t) ->
            fun (x2849 : string) ->
              Ojs.set_prop_ascii (t_to_js x2848) "strong"
                (Ojs.string_to_js x2849)
        let (weak : t -> string) =
          fun (x2850 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2850) "weak")
        let (set_weak : t -> string -> unit) =
          fun (x2851 : t) ->
            fun (x2852 : string) ->
              Ojs.set_prop_ascii (t_to_js x2851) "weak"
                (Ojs.string_to_js x2852)
      end
    module ShellExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2854 : Ojs.t) -> x2854
        and t_to_js : t -> Ojs.t = fun (x2853 : Ojs.t) -> x2853
        let (executable : t -> string) =
          fun (x2855 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2855) "executable")
        let (set_executable : t -> string -> unit) =
          fun (x2856 : t) ->
            fun (x2857 : string) ->
              Ojs.set_prop_ascii (t_to_js x2856) "executable"
                (Ojs.string_to_js x2857)
        let (shell_args : t -> string list) =
          fun (x2858 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2858) "shellArgs")
        let (set_shell_args : t -> string list -> unit) =
          fun (x2860 : t) ->
            fun (x2861 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2860) "shellArgs"
                (Ojs.list_to_js Ojs.string_to_js x2861)
        let (shell_quoting : t -> ShellQuotingOptions.t) =
          fun (x2863 : t) ->
            ShellQuotingOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2863) "shellQuoting")
        let (set_shell_quoting : t -> ShellQuotingOptions.t -> unit) =
          fun (x2864 : t) ->
            fun (x2865 : ShellQuotingOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2864) "shellQuoting"
                (ShellQuotingOptions.t_to_js x2865)
        let (cwd : t -> string) =
          fun (x2866 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2866) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2867 : t) ->
            fun (x2868 : string) ->
              Ojs.set_prop_ascii (t_to_js x2867) "cwd"
                (Ojs.string_to_js x2868)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2870 : Ojs.t) -> x2870
            and t_to_js : t -> Ojs.t = fun (x2869 : Ojs.t) -> x2869
            let (get : t -> string -> string) =
              fun (x2871 : t) ->
                fun (x2872 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2871) (Ojs.string_to_js x2872))
            let (set : t -> string -> string -> unit) =
              fun (x2873 : t) ->
                fun (x2874 : string) ->
                  fun (x2875 : string) ->
                    Ojs.set_prop (t_to_js x2873) (Ojs.string_to_js x2874)
                      (Ojs.string_to_js x2875)
          end
        let (env : t -> Env.t) =
          fun (x2876 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2876) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2877 : t) ->
            fun (x2878 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2877) "env" (Env.t_to_js x2878)
      end
    module ShellQuoting =
      struct
        type t = [ `Strong  | `Weak ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2880 : Ojs.t) ->
            let x2881 = x2880 in
            match Ojs.int_of_js x2881 with
            | 2 -> `Strong
            | 3 -> `Weak
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2879 : [ `Strong  | `Weak ]) ->
            match x2879 with
            | `Strong -> Ojs.int_to_js 2
            | `Weak -> Ojs.int_to_js 3
      end
    module ShellQuotedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2883 : Ojs.t) -> x2883
        and t_to_js : t -> Ojs.t = fun (x2882 : Ojs.t) -> x2882
        let (value : t -> string) =
          fun (x2884 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2884) "value")
        let (set_value : t -> string -> unit) =
          fun (x2885 : t) ->
            fun (x2886 : string) ->
              Ojs.set_prop_ascii (t_to_js x2885) "value"
                (Ojs.string_to_js x2886)
        let (quoting : t -> ShellQuoting.t) =
          fun (x2887 : t) ->
            ShellQuoting.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2887) "quoting")
        let (set_quoting : t -> ShellQuoting.t -> unit) =
          fun (x2888 : t) ->
            fun (x2889 : ShellQuoting.t) ->
              Ojs.set_prop_ascii (t_to_js x2888) "quoting"
                (ShellQuoting.t_to_js x2889)
      end
    module ShellExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2891 : Ojs.t) -> x2891
        and t_to_js : t -> Ojs.t = fun (x2890 : Ojs.t) -> x2890
        let (create :
          command_line:string ->
            ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command_line:(x2892 : string) ->
            fun ?options:(x2893 : ShellExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ShellExecution")
                     (let x2894 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2894 "push" [|(Ojs.string_to_js x2892)|]);
                      (match x2893 with
                       | Some x2895 ->
                           ignore
                             (Ojs.call x2894 "push"
                                [|(ShellExecutionOptions.t_to_js x2895)|])
                       | None -> ());
                      x2894))
        let (create' :
          command:ShellQuotedString.t or_string ->
            args:ShellQuotedString.t or_string list ->
              ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command:(x2896 : ShellQuotedString.t or_string) ->
            fun ~args:(x2897 : ShellQuotedString.t or_string list) ->
              fun ?options:(x2898 : ShellExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ShellExecution")
                       (let x2899 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2899 "push"
                             [|(or_string_to_js ShellQuotedString.t_to_js
                                  x2896)|]);
                        ignore
                          (Ojs.call x2899 "push"
                             [|(Ojs.list_to_js
                                  (fun
                                     (x2901 : ShellQuotedString.t or_string)
                                     ->
                                     or_string_to_js
                                       ShellQuotedString.t_to_js x2901) x2897)|]);
                        (match x2898 with
                         | Some x2900 ->
                             ignore
                               (Ojs.call x2899 "push"
                                  [|(ShellExecutionOptions.t_to_js x2900)|])
                         | None -> ());
                        x2899))
        let (command_line : t -> string or_undefined) =
          fun (x2904 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2904) "commandLine")
        let (set_command_line : t -> string or_undefined -> unit) =
          fun (x2906 : t) ->
            fun (x2907 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2906) "commandLine"
                (or_undefined_to_js Ojs.string_to_js x2907)
        let (command : t -> ShellQuotedString.t or_string) =
          fun (x2909 : t) ->
            or_string_of_js ShellQuotedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2909) "command")
        let (set_command : t -> ShellQuotedString.t or_string -> unit) =
          fun (x2911 : t) ->
            fun (x2912 : ShellQuotedString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2911) "command"
                (or_string_to_js ShellQuotedString.t_to_js x2912)
        let (args : t -> ShellQuotedString.t or_string list) =
          fun (x2914 : t) ->
            Ojs.list_of_js
              (fun (x2915 : Ojs.t) ->
                 or_string_of_js ShellQuotedString.t_of_js x2915)
              (Ojs.get_prop_ascii (t_to_js x2914) "args")
        let (set_args : t -> ShellQuotedString.t or_string list -> unit) =
          fun (x2917 : t) ->
            fun (x2918 : ShellQuotedString.t or_string list) ->
              Ojs.set_prop_ascii (t_to_js x2917) "args"
                (Ojs.list_to_js
                   (fun (x2919 : ShellQuotedString.t or_string) ->
                      or_string_to_js ShellQuotedString.t_to_js x2919) x2918)
        let (options : t -> ShellExecutionOptions.t) =
          fun (x2921 : t) ->
            ShellExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2921) "options")
        let (set_options : t -> ShellExecutionOptions.t -> unit) =
          fun (x2922 : t) ->
            fun (x2923 : ShellExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2922) "options"
                (ShellExecutionOptions.t_to_js x2923)
      end
    module CustomExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2925 : Ojs.t) -> x2925
        and t_to_js : t -> Ojs.t = fun (x2924 : Ojs.t) -> x2924
        let (create :
          callback:(resolvedDefinition:TaskDefinition.t ->
                      Pseudoterminal.t Promise.t)
            -> t)
          =
          fun
            ~callback:(x2926 :
                        resolvedDefinition:TaskDefinition.t ->
                          Pseudoterminal.t Promise.t)
            ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CustomExecution")
                 [|(Ojs.fun_to_js 1
                      (fun (x2927 : Ojs.t) ->
                         Promise.t_to_js Pseudoterminal.t_to_js
                           (x2926
                              ~resolvedDefinition:(TaskDefinition.t_of_js
                                                     x2927))))|])
      end
    module TaskScope =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2930 : Ojs.t) ->
            let x2931 = x2930 in
            match Ojs.int_of_js x2931 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2929 : [ `Workspace ]) ->
            match x2929 with | `Workspace -> Ojs.int_to_js 2
      end
    module RunOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2933 : Ojs.t) -> x2933
        and t_to_js : t -> Ojs.t = fun (x2932 : Ojs.t) -> x2932
        let (reevaluate_on_rerun : t -> bool) =
          fun (x2934 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2934) "reevaluateOnRerun")
        let (set_reevaluate_on_rerun : t -> bool -> unit) =
          fun (x2935 : t) ->
            fun (x2936 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2935) "reevaluateOnRerun"
                (Ojs.bool_to_js x2936)
      end
    module Task =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2938 : Ojs.t) -> x2938
        and t_to_js : t -> Ojs.t = fun (x2937 : Ojs.t) -> x2937
        let (create :
          task_definition:TaskDefinition.t ->
            scope:(WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum ->
              name:string ->
                source:string ->
                  ?execution:(CustomExecution.t, ProcessExecution.t,
                    ShellExecution.t) union3 ->
                    ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x2939 : TaskDefinition.t) ->
            fun
              ~scope:(x2940 :
                       (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum)
              ->
              fun ~name:(x2941 : string) ->
                fun ~source:(x2942 : string) ->
                  fun
                    ?execution:(x2943 :
                                 (CustomExecution.t, ProcessExecution.t,
                                   ShellExecution.t) union3 option)
                    ->
                    fun
                      ?problem_matchers:(x2944 :
                                          string list or_string option)
                      ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii
                                   (Ojs.get_prop_ascii Ojs.global
                                      "__LIB__VSCODE__IMPORTS") "vscode")
                                "Task")
                             (let x2945 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x2945 "push"
                                   [|(TaskDefinition.t_to_js x2939)|]);
                              ignore
                                (Ojs.call x2945 "push"
                                   [|(or_enum_to_js WorkspaceFolder.t_to_js
                                        (fun
                                           (x2954 :
                                             [ `Global  | `Workspace ])
                                           ->
                                           match x2954 with
                                           | `Global ->
                                               Ojs.string_to_js "Global"
                                           | `Workspace ->
                                               Ojs.string_to_js "Workspace")
                                        x2940)|]);
                              ignore
                                (Ojs.call x2945 "push"
                                   [|(Ojs.string_to_js x2941)|]);
                              ignore
                                (Ojs.call x2945 "push"
                                   [|(Ojs.string_to_js x2942)|]);
                              (match x2943 with
                               | Some x2949 ->
                                   ignore
                                     (Ojs.call x2945 "push"
                                        [|(union3_to_js
                                             CustomExecution.t_to_js
                                             ProcessExecution.t_to_js
                                             ShellExecution.t_to_js x2949)|])
                               | None -> ());
                              (match x2944 with
                               | Some x2946 ->
                                   ignore
                                     (Ojs.call x2945 "push"
                                        [|(or_string_to_js
                                             (fun (x2947 : string list) ->
                                                Ojs.list_to_js
                                                  Ojs.string_to_js x2947)
                                             x2946)|])
                               | None -> ());
                              x2945))
        let (create' :
          task_definition:TaskDefinition.t ->
            name:string ->
              source:string ->
                ?execution:(ProcessExecution.t, ShellExecution.t) union2 ->
                  ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x2955 : TaskDefinition.t) ->
            fun ~name:(x2956 : string) ->
              fun ~source:(x2957 : string) ->
                fun
                  ?execution:(x2958 :
                               (ProcessExecution.t, ShellExecution.t) union2
                                 option)
                  ->
                  fun
                    ?problem_matchers:(x2959 : string list or_string option)
                    ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "Task")
                           (let x2960 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x2960 "push"
                                 [|(TaskDefinition.t_to_js x2955)|]);
                            ignore
                              (Ojs.call x2960 "push"
                                 [|(Ojs.string_to_js x2956)|]);
                            ignore
                              (Ojs.call x2960 "push"
                                 [|(Ojs.string_to_js x2957)|]);
                            (match x2958 with
                             | Some x2964 ->
                                 ignore
                                   (Ojs.call x2960 "push"
                                      [|(union2_to_js
                                           ProcessExecution.t_to_js
                                           ShellExecution.t_to_js x2964)|])
                             | None -> ());
                            (match x2959 with
                             | Some x2961 ->
                                 ignore
                                   (Ojs.call x2960 "push"
                                      [|(or_string_to_js
                                           (fun (x2962 : string list) ->
                                              Ojs.list_to_js Ojs.string_to_js
                                                x2962) x2961)|])
                             | None -> ());
                            x2960))
        let (definition : t -> TaskDefinition.t) =
          fun (x2967 : t) ->
            TaskDefinition.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2967) "definition")
        let (set_definition : t -> TaskDefinition.t -> unit) =
          fun (x2968 : t) ->
            fun (x2969 : TaskDefinition.t) ->
              Ojs.set_prop_ascii (t_to_js x2968) "definition"
                (TaskDefinition.t_to_js x2969)
        let (scope :
          t -> (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum) =
          fun (x2970 : t) ->
            or_enum_of_js WorkspaceFolder.t_of_js
              (fun (x2972 : Ojs.t) ->
                 let x2973 = x2972 in
                 match Ojs.int_of_js x2973 with
                 | 1 -> `Global
                 | 2 -> `Workspace
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x2970) "scope")
        let (name : t -> string) =
          fun (x2974 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2974) "name")
        let (set_name : t -> string -> unit) =
          fun (x2975 : t) ->
            fun (x2976 : string) ->
              Ojs.set_prop_ascii (t_to_js x2975) "name"
                (Ojs.string_to_js x2976)
        let (detail : t -> string) =
          fun (x2977 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2977) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x2978 : t) ->
            fun (x2979 : string) ->
              Ojs.set_prop_ascii (t_to_js x2978) "detail"
                (Ojs.string_to_js x2979)
        let (execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3)
          =
          fun (x2980 : t) ->
            union3_of_js CustomExecution.t_of_js ProcessExecution.t_of_js
              ShellExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2980) "execution")
        let (set_execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3
              -> unit)
          =
          fun (x2984 : t) ->
            fun
              (x2985 :
                (CustomExecution.t, ProcessExecution.t, ShellExecution.t)
                  union3)
              ->
              Ojs.set_prop_ascii (t_to_js x2984) "execution"
                (union3_to_js CustomExecution.t_to_js
                   ProcessExecution.t_to_js ShellExecution.t_to_js x2985)
        let (is_background : t -> bool) =
          fun (x2989 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2989) "isBackground")
        let (set_is_background : t -> bool -> unit) =
          fun (x2990 : t) ->
            fun (x2991 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2990) "isBackground"
                (Ojs.bool_to_js x2991)
        let (source : t -> string) =
          fun (x2992 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2992) "source")
        let (set_source : t -> string -> unit) =
          fun (x2993 : t) ->
            fun (x2994 : string) ->
              Ojs.set_prop_ascii (t_to_js x2993) "source"
                (Ojs.string_to_js x2994)
        let (group : t -> TaskGroup.t) =
          fun (x2995 : t) ->
            TaskGroup.t_of_js (Ojs.get_prop_ascii (t_to_js x2995) "group")
        let (set_group : t -> TaskGroup.t -> unit) =
          fun (x2996 : t) ->
            fun (x2997 : TaskGroup.t) ->
              Ojs.set_prop_ascii (t_to_js x2996) "group"
                (TaskGroup.t_to_js x2997)
        let (presentation_options : t -> TaskPresentationOptions.t) =
          fun (x2998 : t) ->
            TaskPresentationOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2998) "presentationOptions")
        let (set_presentation_options :
          t -> TaskPresentationOptions.t -> unit) =
          fun (x2999 : t) ->
            fun (x3000 : TaskPresentationOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2999) "presentationOptions"
                (TaskPresentationOptions.t_to_js x3000)
        let (problem_matchers : t -> string list) =
          fun (x3001 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3001) "problemMatchers")
        let (set_problem_matchers : t -> string list -> unit) =
          fun (x3003 : t) ->
            fun (x3004 : string list) ->
              Ojs.set_prop_ascii (t_to_js x3003) "problemMatchers"
                (Ojs.list_to_js Ojs.string_to_js x3004)
        let (run_options : t -> RunOptions.t) =
          fun (x3006 : t) ->
            RunOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3006) "runOptions")
        let (set_run_options : t -> RunOptions.t -> unit) =
          fun (x3007 : t) ->
            fun (x3008 : RunOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3007) "runOptions"
                (RunOptions.t_to_js x3008)
      end
    module TaskProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3010 : Ojs.t) -> x3010
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3009 : Ojs.t) -> x3009
        let (provide_tasks :
          'T t -> token:CancellationToken.t -> 'T list ProviderResult.t) =
          fun (x3012 : 'T t) ->
            fun ~token:(x3011 : CancellationToken.t) ->
              ProviderResult.t_of_js
                (fun (x3014 : Ojs.t) -> Ojs.list_of_js Obj.magic x3014)
                (Ojs.call (t_to_js Obj.magic x3012) "provideTasks"
                   [|(CancellationToken.t_to_js x3011)|])
        let (resolve_task :
          'T t -> task:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x3018 : 'T t) ->
            fun ~task:(x3016 : 'T) ->
              fun ~token:(x3017 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x3018) "resolveTask"
                     [|(Obj.magic x3016);(CancellationToken.t_to_js x3017)|])
      end
    module TaskExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3022 : Ojs.t) -> x3022
        and t_to_js : t -> Ojs.t = fun (x3021 : Ojs.t) -> x3021
        let (task : t -> Task.t) =
          fun (x3023 : t) ->
            Task.t_of_js (Ojs.get_prop_ascii (t_to_js x3023) "task")
        let (set_task : t -> Task.t -> unit) =
          fun (x3024 : t) ->
            fun (x3025 : Task.t) ->
              Ojs.set_prop_ascii (t_to_js x3024) "task" (Task.t_to_js x3025)
        let (terminate : t -> unit) =
          fun (x3026 : t) ->
            ignore (Ojs.call (t_to_js x3026) "terminate" [||])
      end
    module TaskStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3028 : Ojs.t) -> x3028
        and t_to_js : t -> Ojs.t = fun (x3027 : Ojs.t) -> x3027
        let (execution : t -> TaskExecution.t) =
          fun (x3029 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3029) "execution")
      end
    module TaskEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3031 : Ojs.t) -> x3031
        and t_to_js : t -> Ojs.t = fun (x3030 : Ojs.t) -> x3030
        let (execution : t -> TaskExecution.t) =
          fun (x3032 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3032) "execution")
      end
    module TaskProcessStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3034 : Ojs.t) -> x3034
        and t_to_js : t -> Ojs.t = fun (x3033 : Ojs.t) -> x3033
        let (execution : t -> TaskExecution.t) =
          fun (x3035 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3035) "execution")
        let (process_id : t -> int) =
          fun (x3036 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3036) "processId")
      end
    module TaskProcessEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3038 : Ojs.t) -> x3038
        and t_to_js : t -> Ojs.t = fun (x3037 : Ojs.t) -> x3037
        let (execution : t -> TaskExecution.t) =
          fun (x3039 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3039) "execution")
        let (exit_code : t -> int or_undefined) =
          fun (x3040 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3040) "exitCode")
      end
    module TaskFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3043 : Ojs.t) -> x3043
        and t_to_js : t -> Ojs.t = fun (x3042 : Ojs.t) -> x3042
        let (version : t -> string) =
          fun (x3044 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3044) "version")
        let (set_version : t -> string -> unit) =
          fun (x3045 : t) ->
            fun (x3046 : string) ->
              Ojs.set_prop_ascii (t_to_js x3045) "version"
                (Ojs.string_to_js x3046)
        let (type_ : t -> string) =
          fun (x3047 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3047) "type")
        let (set_type : t -> string -> unit) =
          fun (x3048 : t) ->
            fun (x3049 : string) ->
              Ojs.set_prop_ascii (t_to_js x3048) "type"
                (Ojs.string_to_js x3049)
      end
    module Tasks =
      struct
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x3050 : string) ->
            fun ~provider:(x3051 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x3050);(TaskProvider.t_to_js
                                                 Task.t_to_js x3051)|])
        let (fetch_tasks :
          ?filter:TaskFilter.t -> unit -> Task.t list Promise.t) =
          fun ?filter:(x3053 : TaskFilter.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3057 : Ojs.t) -> Ojs.list_of_js Task.t_of_js x3057)
                (let x3056 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "tasks" in
                 Ojs.call (Ojs.get_prop_ascii x3056 "fetchTasks") "apply"
                   [|x3056;((let x3054 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3053 with
                              | Some x3055 ->
                                  ignore
                                    (Ojs.call x3054 "push"
                                       [|(TaskFilter.t_to_js x3055)|])
                              | None -> ());
                             x3054))|])
        let (execute_task : task:Task.t -> TaskExecution.t Promise.t) =
          fun ~task:(x3059 : Task.t) ->
            Promise.t_of_js TaskExecution.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                 "executeTask" [|(Task.t_to_js x3059)|])
        let (task_executions : TaskExecution.t list) =
          Ojs.list_of_js TaskExecution.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "taskExecutions")
        let (on_did_start_task : TaskStartEvent.t Event.t) =
          Event.t_of_js TaskStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTask")
        let (on_did_end_task : TaskEndEvent.t Event.t) =
          Event.t_of_js TaskEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTask")
        let (on_did_start_task_process : TaskProcessStartEvent.t Event.t) =
          Event.t_of_js TaskProcessStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTaskProcess")
        let (on_did_end_task_process : TaskProcessEndEvent.t Event.t) =
          Event.t_of_js TaskProcessEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTaskProcess")
      end
    module FileType =
      struct
        type t = [ `File  | `Directory  | `SymbolicLink ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3067 : Ojs.t) ->
            let x3068 = x3067 in
            match Ojs.int_of_js x3068 with
            | 1 -> `File
            | 2 -> `Directory
            | 64 -> `SymbolicLink
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3066 : [ `File  | `Directory  | `SymbolicLink ]) ->
            match x3066 with
            | `File -> Ojs.int_to_js 1
            | `Directory -> Ojs.int_to_js 2
            | `SymbolicLink -> Ojs.int_to_js 64
      end
    module FileStat =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3070 : Ojs.t) -> x3070
        and t_to_js : t -> Ojs.t = fun (x3069 : Ojs.t) -> x3069
        let (type_ : t -> FileType.t) =
          fun (x3071 : t) ->
            FileType.t_of_js (Ojs.get_prop_ascii (t_to_js x3071) "type")
        let (set_type : t -> FileType.t -> unit) =
          fun (x3072 : t) ->
            fun (x3073 : FileType.t) ->
              Ojs.set_prop_ascii (t_to_js x3072) "type"
                (FileType.t_to_js x3073)
        let (ctime : t -> int) =
          fun (x3074 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3074) "ctime")
        let (set_ctime : t -> int -> unit) =
          fun (x3075 : t) ->
            fun (x3076 : int) ->
              Ojs.set_prop_ascii (t_to_js x3075) "ctime"
                (Ojs.int_to_js x3076)
        let (mtime : t -> int) =
          fun (x3077 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3077) "mtime")
        let (set_mtime : t -> int -> unit) =
          fun (x3078 : t) ->
            fun (x3079 : int) ->
              Ojs.set_prop_ascii (t_to_js x3078) "mtime"
                (Ojs.int_to_js x3079)
        let (size : t -> int) =
          fun (x3080 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3080) "size")
        let (set_size : t -> int -> unit) =
          fun (x3081 : t) ->
            fun (x3082 : int) ->
              Ojs.set_prop_ascii (t_to_js x3081) "size" (Ojs.int_to_js x3082)
      end
    module FileSystemError =
      struct
        include struct include Error end
        let (file_not_found : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3083 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3087 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3087 "FileNotFound") "apply"
                   [|x3087;((let x3084 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3083 with
                              | Some x3085 ->
                                  ignore
                                    (Ojs.call x3084 "push"
                                       [|(or_string_to_js Uri.t_to_js x3085)|])
                              | None -> ());
                             x3084))|])
        let (file_exists : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3088 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3092 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3092 "FileExists") "apply"
                   [|x3092;((let x3089 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3088 with
                              | Some x3090 ->
                                  ignore
                                    (Ojs.call x3089 "push"
                                       [|(or_string_to_js Uri.t_to_js x3090)|])
                              | None -> ());
                             x3089))|])
        let (file_not_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3093 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3097 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3097 "FileNotADirectory")
                   "apply"
                   [|x3097;((let x3094 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3093 with
                              | Some x3095 ->
                                  ignore
                                    (Ojs.call x3094 "push"
                                       [|(or_string_to_js Uri.t_to_js x3095)|])
                              | None -> ());
                             x3094))|])
        let (file_is_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3098 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3102 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3102 "FileIsADirectory")
                   "apply"
                   [|x3102;((let x3099 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3098 with
                              | Some x3100 ->
                                  ignore
                                    (Ojs.call x3099 "push"
                                       [|(or_string_to_js Uri.t_to_js x3100)|])
                              | None -> ());
                             x3099))|])
        let (no_permissions : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3103 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3107 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3107 "NoPermissions") "apply"
                   [|x3107;((let x3104 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3103 with
                              | Some x3105 ->
                                  ignore
                                    (Ojs.call x3104 "push"
                                       [|(or_string_to_js Uri.t_to_js x3105)|])
                              | None -> ());
                             x3104))|])
        let (unavailable : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3108 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3112 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3112 "Unavailable") "apply"
                   [|x3112;((let x3109 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3108 with
                              | Some x3110 ->
                                  ignore
                                    (Ojs.call x3109 "push"
                                       [|(or_string_to_js Uri.t_to_js x3110)|])
                              | None -> ());
                             x3109))|])
        let (create : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3113 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "FileSystemError")
                   (let x3114 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3113 with
                     | Some x3115 ->
                         ignore
                           (Ojs.call x3114 "push"
                              [|(or_string_to_js Uri.t_to_js x3115)|])
                     | None -> ());
                    x3114))
        let (code : t -> string) =
          fun (x3117 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3117) "code")
      end
    module FileChangeType =
      struct
        type t = [ `Created  | `Deleted ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3119 : Ojs.t) ->
            let x3120 = x3119 in
            match Ojs.int_of_js x3120 with
            | 2 -> `Created
            | 3 -> `Deleted
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3118 : [ `Created  | `Deleted ]) ->
            match x3118 with
            | `Created -> Ojs.int_to_js 2
            | `Deleted -> Ojs.int_to_js 3
      end
    module FileChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3122 : Ojs.t) -> x3122
        and t_to_js : t -> Ojs.t = fun (x3121 : Ojs.t) -> x3121
        let (type_ : t -> FileChangeType.t) =
          fun (x3123 : t) ->
            FileChangeType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3123) "type")
        let (uri : t -> Uri.t) =
          fun (x3124 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3124) "uri")
      end
    module FileSystemProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3126 : Ojs.t) -> x3126
        and t_to_js : t -> Ojs.t = fun (x3125 : Ojs.t) -> x3125
        let (on_did_change_file : t -> FileChangeEvent.t list Event.t) =
          fun (x3127 : t) ->
            Event.t_of_js
              (fun (x3128 : Ojs.t) ->
                 Ojs.list_of_js FileChangeEvent.t_of_js x3128)
              (Ojs.get_prop_ascii (t_to_js x3127) "onDidChangeFile")
        module WatchOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3131 : Ojs.t) -> x3131
            and t_to_js : t -> Ojs.t = fun (x3130 : Ojs.t) -> x3130
            let (recursive : t -> bool) =
              fun (x3132 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3132) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3133 : t) ->
                fun (x3134 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3133) "recursive"
                    (Ojs.bool_to_js x3134)
            let (excludes : t -> string list) =
              fun (x3135 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3135) "excludes")
            let (set_excludes : t -> string list -> unit) =
              fun (x3137 : t) ->
                fun (x3138 : string list) ->
                  Ojs.set_prop_ascii (t_to_js x3137) "excludes"
                    (Ojs.list_to_js Ojs.string_to_js x3138)
          end
        let (watch :
          t -> uri:Uri.t -> options:WatchOptions.t -> Disposable.t) =
          fun (x3142 : t) ->
            fun ~uri:(x3140 : Uri.t) ->
              fun ~options:(x3141 : WatchOptions.t) ->
                Disposable.t_of_js
                  (Ojs.call (t_to_js x3142) "watch"
                     [|(Uri.t_to_js x3140);(WatchOptions.t_to_js x3141)|])
        let (stat :
          t -> uri:Uri.t -> (FileStat.t, FileStat.t Promise.t) union2) =
          fun (x3144 : t) ->
            fun ~uri:(x3143 : Uri.t) ->
              union2_of_js FileStat.t_of_js
                (fun (x3146 : Ojs.t) ->
                   Promise.t_of_js FileStat.t_of_js x3146)
                (Ojs.call (t_to_js x3144) "stat" [|(Uri.t_to_js x3143)|])
        let (read_directory :
          t ->
            uri:Uri.t ->
              ((string * FileType.t) list Promise.t, (string * FileType.t))
                or_array)
          =
          fun (x3149 : t) ->
            fun ~uri:(x3148 : Uri.t) ->
              or_array_of_js
                (fun (x3150 : Ojs.t) ->
                   Promise.t_of_js
                     (fun (x3151 : Ojs.t) ->
                        Ojs.list_of_js
                          (fun (x3152 : Ojs.t) ->
                             let x3153 = x3152 in
                             ((Ojs.string_of_js (Ojs.array_get x3153 0)),
                               (FileType.t_of_js (Ojs.array_get x3153 1))))
                          x3151) x3150)
                (fun (x3154 : Ojs.t) ->
                   let x3155 = x3154 in
                   ((Ojs.string_of_js (Ojs.array_get x3155 0)),
                     (FileType.t_of_js (Ojs.array_get x3155 1))))
                (Ojs.call (t_to_js x3149) "readDirectory"
                   [|(Uri.t_to_js x3148)|])
        let (create_directory :
          t -> uri:Uri.t -> (unit, unit Promise.t) union2) =
          fun (x3157 : t) ->
            fun ~uri:(x3156 : Uri.t) ->
              union2_of_js Ojs.unit_of_js
                (fun (x3159 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3159)
                (Ojs.call (t_to_js x3157) "createDirectory"
                   [|(Uri.t_to_js x3156)|])
        let (read_file :
          t -> uri:Uri.t -> (Uint8Array.t, Uint8Array.t Promise.t) union2) =
          fun (x3162 : t) ->
            fun ~uri:(x3161 : Uri.t) ->
              union2_of_js Uint8Array.t_of_js
                (fun (x3164 : Ojs.t) ->
                   Promise.t_of_js Uint8Array.t_of_js x3164)
                (Ojs.call (t_to_js x3162) "readFile" [|(Uri.t_to_js x3161)|])
        module WriteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3167 : Ojs.t) -> x3167
            and t_to_js : t -> Ojs.t = fun (x3166 : Ojs.t) -> x3166
            let (create : t -> bool) =
              fun (x3168 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3168) "create")
            let (set_create : t -> bool -> unit) =
              fun (x3169 : t) ->
                fun (x3170 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3169) "create"
                    (Ojs.bool_to_js x3170)
            let (overwrite : t -> bool) =
              fun (x3171 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3171) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3172 : t) ->
                fun (x3173 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3172) "overwrite"
                    (Ojs.bool_to_js x3173)
          end
        let (write_file :
          t ->
            uri:Uri.t ->
              content:Uint8Array.t ->
                options:WriteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3177 : t) ->
            fun ~uri:(x3174 : Uri.t) ->
              fun ~content:(x3175 : Uint8Array.t) ->
                fun ~options:(x3176 : WriteFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3179 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3179)
                    (Ojs.call (t_to_js x3177) "writeFile"
                       [|(Uri.t_to_js x3174);(Uint8Array.t_to_js x3175);(
                         WriteFileOptions.t_to_js x3176)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3182 : Ojs.t) -> x3182
            and t_to_js : t -> Ojs.t = fun (x3181 : Ojs.t) -> x3181
            let (recursive : t -> bool) =
              fun (x3183 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3183) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3184 : t) ->
                fun (x3185 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3184) "recursive"
                    (Ojs.bool_to_js x3185)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              options:DeleteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3188 : t) ->
            fun ~uri:(x3186 : Uri.t) ->
              fun ~options:(x3187 : DeleteFileOptions.t) ->
                union2_of_js Ojs.unit_of_js
                  (fun (x3190 : Ojs.t) ->
                     Promise.t_of_js Ojs.unit_of_js x3190)
                  (Ojs.call (t_to_js x3188) "delete"
                     [|(Uri.t_to_js x3186);(DeleteFileOptions.t_to_js x3187)|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3193 : Ojs.t) -> x3193
            and t_to_js : t -> Ojs.t = fun (x3192 : Ojs.t) -> x3192
            let (overwrite : t -> bool) =
              fun (x3194 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3194) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3195 : t) ->
                fun (x3196 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3195) "overwrite"
                    (Ojs.bool_to_js x3196)
          end
        let (rename :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3200 : t) ->
            fun ~old_uri:(x3197 : Uri.t) ->
              fun ~new_uri:(x3198 : Uri.t) ->
                fun ~options:(x3199 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3202 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3202)
                    (Ojs.call (t_to_js x3200) "rename"
                       [|(Uri.t_to_js x3197);(Uri.t_to_js x3198);(RenameFileOptions.t_to_js
                                                                    x3199)|])
        let (copy :
          t ->
            source:Uri.t ->
              destination:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3207 : t) ->
            fun ~source:(x3204 : Uri.t) ->
              fun ~destination:(x3205 : Uri.t) ->
                fun ~options:(x3206 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3209 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3209)
                    (Ojs.call (t_to_js x3207) "copy"
                       [|(Uri.t_to_js x3204);(Uri.t_to_js x3205);(RenameFileOptions.t_to_js
                                                                    x3206)|])
      end
    module FileSystem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3212 : Ojs.t) -> x3212
        and t_to_js : t -> Ojs.t = fun (x3211 : Ojs.t) -> x3211
        let (stat : t -> uri:Uri.t -> FileStat.t Promise.t) =
          fun (x3214 : t) ->
            fun ~uri:(x3213 : Uri.t) ->
              Promise.t_of_js FileStat.t_of_js
                (Ojs.call (t_to_js x3214) "stat" [|(Uri.t_to_js x3213)|])
        let (read_directory :
          t -> uri:Uri.t -> (string * FileType.t) list Promise.t) =
          fun (x3217 : t) ->
            fun ~uri:(x3216 : Uri.t) ->
              Promise.t_of_js
                (fun (x3218 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x3219 : Ojs.t) ->
                        let x3220 = x3219 in
                        ((Ojs.string_of_js (Ojs.array_get x3220 0)),
                          (FileType.t_of_js (Ojs.array_get x3220 1)))) x3218)
                (Ojs.call (t_to_js x3217) "readDirectory"
                   [|(Uri.t_to_js x3216)|])
        let (create_directory : t -> uri:Uri.t -> unit Promise.t) =
          fun (x3222 : t) ->
            fun ~uri:(x3221 : Uri.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3222) "createDirectory"
                   [|(Uri.t_to_js x3221)|])
        let (read_file : t -> uri:Uri.t -> Uint8Array.t Promise.t) =
          fun (x3225 : t) ->
            fun ~uri:(x3224 : Uri.t) ->
              Promise.t_of_js Uint8Array.t_of_js
                (Ojs.call (t_to_js x3225) "readFile" [|(Uri.t_to_js x3224)|])
        let (write_file :
          t -> uri:Uri.t -> content:Uint8Array.t -> unit Promise.t) =
          fun (x3229 : t) ->
            fun ~uri:(x3227 : Uri.t) ->
              fun ~content:(x3228 : Uint8Array.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x3229) "writeFile"
                     [|(Uri.t_to_js x3227);(Uint8Array.t_to_js x3228)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3232 : Ojs.t) -> x3232
            and t_to_js : t -> Ojs.t = fun (x3231 : Ojs.t) -> x3231
            let (recursive : t -> bool) =
              fun (x3233 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3233) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3234 : t) ->
                fun (x3235 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3234) "recursive"
                    (Ojs.bool_to_js x3235)
            let (use_trash : t -> bool) =
              fun (x3236 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3236) "useTrash")
            let (set_use_trash : t -> bool -> unit) =
              fun (x3237 : t) ->
                fun (x3238 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3237) "useTrash"
                    (Ojs.bool_to_js x3238)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3243 : t) ->
            fun ~uri:(x3239 : Uri.t) ->
              fun ?options:(x3240 : DeleteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x3244 = t_to_js x3243 in
                     Ojs.call (Ojs.get_prop_ascii x3244 "delete") "apply"
                       [|x3244;((let x3241 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3241 "push"
                                      [|(Uri.t_to_js x3239)|]);
                                 (match x3240 with
                                  | Some x3242 ->
                                      ignore
                                        (Ojs.call x3241 "push"
                                           [|(DeleteFileOptions.t_to_js x3242)|])
                                  | None -> ());
                                 x3241))|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3247 : Ojs.t) -> x3247
            and t_to_js : t -> Ojs.t = fun (x3246 : Ojs.t) -> x3246
            let (overwrite : t -> bool) =
              fun (x3248 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3248) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3249 : t) ->
                fun (x3250 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3249) "overwrite"
                    (Ojs.bool_to_js x3250)
          end
        let (rename :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3256 : t) ->
            fun ~source:(x3251 : Uri.t) ->
              fun ~target:(x3252 : Uri.t) ->
                fun ?options:(x3253 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3257 = t_to_js x3256 in
                       Ojs.call (Ojs.get_prop_ascii x3257 "rename") "apply"
                         [|x3257;((let x3254 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3254 "push"
                                        [|(Uri.t_to_js x3251)|]);
                                   ignore
                                     (Ojs.call x3254 "push"
                                        [|(Uri.t_to_js x3252)|]);
                                   (match x3253 with
                                    | Some x3255 ->
                                        ignore
                                          (Ojs.call x3254 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3255)|])
                                    | None -> ());
                                   x3254))|])
        let (copy :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3264 : t) ->
            fun ~source:(x3259 : Uri.t) ->
              fun ~target:(x3260 : Uri.t) ->
                fun ?options:(x3261 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3265 = t_to_js x3264 in
                       Ojs.call (Ojs.get_prop_ascii x3265 "copy") "apply"
                         [|x3265;((let x3262 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3262 "push"
                                        [|(Uri.t_to_js x3259)|]);
                                   ignore
                                     (Ojs.call x3262 "push"
                                        [|(Uri.t_to_js x3260)|]);
                                   (match x3261 with
                                    | Some x3263 ->
                                        ignore
                                          (Ojs.call x3262 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3263)|])
                                    | None -> ());
                                   x3262))|])
        let (is_writable_file_system :
          t -> scheme:string -> bool or_undefined) =
          fun (x3268 : t) ->
            fun ~scheme:(x3267 : string) ->
              or_undefined_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3268) "isWritableFileSystem"
                   [|(Ojs.string_to_js x3267)|])
      end
    module WebviewPortMapping =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3271 : Ojs.t) -> x3271
        and t_to_js : t -> Ojs.t = fun (x3270 : Ojs.t) -> x3270
        let (webview_port : t -> int) =
          fun (x3272 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3272) "webviewPort")
        let (extension_host_port : t -> int) =
          fun (x3273 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3273) "extensionHostPort")
      end
    module WebviewOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3275 : Ojs.t) -> x3275
        and t_to_js : t -> Ojs.t = fun (x3274 : Ojs.t) -> x3274
        let (enable_scripts : t -> bool) =
          fun (x3276 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3276) "enableScripts")
        let (enable_command_uris : t -> bool) =
          fun (x3277 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3277) "enableCommandUris")
        let (local_resource_roots : t -> Uri.t list) =
          fun (x3278 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3278) "localResourceRoots")
        let (port_mapping : t -> WebviewPortMapping.t list) =
          fun (x3280 : t) ->
            Ojs.list_of_js WebviewPortMapping.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3280) "portMapping")
      end
    module Webview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3283 : Ojs.t) -> x3283
        and t_to_js : t -> Ojs.t = fun (x3282 : Ojs.t) -> x3282
        let (options : t -> WebviewOptions.t) =
          fun (x3284 : t) ->
            WebviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3284) "options")
        let (set_options : t -> WebviewOptions.t -> unit) =
          fun (x3285 : t) ->
            fun (x3286 : WebviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3285) "options"
                (WebviewOptions.t_to_js x3286)
        let (html : t -> string) =
          fun (x3287 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3287) "html")
        let (set_html : t -> string -> unit) =
          fun (x3288 : t) ->
            fun (x3289 : string) ->
              Ojs.set_prop_ascii (t_to_js x3288) "html"
                (Ojs.string_to_js x3289)
        let (on_did_receive_message : t -> any Event.t) =
          fun (x3290 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x3290) "onDidReceiveMessage")
        let (post_message : t -> message:any -> bool Promise.t) =
          fun (x3293 : t) ->
            fun ~message:(x3292 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3293) "postMessage" [|(any_to_js x3292)|])
        let (as_webview_uri : t -> local_resource:Uri.t -> Uri.t) =
          fun (x3296 : t) ->
            fun ~local_resource:(x3295 : Uri.t) ->
              Uri.t_of_js
                (Ojs.call (t_to_js x3296) "asWebviewUri"
                   [|(Uri.t_to_js x3295)|])
        let (csp_source : t -> string) =
          fun (x3297 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3297) "cspSource")
      end
    module WebviewPanelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3299 : Ojs.t) -> x3299
        and t_to_js : t -> Ojs.t = fun (x3298 : Ojs.t) -> x3298
        let (enable_find_widget : t -> bool) =
          fun (x3300 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3300) "enableFindWidget")
        let (retain_context_when_hidden : t -> bool) =
          fun (x3301 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3301) "retainContextWhenHidden")
      end
    module WebviewPanel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3303 : Ojs.t) -> x3303
        and t_to_js : t -> Ojs.t = fun (x3302 : Ojs.t) -> x3302
        let (view_type : t -> string) =
          fun (x3304 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3304) "viewType")
        let (title : t -> string) =
          fun (x3305 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3305) "title")
        let (set_title : t -> string -> unit) =
          fun (x3306 : t) ->
            fun (x3307 : string) ->
              Ojs.set_prop_ascii (t_to_js x3306) "title"
                (Ojs.string_to_js x3307)
        let (icon_path : t -> (Uri.t, IconPath.t) union2) =
          fun (x3308 : t) ->
            union2_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3308) "iconPath")
        let (set_icon_path : t -> (Uri.t, IconPath.t) union2 -> unit) =
          fun (x3311 : t) ->
            fun (x3312 : (Uri.t, IconPath.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x3311) "iconPath"
                (union2_to_js Uri.t_to_js IconPath.t_to_js x3312)
        let (webview : t -> Webview.t) =
          fun (x3315 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3315) "webview")
        let (options : t -> WebviewPanelOptions.t) =
          fun (x3316 : t) ->
            WebviewPanelOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3316) "options")
        let (view_column : t -> ViewColumn.t) =
          fun (x3317 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3317) "viewColumn")
        let (active : t -> bool) =
          fun (x3318 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3318) "active")
        let (visible : t -> bool) =
          fun (x3319 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3319) "visible")
        module OnDidChangeViewStateEvent =
          struct
            type webview_panel = t
            let rec webview_panel_of_js : Ojs.t -> webview_panel =
              fun (x3321 : Ojs.t) -> t_of_js x3321
            and webview_panel_to_js : webview_panel -> Ojs.t =
              fun (x3320 : t) -> t_to_js x3320
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3323 : Ojs.t) -> x3323
            and t_to_js : t -> Ojs.t = fun (x3322 : Ojs.t) -> x3322
            let (webview_panel : t -> webview_panel) =
              fun (x3324 : t) ->
                webview_panel_of_js
                  (Ojs.get_prop_ascii (t_to_js x3324) "webviewPanel")
          end
        let (on_did_change_view_state :
          t -> OnDidChangeViewStateEvent.t Event.t) =
          fun (x3325 : t) ->
            Event.t_of_js OnDidChangeViewStateEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3325) "onDidChangeViewState")
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3327 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3327) "onDidDispose")
        let (reveal :
          t ->
            ?view_column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x3334 : t) ->
            fun ?view_column:(x3329 : ViewColumn.t option) ->
              fun ?preserve_focus:(x3330 : bool option) ->
                fun () ->
                  ignore
                    (let x3335 = t_to_js x3334 in
                     Ojs.call (Ojs.get_prop_ascii x3335 "reveal") "apply"
                       [|x3335;((let x3331 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x3329 with
                                  | Some x3333 ->
                                      ignore
                                        (Ojs.call x3331 "push"
                                           [|(ViewColumn.t_to_js x3333)|])
                                  | None -> ());
                                 (match x3330 with
                                  | Some x3332 ->
                                      ignore
                                        (Ojs.call x3331 "push"
                                           [|(Ojs.bool_to_js x3332)|])
                                  | None -> ());
                                 x3331))|])
        let (dispose : t -> any) =
          fun (x3336 : t) ->
            any_of_js (Ojs.call (t_to_js x3336) "dispose" [||])
      end
    module WebviewPanelSerializer =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3338 : Ojs.t) -> x3338
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3337 : Ojs.t) -> x3337
        let (deserialize_webview_panel :
          'T t -> webview_panel:WebviewPanel.t -> state:'T -> unit Promise.t)
          =
          fun (x3341 : 'T t) ->
            fun ~webview_panel:(x3339 : WebviewPanel.t) ->
              fun ~state:(x3340 : 'T) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3341)
                     "deserializeWebviewPanel"
                     [|(WebviewPanel.t_to_js x3339);(Obj.magic x3340)|])
      end
    module WebviewView =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3345 : Ojs.t) -> x3345
        and t_to_js : t -> Ojs.t = fun (x3344 : Ojs.t) -> x3344
        let (view_type : t -> string) =
          fun (x3346 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3346) "viewType")
        let (webview : t -> Webview.t) =
          fun (x3347 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3347) "webview")
        let (title : t -> string) =
          fun (x3348 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3348) "title")
        let (set_title : t -> string -> unit) =
          fun (x3349 : t) ->
            fun (x3350 : string) ->
              Ojs.set_prop_ascii (t_to_js x3349) "title"
                (Ojs.string_to_js x3350)
        let (description : t -> string) =
          fun (x3351 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3351) "description")
        let (set_description : t -> string -> unit) =
          fun (x3352 : t) ->
            fun (x3353 : string) ->
              Ojs.set_prop_ascii (t_to_js x3352) "description"
                (Ojs.string_to_js x3353)
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3354 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3354) "onDidDispose")
        let (visible : t -> bool) =
          fun (x3356 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3356) "visible")
        let (on_did_change_visibility : t -> unit Event.t) =
          fun (x3357 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3357) "onDidChangeVisibility")
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x3362 : t) ->
            fun ?preserve_focus:(x3359 : bool option) ->
              fun () ->
                ignore
                  (let x3363 = t_to_js x3362 in
                   Ojs.call (Ojs.get_prop_ascii x3363 "show") "apply"
                     [|x3363;((let x3360 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3359 with
                                | Some x3361 ->
                                    ignore
                                      (Ojs.call x3360 "push"
                                         [|(Ojs.bool_to_js x3361)|])
                                | None -> ());
                               x3360))|])
      end
    module WebviewViewResolveContext =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3365 : Ojs.t) -> x3365
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3364 : Ojs.t) -> x3364
        let (state : 'T t -> 'T or_undefined) =
          fun (x3366 : 'T t) ->
            or_undefined_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3366) "state")
      end
    module WebviewViewProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3370 : Ojs.t) -> x3370
        and t_to_js : t -> Ojs.t = fun (x3369 : Ojs.t) -> x3369
        let (resolve_webview_view :
          t ->
            webview_view:WebviewView.t ->
              context:unknown WebviewViewResolveContext.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3375 : t) ->
            fun ~webview_view:(x3371 : WebviewView.t) ->
              fun ~context:(x3372 : unknown WebviewViewResolveContext.t) ->
                fun ~token:(x3374 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3377 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3377)
                    (Ojs.call (t_to_js x3375) "resolveWebviewView"
                       [|(WebviewView.t_to_js x3371);(WebviewViewResolveContext.t_to_js
                                                        unknown_to_js x3372);(
                         CancellationToken.t_to_js x3374)|])
      end
    module CustomTextEditorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3380 : Ojs.t) -> x3380
        and t_to_js : t -> Ojs.t = fun (x3379 : Ojs.t) -> x3379
        let (resolve_custom_text_editor :
          t ->
            document:TextDocument.t ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3384 : t) ->
            fun ~document:(x3381 : TextDocument.t) ->
              fun ~webview_panel:(x3382 : WebviewPanel.t) ->
                fun ~token:(x3383 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3386 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3386)
                    (Ojs.call (t_to_js x3384) "resolveCustomTextEditor"
                       [|(TextDocument.t_to_js x3381);(WebviewPanel.t_to_js
                                                         x3382);(CancellationToken.t_to_js
                                                                   x3383)|])
      end
    module CustomDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3389 : Ojs.t) -> x3389
        and t_to_js : t -> Ojs.t = fun (x3388 : Ojs.t) -> x3388
        let (uri : t -> Uri.t) =
          fun (x3390 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3390) "uri")
        let (dispose : t -> unit) =
          fun (x3391 : t) -> ignore (Ojs.call (t_to_js x3391) "dispose" [||])
      end
    module CustomDocumentEditEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3393 : Ojs.t) -> x3393
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3392 : Ojs.t) -> x3392
        let (document : 'T t -> 'T) =
          fun (x3394 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3394) "document")
        let (undo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3396 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3399 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3399)
              (Ojs.call (t_to_js Obj.magic x3396) "undo" [||])
        let (redo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3401 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3404 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3404)
              (Ojs.call (t_to_js Obj.magic x3401) "redo" [||])
        let (label : 'T t -> string) =
          fun (x3406 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3406) "label")
      end
    module CustomDocumentContentChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3409 : Ojs.t) -> x3409
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3408 : Ojs.t) -> x3408
        let (document : 'T t -> 'T) =
          fun (x3410 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3410) "document")
      end
    module CustomDocumentBackup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3413 : Ojs.t) -> x3413
        and t_to_js : t -> Ojs.t = fun (x3412 : Ojs.t) -> x3412
        let (id : t -> string) =
          fun (x3414 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3414) "id")
        let (delete : t -> unit) =
          fun (x3415 : t) -> ignore (Ojs.call (t_to_js x3415) "delete" [||])
      end
    module CustomDocumentBackupContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3417 : Ojs.t) -> x3417
        and t_to_js : t -> Ojs.t = fun (x3416 : Ojs.t) -> x3416
        let (destination : t -> Uri.t) =
          fun (x3418 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3418) "destination")
      end
    module CustomDocumentOpenContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3420 : Ojs.t) -> x3420
        and t_to_js : t -> Ojs.t = fun (x3419 : Ojs.t) -> x3419
        let (backup_id : t -> string) =
          fun (x3421 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3421) "backupId")
        let (untitled_document_data : t -> Uint8Array.t) =
          fun (x3422 : t) ->
            Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3422) "untitledDocumentData")
      end
    module CustomReadonlyEditorProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3424 : Ojs.t) -> x3424
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3423 : Ojs.t) -> x3423
        let (open_custom_document :
          'T t ->
            uri:Uri.t ->
              open_context:CustomDocumentOpenContext.t ->
                token:CancellationToken.t -> ('T, 'T Promise.t) union2)
          =
          fun (x3428 : 'T t) ->
            fun ~uri:(x3425 : Uri.t) ->
              fun ~open_context:(x3426 : CustomDocumentOpenContext.t) ->
                fun ~token:(x3427 : CancellationToken.t) ->
                  union2_of_js Obj.magic
                    (fun (x3431 : Ojs.t) -> Promise.t_of_js Obj.magic x3431)
                    (Ojs.call (t_to_js Obj.magic x3428) "openCustomDocument"
                       [|(Uri.t_to_js x3425);(CustomDocumentOpenContext.t_to_js
                                                x3426);(CancellationToken.t_to_js
                                                          x3427)|])
        let (resolve_custom_editor :
          'T t ->
            document:'T ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3436 : 'T t) ->
            fun ~document:(x3433 : 'T) ->
              fun ~webview_panel:(x3434 : WebviewPanel.t) ->
                fun ~token:(x3435 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3439 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3439)
                    (Ojs.call (t_to_js Obj.magic x3436) "resolveCustomEditor"
                       [|(Obj.magic x3433);(WebviewPanel.t_to_js x3434);(
                         CancellationToken.t_to_js x3435)|])
      end
    module CustomEditorProvider =
      struct
        include struct include CustomReadonlyEditorProvider end
        let (on_did_change_custom_document :
          'T t ->
            ('T CustomDocumentContentChangeEvent.t Event.t,
              'T CustomDocumentEditEvent.t Event.t) union2)
          =
          fun (x3441 : 'T t) ->
            union2_of_js
              (fun (x3443 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3444 : Ojs.t) ->
                      CustomDocumentContentChangeEvent.t_of_js Obj.magic
                        x3444) x3443)
              (fun (x3446 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3447 : Ojs.t) ->
                      CustomDocumentEditEvent.t_of_js Obj.magic x3447) x3446)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3441)
                 "onDidChangeCustomDocument")
        let (save_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3451 : 'T t) ->
            fun ~document:(x3449 : 'T) ->
              fun ~cancellation:(x3450 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3451) "saveCustomDocument"
                     [|(Obj.magic x3449);(CancellationToken.t_to_js x3450)|])
        let (save_custom_document_as :
          'T t ->
            document:'T ->
              destination:Uri.t ->
                cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3457 : 'T t) ->
            fun ~document:(x3454 : 'T) ->
              fun ~destination:(x3455 : Uri.t) ->
                fun ~cancellation:(x3456 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js Obj.magic x3457)
                       "saveCustomDocumentAs"
                       [|(Obj.magic x3454);(Uri.t_to_js x3455);(CancellationToken.t_to_js
                                                                  x3456)|])
        let (revert_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3462 : 'T t) ->
            fun ~document:(x3460 : 'T) ->
              fun ~cancellation:(x3461 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3462) "revertCustomDocument"
                     [|(Obj.magic x3460);(CancellationToken.t_to_js x3461)|])
        let (backup_custom_document :
          'T t ->
            document:'T ->
              context:CustomDocumentBackupContext.t ->
                cancellation:CancellationToken.t ->
                  CustomDocumentBackup.t Promise.t)
          =
          fun (x3468 : 'T t) ->
            fun ~document:(x3465 : 'T) ->
              fun ~context:(x3466 : CustomDocumentBackupContext.t) ->
                fun ~cancellation:(x3467 : CancellationToken.t) ->
                  Promise.t_of_js CustomDocumentBackup.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3468)
                       "backupCustomDocument"
                       [|(Obj.magic x3465);(CustomDocumentBackupContext.t_to_js
                                              x3466);(CancellationToken.t_to_js
                                                        x3467)|])
        include struct include CustomReadonlyEditorProvider end
      end
    module Clipboard =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3472 : Ojs.t) -> x3472
        and t_to_js : t -> Ojs.t = fun (x3471 : Ojs.t) -> x3471
        let (read_text : t -> string Promise.t) =
          fun (x3473 : t) ->
            Promise.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x3473) "readText" [||])
        let (write_text : t -> value:string -> unit Promise.t) =
          fun (x3476 : t) ->
            fun ~value:(x3475 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3476) "writeText"
                   [|(Ojs.string_to_js x3475)|])
      end
    module UIKind =
      struct
        type t = [ `Desktop  | `Web ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3479 : Ojs.t) ->
            let x3480 = x3479 in
            match Ojs.int_of_js x3480 with
            | 1 -> `Desktop
            | 2 -> `Web
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3478 : [ `Desktop  | `Web ]) ->
            match x3478 with
            | `Desktop -> Ojs.int_to_js 1
            | `Web -> Ojs.int_to_js 2
      end
    module Env =
      struct
        let (app_name : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appName")
        let (app_root : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appRoot")
        let (uri_scheme : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uriScheme")
        let (language : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "language")
        let (clipboard : Clipboard.t) =
          Clipboard.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "clipboard")
        let (machine_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "machineId")
        let (session_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "sessionId")
        let (is_new_app_install : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isNewAppInstall")
        let (is_telemetry_enabled : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isTelemetryEnabled")
        let (on_did_change_telemetry_enabled : bool Event.t) =
          Event.t_of_js Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "onDidChangeTelemetryEnabled")
        let (remote_name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "remoteName")
        let (shell : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "shell")
        let (ui_kind : UIKind.t) =
          UIKind.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uiKind")
        let (open_external : target:Uri.t -> bool Promise.t) =
          fun ~target:(x3483 : Uri.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "openExternal" [|(Uri.t_to_js x3483)|])
        let (as_external_uri : target:Uri.t -> Uri.t Promise.t) =
          fun ~target:(x3485 : Uri.t) ->
            Promise.t_of_js Uri.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "asExternalUri" [|(Uri.t_to_js x3485)|])
      end
    module Commands =
      struct
        let (register_command : string -> (any list -> 'a) -> Disposable.t) =
          fun (x3487 : string) ->
            fun (x3488 : any list -> 'a) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerCommand"
                   [|(Ojs.string_to_js x3487);(Ojs.fun_to_js_args
                                                 (fun (x3489 : _) ->
                                                    Obj.magic
                                                      (x3488
                                                         (Ojs.list_of_js_from
                                                            any_of_js x3489 0))))|])
        let (register_text_editor_command :
          string ->
            (textEditor:TextEditor.t ->
               edit:TextEditorEdit.t -> args:any list -> unit)
              -> Disposable.t)
          =
          fun (x3491 : string) ->
            fun
              (x3492 :
                textEditor:TextEditor.t ->
                  edit:TextEditorEdit.t -> args:any list -> unit)
              ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerTextEditorCommand"
                   [|(Ojs.string_to_js x3491);(Ojs.fun_to_js_args
                                                 (fun (x3493 : _) ->
                                                    x3492
                                                      ~textEditor:(TextEditor.t_of_js
                                                                    (Ojs.array_get
                                                                    x3493 0))
                                                      ~edit:(TextEditorEdit.t_of_js
                                                               (Ojs.array_get
                                                                  x3493 1))
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js
                                                               x3493 2)))|])
        let (execute_command :
          string -> any list -> 'T or_undefined Promise.t) =
          fun (x3495 : string) ->
            fun (x3496 : any list) ->
              Promise.t_of_js
                (fun (x3500 : Ojs.t) -> or_undefined_of_js Obj.magic x3500)
                (let x3499 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3499 "executeCommand") "apply"
                   [|x3499;((let x3497 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3497 "push"
                                  [|(Ojs.string_to_js x3495)|]);
                             List.iter
                               (fun (x3498 : any) ->
                                  ignore
                                    (Ojs.call x3497 "push"
                                       [|(any_to_js x3498)|])) x3496;
                             x3497))|])
        let (get_commands :
          ?filter_internal:bool -> unit -> string list Promise.t) =
          fun ?filter_internal:(x3502 : bool option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3506 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3506)
                (let x3505 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3505 "getCommands") "apply"
                   [|x3505;((let x3503 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3502 with
                              | Some x3504 ->
                                  ignore
                                    (Ojs.call x3503 "push"
                                       [|(Ojs.bool_to_js x3504)|])
                              | None -> ());
                             x3503))|])
      end
    module WindowState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3509 : Ojs.t) -> x3509
        and t_to_js : t -> Ojs.t = fun (x3508 : Ojs.t) -> x3508
        let (focused : t -> bool) =
          fun (x3510 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3510) "focused")
      end
    module UriHandler =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3512 : Ojs.t) -> x3512
        and t_to_js : t -> Ojs.t = fun (x3511 : Ojs.t) -> x3511
        let (handle_uri : t -> uri:Uri.t -> unit ProviderResult.t) =
          fun (x3514 : t) ->
            fun ~uri:(x3513 : Uri.t) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3514) "handleUri" [|(Uri.t_to_js x3513)|])
      end
    module QuickInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3517 : Ojs.t) -> x3517
        and t_to_js : t -> Ojs.t = fun (x3516 : Ojs.t) -> x3516
        let (title : t -> string or_undefined) =
          fun (x3518 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3518) "title")
        let (set_title : t -> string or_undefined -> unit) =
          fun (x3520 : t) ->
            fun (x3521 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3520) "title"
                (or_undefined_to_js Ojs.string_to_js x3521)
        let (step : t -> int or_undefined) =
          fun (x3523 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3523) "step")
        let (set_step : t -> int or_undefined -> unit) =
          fun (x3525 : t) ->
            fun (x3526 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3525) "step"
                (or_undefined_to_js Ojs.int_to_js x3526)
        let (total_steps : t -> int or_undefined) =
          fun (x3528 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3528) "totalSteps")
        let (set_total_steps : t -> int or_undefined -> unit) =
          fun (x3530 : t) ->
            fun (x3531 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3530) "totalSteps"
                (or_undefined_to_js Ojs.int_to_js x3531)
        let (enabled : t -> bool) =
          fun (x3533 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3533) "enabled")
        let (set_enabled : t -> bool -> unit) =
          fun (x3534 : t) ->
            fun (x3535 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3534) "enabled"
                (Ojs.bool_to_js x3535)
        let (busy : t -> bool) =
          fun (x3536 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3536) "busy")
        let (set_busy : t -> bool -> unit) =
          fun (x3537 : t) ->
            fun (x3538 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3537) "busy"
                (Ojs.bool_to_js x3538)
        let (ignore_focus_out : t -> bool) =
          fun (x3539 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3539) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x3540 : t) ->
            fun (x3541 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3540) "ignoreFocusOut"
                (Ojs.bool_to_js x3541)
        let (show : t -> unit) =
          fun (x3542 : t) -> ignore (Ojs.call (t_to_js x3542) "show" [||])
        let (hide : t -> unit) =
          fun (x3543 : t) -> ignore (Ojs.call (t_to_js x3543) "hide" [||])
        let (on_did_hide : t -> unit Event.t) =
          fun (x3544 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3544) "onDidHide")
        let (set_on_did_hide : t -> unit Event.t -> unit) =
          fun (x3546 : t) ->
            fun (x3547 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x3546) "onDidHide"
                (Event.t_to_js Ojs.unit_to_js x3547)
        let (dispose : t -> unit) =
          fun (x3549 : t) -> ignore (Ojs.call (t_to_js x3549) "dispose" [||])
      end
    module QuickInputButton =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3551 : Ojs.t) -> x3551
        and t_to_js : t -> Ojs.t = fun (x3550 : Ojs.t) -> x3550
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x3552 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3552) "iconPath")
        let (tooltip : t -> string or_undefined) =
          fun (x3556 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3556) "tooltip")
      end
    module QuickInputButtons =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3559 : Ojs.t) -> x3559
        and t_to_js : t -> Ojs.t = fun (x3558 : Ojs.t) -> x3558
        let (back : unit -> QuickInputButton.t) =
          fun () ->
            QuickInputButton.t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") "Back")
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") [||])
      end
    module QuickPick =
      struct
        include struct include QuickInput end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3561 : Ojs.t) -> x3561
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3560 : Ojs.t) -> x3560
        let (value : 'T t -> string) =
          fun (x3562 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3562) "value")
        let (set_value : 'T t -> string -> unit) =
          fun (x3564 : 'T t) ->
            fun (x3565 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3564) "value"
                (Ojs.string_to_js x3565)
        let (placeholder : 'T t -> string or_undefined) =
          fun (x3567 : 'T t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3567) "placeholder")
        let (set_placeholder : 'T t -> string or_undefined -> unit) =
          fun (x3570 : 'T t) ->
            fun (x3571 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3570) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3571)
        let (on_did_change_value : 'T t -> string Event.t) =
          fun (x3574 : 'T t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3574)
                 "onDidChangeValue")
        let (on_did_accept : 'T t -> unit Event.t) =
          fun (x3577 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3577) "onDidAccept")
        let (buttons : 'T t -> QuickInputButton.t list) =
          fun (x3580 : 'T t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3580) "buttons")
        let (set_buttons : 'T t -> QuickInputButton.t list -> unit) =
          fun (x3583 : 'T t) ->
            fun (x3584 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3583) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3584)
        let (on_did_trigger_button : 'T t -> QuickInputButton.t Event.t) =
          fun (x3587 : 'T t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3587)
                 "onDidTriggerButton")
        let (items : 'T t -> 'T list) =
          fun (x3590 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3590) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x3593 : 'T t) ->
            fun (x3594 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3593) "items"
                (Ojs.list_to_js Obj.magic x3594)
        let (can_select_many : 'T t -> bool) =
          fun (x3597 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3597) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3599 : 'T t) ->
            fun (x3600 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3599) "canSelectMany"
                (Ojs.bool_to_js x3600)
        let (match_on_description : 'T t -> bool) =
          fun (x3602 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3602)
                 "matchOnDescription")
        let (set_match_on_description : 'T t -> bool -> unit) =
          fun (x3604 : 'T t) ->
            fun (x3605 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3604)
                "matchOnDescription" (Ojs.bool_to_js x3605)
        let (match_on_detail : 'T t -> bool) =
          fun (x3607 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3607) "matchOnDetail")
        let (set_match_on_detail : 'T t -> bool -> unit) =
          fun (x3609 : 'T t) ->
            fun (x3610 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3609) "matchOnDetail"
                (Ojs.bool_to_js x3610)
        let (active_items : 'T t -> 'T list) =
          fun (x3612 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3612) "activeItems")
        let (set_active_items : 'T t -> 'T list -> unit) =
          fun (x3615 : 'T t) ->
            fun (x3616 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3615) "activeItems"
                (Ojs.list_to_js Obj.magic x3616)
        let (on_did_change_active : 'T t -> 'T list Event.t) =
          fun (x3619 : 'T t) ->
            Event.t_of_js
              (fun (x3621 : Ojs.t) -> Ojs.list_of_js Obj.magic x3621)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3619)
                 "onDidChangeActive")
        let (selected_items : 'T t -> 'T list) =
          fun (x3623 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3623) "selectedItems")
        let (set_selected_items : 'T t -> 'T list -> unit) =
          fun (x3626 : 'T t) ->
            fun (x3627 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3626) "selectedItems"
                (Ojs.list_to_js Obj.magic x3627)
        let (on_did_change_selection : 'T t -> 'T list Event.t) =
          fun (x3630 : 'T t) ->
            Event.t_of_js
              (fun (x3632 : Ojs.t) -> Ojs.list_of_js Obj.magic x3632)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3630)
                 "onDidChangeSelection")
      end
    module InputBox =
      struct
        include struct include QuickInput end
        let (value : t -> string) =
          fun (x3634 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3634) "value")
        let (set_value : t -> string -> unit) =
          fun (x3635 : t) ->
            fun (x3636 : string) ->
              Ojs.set_prop_ascii (t_to_js x3635) "value"
                (Ojs.string_to_js x3636)
        let (placeholder : t -> string or_undefined) =
          fun (x3637 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3637) "placeholder")
        let (set_placeholder : t -> string or_undefined -> unit) =
          fun (x3639 : t) ->
            fun (x3640 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3639) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3640)
        let (password : t -> bool) =
          fun (x3642 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3642) "password")
        let (set_password : t -> bool -> unit) =
          fun (x3643 : t) ->
            fun (x3644 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3643) "password"
                (Ojs.bool_to_js x3644)
        let (on_did_change_value : t -> string Event.t) =
          fun (x3645 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3645) "onDidChangeValue")
        let (on_did_accept : t -> unit Event.t) =
          fun (x3647 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3647) "onDidAccept")
        let (buttons : t -> QuickInputButton.t list) =
          fun (x3649 : t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3649) "buttons")
        let (set_buttons : t -> QuickInputButton.t list -> unit) =
          fun (x3651 : t) ->
            fun (x3652 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js x3651) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3652)
        let (on_did_trigger_button : t -> QuickInputButton.t Event.t) =
          fun (x3654 : t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3654) "onDidTriggerButton")
        let (prompt : t -> string or_undefined) =
          fun (x3656 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3656) "prompt")
        let (set_prompt : t -> string or_undefined -> unit) =
          fun (x3658 : t) ->
            fun (x3659 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3658) "prompt"
                (or_undefined_to_js Ojs.string_to_js x3659)
        let (validation_message : t -> string or_undefined) =
          fun (x3661 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3661) "validationMessage")
        let (set_validation_message : t -> string or_undefined -> unit) =
          fun (x3663 : t) ->
            fun (x3664 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3663) "validationMessage"
                (or_undefined_to_js Ojs.string_to_js x3664)
      end
    module ProgressLocation =
      struct
        type t = [ `Window  | `Notification ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3667 : Ojs.t) ->
            let x3668 = x3667 in
            match Ojs.int_of_js x3668 with
            | 10 -> `Window
            | 15 -> `Notification
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3666 : [ `Window  | `Notification ]) ->
            match x3666 with
            | `Window -> Ojs.int_to_js 10
            | `Notification -> Ojs.int_to_js 15
      end
    module ProgressOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3670 : Ojs.t) -> x3670
        and t_to_js : t -> Ojs.t = fun (x3669 : Ojs.t) -> x3669
        module ViewId =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3672 : Ojs.t) -> x3672
            and t_to_js : t -> Ojs.t = fun (x3671 : Ojs.t) -> x3671
            let (view_id : t -> string) =
              fun (x3673 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3673) "viewId")
            let (set_view_id : t -> string -> unit) =
              fun (x3674 : t) ->
                fun (x3675 : string) ->
                  Ojs.set_prop_ascii (t_to_js x3674) "viewId"
                    (Ojs.string_to_js x3675)
          end
        let (location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum)
          =
          fun (x3676 : t) ->
            or_enum_of_js
              (fun (x3677 : Ojs.t) ->
                 union2_of_js ProgressLocation.t_of_js ViewId.t_of_js x3677)
              (fun (x3680 : Ojs.t) ->
                 let x3681 = x3680 in
                 match Ojs.int_of_js x3681 with
                 | 15 -> `Notification
                 | 1 -> `SourceControl
                 | 10 -> `Window
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x3676) "location")
        let (set_location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum -> 
              unit)
          =
          fun (x3682 : t) ->
            fun
              (x3683 :
                ((ProgressLocation.t, ViewId.t) union2,
                  [ `Notification  | `SourceControl  | `Window ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x3682) "location"
                (or_enum_to_js
                   (fun (x3684 : (ProgressLocation.t, ViewId.t) union2) ->
                      union2_to_js ProgressLocation.t_to_js ViewId.t_to_js
                        x3684)
                   (fun
                      (x3687 :
                        [ `Notification  | `SourceControl  | `Window ])
                      ->
                      match x3687 with
                      | `Notification -> Ojs.string_to_js "Notification"
                      | `SourceControl -> Ojs.string_to_js "SourceControl"
                      | `Window -> Ojs.string_to_js "Window") x3683)
        let (title : t -> string) =
          fun (x3688 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3688) "title")
        let (set_title : t -> string -> unit) =
          fun (x3689 : t) ->
            fun (x3690 : string) ->
              Ojs.set_prop_ascii (t_to_js x3689) "title"
                (Ojs.string_to_js x3690)
        let (cancellable : t -> bool) =
          fun (x3691 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3691) "cancellable")
        let (set_cancellable : t -> bool -> unit) =
          fun (x3692 : t) ->
            fun (x3693 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3692) "cancellable"
                (Ojs.bool_to_js x3693)
      end
    module TreeItemCollapsibleState =
      struct
        type t = [ `Collapsed  | `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3695 : Ojs.t) ->
            let x3696 = x3695 in
            match Ojs.int_of_js x3696 with
            | 1 -> `Collapsed
            | 2 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3694 : [ `Collapsed  | `Expanded ]) ->
            match x3694 with
            | `Collapsed -> Ojs.int_to_js 1
            | `Expanded -> Ojs.int_to_js 2
      end
    module TreeItemLabel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3698 : Ojs.t) -> x3698
        and t_to_js : t -> Ojs.t = fun (x3697 : Ojs.t) -> x3697
        let (label : t -> string) =
          fun (x3699 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3699) "label")
        let (set_label : t -> string -> unit) =
          fun (x3700 : t) ->
            fun (x3701 : string) ->
              Ojs.set_prop_ascii (t_to_js x3700) "label"
                (Ojs.string_to_js x3701)
        let (highlights : t -> (int * int) list) =
          fun (x3702 : t) ->
            Ojs.list_of_js
              (fun (x3703 : Ojs.t) ->
                 let x3704 = x3703 in
                 ((Ojs.int_of_js (Ojs.array_get x3704 0)),
                   (Ojs.int_of_js (Ojs.array_get x3704 1))))
              (Ojs.get_prop_ascii (t_to_js x3702) "highlights")
        let (set_highlights : t -> (int * int) list -> unit) =
          fun (x3705 : t) ->
            fun (x3706 : (int * int) list) ->
              Ojs.set_prop_ascii (t_to_js x3705) "highlights"
                (Ojs.list_to_js
                   (fun (x3707 : (int * int)) ->
                      let (x3708, x3709) = x3707 in
                      let x3710 = Ojs.array_make 2 in
                      Ojs.array_set x3710 0 (Ojs.int_to_js x3708);
                      Ojs.array_set x3710 1 (Ojs.int_to_js x3709);
                      x3710) x3706)
      end
    module TreeItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3712 : Ojs.t) -> x3712
        and t_to_js : t -> Ojs.t = fun (x3711 : Ojs.t) -> x3711
        let (label : t -> TreeItemLabel.t or_string) =
          fun (x3713 : t) ->
            or_string_of_js TreeItemLabel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3713) "label")
        let (set_label : t -> TreeItemLabel.t or_string -> unit) =
          fun (x3715 : t) ->
            fun (x3716 : TreeItemLabel.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x3715) "label"
                (or_string_to_js TreeItemLabel.t_to_js x3716)
        let (id : t -> string) =
          fun (x3718 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3718) "id")
        let (set_id : t -> string -> unit) =
          fun (x3719 : t) ->
            fun (x3720 : string) ->
              Ojs.set_prop_ascii (t_to_js x3719) "id"
                (Ojs.string_to_js x3720)
        let (icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 or_string) =
          fun (x3721 : t) ->
            or_string_of_js
              (fun (x3722 : Ojs.t) ->
                 union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
                   x3722) (Ojs.get_prop_ascii (t_to_js x3721) "iconPath")
        let (set_icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 or_string -> unit) =
          fun (x3726 : t) ->
            fun (x3727 : (ThemeIcon.t, Uri.t, IconPath.t) union3 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x3726) "iconPath"
                (or_string_to_js
                   (fun (x3728 : (ThemeIcon.t, Uri.t, IconPath.t) union3) ->
                      union3_to_js ThemeIcon.t_to_js Uri.t_to_js
                        IconPath.t_to_js x3728) x3727)
        let (description : t -> bool or_string) =
          fun (x3732 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3732) "description")
        let (set_description : t -> bool or_string -> unit) =
          fun (x3734 : t) ->
            fun (x3735 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x3734) "description"
                (or_string_to_js Ojs.bool_to_js x3735)
        let (resource_uri : t -> Uri.t) =
          fun (x3737 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3737) "resourceUri")
        let (set_resource_uri : t -> Uri.t -> unit) =
          fun (x3738 : t) ->
            fun (x3739 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x3738) "resourceUri"
                (Uri.t_to_js x3739)
        let (tooltip : t -> MarkdownString.t or_string or_undefined) =
          fun (x3740 : t) ->
            or_undefined_of_js
              (fun (x3741 : Ojs.t) ->
                 or_string_of_js MarkdownString.t_of_js x3741)
              (Ojs.get_prop_ascii (t_to_js x3740) "tooltip")
        let (set_tooltip :
          t -> MarkdownString.t or_string or_undefined -> unit) =
          fun (x3743 : t) ->
            fun (x3744 : MarkdownString.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3743) "tooltip"
                (or_undefined_to_js
                   (fun (x3745 : MarkdownString.t or_string) ->
                      or_string_to_js MarkdownString.t_to_js x3745) x3744)
        let (command : t -> Command.t) =
          fun (x3747 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x3747) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x3748 : t) ->
            fun (x3749 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x3748) "command"
                (Command.t_to_js x3749)
        let (collapsible_state : t -> TreeItemCollapsibleState.t) =
          fun (x3750 : t) ->
            TreeItemCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3750) "collapsibleState")
        let (set_collapsible_state : t -> TreeItemCollapsibleState.t -> unit)
          =
          fun (x3751 : t) ->
            fun (x3752 : TreeItemCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x3751) "collapsibleState"
                (TreeItemCollapsibleState.t_to_js x3752)
        let (context_value : t -> string) =
          fun (x3753 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3753) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x3754 : t) ->
            fun (x3755 : string) ->
              Ojs.set_prop_ascii (t_to_js x3754) "contextValue"
                (Ojs.string_to_js x3755)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x3756 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3756) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x3757 : t) ->
            fun (x3758 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x3757) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x3758)
        let (create :
          TreeItemLabel.t or_string ->
            ?collapsible_state:TreeItemCollapsibleState.t -> unit -> t)
          =
          fun (x3759 : TreeItemLabel.t or_string) ->
            fun
              ?collapsible_state:(x3760 : TreeItemCollapsibleState.t option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "TreeItem")
                     (let x3761 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3761 "push"
                           [|(or_string_to_js TreeItemLabel.t_to_js x3759)|]);
                      (match x3760 with
                       | Some x3762 ->
                           ignore
                             (Ojs.call x3761 "push"
                                [|(TreeItemCollapsibleState.t_to_js x3762)|])
                       | None -> ());
                      x3761))
        let (create' :
          resource_uri:Uri.t ->
            ?collapsible_state:TreeItemCollapsibleState.t -> unit -> t)
          =
          fun ~resource_uri:(x3764 : Uri.t) ->
            fun
              ?collapsible_state:(x3765 : TreeItemCollapsibleState.t option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "TreeItem")
                     (let x3766 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x3766 "push" [|(Uri.t_to_js x3764)|]);
                      (match x3765 with
                       | Some x3767 ->
                           ignore
                             (Ojs.call x3766 "push"
                                [|(TreeItemCollapsibleState.t_to_js x3767)|])
                       | None -> ());
                      x3766))
      end
    module TreeDataProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3769 : Ojs.t) -> x3769
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3768 : Ojs.t) -> x3768
        module OnDidChangeTreeData =
          struct
            type 'T t = ('T, unit) union2 or_null_or_undefined Event.t
            let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
              __T) ->
              fun (__T_of_js : Ojs.t -> __T) ->
                fun (x3775 : Ojs.t) ->
                  Event.t_of_js
                    (fun (x3776 : Ojs.t) ->
                       or_null_or_undefined_of_js
                         (fun (x3777 : Ojs.t) ->
                            union2_of_js __T_of_js Ojs.unit_of_js x3777)
                         x3776) x3775
            and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type
              __T) ->
              fun (__T_to_js : __T -> Ojs.t) ->
                fun (x3770 : (__T, unit) union2 or_null_or_undefined Event.t)
                  ->
                  Event.t_to_js
                    (fun (x3771 : (__T, unit) union2 or_null_or_undefined) ->
                       or_null_or_undefined_to_js
                         (fun (x3772 : (__T, unit) union2) ->
                            union2_to_js __T_to_js Ojs.unit_to_js x3772)
                         x3771) x3770
          end
        let (on_did_change_tree_data : 'T t -> 'T OnDidChangeTreeData.t) =
          fun (x3780 : 'T t) ->
            OnDidChangeTreeData.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3780)
                 "onDidChangeTreeData")
        let (set_on_did_change_tree_data :
          'T t -> 'T OnDidChangeTreeData.t -> unit) =
          fun (x3783 : 'T t) ->
            fun (x3784 : 'T OnDidChangeTreeData.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3783)
                "onDidChangeTreeData"
                (OnDidChangeTreeData.t_to_js Obj.magic x3784)
        let (get_tree_item :
          'T t -> 'T -> (TreeItem.t, TreeItem.t Promise.t) union2) =
          fun (x3788 : 'T t) ->
            fun (x3787 : 'T) ->
              union2_of_js TreeItem.t_of_js
                (fun (x3791 : Ojs.t) ->
                   Promise.t_of_js TreeItem.t_of_js x3791)
                (Ojs.call (t_to_js Obj.magic x3788) "getTreeItem"
                   [|(Obj.magic x3787)|])
        let (get_children :
          'T t -> ?element:'T -> unit -> 'T list ProviderResult.t) =
          fun (x3796 : 'T t) ->
            fun ?element:(x3793 : 'T option) ->
              fun () ->
                ProviderResult.t_of_js
                  (fun (x3799 : Ojs.t) -> Ojs.list_of_js Obj.magic x3799)
                  (let x3798 = t_to_js Obj.magic x3796 in
                   Ojs.call (Ojs.get_prop_ascii x3798 "getChildren") "apply"
                     [|x3798;((let x3794 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3793 with
                                | Some x3795 ->
                                    ignore
                                      (Ojs.call x3794 "push"
                                         [|(Obj.magic x3795)|])
                                | None -> ());
                               x3794))|])
        let (get_parent : 'T t -> 'T -> 'T ProviderResult.t) =
          fun (x3802 : 'T t) ->
            fun (x3801 : 'T) ->
              ProviderResult.t_of_js Obj.magic
                (Ojs.call (t_to_js Obj.magic x3802) "getParent"
                   [|(Obj.magic x3801)|])
        let (resolve_tree_item :
          'T t ->
            item:TreeItem.t ->
              element:'T ->
                token:CancellationToken.t -> TreeItem.t ProviderResult.t)
          =
          fun (x3808 : 'T t) ->
            fun ~item:(x3805 : TreeItem.t) ->
              fun ~element:(x3806 : 'T) ->
                fun ~token:(x3807 : CancellationToken.t) ->
                  ProviderResult.t_of_js TreeItem.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3808) "resolveTreeItem"
                       [|(TreeItem.t_to_js x3805);(Obj.magic x3806);(
                         CancellationToken.t_to_js x3807)|])
        let (create :
          ?on_did_change_tree_data:'T OnDidChangeTreeData.t ->
            get_tree_item:('T ->
                             [ `Value of TreeItem.t 
                             | `Promise of TreeItem.t Promise.t ])
              ->
              get_children:(?element:'T -> unit -> 'T list ProviderResult.t)
                ->
                ?get_parent:(element:'T -> 'T ProviderResult.t) ->
                  ?resolve_tree_item:(item:TreeItem.t ->
                                        element:'T ->
                                          token:CancellationToken.t ->
                                            TreeItem.t ProviderResult.t)
                    -> unit -> 'T t)
          =
          fun
            ?on_did_change_tree_data:(x3811 :
                                       'T OnDidChangeTreeData.t option)
            ->
            fun
              ~get_tree_item:(x3812 :
                               'T ->
                                 [ `Value of TreeItem.t 
                                 | `Promise of TreeItem.t Promise.t ])
              ->
              fun
                ~get_children:(x3813 :
                                ?element:'T ->
                                  unit -> 'T list ProviderResult.t)
                ->
                fun
                  ?get_parent:(x3814 :
                                (element:'T -> 'T ProviderResult.t) option)
                  ->
                  fun
                    ?resolve_tree_item:(x3815 :
                                         (item:TreeItem.t ->
                                            element:'T ->
                                              token:CancellationToken.t ->
                                                TreeItem.t ProviderResult.t)
                                           option)
                    ->
                    fun () ->
                      let x3816 = Ojs.empty_obj () in
                      (match x3811 with
                       | Some x3834 ->
                           Ojs.set_prop_ascii x3816 "onDidChangeTreeData"
                             (OnDidChangeTreeData.t_to_js Obj.magic x3834)
                       | None -> ());
                      Ojs.set_prop_ascii x3816 "getTreeItem"
                        (Ojs.fun_to_js 1
                           (fun (x3830 : Ojs.t) ->
                              match x3812 (Obj.magic x3830) with
                              | `Value x3831 -> TreeItem.t_to_js x3831
                              | `Promise x3832 ->
                                  Promise.t_to_js TreeItem.t_to_js x3832));
                      Ojs.set_prop_ascii x3816 "getChildren"
                        (Ojs.fun_to_js 1
                           (fun (x3826 : Ojs.t) ->
                              ProviderResult.t_to_js
                                (fun (x3828 : 'T list) ->
                                   Ojs.list_to_js Obj.magic x3828)
                                (x3813
                                   ?element:(Ojs.option_of_js Obj.magic x3826)
                                   ())));
                      (match x3814 with
                       | Some x3823 ->
                           Ojs.set_prop_ascii x3816 "getParent"
                             (Ojs.fun_to_js 1
                                (fun (x3824 : Ojs.t) ->
                                   ProviderResult.t_to_js Obj.magic
                                     (x3823 ~element:(Obj.magic x3824))))
                       | None -> ());
                      (match x3815 with
                       | Some x3818 ->
                           Ojs.set_prop_ascii x3816 "resolveTreeItem"
                             (Ojs.fun_to_js 3
                                (fun (x3819 : Ojs.t) ->
                                   fun (x3820 : Ojs.t) ->
                                     fun (x3821 : Ojs.t) ->
                                       ProviderResult.t_to_js
                                         TreeItem.t_to_js
                                         (x3818
                                            ~item:(TreeItem.t_of_js x3819)
                                            ~element:(Obj.magic x3820)
                                            ~token:(CancellationToken.t_of_js
                                                      x3821))))
                       | None -> ());
                      t_of_js Obj.magic x3816
      end
    module TreeViewOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3837 : Ojs.t) -> x3837
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3836 : Ojs.t) -> x3836
        let (tree_data_provider : 'T t -> 'T TreeDataProvider.t) =
          fun (x3838 : 'T t) ->
            TreeDataProvider.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3838)
                 "treeDataProvider")
        let (set_tree_data_provider : 'T t -> 'T TreeDataProvider.t -> unit)
          =
          fun (x3841 : 'T t) ->
            fun (x3842 : 'T TreeDataProvider.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3841) "treeDataProvider"
                (TreeDataProvider.t_to_js Obj.magic x3842)
        let (show_collapse_all : 'T t -> bool) =
          fun (x3845 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3845) "showCollapseAll")
        let (set_show_collapse_all : 'T t -> bool -> unit) =
          fun (x3847 : 'T t) ->
            fun (x3848 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3847) "showCollapseAll"
                (Ojs.bool_to_js x3848)
        let (can_select_many : 'T t -> bool) =
          fun (x3850 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3850) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3852 : 'T t) ->
            fun (x3853 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3852) "canSelectMany"
                (Ojs.bool_to_js x3853)
      end
    module TreeViewExpansionEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3856 : Ojs.t) -> x3856
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3855 : Ojs.t) -> x3855
        let (element : 'T t -> 'T) =
          fun (x3857 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3857) "element")
      end
    module TreeViewSelectionChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3860 : Ojs.t) -> x3860
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3859 : Ojs.t) -> x3859
        let (selection : 'T t -> 'T list) =
          fun (x3861 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3861) "selection")
      end
    module TreeViewVisibilityChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3865 : Ojs.t) -> x3865
        and t_to_js : t -> Ojs.t = fun (x3864 : Ojs.t) -> x3864
        let (visible : t -> bool) =
          fun (x3866 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3866) "visible")
      end
    module TreeView =
      struct
        include struct include Disposable end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3868 : Ojs.t) -> x3868
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3867 : Ojs.t) -> x3867
        let (on_did_expand_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3869 : 'T t) ->
            Event.t_of_js
              (fun (x3871 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3871)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3869)
                 "onDidExpandElement")
        let (on_did_collapse_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3873 : 'T t) ->
            Event.t_of_js
              (fun (x3875 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3875)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3873)
                 "onDidCollapseElement")
        let (selection : 'T t -> 'T list) =
          fun (x3877 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3877) "selection")
        let (on_did_change_selection :
          'T t -> 'T TreeViewSelectionChangeEvent.t Event.t) =
          fun (x3880 : 'T t) ->
            Event.t_of_js
              (fun (x3882 : Ojs.t) ->
                 TreeViewSelectionChangeEvent.t_of_js Obj.magic x3882)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3880)
                 "onDidChangeSelection")
        let (visible : 'T t -> bool) =
          fun (x3884 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3884) "visible")
        let (on_did_change_visibility :
          'T t -> TreeViewVisibilityChangeEvent.t Event.t) =
          fun (x3886 : 'T t) ->
            Event.t_of_js TreeViewVisibilityChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3886)
                 "onDidChangeVisibility")
        let (message : 'T t -> string) =
          fun (x3889 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3889) "message")
        let (set_message : 'T t -> string -> unit) =
          fun (x3891 : 'T t) ->
            fun (x3892 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3891) "message"
                (Ojs.string_to_js x3892)
        let (title : 'T t -> string) =
          fun (x3894 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3894) "title")
        let (set_title : 'T t -> string -> unit) =
          fun (x3896 : 'T t) ->
            fun (x3897 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3896) "title"
                (Ojs.string_to_js x3897)
        let (description : 'T t -> string) =
          fun (x3899 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3899) "description")
        let (set_description : 'T t -> string -> unit) =
          fun (x3901 : 'T t) ->
            fun (x3902 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3901) "description"
                (Ojs.string_to_js x3902)
        module RevealOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3905 : Ojs.t) -> x3905
            and t_to_js : t -> Ojs.t = fun (x3904 : Ojs.t) -> x3904
            let (select : t -> bool) =
              fun (x3906 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3906) "select")
            let (set_select : t -> bool -> unit) =
              fun (x3907 : t) ->
                fun (x3908 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3907) "select"
                    (Ojs.bool_to_js x3908)
            let (focus : t -> bool) =
              fun (x3909 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3909) "focus")
            let (set_focus : t -> bool -> unit) =
              fun (x3910 : t) ->
                fun (x3911 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3910) "focus"
                    (Ojs.bool_to_js x3911)
            let (expand : t -> bool or_number) =
              fun (x3912 : t) ->
                or_number_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3912) "expand")
            let (set_expand : t -> bool or_number -> unit) =
              fun (x3914 : t) ->
                fun (x3915 : bool or_number) ->
                  Ojs.set_prop_ascii (t_to_js x3914) "expand"
                    (or_number_to_js Ojs.bool_to_js x3915)
          end
        let (reveal :
          'T t -> 'T -> ?options:RevealOptions.t -> unit -> unit Promise.t) =
          fun (x3921 : 'T t) ->
            fun (x3917 : 'T) ->
              fun ?options:(x3918 : RevealOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x3923 = t_to_js Obj.magic x3921 in
                     Ojs.call (Ojs.get_prop_ascii x3923 "reveal") "apply"
                       [|x3923;((let x3919 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3919 "push"
                                      [|(Obj.magic x3917)|]);
                                 (match x3918 with
                                  | Some x3920 ->
                                      ignore
                                        (Ojs.call x3919 "push"
                                           [|(RevealOptions.t_to_js x3920)|])
                                  | None -> ());
                                 x3919))|])
      end
    module Window =
      struct
        let (active_text_editor : TextEditor.t or_undefined) =
          or_undefined_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTextEditor")
        let (visible_text_editors : TextEditor.t list) =
          Ojs.list_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "visibleTextEditors")
        let (on_did_change_active_text_editor :
          TextEditor.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x3927 : Ojs.t) ->
               or_undefined_of_js TextEditor.t_of_js x3927)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTextEditor")
        let (on_did_change_visible_text_editors : TextEditor.t list Event.t)
          =
          Event.t_of_js
            (fun (x3929 : Ojs.t) -> Ojs.list_of_js TextEditor.t_of_js x3929)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeVisibleTextEditors")
        let (on_did_change_text_editor_selection :
          TextEditorSelectionChangeEvent.t Event.t) =
          Event.t_of_js TextEditorSelectionChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorSelection")
        let (on_did_change_text_editor_visible_ranges :
          TextEditorVisibleRangesChangeEvent.t Event.t) =
          Event.t_of_js TextEditorVisibleRangesChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorVisibleRanges")
        let (on_did_change_text_editor_options :
          TextEditorOptionsChangeEvent.t Event.t) =
          Event.t_of_js TextEditorOptionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorOptions")
        let (on_did_change_text_editor_view_column :
          TextEditorViewColumnChangeEvent.t Event.t) =
          Event.t_of_js TextEditorViewColumnChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorViewColumn")
        let (terminals : Terminal.t list) =
          Ojs.list_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "terminals")
        let (active_terminal : Terminal.t or_undefined) =
          or_undefined_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTerminal")
        let (on_did_change_active_terminal : Terminal.t or_undefined Event.t)
          =
          Event.t_of_js
            (fun (x3937 : Ojs.t) -> or_undefined_of_js Terminal.t_of_js x3937)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTerminal")
        let (on_did_open_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidOpenTerminal")
        let (on_did_close_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidCloseTerminal")
        let (state : WindowState.t) =
          WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "state")
        let (on_did_change_window_state : WindowState.t Event.t) =
          Event.t_of_js WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeWindowState")
        let (show_text_document :
          TextDocument.t ->
            ?column:ViewColumn.t ->
              ?preserve_focus:bool -> unit -> TextEditor.t Promise.t)
          =
          fun (x3942 : TextDocument.t) ->
            fun ?column:(x3943 : ViewColumn.t option) ->
              fun ?preserve_focus:(x3944 : bool option) ->
                fun () ->
                  Promise.t_of_js TextEditor.t_of_js
                    (let x3948 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x3948 "showTextDocument")
                       "apply"
                       [|x3948;((let x3945 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3945 "push"
                                      [|(TextDocument.t_to_js x3942)|]);
                                 (match x3943 with
                                  | Some x3947 ->
                                      ignore
                                        (Ojs.call x3945 "push"
                                           [|(ViewColumn.t_to_js x3947)|])
                                  | None -> ());
                                 (match x3944 with
                                  | Some x3946 ->
                                      ignore
                                        (Ojs.call x3945 "push"
                                           [|(Ojs.bool_to_js x3946)|])
                                  | None -> ());
                                 x3945))|])
        let (show_text_document :
          TextDocument.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x3950 : TextDocument.t) ->
            fun ?options:(x3951 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x3954 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x3954 "showTextDocument")
                     "apply"
                     [|x3954;((let x3952 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3952 "push"
                                    [|(TextDocument.t_to_js x3950)|]);
                               (match x3951 with
                                | Some x3953 ->
                                    ignore
                                      (Ojs.call x3952 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x3953)|])
                                | None -> ());
                               x3952))|])
        let (show_text_document :
          Uri.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x3956 : Uri.t) ->
            fun ?options:(x3957 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x3960 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x3960 "showTextDocument")
                     "apply"
                     [|x3960;((let x3958 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3958 "push"
                                    [|(Uri.t_to_js x3956)|]);
                               (match x3957 with
                                | Some x3959 ->
                                    ignore
                                      (Ojs.call x3958 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x3959)|])
                                | None -> ());
                               x3958))|])
        let (create_text_editor_decoration_type :
          DecorationRenderOptions.t -> TextEditorDecorationType.t) =
          fun (x3962 : DecorationRenderOptions.t) ->
            TextEditorDecorationType.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTextEditorDecorationType"
                 [|(DecorationRenderOptions.t_to_js x3962)|])
        let (show_information_message :
          string ->
            ?options:MessageOptions.t ->
              unit -> string or_undefined Promise.t)
          =
          fun (x3963 : string) ->
            fun ?options:(x3964 : MessageOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x3968 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x3968)
                  (let x3967 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call
                     (Ojs.get_prop_ascii x3967 "showInformationMessage")
                     "apply"
                     [|x3967;((let x3965 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3965 "push"
                                    [|(Ojs.string_to_js x3963)|]);
                               (match x3964 with
                                | Some x3966 ->
                                    ignore
                                      (Ojs.call x3965 "push"
                                         [|(MessageOptions.t_to_js x3966)|])
                                | None -> ());
                               x3965))|])
        let (show_information_message' :
          string ->
            ?options:MessageOptions.t ->
              items:'T list -> unit -> 'T or_undefined Promise.t)
          =
          fun (x3970 : string) ->
            fun ?options:(x3971 : MessageOptions.t option) ->
              fun ~items:(x3972 : 'T list) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x3977 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x3977)
                    (let x3976 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x3976 "showInformationMessage")
                       "apply"
                       [|x3976;((let x3973 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3973 "push"
                                      [|(Ojs.string_to_js x3970)|]);
                                 (match x3971 with
                                  | Some x3975 ->
                                      ignore
                                        (Ojs.call x3973 "push"
                                           [|(MessageOptions.t_to_js x3975)|])
                                  | None -> ());
                                 List.iter
                                   (fun (x3974 : 'T) ->
                                      ignore
                                        (Ojs.call x3973 "push"
                                           [|(Obj.magic x3974)|])) x3972;
                                 x3973))|])
        let (show_warning_message :
          string ->
            ?options:MessageOptions.t ->
              unit -> string or_undefined Promise.t)
          =
          fun (x3979 : string) ->
            fun ?options:(x3980 : MessageOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x3984 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x3984)
                  (let x3983 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x3983 "showWarningMessage")
                     "apply"
                     [|x3983;((let x3981 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3981 "push"
                                    [|(Ojs.string_to_js x3979)|]);
                               (match x3980 with
                                | Some x3982 ->
                                    ignore
                                      (Ojs.call x3981 "push"
                                         [|(MessageOptions.t_to_js x3982)|])
                                | None -> ());
                               x3981))|])
        let (show_warning_message' :
          string ->
            ?options:MessageOptions.t ->
              items:'T list -> unit -> 'T or_undefined Promise.t)
          =
          fun (x3986 : string) ->
            fun ?options:(x3987 : MessageOptions.t option) ->
              fun ~items:(x3988 : 'T list) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x3993 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x3993)
                    (let x3992 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x3992 "showWarningMessage")
                       "apply"
                       [|x3992;((let x3989 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3989 "push"
                                      [|(Ojs.string_to_js x3986)|]);
                                 (match x3987 with
                                  | Some x3991 ->
                                      ignore
                                        (Ojs.call x3989 "push"
                                           [|(MessageOptions.t_to_js x3991)|])
                                  | None -> ());
                                 List.iter
                                   (fun (x3990 : 'T) ->
                                      ignore
                                        (Ojs.call x3989 "push"
                                           [|(Obj.magic x3990)|])) x3988;
                                 x3989))|])
        let (show_error_message :
          string ->
            ?options:MessageOptions.t ->
              unit -> string or_undefined Promise.t)
          =
          fun (x3995 : string) ->
            fun ?options:(x3996 : MessageOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x4000 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x4000)
                  (let x3999 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x3999 "showErrorMessage")
                     "apply"
                     [|x3999;((let x3997 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3997 "push"
                                    [|(Ojs.string_to_js x3995)|]);
                               (match x3996 with
                                | Some x3998 ->
                                    ignore
                                      (Ojs.call x3997 "push"
                                         [|(MessageOptions.t_to_js x3998)|])
                                | None -> ());
                               x3997))|])
        let (show_error_message' :
          string ->
            ?options:MessageOptions.t ->
              items:'T list -> unit -> 'T or_undefined Promise.t)
          =
          fun (x4002 : string) ->
            fun ?options:(x4003 : MessageOptions.t option) ->
              fun ~items:(x4004 : 'T list) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4009 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4009)
                    (let x4008 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4008 "showErrorMessage")
                       "apply"
                       [|x4008;((let x4005 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4005 "push"
                                      [|(Ojs.string_to_js x4002)|]);
                                 (match x4003 with
                                  | Some x4007 ->
                                      ignore
                                        (Ojs.call x4005 "push"
                                           [|(MessageOptions.t_to_js x4007)|])
                                  | None -> ());
                                 List.iter
                                   (fun (x4006 : 'T) ->
                                      ignore
                                        (Ojs.call x4005 "push"
                                           [|(Obj.magic x4006)|])) x4004;
                                 x4005))|])
        module ShowQuickPickOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4012 : Ojs.t) -> x4012
            and t_to_js : t -> Ojs.t = fun (x4011 : Ojs.t) -> x4011
            let (can_pick_many : t -> [ `L_b_true ]) =
              fun (x4013 : t) ->
                let x4014 = Ojs.get_prop_ascii (t_to_js x4013) "canPickMany" in
                match Ojs.bool_of_js x4014 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_can_pick_many : t -> [ `L_b_true ] -> unit) =
              fun (x4015 : t) ->
                fun (x4016 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x4015) "canPickMany"
                    (match x4016 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (show_quick_pick :
          (string list Promise.t, string) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> string list or_undefined Promise.t)
          =
          fun (x4017 : (string list Promise.t, string) or_array) ->
            fun
              ?options:(x4018 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4019 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4030 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4031 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x4031) x4030)
                    (let x4029 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4029 "showQuickPick")
                       "apply"
                       [|x4029;((let x4020 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4020 "push"
                                      [|(or_array_to_js
                                           (fun
                                              (x4025 : string list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4026 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4026)
                                                x4025) Ojs.string_to_js x4017)|]);
                                 (match x4018 with
                                  | Some x4022 ->
                                      ignore
                                        (Ojs.call x4020 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4022)|])
                                  | None -> ());
                                 (match x4019 with
                                  | Some x4021 ->
                                      ignore
                                        (Ojs.call x4020 "push"
                                           [|(CancellationToken.t_to_js x4021)|])
                                  | None -> ());
                                 x4020))|])
        let (show_quick_pick' :
          ('T list Promise.t, 'T) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> 'T list or_undefined Promise.t)
          =
          fun (x4033 : ('T list Promise.t, 'T) or_array) ->
            fun
              ?options:(x4034 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4035 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4046 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4047 : Ojs.t) ->
                            Ojs.list_of_js Obj.magic x4047) x4046)
                    (let x4045 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4045 "showQuickPick")
                       "apply"
                       [|x4045;((let x4036 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4036 "push"
                                      [|(or_array_to_js
                                           (fun (x4041 : 'T list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4042 : 'T list) ->
                                                   Ojs.list_to_js Obj.magic
                                                     x4042) x4041) Obj.magic
                                           x4033)|]);
                                 (match x4034 with
                                  | Some x4038 ->
                                      ignore
                                        (Ojs.call x4036 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4038)|])
                                  | None -> ());
                                 (match x4035 with
                                  | Some x4037 ->
                                      ignore
                                        (Ojs.call x4036 "push"
                                           [|(CancellationToken.t_to_js x4037)|])
                                  | None -> ());
                                 x4036))|])
        let (show_workspace_folder_pick :
          ?options:WorkspaceFolderPickOptions.t ->
            unit -> WorkspaceFolder.t or_undefined Promise.t)
          =
          fun ?options:(x4049 : WorkspaceFolderPickOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4053 : Ojs.t) ->
                   or_undefined_of_js WorkspaceFolder.t_of_js x4053)
                (let x4052 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4052 "showWorkspaceFolderPick")
                   "apply"
                   [|x4052;((let x4050 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4049 with
                              | Some x4051 ->
                                  ignore
                                    (Ojs.call x4050 "push"
                                       [|(WorkspaceFolderPickOptions.t_to_js
                                            x4051)|])
                              | None -> ());
                             x4050))|])
        let (show_open_dialog :
          ?options:OpenDialogOptions.t ->
            unit -> Uri.t list or_undefined Promise.t)
          =
          fun ?options:(x4055 : OpenDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4059 : Ojs.t) ->
                   or_undefined_of_js
                     (fun (x4060 : Ojs.t) -> Ojs.list_of_js Uri.t_of_js x4060)
                     x4059)
                (let x4058 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4058 "showOpenDialog") "apply"
                   [|x4058;((let x4056 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4055 with
                              | Some x4057 ->
                                  ignore
                                    (Ojs.call x4056 "push"
                                       [|(OpenDialogOptions.t_to_js x4057)|])
                              | None -> ());
                             x4056))|])
        let (show_save_dialog :
          ?options:SaveDialogOptions.t ->
            unit -> Uri.t or_undefined Promise.t)
          =
          fun ?options:(x4062 : SaveDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4066 : Ojs.t) -> or_undefined_of_js Uri.t_of_js x4066)
                (let x4065 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4065 "showSaveDialog") "apply"
                   [|x4065;((let x4063 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4062 with
                              | Some x4064 ->
                                  ignore
                                    (Ojs.call x4063 "push"
                                       [|(SaveDialogOptions.t_to_js x4064)|])
                              | None -> ());
                             x4063))|])
        let (show_input_box :
          ?options:InputBoxOptions.t ->
            ?token:CancellationToken.t ->
              unit -> string or_undefined Promise.t)
          =
          fun ?options:(x4068 : InputBoxOptions.t option) ->
            fun ?token:(x4069 : CancellationToken.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x4074 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x4074)
                  (let x4073 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4073 "showInputBox") "apply"
                     [|x4073;((let x4070 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4068 with
                                | Some x4072 ->
                                    ignore
                                      (Ojs.call x4070 "push"
                                         [|(InputBoxOptions.t_to_js x4072)|])
                                | None -> ());
                               (match x4069 with
                                | Some x4071 ->
                                    ignore
                                      (Ojs.call x4070 "push"
                                         [|(CancellationToken.t_to_js x4071)|])
                                | None -> ());
                               x4070))|])
        let (create_quick_pick : unit -> 'T QuickPick.t) =
          fun () ->
            QuickPick.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createQuickPick" [||])
        let (create_input_box : unit -> InputBox.t) =
          fun () ->
            InputBox.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createInputBox" [||])
        let (create_output_channel : name:string -> OutputChannel.t) =
          fun ~name:(x4077 : string) ->
            OutputChannel.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createOutputChannel" [|(Ojs.string_to_js x4077)|])
        module ProgressInfo =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4079 : Ojs.t) -> x4079
            and t_to_js : t -> Ojs.t = fun (x4078 : Ojs.t) -> x4078
            let (message : t -> string) =
              fun (x4080 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4080) "message")
            let (set_message : t -> string -> unit) =
              fun (x4081 : t) ->
                fun (x4082 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4081) "message"
                    (Ojs.string_to_js x4082)
            let (increment : t -> int) =
              fun (x4083 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x4083) "increment")
            let (set_increment : t -> int -> unit) =
              fun (x4084 : t) ->
                fun (x4085 : int) ->
                  Ojs.set_prop_ascii (t_to_js x4084) "increment"
                    (Ojs.int_to_js x4085)
          end
        module ViewColumnLike =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4087 : Ojs.t) -> x4087
            and t_to_js : t -> Ojs.t = fun (x4086 : Ojs.t) -> x4086
            let (view_column : t -> ViewColumn.t) =
              fun (x4088 : t) ->
                ViewColumn.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4088) "viewColumn")
            let (set_view_column : t -> ViewColumn.t -> unit) =
              fun (x4089 : t) ->
                fun (x4090 : ViewColumn.t) ->
                  Ojs.set_prop_ascii (t_to_js x4089) "viewColumn"
                    (ViewColumn.t_to_js x4090)
            let (preserve_focus : t -> bool) =
              fun (x4091 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4091) "preserveFocus")
            let (set_preserve_focus : t -> bool -> unit) =
              fun (x4092 : t) ->
                fun (x4093 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x4092) "preserveFocus"
                    (Ojs.bool_to_js x4093)
          end
        module RegisterCustomEditorProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4095 : Ojs.t) -> x4095
            and t_to_js : t -> Ojs.t = fun (x4094 : Ojs.t) -> x4094
            let (webview_options : t -> WebviewPanelOptions.t) =
              fun (x4096 : t) ->
                WebviewPanelOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4096) "webviewOptions")
            let (supports_multiple_editors_per_document : t -> bool) =
              fun (x4097 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4097)
                     "supportsMultipleEditorsPerDocument")
          end
        module WebviewOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4099 : Ojs.t) -> x4099
            and t_to_js : t -> Ojs.t = fun (x4098 : Ojs.t) -> x4098
            let (retain_context_when_hidden : t -> bool) =
              fun (x4100 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4100)
                     "retainContextWhenHidden")
          end
        module RegisterWebviewViewProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4102 : Ojs.t) -> x4102
            and t_to_js : t -> Ojs.t = fun (x4101 : Ojs.t) -> x4101
            let (webview_options : t -> WebviewOptions.t) =
              fun (x4103 : t) ->
                WebviewOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4103) "webviewOptions")
          end
        let (create_webview_panel :
          view_type_:string ->
            title:string ->
              show_options:((ViewColumn.t, ViewColumnLike.t) union2,
                [ `Active  | `Beside  | `Eight  | `Five  | `Four  | `Nine 
                | `One  | `Seven  | `Six  | `Three  | `Two ]) or_enum ->
                ?options:(WebviewPanelOptions.t, WebviewOptions.t)
                  intersection2 -> unit -> WebviewPanel.t)
          =
          fun ~view_type_:(x4104 : string) ->
            fun ~title:(x4105 : string) ->
              fun
                ~show_options:(x4106 :
                                ((ViewColumn.t, ViewColumnLike.t) union2,
                                  [ `Active  | `Beside  | `Eight  | `Five 
                                  | `Four  | `Nine  | `One  | `Seven  | 
                                    `Six 
                                  | `Three  | `Two ]) or_enum)
                ->
                fun
                  ?options:(x4107 :
                             (WebviewPanelOptions.t, WebviewOptions.t)
                               intersection2 option)
                  ->
                  fun () ->
                    WebviewPanel.t_of_js
                      (let x4116 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4116 "createWebviewPanel")
                         "apply"
                         [|x4116;((let x4108 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4108 "push"
                                        [|(Ojs.string_to_js x4104)|]);
                                   ignore
                                     (Ojs.call x4108 "push"
                                        [|(Ojs.string_to_js x4105)|]);
                                   ignore
                                     (Ojs.call x4108 "push"
                                        [|(or_enum_to_js
                                             (fun
                                                (x4112 :
                                                  (ViewColumn.t,
                                                    ViewColumnLike.t) union2)
                                                ->
                                                union2_to_js
                                                  ViewColumn.t_to_js
                                                  ViewColumnLike.t_to_js
                                                  x4112)
                                             (fun
                                                (x4115 :
                                                  [ `Active  | `Beside 
                                                  | `Eight  | `Five  | 
                                                    `Four 
                                                  | `Nine  | `One  | 
                                                    `Seven 
                                                  | `Six  | `Three  | 
                                                    `Two ])
                                                ->
                                                match x4115 with
                                                | `Active ->
                                                    Ojs.string_to_js "Active"
                                                | `Beside ->
                                                    Ojs.string_to_js "Beside"
                                                | `Eight ->
                                                    Ojs.string_to_js "Eight"
                                                | `Five ->
                                                    Ojs.string_to_js "Five"
                                                | `Four ->
                                                    Ojs.string_to_js "Four"
                                                | `Nine ->
                                                    Ojs.string_to_js "Nine"
                                                | `One ->
                                                    Ojs.string_to_js "One"
                                                | `Seven ->
                                                    Ojs.string_to_js "Seven"
                                                | `Six ->
                                                    Ojs.string_to_js "Six"
                                                | `Three ->
                                                    Ojs.string_to_js "Three"
                                                | `Two ->
                                                    Ojs.string_to_js "Two")
                                             x4106)|]);
                                   (match x4107 with
                                    | Some x4109 ->
                                        ignore
                                          (Ojs.call x4108 "push"
                                             [|(intersection2_to_js
                                                  WebviewPanelOptions.t_to_js
                                                  WebviewOptions.t_to_js
                                                  x4109)|])
                                    | None -> ());
                                   x4108))|])
        let (set_status_bar_message :
          text:string -> hide_after_timeout:int -> Disposable.t) =
          fun ~text:(x4117 : string) ->
            fun ~hide_after_timeout:(x4118 : int) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4117);(Ojs.int_to_js x4118)|])
        let (set_status_bar_message :
          text:string -> hide_when_done:any Promise.t -> Disposable.t) =
          fun ~text:(x4119 : string) ->
            fun ~hide_when_done:(x4120 : any Promise.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4119);(Promise.t_to_js any_to_js
                                                 x4120)|])
        let (set_status_bar_message : text:string -> Disposable.t) =
          fun ~text:(x4122 : string) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "setStatusBarMessage" [|(Ojs.string_to_js x4122)|])
        let (with_scm_progress :
          task:(progress:int Progress.t -> 'R Promise.t) -> 'R Promise.t) =
          fun ~task:(x4123 : progress:int Progress.t -> 'R Promise.t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "withScmProgress"
                 [|(Ojs.fun_to_js 1
                      (fun (x4124 : Ojs.t) ->
                         Promise.t_to_js Obj.magic
                           (x4123
                              ~progress:(Progress.t_of_js Ojs.int_of_js x4124))))|])
        let (with_progress :
          options:ProgressOptions.t ->
            task:(progress:ProgressInfo.t Progress.t ->
                    token:CancellationToken.t -> 'R Promise.t)
              -> 'R Promise.t)
          =
          fun ~options:(x4128 : ProgressOptions.t) ->
            fun
              ~task:(x4129 :
                      progress:ProgressInfo.t Progress.t ->
                        token:CancellationToken.t -> 'R Promise.t)
              ->
              Promise.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "withProgress"
                   [|(ProgressOptions.t_to_js x4128);(Ojs.fun_to_js 2
                                                        (fun (x4130 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4132 : Ojs.t)
                                                             ->
                                                             Promise.t_to_js
                                                               Obj.magic
                                                               (x4129
                                                                  ~progress:(
                                                                  Progress.t_of_js
                                                                    ProgressInfo.t_of_js
                                                                    x4130)
                                                                  ~token:(
                                                                  CancellationToken.t_of_js
                                                                    x4132))))|])
        let (create_status_bar_item :
          ?alignment:StatusBarAlignment.t ->
            ?priority:int -> unit -> StatusBarItem.t)
          =
          fun ?alignment:(x4135 : StatusBarAlignment.t option) ->
            fun ?priority:(x4136 : int option) ->
              fun () ->
                StatusBarItem.t_of_js
                  (let x4140 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4140 "createStatusBarItem")
                     "apply"
                     [|x4140;((let x4137 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4135 with
                                | Some x4139 ->
                                    ignore
                                      (Ojs.call x4137 "push"
                                         [|(StatusBarAlignment.t_to_js x4139)|])
                                | None -> ());
                               (match x4136 with
                                | Some x4138 ->
                                    ignore
                                      (Ojs.call x4137 "push"
                                         [|(Ojs.int_to_js x4138)|])
                                | None -> ());
                               x4137))|])
        let (create_terminal :
          ?name:string ->
            ?shell_path:string ->
              ?shell_args:string list or_string -> unit -> Terminal.t)
          =
          fun ?name:(x4141 : string option) ->
            fun ?shell_path:(x4142 : string option) ->
              fun ?shell_args:(x4143 : string list or_string option) ->
                fun () ->
                  Terminal.t_of_js
                    (let x4150 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4150 "createTerminal")
                       "apply"
                       [|x4150;((let x4144 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x4141 with
                                  | Some x4149 ->
                                      ignore
                                        (Ojs.call x4144 "push"
                                           [|(Ojs.string_to_js x4149)|])
                                  | None -> ());
                                 (match x4142 with
                                  | Some x4148 ->
                                      ignore
                                        (Ojs.call x4144 "push"
                                           [|(Ojs.string_to_js x4148)|])
                                  | None -> ());
                                 (match x4143 with
                                  | Some x4145 ->
                                      ignore
                                        (Ojs.call x4144 "push"
                                           [|(or_string_to_js
                                                (fun (x4146 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4146)
                                                x4145)|])
                                  | None -> ());
                                 x4144))|])
        let (create_terminal : options:TerminalOptions.t -> Terminal.t) =
          fun ~options:(x4151 : TerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal" [|(TerminalOptions.t_to_js x4151)|])
        let (create_terminal :
          options:ExtensionTerminalOptions.t -> Terminal.t) =
          fun ~options:(x4152 : ExtensionTerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal"
                 [|(ExtensionTerminalOptions.t_to_js x4152)|])
        let (register_tree_data_provider :
          string -> 'T TreeDataProvider.t -> Disposable.t) =
          fun (x4153 : string) ->
            fun (x4154 : 'T TreeDataProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerTreeDataProvider"
                   [|(Ojs.string_to_js x4153);(TreeDataProvider.t_to_js
                                                 Obj.magic x4154)|])
        let (create_tree_view :
          string -> options:'T TreeViewOptions.t -> 'T TreeView.t) =
          fun (x4156 : string) ->
            fun ~options:(x4157 : 'T TreeViewOptions.t) ->
              TreeView.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "createTreeView"
                   [|(Ojs.string_to_js x4156);(TreeViewOptions.t_to_js
                                                 Obj.magic x4157)|])
        let (register_uri_handler : handler:UriHandler.t -> Disposable.t) =
          fun ~handler:(x4160 : UriHandler.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerUriHandler" [|(UriHandler.t_to_js x4160)|])
        let (register_webview_panel_serializer :
          string -> unknown WebviewPanelSerializer.t -> Disposable.t) =
          fun (x4161 : string) ->
            fun (x4162 : unknown WebviewPanelSerializer.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerWebviewPanelSerializer"
                   [|(Ojs.string_to_js x4161);(WebviewPanelSerializer.t_to_js
                                                 unknown_to_js x4162)|])
        let (register_webview_view_provider :
          string ->
            WebviewViewProvider.t ->
              ?options:RegisterWebviewViewProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4164 : string) ->
            fun (x4165 : WebviewViewProvider.t) ->
              fun
                ?options:(x4166 :
                           RegisterWebviewViewProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4169 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4169
                          "registerWebviewViewProvider") "apply"
                       [|x4169;((let x4167 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4167 "push"
                                      [|(Ojs.string_to_js x4164)|]);
                                 ignore
                                   (Ojs.call x4167 "push"
                                      [|(WebviewViewProvider.t_to_js x4165)|]);
                                 (match x4166 with
                                  | Some x4168 ->
                                      ignore
                                        (Ojs.call x4167 "push"
                                           [|(RegisterWebviewViewProviderOptions.t_to_js
                                                x4168)|])
                                  | None -> ());
                                 x4167))|])
        let (register_custom_editor_provider :
          string ->
            (CustomDocument.t CustomEditorProvider.t,
              CustomDocument.t CustomReadonlyEditorProvider.t,
              CustomTextEditorProvider.t) union3 ->
              ?options:RegisterCustomEditorProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4170 : string) ->
            fun
              (x4171 :
                (CustomDocument.t CustomEditorProvider.t,
                  CustomDocument.t CustomReadonlyEditorProvider.t,
                  CustomTextEditorProvider.t) union3)
              ->
              fun
                ?options:(x4172 :
                           RegisterCustomEditorProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4180 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4180
                          "registerCustomEditorProvider") "apply"
                       [|x4180;((let x4173 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4173 "push"
                                      [|(Ojs.string_to_js x4170)|]);
                                 ignore
                                   (Ojs.call x4173 "push"
                                      [|(union3_to_js
                                           (fun
                                              (x4175 :
                                                CustomDocument.t
                                                  CustomEditorProvider.t)
                                              ->
                                              CustomEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4175)
                                           (fun
                                              (x4177 :
                                                CustomDocument.t
                                                  CustomReadonlyEditorProvider.t)
                                              ->
                                              CustomReadonlyEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4177)
                                           CustomTextEditorProvider.t_to_js
                                           x4171)|]);
                                 (match x4172 with
                                  | Some x4174 ->
                                      ignore
                                        (Ojs.call x4173 "push"
                                           [|(RegisterCustomEditorProviderOptions.t_to_js
                                                x4174)|])
                                  | None -> ());
                                 x4173))|])
        let (register_terminal_link_provider :
          TerminalLink.t TerminalLinkProvider.t -> Disposable.t) =
          fun (x4181 : TerminalLink.t TerminalLinkProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerTerminalLinkProvider"
                 [|(TerminalLinkProvider.t_to_js TerminalLink.t_to_js x4181)|])
        let (register_file_decoration_provider :
          FileDecorationProvider.t -> Disposable.t) =
          fun (x4183 : FileDecorationProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerFileDecorationProvider"
                 [|(FileDecorationProvider.t_to_js x4183)|])
        let (active_color_theme : ColorTheme.t) =
          ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeColorTheme")
        let (on_did_change_active_color_theme : ColorTheme.t Event.t) =
          Event.t_of_js ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveColorTheme")
      end
    module TextDocumentContentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4186 : Ojs.t) -> x4186
        and t_to_js : t -> Ojs.t = fun (x4185 : Ojs.t) -> x4185
        let (range : t -> Range.t) =
          fun (x4187 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4187) "range")
        let (range_offset : t -> int) =
          fun (x4188 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4188) "rangeOffset")
        let (range_length : t -> int) =
          fun (x4189 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4189) "rangeLength")
        let (text : t -> string) =
          fun (x4190 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4190) "text")
      end
    module TextDocumentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4192 : Ojs.t) -> x4192
        and t_to_js : t -> Ojs.t = fun (x4191 : Ojs.t) -> x4191
        let (document : t -> TextDocument.t) =
          fun (x4193 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4193) "document")
        let (content_changes : t -> TextDocumentContentChangeEvent.t list) =
          fun (x4194 : t) ->
            Ojs.list_of_js TextDocumentContentChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4194) "contentChanges")
      end
    module TextDocumentSaveReason =
      struct
        type t = [ `AfterDelay  | `FocusOut ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4197 : Ojs.t) ->
            let x4198 = x4197 in
            match Ojs.int_of_js x4198 with
            | 2 -> `AfterDelay
            | 3 -> `FocusOut
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4196 : [ `AfterDelay  | `FocusOut ]) ->
            match x4196 with
            | `AfterDelay -> Ojs.int_to_js 2
            | `FocusOut -> Ojs.int_to_js 3
      end
    module TextDocumentWillSaveEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4200 : Ojs.t) -> x4200
        and t_to_js : t -> Ojs.t = fun (x4199 : Ojs.t) -> x4199
        let (document : t -> TextDocument.t) =
          fun (x4201 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4201) "document")
        let (reason : t -> TextDocumentSaveReason.t) =
          fun (x4202 : t) ->
            TextDocumentSaveReason.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4202) "reason")
        let (wait_until : t -> TextEdit.t list Promise.t -> unit) =
          fun (x4206 : t) ->
            fun (x4203 : TextEdit.t list Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4206) "waitUntil"
                   [|(Promise.t_to_js
                        (fun (x4204 : TextEdit.t list) ->
                           Ojs.list_to_js TextEdit.t_to_js x4204) x4203)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4209 : t) ->
            fun (x4207 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4209) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4207)|])
      end
    module FileWillCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4211 : Ojs.t) -> x4211
        and t_to_js : t -> Ojs.t = fun (x4210 : Ojs.t) -> x4210
        let (files : t -> Uri.t list) =
          fun (x4212 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4212) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4216 : t) ->
            fun (x4214 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4216) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4214)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4219 : t) ->
            fun (x4217 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4219) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4217)|])
      end
    module FileCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4221 : Ojs.t) -> x4221
        and t_to_js : t -> Ojs.t = fun (x4220 : Ojs.t) -> x4220
        let (files : t -> Uri.t list) =
          fun (x4222 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4222) "files")
      end
    module FileWillDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4225 : Ojs.t) -> x4225
        and t_to_js : t -> Ojs.t = fun (x4224 : Ojs.t) -> x4224
        let (files : t -> Uri.t list) =
          fun (x4226 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4226) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4230 : t) ->
            fun (x4228 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4230) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4228)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4233 : t) ->
            fun (x4231 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4233) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4231)|])
      end
    module FileDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4235 : Ojs.t) -> x4235
        and t_to_js : t -> Ojs.t = fun (x4234 : Ojs.t) -> x4234
        let (files : t -> Uri.t list) =
          fun (x4236 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4236) "files")
      end
    module FileWillRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4239 : Ojs.t) -> x4239
        and t_to_js : t -> Ojs.t = fun (x4238 : Ojs.t) -> x4238
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4241 : Ojs.t) -> x4241
            and t_to_js : t -> Ojs.t = fun (x4240 : Ojs.t) -> x4240
            let (old_uri : t -> Uri.t) =
              fun (x4242 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4242) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4243 : t) ->
                fun (x4244 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4243) "oldUri"
                    (Uri.t_to_js x4244)
            let (new_uri : t -> Uri.t) =
              fun (x4245 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4245) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4246 : t) ->
                fun (x4247 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4246) "newUri"
                    (Uri.t_to_js x4247)
          end
        let (files : t -> File.t list) =
          fun (x4248 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4248) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4252 : t) ->
            fun (x4250 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4252) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4250)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4255 : t) ->
            fun (x4253 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4255) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4253)|])
      end
    module FileRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4257 : Ojs.t) -> x4257
        and t_to_js : t -> Ojs.t = fun (x4256 : Ojs.t) -> x4256
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4259 : Ojs.t) -> x4259
            and t_to_js : t -> Ojs.t = fun (x4258 : Ojs.t) -> x4258
            let (old_uri : t -> Uri.t) =
              fun (x4260 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4260) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4261 : t) ->
                fun (x4262 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4261) "oldUri"
                    (Uri.t_to_js x4262)
            let (new_uri : t -> Uri.t) =
              fun (x4263 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4263) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4264 : t) ->
                fun (x4265 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4264) "newUri"
                    (Uri.t_to_js x4265)
          end
        let (files : t -> File.t list) =
          fun (x4266 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4266) "files")
      end
    module WorkspaceFoldersChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4269 : Ojs.t) -> x4269
        and t_to_js : t -> Ojs.t = fun (x4268 : Ojs.t) -> x4268
        let (added : t -> WorkspaceFolder.t list) =
          fun (x4270 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4270) "added")
        let (removed : t -> WorkspaceFolder.t list) =
          fun (x4272 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4272) "removed")
      end
    module UriWithLanguageId =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4275 : Ojs.t) -> x4275
        and t_to_js : t -> Ojs.t = fun (x4274 : Ojs.t) -> x4274
        let (uri : t -> Uri.t) =
          fun (x4276 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4276) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x4277 : t) ->
            fun (x4278 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4277) "uri" (Uri.t_to_js x4278)
        let (language_id : t -> string) =
          fun (x4279 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4279) "languageId")
        let (set_language_id : t -> string -> unit) =
          fun (x4280 : t) ->
            fun (x4281 : string) ->
              Ojs.set_prop_ascii (t_to_js x4280) "languageId"
                (Ojs.string_to_js x4281)
      end
    module ConfigurationScope =
      struct
        type t =
          (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
            union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4287 : Ojs.t) ->
            union4_of_js TextDocument.t_of_js Uri.t_of_js
              WorkspaceFolder.t_of_js UriWithLanguageId.t_of_js x4287
        and t_to_js : t -> Ojs.t =
          fun
            (x4282 :
              (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
                union4)
            ->
            union4_to_js TextDocument.t_to_js Uri.t_to_js
              WorkspaceFolder.t_to_js UriWithLanguageId.t_to_js x4282
      end
    module ConfigurationChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4293 : Ojs.t) -> x4293
        and t_to_js : t -> Ojs.t = fun (x4292 : Ojs.t) -> x4292
        let (affects_configuration :
          t -> string -> ?scope:ConfigurationScope.t -> unit -> bool) =
          fun (x4298 : t) ->
            fun (x4294 : string) ->
              fun ?scope:(x4295 : ConfigurationScope.t option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x4299 = t_to_js x4298 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4299 "affectsConfiguration")
                       "apply"
                       [|x4299;((let x4296 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4296 "push"
                                      [|(Ojs.string_to_js x4294)|]);
                                 (match x4295 with
                                  | Some x4297 ->
                                      ignore
                                        (Ojs.call x4296 "push"
                                           [|(ConfigurationScope.t_to_js
                                                x4297)|])
                                  | None -> ());
                                 x4296))|])
      end
    module Workspace =
      struct
        module RegisterFileSystemProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4301 : Ojs.t) -> x4301
            and t_to_js : t -> Ojs.t = fun (x4300 : Ojs.t) -> x4300
            let (is_case_sensitive : t -> bool) =
              fun (x4302 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4302) "isCaseSensitive")
            let (is_readonly : t -> bool) =
              fun (x4303 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4303) "isReadonly")
          end
        module OpenTextDocumentOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4305 : Ojs.t) -> x4305
            and t_to_js : t -> Ojs.t = fun (x4304 : Ojs.t) -> x4304
            let (language : t -> string) =
              fun (x4306 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4306) "language")
            let (set_language : t -> string -> unit) =
              fun (x4307 : t) ->
                fun (x4308 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4307) "language"
                    (Ojs.string_to_js x4308)
            let (content : t -> string) =
              fun (x4309 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4309) "content")
            let (set_content : t -> string -> unit) =
              fun (x4310 : t) ->
                fun (x4311 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4310) "content"
                    (Ojs.string_to_js x4311)
          end
        module WorkspaceFolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4313 : Ojs.t) -> x4313
            and t_to_js : t -> Ojs.t = fun (x4312 : Ojs.t) -> x4312
            let (uri : t -> Uri.t) =
              fun (x4314 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4314) "uri")
            let (set_uri : t -> Uri.t -> unit) =
              fun (x4315 : t) ->
                fun (x4316 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4315) "uri"
                    (Uri.t_to_js x4316)
            let (name : t -> string) =
              fun (x4317 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4317) "name")
            let (set_name : t -> string -> unit) =
              fun (x4318 : t) ->
                fun (x4319 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4318) "name"
                    (Ojs.string_to_js x4319)
          end
        let (fs : FileSystem.t) =
          FileSystem.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "fs")
        let (root_path : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "rootPath")
        let (workspace_folders : WorkspaceFolder.t list or_undefined) =
          or_undefined_of_js
            (fun (x4321 : Ojs.t) ->
               Ojs.list_of_js WorkspaceFolder.t_of_js x4321)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFolders")
        let (name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "name")
        let (workspace_file : Uri.t or_undefined) =
          or_undefined_of_js Uri.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFile")
        let (on_did_change_workspace_folders :
          WorkspaceFoldersChangeEvent.t Event.t) =
          Event.t_of_js WorkspaceFoldersChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeWorkspaceFolders")
        let (get_workspace_folder :
          uri:Uri.t -> WorkspaceFolder.t or_undefined) =
          fun ~uri:(x4326 : Uri.t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "getWorkspaceFolder" [|(Uri.t_to_js x4326)|])
        let (as_relative_path :
          Uri.t or_string -> ?include_workspace_folder:bool -> unit -> string)
          =
          fun (x4328 : Uri.t or_string) ->
            fun ?include_workspace_folder:(x4329 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x4333 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4333 "asRelativePath")
                     "apply"
                     [|x4333;((let x4330 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4330 "push"
                                    [|(or_string_to_js Uri.t_to_js x4328)|]);
                               (match x4329 with
                                | Some x4331 ->
                                    ignore
                                      (Ojs.call x4330 "push"
                                         [|(Ojs.bool_to_js x4331)|])
                                | None -> ());
                               x4330))|])
        let (update_workspace_folders :
          start:int ->
            delete_count:int or_null_or_undefined ->
              workspace_folders_to_add:WorkspaceFolder.t list -> bool)
          =
          fun ~start:(x4334 : int) ->
            fun ~delete_count:(x4335 : int or_null_or_undefined) ->
              fun ~workspace_folders_to_add:(x4336 : WorkspaceFolder.t list)
                ->
                Ojs.bool_of_js
                  (let x4340 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4340 "updateWorkspaceFolders")
                     "apply"
                     [|x4340;((let x4337 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4337 "push"
                                    [|(Ojs.int_to_js x4334)|]);
                               ignore
                                 (Ojs.call x4337 "push"
                                    [|(or_null_or_undefined_to_js
                                         Ojs.int_to_js x4335)|]);
                               List.iter
                                 (fun (x4338 : WorkspaceFolder.t) ->
                                    ignore
                                      (Ojs.call x4337 "push"
                                         [|(WorkspaceFolder.t_to_js x4338)|]))
                                 x4336;
                               x4337))|])
        let (create_file_system_watcher :
          GlobPattern.t ->
            ?ignore_create_events:bool ->
              ?ignore_change_events:bool ->
                ?ignore_delete_events:bool -> unit -> FileSystemWatcher.t)
          =
          fun (x4341 : GlobPattern.t) ->
            fun ?ignore_create_events:(x4342 : bool option) ->
              fun ?ignore_change_events:(x4343 : bool option) ->
                fun ?ignore_delete_events:(x4344 : bool option) ->
                  fun () ->
                    FileSystemWatcher.t_of_js
                      (let x4349 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4349 "createFileSystemWatcher")
                         "apply"
                         [|x4349;((let x4345 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4345 "push"
                                        [|(GlobPattern.t_to_js x4341)|]);
                                   (match x4342 with
                                    | Some x4348 ->
                                        ignore
                                          (Ojs.call x4345 "push"
                                             [|(Ojs.bool_to_js x4348)|])
                                    | None -> ());
                                   (match x4343 with
                                    | Some x4347 ->
                                        ignore
                                          (Ojs.call x4345 "push"
                                             [|(Ojs.bool_to_js x4347)|])
                                    | None -> ());
                                   (match x4344 with
                                    | Some x4346 ->
                                        ignore
                                          (Ojs.call x4345 "push"
                                             [|(Ojs.bool_to_js x4346)|])
                                    | None -> ());
                                   x4345))|])
        let (find_files :
          GlobPattern.t ->
            ?exclude:GlobPattern.t or_null ->
              ?max_results:int ->
                ?token:CancellationToken.t -> unit -> Uri.t list Promise.t)
          =
          fun (x4350 : GlobPattern.t) ->
            fun ?exclude:(x4351 : GlobPattern.t or_null option) ->
              fun ?max_results:(x4352 : int option) ->
                fun ?token:(x4353 : CancellationToken.t option) ->
                  fun () ->
                    Promise.t_of_js
                      (fun (x4360 : Ojs.t) ->
                         Ojs.list_of_js Uri.t_of_js x4360)
                      (let x4359 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call (Ojs.get_prop_ascii x4359 "findFiles")
                         "apply"
                         [|x4359;((let x4354 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4354 "push"
                                        [|(GlobPattern.t_to_js x4350)|]);
                                   (match x4351 with
                                    | Some x4357 ->
                                        ignore
                                          (Ojs.call x4354 "push"
                                             [|(or_null_to_js
                                                  GlobPattern.t_to_js x4357)|])
                                    | None -> ());
                                   (match x4352 with
                                    | Some x4356 ->
                                        ignore
                                          (Ojs.call x4354 "push"
                                             [|(Ojs.int_to_js x4356)|])
                                    | None -> ());
                                   (match x4353 with
                                    | Some x4355 ->
                                        ignore
                                          (Ojs.call x4354 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4355)|])
                                    | None -> ());
                                   x4354))|])
        let (save_all : ?include_untitled:bool -> unit -> bool Promise.t) =
          fun ?include_untitled:(x4362 : bool option) ->
            fun () ->
              Promise.t_of_js Ojs.bool_of_js
                (let x4365 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x4365 "saveAll") "apply"
                   [|x4365;((let x4363 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4362 with
                              | Some x4364 ->
                                  ignore
                                    (Ojs.call x4363 "push"
                                       [|(Ojs.bool_to_js x4364)|])
                              | None -> ());
                             x4363))|])
        let (apply_edit : WorkspaceEdit.t -> bool Promise.t) =
          fun (x4367 : WorkspaceEdit.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "applyEdit" [|(WorkspaceEdit.t_to_js x4367)|])
        let (text_documents : TextDocument.t list) =
          Ojs.list_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "textDocuments")
        let (open_text_document : Uri.t -> TextDocument.t Promise.t) =
          fun (x4370 : Uri.t) ->
            Promise.t_of_js TextDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "openTextDocument" [|(Uri.t_to_js x4370)|])
        let (open_text_document : string -> TextDocument.t Promise.t) =
          fun (x4372 : string) ->
            Promise.t_of_js TextDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "openTextDocument" [|(Ojs.string_to_js x4372)|])
        let (open_text_document :
          ?options:OpenTextDocumentOptions.t ->
            unit -> TextDocument.t Promise.t)
          =
          fun ?options:(x4374 : OpenTextDocumentOptions.t option) ->
            fun () ->
              Promise.t_of_js TextDocument.t_of_js
                (let x4377 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x4377 "openTextDocument")
                   "apply"
                   [|x4377;((let x4375 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4374 with
                              | Some x4376 ->
                                  ignore
                                    (Ojs.call x4375 "push"
                                       [|(OpenTextDocumentOptions.t_to_js
                                            x4376)|])
                              | None -> ());
                             x4375))|])
        let (register_text_document_content_provider :
          scheme:string ->
            provider:TextDocumentContentProvider.t -> Disposable.t)
          =
          fun ~scheme:(x4379 : string) ->
            fun ~provider:(x4380 : TextDocumentContentProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTextDocumentContentProvider"
                   [|(Ojs.string_to_js x4379);(TextDocumentContentProvider.t_to_js
                                                 x4380)|])
        let (on_did_open_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidOpenTextDocument")
        let (on_did_close_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCloseTextDocument")
        let (on_did_change_text_document : TextDocumentChangeEvent.t Event.t)
          =
          Event.t_of_js TextDocumentChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeTextDocument")
        let (on_will_save_text_document :
          TextDocumentWillSaveEvent.t Event.t) =
          Event.t_of_js TextDocumentWillSaveEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillSaveTextDocument")
        let (on_did_save_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidSaveTextDocument")
        let (on_will_create_files : FileWillCreateEvent.t Event.t) =
          Event.t_of_js FileWillCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillCreateFiles")
        let (on_did_create_files : FileCreateEvent.t Event.t) =
          Event.t_of_js FileCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCreateFiles")
        let (on_will_delete_files : FileWillDeleteEvent.t Event.t) =
          Event.t_of_js FileWillDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillDeleteFiles")
        let (on_did_delete_files : FileDeleteEvent.t Event.t) =
          Event.t_of_js FileDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidDeleteFiles")
        let (on_will_rename_files : FileWillRenameEvent.t Event.t) =
          Event.t_of_js FileWillRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillRenameFiles")
        let (on_did_rename_files : FileRenameEvent.t Event.t) =
          Event.t_of_js FileRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidRenameFiles")
        let (get_configuration :
          ?section:string or_undefined ->
            ?scope:ConfigurationScope.t or_null ->
              unit -> WorkspaceConfiguration.t)
          =
          fun ?section:(x4392 : string or_undefined option) ->
            fun ?scope:(x4393 : ConfigurationScope.t or_null option) ->
              fun () ->
                WorkspaceConfiguration.t_of_js
                  (let x4399 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4399 "getConfiguration")
                     "apply"
                     [|x4399;((let x4394 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4392 with
                                | Some x4397 ->
                                    ignore
                                      (Ojs.call x4394 "push"
                                         [|(or_undefined_to_js
                                              Ojs.string_to_js x4397)|])
                                | None -> ());
                               (match x4393 with
                                | Some x4395 ->
                                    ignore
                                      (Ojs.call x4394 "push"
                                         [|(or_null_to_js
                                              ConfigurationScope.t_to_js
                                              x4395)|])
                                | None -> ());
                               x4394))|])
        let (on_did_change_configuration :
          ConfigurationChangeEvent.t Event.t) =
          Event.t_of_js ConfigurationChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeConfiguration")
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x4401 : string) ->
            fun ~provider:(x4402 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x4401);(TaskProvider.t_to_js
                                                 Task.t_to_js x4402)|])
        let (register_file_system_provider :
          scheme:string ->
            provider:FileSystemProvider.t ->
              ?options:RegisterFileSystemProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun ~scheme:(x4404 : string) ->
            fun ~provider:(x4405 : FileSystemProvider.t) ->
              fun
                ?options:(x4406 : RegisterFileSystemProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4409 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "workspace" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4409 "registerFileSystemProvider")
                       "apply"
                       [|x4409;((let x4407 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4407 "push"
                                      [|(Ojs.string_to_js x4404)|]);
                                 ignore
                                   (Ojs.call x4407 "push"
                                      [|(FileSystemProvider.t_to_js x4405)|]);
                                 (match x4406 with
                                  | Some x4408 ->
                                      ignore
                                        (Ojs.call x4407 "push"
                                           [|(RegisterFileSystemProviderOptions.t_to_js
                                                x4408)|])
                                  | None -> ());
                                 x4407))|])
      end
    module Languages =
      struct
        let (get_languages : unit -> string list Promise.t) =
          fun () ->
            Promise.t_of_js
              (fun (x4410 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4410)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getLanguages" [||])
        let (set_text_document_language :
          document:TextDocument.t ->
            language_id:string -> TextDocument.t Promise.t)
          =
          fun ~document:(x4412 : TextDocument.t) ->
            fun ~language_id:(x4413 : string) ->
              Promise.t_of_js TextDocument.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setTextDocumentLanguage"
                   [|(TextDocument.t_to_js x4412);(Ojs.string_to_js x4413)|])
        let (match_ :
          selector:DocumentSelector.t -> document:TextDocument.t -> int) =
          fun ~selector:(x4415 : DocumentSelector.t) ->
            fun ~document:(x4416 : TextDocument.t) ->
              Ojs.int_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "match"
                   [|(DocumentSelector.t_to_js x4415);(TextDocument.t_to_js
                                                         x4416)|])
        let (on_did_change_diagnostics : DiagnosticChangeEvent.t Event.t) =
          Event.t_of_js DiagnosticChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "languages") "onDidChangeDiagnostics")
        let (get_diagnostics : resource:Uri.t -> Diagnostic.t list) =
          fun ~resource:(x4418 : Uri.t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [|(Uri.t_to_js x4418)|])
        let (get_diagnostics : unit -> (Uri.t * Diagnostic.t list) list) =
          fun () ->
            Ojs.list_of_js
              (fun (x4420 : Ojs.t) ->
                 let x4421 = x4420 in
                 ((Uri.t_of_js (Ojs.array_get x4421 0)),
                   (Ojs.list_of_js Diagnostic.t_of_js (Ojs.array_get x4421 1))))
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [||])
        let (create_diagnostic_collection :
          ?name:string -> unit -> DiagnosticCollection.t) =
          fun ?name:(x4423 : string option) ->
            fun () ->
              DiagnosticCollection.t_of_js
                (let x4426 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4426 "createDiagnosticCollection")
                   "apply"
                   [|x4426;((let x4424 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4423 with
                              | Some x4425 ->
                                  ignore
                                    (Ojs.call x4424 "push"
                                       [|(Ojs.string_to_js x4425)|])
                              | None -> ());
                             x4424))|])
        let (register_completion_item_provider :
          selector:DocumentSelector.t ->
            provider:CompletionItem.t CompletionItemProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4427 : DocumentSelector.t) ->
            fun ~provider:(x4428 : CompletionItem.t CompletionItemProvider.t)
              ->
              fun ~trigger_characters:(x4429 : string list) ->
                Disposable.t_of_js
                  (let x4433 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4433
                        "registerCompletionItemProvider") "apply"
                     [|x4433;((let x4430 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4430 "push"
                                    [|(DocumentSelector.t_to_js x4427)|]);
                               ignore
                                 (Ojs.call x4430 "push"
                                    [|(CompletionItemProvider.t_to_js
                                         CompletionItem.t_to_js x4428)|]);
                               List.iter
                                 (fun (x4431 : string) ->
                                    ignore
                                      (Ojs.call x4430 "push"
                                         [|(Ojs.string_to_js x4431)|])) x4429;
                               x4430))|])
        let (register_code_actions_provider :
          selector:DocumentSelector.t ->
            provider:CodeAction.t CodeActionProvider.t ->
              ?metadata:CodeActionProviderMetadata.t -> unit -> Disposable.t)
          =
          fun ~selector:(x4434 : DocumentSelector.t) ->
            fun ~provider:(x4435 : CodeAction.t CodeActionProvider.t) ->
              fun ?metadata:(x4436 : CodeActionProviderMetadata.t option) ->
                fun () ->
                  Disposable.t_of_js
                    (let x4440 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4440
                          "registerCodeActionsProvider") "apply"
                       [|x4440;((let x4437 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4437 "push"
                                      [|(DocumentSelector.t_to_js x4434)|]);
                                 ignore
                                   (Ojs.call x4437 "push"
                                      [|(CodeActionProvider.t_to_js
                                           CodeAction.t_to_js x4435)|]);
                                 (match x4436 with
                                  | Some x4438 ->
                                      ignore
                                        (Ojs.call x4437 "push"
                                           [|(CodeActionProviderMetadata.t_to_js
                                                x4438)|])
                                  | None -> ());
                                 x4437))|])
        let (register_code_lens_provider :
          selector:DocumentSelector.t ->
            provider:CodeLens.t CodeLensProvider.t -> Disposable.t)
          =
          fun ~selector:(x4441 : DocumentSelector.t) ->
            fun ~provider:(x4442 : CodeLens.t CodeLensProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCodeLensProvider"
                   [|(DocumentSelector.t_to_js x4441);(CodeLensProvider.t_to_js
                                                         CodeLens.t_to_js
                                                         x4442)|])
        let (register_definition_provider :
          selector:DocumentSelector.t ->
            provider:DefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4444 : DocumentSelector.t) ->
            fun ~provider:(x4445 : DefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4444);(DefinitionProvider.t_to_js
                                                         x4445)|])
        let (register_implementation_provider :
          selector:DocumentSelector.t ->
            provider:ImplementationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4446 : DocumentSelector.t) ->
            fun ~provider:(x4447 : ImplementationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerImplementationProvider"
                   [|(DocumentSelector.t_to_js x4446);(ImplementationProvider.t_to_js
                                                         x4447)|])
        let (register_type_definition_provider :
          selector:DocumentSelector.t ->
            provider:TypeDefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4448 : DocumentSelector.t) ->
            fun ~provider:(x4449 : TypeDefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerTypeDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4448);(TypeDefinitionProvider.t_to_js
                                                         x4449)|])
        let (register_declaration_provider :
          selector:DocumentSelector.t ->
            provider:DeclarationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4450 : DocumentSelector.t) ->
            fun ~provider:(x4451 : DeclarationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDeclarationProvider"
                   [|(DocumentSelector.t_to_js x4450);(DeclarationProvider.t_to_js
                                                         x4451)|])
        let (register_hover_provider :
          selector:DocumentSelector.t ->
            provider:HoverProvider.t -> Disposable.t)
          =
          fun ~selector:(x4452 : DocumentSelector.t) ->
            fun ~provider:(x4453 : HoverProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerHoverProvider"
                   [|(DocumentSelector.t_to_js x4452);(HoverProvider.t_to_js
                                                         x4453)|])
        let (register_evaluatable_expression_provider :
          selector:DocumentSelector.t ->
            provider:EvaluatableExpressionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4454 : DocumentSelector.t) ->
            fun ~provider:(x4455 : EvaluatableExpressionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerEvaluatableExpressionProvider"
                   [|(DocumentSelector.t_to_js x4454);(EvaluatableExpressionProvider.t_to_js
                                                         x4455)|])
        let (register_inline_values_provider :
          selector:DocumentSelector.t ->
            provider:InlineValuesProvider.t -> Disposable.t)
          =
          fun ~selector:(x4456 : DocumentSelector.t) ->
            fun ~provider:(x4457 : InlineValuesProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerInlineValuesProvider"
                   [|(DocumentSelector.t_to_js x4456);(InlineValuesProvider.t_to_js
                                                         x4457)|])
        let (register_document_highlight_provider :
          selector:DocumentSelector.t ->
            provider:DocumentHighlightProvider.t -> Disposable.t)
          =
          fun ~selector:(x4458 : DocumentSelector.t) ->
            fun ~provider:(x4459 : DocumentHighlightProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentHighlightProvider"
                   [|(DocumentSelector.t_to_js x4458);(DocumentHighlightProvider.t_to_js
                                                         x4459)|])
        let (register_document_symbol_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSymbolProvider.t ->
              ?meta_data:DocumentSymbolProviderMetadata.t ->
                unit -> Disposable.t)
          =
          fun ~selector:(x4460 : DocumentSelector.t) ->
            fun ~provider:(x4461 : DocumentSymbolProvider.t) ->
              fun
                ?meta_data:(x4462 : DocumentSymbolProviderMetadata.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4465 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4465
                          "registerDocumentSymbolProvider") "apply"
                       [|x4465;((let x4463 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4463 "push"
                                      [|(DocumentSelector.t_to_js x4460)|]);
                                 ignore
                                   (Ojs.call x4463 "push"
                                      [|(DocumentSymbolProvider.t_to_js x4461)|]);
                                 (match x4462 with
                                  | Some x4464 ->
                                      ignore
                                        (Ojs.call x4463 "push"
                                           [|(DocumentSymbolProviderMetadata.t_to_js
                                                x4464)|])
                                  | None -> ());
                                 x4463))|])
        let (register_workspace_symbol_provider :
          provider:SymbolInformation.t WorkspaceSymbolProvider.t ->
            Disposable.t)
          =
          fun
            ~provider:(x4466 : SymbolInformation.t WorkspaceSymbolProvider.t)
            ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "registerWorkspaceSymbolProvider"
                 [|(WorkspaceSymbolProvider.t_to_js SymbolInformation.t_to_js
                      x4466)|])
        let (register_reference_provider :
          selector:DocumentSelector.t ->
            provider:ReferenceProvider.t -> Disposable.t)
          =
          fun ~selector:(x4468 : DocumentSelector.t) ->
            fun ~provider:(x4469 : ReferenceProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerReferenceProvider"
                   [|(DocumentSelector.t_to_js x4468);(ReferenceProvider.t_to_js
                                                         x4469)|])
        let (register_rename_provider :
          selector:DocumentSelector.t ->
            provider:RenameProvider.t -> Disposable.t)
          =
          fun ~selector:(x4470 : DocumentSelector.t) ->
            fun ~provider:(x4471 : RenameProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerRenameProvider"
                   [|(DocumentSelector.t_to_js x4470);(RenameProvider.t_to_js
                                                         x4471)|])
        let (register_document_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4472 : DocumentSelector.t) ->
            fun ~provider:(x4473 : DocumentSemanticTokensProvider.t) ->
              fun ~legend:(x4474 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4472);(DocumentSemanticTokensProvider.t_to_js
                                                           x4473);(SemanticTokensLegend.t_to_js
                                                                    x4474)|])
        let (register_document_range_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4475 : DocumentSelector.t) ->
            fun ~provider:(x4476 : DocumentRangeSemanticTokensProvider.t) ->
              fun ~legend:(x4477 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentRangeSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4475);(DocumentRangeSemanticTokensProvider.t_to_js
                                                           x4476);(SemanticTokensLegend.t_to_js
                                                                    x4477)|])
        let (register_document_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4478 : DocumentSelector.t) ->
            fun ~provider:(x4479 : DocumentFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4478);(DocumentFormattingEditProvider.t_to_js
                                                         x4479)|])
        let (register_document_range_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4480 : DocumentSelector.t) ->
            fun ~provider:(x4481 : DocumentRangeFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentRangeFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4480);(DocumentRangeFormattingEditProvider.t_to_js
                                                         x4481)|])
        let (register_on_type_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:OnTypeFormattingEditProvider.t ->
              first_trigger_character:string ->
                more_trigger_character:string list -> Disposable.t)
          =
          fun ~selector:(x4482 : DocumentSelector.t) ->
            fun ~provider:(x4483 : OnTypeFormattingEditProvider.t) ->
              fun ~first_trigger_character:(x4484 : string) ->
                fun ~more_trigger_character:(x4485 : string list) ->
                  Disposable.t_of_js
                    (let x4488 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4488
                          "registerOnTypeFormattingEditProvider") "apply"
                       [|x4488;((let x4486 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4486 "push"
                                      [|(DocumentSelector.t_to_js x4482)|]);
                                 ignore
                                   (Ojs.call x4486 "push"
                                      [|(OnTypeFormattingEditProvider.t_to_js
                                           x4483)|]);
                                 ignore
                                   (Ojs.call x4486 "push"
                                      [|(Ojs.string_to_js x4484)|]);
                                 List.iter
                                   (fun (x4487 : string) ->
                                      ignore
                                        (Ojs.call x4486 "push"
                                           [|(Ojs.string_to_js x4487)|]))
                                   x4485;
                                 x4486))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4489 : DocumentSelector.t) ->
            fun ~provider:(x4490 : SignatureHelpProvider.t) ->
              fun ~trigger_characters:(x4491 : string list) ->
                Disposable.t_of_js
                  (let x4494 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4494
                        "registerSignatureHelpProvider") "apply"
                     [|x4494;((let x4492 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4492 "push"
                                    [|(DocumentSelector.t_to_js x4489)|]);
                               ignore
                                 (Ojs.call x4492 "push"
                                    [|(SignatureHelpProvider.t_to_js x4490)|]);
                               List.iter
                                 (fun (x4493 : string) ->
                                    ignore
                                      (Ojs.call x4492 "push"
                                         [|(Ojs.string_to_js x4493)|])) x4491;
                               x4492))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              metadata:SignatureHelpProviderMetadata.t -> Disposable.t)
          =
          fun ~selector:(x4495 : DocumentSelector.t) ->
            fun ~provider:(x4496 : SignatureHelpProvider.t) ->
              fun ~metadata:(x4497 : SignatureHelpProviderMetadata.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerSignatureHelpProvider"
                     [|(DocumentSelector.t_to_js x4495);(SignatureHelpProvider.t_to_js
                                                           x4496);(SignatureHelpProviderMetadata.t_to_js
                                                                    x4497)|])
        let (register_document_link_provider :
          selector:DocumentSelector.t ->
            provider:DocumentLink.t DocumentLinkProvider.t -> Disposable.t)
          =
          fun ~selector:(x4498 : DocumentSelector.t) ->
            fun ~provider:(x4499 : DocumentLink.t DocumentLinkProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentLinkProvider"
                   [|(DocumentSelector.t_to_js x4498);(DocumentLinkProvider.t_to_js
                                                         DocumentLink.t_to_js
                                                         x4499)|])
        let (register_color_provider :
          selector:DocumentSelector.t ->
            provider:DocumentColorProvider.t -> Disposable.t)
          =
          fun ~selector:(x4501 : DocumentSelector.t) ->
            fun ~provider:(x4502 : DocumentColorProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerColorProvider"
                   [|(DocumentSelector.t_to_js x4501);(DocumentColorProvider.t_to_js
                                                         x4502)|])
        let (register_folding_range_provider :
          selector:DocumentSelector.t ->
            provider:FoldingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4503 : DocumentSelector.t) ->
            fun ~provider:(x4504 : FoldingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerFoldingRangeProvider"
                   [|(DocumentSelector.t_to_js x4503);(FoldingRangeProvider.t_to_js
                                                         x4504)|])
        let (register_selection_range_provider :
          selector:DocumentSelector.t ->
            provider:SelectionRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4505 : DocumentSelector.t) ->
            fun ~provider:(x4506 : SelectionRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerSelectionRangeProvider"
                   [|(DocumentSelector.t_to_js x4505);(SelectionRangeProvider.t_to_js
                                                         x4506)|])
        let (register_call_hierarchy_provider :
          selector:DocumentSelector.t ->
            provider:CallHierarchyProvider.t -> Disposable.t)
          =
          fun ~selector:(x4507 : DocumentSelector.t) ->
            fun ~provider:(x4508 : CallHierarchyProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCallHierarchyProvider"
                   [|(DocumentSelector.t_to_js x4507);(CallHierarchyProvider.t_to_js
                                                         x4508)|])
        let (register_linked_editing_range_provider :
          selector:DocumentSelector.t ->
            provider:LinkedEditingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4509 : DocumentSelector.t) ->
            fun ~provider:(x4510 : LinkedEditingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerLinkedEditingRangeProvider"
                   [|(DocumentSelector.t_to_js x4509);(LinkedEditingRangeProvider.t_to_js
                                                         x4510)|])
        let (set_language_configuration :
          language:string ->
            configuration:LanguageConfiguration.t -> Disposable.t)
          =
          fun ~language:(x4511 : string) ->
            fun ~configuration:(x4512 : LanguageConfiguration.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setLanguageConfiguration"
                   [|(Ojs.string_to_js x4511);(LanguageConfiguration.t_to_js
                                                 x4512)|])
      end
    module SourceControlInputBox =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4514 : Ojs.t) -> x4514
        and t_to_js : t -> Ojs.t = fun (x4513 : Ojs.t) -> x4513
        let (value : t -> string) =
          fun (x4515 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4515) "value")
        let (set_value : t -> string -> unit) =
          fun (x4516 : t) ->
            fun (x4517 : string) ->
              Ojs.set_prop_ascii (t_to_js x4516) "value"
                (Ojs.string_to_js x4517)
        let (placeholder : t -> string) =
          fun (x4518 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4518) "placeholder")
        let (set_placeholder : t -> string -> unit) =
          fun (x4519 : t) ->
            fun (x4520 : string) ->
              Ojs.set_prop_ascii (t_to_js x4519) "placeholder"
                (Ojs.string_to_js x4520)
        let (visible : t -> bool) =
          fun (x4521 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4521) "visible")
        let (set_visible : t -> bool -> unit) =
          fun (x4522 : t) ->
            fun (x4523 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4522) "visible"
                (Ojs.bool_to_js x4523)
      end
    module QuickDiffProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4525 : Ojs.t) -> x4525
        and t_to_js : t -> Ojs.t = fun (x4524 : Ojs.t) -> x4524
        let (provide_original_resource :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> Uri.t ProviderResult.t)
          =
          fun (x4528 : t) ->
            fun ~uri:(x4526 : Uri.t) ->
              fun ~token:(x4527 : CancellationToken.t) ->
                ProviderResult.t_of_js Uri.t_of_js
                  (Ojs.call (t_to_js x4528) "provideOriginalResource"
                     [|(Uri.t_to_js x4526);(CancellationToken.t_to_js x4527)|])
      end
    module SourceControlResourceThemableDecorations =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4531 : Ojs.t) -> x4531
        and t_to_js : t -> Ojs.t = fun (x4530 : Ojs.t) -> x4530
        let (icon_path : t -> Uri.t or_string) =
          fun (x4532 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4532) "iconPath")
      end
    module SourceControlResourceDecorations =
      struct
        include struct include SourceControlResourceThemableDecorations end
        let (strike_through : t -> bool) =
          fun (x4534 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4534) "strikeThrough")
        let (faded : t -> bool) =
          fun (x4535 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4535) "faded")
        let (tooltip : t -> string) =
          fun (x4536 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4536) "tooltip")
        let (light : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4537 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4537) "light")
        let (dark : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4538 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4538) "dark")
      end
    module SourceControlResourceState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4540 : Ojs.t) -> x4540
        and t_to_js : t -> Ojs.t = fun (x4539 : Ojs.t) -> x4539
        let (resource_uri : t -> Uri.t) =
          fun (x4541 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4541) "resourceUri")
        let (command : t -> Command.t) =
          fun (x4542 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x4542) "command")
        let (decorations : t -> SourceControlResourceDecorations.t) =
          fun (x4543 : t) ->
            SourceControlResourceDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4543) "decorations")
        let (context_value : t -> string) =
          fun (x4544 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4544) "contextValue")
      end
    module SourceControlResourceGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4546 : Ojs.t) -> x4546
        and t_to_js : t -> Ojs.t = fun (x4545 : Ojs.t) -> x4545
        let (id : t -> string) =
          fun (x4547 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4547) "id")
        let (label : t -> string) =
          fun (x4548 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4548) "label")
        let (set_label : t -> string -> unit) =
          fun (x4549 : t) ->
            fun (x4550 : string) ->
              Ojs.set_prop_ascii (t_to_js x4549) "label"
                (Ojs.string_to_js x4550)
        let (hide_when_empty : t -> bool) =
          fun (x4551 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4551) "hideWhenEmpty")
        let (set_hide_when_empty : t -> bool -> unit) =
          fun (x4552 : t) ->
            fun (x4553 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4552) "hideWhenEmpty"
                (Ojs.bool_to_js x4553)
        let (resource_states : t -> SourceControlResourceState.t list) =
          fun (x4554 : t) ->
            Ojs.list_of_js SourceControlResourceState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4554) "resourceStates")
        let (set_resource_states :
          t -> SourceControlResourceState.t list -> unit) =
          fun (x4556 : t) ->
            fun (x4557 : SourceControlResourceState.t list) ->
              Ojs.set_prop_ascii (t_to_js x4556) "resourceStates"
                (Ojs.list_to_js SourceControlResourceState.t_to_js x4557)
        let (dispose : t -> unit) =
          fun (x4559 : t) -> ignore (Ojs.call (t_to_js x4559) "dispose" [||])
      end
    module SourceControl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4561 : Ojs.t) -> x4561
        and t_to_js : t -> Ojs.t = fun (x4560 : Ojs.t) -> x4560
        let (id : t -> string) =
          fun (x4562 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4562) "id")
        let (label : t -> string) =
          fun (x4563 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4563) "label")
        let (root_uri : t -> Uri.t or_undefined) =
          fun (x4564 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4564) "rootUri")
        let (input_box : t -> SourceControlInputBox.t) =
          fun (x4566 : t) ->
            SourceControlInputBox.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4566) "inputBox")
        let (count : t -> int) =
          fun (x4567 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4567) "count")
        let (set_count : t -> int -> unit) =
          fun (x4568 : t) ->
            fun (x4569 : int) ->
              Ojs.set_prop_ascii (t_to_js x4568) "count"
                (Ojs.int_to_js x4569)
        let (quick_diff_provider : t -> QuickDiffProvider.t) =
          fun (x4570 : t) ->
            QuickDiffProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4570) "quickDiffProvider")
        let (set_quick_diff_provider : t -> QuickDiffProvider.t -> unit) =
          fun (x4571 : t) ->
            fun (x4572 : QuickDiffProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x4571) "quickDiffProvider"
                (QuickDiffProvider.t_to_js x4572)
        let (commit_template : t -> string) =
          fun (x4573 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4573) "commitTemplate")
        let (set_commit_template : t -> string -> unit) =
          fun (x4574 : t) ->
            fun (x4575 : string) ->
              Ojs.set_prop_ascii (t_to_js x4574) "commitTemplate"
                (Ojs.string_to_js x4575)
        let (accept_input_command : t -> Command.t) =
          fun (x4576 : t) ->
            Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4576) "acceptInputCommand")
        let (set_accept_input_command : t -> Command.t -> unit) =
          fun (x4577 : t) ->
            fun (x4578 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x4577) "acceptInputCommand"
                (Command.t_to_js x4578)
        let (status_bar_commands : t -> Command.t list) =
          fun (x4579 : t) ->
            Ojs.list_of_js Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4579) "statusBarCommands")
        let (set_status_bar_commands : t -> Command.t list -> unit) =
          fun (x4581 : t) ->
            fun (x4582 : Command.t list) ->
              Ojs.set_prop_ascii (t_to_js x4581) "statusBarCommands"
                (Ojs.list_to_js Command.t_to_js x4582)
        let (create_resource_group :
          t -> id:string -> label:string -> SourceControlResourceGroup.t) =
          fun (x4586 : t) ->
            fun ~id:(x4584 : string) ->
              fun ~label:(x4585 : string) ->
                SourceControlResourceGroup.t_of_js
                  (Ojs.call (t_to_js x4586) "createResourceGroup"
                     [|(Ojs.string_to_js x4584);(Ojs.string_to_js x4585)|])
        let (dispose : t -> unit) =
          fun (x4587 : t) -> ignore (Ojs.call (t_to_js x4587) "dispose" [||])
      end
    module Scm =
      struct
        let (input_box : SourceControlInputBox.t) =
          SourceControlInputBox.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "scm") "inputBox")
        let (create_source_control :
          id:string ->
            label:string -> ?root_uri:Uri.t -> unit -> SourceControl.t)
          =
          fun ~id:(x4588 : string) ->
            fun ~label:(x4589 : string) ->
              fun ?root_uri:(x4590 : Uri.t option) ->
                fun () ->
                  SourceControl.t_of_js
                    (let x4593 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "scm" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4593 "createSourceControl")
                       "apply"
                       [|x4593;((let x4591 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4591 "push"
                                      [|(Ojs.string_to_js x4588)|]);
                                 ignore
                                   (Ojs.call x4591 "push"
                                      [|(Ojs.string_to_js x4589)|]);
                                 (match x4590 with
                                  | Some x4592 ->
                                      ignore
                                        (Ojs.call x4591 "push"
                                           [|(Uri.t_to_js x4592)|])
                                  | None -> ());
                                 x4591))|])
      end
    module DebugProtocolMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4595 : Ojs.t) -> x4595
        and t_to_js : t -> Ojs.t = fun (x4594 : Ojs.t) -> x4594
      end
    module DebugProtocolSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4597 : Ojs.t) -> x4597
        and t_to_js : t -> Ojs.t = fun (x4596 : Ojs.t) -> x4596
      end
    module Breakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4599 : Ojs.t) -> x4599
        and t_to_js : t -> Ojs.t = fun (x4598 : Ojs.t) -> x4598
        let (id : t -> string) =
          fun (x4600 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4600) "id")
        let (enabled : t -> bool) =
          fun (x4601 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4601) "enabled")
        let (condition : t -> string) =
          fun (x4602 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4602) "condition")
        let (hit_condition : t -> string) =
          fun (x4603 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4603) "hitCondition")
        let (log_message : t -> string) =
          fun (x4604 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4604) "logMessage")
        let (create :
          ?enabled:bool ->
            ?condition:string ->
              ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ?enabled:(x4605 : bool option) ->
            fun ?condition:(x4606 : string option) ->
              fun ?hit_condition:(x4607 : string option) ->
                fun ?log_message:(x4608 : string option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "Breakpoint")
                         (let x4609 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x4605 with
                           | Some x4613 ->
                               ignore
                                 (Ojs.call x4609 "push"
                                    [|(Ojs.bool_to_js x4613)|])
                           | None -> ());
                          (match x4606 with
                           | Some x4612 ->
                               ignore
                                 (Ojs.call x4609 "push"
                                    [|(Ojs.string_to_js x4612)|])
                           | None -> ());
                          (match x4607 with
                           | Some x4611 ->
                               ignore
                                 (Ojs.call x4609 "push"
                                    [|(Ojs.string_to_js x4611)|])
                           | None -> ());
                          (match x4608 with
                           | Some x4610 ->
                               ignore
                                 (Ojs.call x4609 "push"
                                    [|(Ojs.string_to_js x4610)|])
                           | None -> ());
                          x4609))
      end
    module SourceBreakpoint =
      struct
        include struct include Breakpoint end
        let (location : t -> Location.t) =
          fun (x4614 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x4614) "location")
        let (create :
          location:Location.t ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~location:(x4615 : Location.t) ->
            fun ?enabled:(x4616 : bool option) ->
              fun ?condition:(x4617 : string option) ->
                fun ?hit_condition:(x4618 : string option) ->
                  fun ?log_message:(x4619 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SourceBreakpoint")
                           (let x4620 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4620 "push"
                                 [|(Location.t_to_js x4615)|]);
                            (match x4616 with
                             | Some x4624 ->
                                 ignore
                                   (Ojs.call x4620 "push"
                                      [|(Ojs.bool_to_js x4624)|])
                             | None -> ());
                            (match x4617 with
                             | Some x4623 ->
                                 ignore
                                   (Ojs.call x4620 "push"
                                      [|(Ojs.string_to_js x4623)|])
                             | None -> ());
                            (match x4618 with
                             | Some x4622 ->
                                 ignore
                                   (Ojs.call x4620 "push"
                                      [|(Ojs.string_to_js x4622)|])
                             | None -> ());
                            (match x4619 with
                             | Some x4621 ->
                                 ignore
                                   (Ojs.call x4620 "push"
                                      [|(Ojs.string_to_js x4621)|])
                             | None -> ());
                            x4620))
      end
    module FunctionBreakpoint =
      struct
        include struct include Breakpoint end
        let (function_name : t -> string) =
          fun (x4625 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4625) "functionName")
        let (create :
          function_name:string ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~function_name:(x4626 : string) ->
            fun ?enabled:(x4627 : bool option) ->
              fun ?condition:(x4628 : string option) ->
                fun ?hit_condition:(x4629 : string option) ->
                  fun ?log_message:(x4630 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "FunctionBreakpoint")
                           (let x4631 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4631 "push"
                                 [|(Ojs.string_to_js x4626)|]);
                            (match x4627 with
                             | Some x4635 ->
                                 ignore
                                   (Ojs.call x4631 "push"
                                      [|(Ojs.bool_to_js x4635)|])
                             | None -> ());
                            (match x4628 with
                             | Some x4634 ->
                                 ignore
                                   (Ojs.call x4631 "push"
                                      [|(Ojs.string_to_js x4634)|])
                             | None -> ());
                            (match x4629 with
                             | Some x4633 ->
                                 ignore
                                   (Ojs.call x4631 "push"
                                      [|(Ojs.string_to_js x4633)|])
                             | None -> ());
                            (match x4630 with
                             | Some x4632 ->
                                 ignore
                                   (Ojs.call x4631 "push"
                                      [|(Ojs.string_to_js x4632)|])
                             | None -> ());
                            x4631))
        include struct include Breakpoint end
      end
    module BreakpointsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4637 : Ojs.t) -> x4637
        and t_to_js : t -> Ojs.t = fun (x4636 : Ojs.t) -> x4636
        let (added : t -> Breakpoint.t list) =
          fun (x4638 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4638) "added")
        let (removed : t -> Breakpoint.t list) =
          fun (x4640 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4640) "removed")
        let (changed : t -> Breakpoint.t list) =
          fun (x4642 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4642) "changed")
      end
    module DebugProtocolBreakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4645 : Ojs.t) -> x4645
        and t_to_js : t -> Ojs.t = fun (x4644 : Ojs.t) -> x4644
      end
    module DebugConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4647 : Ojs.t) -> x4647
        and t_to_js : t -> Ojs.t = fun (x4646 : Ojs.t) -> x4646
        let (type_ : t -> string) =
          fun (x4648 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4648) "type")
        let (set_type : t -> string -> unit) =
          fun (x4649 : t) ->
            fun (x4650 : string) ->
              Ojs.set_prop_ascii (t_to_js x4649) "type"
                (Ojs.string_to_js x4650)
        let (name : t -> string) =
          fun (x4651 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4651) "name")
        let (set_name : t -> string -> unit) =
          fun (x4652 : t) ->
            fun (x4653 : string) ->
              Ojs.set_prop_ascii (t_to_js x4652) "name"
                (Ojs.string_to_js x4653)
        let (request : t -> string) =
          fun (x4654 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4654) "request")
        let (set_request : t -> string -> unit) =
          fun (x4655 : t) ->
            fun (x4656 : string) ->
              Ojs.set_prop_ascii (t_to_js x4655) "request"
                (Ojs.string_to_js x4656)
        let (get : t -> string -> any) =
          fun (x4657 : t) ->
            fun (x4658 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x4657) (Ojs.string_to_js x4658))
        let (set : t -> string -> any -> unit) =
          fun (x4659 : t) ->
            fun (x4660 : string) ->
              fun (x4661 : any) ->
                Ojs.set_prop (t_to_js x4659) (Ojs.string_to_js x4660)
                  (any_to_js x4661)
      end
    module DebugSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4663 : Ojs.t) -> x4663
        and t_to_js : t -> Ojs.t = fun (x4662 : Ojs.t) -> x4662
        let (id : t -> string) =
          fun (x4664 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4664) "id")
        let (type_ : t -> string) =
          fun (x4665 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4665) "type")
        let (name : t -> string) =
          fun (x4666 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4666) "name")
        let (set_name : t -> string -> unit) =
          fun (x4667 : t) ->
            fun (x4668 : string) ->
              Ojs.set_prop_ascii (t_to_js x4667) "name"
                (Ojs.string_to_js x4668)
        let (workspace_folder : t -> WorkspaceFolder.t or_undefined) =
          fun (x4669 : t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4669) "workspaceFolder")
        let (configuration : t -> DebugConfiguration.t) =
          fun (x4671 : t) ->
            DebugConfiguration.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4671) "configuration")
        let (custom_request :
          t -> command:string -> ?args:any -> unit -> any Promise.t) =
          fun (x4676 : t) ->
            fun ~command:(x4672 : string) ->
              fun ?args:(x4673 : any option) ->
                fun () ->
                  Promise.t_of_js any_of_js
                    (let x4677 = t_to_js x4676 in
                     Ojs.call (Ojs.get_prop_ascii x4677 "customRequest")
                       "apply"
                       [|x4677;((let x4674 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4674 "push"
                                      [|(Ojs.string_to_js x4672)|]);
                                 (match x4673 with
                                  | Some x4675 ->
                                      ignore
                                        (Ojs.call x4674 "push"
                                           [|(any_to_js x4675)|])
                                  | None -> ());
                                 x4674))|])
        let (get_debug_protocol_breakpoint :
          t ->
            breakpoint:Breakpoint.t ->
              DebugProtocolBreakpoint.t or_undefined Promise.t)
          =
          fun (x4680 : t) ->
            fun ~breakpoint:(x4679 : Breakpoint.t) ->
              Promise.t_of_js
                (fun (x4681 : Ojs.t) ->
                   or_undefined_of_js DebugProtocolBreakpoint.t_of_js x4681)
                (Ojs.call (t_to_js x4680) "getDebugProtocolBreakpoint"
                   [|(Breakpoint.t_to_js x4679)|])
      end
    module DebugSessionCustomEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4684 : Ojs.t) -> x4684
        and t_to_js : t -> Ojs.t = fun (x4683 : Ojs.t) -> x4683
        let (session : t -> DebugSession.t) =
          fun (x4685 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4685) "session")
        let (event : t -> string) =
          fun (x4686 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4686) "event")
        let (body : t -> any) =
          fun (x4687 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x4687) "body")
      end
    module DebugConfigurationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4689 : Ojs.t) -> x4689
        and t_to_js : t -> Ojs.t = fun (x4688 : Ojs.t) -> x4688
        let (provide_debug_configurations :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              ?token:CancellationToken.t ->
                unit -> DebugConfiguration.t list ProviderResult.t)
          =
          fun (x4695 : t) ->
            fun ~folder:(x4690 : WorkspaceFolder.t or_undefined) ->
              fun ?token:(x4691 : CancellationToken.t option) ->
                fun () ->
                  ProviderResult.t_of_js
                    (fun (x4697 : Ojs.t) ->
                       Ojs.list_of_js DebugConfiguration.t_of_js x4697)
                    (let x4696 = t_to_js x4695 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4696 "provideDebugConfigurations")
                       "apply"
                       [|x4696;((let x4692 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4692 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4690)|]);
                                 (match x4691 with
                                  | Some x4693 ->
                                      ignore
                                        (Ojs.call x4692 "push"
                                           [|(CancellationToken.t_to_js x4693)|])
                                  | None -> ());
                                 x4692))|])
        let (resolve_debug_configuration :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4705 : t) ->
            fun ~folder:(x4699 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4700 : DebugConfiguration.t) ->
                fun ?token:(x4701 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4706 = t_to_js x4705 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4706
                            "resolveDebugConfiguration") "apply"
                         [|x4706;((let x4702 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4702 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4699)|]);
                                   ignore
                                     (Ojs.call x4702 "push"
                                        [|(DebugConfiguration.t_to_js x4700)|]);
                                   (match x4701 with
                                    | Some x4703 ->
                                        ignore
                                          (Ojs.call x4702 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4703)|])
                                    | None -> ());
                                   x4702))|])
        let (resolve_debug_configuration_with_substituted_variables :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4714 : t) ->
            fun ~folder:(x4708 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4709 : DebugConfiguration.t) ->
                fun ?token:(x4710 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4715 = t_to_js x4714 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4715
                            "resolveDebugConfigurationWithSubstitutedVariables")
                         "apply"
                         [|x4715;((let x4711 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4711 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4708)|]);
                                   ignore
                                     (Ojs.call x4711 "push"
                                        [|(DebugConfiguration.t_to_js x4709)|]);
                                   (match x4710 with
                                    | Some x4712 ->
                                        ignore
                                          (Ojs.call x4711 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4712)|])
                                    | None -> ());
                                   x4711))|])
      end
    module DebugAdapterExecutableOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4718 : Ojs.t) -> x4718
        and t_to_js : t -> Ojs.t = fun (x4717 : Ojs.t) -> x4717
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4720 : Ojs.t) -> x4720
            and t_to_js : t -> Ojs.t = fun (x4719 : Ojs.t) -> x4719
            let (get : t -> string -> string) =
              fun (x4721 : t) ->
                fun (x4722 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x4721) (Ojs.string_to_js x4722))
            let (set : t -> string -> string -> unit) =
              fun (x4723 : t) ->
                fun (x4724 : string) ->
                  fun (x4725 : string) ->
                    Ojs.set_prop (t_to_js x4723) (Ojs.string_to_js x4724)
                      (Ojs.string_to_js x4725)
          end
        let (env : t -> Env.t) =
          fun (x4726 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x4726) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x4727 : t) ->
            fun (x4728 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x4727) "env" (Env.t_to_js x4728)
        let (cwd : t -> string) =
          fun (x4729 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4729) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x4730 : t) ->
            fun (x4731 : string) ->
              Ojs.set_prop_ascii (t_to_js x4730) "cwd"
                (Ojs.string_to_js x4731)
      end
    module DebugAdapterExecutable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4733 : Ojs.t) -> x4733
        and t_to_js : t -> Ojs.t = fun (x4732 : Ojs.t) -> x4732
        let (create :
          command:string ->
            ?args:string list ->
              ?options:DebugAdapterExecutableOptions.t -> unit -> t)
          =
          fun ~command:(x4734 : string) ->
            fun ?args:(x4735 : string list option) ->
              fun ?options:(x4736 : DebugAdapterExecutableOptions.t option)
                ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "DebugAdapterExecutable")
                       (let x4737 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x4737 "push" [|(Ojs.string_to_js x4734)|]);
                        (match x4735 with
                         | Some x4739 ->
                             ignore
                               (Ojs.call x4737 "push"
                                  [|(Ojs.list_to_js Ojs.string_to_js x4739)|])
                         | None -> ());
                        (match x4736 with
                         | Some x4738 ->
                             ignore
                               (Ojs.call x4737 "push"
                                  [|(DebugAdapterExecutableOptions.t_to_js
                                       x4738)|])
                         | None -> ());
                        x4737))
        let (command : t -> string) =
          fun (x4741 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4741) "command")
        let (args : t -> string list) =
          fun (x4742 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4742) "args")
        let (options : t -> DebugAdapterExecutableOptions.t) =
          fun (x4744 : t) ->
            DebugAdapterExecutableOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4744) "options")
      end
    module DebugAdapterServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4746 : Ojs.t) -> x4746
        and t_to_js : t -> Ojs.t = fun (x4745 : Ojs.t) -> x4745
        let (port : t -> int) =
          fun (x4747 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4747) "port")
        let (host : t -> string) =
          fun (x4748 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4748) "host")
        let (create : port:int -> ?host:string -> unit -> t) =
          fun ~port:(x4749 : int) ->
            fun ?host:(x4750 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DebugAdapterServer")
                     (let x4751 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4751 "push" [|(Ojs.int_to_js x4749)|]);
                      (match x4750 with
                       | Some x4752 ->
                           ignore
                             (Ojs.call x4751 "push"
                                [|(Ojs.string_to_js x4752)|])
                       | None -> ());
                      x4751))
      end
    module DebugAdapterNamedPipeServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4754 : Ojs.t) -> x4754
        and t_to_js : t -> Ojs.t = fun (x4753 : Ojs.t) -> x4753
        let (path : t -> string) =
          fun (x4755 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4755) "path")
        let (create : path:string -> t) =
          fun ~path:(x4756 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterNamedPipeServer")
                 [|(Ojs.string_to_js x4756)|])
      end
    module DebugAdapter =
      struct
        include struct include Disposable end
        let (on_did_send_message : t -> DebugProtocolMessage.t Event.t) =
          fun (x4757 : t) ->
            Event.t_of_js DebugProtocolMessage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4757) "onDidSendMessage")
        let (handle_message : t -> message:DebugProtocolMessage.t -> unit) =
          fun (x4760 : t) ->
            fun ~message:(x4759 : DebugProtocolMessage.t) ->
              ignore
                (Ojs.call (t_to_js x4760) "handleMessage"
                   [|(DebugProtocolMessage.t_to_js x4759)|])
      end
    module DebugAdapterInlineImplementation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4762 : Ojs.t) -> x4762
        and t_to_js : t -> Ojs.t = fun (x4761 : Ojs.t) -> x4761
        let (create : implementation:DebugAdapter.t -> t) =
          fun ~implementation:(x4763 : DebugAdapter.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterInlineImplementation")
                 [|(DebugAdapter.t_to_js x4763)|])
      end
    module DebugAdapterDescriptor =
      struct
        type t =
          (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
            DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4769 : Ojs.t) ->
            union4_of_js DebugAdapterExecutable.t_of_js
              DebugAdapterInlineImplementation.t_of_js
              DebugAdapterNamedPipeServer.t_of_js DebugAdapterServer.t_of_js
              x4769
        and t_to_js : t -> Ojs.t =
          fun
            (x4764 :
              (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
                DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4)
            ->
            union4_to_js DebugAdapterExecutable.t_to_js
              DebugAdapterInlineImplementation.t_to_js
              DebugAdapterNamedPipeServer.t_to_js DebugAdapterServer.t_to_js
              x4764
      end
    module DebugAdapterDescriptorFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4775 : Ojs.t) -> x4775
        and t_to_js : t -> Ojs.t = fun (x4774 : Ojs.t) -> x4774
        let (create_debug_adapter_descriptor :
          t ->
            session:DebugSession.t ->
              executable:DebugAdapterExecutable.t or_undefined ->
                DebugAdapterDescriptor.t ProviderResult.t)
          =
          fun (x4779 : t) ->
            fun ~session:(x4776 : DebugSession.t) ->
              fun ~executable:(x4777 : DebugAdapterExecutable.t or_undefined)
                ->
                ProviderResult.t_of_js DebugAdapterDescriptor.t_of_js
                  (Ojs.call (t_to_js x4779) "createDebugAdapterDescriptor"
                     [|(DebugSession.t_to_js x4776);(or_undefined_to_js
                                                       DebugAdapterExecutable.t_to_js
                                                       x4777)|])
      end
    module DebugAdapterTracker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4782 : Ojs.t) -> x4782
        and t_to_js : t -> Ojs.t = fun (x4781 : Ojs.t) -> x4781
        let (on_will_start_session : t -> unit) =
          fun (x4783 : t) ->
            ignore (Ojs.call (t_to_js x4783) "onWillStartSession" [||])
        let (on_will_receive_message : t -> message:any -> unit) =
          fun (x4785 : t) ->
            fun ~message:(x4784 : any) ->
              ignore
                (Ojs.call (t_to_js x4785) "onWillReceiveMessage"
                   [|(any_to_js x4784)|])
        let (on_did_send_message : t -> message:any -> unit) =
          fun (x4787 : t) ->
            fun ~message:(x4786 : any) ->
              ignore
                (Ojs.call (t_to_js x4787) "onDidSendMessage"
                   [|(any_to_js x4786)|])
        let (on_will_stop_session : t -> unit) =
          fun (x4788 : t) ->
            ignore (Ojs.call (t_to_js x4788) "onWillStopSession" [||])
        let (on_error : t -> error:Error.t -> unit) =
          fun (x4790 : t) ->
            fun ~error:(x4789 : Error.t) ->
              ignore
                (Ojs.call (t_to_js x4790) "onError" [|(Error.t_to_js x4789)|])
        let (on_exit :
          t -> code:int or_undefined -> signal:string or_undefined -> unit) =
          fun (x4795 : t) ->
            fun ~code:(x4791 : int or_undefined) ->
              fun ~signal:(x4793 : string or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x4795) "onExit"
                     [|(or_undefined_to_js Ojs.int_to_js x4791);(or_undefined_to_js
                                                                   Ojs.string_to_js
                                                                   x4793)|])
      end
    module DebugAdapterTrackerFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4797 : Ojs.t) -> x4797
        and t_to_js : t -> Ojs.t = fun (x4796 : Ojs.t) -> x4796
        let (create_debug_adapter_tracker :
          t ->
            session:DebugSession.t -> DebugAdapterTracker.t ProviderResult.t)
          =
          fun (x4799 : t) ->
            fun ~session:(x4798 : DebugSession.t) ->
              ProviderResult.t_of_js DebugAdapterTracker.t_of_js
                (Ojs.call (t_to_js x4799) "createDebugAdapterTracker"
                   [|(DebugSession.t_to_js x4798)|])
      end
    module DebugConsole =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4802 : Ojs.t) -> x4802
        and t_to_js : t -> Ojs.t = fun (x4801 : Ojs.t) -> x4801
        let (append : t -> value:string -> unit) =
          fun (x4804 : t) ->
            fun ~value:(x4803 : string) ->
              ignore
                (Ojs.call (t_to_js x4804) "append"
                   [|(Ojs.string_to_js x4803)|])
        let (append_line : t -> value:string -> unit) =
          fun (x4806 : t) ->
            fun ~value:(x4805 : string) ->
              ignore
                (Ojs.call (t_to_js x4806) "appendLine"
                   [|(Ojs.string_to_js x4805)|])
      end
    module DebugConsoleMode =
      struct
        type t = [ `MergeWithParent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4808 : Ojs.t) ->
            let x4809 = x4808 in
            match Ojs.int_of_js x4809 with
            | 1 -> `MergeWithParent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4807 : [ `MergeWithParent ]) ->
            match x4807 with | `MergeWithParent -> Ojs.int_to_js 1
      end
    module DebugSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4811 : Ojs.t) -> x4811
        and t_to_js : t -> Ojs.t = fun (x4810 : Ojs.t) -> x4810
        let (parent_session : t -> DebugSession.t) =
          fun (x4812 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4812) "parentSession")
        let (set_parent_session : t -> DebugSession.t -> unit) =
          fun (x4813 : t) ->
            fun (x4814 : DebugSession.t) ->
              Ojs.set_prop_ascii (t_to_js x4813) "parentSession"
                (DebugSession.t_to_js x4814)
        let (console_mode : t -> DebugConsoleMode.t) =
          fun (x4815 : t) ->
            DebugConsoleMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4815) "consoleMode")
        let (set_console_mode : t -> DebugConsoleMode.t -> unit) =
          fun (x4816 : t) ->
            fun (x4817 : DebugConsoleMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4816) "consoleMode"
                (DebugConsoleMode.t_to_js x4817)
        let (no_debug : t -> bool) =
          fun (x4818 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4818) "noDebug")
        let (set_no_debug : t -> bool -> unit) =
          fun (x4819 : t) ->
            fun (x4820 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4819) "noDebug"
                (Ojs.bool_to_js x4820)
        let (compact : t -> bool) =
          fun (x4821 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4821) "compact")
        let (set_compact : t -> bool -> unit) =
          fun (x4822 : t) ->
            fun (x4823 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4822) "compact"
                (Ojs.bool_to_js x4823)
      end
    module DebugConfigurationProviderTriggerKind =
      struct
        type t = [ `Dynamic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4825 : Ojs.t) ->
            let x4826 = x4825 in
            match Ojs.int_of_js x4826 with
            | 2 -> `Dynamic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4824 : [ `Dynamic ]) ->
            match x4824 with | `Dynamic -> Ojs.int_to_js 2
      end
    module Debug =
      struct
        let (active_debug_session : DebugSession.t or_undefined) =
          or_undefined_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugSession")
        let (active_debug_console : DebugConsole.t) =
          DebugConsole.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugConsole")
        let (breakpoints : Breakpoint.t list) =
          Ojs.list_of_js Breakpoint.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "breakpoints")
        let (on_did_change_active_debug_session :
          DebugSession.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x4829 : Ojs.t) ->
               or_undefined_of_js DebugSession.t_of_js x4829)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeActiveDebugSession")
        let (on_did_start_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidStartDebugSession")
        let (on_did_receive_debug_session_custom_event :
          DebugSessionCustomEvent.t Event.t) =
          Event.t_of_js DebugSessionCustomEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidReceiveDebugSessionCustomEvent")
        let (on_did_terminate_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidTerminateDebugSession")
        let (on_did_change_breakpoints : BreakpointsChangeEvent.t Event.t) =
          Event.t_of_js BreakpointsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeBreakpoints")
        let (register_debug_configuration_provider :
          debug_type_:string ->
            provider:DebugConfigurationProvider.t ->
              ?trigger_kind:DebugConfigurationProviderTriggerKind.t ->
                unit -> Disposable.t)
          =
          fun ~debug_type_:(x4835 : string) ->
            fun ~provider:(x4836 : DebugConfigurationProvider.t) ->
              fun
                ?trigger_kind:(x4837 :
                                DebugConfigurationProviderTriggerKind.t
                                  option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4840 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4840
                          "registerDebugConfigurationProvider") "apply"
                       [|x4840;((let x4838 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4838 "push"
                                      [|(Ojs.string_to_js x4835)|]);
                                 ignore
                                   (Ojs.call x4838 "push"
                                      [|(DebugConfigurationProvider.t_to_js
                                           x4836)|]);
                                 (match x4837 with
                                  | Some x4839 ->
                                      ignore
                                        (Ojs.call x4838 "push"
                                           [|(DebugConfigurationProviderTriggerKind.t_to_js
                                                x4839)|])
                                  | None -> ());
                                 x4838))|])
        let (register_debug_adapter_descriptor_factory :
          debug_type_:string ->
            factory:DebugAdapterDescriptorFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4841 : string) ->
            fun ~factory:(x4842 : DebugAdapterDescriptorFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterDescriptorFactory"
                   [|(Ojs.string_to_js x4841);(DebugAdapterDescriptorFactory.t_to_js
                                                 x4842)|])
        let (register_debug_adapter_tracker_factory :
          debug_type_:string ->
            factory:DebugAdapterTrackerFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4843 : string) ->
            fun ~factory:(x4844 : DebugAdapterTrackerFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterTrackerFactory"
                   [|(Ojs.string_to_js x4843);(DebugAdapterTrackerFactory.t_to_js
                                                 x4844)|])
        let (start_debugging :
          folder:WorkspaceFolder.t or_undefined ->
            name_or_configuration:DebugConfiguration.t or_string ->
              ?parent_session_or_options:(DebugSession.t,
                DebugSessionOptions.t) union2 -> unit -> bool Promise.t)
          =
          fun ~folder:(x4845 : WorkspaceFolder.t or_undefined) ->
            fun
              ~name_or_configuration:(x4846 : DebugConfiguration.t or_string)
              ->
              fun
                ?parent_session_or_options:(x4847 :
                                             (DebugSession.t,
                                               DebugSessionOptions.t) union2
                                               option)
                ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x4854 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call (Ojs.get_prop_ascii x4854 "startDebugging")
                       "apply"
                       [|x4854;((let x4848 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4848 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4845)|]);
                                 ignore
                                   (Ojs.call x4848 "push"
                                      [|(or_string_to_js
                                           DebugConfiguration.t_to_js x4846)|]);
                                 (match x4847 with
                                  | Some x4849 ->
                                      ignore
                                        (Ojs.call x4848 "push"
                                           [|(union2_to_js
                                                DebugSession.t_to_js
                                                DebugSessionOptions.t_to_js
                                                x4849)|])
                                  | None -> ());
                                 x4848))|])
        let (stop_debugging :
          ?session:DebugSession.t -> unit -> unit Promise.t) =
          fun ?session:(x4856 : DebugSession.t option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x4859 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                 Ojs.call (Ojs.get_prop_ascii x4859 "stopDebugging") "apply"
                   [|x4859;((let x4857 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4856 with
                              | Some x4858 ->
                                  ignore
                                    (Ojs.call x4857 "push"
                                       [|(DebugSession.t_to_js x4858)|])
                              | None -> ());
                             x4857))|])
        let (add_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4861 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "addBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4861)|])
        let (remove_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4863 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "removeBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4863)|])
        let (as_debug_source_uri :
          source:DebugProtocolSource.t ->
            ?session:DebugSession.t -> unit -> Uri.t)
          =
          fun ~source:(x4865 : DebugProtocolSource.t) ->
            fun ?session:(x4866 : DebugSession.t option) ->
              fun () ->
                Uri.t_of_js
                  (let x4869 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                   Ojs.call (Ojs.get_prop_ascii x4869 "asDebugSourceUri")
                     "apply"
                     [|x4869;((let x4867 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4867 "push"
                                    [|(DebugProtocolSource.t_to_js x4865)|]);
                               (match x4866 with
                                | Some x4868 ->
                                    ignore
                                      (Ojs.call x4867 "push"
                                         [|(DebugSession.t_to_js x4868)|])
                                | None -> ());
                               x4867))|])
      end
    module Extensions =
      struct
        let (get_extension :
          extension_id:string -> any Extension.t or_undefined) =
          fun ~extension_id:(x4870 : string) ->
            or_undefined_of_js
              (fun (x4871 : Ojs.t) -> Extension.t_of_js any_of_js x4871)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4870)|])
        let (get_extension :
          extension_id:string -> 'T Extension.t or_undefined) =
          fun ~extension_id:(x4873 : string) ->
            or_undefined_of_js
              (fun (x4874 : Ojs.t) -> Extension.t_of_js Obj.magic x4874)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4873)|])
        let (all : any Extension.t list) =
          Ojs.list_of_js
            (fun (x4876 : Ojs.t) -> Extension.t_of_js any_of_js x4876)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "all")
        let (on_did_change : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "onDidChange")
      end
    module CommentThreadCollapsibleState =
      struct
        type t = [ `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4880 : Ojs.t) ->
            let x4881 = x4880 in
            match Ojs.int_of_js x4881 with
            | 1 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4879 : [ `Expanded ]) ->
            match x4879 with | `Expanded -> Ojs.int_to_js 1
      end
    module CommentMode =
      struct
        type t = [ `Preview ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4883 : Ojs.t) ->
            let x4884 = x4883 in
            match Ojs.int_of_js x4884 with
            | 1 -> `Preview
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4882 : [ `Preview ]) ->
            match x4882 with | `Preview -> Ojs.int_to_js 1
      end
    module CommentAuthorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4886 : Ojs.t) -> x4886
        and t_to_js : t -> Ojs.t = fun (x4885 : Ojs.t) -> x4885
        let (name : t -> string) =
          fun (x4887 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4887) "name")
        let (set_name : t -> string -> unit) =
          fun (x4888 : t) ->
            fun (x4889 : string) ->
              Ojs.set_prop_ascii (t_to_js x4888) "name"
                (Ojs.string_to_js x4889)
        let (icon_path : t -> Uri.t) =
          fun (x4890 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4890) "iconPath")
        let (set_icon_path : t -> Uri.t -> unit) =
          fun (x4891 : t) ->
            fun (x4892 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4891) "iconPath"
                (Uri.t_to_js x4892)
      end
    module CommentReaction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4894 : Ojs.t) -> x4894
        and t_to_js : t -> Ojs.t = fun (x4893 : Ojs.t) -> x4893
        let (label : t -> string) =
          fun (x4895 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4895) "label")
        let (icon_path : t -> Uri.t or_string) =
          fun (x4896 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4896) "iconPath")
        let (count : t -> int) =
          fun (x4898 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4898) "count")
        let (author_has_reacted : t -> bool) =
          fun (x4899 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4899) "authorHasReacted")
      end
    module Comment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4901 : Ojs.t) -> x4901
        and t_to_js : t -> Ojs.t = fun (x4900 : Ojs.t) -> x4900
        let (body : t -> MarkdownString.t or_string) =
          fun (x4902 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4902) "body")
        let (set_body : t -> MarkdownString.t or_string -> unit) =
          fun (x4904 : t) ->
            fun (x4905 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x4904) "body"
                (or_string_to_js MarkdownString.t_to_js x4905)
        let (mode : t -> CommentMode.t) =
          fun (x4907 : t) ->
            CommentMode.t_of_js (Ojs.get_prop_ascii (t_to_js x4907) "mode")
        let (set_mode : t -> CommentMode.t -> unit) =
          fun (x4908 : t) ->
            fun (x4909 : CommentMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4908) "mode"
                (CommentMode.t_to_js x4909)
        let (author : t -> CommentAuthorInformation.t) =
          fun (x4910 : t) ->
            CommentAuthorInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4910) "author")
        let (set_author : t -> CommentAuthorInformation.t -> unit) =
          fun (x4911 : t) ->
            fun (x4912 : CommentAuthorInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x4911) "author"
                (CommentAuthorInformation.t_to_js x4912)
        let (context_value : t -> string) =
          fun (x4913 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4913) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x4914 : t) ->
            fun (x4915 : string) ->
              Ojs.set_prop_ascii (t_to_js x4914) "contextValue"
                (Ojs.string_to_js x4915)
        let (reactions : t -> CommentReaction.t list) =
          fun (x4916 : t) ->
            Ojs.list_of_js CommentReaction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4916) "reactions")
        let (set_reactions : t -> CommentReaction.t list -> unit) =
          fun (x4918 : t) ->
            fun (x4919 : CommentReaction.t list) ->
              Ojs.set_prop_ascii (t_to_js x4918) "reactions"
                (Ojs.list_to_js CommentReaction.t_to_js x4919)
        let (label : t -> string) =
          fun (x4921 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4921) "label")
        let (set_label : t -> string -> unit) =
          fun (x4922 : t) ->
            fun (x4923 : string) ->
              Ojs.set_prop_ascii (t_to_js x4922) "label"
                (Ojs.string_to_js x4923)
      end
    module CommentThread =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4925 : Ojs.t) -> x4925
        and t_to_js : t -> Ojs.t = fun (x4924 : Ojs.t) -> x4924
        let (uri : t -> Uri.t) =
          fun (x4926 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4926) "uri")
        let (range : t -> Range.t) =
          fun (x4927 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4927) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x4928 : t) ->
            fun (x4929 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x4928) "range"
                (Range.t_to_js x4929)
        let (comments : t -> Comment.t list) =
          fun (x4930 : t) ->
            Ojs.list_of_js Comment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4930) "comments")
        let (set_comments : t -> Comment.t list -> unit) =
          fun (x4932 : t) ->
            fun (x4933 : Comment.t list) ->
              Ojs.set_prop_ascii (t_to_js x4932) "comments"
                (Ojs.list_to_js Comment.t_to_js x4933)
        let (collapsible_state : t -> CommentThreadCollapsibleState.t) =
          fun (x4935 : t) ->
            CommentThreadCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4935) "collapsibleState")
        let (set_collapsible_state :
          t -> CommentThreadCollapsibleState.t -> unit) =
          fun (x4936 : t) ->
            fun (x4937 : CommentThreadCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x4936) "collapsibleState"
                (CommentThreadCollapsibleState.t_to_js x4937)
        let (can_reply : t -> bool) =
          fun (x4938 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4938) "canReply")
        let (set_can_reply : t -> bool -> unit) =
          fun (x4939 : t) ->
            fun (x4940 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4939) "canReply"
                (Ojs.bool_to_js x4940)
        let (context_value : t -> string) =
          fun (x4941 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4941) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x4942 : t) ->
            fun (x4943 : string) ->
              Ojs.set_prop_ascii (t_to_js x4942) "contextValue"
                (Ojs.string_to_js x4943)
        let (label : t -> string) =
          fun (x4944 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4944) "label")
        let (set_label : t -> string -> unit) =
          fun (x4945 : t) ->
            fun (x4946 : string) ->
              Ojs.set_prop_ascii (t_to_js x4945) "label"
                (Ojs.string_to_js x4946)
        let (dispose : t -> unit) =
          fun (x4947 : t) -> ignore (Ojs.call (t_to_js x4947) "dispose" [||])
      end
    module CommentReply =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4949 : Ojs.t) -> x4949
        and t_to_js : t -> Ojs.t = fun (x4948 : Ojs.t) -> x4948
        let (thread : t -> CommentThread.t) =
          fun (x4950 : t) ->
            CommentThread.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4950) "thread")
        let (set_thread : t -> CommentThread.t -> unit) =
          fun (x4951 : t) ->
            fun (x4952 : CommentThread.t) ->
              Ojs.set_prop_ascii (t_to_js x4951) "thread"
                (CommentThread.t_to_js x4952)
        let (text : t -> string) =
          fun (x4953 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4953) "text")
        let (set_text : t -> string -> unit) =
          fun (x4954 : t) ->
            fun (x4955 : string) ->
              Ojs.set_prop_ascii (t_to_js x4954) "text"
                (Ojs.string_to_js x4955)
      end
    module CommentingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4957 : Ojs.t) -> x4957
        and t_to_js : t -> Ojs.t = fun (x4956 : Ojs.t) -> x4956
        let (provide_commenting_ranges :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> Range.t list ProviderResult.t)
          =
          fun (x4960 : t) ->
            fun ~document:(x4958 : TextDocument.t) ->
              fun ~token:(x4959 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x4961 : Ojs.t) -> Ojs.list_of_js Range.t_of_js x4961)
                  (Ojs.call (t_to_js x4960) "provideCommentingRanges"
                     [|(TextDocument.t_to_js x4958);(CancellationToken.t_to_js
                                                       x4959)|])
      end
    module CommentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4964 : Ojs.t) -> x4964
        and t_to_js : t -> Ojs.t = fun (x4963 : Ojs.t) -> x4963
        let (prompt : t -> string) =
          fun (x4965 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4965) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x4966 : t) ->
            fun (x4967 : string) ->
              Ojs.set_prop_ascii (t_to_js x4966) "prompt"
                (Ojs.string_to_js x4967)
        let (place_holder : t -> string) =
          fun (x4968 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4968) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x4969 : t) ->
            fun (x4970 : string) ->
              Ojs.set_prop_ascii (t_to_js x4969) "placeHolder"
                (Ojs.string_to_js x4970)
      end
    module CommentController =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4972 : Ojs.t) -> x4972
        and t_to_js : t -> Ojs.t = fun (x4971 : Ojs.t) -> x4971
        let (id : t -> string) =
          fun (x4973 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4973) "id")
        let (label : t -> string) =
          fun (x4974 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4974) "label")
        let (options : t -> CommentOptions.t) =
          fun (x4975 : t) ->
            CommentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4975) "options")
        let (set_options : t -> CommentOptions.t -> unit) =
          fun (x4976 : t) ->
            fun (x4977 : CommentOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x4976) "options"
                (CommentOptions.t_to_js x4977)
        let (commenting_range_provider : t -> CommentingRangeProvider.t) =
          fun (x4978 : t) ->
            CommentingRangeProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4978) "commentingRangeProvider")
        let (set_commenting_range_provider :
          t -> CommentingRangeProvider.t -> unit) =
          fun (x4979 : t) ->
            fun (x4980 : CommentingRangeProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x4979) "commentingRangeProvider"
                (CommentingRangeProvider.t_to_js x4980)
        let (create_comment_thread :
          t ->
            uri:Uri.t ->
              range:Range.t -> comments:Comment.t list -> CommentThread.t)
          =
          fun (x4985 : t) ->
            fun ~uri:(x4981 : Uri.t) ->
              fun ~range:(x4982 : Range.t) ->
                fun ~comments:(x4983 : Comment.t list) ->
                  CommentThread.t_of_js
                    (Ojs.call (t_to_js x4985) "createCommentThread"
                       [|(Uri.t_to_js x4981);(Range.t_to_js x4982);(Ojs.list_to_js
                                                                    Comment.t_to_js
                                                                    x4983)|])
        let (reaction_handler :
          t ->
            comment:Comment.t -> reaction:CommentReaction.t -> unit Promise.t)
          =
          fun (x4988 : t) ->
            fun ~comment:(x4986 : Comment.t) ->
              fun ~reaction:(x4987 : CommentReaction.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x4988) "reactionHandler"
                     [|(Comment.t_to_js x4986);(CommentReaction.t_to_js x4987)|])
        let (dispose : t -> unit) =
          fun (x4990 : t) -> ignore (Ojs.call (t_to_js x4990) "dispose" [||])
      end
    module Comments =
      struct
        let (create_comment_controller :
          id:string -> label:string -> CommentController.t) =
          fun ~id:(x4991 : string) ->
            fun ~label:(x4992 : string) ->
              CommentController.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "comments")
                   "createCommentController"
                   [|(Ojs.string_to_js x4991);(Ojs.string_to_js x4992)|])
      end
    module AuthenticationSessionAccountInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4994 : Ojs.t) -> x4994
        and t_to_js : t -> Ojs.t = fun (x4993 : Ojs.t) -> x4993
        let (id : t -> string) =
          fun (x4995 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4995) "id")
        let (label : t -> string) =
          fun (x4996 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4996) "label")
      end
    module AuthenticationSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4998 : Ojs.t) -> x4998
        and t_to_js : t -> Ojs.t = fun (x4997 : Ojs.t) -> x4997
        let (id : t -> string) =
          fun (x4999 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4999) "id")
        let (access_token : t -> string) =
          fun (x5000 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5000) "accessToken")
        let (account : t -> AuthenticationSessionAccountInformation.t) =
          fun (x5001 : t) ->
            AuthenticationSessionAccountInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5001) "account")
        let (scopes : t -> string list) =
          fun (x5002 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5002) "scopes")
      end
    module AuthenticationGetSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5005 : Ojs.t) -> x5005
        and t_to_js : t -> Ojs.t = fun (x5004 : Ojs.t) -> x5004
        let (create_if_none : t -> bool) =
          fun (x5006 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5006) "createIfNone")
        let (set_create_if_none : t -> bool -> unit) =
          fun (x5007 : t) ->
            fun (x5008 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5007) "createIfNone"
                (Ojs.bool_to_js x5008)
        let (clear_session_preference : t -> bool) =
          fun (x5009 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5009) "clearSessionPreference")
        let (set_clear_session_preference : t -> bool -> unit) =
          fun (x5010 : t) ->
            fun (x5011 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5010) "clearSessionPreference"
                (Ojs.bool_to_js x5011)
      end
    module AuthenticationProviderInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5013 : Ojs.t) -> x5013
        and t_to_js : t -> Ojs.t = fun (x5012 : Ojs.t) -> x5012
        let (id : t -> string) =
          fun (x5014 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5014) "id")
        let (label : t -> string) =
          fun (x5015 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5015) "label")
      end
    module AuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5017 : Ojs.t) -> x5017
        and t_to_js : t -> Ojs.t = fun (x5016 : Ojs.t) -> x5016
        let (provider : t -> AuthenticationProviderInformation.t) =
          fun (x5018 : t) ->
            AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5018) "provider")
      end
    module AuthenticationProviderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5020 : Ojs.t) -> x5020
        and t_to_js : t -> Ojs.t = fun (x5019 : Ojs.t) -> x5019
        let (supports_multiple_accounts : t -> bool) =
          fun (x5021 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5021) "supportsMultipleAccounts")
      end
    module AuthenticationProviderAuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5023 : Ojs.t) -> x5023
        and t_to_js : t -> Ojs.t = fun (x5022 : Ojs.t) -> x5022
        let (added : t -> AuthenticationSession.t list) =
          fun (x5024 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5024) "added")
        let (removed : t -> AuthenticationSession.t list) =
          fun (x5026 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5026) "removed")
        let (changed : t -> AuthenticationSession.t list) =
          fun (x5028 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5028) "changed")
      end
    module AuthenticationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5031 : Ojs.t) -> x5031
        and t_to_js : t -> Ojs.t = fun (x5030 : Ojs.t) -> x5030
        let (on_did_change_sessions :
          t ->
            AuthenticationProviderAuthenticationSessionsChangeEvent.t Event.t)
          =
          fun (x5032 : t) ->
            Event.t_of_js
              AuthenticationProviderAuthenticationSessionsChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5032) "onDidChangeSessions")
        let (get_sessions :
          t ->
            ?scopes:string list ->
              unit -> AuthenticationSession.t list Promise.t)
          =
          fun (x5038 : t) ->
            fun ?scopes:(x5034 : string list option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x5040 : Ojs.t) ->
                     Ojs.list_of_js AuthenticationSession.t_of_js x5040)
                  (let x5039 = t_to_js x5038 in
                   Ojs.call (Ojs.get_prop_ascii x5039 "getSessions") "apply"
                     [|x5039;((let x5035 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x5034 with
                                | Some x5036 ->
                                    ignore
                                      (Ojs.call x5035 "push"
                                         [|(Ojs.list_to_js Ojs.string_to_js
                                              x5036)|])
                                | None -> ());
                               x5035))|])
        let (create_session :
          t -> scopes:string list -> AuthenticationSession.t Promise.t) =
          fun (x5044 : t) ->
            fun ~scopes:(x5042 : string list) ->
              Promise.t_of_js AuthenticationSession.t_of_js
                (Ojs.call (t_to_js x5044) "createSession"
                   [|(Ojs.list_to_js Ojs.string_to_js x5042)|])
        let (remove_session : t -> session_id:string -> unit Promise.t) =
          fun (x5047 : t) ->
            fun ~session_id:(x5046 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x5047) "removeSession"
                   [|(Ojs.string_to_js x5046)|])
      end
    module Authentication =
      struct
        module AuthenticationGetSessionOptions2 =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x5050 : Ojs.t) -> x5050
            and t_to_js : t -> Ojs.t = fun (x5049 : Ojs.t) -> x5049
            let (create_if_none : t -> [ `L_b_true ]) =
              fun (x5051 : t) ->
                let x5052 = Ojs.get_prop_ascii (t_to_js x5051) "createIfNone" in
                match Ojs.bool_of_js x5052 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_create_if_none : t -> [ `L_b_true ] -> unit) =
              fun (x5053 : t) ->
                fun (x5054 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x5053) "createIfNone"
                    (match x5054 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              options:(AuthenticationGetSessionOptions.t,
                AuthenticationGetSessionOptions2.t) intersection2 ->
                AuthenticationSession.t Promise.t)
          =
          fun ~provider_id:(x5055 : string) ->
            fun ~scopes:(x5056 : string list) ->
              fun
                ~options:(x5058 :
                           (AuthenticationGetSessionOptions.t,
                             AuthenticationGetSessionOptions2.t)
                             intersection2)
                ->
                Promise.t_of_js AuthenticationSession.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "authentication") "getSession"
                     [|(Ojs.string_to_js x5055);(Ojs.list_to_js
                                                   Ojs.string_to_js x5056);(
                       intersection2_to_js
                         AuthenticationGetSessionOptions.t_to_js
                         AuthenticationGetSessionOptions2.t_to_js x5058)|])
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              ?options:AuthenticationGetSessionOptions.t ->
                unit -> AuthenticationSession.t or_undefined Promise.t)
          =
          fun ~provider_id:(x5062 : string) ->
            fun ~scopes:(x5063 : string list) ->
              fun ?options:(x5064 : AuthenticationGetSessionOptions.t option)
                ->
                fun () ->
                  Promise.t_of_js
                    (fun (x5069 : Ojs.t) ->
                       or_undefined_of_js AuthenticationSession.t_of_js x5069)
                    (let x5068 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "authentication" in
                     Ojs.call (Ojs.get_prop_ascii x5068 "getSession") "apply"
                       [|x5068;((let x5065 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x5065 "push"
                                      [|(Ojs.string_to_js x5062)|]);
                                 ignore
                                   (Ojs.call x5065 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js
                                           x5063)|]);
                                 (match x5064 with
                                  | Some x5066 ->
                                      ignore
                                        (Ojs.call x5065 "push"
                                           [|(AuthenticationGetSessionOptions.t_to_js
                                                x5066)|])
                                  | None -> ());
                                 x5065))|])
        let (on_did_change_sessions :
          AuthenticationSessionsChangeEvent.t Event.t) =
          Event.t_of_js AuthenticationSessionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "authentication") "onDidChangeSessions")
        let (register_authentication_provider :
          id:string ->
            label:string ->
              provider:AuthenticationProvider.t ->
                ?options:AuthenticationProviderOptions.t ->
                  unit -> Disposable.t)
          =
          fun ~id:(x5072 : string) ->
            fun ~label:(x5073 : string) ->
              fun ~provider:(x5074 : AuthenticationProvider.t) ->
                fun ?options:(x5075 : AuthenticationProviderOptions.t option)
                  ->
                  fun () ->
                    Disposable.t_of_js
                      (let x5078 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "authentication" in
                       Ojs.call
                         (Ojs.get_prop_ascii x5078
                            "registerAuthenticationProvider") "apply"
                         [|x5078;((let x5076 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x5076 "push"
                                        [|(Ojs.string_to_js x5072)|]);
                                   ignore
                                     (Ojs.call x5076 "push"
                                        [|(Ojs.string_to_js x5073)|]);
                                   ignore
                                     (Ojs.call x5076 "push"
                                        [|(AuthenticationProvider.t_to_js
                                             x5074)|]);
                                   (match x5075 with
                                    | Some x5077 ->
                                        ignore
                                          (Ojs.call x5076 "push"
                                             [|(AuthenticationProviderOptions.t_to_js
                                                  x5077)|])
                                    | None -> ());
                                   x5076))|])
      end
  end
include struct include Vscode end
