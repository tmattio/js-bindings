[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2015
module Vscode =
  struct
    let (version : string) =
      Ojs.string_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii
              (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
              "vscode") "version")
    module Command =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (title : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "title")
        let (set_title : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "title" (Ojs.string_to_js x5)
        let (command : t -> string) =
          fun (x6 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "command")
        let (set_command : t -> string -> unit) =
          fun (x7 : t) ->
            fun (x8 : string) ->
              Ojs.set_prop_ascii (t_to_js x7) "command" (Ojs.string_to_js x8)
        let (tooltip : t -> string) =
          fun (x9 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x9) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x10 : t) ->
            fun (x11 : string) ->
              Ojs.set_prop_ascii (t_to_js x10) "tooltip"
                (Ojs.string_to_js x11)
        let (arguments : t -> any list) =
          fun (x12 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x12) "arguments")
        let (set_arguments : t -> any list -> unit) =
          fun (x14 : t) ->
            fun (x15 : any list) ->
              Ojs.set_prop_ascii (t_to_js x14) "arguments"
                (Ojs.list_to_js any_to_js x15)
        let (create :
          title:string ->
            command:string ->
              ?tooltip:string -> ?arguments:any list -> unit -> t)
          =
          fun ~title:(x17 : string) ->
            fun ~command:(x18 : string) ->
              fun ?tooltip:(x19 : string option) ->
                fun ?arguments:(x20 : any list option) ->
                  fun () ->
                    let x21 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x21 "title" (Ojs.string_to_js x17);
                    Ojs.set_prop_ascii x21 "command" (Ojs.string_to_js x18);
                    (match x19 with
                     | Some x24 ->
                         Ojs.set_prop_ascii x21 "tooltip"
                           (Ojs.string_to_js x24)
                     | None -> ());
                    (match x20 with
                     | Some x22 ->
                         Ojs.set_prop_ascii x21 "arguments"
                           (Ojs.list_to_js any_to_js x22)
                     | None -> ());
                    t_of_js x21
      end
    module Position =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x26 : Ojs.t) -> x26
        and t_to_js : t -> Ojs.t = fun (x25 : Ojs.t) -> x25
        let (line : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "line")
        let (character : t -> int) =
          fun (x28 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x28) "character")
        let (create : line:int -> character:int -> t) =
          fun ~line:(x29 : int) ->
            fun ~character:(x30 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Position")
                   [|(Ojs.int_to_js x29);(Ojs.int_to_js x30)|])
        let (is_before : t -> other:t -> bool) =
          fun (x32 : t) ->
            fun ~other:(x31 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x32) "isBefore" [|(t_to_js x31)|])
        let (is_before_or_equal : t -> other:t -> bool) =
          fun (x34 : t) ->
            fun ~other:(x33 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x34) "isBeforeOrEqual" [|(t_to_js x33)|])
        let (is_after : t -> other:t -> bool) =
          fun (x36 : t) ->
            fun ~other:(x35 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x36) "isAfter" [|(t_to_js x35)|])
        let (is_after_or_equal : t -> other:t -> bool) =
          fun (x38 : t) ->
            fun ~other:(x37 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x38) "isAfterOrEqual" [|(t_to_js x37)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x40 : t) ->
            fun ~other:(x39 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x40) "isEqual" [|(t_to_js x39)|])
        let (compare_to : t -> other:t -> int) =
          fun (x42 : t) ->
            fun ~other:(x41 : t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x42) "compareTo" [|(t_to_js x41)|])
        let (translate :
          t -> ?line_delta:int -> ?character_delta:int -> unit -> t) =
          fun (x48 : t) ->
            fun ?line_delta:(x43 : int option) ->
              fun ?character_delta:(x44 : int option) ->
                fun () ->
                  t_of_js
                    (let x49 = t_to_js x48 in
                     Ojs.call (Ojs.get_prop_ascii x49 "translate") "apply"
                       [|x49;((let x45 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x43 with
                                | Some x47 ->
                                    ignore
                                      (Ojs.call x45 "push"
                                         [|(Ojs.int_to_js x47)|])
                                | None -> ());
                               (match x44 with
                                | Some x46 ->
                                    ignore
                                      (Ojs.call x45 "push"
                                         [|(Ojs.int_to_js x46)|])
                                | None -> ());
                               x45))|])
        module TranslateChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
            and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
            let (line_delta : t -> int) =
              fun (x52 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x52) "lineDelta")
            let (set_line_delta : t -> int -> unit) =
              fun (x53 : t) ->
                fun (x54 : int) ->
                  Ojs.set_prop_ascii (t_to_js x53) "lineDelta"
                    (Ojs.int_to_js x54)
            let (character_delta : t -> int) =
              fun (x55 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x55) "characterDelta")
            let (set_character_delta : t -> int -> unit) =
              fun (x56 : t) ->
                fun (x57 : int) ->
                  Ojs.set_prop_ascii (t_to_js x56) "characterDelta"
                    (Ojs.int_to_js x57)
          end
        let (translate' : t -> TranslateChange.t -> t) =
          fun (x59 : t) ->
            fun (x58 : TranslateChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x59) "translate"
                   [|(TranslateChange.t_to_js x58)|])
        let (with_ : t -> ?line:int -> ?character:int -> unit -> t) =
          fun (x65 : t) ->
            fun ?line:(x60 : int option) ->
              fun ?character:(x61 : int option) ->
                fun () ->
                  t_of_js
                    (let x66 = t_to_js x65 in
                     Ojs.call (Ojs.get_prop_ascii x66 "with") "apply"
                       [|x66;((let x62 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x60 with
                                | Some x64 ->
                                    ignore
                                      (Ojs.call x62 "push"
                                         [|(Ojs.int_to_js x64)|])
                                | None -> ());
                               (match x61 with
                                | Some x63 ->
                                    ignore
                                      (Ojs.call x62 "push"
                                         [|(Ojs.int_to_js x63)|])
                                | None -> ());
                               x62))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x68 : Ojs.t) -> x68
            and t_to_js : t -> Ojs.t = fun (x67 : Ojs.t) -> x67
            let (line : t -> int) =
              fun (x69 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x69) "line")
            let (set_line : t -> int -> unit) =
              fun (x70 : t) ->
                fun (x71 : int) ->
                  Ojs.set_prop_ascii (t_to_js x70) "line" (Ojs.int_to_js x71)
            let (character : t -> int) =
              fun (x72 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "character")
            let (set_character : t -> int -> unit) =
              fun (x73 : t) ->
                fun (x74 : int) ->
                  Ojs.set_prop_ascii (t_to_js x73) "character"
                    (Ojs.int_to_js x74)
          end
        let (with' : t -> WithChange.t -> t) =
          fun (x76 : t) ->
            fun (x75 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x76) "with" [|(WithChange.t_to_js x75)|])
      end
    module Range =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x78 : Ojs.t) -> x78
        and t_to_js : t -> Ojs.t = fun (x77 : Ojs.t) -> x77
        let (start : t -> Position.t) =
          fun (x79 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x79) "start")
        let (end_ : t -> Position.t) =
          fun (x80 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x80) "end")
        let (create : start:Position.t -> end_:Position.t -> t) =
          fun ~start:(x81 : Position.t) ->
            fun ~end_:(x82 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                   [|(Position.t_to_js x81);(Position.t_to_js x82)|])
        let (create' :
          start_line:int ->
            start_character:int -> end_line:int -> end_character:int -> t)
          =
          fun ~start_line:(x83 : int) ->
            fun ~start_character:(x84 : int) ->
              fun ~end_line:(x85 : int) ->
                fun ~end_character:(x86 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                       [|(Ojs.int_to_js x83);(Ojs.int_to_js x84);(Ojs.int_to_js
                                                                    x85);(
                         Ojs.int_to_js x86)|])
        let (is_empty : t -> bool) =
          fun (x87 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x87) "isEmpty")
        let (set_is_empty : t -> bool -> unit) =
          fun (x88 : t) ->
            fun (x89 : bool) ->
              Ojs.set_prop_ascii (t_to_js x88) "isEmpty" (Ojs.bool_to_js x89)
        let (is_single_line : t -> bool) =
          fun (x90 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x90) "isSingleLine")
        let (set_is_single_line : t -> bool -> unit) =
          fun (x91 : t) ->
            fun (x92 : bool) ->
              Ojs.set_prop_ascii (t_to_js x91) "isSingleLine"
                (Ojs.bool_to_js x92)
        let (contains : t -> (Position.t, t) union2 -> bool) =
          fun (x96 : t) ->
            fun (x93 : (Position.t, t) union2) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x96) "contains"
                   [|(union2_to_js Position.t_to_js t_to_js x93)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x98 : t) ->
            fun ~other:(x97 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x98) "isEqual" [|(t_to_js x97)|])
        let (intersection : t -> range:t -> t or_undefined) =
          fun (x100 : t) ->
            fun ~range:(x99 : t) ->
              or_undefined_of_js t_of_js
                (Ojs.call (t_to_js x100) "intersection" [|(t_to_js x99)|])
        let (union : t -> other:t -> t) =
          fun (x103 : t) ->
            fun ~other:(x102 : t) ->
              t_of_js (Ojs.call (t_to_js x103) "union" [|(t_to_js x102)|])
        let (with_ : t -> ?start:Position.t -> ?end_:Position.t -> unit -> t)
          =
          fun (x109 : t) ->
            fun ?start:(x104 : Position.t option) ->
              fun ?end_:(x105 : Position.t option) ->
                fun () ->
                  t_of_js
                    (let x110 = t_to_js x109 in
                     Ojs.call (Ojs.get_prop_ascii x110 "with") "apply"
                       [|x110;((let x106 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x104 with
                                 | Some x108 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Position.t_to_js x108)|])
                                 | None -> ());
                                (match x105 with
                                 | Some x107 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Position.t_to_js x107)|])
                                 | None -> ());
                                x106))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x112 : Ojs.t) -> x112
            and t_to_js : t -> Ojs.t = fun (x111 : Ojs.t) -> x111
            let (start : t -> Position.t) =
              fun (x113 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x113) "start")
            let (set_start : t -> Position.t -> unit) =
              fun (x114 : t) ->
                fun (x115 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x114) "start"
                    (Position.t_to_js x115)
            let (end_ : t -> Position.t) =
              fun (x116 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x116) "end")
            let (set_end : t -> Position.t -> unit) =
              fun (x117 : t) ->
                fun (x118 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x117) "end"
                    (Position.t_to_js x118)
          end
        let (with' : t -> change:WithChange.t -> t) =
          fun (x120 : t) ->
            fun ~change:(x119 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x120) "with" [|(WithChange.t_to_js x119)|])
      end
    module Uri =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x122 : Ojs.t) -> x122
        and t_to_js : t -> Ojs.t = fun (x121 : Ojs.t) -> x121
        let (parse : string -> ?strict:bool -> unit -> t) =
          fun (x123 : string) ->
            fun ?strict:(x124 : bool option) ->
              fun () ->
                t_of_js
                  (let x127 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                   Ojs.call (Ojs.get_prop_ascii x127 "parse") "apply"
                     [|x127;((let x125 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x125 "push"
                                   [|(Ojs.string_to_js x123)|]);
                              (match x124 with
                               | Some x126 ->
                                   ignore
                                     (Ojs.call x125 "push"
                                        [|(Ojs.bool_to_js x126)|])
                               | None -> ());
                              x125))|])
        let (file : string -> t) =
          fun (x128 : string) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Uri") "file"
                 [|(Ojs.string_to_js x128)|])
        let (join_path : t -> string list -> t) =
          fun (x129 : t) ->
            fun (x130 : string list) ->
              t_of_js
                (let x133 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                 Ojs.call (Ojs.get_prop_ascii x133 "joinPath") "apply"
                   [|x133;((let x131 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x131 "push" [|(t_to_js x129)|]);
                            List.iter
                              (fun (x132 : string) ->
                                 ignore
                                   (Ojs.call x131 "push"
                                      [|(Ojs.string_to_js x132)|])) x130;
                            x131))|])
        let (create :
          scheme:string ->
            authority:string ->
              path:string -> query:string -> fragment:string -> t)
          =
          fun ~scheme:(x134 : string) ->
            fun ~authority:(x135 : string) ->
              fun ~path:(x136 : string) ->
                fun ~query:(x137 : string) ->
                  fun ~fragment:(x138 : string) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode") "Uri")
                         [|(Ojs.string_to_js x134);(Ojs.string_to_js x135);(
                           Ojs.string_to_js x136);(Ojs.string_to_js x137);(
                           Ojs.string_to_js x138)|])
        let (scheme : t -> string) =
          fun (x139 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x139) "scheme")
        let (authority : t -> string) =
          fun (x140 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x140) "authority")
        let (path : t -> string) =
          fun (x141 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x141) "path")
        let (query : t -> string) =
          fun (x142 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x142) "query")
        let (fragment : t -> string) =
          fun (x143 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x143) "fragment")
        let (fs_path : t -> string) =
          fun (x144 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x144) "fsPath")
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x146 : Ojs.t) -> x146
            and t_to_js : t -> Ojs.t = fun (x145 : Ojs.t) -> x145
            let (scheme : t -> string) =
              fun (x147 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x147) "scheme")
            let (set_scheme : t -> string -> unit) =
              fun (x148 : t) ->
                fun (x149 : string) ->
                  Ojs.set_prop_ascii (t_to_js x148) "scheme"
                    (Ojs.string_to_js x149)
            let (authority : t -> string) =
              fun (x150 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x150) "authority")
            let (set_authority : t -> string -> unit) =
              fun (x151 : t) ->
                fun (x152 : string) ->
                  Ojs.set_prop_ascii (t_to_js x151) "authority"
                    (Ojs.string_to_js x152)
            let (path : t -> string) =
              fun (x153 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x153) "path")
            let (set_path : t -> string -> unit) =
              fun (x154 : t) ->
                fun (x155 : string) ->
                  Ojs.set_prop_ascii (t_to_js x154) "path"
                    (Ojs.string_to_js x155)
            let (query : t -> string) =
              fun (x156 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x156) "query")
            let (set_query : t -> string -> unit) =
              fun (x157 : t) ->
                fun (x158 : string) ->
                  Ojs.set_prop_ascii (t_to_js x157) "query"
                    (Ojs.string_to_js x158)
            let (fragment : t -> string) =
              fun (x159 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x159) "fragment")
            let (set_fragment : t -> string -> unit) =
              fun (x160 : t) ->
                fun (x161 : string) ->
                  Ojs.set_prop_ascii (t_to_js x160) "fragment"
                    (Ojs.string_to_js x161)
            let (create :
              ?scheme:string ->
                ?authority:string ->
                  ?path:string ->
                    ?query:string -> ?fragment:string -> unit -> t)
              =
              fun ?scheme:(x162 : string option) ->
                fun ?authority:(x163 : string option) ->
                  fun ?path:(x164 : string option) ->
                    fun ?query:(x165 : string option) ->
                      fun ?fragment:(x166 : string option) ->
                        fun () ->
                          let x167 = Ojs.empty_obj () in
                          (match x162 with
                           | Some x172 ->
                               Ojs.set_prop_ascii x167 "scheme"
                                 (Ojs.string_to_js x172)
                           | None -> ());
                          (match x163 with
                           | Some x171 ->
                               Ojs.set_prop_ascii x167 "authority"
                                 (Ojs.string_to_js x171)
                           | None -> ());
                          (match x164 with
                           | Some x170 ->
                               Ojs.set_prop_ascii x167 "path"
                                 (Ojs.string_to_js x170)
                           | None -> ());
                          (match x165 with
                           | Some x169 ->
                               Ojs.set_prop_ascii x167 "query"
                                 (Ojs.string_to_js x169)
                           | None -> ());
                          (match x166 with
                           | Some x168 ->
                               Ojs.set_prop_ascii x167 "fragment"
                                 (Ojs.string_to_js x168)
                           | None -> ());
                          t_of_js x167
          end
        let (with_ : t -> WithChange.t -> t) =
          fun (x174 : t) ->
            fun (x173 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x174) "with" [|(WithChange.t_to_js x173)|])
        let (to_string : t -> ?skip_encoding:bool -> unit -> string) =
          fun (x178 : t) ->
            fun ?skip_encoding:(x175 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x179 = t_to_js x178 in
                   Ojs.call (Ojs.get_prop_ascii x179 "toString") "apply"
                     [|x179;((let x176 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x175 with
                               | Some x177 ->
                                   ignore
                                     (Ojs.call x176 "push"
                                        [|(Ojs.bool_to_js x177)|])
                               | None -> ());
                              x176))|])
        let (to_json : t -> any) =
          fun (x180 : t) -> any_of_js (Ojs.call (t_to_js x180) "toJSON" [||])
      end
    module TextLine =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x182 : Ojs.t) -> x182
        and t_to_js : t -> Ojs.t = fun (x181 : Ojs.t) -> x181
        let (line_number : t -> int) =
          fun (x183 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x183) "lineNumber")
        let (text : t -> string) =
          fun (x184 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x184) "text")
        let (range : t -> Range.t) =
          fun (x185 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x185) "range")
        let (range_including_line_break : t -> Range.t) =
          fun (x186 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x186) "rangeIncludingLineBreak")
        let (first_non_whitespace_character_index : t -> int) =
          fun (x187 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x187)
                 "firstNonWhitespaceCharacterIndex")
        let (is_empty_or_whitespace : t -> bool) =
          fun (x188 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x188) "isEmptyOrWhitespace")
        let (create :
          line_number:int ->
            text:string ->
              range:Range.t ->
                range_including_line_break:Range.t ->
                  first_non_whitespace_character_index:int ->
                    is_empty_or_whitespace:bool -> t)
          =
          fun ~line_number:(x189 : int) ->
            fun ~text:(x190 : string) ->
              fun ~range:(x191 : Range.t) ->
                fun ~range_including_line_break:(x192 : Range.t) ->
                  fun ~first_non_whitespace_character_index:(x193 : int) ->
                    fun ~is_empty_or_whitespace:(x194 : bool) ->
                      let x195 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x195 "lineNumber"
                        (Ojs.int_to_js x189);
                      Ojs.set_prop_ascii x195 "text" (Ojs.string_to_js x190);
                      Ojs.set_prop_ascii x195 "range" (Range.t_to_js x191);
                      Ojs.set_prop_ascii x195 "rangeIncludingLineBreak"
                        (Range.t_to_js x192);
                      Ojs.set_prop_ascii x195
                        "firstNonWhitespaceCharacterIndex"
                        (Ojs.int_to_js x193);
                      Ojs.set_prop_ascii x195 "isEmptyOrWhitespace"
                        (Ojs.bool_to_js x194);
                      t_of_js x195
      end
    module EndOfLine =
      struct
        type t = [ `CRLF ]
        let rec t_of_js : Ojs.t -> t =
          fun (x197 : Ojs.t) ->
            let x198 = x197 in
            match Ojs.int_of_js x198 with | 2 -> `CRLF | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x196 : [ `CRLF ]) ->
            match x196 with | `CRLF -> Ojs.int_to_js 2
      end
    module TextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x200 : Ojs.t) -> x200
        and t_to_js : t -> Ojs.t = fun (x199 : Ojs.t) -> x199
        let (uri : t -> Uri.t) =
          fun (x201 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x201) "uri")
        let (file_name : t -> string) =
          fun (x202 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x202) "fileName")
        let (is_untitled : t -> bool) =
          fun (x203 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x203) "isUntitled")
        let (language_id : t -> string) =
          fun (x204 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x204) "languageId")
        let (version : t -> int) =
          fun (x205 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x205) "version")
        let (is_dirty : t -> bool) =
          fun (x206 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x206) "isDirty")
        let (is_closed : t -> bool) =
          fun (x207 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x207) "isClosed")
        let (save : t -> bool Promise.t) =
          fun (x208 : t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (t_to_js x208) "save" [||])
        let (eol : t -> EndOfLine.t) =
          fun (x210 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x210) "eol")
        let (line_count : t -> int) =
          fun (x211 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x211) "lineCount")
        let (line_at : t -> int -> TextLine.t) =
          fun (x213 : t) ->
            fun (x212 : int) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x213) "lineAt" [|(Ojs.int_to_js x212)|])
        let (line_at' : t -> Position.t -> TextLine.t) =
          fun (x215 : t) ->
            fun (x214 : Position.t) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x215) "lineAt" [|(Position.t_to_js x214)|])
        let (offset_at : t -> Position.t -> int) =
          fun (x217 : t) ->
            fun (x216 : Position.t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x217) "offsetAt"
                   [|(Position.t_to_js x216)|])
        let (position_at : t -> int -> Position.t) =
          fun (x219 : t) ->
            fun (x218 : int) ->
              Position.t_of_js
                (Ojs.call (t_to_js x219) "positionAt"
                   [|(Ojs.int_to_js x218)|])
        let (get_text : t -> ?range:Range.t -> unit -> string) =
          fun (x223 : t) ->
            fun ?range:(x220 : Range.t option) ->
              fun () ->
                Ojs.string_of_js
                  (let x224 = t_to_js x223 in
                   Ojs.call (Ojs.get_prop_ascii x224 "getText") "apply"
                     [|x224;((let x221 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x220 with
                               | Some x222 ->
                                   ignore
                                     (Ojs.call x221 "push"
                                        [|(Range.t_to_js x222)|])
                               | None -> ());
                              x221))|])
        let (get_word_range_at_position :
          t -> Position.t -> ?regex:regexp -> unit -> Range.t or_undefined) =
          fun (x229 : t) ->
            fun (x225 : Position.t) ->
              fun ?regex:(x226 : regexp option) ->
                fun () ->
                  or_undefined_of_js Range.t_of_js
                    (let x230 = t_to_js x229 in
                     Ojs.call
                       (Ojs.get_prop_ascii x230 "getWordRangeAtPosition")
                       "apply"
                       [|x230;((let x227 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x227 "push"
                                     [|(Position.t_to_js x225)|]);
                                (match x226 with
                                 | Some x228 ->
                                     ignore
                                       (Ojs.call x227 "push"
                                          [|(regexp_to_js x228)|])
                                 | None -> ());
                                x227))|])
        let (validate_range : t -> Range.t -> Range.t) =
          fun (x233 : t) ->
            fun (x232 : Range.t) ->
              Range.t_of_js
                (Ojs.call (t_to_js x233) "validateRange"
                   [|(Range.t_to_js x232)|])
        let (validate_position : t -> Position.t -> Position.t) =
          fun (x235 : t) ->
            fun (x234 : Position.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x235) "validatePosition"
                   [|(Position.t_to_js x234)|])
      end
    module Selection =
      struct
        include struct include Range end
        let (anchor : t -> Position.t) =
          fun (x236 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x236) "anchor")
        let (set_anchor : t -> Position.t -> unit) =
          fun (x237 : t) ->
            fun (x238 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x237) "anchor"
                (Position.t_to_js x238)
        let (active : t -> Position.t) =
          fun (x239 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x239) "active")
        let (set_active : t -> Position.t -> unit) =
          fun (x240 : t) ->
            fun (x241 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x240) "active"
                (Position.t_to_js x241)
        let (create : anchor:Position.t -> active:Position.t -> t) =
          fun ~anchor:(x242 : Position.t) ->
            fun ~active:(x243 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Selection")
                   [|(Position.t_to_js x242);(Position.t_to_js x243)|])
        let (create' :
          anchor_line:int ->
            anchor_character:int ->
              active_line:int -> active_character:int -> t)
          =
          fun ~anchor_line:(x244 : int) ->
            fun ~anchor_character:(x245 : int) ->
              fun ~active_line:(x246 : int) ->
                fun ~active_character:(x247 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Selection")
                       [|(Ojs.int_to_js x244);(Ojs.int_to_js x245);(Ojs.int_to_js
                                                                    x246);(
                         Ojs.int_to_js x247)|])
        let (is_reversed : t -> bool) =
          fun (x248 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x248) "isReversed")
        let (set_is_reversed : t -> bool -> unit) =
          fun (x249 : t) ->
            fun (x250 : bool) ->
              Ojs.set_prop_ascii (t_to_js x249) "isReversed"
                (Ojs.bool_to_js x250)
      end
    module TextEditorCursorStyle =
      struct
        type t =
          [ `Block  | `Underline  | `LineThin  | `BlockOutline 
          | `UnderlineThin ]
        let rec t_of_js : Ojs.t -> t =
          fun (x252 : Ojs.t) ->
            let x253 = x252 in
            match Ojs.int_of_js x253 with
            | 2 -> `Block
            | 3 -> `Underline
            | 4 -> `LineThin
            | 5 -> `BlockOutline
            | 6 -> `UnderlineThin
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x251 :
              [ `Block  | `Underline  | `LineThin  | `BlockOutline 
              | `UnderlineThin ])
            ->
            match x251 with
            | `Block -> Ojs.int_to_js 2
            | `Underline -> Ojs.int_to_js 3
            | `LineThin -> Ojs.int_to_js 4
            | `BlockOutline -> Ojs.int_to_js 5
            | `UnderlineThin -> Ojs.int_to_js 6
      end
    module TextEditorLineNumbersStyle =
      struct
        type t = [ `On  | `Relative ]
        let rec t_of_js : Ojs.t -> t =
          fun (x255 : Ojs.t) ->
            let x256 = x255 in
            match Ojs.int_of_js x256 with
            | 1 -> `On
            | 2 -> `Relative
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x254 : [ `On  | `Relative ]) ->
            match x254 with
            | `On -> Ojs.int_to_js 1
            | `Relative -> Ojs.int_to_js 2
      end
    module TextEditorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x258 : Ojs.t) -> x258
        and t_to_js : t -> Ojs.t = fun (x257 : Ojs.t) -> x257
        let (tab_size : t -> string or_number) =
          fun (x259 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x259) "tabSize")
        let (set_tab_size : t -> string or_number -> unit) =
          fun (x261 : t) ->
            fun (x262 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x261) "tabSize"
                (or_number_to_js Ojs.string_to_js x262)
        let (insert_spaces : t -> bool or_string) =
          fun (x264 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x264) "insertSpaces")
        let (set_insert_spaces : t -> bool or_string -> unit) =
          fun (x266 : t) ->
            fun (x267 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x266) "insertSpaces"
                (or_string_to_js Ojs.bool_to_js x267)
        let (cursor_style : t -> TextEditorCursorStyle.t) =
          fun (x269 : t) ->
            TextEditorCursorStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x269) "cursorStyle")
        let (set_cursor_style : t -> TextEditorCursorStyle.t -> unit) =
          fun (x270 : t) ->
            fun (x271 : TextEditorCursorStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x270) "cursorStyle"
                (TextEditorCursorStyle.t_to_js x271)
        let (line_numbers : t -> TextEditorLineNumbersStyle.t) =
          fun (x272 : t) ->
            TextEditorLineNumbersStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x272) "lineNumbers")
        let (set_line_numbers : t -> TextEditorLineNumbersStyle.t -> unit) =
          fun (x273 : t) ->
            fun (x274 : TextEditorLineNumbersStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x273) "lineNumbers"
                (TextEditorLineNumbersStyle.t_to_js x274)
      end
    module TextEditorDecorationType =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x276 : Ojs.t) -> x276
        and t_to_js : t -> Ojs.t = fun (x275 : Ojs.t) -> x275
        let (key : t -> string) =
          fun (x277 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x277) "key")
        let (dispose : t -> unit) =
          fun (x278 : t) -> ignore (Ojs.call (t_to_js x278) "dispose" [||])
      end
    module TextEditorRevealType =
      struct
        type t = [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ]
        let rec t_of_js : Ojs.t -> t =
          fun (x280 : Ojs.t) ->
            let x281 = x280 in
            match Ojs.int_of_js x281 with
            | 1 -> `InCenter
            | 2 -> `InCenterIfOutsideViewport
            | 3 -> `AtTop
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x279 : [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ])
            ->
            match x279 with
            | `InCenter -> Ojs.int_to_js 1
            | `InCenterIfOutsideViewport -> Ojs.int_to_js 2
            | `AtTop -> Ojs.int_to_js 3
      end
    module TextEditorSelectionChangeKind =
      struct
        type t = [ `Mouse  | `Command ]
        let rec t_of_js : Ojs.t -> t =
          fun (x283 : Ojs.t) ->
            let x284 = x283 in
            match Ojs.int_of_js x284 with
            | 2 -> `Mouse
            | 3 -> `Command
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x282 : [ `Mouse  | `Command ]) ->
            match x282 with
            | `Mouse -> Ojs.int_to_js 2
            | `Command -> Ojs.int_to_js 3
      end
    module TextEditorEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x286 : Ojs.t) -> x286
        and t_to_js : t -> Ojs.t = fun (x285 : Ojs.t) -> x285
        type replace_location =
          [ `Position of Position.t  | `Range of Range.t 
          | `Selection of Selection.t ]
        let rec replace_location_to_js : replace_location -> Ojs.t =
          fun
            (x287 :
              [ `Position of Position.t  | `Range of Range.t 
              | `Selection of Selection.t ])
            ->
            match x287 with
            | `Position x288 -> Position.t_to_js x288
            | `Range x289 -> Range.t_to_js x289
            | `Selection x290 -> Selection.t_to_js x290
        let replace_location_of_js js_val =
          if Ojs.has_property js_val "anchor"
          then `Position (Position.t_of_js js_val)
          else
            if Ojs.has_property js_val "start"
            then `Range (Range.t_of_js js_val)
            else `Selection (Selection.t_of_js js_val)
        type delete_location =
          [ `Range of Range.t  | `Selection of Selection.t ]
        let rec delete_location_to_js : delete_location -> Ojs.t =
          fun (x296 : [ `Range of Range.t  | `Selection of Selection.t ]) ->
            match x296 with
            | `Range x297 -> Range.t_to_js x297
            | `Selection x298 -> Selection.t_to_js x298
        let delete_location_of_js js_val =
          if Ojs.has_property js_val "anchor"
          then `Selection (Selection.t_of_js js_val)
          else `Range (Range.t_of_js js_val)
        let (replace :
          t -> location:replace_location -> value:string -> unit) =
          fun (x305 : t) ->
            fun ~location:(x303 : replace_location) ->
              fun ~value:(x304 : string) ->
                ignore
                  (Ojs.call (t_to_js x305) "replace"
                     [|(replace_location_to_js x303);(Ojs.string_to_js x304)|])
        let (insert : t -> location:Position.t -> value:string -> unit) =
          fun (x308 : t) ->
            fun ~location:(x306 : Position.t) ->
              fun ~value:(x307 : string) ->
                ignore
                  (Ojs.call (t_to_js x308) "insert"
                     [|(Position.t_to_js x306);(Ojs.string_to_js x307)|])
        let (delete : t -> delete_location -> unit) =
          fun (x310 : t) ->
            fun (x309 : delete_location) ->
              ignore
                (Ojs.call (t_to_js x310) "delete"
                   [|(delete_location_to_js x309)|])
        let (set_end_of_line : t -> EndOfLine.t -> unit) =
          fun (x312 : t) ->
            fun (x311 : EndOfLine.t) ->
              ignore
                (Ojs.call (t_to_js x312) "setEndOfLine"
                   [|(EndOfLine.t_to_js x311)|])
        let (create :
          replace:(location:replace_location -> value:string -> unit) ->
            insert:(location:Position.t -> value:string -> unit) ->
              delete:(location:delete_location -> unit) ->
                set_end_of_line:(end_of_line:EndOfLine.t -> t) -> t)
          =
          fun
            ~replace:(x313 :
                       location:replace_location -> value:string -> unit)
            ->
            fun ~insert:(x314 : location:Position.t -> value:string -> unit)
              ->
              fun ~delete:(x315 : location:delete_location -> unit) ->
                fun ~set_end_of_line:(x316 : end_of_line:EndOfLine.t -> t) ->
                  let x317 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x317 "replace"
                    (Ojs.fun_to_js 2
                       (fun (x322 : Ojs.t) ->
                          fun (x323 : Ojs.t) ->
                            x313 ~location:(replace_location_of_js x322)
                              ~value:(Ojs.string_of_js x323)));
                  Ojs.set_prop_ascii x317 "insert"
                    (Ojs.fun_to_js 2
                       (fun (x320 : Ojs.t) ->
                          fun (x321 : Ojs.t) ->
                            x314 ~location:(Position.t_of_js x320)
                              ~value:(Ojs.string_of_js x321)));
                  Ojs.set_prop_ascii x317 "delete"
                    (Ojs.fun_to_js 1
                       (fun (x319 : Ojs.t) ->
                          x315 ~location:(delete_location_of_js x319)));
                  Ojs.set_prop_ascii x317 "setEndOfLine"
                    (Ojs.fun_to_js 1
                       (fun (x318 : Ojs.t) ->
                          t_to_js
                            (x316 ~end_of_line:(EndOfLine.t_of_js x318))));
                  t_of_js x317
      end
    module ViewColumn =
      struct
        type t =
          [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | `Six 
          | `Seven  | `Eight  | `Nine ]
        let rec t_of_js : Ojs.t -> t =
          fun (x325 : Ojs.t) ->
            let x326 = x325 in
            match Ojs.int_of_js x326 with
            | (-2) -> `Beside
            | 1 -> `One
            | 2 -> `Two
            | 3 -> `Three
            | 4 -> `Four
            | 5 -> `Five
            | 6 -> `Six
            | 7 -> `Seven
            | 8 -> `Eight
            | 9 -> `Nine
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x324 :
              [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | 
                `Six 
              | `Seven  | `Eight  | `Nine ])
            ->
            match x324 with
            | `Beside -> Ojs.int_to_js (-2)
            | `One -> Ojs.int_to_js 1
            | `Two -> Ojs.int_to_js 2
            | `Three -> Ojs.int_to_js 3
            | `Four -> Ojs.int_to_js 4
            | `Five -> Ojs.int_to_js 5
            | `Six -> Ojs.int_to_js 6
            | `Seven -> Ojs.int_to_js 7
            | `Eight -> Ojs.int_to_js 8
            | `Nine -> Ojs.int_to_js 9
      end
    module SnippetString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x328 : Ojs.t) -> x328
        and t_to_js : t -> Ojs.t = fun (x327 : Ojs.t) -> x327
        let (value : t -> string) =
          fun (x329 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x329) "value")
        let (set_value : t -> string -> unit) =
          fun (x330 : t) ->
            fun (x331 : string) ->
              Ojs.set_prop_ascii (t_to_js x330) "value"
                (Ojs.string_to_js x331)
        let (create : ?value:string -> unit -> t) =
          fun ?value:(x332 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SnippetString")
                   (let x333 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x332 with
                     | Some x334 ->
                         ignore
                           (Ojs.call x333 "push" [|(Ojs.string_to_js x334)|])
                     | None -> ());
                    x333))
        let (append_text : t -> string -> t) =
          fun (x336 : t) ->
            fun (x335 : string) ->
              t_of_js
                (Ojs.call (t_to_js x336) "appendText"
                   [|(Ojs.string_to_js x335)|])
        let (append_tabstop : t -> ?number:int -> unit -> t) =
          fun (x340 : t) ->
            fun ?number:(x337 : int option) ->
              fun () ->
                t_of_js
                  (let x341 = t_to_js x340 in
                   Ojs.call (Ojs.get_prop_ascii x341 "appendTabstop") "apply"
                     [|x341;((let x338 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x337 with
                               | Some x339 ->
                                   ignore
                                     (Ojs.call x338 "push"
                                        [|(Ojs.int_to_js x339)|])
                               | None -> ());
                              x338))|])
        let (append_placeholder : t -> string -> ?number:int -> unit -> t) =
          fun (x346 : t) ->
            fun (x342 : string) ->
              fun ?number:(x343 : int option) ->
                fun () ->
                  t_of_js
                    (let x347 = t_to_js x346 in
                     Ojs.call (Ojs.get_prop_ascii x347 "appendPlaceholder")
                       "apply"
                       [|x347;((let x344 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x344 "push"
                                     [|(Ojs.string_to_js x342)|]);
                                (match x343 with
                                 | Some x345 ->
                                     ignore
                                       (Ojs.call x344 "push"
                                          [|(Ojs.int_to_js x345)|])
                                 | None -> ());
                                x344))|])
        let (append_choice : t -> string list -> ?number:int -> unit -> t) =
          fun (x353 : t) ->
            fun (x348 : string list) ->
              fun ?number:(x349 : int option) ->
                fun () ->
                  t_of_js
                    (let x354 = t_to_js x353 in
                     Ojs.call (Ojs.get_prop_ascii x354 "appendChoice")
                       "apply"
                       [|x354;((let x350 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x350 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x348)|]);
                                (match x349 with
                                 | Some x351 ->
                                     ignore
                                       (Ojs.call x350 "push"
                                          [|(Ojs.int_to_js x351)|])
                                 | None -> ());
                                x350))|])
        let (append_variable : t -> string -> default:string -> t) =
          fun (x357 : t) ->
            fun (x355 : string) ->
              fun ~default:(x356 : string) ->
                t_of_js
                  (Ojs.call (t_to_js x357) "appendVariable"
                     [|(Ojs.string_to_js x355);(Ojs.string_to_js x356)|])
      end
    module ThemeColor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x359 : Ojs.t) -> x359
        and t_to_js : t -> Ojs.t = fun (x358 : Ojs.t) -> x358
        let (create : string -> t) =
          fun (x360 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeColor")
                 [|(Ojs.string_to_js x360)|])
      end
    module ThemeIcon =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x362 : Ojs.t) -> x362
        and t_to_js : t -> Ojs.t = fun (x361 : Ojs.t) -> x361
        let (file : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "File")
        let (folder : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "Folder")
        let (id : t -> string) =
          fun (x363 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x363) "id")
        let (color : t -> ThemeColor.t) =
          fun (x364 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x364) "color")
        let (create : string -> ?color:ThemeColor.t -> unit -> t) =
          fun (x365 : string) ->
            fun ?color:(x366 : ThemeColor.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                     (let x367 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x367 "push" [|(Ojs.string_to_js x365)|]);
                      (match x366 with
                       | Some x368 ->
                           ignore
                             (Ojs.call x367 "push"
                                [|(ThemeColor.t_to_js x368)|])
                       | None -> ());
                      x367))
      end
    module ThemableDecorationAttachmentRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x370 : Ojs.t) -> x370
        and t_to_js : t -> Ojs.t = fun (x369 : Ojs.t) -> x369
        let (content_text : t -> string) =
          fun (x371 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x371) "contentText")
        let (set_content_text : t -> string -> unit) =
          fun (x372 : t) ->
            fun (x373 : string) ->
              Ojs.set_prop_ascii (t_to_js x372) "contentText"
                (Ojs.string_to_js x373)
        let (content_icon_path : t -> Uri.t or_string) =
          fun (x374 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x374) "contentIconPath")
        let (set_content_icon_path : t -> Uri.t or_string -> unit) =
          fun (x376 : t) ->
            fun (x377 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x376) "contentIconPath"
                (or_string_to_js Uri.t_to_js x377)
        let (border : t -> string) =
          fun (x379 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x379) "border")
        let (set_border : t -> string -> unit) =
          fun (x380 : t) ->
            fun (x381 : string) ->
              Ojs.set_prop_ascii (t_to_js x380) "border"
                (Ojs.string_to_js x381)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x382 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x382) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x384 : t) ->
            fun (x385 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x384) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x385)
        let (font_style : t -> string) =
          fun (x387 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x387) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x388 : t) ->
            fun (x389 : string) ->
              Ojs.set_prop_ascii (t_to_js x388) "fontStyle"
                (Ojs.string_to_js x389)
        let (font_weight : t -> string) =
          fun (x390 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x390) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x391 : t) ->
            fun (x392 : string) ->
              Ojs.set_prop_ascii (t_to_js x391) "fontWeight"
                (Ojs.string_to_js x392)
        let (text_decoration : t -> string) =
          fun (x393 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x393) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x394 : t) ->
            fun (x395 : string) ->
              Ojs.set_prop_ascii (t_to_js x394) "textDecoration"
                (Ojs.string_to_js x395)
        let (color : t -> ThemeColor.t or_string) =
          fun (x396 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x396) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x398 : t) ->
            fun (x399 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x398) "color"
                (or_string_to_js ThemeColor.t_to_js x399)
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x401 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x401) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x403 : t) ->
            fun (x404 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x403) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x404)
        let (margin : t -> string) =
          fun (x406 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x406) "margin")
        let (set_margin : t -> string -> unit) =
          fun (x407 : t) ->
            fun (x408 : string) ->
              Ojs.set_prop_ascii (t_to_js x407) "margin"
                (Ojs.string_to_js x408)
        let (width : t -> string) =
          fun (x409 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x409) "width")
        let (set_width : t -> string -> unit) =
          fun (x410 : t) ->
            fun (x411 : string) ->
              Ojs.set_prop_ascii (t_to_js x410) "width"
                (Ojs.string_to_js x411)
        let (height : t -> string) =
          fun (x412 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x412) "height")
        let (set_height : t -> string -> unit) =
          fun (x413 : t) ->
            fun (x414 : string) ->
              Ojs.set_prop_ascii (t_to_js x413) "height"
                (Ojs.string_to_js x414)
      end
    module ThemableDecorationRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x416 : Ojs.t) -> x416
        and t_to_js : t -> Ojs.t = fun (x415 : Ojs.t) -> x415
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x417 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x417) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x419 : t) ->
            fun (x420 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x419) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x420)
        let (outline : t -> string) =
          fun (x422 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x422) "outline")
        let (set_outline : t -> string -> unit) =
          fun (x423 : t) ->
            fun (x424 : string) ->
              Ojs.set_prop_ascii (t_to_js x423) "outline"
                (Ojs.string_to_js x424)
        let (outline_color : t -> ThemeColor.t or_string) =
          fun (x425 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x425) "outlineColor")
        let (set_outline_color : t -> ThemeColor.t or_string -> unit) =
          fun (x427 : t) ->
            fun (x428 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x427) "outlineColor"
                (or_string_to_js ThemeColor.t_to_js x428)
        let (outline_style : t -> string) =
          fun (x430 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x430) "outlineStyle")
        let (set_outline_style : t -> string -> unit) =
          fun (x431 : t) ->
            fun (x432 : string) ->
              Ojs.set_prop_ascii (t_to_js x431) "outlineStyle"
                (Ojs.string_to_js x432)
        let (outline_width : t -> string) =
          fun (x433 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x433) "outlineWidth")
        let (set_outline_width : t -> string -> unit) =
          fun (x434 : t) ->
            fun (x435 : string) ->
              Ojs.set_prop_ascii (t_to_js x434) "outlineWidth"
                (Ojs.string_to_js x435)
        let (border : t -> string) =
          fun (x436 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x436) "border")
        let (set_border : t -> string -> unit) =
          fun (x437 : t) ->
            fun (x438 : string) ->
              Ojs.set_prop_ascii (t_to_js x437) "border"
                (Ojs.string_to_js x438)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x439 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x439) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x441 : t) ->
            fun (x442 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x441) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x442)
        let (border_radius : t -> string) =
          fun (x444 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x444) "borderRadius")
        let (set_border_radius : t -> string -> unit) =
          fun (x445 : t) ->
            fun (x446 : string) ->
              Ojs.set_prop_ascii (t_to_js x445) "borderRadius"
                (Ojs.string_to_js x446)
        let (border_spacing : t -> string) =
          fun (x447 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x447) "borderSpacing")
        let (set_border_spacing : t -> string -> unit) =
          fun (x448 : t) ->
            fun (x449 : string) ->
              Ojs.set_prop_ascii (t_to_js x448) "borderSpacing"
                (Ojs.string_to_js x449)
        let (border_style : t -> string) =
          fun (x450 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x450) "borderStyle")
        let (set_border_style : t -> string -> unit) =
          fun (x451 : t) ->
            fun (x452 : string) ->
              Ojs.set_prop_ascii (t_to_js x451) "borderStyle"
                (Ojs.string_to_js x452)
        let (border_width : t -> string) =
          fun (x453 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x453) "borderWidth")
        let (set_border_width : t -> string -> unit) =
          fun (x454 : t) ->
            fun (x455 : string) ->
              Ojs.set_prop_ascii (t_to_js x454) "borderWidth"
                (Ojs.string_to_js x455)
        let (font_style : t -> string) =
          fun (x456 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x456) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x457 : t) ->
            fun (x458 : string) ->
              Ojs.set_prop_ascii (t_to_js x457) "fontStyle"
                (Ojs.string_to_js x458)
        let (font_weight : t -> string) =
          fun (x459 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x459) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x460 : t) ->
            fun (x461 : string) ->
              Ojs.set_prop_ascii (t_to_js x460) "fontWeight"
                (Ojs.string_to_js x461)
        let (text_decoration : t -> string) =
          fun (x462 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x462) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x463 : t) ->
            fun (x464 : string) ->
              Ojs.set_prop_ascii (t_to_js x463) "textDecoration"
                (Ojs.string_to_js x464)
        let (cursor : t -> string) =
          fun (x465 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x465) "cursor")
        let (set_cursor : t -> string -> unit) =
          fun (x466 : t) ->
            fun (x467 : string) ->
              Ojs.set_prop_ascii (t_to_js x466) "cursor"
                (Ojs.string_to_js x467)
        let (color : t -> ThemeColor.t or_string) =
          fun (x468 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x468) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x470 : t) ->
            fun (x471 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x470) "color"
                (or_string_to_js ThemeColor.t_to_js x471)
        let (opacity : t -> string) =
          fun (x473 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x473) "opacity")
        let (set_opacity : t -> string -> unit) =
          fun (x474 : t) ->
            fun (x475 : string) ->
              Ojs.set_prop_ascii (t_to_js x474) "opacity"
                (Ojs.string_to_js x475)
        let (letter_spacing : t -> string) =
          fun (x476 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x476) "letterSpacing")
        let (set_letter_spacing : t -> string -> unit) =
          fun (x477 : t) ->
            fun (x478 : string) ->
              Ojs.set_prop_ascii (t_to_js x477) "letterSpacing"
                (Ojs.string_to_js x478)
        let (gutter_icon_path : t -> Uri.t or_string) =
          fun (x479 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x479) "gutterIconPath")
        let (set_gutter_icon_path : t -> Uri.t or_string -> unit) =
          fun (x481 : t) ->
            fun (x482 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x481) "gutterIconPath"
                (or_string_to_js Uri.t_to_js x482)
        let (gutter_icon_size : t -> string) =
          fun (x484 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x484) "gutterIconSize")
        let (set_gutter_icon_size : t -> string -> unit) =
          fun (x485 : t) ->
            fun (x486 : string) ->
              Ojs.set_prop_ascii (t_to_js x485) "gutterIconSize"
                (Ojs.string_to_js x486)
        let (overview_ruler_color : t -> ThemeColor.t or_string) =
          fun (x487 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x487) "overviewRulerColor")
        let (set_overview_ruler_color : t -> ThemeColor.t or_string -> unit)
          =
          fun (x489 : t) ->
            fun (x490 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x489) "overviewRulerColor"
                (or_string_to_js ThemeColor.t_to_js x490)
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x492 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x492) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x493 : t) ->
            fun (x494 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x493) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x494)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x495 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x495) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x496 : t) ->
            fun (x497 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x496) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x497)
      end
    module OverviewRulerLane =
      struct
        type t = [ `Center  | `Right  | `Full ]
        let rec t_of_js : Ojs.t -> t =
          fun (x499 : Ojs.t) ->
            let x500 = x499 in
            match Ojs.int_of_js x500 with
            | 2 -> `Center
            | 4 -> `Right
            | 7 -> `Full
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x498 : [ `Center  | `Right  | `Full ]) ->
            match x498 with
            | `Center -> Ojs.int_to_js 2
            | `Right -> Ojs.int_to_js 4
            | `Full -> Ojs.int_to_js 7
      end
    module DecorationRangeBehavior =
      struct
        type t = [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]
        let rec t_of_js : Ojs.t -> t =
          fun (x502 : Ojs.t) ->
            let x503 = x502 in
            match Ojs.int_of_js x503 with
            | 1 -> `ClosedClosed
            | 2 -> `OpenClosed
            | 3 -> `ClosedOpen
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x501 : [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]) ->
            match x501 with
            | `ClosedClosed -> Ojs.int_to_js 1
            | `OpenClosed -> Ojs.int_to_js 2
            | `ClosedOpen -> Ojs.int_to_js 3
      end
    module DecorationRenderOptions =
      struct
        include struct include ThemableDecorationRenderOptions end
        let (is_whole_line : t -> bool) =
          fun (x504 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x504) "isWholeLine")
        let (set_is_whole_line : t -> bool -> unit) =
          fun (x505 : t) ->
            fun (x506 : bool) ->
              Ojs.set_prop_ascii (t_to_js x505) "isWholeLine"
                (Ojs.bool_to_js x506)
        let (range_behavior : t -> DecorationRangeBehavior.t) =
          fun (x507 : t) ->
            DecorationRangeBehavior.t_of_js
              (Ojs.get_prop_ascii (t_to_js x507) "rangeBehavior")
        let (set_range_behavior : t -> DecorationRangeBehavior.t -> unit) =
          fun (x508 : t) ->
            fun (x509 : DecorationRangeBehavior.t) ->
              Ojs.set_prop_ascii (t_to_js x508) "rangeBehavior"
                (DecorationRangeBehavior.t_to_js x509)
        let (overview_ruler_lane : t -> OverviewRulerLane.t) =
          fun (x510 : t) ->
            OverviewRulerLane.t_of_js
              (Ojs.get_prop_ascii (t_to_js x510) "overviewRulerLane")
        let (set_overview_ruler_lane : t -> OverviewRulerLane.t -> unit) =
          fun (x511 : t) ->
            fun (x512 : OverviewRulerLane.t) ->
              Ojs.set_prop_ascii (t_to_js x511) "overviewRulerLane"
                (OverviewRulerLane.t_to_js x512)
        let (light : t -> ThemableDecorationRenderOptions.t) =
          fun (x513 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x513) "light")
        let (set_light : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x514 : t) ->
            fun (x515 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x514) "light"
                (ThemableDecorationRenderOptions.t_to_js x515)
        let (dark : t -> ThemableDecorationRenderOptions.t) =
          fun (x516 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x516) "dark")
        let (set_dark : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x517 : t) ->
            fun (x518 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x517) "dark"
                (ThemableDecorationRenderOptions.t_to_js x518)
      end
    module ThemableDecorationInstanceRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x520 : Ojs.t) -> x520
        and t_to_js : t -> Ojs.t = fun (x519 : Ojs.t) -> x519
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x521 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x521) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x522 : t) ->
            fun (x523 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x522) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x523)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x524 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x524) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x525 : t) ->
            fun (x526 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x525) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x526)
      end
    module DecorationInstanceRenderOptions =
      struct
        include struct include ThemableDecorationInstanceRenderOptions end
        let (light : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x527 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x527) "light")
        let (set_light :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x528 : t) ->
            fun (x529 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x528) "light"
                (ThemableDecorationInstanceRenderOptions.t_to_js x529)
        let (dark : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x530 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x530) "dark")
        let (set_dark :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x531 : t) ->
            fun (x532 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x531) "dark"
                (ThemableDecorationInstanceRenderOptions.t_to_js x532)
      end
    module MarkedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x534 : Ojs.t) -> x534
        and t_to_js : t -> Ojs.t = fun (x533 : Ojs.t) -> x533
      end
    module DecorationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x536 : Ojs.t) -> x536
        and t_to_js : t -> Ojs.t = fun (x535 : Ojs.t) -> x535
        let (range : t -> Range.t) =
          fun (x537 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x537) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x538 : t) ->
            fun (x539 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x538) "range" (Range.t_to_js x539)
        let (hover_message : t -> (MarkedString.t, MarkedString.t) or_array)
          =
          fun (x540 : t) ->
            or_array_of_js MarkedString.t_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x540) "hoverMessage")
        let (set_hover_message :
          t -> (MarkedString.t, MarkedString.t) or_array -> unit) =
          fun (x543 : t) ->
            fun (x544 : (MarkedString.t, MarkedString.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x543) "hoverMessage"
                (or_array_to_js MarkedString.t_to_js MarkedString.t_to_js
                   x544)
        let (render_options : t -> DecorationInstanceRenderOptions.t) =
          fun (x547 : t) ->
            DecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x547) "renderOptions")
        let (set_render_options :
          t -> DecorationInstanceRenderOptions.t -> unit) =
          fun (x548 : t) ->
            fun (x549 : DecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x548) "renderOptions"
                (DecorationInstanceRenderOptions.t_to_js x549)
      end
    module TextEditor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x551 : Ojs.t) -> x551
        and t_to_js : t -> Ojs.t = fun (x550 : Ojs.t) -> x550
        let (document : t -> TextDocument.t) =
          fun (x552 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x552) "document")
        let (selection : t -> Selection.t) =
          fun (x553 : t) ->
            Selection.t_of_js (Ojs.get_prop_ascii (t_to_js x553) "selection")
        let (set_selection : t -> Selection.t -> unit) =
          fun (x554 : t) ->
            fun (x555 : Selection.t) ->
              Ojs.set_prop_ascii (t_to_js x554) "selection"
                (Selection.t_to_js x555)
        let (selections : t -> Selection.t list) =
          fun (x556 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x556) "selections")
        let (set_selections : t -> Selection.t list -> unit) =
          fun (x558 : t) ->
            fun (x559 : Selection.t list) ->
              Ojs.set_prop_ascii (t_to_js x558) "selections"
                (Ojs.list_to_js Selection.t_to_js x559)
        let (visible_ranges : t -> Range.t list) =
          fun (x561 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x561) "visibleRanges")
        let (options : t -> TextEditorOptions.t) =
          fun (x563 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x563) "options")
        let (set_options : t -> TextEditorOptions.t -> unit) =
          fun (x564 : t) ->
            fun (x565 : TextEditorOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x564) "options"
                (TextEditorOptions.t_to_js x565)
        let (view_column : t -> ViewColumn.t) =
          fun (x566 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x566) "viewColumn")
        module EditOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x568 : Ojs.t) -> x568
            and t_to_js : t -> Ojs.t = fun (x567 : Ojs.t) -> x567
            let (undo_stop_before : t -> bool) =
              fun (x569 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x569) "undoStopBefore")
            let (set_undo_stop_before : t -> bool -> unit) =
              fun (x570 : t) ->
                fun (x571 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x570) "undoStopBefore"
                    (Ojs.bool_to_js x571)
            let (undo_stop_after : t -> bool) =
              fun (x572 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x572) "undoStopAfter")
            let (set_undo_stop_after : t -> bool -> unit) =
              fun (x573 : t) ->
                fun (x574 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x573) "undoStopAfter"
                    (Ojs.bool_to_js x574)
          end
        let (edit :
          t ->
            (TextEditorEdit.t -> unit) ->
              ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x580 : t) ->
            fun (x575 : TextEditorEdit.t -> unit) ->
              fun ?options:(x576 : EditOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x581 = t_to_js x580 in
                     Ojs.call (Ojs.get_prop_ascii x581 "edit") "apply"
                       [|x581;((let x577 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x577 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x579 : Ojs.t) ->
                                             x575
                                               (TextEditorEdit.t_of_js x579)))|]);
                                (match x576 with
                                 | Some x578 ->
                                     ignore
                                       (Ojs.call x577 "push"
                                          [|(EditOptions.t_to_js x578)|])
                                 | None -> ());
                                x577))|])
        let (insert_snippet :
          t ->
            SnippetString.t ->
              ?location:(Position.t, Range.t, Position.t list, Range.t list)
                union4 -> ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x595 : t) ->
            fun (x583 : SnippetString.t) ->
              fun
                ?location:(x584 :
                            (Position.t, Range.t, Position.t list,
                              Range.t list) union4 option)
                ->
                fun ?options:(x585 : EditOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.bool_of_js
                      (let x596 = t_to_js x595 in
                       Ojs.call (Ojs.get_prop_ascii x596 "insertSnippet")
                         "apply"
                         [|x596;((let x586 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x586 "push"
                                       [|(SnippetString.t_to_js x583)|]);
                                  (match x584 with
                                   | Some x588 ->
                                       ignore
                                         (Ojs.call x586 "push"
                                            [|(union4_to_js Position.t_to_js
                                                 Range.t_to_js
                                                 (fun
                                                    (x591 : Position.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Position.t_to_js x591)
                                                 (fun (x593 : Range.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Range.t_to_js x593)
                                                 x588)|])
                                   | None -> ());
                                  (match x585 with
                                   | Some x587 ->
                                       ignore
                                         (Ojs.call x586 "push"
                                            [|(EditOptions.t_to_js x587)|])
                                   | None -> ());
                                  x586))|])
        let (set_decorations :
          t ->
            TextEditorDecorationType.t ->
              (DecorationOptions.t, Range.t) union2 list -> unit)
          =
          fun (x603 : t) ->
            fun (x598 : TextEditorDecorationType.t) ->
              fun (x599 : (DecorationOptions.t, Range.t) union2 list) ->
                ignore
                  (Ojs.call (t_to_js x603) "setDecorations"
                     [|(TextEditorDecorationType.t_to_js x598);(Ojs.list_to_js
                                                                  (fun
                                                                    (x600 :
                                                                    (DecorationOptions.t,
                                                                    Range.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    DecorationOptions.t_to_js
                                                                    Range.t_to_js
                                                                    x600)
                                                                  x599)|])
        let (reveal_range :
          t ->
            Range.t -> ?reveal_type_:TextEditorRevealType.t -> unit -> unit)
          =
          fun (x608 : t) ->
            fun (x604 : Range.t) ->
              fun ?reveal_type_:(x605 : TextEditorRevealType.t option) ->
                fun () ->
                  ignore
                    (let x609 = t_to_js x608 in
                     Ojs.call (Ojs.get_prop_ascii x609 "revealRange") "apply"
                       [|x609;((let x606 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x606 "push"
                                     [|(Range.t_to_js x604)|]);
                                (match x605 with
                                 | Some x607 ->
                                     ignore
                                       (Ojs.call x606 "push"
                                          [|(TextEditorRevealType.t_to_js
                                               x607)|])
                                 | None -> ());
                                x606))|])
        let (show : t -> ?column:ViewColumn.t -> unit -> unit) =
          fun (x613 : t) ->
            fun ?column:(x610 : ViewColumn.t option) ->
              fun () ->
                ignore
                  (let x614 = t_to_js x613 in
                   Ojs.call (Ojs.get_prop_ascii x614 "show") "apply"
                     [|x614;((let x611 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x610 with
                               | Some x612 ->
                                   ignore
                                     (Ojs.call x611 "push"
                                        [|(ViewColumn.t_to_js x612)|])
                               | None -> ());
                              x611))|])
        let (hide : t -> unit) =
          fun (x615 : t) -> ignore (Ojs.call (t_to_js x615) "hide" [||])
      end
    module TextEditorSelectionChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x617 : Ojs.t) -> x617
        and t_to_js : t -> Ojs.t = fun (x616 : Ojs.t) -> x616
        let (text_editor : t -> TextEditor.t) =
          fun (x618 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x618) "textEditor")
        let (selections : t -> Selection.t list) =
          fun (x619 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x619) "selections")
        let (kind : t -> TextEditorSelectionChangeKind.t) =
          fun (x621 : t) ->
            TextEditorSelectionChangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x621) "kind")
      end
    module TextEditorVisibleRangesChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x623 : Ojs.t) -> x623
        and t_to_js : t -> Ojs.t = fun (x622 : Ojs.t) -> x622
        let (text_editor : t -> TextEditor.t) =
          fun (x624 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x624) "textEditor")
        let (visible_ranges : t -> Range.t list) =
          fun (x625 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x625) "visibleRanges")
      end
    module TextEditorOptionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x628 : Ojs.t) -> x628
        and t_to_js : t -> Ojs.t = fun (x627 : Ojs.t) -> x627
        let (text_editor : t -> TextEditor.t) =
          fun (x629 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x629) "textEditor")
        let (options : t -> TextEditorOptions.t) =
          fun (x630 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x630) "options")
      end
    module TextEditorViewColumnChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x632 : Ojs.t) -> x632
        and t_to_js : t -> Ojs.t = fun (x631 : Ojs.t) -> x631
        let (text_editor : t -> TextEditor.t) =
          fun (x633 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x633) "textEditor")
        let (view_column : t -> ViewColumn.t) =
          fun (x634 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x634) "viewColumn")
      end
    module TextDocumentShowOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x636 : Ojs.t) -> x636
        and t_to_js : t -> Ojs.t = fun (x635 : Ojs.t) -> x635
        let (view_column : t -> ViewColumn.t) =
          fun (x637 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x637) "viewColumn")
        let (set_view_column : t -> ViewColumn.t -> unit) =
          fun (x638 : t) ->
            fun (x639 : ViewColumn.t) ->
              Ojs.set_prop_ascii (t_to_js x638) "viewColumn"
                (ViewColumn.t_to_js x639)
        let (preserve_focus : t -> bool) =
          fun (x640 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x640) "preserveFocus")
        let (set_preserve_focus : t -> bool -> unit) =
          fun (x641 : t) ->
            fun (x642 : bool) ->
              Ojs.set_prop_ascii (t_to_js x641) "preserveFocus"
                (Ojs.bool_to_js x642)
        let (preview : t -> bool) =
          fun (x643 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x643) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x644 : t) ->
            fun (x645 : bool) ->
              Ojs.set_prop_ascii (t_to_js x644) "preview"
                (Ojs.bool_to_js x645)
        let (selection : t -> Range.t) =
          fun (x646 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x646) "selection")
        let (set_selection : t -> Range.t -> unit) =
          fun (x647 : t) ->
            fun (x648 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x647) "selection"
                (Range.t_to_js x648)
      end
    module DisposableLike =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x650 : Ojs.t) -> x650
        and t_to_js : t -> Ojs.t = fun (x649 : Ojs.t) -> x649
        let (dispose : t -> any) =
          fun (x651 : t) ->
            any_of_js (Ojs.call (t_to_js x651) "dispose" [||])
      end
    module Disposable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x653 : Ojs.t) -> x653
        and t_to_js : t -> Ojs.t = fun (x652 : Ojs.t) -> x652
        let (from : DisposableLike.t list -> t) =
          fun (x654 : DisposableLike.t list) ->
            t_of_js
              (let x657 =
                 Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                      "vscode") "Disposable" in
               Ojs.call (Ojs.get_prop_ascii x657 "from") "apply"
                 [|x657;((let x655 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x656 : DisposableLike.t) ->
                               ignore
                                 (Ojs.call x655 "push"
                                    [|(DisposableLike.t_to_js x656)|])) x654;
                          x655))|])
        let (create : untyped_function -> t) =
          fun (x658 : untyped_function) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Disposable")
                 [|(untyped_function_to_js x658)|])
        let (dispose : t -> any) =
          fun (x659 : t) ->
            any_of_js (Ojs.call (t_to_js x659) "dispose" [||])
      end
    module Event =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x661 : Ojs.t) -> x661
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x660 : Ojs.t) -> x660
        let (apply :
          'T t ->
            ('T -> any) ->
              ?this_args:any ->
                ?disposables:Disposable.t list -> unit -> Disposable.t)
          =
          fun (x670 : 'T t) ->
            fun (x662 : 'T -> any) ->
              fun ?this_args:(x663 : any option) ->
                fun ?disposables:(x664 : Disposable.t list option) ->
                  fun () ->
                    Disposable.t_of_js
                      (Ojs.call (t_to_js Obj.magic x670) "apply"
                         [|Ojs.null;((let x665 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x665 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x669 : Ojs.t) ->
                                                   any_to_js
                                                     (x662 (Obj.magic x669))))|]);
                                      (match x663 with
                                       | Some x668 ->
                                           ignore
                                             (Ojs.call x665 "push"
                                                [|(any_to_js x668)|])
                                       | None -> ());
                                      (match x664 with
                                       | Some x666 ->
                                           ignore
                                             (Ojs.call x665 "push"
                                                [|(Ojs.list_to_js
                                                     Disposable.t_to_js x666)|])
                                       | None -> ());
                                      x665))|])
      end
    module CancellationToken =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x673 : Ojs.t) -> x673
        and t_to_js : t -> Ojs.t = fun (x672 : Ojs.t) -> x672
        let (is_cancellation_requested : t -> bool) =
          fun (x674 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x674) "isCancellationRequested")
        let (set_is_cancellation_requested : t -> bool -> unit) =
          fun (x675 : t) ->
            fun (x676 : bool) ->
              Ojs.set_prop_ascii (t_to_js x675) "isCancellationRequested"
                (Ojs.bool_to_js x676)
        let (on_cancellation_requested : t -> any Event.t) =
          fun (x677 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x677) "onCancellationRequested")
        let (set_on_cancellation_requested : t -> any Event.t -> unit) =
          fun (x679 : t) ->
            fun (x680 : any Event.t) ->
              Ojs.set_prop_ascii (t_to_js x679) "onCancellationRequested"
                (Event.t_to_js any_to_js x680)
      end
    module CancellationTokenSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x683 : Ojs.t) -> x683
        and t_to_js : t -> Ojs.t = fun (x682 : Ojs.t) -> x682
        let (token : t -> CancellationToken.t) =
          fun (x684 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x684) "token")
        let (set_token : t -> CancellationToken.t -> unit) =
          fun (x685 : t) ->
            fun (x686 : CancellationToken.t) ->
              Ojs.set_prop_ascii (t_to_js x685) "token"
                (CancellationToken.t_to_js x686)
        let (cancel : t -> unit) =
          fun (x687 : t) -> ignore (Ojs.call (t_to_js x687) "cancel" [||])
        let (dispose : t -> unit) =
          fun (x688 : t) -> ignore (Ojs.call (t_to_js x688) "dispose" [||])
      end
    module CancellationError =
      struct
        include struct include Error end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CancellationError") [||])
      end
    module EventEmitter =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x690 : Ojs.t) -> x690
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x689 : Ojs.t) -> x689
        let (event : 'T t -> 'T Event.t) =
          fun (x691 : 'T t) ->
            Event.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x691) "event")
        let (set_event : 'T t -> 'T Event.t -> unit) =
          fun (x694 : 'T t) ->
            fun (x695 : 'T Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x694) "event"
                (Event.t_to_js Obj.magic x695)
        let (fire : 'T t -> 'T -> unit) =
          fun (x699 : 'T t) ->
            fun (x698 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x699) "fire"
                   [|(Obj.magic x698)|])
        let (dispose : 'T t -> unit) =
          fun (x701 : 'T t) ->
            ignore (Ojs.call (t_to_js Obj.magic x701) "dispose" [||])
        let (create : unit -> 'T t) =
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "EventEmitter")
                 [||])
      end
    module FileSystemWatcher =
      struct
        include struct include Disposable end
        let (ignore_create_events : t -> bool) =
          fun (x704 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x704) "ignoreCreateEvents")
        let (set_ignore_create_events : t -> bool -> unit) =
          fun (x705 : t) ->
            fun (x706 : bool) ->
              Ojs.set_prop_ascii (t_to_js x705) "ignoreCreateEvents"
                (Ojs.bool_to_js x706)
        let (ignore_change_events : t -> bool) =
          fun (x707 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x707) "ignoreChangeEvents")
        let (set_ignore_change_events : t -> bool -> unit) =
          fun (x708 : t) ->
            fun (x709 : bool) ->
              Ojs.set_prop_ascii (t_to_js x708) "ignoreChangeEvents"
                (Ojs.bool_to_js x709)
        let (ignore_delete_events : t -> bool) =
          fun (x710 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x710) "ignoreDeleteEvents")
        let (set_ignore_delete_events : t -> bool -> unit) =
          fun (x711 : t) ->
            fun (x712 : bool) ->
              Ojs.set_prop_ascii (t_to_js x711) "ignoreDeleteEvents"
                (Ojs.bool_to_js x712)
        let (on_did_create : t -> Uri.t Event.t) =
          fun (x713 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x713) "onDidCreate")
        let (set_on_did_create : t -> Uri.t Event.t -> unit) =
          fun (x715 : t) ->
            fun (x716 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x715) "onDidCreate"
                (Event.t_to_js Uri.t_to_js x716)
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x718 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x718) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x720 : t) ->
            fun (x721 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x720) "onDidChange"
                (Event.t_to_js Uri.t_to_js x721)
        let (on_did_delete : t -> Uri.t Event.t) =
          fun (x723 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x723) "onDidDelete")
        let (set_on_did_delete : t -> Uri.t Event.t -> unit) =
          fun (x725 : t) ->
            fun (x726 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x725) "onDidDelete"
                (Event.t_to_js Uri.t_to_js x726)
      end
    module ProviderResult =
      struct
        type 'T t =
          [ `Value of 'T or_null_or_undefined 
          | `Promise of 'T or_null_or_undefined Promise.t ]
        let rec t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun
              (x728 :
                [ `Value of __T or_null_or_undefined 
                | `Promise of __T or_null_or_undefined Promise.t ])
              ->
              match x728 with
              | `Value x729 -> or_null_or_undefined_to_js __T_to_js x729
              | `Promise x731 ->
                  Promise.t_to_js
                    (fun (x732 : __T or_null_or_undefined) ->
                       or_null_or_undefined_to_js __T_to_js x732) x731
        let t_to_js ml_to_js =
          function
          | `Value v -> or_undefined_to_js ml_to_js v
          | `Promise p -> Promise.t_to_js (or_undefined_to_js ml_to_js) p
        let t_of_js ml_of_js js_val =
          if Ojs.has_property js_val "then"
          then
            `Promise (Promise.t_of_js (or_undefined_of_js ml_of_js) js_val)
          else `Value (or_undefined_of_js ml_of_js js_val)
      end
    module TextDocumentContentProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x740 : Ojs.t) -> x740
        and t_to_js : t -> Ojs.t = fun (x739 : Ojs.t) -> x739
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x741 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x741) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x743 : t) ->
            fun (x744 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x743) "onDidChange"
                (Event.t_to_js Uri.t_to_js x744)
        let (provide_text_document_content :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> string ProviderResult.t)
          =
          fun (x748 : t) ->
            fun ~uri:(x746 : Uri.t) ->
              fun ~token:(x747 : CancellationToken.t) ->
                ProviderResult.t_of_js Ojs.string_of_js
                  (Ojs.call (t_to_js x748) "provideTextDocumentContent"
                     [|(Uri.t_to_js x746);(CancellationToken.t_to_js x747)|])
      end
    module QuickPickItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x751 : Ojs.t) -> x751
        and t_to_js : t -> Ojs.t = fun (x750 : Ojs.t) -> x750
        let (label : t -> string) =
          fun (x752 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x752) "label")
        let (set_label : t -> string -> unit) =
          fun (x753 : t) ->
            fun (x754 : string) ->
              Ojs.set_prop_ascii (t_to_js x753) "label"
                (Ojs.string_to_js x754)
        let (description : t -> string) =
          fun (x755 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x755) "description")
        let (set_description : t -> string -> unit) =
          fun (x756 : t) ->
            fun (x757 : string) ->
              Ojs.set_prop_ascii (t_to_js x756) "description"
                (Ojs.string_to_js x757)
        let (detail : t -> string) =
          fun (x758 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x758) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x759 : t) ->
            fun (x760 : string) ->
              Ojs.set_prop_ascii (t_to_js x759) "detail"
                (Ojs.string_to_js x760)
        let (picked : t -> bool) =
          fun (x761 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x761) "picked")
        let (set_picked : t -> bool -> unit) =
          fun (x762 : t) ->
            fun (x763 : bool) ->
              Ojs.set_prop_ascii (t_to_js x762) "picked"
                (Ojs.bool_to_js x763)
        let (always_show : t -> bool) =
          fun (x764 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x764) "alwaysShow")
        let (set_always_show : t -> bool -> unit) =
          fun (x765 : t) ->
            fun (x766 : bool) ->
              Ojs.set_prop_ascii (t_to_js x765) "alwaysShow"
                (Ojs.bool_to_js x766)
      end
    module QuickPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x768 : Ojs.t) -> x768
        and t_to_js : t -> Ojs.t = fun (x767 : Ojs.t) -> x767
        let (match_on_description : t -> bool) =
          fun (x769 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x769) "matchOnDescription")
        let (set_match_on_description : t -> bool -> unit) =
          fun (x770 : t) ->
            fun (x771 : bool) ->
              Ojs.set_prop_ascii (t_to_js x770) "matchOnDescription"
                (Ojs.bool_to_js x771)
        let (match_on_detail : t -> bool) =
          fun (x772 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x772) "matchOnDetail")
        let (set_match_on_detail : t -> bool -> unit) =
          fun (x773 : t) ->
            fun (x774 : bool) ->
              Ojs.set_prop_ascii (t_to_js x773) "matchOnDetail"
                (Ojs.bool_to_js x774)
        let (place_holder : t -> string) =
          fun (x775 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x775) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x776 : t) ->
            fun (x777 : string) ->
              Ojs.set_prop_ascii (t_to_js x776) "placeHolder"
                (Ojs.string_to_js x777)
        let (ignore_focus_out : t -> bool) =
          fun (x778 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x778) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x779 : t) ->
            fun (x780 : bool) ->
              Ojs.set_prop_ascii (t_to_js x779) "ignoreFocusOut"
                (Ojs.bool_to_js x780)
        let (can_pick_many : t -> bool) =
          fun (x781 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x781) "canPickMany")
        let (set_can_pick_many : t -> bool -> unit) =
          fun (x782 : t) ->
            fun (x783 : bool) ->
              Ojs.set_prop_ascii (t_to_js x782) "canPickMany"
                (Ojs.bool_to_js x783)
        let (on_did_select_item : t -> item:QuickPickItem.t or_string -> any)
          =
          fun (x786 : t) ->
            fun ~item:(x784 : QuickPickItem.t or_string) ->
              any_of_js
                (Ojs.call (t_to_js x786) "onDidSelectItem"
                   [|(or_string_to_js QuickPickItem.t_to_js x784)|])
      end
    module WorkspaceFolderPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x788 : Ojs.t) -> x788
        and t_to_js : t -> Ojs.t = fun (x787 : Ojs.t) -> x787
        let (place_holder : t -> string) =
          fun (x789 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x789) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x790 : t) ->
            fun (x791 : string) ->
              Ojs.set_prop_ascii (t_to_js x790) "placeHolder"
                (Ojs.string_to_js x791)
        let (ignore_focus_out : t -> bool) =
          fun (x792 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x792) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x793 : t) ->
            fun (x794 : bool) ->
              Ojs.set_prop_ascii (t_to_js x793) "ignoreFocusOut"
                (Ojs.bool_to_js x794)
      end
    module OpenDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x796 : Ojs.t) -> x796
        and t_to_js : t -> Ojs.t = fun (x795 : Ojs.t) -> x795
        let (default_uri : t -> Uri.t) =
          fun (x797 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x797) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x798 : t) ->
            fun (x799 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x798) "defaultUri"
                (Uri.t_to_js x799)
        let (open_label : t -> string) =
          fun (x800 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x800) "openLabel")
        let (set_open_label : t -> string -> unit) =
          fun (x801 : t) ->
            fun (x802 : string) ->
              Ojs.set_prop_ascii (t_to_js x801) "openLabel"
                (Ojs.string_to_js x802)
        let (can_select_files : t -> bool) =
          fun (x803 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x803) "canSelectFiles")
        let (set_can_select_files : t -> bool -> unit) =
          fun (x804 : t) ->
            fun (x805 : bool) ->
              Ojs.set_prop_ascii (t_to_js x804) "canSelectFiles"
                (Ojs.bool_to_js x805)
        let (can_select_folders : t -> bool) =
          fun (x806 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x806) "canSelectFolders")
        let (set_can_select_folders : t -> bool -> unit) =
          fun (x807 : t) ->
            fun (x808 : bool) ->
              Ojs.set_prop_ascii (t_to_js x807) "canSelectFolders"
                (Ojs.bool_to_js x808)
        let (can_select_many : t -> bool) =
          fun (x809 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x809) "canSelectMany")
        let (set_can_select_many : t -> bool -> unit) =
          fun (x810 : t) ->
            fun (x811 : bool) ->
              Ojs.set_prop_ascii (t_to_js x810) "canSelectMany"
                (Ojs.bool_to_js x811)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x813 : Ojs.t) -> x813
            and t_to_js : t -> Ojs.t = fun (x812 : Ojs.t) -> x812
            let (get : t -> string -> string list) =
              fun (x814 : t) ->
                fun (x815 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x814) (Ojs.string_to_js x815))
            let (set : t -> string -> string list -> unit) =
              fun (x817 : t) ->
                fun (x818 : string) ->
                  fun (x819 : string list) ->
                    Ojs.set_prop (t_to_js x817) (Ojs.string_to_js x818)
                      (Ojs.list_to_js Ojs.string_to_js x819)
          end
        let (filters : t -> Filters.t) =
          fun (x821 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x821) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x822 : t) ->
            fun (x823 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x822) "filters"
                (Filters.t_to_js x823)
        let (title : t -> string) =
          fun (x824 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x824) "title")
        let (set_title : t -> string -> unit) =
          fun (x825 : t) ->
            fun (x826 : string) ->
              Ojs.set_prop_ascii (t_to_js x825) "title"
                (Ojs.string_to_js x826)
      end
    module SaveDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x828 : Ojs.t) -> x828
        and t_to_js : t -> Ojs.t = fun (x827 : Ojs.t) -> x827
        let (default_uri : t -> Uri.t) =
          fun (x829 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x829) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x830 : t) ->
            fun (x831 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x830) "defaultUri"
                (Uri.t_to_js x831)
        let (save_label : t -> string) =
          fun (x832 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x832) "saveLabel")
        let (set_save_label : t -> string -> unit) =
          fun (x833 : t) ->
            fun (x834 : string) ->
              Ojs.set_prop_ascii (t_to_js x833) "saveLabel"
                (Ojs.string_to_js x834)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x836 : Ojs.t) -> x836
            and t_to_js : t -> Ojs.t = fun (x835 : Ojs.t) -> x835
            let (get : t -> string -> string list) =
              fun (x837 : t) ->
                fun (x838 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x837) (Ojs.string_to_js x838))
            let (set : t -> string -> string list -> unit) =
              fun (x840 : t) ->
                fun (x841 : string) ->
                  fun (x842 : string list) ->
                    Ojs.set_prop (t_to_js x840) (Ojs.string_to_js x841)
                      (Ojs.list_to_js Ojs.string_to_js x842)
          end
        let (filters : t -> Filters.t) =
          fun (x844 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x844) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x845 : t) ->
            fun (x846 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x845) "filters"
                (Filters.t_to_js x846)
        let (title : t -> string) =
          fun (x847 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x847) "title")
        let (set_title : t -> string -> unit) =
          fun (x848 : t) ->
            fun (x849 : string) ->
              Ojs.set_prop_ascii (t_to_js x848) "title"
                (Ojs.string_to_js x849)
      end
    module MessageItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x851 : Ojs.t) -> x851
        and t_to_js : t -> Ojs.t = fun (x850 : Ojs.t) -> x850
        let (title : t -> string) =
          fun (x852 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x852) "title")
        let (set_title : t -> string -> unit) =
          fun (x853 : t) ->
            fun (x854 : string) ->
              Ojs.set_prop_ascii (t_to_js x853) "title"
                (Ojs.string_to_js x854)
        let (is_close_affordance : t -> bool) =
          fun (x855 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x855) "isCloseAffordance")
        let (set_is_close_affordance : t -> bool -> unit) =
          fun (x856 : t) ->
            fun (x857 : bool) ->
              Ojs.set_prop_ascii (t_to_js x856) "isCloseAffordance"
                (Ojs.bool_to_js x857)
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x859 : Ojs.t) -> x859
        and t_to_js : t -> Ojs.t = fun (x858 : Ojs.t) -> x858
        let (modal : t -> bool) =
          fun (x860 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x860) "modal")
        let (set_modal : t -> bool -> unit) =
          fun (x861 : t) ->
            fun (x862 : bool) ->
              Ojs.set_prop_ascii (t_to_js x861) "modal" (Ojs.bool_to_js x862)
      end
    module InputBoxOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x864 : Ojs.t) -> x864
        and t_to_js : t -> Ojs.t = fun (x863 : Ojs.t) -> x863
        let (value : t -> string) =
          fun (x865 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x865) "value")
        let (set_value : t -> string -> unit) =
          fun (x866 : t) ->
            fun (x867 : string) ->
              Ojs.set_prop_ascii (t_to_js x866) "value"
                (Ojs.string_to_js x867)
        let (value_selection : t -> (int * int)) =
          fun (x868 : t) ->
            let x869 = Ojs.get_prop_ascii (t_to_js x868) "valueSelection" in
            ((Ojs.int_of_js (Ojs.array_get x869 0)),
              (Ojs.int_of_js (Ojs.array_get x869 1)))
        let (set_value_selection : t -> (int * int) -> unit) =
          fun (x870 : t) ->
            fun (x871 : (int * int)) ->
              Ojs.set_prop_ascii (t_to_js x870) "valueSelection"
                (let (x872, x873) = x871 in
                 let x874 = Ojs.array_make 2 in
                 Ojs.array_set x874 0 (Ojs.int_to_js x872);
                 Ojs.array_set x874 1 (Ojs.int_to_js x873);
                 x874)
        let (prompt : t -> string) =
          fun (x875 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x875) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x876 : t) ->
            fun (x877 : string) ->
              Ojs.set_prop_ascii (t_to_js x876) "prompt"
                (Ojs.string_to_js x877)
        let (place_holder : t -> string) =
          fun (x878 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x878) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x879 : t) ->
            fun (x880 : string) ->
              Ojs.set_prop_ascii (t_to_js x879) "placeHolder"
                (Ojs.string_to_js x880)
        let (password : t -> bool) =
          fun (x881 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x881) "password")
        let (set_password : t -> bool -> unit) =
          fun (x882 : t) ->
            fun (x883 : bool) ->
              Ojs.set_prop_ascii (t_to_js x882) "password"
                (Ojs.bool_to_js x883)
        let (ignore_focus_out : t -> bool) =
          fun (x884 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x884) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x885 : t) ->
            fun (x886 : bool) ->
              Ojs.set_prop_ascii (t_to_js x885) "ignoreFocusOut"
                (Ojs.bool_to_js x886)
        let (validate_input :
          t ->
            value:string ->
              string or_null_or_undefined Promise.t or_string
                or_null_or_undefined)
          =
          fun (x888 : t) ->
            fun ~value:(x887 : string) ->
              or_null_or_undefined_of_js
                (fun (x889 : Ojs.t) ->
                   or_string_of_js
                     (fun (x890 : Ojs.t) ->
                        Promise.t_of_js
                          (fun (x891 : Ojs.t) ->
                             or_null_or_undefined_of_js Ojs.string_of_js x891)
                          x890) x889)
                (Ojs.call (t_to_js x888) "validateInput"
                   [|(Ojs.string_to_js x887)|])
      end
    module WorkspaceFolder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x894 : Ojs.t) -> x894
        and t_to_js : t -> Ojs.t = fun (x893 : Ojs.t) -> x893
        let (uri : t -> Uri.t) =
          fun (x895 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x895) "uri")
        let (name : t -> string) =
          fun (x896 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x896) "name")
        let (index : t -> int) =
          fun (x897 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x897) "index")
        let (create : uri:Uri.t -> name:string -> index:int -> t) =
          fun ~uri:(x898 : Uri.t) ->
            fun ~name:(x899 : string) ->
              fun ~index:(x900 : int) ->
                let x901 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x901 "uri" (Uri.t_to_js x898);
                Ojs.set_prop_ascii x901 "name" (Ojs.string_to_js x899);
                Ojs.set_prop_ascii x901 "index" (Ojs.int_to_js x900);
                t_of_js x901
      end
    module RelativePattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x903 : Ojs.t) -> x903
        and t_to_js : t -> Ojs.t = fun (x902 : Ojs.t) -> x902
        let (base : t -> string) =
          fun (x904 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x904) "base")
        let (set_base : t -> string -> unit) =
          fun (x905 : t) ->
            fun (x906 : string) ->
              Ojs.set_prop_ascii (t_to_js x905) "base"
                (Ojs.string_to_js x906)
        let (pattern : t -> string) =
          fun (x907 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x907) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x908 : t) ->
            fun (x909 : string) ->
              Ojs.set_prop_ascii (t_to_js x908) "pattern"
                (Ojs.string_to_js x909)
        let (create :
          base:(Uri.t, WorkspaceFolder.t) union2 or_string ->
            pattern:string -> t)
          =
          fun ~base:(x910 : (Uri.t, WorkspaceFolder.t) union2 or_string) ->
            fun ~pattern:(x914 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "RelativePattern")
                   [|(or_string_to_js
                        (fun (x911 : (Uri.t, WorkspaceFolder.t) union2) ->
                           union2_to_js Uri.t_to_js WorkspaceFolder.t_to_js
                             x911) x910);(Ojs.string_to_js x914)|])
      end
    module GlobPattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x916 : Ojs.t) -> x916
        and t_to_js : t -> Ojs.t = fun (x915 : Ojs.t) -> x915
      end
    module DocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x918 : Ojs.t) -> x918
        and t_to_js : t -> Ojs.t = fun (x917 : Ojs.t) -> x917
        let (language : t -> string) =
          fun (x919 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x919) "language")
        let (scheme : t -> string) =
          fun (x920 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x920) "scheme")
        let (pattern : t -> GlobPattern.t) =
          fun (x921 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x921) "pattern")
      end
    module DocumentSelector =
      struct
        type t =
          (DocumentFilter.t, DocumentFilter.t or_string list) union2
            or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x928 : Ojs.t) ->
            or_string_of_js
              (fun (x929 : Ojs.t) ->
                 union2_of_js DocumentFilter.t_of_js
                   (fun (x931 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x932 : Ojs.t) ->
                           or_string_of_js DocumentFilter.t_of_js x932) x931)
                   x929) x928
        and t_to_js : t -> Ojs.t =
          fun
            (x922 :
              (DocumentFilter.t, DocumentFilter.t or_string list) union2
                or_string)
            ->
            or_string_to_js
              (fun
                 (x923 :
                   (DocumentFilter.t, DocumentFilter.t or_string list) union2)
                 ->
                 union2_to_js DocumentFilter.t_to_js
                   (fun (x925 : DocumentFilter.t or_string list) ->
                      Ojs.list_to_js
                        (fun (x926 : DocumentFilter.t or_string) ->
                           or_string_to_js DocumentFilter.t_to_js x926) x925)
                   x923) x922
      end
    module Location =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x935 : Ojs.t) -> x935
        and t_to_js : t -> Ojs.t = fun (x934 : Ojs.t) -> x934
        let (uri : t -> Uri.t) =
          fun (x936 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x936) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x937 : t) ->
            fun (x938 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x937) "uri" (Uri.t_to_js x938)
        let (range : t -> Range.t) =
          fun (x939 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x939) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x940 : t) ->
            fun (x941 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x940) "range" (Range.t_to_js x941)
        let (create :
          uri:Uri.t -> range_or_position:(Position.t, Range.t) union2 -> t) =
          fun ~uri:(x942 : Uri.t) ->
            fun ~range_or_position:(x943 : (Position.t, Range.t) union2) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Location")
                   [|(Uri.t_to_js x942);(union2_to_js Position.t_to_js
                                           Range.t_to_js x943)|])
      end
    module DiagnosticChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x947 : Ojs.t) -> x947
        and t_to_js : t -> Ojs.t = fun (x946 : Ojs.t) -> x946
        let (uris : t -> Uri.t list) =
          fun (x948 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x948) "uris")
      end
    module DiagnosticSeverity =
      struct
        type t = [ `Warning  | `Information  | `Hint ]
        let rec t_of_js : Ojs.t -> t =
          fun (x951 : Ojs.t) ->
            let x952 = x951 in
            match Ojs.int_of_js x952 with
            | 1 -> `Warning
            | 2 -> `Information
            | 3 -> `Hint
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x950 : [ `Warning  | `Information  | `Hint ]) ->
            match x950 with
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
            | `Hint -> Ojs.int_to_js 3
      end
    module DiagnosticRelatedInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x954 : Ojs.t) -> x954
        and t_to_js : t -> Ojs.t = fun (x953 : Ojs.t) -> x953
        let (location : t -> Location.t) =
          fun (x955 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x955) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x956 : t) ->
            fun (x957 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x956) "location"
                (Location.t_to_js x957)
        let (message : t -> string) =
          fun (x958 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x958) "message")
        let (set_message : t -> string -> unit) =
          fun (x959 : t) ->
            fun (x960 : string) ->
              Ojs.set_prop_ascii (t_to_js x959) "message"
                (Ojs.string_to_js x960)
        let (create : location:Location.t -> message:string -> t) =
          fun ~location:(x961 : Location.t) ->
            fun ~message:(x962 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "DiagnosticRelatedInformation")
                   [|(Location.t_to_js x961);(Ojs.string_to_js x962)|])
      end
    module DiagnosticTag =
      struct
        type t = [ `Deprecated ]
        let rec t_of_js : Ojs.t -> t =
          fun (x964 : Ojs.t) ->
            let x965 = x964 in
            match Ojs.int_of_js x965 with
            | 2 -> `Deprecated
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x963 : [ `Deprecated ]) ->
            match x963 with | `Deprecated -> Ojs.int_to_js 2
      end
    module Diagnostic =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x967 : Ojs.t) -> x967
        and t_to_js : t -> Ojs.t = fun (x966 : Ojs.t) -> x966
        let (range : t -> Range.t) =
          fun (x968 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x968) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x969 : t) ->
            fun (x970 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x969) "range" (Range.t_to_js x970)
        let (message : t -> string) =
          fun (x971 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x971) "message")
        let (set_message : t -> string -> unit) =
          fun (x972 : t) ->
            fun (x973 : string) ->
              Ojs.set_prop_ascii (t_to_js x972) "message"
                (Ojs.string_to_js x973)
        let (severity : t -> DiagnosticSeverity.t) =
          fun (x974 : t) ->
            DiagnosticSeverity.t_of_js
              (Ojs.get_prop_ascii (t_to_js x974) "severity")
        let (set_severity : t -> DiagnosticSeverity.t -> unit) =
          fun (x975 : t) ->
            fun (x976 : DiagnosticSeverity.t) ->
              Ojs.set_prop_ascii (t_to_js x975) "severity"
                (DiagnosticSeverity.t_to_js x976)
        let (source : t -> string) =
          fun (x977 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x977) "source")
        let (set_source : t -> string -> unit) =
          fun (x978 : t) ->
            fun (x979 : string) ->
              Ojs.set_prop_ascii (t_to_js x978) "source"
                (Ojs.string_to_js x979)
        module Code =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x981 : Ojs.t) -> x981
            and t_to_js : t -> Ojs.t = fun (x980 : Ojs.t) -> x980
            let (value : t -> string or_number) =
              fun (x982 : t) ->
                or_number_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x982) "value")
            let (set_value : t -> string or_number -> unit) =
              fun (x984 : t) ->
                fun (x985 : string or_number) ->
                  Ojs.set_prop_ascii (t_to_js x984) "value"
                    (or_number_to_js Ojs.string_to_js x985)
            let (target : t -> Uri.t) =
              fun (x987 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x987) "target")
            let (set_target : t -> Uri.t -> unit) =
              fun (x988 : t) ->
                fun (x989 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x988) "target"
                    (Uri.t_to_js x989)
          end
        let (code : t -> Code.t or_string or_number) =
          fun (x990 : t) ->
            or_number_of_js
              (fun (x991 : Ojs.t) -> or_string_of_js Code.t_of_js x991)
              (Ojs.get_prop_ascii (t_to_js x990) "code")
        let (set_code : t -> Code.t or_string or_number -> unit) =
          fun (x993 : t) ->
            fun (x994 : Code.t or_string or_number) ->
              Ojs.set_prop_ascii (t_to_js x993) "code"
                (or_number_to_js
                   (fun (x995 : Code.t or_string) ->
                      or_string_to_js Code.t_to_js x995) x994)
        let (related_information : t -> DiagnosticRelatedInformation.t list)
          =
          fun (x997 : t) ->
            Ojs.list_of_js DiagnosticRelatedInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x997) "relatedInformation")
        let (set_related_information :
          t -> DiagnosticRelatedInformation.t list -> unit) =
          fun (x999 : t) ->
            fun (x1000 : DiagnosticRelatedInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x999) "relatedInformation"
                (Ojs.list_to_js DiagnosticRelatedInformation.t_to_js x1000)
        let (tags : t -> DiagnosticTag.t list) =
          fun (x1002 : t) ->
            Ojs.list_of_js DiagnosticTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1002) "tags")
        let (set_tags : t -> DiagnosticTag.t list -> unit) =
          fun (x1004 : t) ->
            fun (x1005 : DiagnosticTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1004) "tags"
                (Ojs.list_to_js DiagnosticTag.t_to_js x1005)
        let (create :
          range:Range.t ->
            message:string -> ?severity:DiagnosticSeverity.t -> unit -> t)
          =
          fun ~range:(x1007 : Range.t) ->
            fun ~message:(x1008 : string) ->
              fun ?severity:(x1009 : DiagnosticSeverity.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Diagnostic")
                       (let x1010 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1010 "push" [|(Range.t_to_js x1007)|]);
                        ignore
                          (Ojs.call x1010 "push" [|(Ojs.string_to_js x1008)|]);
                        (match x1009 with
                         | Some x1011 ->
                             ignore
                               (Ojs.call x1010 "push"
                                  [|(DiagnosticSeverity.t_to_js x1011)|])
                         | None -> ());
                        x1010))
      end
    module DiagnosticCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1013 : Ojs.t) -> x1013
        and t_to_js : t -> Ojs.t = fun (x1012 : Ojs.t) -> x1012
        let (name : t -> string) =
          fun (x1014 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1014) "name")
        let (set :
          t ->
            uri:Uri.t -> diagnostics:Diagnostic.t list or_undefined -> unit)
          =
          fun (x1019 : t) ->
            fun ~uri:(x1015 : Uri.t) ->
              fun ~diagnostics:(x1016 : Diagnostic.t list or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x1019) "set"
                     [|(Uri.t_to_js x1015);(or_undefined_to_js
                                              (fun
                                                 (x1017 : Diagnostic.t list)
                                                 ->
                                                 Ojs.list_to_js
                                                   Diagnostic.t_to_js x1017)
                                              x1016)|])
        let (set' :
          t -> entries:(Uri.t * Diagnostic.t list or_undefined) list -> unit)
          =
          fun (x1027 : t) ->
            fun
              ~entries:(x1020 :
                         (Uri.t * Diagnostic.t list or_undefined) list)
              ->
              ignore
                (Ojs.call (t_to_js x1027) "set"
                   [|(Ojs.list_to_js
                        (fun
                           (x1021 : (Uri.t * Diagnostic.t list or_undefined))
                           ->
                           let (x1022, x1023) = x1021 in
                           let x1024 = Ojs.array_make 2 in
                           Ojs.array_set x1024 0 (Uri.t_to_js x1022);
                           Ojs.array_set x1024 1
                             (or_undefined_to_js
                                (fun (x1025 : Diagnostic.t list) ->
                                   Ojs.list_to_js Diagnostic.t_to_js x1025)
                                x1023);
                           x1024) x1020)|])
        let (delete : t -> uri:Uri.t -> unit) =
          fun (x1029 : t) ->
            fun ~uri:(x1028 : Uri.t) ->
              ignore
                (Ojs.call (t_to_js x1029) "delete" [|(Uri.t_to_js x1028)|])
        let (clear : t -> unit) =
          fun (x1030 : t) -> ignore (Ojs.call (t_to_js x1030) "clear" [||])
        let (for_each :
          t ->
            callback:(uri:Uri.t ->
                        diagnostics:Diagnostic.t list -> collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x1039 : t) ->
            fun
              ~callback:(x1031 :
                          uri:Uri.t ->
                            diagnostics:Diagnostic.t list ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x1032 : any option) ->
                fun () ->
                  ignore
                    (let x1040 = t_to_js x1039 in
                     Ojs.call (Ojs.get_prop_ascii x1040 "forEach") "apply"
                       [|x1040;((let x1033 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1033 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x1035 : Ojs.t) ->
                                              fun (x1036 : Ojs.t) ->
                                                fun (x1038 : Ojs.t) ->
                                                  any_to_js
                                                    (x1031
                                                       ~uri:(Uri.t_of_js
                                                               x1035)
                                                       ~diagnostics:(
                                                       Ojs.list_of_js
                                                         Diagnostic.t_of_js
                                                         x1036)
                                                       ~collection:(t_of_js
                                                                    x1038))))|]);
                                 (match x1032 with
                                  | Some x1034 ->
                                      ignore
                                        (Ojs.call x1033 "push"
                                           [|(any_to_js x1034)|])
                                  | None -> ());
                                 x1033))|])
        let (get : t -> uri:Uri.t -> Diagnostic.t list or_undefined) =
          fun (x1042 : t) ->
            fun ~uri:(x1041 : Uri.t) ->
              or_undefined_of_js
                (fun (x1043 : Ojs.t) ->
                   Ojs.list_of_js Diagnostic.t_of_js x1043)
                (Ojs.call (t_to_js x1042) "get" [|(Uri.t_to_js x1041)|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x1046 : t) ->
            fun ~uri:(x1045 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1046) "has" [|(Uri.t_to_js x1045)|])
        let (dispose : t -> unit) =
          fun (x1047 : t) -> ignore (Ojs.call (t_to_js x1047) "dispose" [||])
      end
    module CodeActionKind =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1049 : Ojs.t) -> x1049
        and t_to_js : t -> Ojs.t = fun (x1048 : Ojs.t) -> x1048
        let (empty : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Empty")
        let (quick_fix : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "QuickFix")
        let (refactor : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Refactor")
        let (refactor_extract : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorExtract")
        let (refactor_inline : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorInline")
        let (refactor_rewrite : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorRewrite")
        let (source : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Source")
        let (source_organize_imports : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceOrganizeImports")
        let (source_fix_all : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceFixAll")
        let (create : value:string -> t) =
          fun ~value:(x1050 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") [|(Ojs.string_to_js x1050)|])
        let (value : t -> string) =
          fun (x1051 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1051) "value")
        let (append : t -> parts:string -> t) =
          fun (x1053 : t) ->
            fun ~parts:(x1052 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1053) "append"
                   [|(Ojs.string_to_js x1052)|])
        let (intersects : t -> other:t -> bool) =
          fun (x1055 : t) ->
            fun ~other:(x1054 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1055) "intersects" [|(t_to_js x1054)|])
        let (contains : t -> other:t -> bool) =
          fun (x1057 : t) ->
            fun ~other:(x1056 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1057) "contains" [|(t_to_js x1056)|])
      end
    module CodeActionTriggerKind =
      struct
        type t = [ `Automatic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1059 : Ojs.t) ->
            let x1060 = x1059 in
            match Ojs.int_of_js x1060 with
            | 2 -> `Automatic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1058 : [ `Automatic ]) ->
            match x1058 with | `Automatic -> Ojs.int_to_js 2
      end
    module CodeActionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1062 : Ojs.t) -> x1062
        and t_to_js : t -> Ojs.t = fun (x1061 : Ojs.t) -> x1061
        let (trigger_kind : t -> CodeActionTriggerKind.t) =
          fun (x1063 : t) ->
            CodeActionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1063) "triggerKind")
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1064 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1064) "diagnostics")
        let (only : t -> CodeActionKind.t) =
          fun (x1066 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1066) "only")
      end
    module CodeLens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1068 : Ojs.t) -> x1068
        and t_to_js : t -> Ojs.t = fun (x1067 : Ojs.t) -> x1067
        let (range : t -> Range.t) =
          fun (x1069 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1069) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1070 : t) ->
            fun (x1071 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1070) "range"
                (Range.t_to_js x1071)
        let (command : t -> Command.t) =
          fun (x1072 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1072) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1073 : t) ->
            fun (x1074 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1073) "command"
                (Command.t_to_js x1074)
        let (is_resolved : t -> bool) =
          fun (x1075 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1075) "isResolved")
        let (create : range:Range.t -> ?command:Command.t -> unit -> t) =
          fun ~range:(x1076 : Range.t) ->
            fun ?command:(x1077 : Command.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "CodeLens")
                     (let x1078 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1078 "push" [|(Range.t_to_js x1076)|]);
                      (match x1077 with
                       | Some x1079 ->
                           ignore
                             (Ojs.call x1078 "push"
                                [|(Command.t_to_js x1079)|])
                       | None -> ());
                      x1078))
      end
    module CodeLensProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1081 : Ojs.t) -> x1081
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1080 : Ojs.t) -> x1080
        let (on_did_change_code_lenses : 'T t -> unit Event.t) =
          fun (x1082 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1082)
                 "onDidChangeCodeLenses")
        let (set_on_did_change_code_lenses : 'T t -> unit Event.t -> unit) =
          fun (x1085 : 'T t) ->
            fun (x1086 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1085)
                "onDidChangeCodeLenses" (Event.t_to_js Ojs.unit_to_js x1086)
        let (provide_code_lenses :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1091 : 'T t) ->
            fun ~document:(x1089 : TextDocument.t) ->
              fun ~token:(x1090 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1093 : Ojs.t) -> Ojs.list_of_js Obj.magic x1093)
                  (Ojs.call (t_to_js Obj.magic x1091) "provideCodeLenses"
                     [|(TextDocument.t_to_js x1089);(CancellationToken.t_to_js
                                                       x1090)|])
        let (resolve_code_lens :
          'T t ->
            code_lens:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1097 : 'T t) ->
            fun ~code_lens:(x1095 : 'T) ->
              fun ~token:(x1096 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1097) "resolveCodeLens"
                     [|(Obj.magic x1095);(CancellationToken.t_to_js x1096)|])
      end
    module DefinitionLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1101 : Ojs.t) -> x1101
        and t_to_js : t -> Ojs.t = fun (x1100 : Ojs.t) -> x1100
      end
    module Definition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1103 : Ojs.t) -> x1103
        and t_to_js : t -> Ojs.t = fun (x1102 : Ojs.t) -> x1102
      end
    module DefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1105 : Ojs.t) -> x1105
        and t_to_js : t -> Ojs.t = fun (x1104 : Ojs.t) -> x1104
        let (provide_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1109 : t) ->
            fun ~document:(x1106 : TextDocument.t) ->
              fun ~position:(x1107 : Position.t) ->
                fun ~token:(x1108 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1110 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1110)
                    (Ojs.call (t_to_js x1109) "provideDefinition"
                       [|(TextDocument.t_to_js x1106);(Position.t_to_js x1107);(
                         CancellationToken.t_to_js x1108)|])
      end
    module ImplementationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1114 : Ojs.t) -> x1114
        and t_to_js : t -> Ojs.t = fun (x1113 : Ojs.t) -> x1113
        let (provide_implementation :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1118 : t) ->
            fun ~document:(x1115 : TextDocument.t) ->
              fun ~position:(x1116 : Position.t) ->
                fun ~token:(x1117 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1119 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1119)
                    (Ojs.call (t_to_js x1118) "provideImplementation"
                       [|(TextDocument.t_to_js x1115);(Position.t_to_js x1116);(
                         CancellationToken.t_to_js x1117)|])
      end
    module TypeDefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1123 : Ojs.t) -> x1123
        and t_to_js : t -> Ojs.t = fun (x1122 : Ojs.t) -> x1122
        let (provide_type_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1127 : t) ->
            fun ~document:(x1124 : TextDocument.t) ->
              fun ~position:(x1125 : Position.t) ->
                fun ~token:(x1126 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1128 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1128)
                    (Ojs.call (t_to_js x1127) "provideTypeDefinition"
                       [|(TextDocument.t_to_js x1124);(Position.t_to_js x1125);(
                         CancellationToken.t_to_js x1126)|])
      end
    module Declaration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1132 : Ojs.t) -> x1132
        and t_to_js : t -> Ojs.t = fun (x1131 : Ojs.t) -> x1131
      end
    module DeclarationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1134 : Ojs.t) -> x1134
        and t_to_js : t -> Ojs.t = fun (x1133 : Ojs.t) -> x1133
        let (provide_declaration :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Declaration.t ProviderResult.t)
          =
          fun (x1138 : t) ->
            fun ~document:(x1135 : TextDocument.t) ->
              fun ~position:(x1136 : Position.t) ->
                fun ~token:(x1137 : CancellationToken.t) ->
                  ProviderResult.t_of_js Declaration.t_of_js
                    (Ojs.call (t_to_js x1138) "provideDeclaration"
                       [|(TextDocument.t_to_js x1135);(Position.t_to_js x1136);(
                         CancellationToken.t_to_js x1137)|])
      end
    module MarkdownString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1141 : Ojs.t) -> x1141
        and t_to_js : t -> Ojs.t = fun (x1140 : Ojs.t) -> x1140
        let (value : t -> string) =
          fun (x1142 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1142) "value")
        let (set_value : t -> string -> unit) =
          fun (x1143 : t) ->
            fun (x1144 : string) ->
              Ojs.set_prop_ascii (t_to_js x1143) "value"
                (Ojs.string_to_js x1144)
        let (is_trusted : t -> bool) =
          fun (x1145 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1145) "isTrusted")
        let (set_is_trusted : t -> bool -> unit) =
          fun (x1146 : t) ->
            fun (x1147 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1146) "isTrusted"
                (Ojs.bool_to_js x1147)
        let (support_theme_icons : t -> bool) =
          fun (x1148 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1148) "supportThemeIcons")
        let (create :
          ?value:string -> ?support_theme_icons:bool -> unit -> t) =
          fun ?value:(x1149 : string option) ->
            fun ?support_theme_icons:(x1150 : bool option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "MarkdownString")
                     (let x1151 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1149 with
                       | Some x1153 ->
                           ignore
                             (Ojs.call x1151 "push"
                                [|(Ojs.string_to_js x1153)|])
                       | None -> ());
                      (match x1150 with
                       | Some x1152 ->
                           ignore
                             (Ojs.call x1151 "push"
                                [|(Ojs.bool_to_js x1152)|])
                       | None -> ());
                      x1151))
        let (append_text : t -> value:string -> t) =
          fun (x1155 : t) ->
            fun ~value:(x1154 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1155) "appendText"
                   [|(Ojs.string_to_js x1154)|])
        let (append_markdown : t -> value:string -> t) =
          fun (x1157 : t) ->
            fun ~value:(x1156 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1157) "appendMarkdown"
                   [|(Ojs.string_to_js x1156)|])
        let (append_codeblock :
          t -> value:string -> ?language:string -> unit -> t) =
          fun (x1162 : t) ->
            fun ~value:(x1158 : string) ->
              fun ?language:(x1159 : string option) ->
                fun () ->
                  t_of_js
                    (let x1163 = t_to_js x1162 in
                     Ojs.call (Ojs.get_prop_ascii x1163 "appendCodeblock")
                       "apply"
                       [|x1163;((let x1160 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1160 "push"
                                      [|(Ojs.string_to_js x1158)|]);
                                 (match x1159 with
                                  | Some x1161 ->
                                      ignore
                                        (Ojs.call x1160 "push"
                                           [|(Ojs.string_to_js x1161)|])
                                  | None -> ());
                                 x1160))|])
      end
    module Hover =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1165 : Ojs.t) -> x1165
        and t_to_js : t -> Ojs.t = fun (x1164 : Ojs.t) -> x1164
        let (contents : t -> MarkedString.t list) =
          fun (x1166 : t) ->
            Ojs.list_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1166) "contents")
        let (set_contents : t -> MarkedString.t list -> unit) =
          fun (x1168 : t) ->
            fun (x1169 : MarkedString.t list) ->
              Ojs.set_prop_ascii (t_to_js x1168) "contents"
                (Ojs.list_to_js MarkedString.t_to_js x1169)
        let (range : t -> Range.t) =
          fun (x1171 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1171) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1172 : t) ->
            fun (x1173 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1172) "range"
                (Range.t_to_js x1173)
        let (create :
          contents:(MarkedString.t, MarkedString.t) or_array ->
            ?range:Range.t -> unit -> t)
          =
          fun ~contents:(x1174 : (MarkedString.t, MarkedString.t) or_array)
            ->
            fun ?range:(x1175 : Range.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "Hover")
                     (let x1176 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1176 "push"
                           [|(or_array_to_js MarkedString.t_to_js
                                MarkedString.t_to_js x1174)|]);
                      (match x1175 with
                       | Some x1177 ->
                           ignore
                             (Ojs.call x1176 "push" [|(Range.t_to_js x1177)|])
                       | None -> ());
                      x1176))
      end
    module HoverProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1181 : Ojs.t) -> x1181
        and t_to_js : t -> Ojs.t = fun (x1180 : Ojs.t) -> x1180
        let (provide_hover :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Hover.t ProviderResult.t)
          =
          fun (x1185 : t) ->
            fun ~document:(x1182 : TextDocument.t) ->
              fun ~position:(x1183 : Position.t) ->
                fun ~token:(x1184 : CancellationToken.t) ->
                  ProviderResult.t_of_js Hover.t_of_js
                    (Ojs.call (t_to_js x1185) "provideHover"
                       [|(TextDocument.t_to_js x1182);(Position.t_to_js x1183);(
                         CancellationToken.t_to_js x1184)|])
      end
    module EvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1188 : Ojs.t) -> x1188
        and t_to_js : t -> Ojs.t = fun (x1187 : Ojs.t) -> x1187
        let (range : t -> Range.t) =
          fun (x1189 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1189) "range")
        let (expression : t -> string) =
          fun (x1190 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1190) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1191 : Range.t) ->
            fun ?expression:(x1192 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "EvaluatableExpression")
                     (let x1193 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1193 "push" [|(Range.t_to_js x1191)|]);
                      (match x1192 with
                       | Some x1194 ->
                           ignore
                             (Ojs.call x1193 "push"
                                [|(Ojs.string_to_js x1194)|])
                       | None -> ());
                      x1193))
      end
    module EvaluatableExpressionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1196 : Ojs.t) -> x1196
        and t_to_js : t -> Ojs.t = fun (x1195 : Ojs.t) -> x1195
        let (provide_evaluatable_expression :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  EvaluatableExpression.t ProviderResult.t)
          =
          fun (x1200 : t) ->
            fun ~document:(x1197 : TextDocument.t) ->
              fun ~position:(x1198 : Position.t) ->
                fun ~token:(x1199 : CancellationToken.t) ->
                  ProviderResult.t_of_js EvaluatableExpression.t_of_js
                    (Ojs.call (t_to_js x1200) "provideEvaluatableExpression"
                       [|(TextDocument.t_to_js x1197);(Position.t_to_js x1198);(
                         CancellationToken.t_to_js x1199)|])
      end
    module InlineValueText =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1203 : Ojs.t) -> x1203
        and t_to_js : t -> Ojs.t = fun (x1202 : Ojs.t) -> x1202
        let (range : t -> Range.t) =
          fun (x1204 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1204) "range")
        let (text : t -> string) =
          fun (x1205 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1205) "text")
        let (create : range:Range.t -> text:string -> t) =
          fun ~range:(x1206 : Range.t) ->
            fun ~text:(x1207 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "InlineValueText")
                   [|(Range.t_to_js x1206);(Ojs.string_to_js x1207)|])
      end
    module InlineValueVariableLookup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1209 : Ojs.t) -> x1209
        and t_to_js : t -> Ojs.t = fun (x1208 : Ojs.t) -> x1208
        let (range : t -> Range.t) =
          fun (x1210 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1210) "range")
        let (variable_name : t -> string) =
          fun (x1211 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1211) "variableName")
        let (case_sensitive_lookup : t -> bool) =
          fun (x1212 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1212) "caseSensitiveLookup")
        let (create :
          range:Range.t ->
            ?variable_name:string -> ?case_sensitive_lookup:bool -> unit -> t)
          =
          fun ~range:(x1213 : Range.t) ->
            fun ?variable_name:(x1214 : string option) ->
              fun ?case_sensitive_lookup:(x1215 : bool option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "InlineValueVariableLookup")
                       (let x1216 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1216 "push" [|(Range.t_to_js x1213)|]);
                        (match x1214 with
                         | Some x1218 ->
                             ignore
                               (Ojs.call x1216 "push"
                                  [|(Ojs.string_to_js x1218)|])
                         | None -> ());
                        (match x1215 with
                         | Some x1217 ->
                             ignore
                               (Ojs.call x1216 "push"
                                  [|(Ojs.bool_to_js x1217)|])
                         | None -> ());
                        x1216))
      end
    module InlineValueEvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1220 : Ojs.t) -> x1220
        and t_to_js : t -> Ojs.t = fun (x1219 : Ojs.t) -> x1219
        let (range : t -> Range.t) =
          fun (x1221 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1221) "range")
        let (expression : t -> string) =
          fun (x1222 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1222) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1223 : Range.t) ->
            fun ?expression:(x1224 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "InlineValueEvaluatableExpression")
                     (let x1225 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1225 "push" [|(Range.t_to_js x1223)|]);
                      (match x1224 with
                       | Some x1226 ->
                           ignore
                             (Ojs.call x1225 "push"
                                [|(Ojs.string_to_js x1226)|])
                       | None -> ());
                      x1225))
      end
    module InlineValue =
      struct
        type t =
          (InlineValueEvaluatableExpression.t, InlineValueText.t,
            InlineValueVariableLookup.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x1231 : Ojs.t) ->
            union3_of_js InlineValueEvaluatableExpression.t_of_js
              InlineValueText.t_of_js InlineValueVariableLookup.t_of_js x1231
        and t_to_js : t -> Ojs.t =
          fun
            (x1227 :
              (InlineValueEvaluatableExpression.t, InlineValueText.t,
                InlineValueVariableLookup.t) union3)
            ->
            union3_to_js InlineValueEvaluatableExpression.t_to_js
              InlineValueText.t_to_js InlineValueVariableLookup.t_to_js x1227
      end
    module InlineValueContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1236 : Ojs.t) -> x1236
        and t_to_js : t -> Ojs.t = fun (x1235 : Ojs.t) -> x1235
        let (frame_id : t -> int) =
          fun (x1237 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1237) "frameId")
        let (stopped_location : t -> Range.t) =
          fun (x1238 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1238) "stoppedLocation")
      end
    module InlineValuesProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1240 : Ojs.t) -> x1240
        and t_to_js : t -> Ojs.t = fun (x1239 : Ojs.t) -> x1239
        let (on_did_change_inline_values : t -> unit Event.t or_undefined) =
          fun (x1241 : t) ->
            or_undefined_of_js
              (fun (x1242 : Ojs.t) -> Event.t_of_js Ojs.unit_of_js x1242)
              (Ojs.get_prop_ascii (t_to_js x1241) "onDidChangeInlineValues")
        let (set_on_did_change_inline_values :
          t -> unit Event.t or_undefined -> unit) =
          fun (x1244 : t) ->
            fun (x1245 : unit Event.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1244) "onDidChangeInlineValues"
                (or_undefined_to_js
                   (fun (x1246 : unit Event.t) ->
                      Event.t_to_js Ojs.unit_to_js x1246) x1245)
        let (provide_inline_values :
          t ->
            document:TextDocument.t ->
              view_port:Range.t ->
                context:InlineValueContext.t ->
                  token:CancellationToken.t ->
                    InlineValue.t list ProviderResult.t)
          =
          fun (x1252 : t) ->
            fun ~document:(x1248 : TextDocument.t) ->
              fun ~view_port:(x1249 : Range.t) ->
                fun ~context:(x1250 : InlineValueContext.t) ->
                  fun ~token:(x1251 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1253 : Ojs.t) ->
                         Ojs.list_of_js InlineValue.t_of_js x1253)
                      (Ojs.call (t_to_js x1252) "provideInlineValues"
                         [|(TextDocument.t_to_js x1248);(Range.t_to_js x1249);(
                           InlineValueContext.t_to_js x1250);(CancellationToken.t_to_js
                                                                x1251)|])
      end
    module DocumentHighlightKind =
      struct
        type t = [ `Read  | `Write ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1256 : Ojs.t) ->
            let x1257 = x1256 in
            match Ojs.int_of_js x1257 with
            | 1 -> `Read
            | 2 -> `Write
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1255 : [ `Read  | `Write ]) ->
            match x1255 with
            | `Read -> Ojs.int_to_js 1
            | `Write -> Ojs.int_to_js 2
      end
    module DocumentHighlight =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1259 : Ojs.t) -> x1259
        and t_to_js : t -> Ojs.t = fun (x1258 : Ojs.t) -> x1258
        let (range : t -> Range.t) =
          fun (x1260 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1260) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1261 : t) ->
            fun (x1262 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1261) "range"
                (Range.t_to_js x1262)
        let (kind : t -> DocumentHighlightKind.t) =
          fun (x1263 : t) ->
            DocumentHighlightKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1263) "kind")
        let (set_kind : t -> DocumentHighlightKind.t -> unit) =
          fun (x1264 : t) ->
            fun (x1265 : DocumentHighlightKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1264) "kind"
                (DocumentHighlightKind.t_to_js x1265)
        let (create :
          range:Range.t -> ?kind:DocumentHighlightKind.t -> unit -> t) =
          fun ~range:(x1266 : Range.t) ->
            fun ?kind:(x1267 : DocumentHighlightKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentHighlight")
                     (let x1268 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1268 "push" [|(Range.t_to_js x1266)|]);
                      (match x1267 with
                       | Some x1269 ->
                           ignore
                             (Ojs.call x1268 "push"
                                [|(DocumentHighlightKind.t_to_js x1269)|])
                       | None -> ());
                      x1268))
      end
    module DocumentHighlightProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1271 : Ojs.t) -> x1271
        and t_to_js : t -> Ojs.t = fun (x1270 : Ojs.t) -> x1270
        let (provide_document_highlights :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  DocumentHighlight.t list ProviderResult.t)
          =
          fun (x1275 : t) ->
            fun ~document:(x1272 : TextDocument.t) ->
              fun ~position:(x1273 : Position.t) ->
                fun ~token:(x1274 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1276 : Ojs.t) ->
                       Ojs.list_of_js DocumentHighlight.t_of_js x1276)
                    (Ojs.call (t_to_js x1275) "provideDocumentHighlights"
                       [|(TextDocument.t_to_js x1272);(Position.t_to_js x1273);(
                         CancellationToken.t_to_js x1274)|])
      end
    module SymbolKind =
      struct
        type t =
          [ `Module  | `Namespace  | `Package  | `Class  | `Method 
          | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
          | `Function  | `Variable  | `Constant  | `String  | `Number 
          | `Boolean  | `Array  | `Object  | `Key  | `Null  | `EnumMember 
          | `Struct  | `Event  | `Operator  | `TypeParameter ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1279 : Ojs.t) ->
            let x1280 = x1279 in
            match Ojs.int_of_js x1280 with
            | 1 -> `Module
            | 2 -> `Namespace
            | 3 -> `Package
            | 4 -> `Class
            | 5 -> `Method
            | 6 -> `Property
            | 7 -> `Field
            | 8 -> `Constructor
            | 9 -> `Enum
            | 10 -> `Interface
            | 11 -> `Function
            | 12 -> `Variable
            | 13 -> `Constant
            | 14 -> `String
            | 15 -> `Number
            | 16 -> `Boolean
            | 17 -> `Array
            | 18 -> `Object
            | 19 -> `Key
            | 20 -> `Null
            | 21 -> `EnumMember
            | 22 -> `Struct
            | 23 -> `Event
            | 24 -> `Operator
            | 25 -> `TypeParameter
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1278 :
              [ `Module  | `Namespace  | `Package  | `Class  | `Method 
              | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
              | `Function  | `Variable  | `Constant  | `String  | `Number 
              | `Boolean  | `Array  | `Object  | `Key  | `Null 
              | `EnumMember  | `Struct  | `Event  | `Operator 
              | `TypeParameter ])
            ->
            match x1278 with
            | `Module -> Ojs.int_to_js 1
            | `Namespace -> Ojs.int_to_js 2
            | `Package -> Ojs.int_to_js 3
            | `Class -> Ojs.int_to_js 4
            | `Method -> Ojs.int_to_js 5
            | `Property -> Ojs.int_to_js 6
            | `Field -> Ojs.int_to_js 7
            | `Constructor -> Ojs.int_to_js 8
            | `Enum -> Ojs.int_to_js 9
            | `Interface -> Ojs.int_to_js 10
            | `Function -> Ojs.int_to_js 11
            | `Variable -> Ojs.int_to_js 12
            | `Constant -> Ojs.int_to_js 13
            | `String -> Ojs.int_to_js 14
            | `Number -> Ojs.int_to_js 15
            | `Boolean -> Ojs.int_to_js 16
            | `Array -> Ojs.int_to_js 17
            | `Object -> Ojs.int_to_js 18
            | `Key -> Ojs.int_to_js 19
            | `Null -> Ojs.int_to_js 20
            | `EnumMember -> Ojs.int_to_js 21
            | `Struct -> Ojs.int_to_js 22
            | `Event -> Ojs.int_to_js 23
            | `Operator -> Ojs.int_to_js 24
            | `TypeParameter -> Ojs.int_to_js 25
      end
    module SymbolTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1282 : Ojs.t) -> x1282
        and t_to_js : t -> Ojs.t = fun (x1281 : Ojs.t) -> x1281
      end
    module SymbolInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1284 : Ojs.t) -> x1284
        and t_to_js : t -> Ojs.t = fun (x1283 : Ojs.t) -> x1283
        let (name : t -> string) =
          fun (x1285 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1285) "name")
        let (set_name : t -> string -> unit) =
          fun (x1286 : t) ->
            fun (x1287 : string) ->
              Ojs.set_prop_ascii (t_to_js x1286) "name"
                (Ojs.string_to_js x1287)
        let (container_name : t -> string) =
          fun (x1288 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1288) "containerName")
        let (set_container_name : t -> string -> unit) =
          fun (x1289 : t) ->
            fun (x1290 : string) ->
              Ojs.set_prop_ascii (t_to_js x1289) "containerName"
                (Ojs.string_to_js x1290)
        let (kind : t -> SymbolKind.t) =
          fun (x1291 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1291) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1292 : t) ->
            fun (x1293 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1292) "kind"
                (SymbolKind.t_to_js x1293)
        let (tags : t -> SymbolTag.t list) =
          fun (x1294 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1294) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1296 : t) ->
            fun (x1297 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1296) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1297)
        let (location : t -> Location.t) =
          fun (x1299 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x1299) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x1300 : t) ->
            fun (x1301 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x1300) "location"
                (Location.t_to_js x1301)
        let (create :
          name:string ->
            kind:SymbolKind.t ->
              container_name:string -> location:Location.t -> t)
          =
          fun ~name:(x1302 : string) ->
            fun ~kind:(x1303 : SymbolKind.t) ->
              fun ~container_name:(x1304 : string) ->
                fun ~location:(x1305 : Location.t) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SymbolInformation")
                       [|(Ojs.string_to_js x1302);(SymbolKind.t_to_js x1303);(
                         Ojs.string_to_js x1304);(Location.t_to_js x1305)|])
        let (create' :
          name:string ->
            kind:SymbolKind.t ->
              range:Range.t ->
                ?uri:Uri.t -> ?container_name:string -> unit -> t)
          =
          fun ~name:(x1306 : string) ->
            fun ~kind:(x1307 : SymbolKind.t) ->
              fun ~range:(x1308 : Range.t) ->
                fun ?uri:(x1309 : Uri.t option) ->
                  fun ?container_name:(x1310 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SymbolInformation")
                           (let x1311 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x1311 "push"
                                 [|(Ojs.string_to_js x1306)|]);
                            ignore
                              (Ojs.call x1311 "push"
                                 [|(SymbolKind.t_to_js x1307)|]);
                            ignore
                              (Ojs.call x1311 "push"
                                 [|(Range.t_to_js x1308)|]);
                            (match x1309 with
                             | Some x1313 ->
                                 ignore
                                   (Ojs.call x1311 "push"
                                      [|(Uri.t_to_js x1313)|])
                             | None -> ());
                            (match x1310 with
                             | Some x1312 ->
                                 ignore
                                   (Ojs.call x1311 "push"
                                      [|(Ojs.string_to_js x1312)|])
                             | None -> ());
                            x1311))
      end
    module DocumentSymbol =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1315 : Ojs.t) -> x1315
        and t_to_js : t -> Ojs.t = fun (x1314 : Ojs.t) -> x1314
        let (name : t -> string) =
          fun (x1316 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1316) "name")
        let (set_name : t -> string -> unit) =
          fun (x1317 : t) ->
            fun (x1318 : string) ->
              Ojs.set_prop_ascii (t_to_js x1317) "name"
                (Ojs.string_to_js x1318)
        let (detail : t -> string) =
          fun (x1319 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1319) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1320 : t) ->
            fun (x1321 : string) ->
              Ojs.set_prop_ascii (t_to_js x1320) "detail"
                (Ojs.string_to_js x1321)
        let (kind : t -> SymbolKind.t) =
          fun (x1322 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1322) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1323 : t) ->
            fun (x1324 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1323) "kind"
                (SymbolKind.t_to_js x1324)
        let (tags : t -> SymbolTag.t list) =
          fun (x1325 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1325) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1327 : t) ->
            fun (x1328 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1327) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1328)
        let (range : t -> Range.t) =
          fun (x1330 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1330) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1331 : t) ->
            fun (x1332 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1331) "range"
                (Range.t_to_js x1332)
        let (selection_range : t -> Range.t) =
          fun (x1333 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1333) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x1334 : t) ->
            fun (x1335 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1334) "selectionRange"
                (Range.t_to_js x1335)
        let (children : t -> t list) =
          fun (x1336 : t) ->
            Ojs.list_of_js t_of_js
              (Ojs.get_prop_ascii (t_to_js x1336) "children")
        let (set_children : t -> t list -> unit) =
          fun (x1338 : t) ->
            fun (x1339 : t list) ->
              Ojs.set_prop_ascii (t_to_js x1338) "children"
                (Ojs.list_to_js t_to_js x1339)
        let (create :
          name:string ->
            detail:string ->
              kind:SymbolKind.t ->
                range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~name:(x1341 : string) ->
            fun ~detail:(x1342 : string) ->
              fun ~kind:(x1343 : SymbolKind.t) ->
                fun ~range:(x1344 : Range.t) ->
                  fun ~selection_range:(x1345 : Range.t) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "DocumentSymbol")
                         [|(Ojs.string_to_js x1341);(Ojs.string_to_js x1342);(
                           SymbolKind.t_to_js x1343);(Range.t_to_js x1344);(
                           Range.t_to_js x1345)|])
      end
    module DocumentSymbolProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1347 : Ojs.t) -> x1347
        and t_to_js : t -> Ojs.t = fun (x1346 : Ojs.t) -> x1346
        let (provide_document_symbols :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                [ `U_n_0 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_1 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_2 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_3 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_4 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_5 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_6 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_7 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_8 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_9 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_10 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_11 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_12 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_13 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_14 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_15 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_16 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_17 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_18 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_19 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_20 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_21 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_22 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_23 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_24 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_25 of (DocumentSymbol.t, SymbolInformation.t) union2 ]
                  list ProviderResult.t)
          =
          fun (x1350 : t) ->
            fun ~document:(x1348 : TextDocument.t) ->
              fun ~token:(x1349 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1351 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x1352 : Ojs.t) ->
                          let x1353 = x1352 in
                          match Ojs.int_of_js
                                  (Ojs.get_prop_ascii x1353 "kind")
                          with
                          | 0 ->
                              `U_n_0
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 1 ->
                              `U_n_1
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 2 ->
                              `U_n_2
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 3 ->
                              `U_n_3
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 4 ->
                              `U_n_4
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 5 ->
                              `U_n_5
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 6 ->
                              `U_n_6
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 7 ->
                              `U_n_7
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 8 ->
                              `U_n_8
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 9 ->
                              `U_n_9
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 10 ->
                              `U_n_10
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 11 ->
                              `U_n_11
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 12 ->
                              `U_n_12
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 13 ->
                              `U_n_13
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 14 ->
                              `U_n_14
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 15 ->
                              `U_n_15
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 16 ->
                              `U_n_16
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 17 ->
                              `U_n_17
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 18 ->
                              `U_n_18
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 19 ->
                              `U_n_19
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 20 ->
                              `U_n_20
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 21 ->
                              `U_n_21
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 22 ->
                              `U_n_22
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 23 ->
                              `U_n_23
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 24 ->
                              `U_n_24
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | 25 ->
                              `U_n_25
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1353)
                          | _ -> assert false) x1351)
                  (Ojs.call (t_to_js x1350) "provideDocumentSymbols"
                     [|(TextDocument.t_to_js x1348);(CancellationToken.t_to_js
                                                       x1349)|])
      end
    module DocumentSymbolProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1407 : Ojs.t) -> x1407
        and t_to_js : t -> Ojs.t = fun (x1406 : Ojs.t) -> x1406
        let (label : t -> string) =
          fun (x1408 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1408) "label")
        let (set_label : t -> string -> unit) =
          fun (x1409 : t) ->
            fun (x1410 : string) ->
              Ojs.set_prop_ascii (t_to_js x1409) "label"
                (Ojs.string_to_js x1410)
      end
    module WorkspaceSymbolProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1412 : Ojs.t) -> x1412
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1411 : Ojs.t) -> x1411
        let (provide_workspace_symbols :
          'T t ->
            query:string ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1415 : 'T t) ->
            fun ~query:(x1413 : string) ->
              fun ~token:(x1414 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1417 : Ojs.t) -> Ojs.list_of_js Obj.magic x1417)
                  (Ojs.call (t_to_js Obj.magic x1415)
                     "provideWorkspaceSymbols"
                     [|(Ojs.string_to_js x1413);(CancellationToken.t_to_js
                                                   x1414)|])
        let (resolve_workspace_symbol :
          'T t ->
            symbol:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1421 : 'T t) ->
            fun ~symbol:(x1419 : 'T) ->
              fun ~token:(x1420 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1421)
                     "resolveWorkspaceSymbol"
                     [|(Obj.magic x1419);(CancellationToken.t_to_js x1420)|])
      end
    module ReferenceContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1425 : Ojs.t) -> x1425
        and t_to_js : t -> Ojs.t = fun (x1424 : Ojs.t) -> x1424
        let (include_declaration : t -> bool) =
          fun (x1426 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1426) "includeDeclaration")
        let (set_include_declaration : t -> bool -> unit) =
          fun (x1427 : t) ->
            fun (x1428 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1427) "includeDeclaration"
                (Ojs.bool_to_js x1428)
      end
    module ReferenceProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1430 : Ojs.t) -> x1430
        and t_to_js : t -> Ojs.t = fun (x1429 : Ojs.t) -> x1429
        let (provide_references :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                context:ReferenceContext.t ->
                  token:CancellationToken.t ->
                    Location.t list ProviderResult.t)
          =
          fun (x1435 : t) ->
            fun ~document:(x1431 : TextDocument.t) ->
              fun ~position:(x1432 : Position.t) ->
                fun ~context:(x1433 : ReferenceContext.t) ->
                  fun ~token:(x1434 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1436 : Ojs.t) ->
                         Ojs.list_of_js Location.t_of_js x1436)
                      (Ojs.call (t_to_js x1435) "provideReferences"
                         [|(TextDocument.t_to_js x1431);(Position.t_to_js
                                                           x1432);(ReferenceContext.t_to_js
                                                                    x1433);(
                           CancellationToken.t_to_js x1434)|])
      end
    module TextEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1439 : Ojs.t) -> x1439
        and t_to_js : t -> Ojs.t = fun (x1438 : Ojs.t) -> x1438
        let (replace : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1440 : Range.t) ->
            fun ~new_text:(x1441 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "replace"
                   [|(Range.t_to_js x1440);(Ojs.string_to_js x1441)|])
        let (insert : position:Position.t -> new_text:string -> t) =
          fun ~position:(x1442 : Position.t) ->
            fun ~new_text:(x1443 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "insert"
                   [|(Position.t_to_js x1442);(Ojs.string_to_js x1443)|])
        let (delete : range:Range.t -> t) =
          fun ~range:(x1444 : Range.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "delete" [|(Range.t_to_js x1444)|])
        let (set_end_of_line : eol:EndOfLine.t -> t) =
          fun ~eol:(x1445 : EndOfLine.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "setEndOfLine" [|(EndOfLine.t_to_js x1445)|])
        let (range : t -> Range.t) =
          fun (x1446 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1446) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1447 : t) ->
            fun (x1448 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1447) "range"
                (Range.t_to_js x1448)
        let (new_text : t -> string) =
          fun (x1449 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1449) "newText")
        let (set_new_text : t -> string -> unit) =
          fun (x1450 : t) ->
            fun (x1451 : string) ->
              Ojs.set_prop_ascii (t_to_js x1450) "newText"
                (Ojs.string_to_js x1451)
        let (new_eol : t -> EndOfLine.t) =
          fun (x1452 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x1452) "newEol")
        let (set_new_eol : t -> EndOfLine.t -> unit) =
          fun (x1453 : t) ->
            fun (x1454 : EndOfLine.t) ->
              Ojs.set_prop_ascii (t_to_js x1453) "newEol"
                (EndOfLine.t_to_js x1454)
        let (create : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1455 : Range.t) ->
            fun ~new_text:(x1456 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   [|(Range.t_to_js x1455);(Ojs.string_to_js x1456)|])
      end
    module IconPath =
      struct
        type t =
          {
          light: [ `String of string  | `Uri of Uri.t ] ;
          dark: [ `String of string  | `Uri of Uri.t ] }
        let rec t_to_js : t -> Ojs.t =
          fun (x1457 : t) ->
            Ojs.obj
              [|("light",
                  ((match x1457.light with
                    | `String x1458 -> Ojs.string_to_js x1458
                    | `Uri x1459 -> Uri.t_to_js x1459)));("dark",
                                                           ((match x1457.dark
                                                             with
                                                             | `String x1460
                                                                 ->
                                                                 Ojs.string_to_js
                                                                   x1460
                                                             | `Uri x1461 ->
                                                                 Uri.t_to_js
                                                                   x1461)))|]
        let t_of_js js_val =
          let light_js = Ojs.get_prop_ascii js_val "light" in
          let dark_js = Ojs.get_prop_ascii js_val "dark" in
          let light =
            if Ojs.has_property light_js "parse"
            then `Uri (Uri.t_of_js light_js)
            else `String (Ojs.string_of_js light_js) in
          let dark =
            if Ojs.has_property dark_js "parse"
            then `Uri (Uri.t_of_js dark_js)
            else `String (Ojs.string_of_js dark_js) in
          { light; dark }
      end
    module WorkspaceEditEntryMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1469 : Ojs.t) -> x1469
        and t_to_js : t -> Ojs.t = fun (x1468 : Ojs.t) -> x1468
        let (needs_confirmation : t -> bool) =
          fun (x1470 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1470) "needsConfirmation")
        let (set_needs_confirmation : t -> bool -> unit) =
          fun (x1471 : t) ->
            fun (x1472 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1471) "needsConfirmation"
                (Ojs.bool_to_js x1472)
        let (label : t -> string) =
          fun (x1473 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1473) "label")
        let (set_label : t -> string -> unit) =
          fun (x1474 : t) ->
            fun (x1475 : string) ->
              Ojs.set_prop_ascii (t_to_js x1474) "label"
                (Ojs.string_to_js x1475)
        let (description : t -> string) =
          fun (x1476 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1476) "description")
        let (set_description : t -> string -> unit) =
          fun (x1477 : t) ->
            fun (x1478 : string) ->
              Ojs.set_prop_ascii (t_to_js x1477) "description"
                (Ojs.string_to_js x1478)
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x1479 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1479) "iconPath")
        let (set_icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 -> unit) =
          fun (x1483 : t) ->
            fun (x1484 : (ThemeIcon.t, Uri.t, IconPath.t) union3) ->
              Ojs.set_prop_ascii (t_to_js x1483) "iconPath"
                (union3_to_js ThemeIcon.t_to_js Uri.t_to_js IconPath.t_to_js
                   x1484)
      end
    module WorkspaceEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1489 : Ojs.t) -> x1489
        and t_to_js : t -> Ojs.t = fun (x1488 : Ojs.t) -> x1488
        let (size : t -> int) =
          fun (x1490 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1490) "size")
        let (replace :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1497 : t) ->
            fun ~uri:(x1491 : Uri.t) ->
              fun ~range:(x1492 : Range.t) ->
                fun ~new_text:(x1493 : string) ->
                  fun ?metadata:(x1494 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1498 = t_to_js x1497 in
                         Ojs.call (Ojs.get_prop_ascii x1498 "replace")
                           "apply"
                           [|x1498;((let x1495 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1495 "push"
                                          [|(Uri.t_to_js x1491)|]);
                                     ignore
                                       (Ojs.call x1495 "push"
                                          [|(Range.t_to_js x1492)|]);
                                     ignore
                                       (Ojs.call x1495 "push"
                                          [|(Ojs.string_to_js x1493)|]);
                                     (match x1494 with
                                      | Some x1496 ->
                                          ignore
                                            (Ojs.call x1495 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1496)|])
                                      | None -> ());
                                     x1495))|])
        let (insert :
          t ->
            uri:Uri.t ->
              position:Position.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1505 : t) ->
            fun ~uri:(x1499 : Uri.t) ->
              fun ~position:(x1500 : Position.t) ->
                fun ~new_text:(x1501 : string) ->
                  fun ?metadata:(x1502 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1506 = t_to_js x1505 in
                         Ojs.call (Ojs.get_prop_ascii x1506 "insert") "apply"
                           [|x1506;((let x1503 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1503 "push"
                                          [|(Uri.t_to_js x1499)|]);
                                     ignore
                                       (Ojs.call x1503 "push"
                                          [|(Position.t_to_js x1500)|]);
                                     ignore
                                       (Ojs.call x1503 "push"
                                          [|(Ojs.string_to_js x1501)|]);
                                     (match x1502 with
                                      | Some x1504 ->
                                          ignore
                                            (Ojs.call x1503 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1504)|])
                                      | None -> ());
                                     x1503))|])
        let (delete :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1512 : t) ->
            fun ~uri:(x1507 : Uri.t) ->
              fun ~range:(x1508 : Range.t) ->
                fun ?metadata:(x1509 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1513 = t_to_js x1512 in
                       Ojs.call (Ojs.get_prop_ascii x1513 "delete") "apply"
                         [|x1513;((let x1510 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1510 "push"
                                        [|(Uri.t_to_js x1507)|]);
                                   ignore
                                     (Ojs.call x1510 "push"
                                        [|(Range.t_to_js x1508)|]);
                                   (match x1509 with
                                    | Some x1511 ->
                                        ignore
                                          (Ojs.call x1510 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1511)|])
                                    | None -> ());
                                   x1510))|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x1515 : t) ->
            fun ~uri:(x1514 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1515) "has" [|(Uri.t_to_js x1514)|])
        let (set_ : t -> uri:Uri.t -> edits:TextEdit.t list -> unit) =
          fun (x1519 : t) ->
            fun ~uri:(x1516 : Uri.t) ->
              fun ~edits:(x1517 : TextEdit.t list) ->
                ignore
                  (Ojs.call (t_to_js x1519) "set"
                     [|(Uri.t_to_js x1516);(Ojs.list_to_js TextEdit.t_to_js
                                              x1517)|])
        let (get : t -> uri:Uri.t -> TextEdit.t list) =
          fun (x1521 : t) ->
            fun ~uri:(x1520 : Uri.t) ->
              Ojs.list_of_js TextEdit.t_of_js
                (Ojs.call (t_to_js x1521) "get" [|(Uri.t_to_js x1520)|])
        module CreateFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1524 : Ojs.t) -> x1524
            and t_to_js : t -> Ojs.t = fun (x1523 : Ojs.t) -> x1523
            let (overwrite : t -> bool) =
              fun (x1525 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1525) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x1526 : t) ->
                fun (x1527 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1526) "overwrite"
                    (Ojs.bool_to_js x1527)
            let (ignore_if_exists : t -> bool) =
              fun (x1528 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1528) "ignoreIfExists")
            let (set_ignore_if_exists : t -> bool -> unit) =
              fun (x1529 : t) ->
                fun (x1530 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1529) "ignoreIfExists"
                    (Ojs.bool_to_js x1530)
          end
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1532 : Ojs.t) -> x1532
            and t_to_js : t -> Ojs.t = fun (x1531 : Ojs.t) -> x1531
            let (recursive : t -> bool) =
              fun (x1533 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1533) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x1534 : t) ->
                fun (x1535 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1534) "recursive"
                    (Ojs.bool_to_js x1535)
            let (ignore_if_not_exists : t -> bool) =
              fun (x1536 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1536) "ignoreIfNotExists")
            let (set_ignore_if_not_exists : t -> bool -> unit) =
              fun (x1537 : t) ->
                fun (x1538 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1537) "ignoreIfNotExists"
                    (Ojs.bool_to_js x1538)
          end
        let (create_file :
          t ->
            uri:Uri.t ->
              ?options:CreateFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1545 : t) ->
            fun ~uri:(x1539 : Uri.t) ->
              fun ?options:(x1540 : CreateFileOptions.t option) ->
                fun ?metadata:(x1541 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1546 = t_to_js x1545 in
                       Ojs.call (Ojs.get_prop_ascii x1546 "createFile")
                         "apply"
                         [|x1546;((let x1542 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1542 "push"
                                        [|(Uri.t_to_js x1539)|]);
                                   (match x1540 with
                                    | Some x1544 ->
                                        ignore
                                          (Ojs.call x1542 "push"
                                             [|(CreateFileOptions.t_to_js
                                                  x1544)|])
                                    | None -> ());
                                   (match x1541 with
                                    | Some x1543 ->
                                        ignore
                                          (Ojs.call x1542 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1543)|])
                                    | None -> ());
                                   x1542))|])
        let (delete_file :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1553 : t) ->
            fun ~uri:(x1547 : Uri.t) ->
              fun ?options:(x1548 : DeleteFileOptions.t option) ->
                fun ?metadata:(x1549 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1554 = t_to_js x1553 in
                       Ojs.call (Ojs.get_prop_ascii x1554 "deleteFile")
                         "apply"
                         [|x1554;((let x1550 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1550 "push"
                                        [|(Uri.t_to_js x1547)|]);
                                   (match x1548 with
                                    | Some x1552 ->
                                        ignore
                                          (Ojs.call x1550 "push"
                                             [|(DeleteFileOptions.t_to_js
                                                  x1552)|])
                                    | None -> ());
                                   (match x1549 with
                                    | Some x1551 ->
                                        ignore
                                          (Ojs.call x1550 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1551)|])
                                    | None -> ());
                                   x1550))|])
        let (rename_file :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                ?options:CreateFileOptions.t ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1562 : t) ->
            fun ~old_uri:(x1555 : Uri.t) ->
              fun ~new_uri:(x1556 : Uri.t) ->
                fun ?options:(x1557 : CreateFileOptions.t option) ->
                  fun ?metadata:(x1558 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1563 = t_to_js x1562 in
                         Ojs.call (Ojs.get_prop_ascii x1563 "renameFile")
                           "apply"
                           [|x1563;((let x1559 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1559 "push"
                                          [|(Uri.t_to_js x1555)|]);
                                     ignore
                                       (Ojs.call x1559 "push"
                                          [|(Uri.t_to_js x1556)|]);
                                     (match x1557 with
                                      | Some x1561 ->
                                          ignore
                                            (Ojs.call x1559 "push"
                                               [|(CreateFileOptions.t_to_js
                                                    x1561)|])
                                      | None -> ());
                                     (match x1558 with
                                      | Some x1560 ->
                                          ignore
                                            (Ojs.call x1559 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1560)|])
                                      | None -> ());
                                     x1559))|])
        let (entries : t -> (Uri.t * TextEdit.t list) list) =
          fun (x1564 : t) ->
            Ojs.list_of_js
              (fun (x1565 : Ojs.t) ->
                 let x1566 = x1565 in
                 ((Uri.t_of_js (Ojs.array_get x1566 0)),
                   (Ojs.list_of_js TextEdit.t_of_js (Ojs.array_get x1566 1))))
              (Ojs.call (t_to_js x1564) "entries" [||])
      end
    module CodeAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1569 : Ojs.t) -> x1569
        and t_to_js : t -> Ojs.t = fun (x1568 : Ojs.t) -> x1568
        module Disabled =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1571 : Ojs.t) -> x1571
            and t_to_js : t -> Ojs.t = fun (x1570 : Ojs.t) -> x1570
            let (reason : t -> string) =
              fun (x1572 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1572) "reason")
          end
        let (title : t -> string) =
          fun (x1573 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1573) "title")
        let (set_title : t -> string -> unit) =
          fun (x1574 : t) ->
            fun (x1575 : string) ->
              Ojs.set_prop_ascii (t_to_js x1574) "title"
                (Ojs.string_to_js x1575)
        let (edit : t -> WorkspaceEdit.t) =
          fun (x1576 : t) ->
            WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1576) "edit")
        let (set_edit : t -> WorkspaceEdit.t -> unit) =
          fun (x1577 : t) ->
            fun (x1578 : WorkspaceEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1577) "edit"
                (WorkspaceEdit.t_to_js x1578)
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1579 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1579) "diagnostics")
        let (set_diagnostics : t -> Diagnostic.t list -> unit) =
          fun (x1581 : t) ->
            fun (x1582 : Diagnostic.t list) ->
              Ojs.set_prop_ascii (t_to_js x1581) "diagnostics"
                (Ojs.list_to_js Diagnostic.t_to_js x1582)
        let (command : t -> Command.t) =
          fun (x1584 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1584) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1585 : t) ->
            fun (x1586 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1585) "command"
                (Command.t_to_js x1586)
        let (kind : t -> CodeActionKind.t) =
          fun (x1587 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1587) "kind")
        let (set_kind : t -> CodeActionKind.t -> unit) =
          fun (x1588 : t) ->
            fun (x1589 : CodeActionKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1588) "kind"
                (CodeActionKind.t_to_js x1589)
        let (is_preferred : t -> bool) =
          fun (x1590 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1590) "isPreferred")
        let (set_is_preferred : t -> bool -> unit) =
          fun (x1591 : t) ->
            fun (x1592 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1591) "isPreferred"
                (Ojs.bool_to_js x1592)
        let (disabled : t -> Disabled.t) =
          fun (x1593 : t) ->
            Disabled.t_of_js (Ojs.get_prop_ascii (t_to_js x1593) "disabled")
        let (set_disabled : t -> Disabled.t -> unit) =
          fun (x1594 : t) ->
            fun (x1595 : Disabled.t) ->
              Ojs.set_prop_ascii (t_to_js x1594) "disabled"
                (Disabled.t_to_js x1595)
        let (create : title:string -> ?kind:CodeActionKind.t -> unit -> t) =
          fun ~title:(x1596 : string) ->
            fun ?kind:(x1597 : CodeActionKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CodeAction")
                     (let x1598 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1598 "push" [|(Ojs.string_to_js x1596)|]);
                      (match x1597 with
                       | Some x1599 ->
                           ignore
                             (Ojs.call x1598 "push"
                                [|(CodeActionKind.t_to_js x1599)|])
                       | None -> ());
                      x1598))
      end
    module CodeActionProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1601 : Ojs.t) -> x1601
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1600 : Ojs.t) -> x1600
        let (provide_code_actions :
          'T t ->
            document:TextDocument.t ->
              range:(Range.t, Selection.t) union2 ->
                context:CodeActionContext.t ->
                  token:CancellationToken.t ->
                    (Command.t, 'T) union2 list ProviderResult.t)
          =
          fun (x1608 : 'T t) ->
            fun ~document:(x1602 : TextDocument.t) ->
              fun ~range:(x1603 : (Range.t, Selection.t) union2) ->
                fun ~context:(x1606 : CodeActionContext.t) ->
                  fun ~token:(x1607 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1610 : Ojs.t) ->
                         Ojs.list_of_js
                           (fun (x1611 : Ojs.t) ->
                              union2_of_js Command.t_of_js Obj.magic x1611)
                           x1610)
                      (Ojs.call (t_to_js Obj.magic x1608)
                         "provideCodeActions"
                         [|(TextDocument.t_to_js x1602);(union2_to_js
                                                           Range.t_to_js
                                                           Selection.t_to_js
                                                           x1603);(CodeActionContext.t_to_js
                                                                    x1606);(
                           CancellationToken.t_to_js x1607)|])
        let (resolve_code_action :
          'T t ->
            code_action:'T ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1616 : 'T t) ->
            fun ~code_action:(x1614 : 'T) ->
              fun ~token:(x1615 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1616) "resolveCodeAction"
                     [|(Obj.magic x1614);(CancellationToken.t_to_js x1615)|])
      end
    module CodeActionProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1620 : Ojs.t) -> x1620
        and t_to_js : t -> Ojs.t = fun (x1619 : Ojs.t) -> x1619
        let (provided_code_action_kinds : t -> CodeActionKind.t list) =
          fun (x1621 : t) ->
            Ojs.list_of_js CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1621) "providedCodeActionKinds")
        module Documentation =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1624 : Ojs.t) -> x1624
            and t_to_js : t -> Ojs.t = fun (x1623 : Ojs.t) -> x1623
            let (kind : t -> CodeActionKind.t) =
              fun (x1625 : t) ->
                CodeActionKind.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1625) "kind")
            let (command : t -> Command.t) =
              fun (x1626 : t) ->
                Command.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1626) "command")
          end
        let (documentation : t -> Documentation.t list) =
          fun (x1627 : t) ->
            Ojs.list_of_js Documentation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1627) "documentation")
      end
    module RenameProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1630 : Ojs.t) -> x1630
        and t_to_js : t -> Ojs.t = fun (x1629 : Ojs.t) -> x1629
        let (provide_rename_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                new_name:string ->
                  token:CancellationToken.t ->
                    WorkspaceEdit.t ProviderResult.t)
          =
          fun (x1635 : t) ->
            fun ~document:(x1631 : TextDocument.t) ->
              fun ~position:(x1632 : Position.t) ->
                fun ~new_name:(x1633 : string) ->
                  fun ~token:(x1634 : CancellationToken.t) ->
                    ProviderResult.t_of_js WorkspaceEdit.t_of_js
                      (Ojs.call (t_to_js x1635) "provideRenameEdits"
                         [|(TextDocument.t_to_js x1631);(Position.t_to_js
                                                           x1632);(Ojs.string_to_js
                                                                    x1633);(
                           CancellationToken.t_to_js x1634)|])
        module RangeWithPlaceHolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1638 : Ojs.t) -> x1638
            and t_to_js : t -> Ojs.t = fun (x1637 : Ojs.t) -> x1637
            let (range : t -> Range.t) =
              fun (x1639 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1639) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x1640 : t) ->
                fun (x1641 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1640) "range"
                    (Range.t_to_js x1641)
            let (placeholder : t -> string) =
              fun (x1642 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1642) "placeholder")
            let (set_placeholder : t -> string -> unit) =
              fun (x1643 : t) ->
                fun (x1644 : string) ->
                  Ojs.set_prop_ascii (t_to_js x1643) "placeholder"
                    (Ojs.string_to_js x1644)
          end
        let (prepare_rename :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Range.t, RangeWithPlaceHolder.t) union2 ProviderResult.t)
          =
          fun (x1648 : t) ->
            fun ~document:(x1645 : TextDocument.t) ->
              fun ~position:(x1646 : Position.t) ->
                fun ~token:(x1647 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1649 : Ojs.t) ->
                       union2_of_js Range.t_of_js
                         RangeWithPlaceHolder.t_of_js x1649)
                    (Ojs.call (t_to_js x1648) "prepareRename"
                       [|(TextDocument.t_to_js x1645);(Position.t_to_js x1646);(
                         CancellationToken.t_to_js x1647)|])
      end
    module SemanticTokensLegend =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1653 : Ojs.t) -> x1653
        and t_to_js : t -> Ojs.t = fun (x1652 : Ojs.t) -> x1652
        let (token_types : t -> string list) =
          fun (x1654 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1654) "tokenTypes")
        let (token_modifiers : t -> string list) =
          fun (x1656 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1656) "tokenModifiers")
        let (create :
          token_types:string list ->
            ?token_modifiers:string list -> unit -> t)
          =
          fun ~token_types:(x1658 : string list) ->
            fun ?token_modifiers:(x1659 : string list option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensLegend")
                     (let x1660 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1660 "push"
                           [|(Ojs.list_to_js Ojs.string_to_js x1658)|]);
                      (match x1659 with
                       | Some x1661 ->
                           ignore
                             (Ojs.call x1660 "push"
                                [|(Ojs.list_to_js Ojs.string_to_js x1661)|])
                       | None -> ());
                      x1660))
      end
    module SemanticTokens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1665 : Ojs.t) -> x1665
        and t_to_js : t -> Ojs.t = fun (x1664 : Ojs.t) -> x1664
        let (result_id : t -> string) =
          fun (x1666 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1666) "resultId")
        let (data : t -> Uint32Array.t) =
          fun (x1667 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1667) "data")
        let (create : data:Uint32Array.t -> ?result_id:string -> unit -> t) =
          fun ~data:(x1668 : Uint32Array.t) ->
            fun ?result_id:(x1669 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokens")
                     (let x1670 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1670 "push"
                           [|(Uint32Array.t_to_js x1668)|]);
                      (match x1669 with
                       | Some x1671 ->
                           ignore
                             (Ojs.call x1670 "push"
                                [|(Ojs.string_to_js x1671)|])
                       | None -> ());
                      x1670))
      end
    module SemanticTokensEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1673 : Ojs.t) -> x1673
        and t_to_js : t -> Ojs.t = fun (x1672 : Ojs.t) -> x1672
        let (start : t -> int) =
          fun (x1674 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1674) "start")
        let (delete_count : t -> int) =
          fun (x1675 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1675) "deleteCount")
        let (data : t -> Uint32Array.t) =
          fun (x1676 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1676) "data")
        let (create :
          start:int -> delete_count:int -> ?data:Uint32Array.t -> unit -> t)
          =
          fun ~start:(x1677 : int) ->
            fun ~delete_count:(x1678 : int) ->
              fun ?data:(x1679 : Uint32Array.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SemanticTokensEdit")
                       (let x1680 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1680 "push" [|(Ojs.int_to_js x1677)|]);
                        ignore
                          (Ojs.call x1680 "push" [|(Ojs.int_to_js x1678)|]);
                        (match x1679 with
                         | Some x1681 ->
                             ignore
                               (Ojs.call x1680 "push"
                                  [|(Uint32Array.t_to_js x1681)|])
                         | None -> ());
                        x1680))
      end
    module SemanticTokensEdits =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1683 : Ojs.t) -> x1683
        and t_to_js : t -> Ojs.t = fun (x1682 : Ojs.t) -> x1682
        let (result_id : t -> string) =
          fun (x1684 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1684) "resultId")
        let (edits : t -> SemanticTokensEdit.t list) =
          fun (x1685 : t) ->
            Ojs.list_of_js SemanticTokensEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1685) "edits")
        let (create :
          edits:SemanticTokensEdit.t list -> ?result_id:string -> unit -> t)
          =
          fun ~edits:(x1687 : SemanticTokensEdit.t list) ->
            fun ?result_id:(x1688 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensEdits")
                     (let x1689 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1689 "push"
                           [|(Ojs.list_to_js SemanticTokensEdit.t_to_js x1687)|]);
                      (match x1688 with
                       | Some x1690 ->
                           ignore
                             (Ojs.call x1689 "push"
                                [|(Ojs.string_to_js x1690)|])
                       | None -> ());
                      x1689))
      end
    module SemanticTokensBuilder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1693 : Ojs.t) -> x1693
        and t_to_js : t -> Ojs.t = fun (x1692 : Ojs.t) -> x1692
        let (create : ?legend:SemanticTokensLegend.t -> unit -> t) =
          fun ?legend:(x1694 : SemanticTokensLegend.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SemanticTokensBuilder")
                   (let x1695 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x1694 with
                     | Some x1696 ->
                         ignore
                           (Ojs.call x1695 "push"
                              [|(SemanticTokensLegend.t_to_js x1696)|])
                     | None -> ());
                    x1695))
        let (push :
          t ->
            line:int ->
              char:int ->
                length:int ->
                  token_type_:int -> ?token_modifiers:int -> unit -> unit)
          =
          fun (x1704 : t) ->
            fun ~line:(x1697 : int) ->
              fun ~char:(x1698 : int) ->
                fun ~length:(x1699 : int) ->
                  fun ~token_type_:(x1700 : int) ->
                    fun ?token_modifiers:(x1701 : int option) ->
                      fun () ->
                        ignore
                          (let x1705 = t_to_js x1704 in
                           Ojs.call (Ojs.get_prop_ascii x1705 "push") "apply"
                             [|x1705;((let x1702 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1702 "push"
                                            [|(Ojs.int_to_js x1697)|]);
                                       ignore
                                         (Ojs.call x1702 "push"
                                            [|(Ojs.int_to_js x1698)|]);
                                       ignore
                                         (Ojs.call x1702 "push"
                                            [|(Ojs.int_to_js x1699)|]);
                                       ignore
                                         (Ojs.call x1702 "push"
                                            [|(Ojs.int_to_js x1700)|]);
                                       (match x1701 with
                                        | Some x1703 ->
                                            ignore
                                              (Ojs.call x1702 "push"
                                                 [|(Ojs.int_to_js x1703)|])
                                        | None -> ());
                                       x1702))|])
        let (push' :
          t ->
            range:Range.t ->
              token_type_:string ->
                ?token_modifiers:string list -> unit -> unit)
          =
          fun (x1712 : t) ->
            fun ~range:(x1706 : Range.t) ->
              fun ~token_type_:(x1707 : string) ->
                fun ?token_modifiers:(x1708 : string list option) ->
                  fun () ->
                    ignore
                      (let x1713 = t_to_js x1712 in
                       Ojs.call (Ojs.get_prop_ascii x1713 "push") "apply"
                         [|x1713;((let x1709 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1709 "push"
                                        [|(Range.t_to_js x1706)|]);
                                   ignore
                                     (Ojs.call x1709 "push"
                                        [|(Ojs.string_to_js x1707)|]);
                                   (match x1708 with
                                    | Some x1710 ->
                                        ignore
                                          (Ojs.call x1709 "push"
                                             [|(Ojs.list_to_js
                                                  Ojs.string_to_js x1710)|])
                                    | None -> ());
                                   x1709))|])
        let (build : t -> ?result_id:string -> unit -> SemanticTokens.t) =
          fun (x1717 : t) ->
            fun ?result_id:(x1714 : string option) ->
              fun () ->
                SemanticTokens.t_of_js
                  (let x1718 = t_to_js x1717 in
                   Ojs.call (Ojs.get_prop_ascii x1718 "build") "apply"
                     [|x1718;((let x1715 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1714 with
                                | Some x1716 ->
                                    ignore
                                      (Ojs.call x1715 "push"
                                         [|(Ojs.string_to_js x1716)|])
                                | None -> ());
                               x1715))|])
      end
    module DocumentSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1720 : Ojs.t) -> x1720
        and t_to_js : t -> Ojs.t = fun (x1719 : Ojs.t) -> x1719
        let (on_did_change_semantic_tokens : t -> unit Event.t) =
          fun (x1721 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1721) "onDidChangeSemanticTokens")
        let (set_on_did_change_semantic_tokens : t -> unit Event.t -> unit) =
          fun (x1723 : t) ->
            fun (x1724 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1723) "onDidChangeSemanticTokens"
                (Event.t_to_js Ojs.unit_to_js x1724)
        let (provide_document_semantic_tokens :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> SemanticTokens.t ProviderResult.t)
          =
          fun (x1728 : t) ->
            fun ~document:(x1726 : TextDocument.t) ->
              fun ~token:(x1727 : CancellationToken.t) ->
                ProviderResult.t_of_js SemanticTokens.t_of_js
                  (Ojs.call (t_to_js x1728) "provideDocumentSemanticTokens"
                     [|(TextDocument.t_to_js x1726);(CancellationToken.t_to_js
                                                       x1727)|])
        let (provide_document_semantic_tokens_edits :
          t ->
            document:TextDocument.t ->
              previous_result_id:string ->
                token:CancellationToken.t ->
                  (SemanticTokens.t, SemanticTokensEdits.t) union2
                    ProviderResult.t)
          =
          fun (x1733 : t) ->
            fun ~document:(x1730 : TextDocument.t) ->
              fun ~previous_result_id:(x1731 : string) ->
                fun ~token:(x1732 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1734 : Ojs.t) ->
                       union2_of_js SemanticTokens.t_of_js
                         SemanticTokensEdits.t_of_js x1734)
                    (Ojs.call (t_to_js x1733)
                       "provideDocumentSemanticTokensEdits"
                       [|(TextDocument.t_to_js x1730);(Ojs.string_to_js x1731);(
                         CancellationToken.t_to_js x1732)|])
      end
    module DocumentRangeSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1738 : Ojs.t) -> x1738
        and t_to_js : t -> Ojs.t = fun (x1737 : Ojs.t) -> x1737
        let (provide_document_range_semantic_tokens :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                token:CancellationToken.t ->
                  SemanticTokens.t ProviderResult.t)
          =
          fun (x1742 : t) ->
            fun ~document:(x1739 : TextDocument.t) ->
              fun ~range:(x1740 : Range.t) ->
                fun ~token:(x1741 : CancellationToken.t) ->
                  ProviderResult.t_of_js SemanticTokens.t_of_js
                    (Ojs.call (t_to_js x1742)
                       "provideDocumentRangeSemanticTokens"
                       [|(TextDocument.t_to_js x1739);(Range.t_to_js x1740);(
                         CancellationToken.t_to_js x1741)|])
      end
    module FormattingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1745 : Ojs.t) -> x1745
        and t_to_js : t -> Ojs.t = fun (x1744 : Ojs.t) -> x1744
        let (tab_size : t -> int) =
          fun (x1746 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1746) "tabSize")
        let (set_tab_size : t -> int -> unit) =
          fun (x1747 : t) ->
            fun (x1748 : int) ->
              Ojs.set_prop_ascii (t_to_js x1747) "tabSize"
                (Ojs.int_to_js x1748)
        let (insert_spaces : t -> bool) =
          fun (x1749 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1749) "insertSpaces")
        let (set_insert_spaces : t -> bool -> unit) =
          fun (x1750 : t) ->
            fun (x1751 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1750) "insertSpaces"
                (Ojs.bool_to_js x1751)
        let (get : t -> string -> bool or_string or_number) =
          fun (x1752 : t) ->
            fun (x1753 : string) ->
              or_number_of_js
                (fun (x1754 : Ojs.t) -> or_string_of_js Ojs.bool_of_js x1754)
                (Ojs.get_prop (t_to_js x1752) (Ojs.string_to_js x1753))
        let (set : t -> string -> bool or_string or_number -> unit) =
          fun (x1756 : t) ->
            fun (x1757 : string) ->
              fun (x1758 : bool or_string or_number) ->
                Ojs.set_prop (t_to_js x1756) (Ojs.string_to_js x1757)
                  (or_number_to_js
                     (fun (x1759 : bool or_string) ->
                        or_string_to_js Ojs.bool_to_js x1759) x1758)
      end
    module DocumentFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1762 : Ojs.t) -> x1762
        and t_to_js : t -> Ojs.t = fun (x1761 : Ojs.t) -> x1761
        let (provide_document_formatting_edits :
          t ->
            document:TextDocument.t ->
              options:FormattingOptions.t ->
                token:CancellationToken.t -> TextEdit.t list ProviderResult.t)
          =
          fun (x1766 : t) ->
            fun ~document:(x1763 : TextDocument.t) ->
              fun ~options:(x1764 : FormattingOptions.t) ->
                fun ~token:(x1765 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1767 : Ojs.t) ->
                       Ojs.list_of_js TextEdit.t_of_js x1767)
                    (Ojs.call (t_to_js x1766)
                       "provideDocumentFormattingEdits"
                       [|(TextDocument.t_to_js x1763);(FormattingOptions.t_to_js
                                                         x1764);(CancellationToken.t_to_js
                                                                   x1765)|])
      end
    module DocumentRangeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1770 : Ojs.t) -> x1770
        and t_to_js : t -> Ojs.t = fun (x1769 : Ojs.t) -> x1769
        let (provide_document_range_formatting_edits :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                options:FormattingOptions.t ->
                  token:CancellationToken.t ->
                    TextEdit.t list ProviderResult.t)
          =
          fun (x1775 : t) ->
            fun ~document:(x1771 : TextDocument.t) ->
              fun ~range:(x1772 : Range.t) ->
                fun ~options:(x1773 : FormattingOptions.t) ->
                  fun ~token:(x1774 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1776 : Ojs.t) ->
                         Ojs.list_of_js TextEdit.t_of_js x1776)
                      (Ojs.call (t_to_js x1775)
                         "provideDocumentRangeFormattingEdits"
                         [|(TextDocument.t_to_js x1771);(Range.t_to_js x1772);(
                           FormattingOptions.t_to_js x1773);(CancellationToken.t_to_js
                                                               x1774)|])
      end
    module OnTypeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1779 : Ojs.t) -> x1779
        and t_to_js : t -> Ojs.t = fun (x1778 : Ojs.t) -> x1778
        let (provide_on_type_formatting_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                ch:string ->
                  options:FormattingOptions.t ->
                    token:CancellationToken.t ->
                      TextEdit.t list ProviderResult.t)
          =
          fun (x1785 : t) ->
            fun ~document:(x1780 : TextDocument.t) ->
              fun ~position:(x1781 : Position.t) ->
                fun ~ch:(x1782 : string) ->
                  fun ~options:(x1783 : FormattingOptions.t) ->
                    fun ~token:(x1784 : CancellationToken.t) ->
                      ProviderResult.t_of_js
                        (fun (x1786 : Ojs.t) ->
                           Ojs.list_of_js TextEdit.t_of_js x1786)
                        (Ojs.call (t_to_js x1785)
                           "provideOnTypeFormattingEdits"
                           [|(TextDocument.t_to_js x1780);(Position.t_to_js
                                                             x1781);(
                             Ojs.string_to_js x1782);(FormattingOptions.t_to_js
                                                        x1783);(CancellationToken.t_to_js
                                                                  x1784)|])
      end
    module ParameterInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1789 : Ojs.t) -> x1789
        and t_to_js : t -> Ojs.t = fun (x1788 : Ojs.t) -> x1788
        let (label : t -> (int * int) or_string) =
          fun (x1790 : t) ->
            or_string_of_js
              (fun (x1791 : Ojs.t) ->
                 let x1792 = x1791 in
                 ((Ojs.int_of_js (Ojs.array_get x1792 0)),
                   (Ojs.int_of_js (Ojs.array_get x1792 1))))
              (Ojs.get_prop_ascii (t_to_js x1790) "label")
        let (set_label : t -> (int * int) or_string -> unit) =
          fun (x1793 : t) ->
            fun (x1794 : (int * int) or_string) ->
              Ojs.set_prop_ascii (t_to_js x1793) "label"
                (or_string_to_js
                   (fun (x1795 : (int * int)) ->
                      let (x1796, x1797) = x1795 in
                      let x1798 = Ojs.array_make 2 in
                      Ojs.array_set x1798 0 (Ojs.int_to_js x1796);
                      Ojs.array_set x1798 1 (Ojs.int_to_js x1797);
                      x1798) x1794)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1799 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1799) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1801 : t) ->
            fun (x1802 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1801) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1802)
        let (create :
          label:(int * int) or_string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1804 : (int * int) or_string) ->
            fun ?documentation:(x1805 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ParameterInformation")
                     (let x1806 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1806 "push"
                           [|(or_string_to_js
                                (fun (x1809 : (int * int)) ->
                                   let (x1810, x1811) = x1809 in
                                   let x1812 = Ojs.array_make 2 in
                                   Ojs.array_set x1812 0
                                     (Ojs.int_to_js x1810);
                                   Ojs.array_set x1812 1
                                     (Ojs.int_to_js x1811);
                                   x1812) x1804)|]);
                      (match x1805 with
                       | Some x1807 ->
                           ignore
                             (Ojs.call x1806 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1807)|])
                       | None -> ());
                      x1806))
      end
    module SignatureInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1814 : Ojs.t) -> x1814
        and t_to_js : t -> Ojs.t = fun (x1813 : Ojs.t) -> x1813
        let (label : t -> string) =
          fun (x1815 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1815) "label")
        let (set_label : t -> string -> unit) =
          fun (x1816 : t) ->
            fun (x1817 : string) ->
              Ojs.set_prop_ascii (t_to_js x1816) "label"
                (Ojs.string_to_js x1817)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1818 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1818) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1820 : t) ->
            fun (x1821 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1820) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1821)
        let (parameters : t -> ParameterInformation.t list) =
          fun (x1823 : t) ->
            Ojs.list_of_js ParameterInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1823) "parameters")
        let (set_parameters : t -> ParameterInformation.t list -> unit) =
          fun (x1825 : t) ->
            fun (x1826 : ParameterInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1825) "parameters"
                (Ojs.list_to_js ParameterInformation.t_to_js x1826)
        let (active_parameter : t -> int) =
          fun (x1828 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1828) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1829 : t) ->
            fun (x1830 : int) ->
              Ojs.set_prop_ascii (t_to_js x1829) "activeParameter"
                (Ojs.int_to_js x1830)
        let (create :
          label:string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1831 : string) ->
            fun ?documentation:(x1832 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SignatureInformation")
                     (let x1833 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1833 "push" [|(Ojs.string_to_js x1831)|]);
                      (match x1832 with
                       | Some x1834 ->
                           ignore
                             (Ojs.call x1833 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1834)|])
                       | None -> ());
                      x1833))
      end
    module SignatureHelp =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1837 : Ojs.t) -> x1837
        and t_to_js : t -> Ojs.t = fun (x1836 : Ojs.t) -> x1836
        let (signatures : t -> SignatureInformation.t list) =
          fun (x1838 : t) ->
            Ojs.list_of_js SignatureInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1838) "signatures")
        let (set_signatures : t -> SignatureInformation.t list -> unit) =
          fun (x1840 : t) ->
            fun (x1841 : SignatureInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1840) "signatures"
                (Ojs.list_to_js SignatureInformation.t_to_js x1841)
        let (active_signature : t -> int) =
          fun (x1843 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1843) "activeSignature")
        let (set_active_signature : t -> int -> unit) =
          fun (x1844 : t) ->
            fun (x1845 : int) ->
              Ojs.set_prop_ascii (t_to_js x1844) "activeSignature"
                (Ojs.int_to_js x1845)
        let (active_parameter : t -> int) =
          fun (x1846 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1846) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1847 : t) ->
            fun (x1848 : int) ->
              Ojs.set_prop_ascii (t_to_js x1847) "activeParameter"
                (Ojs.int_to_js x1848)
      end
    module SignatureHelpTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `ContentChange ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1850 : Ojs.t) ->
            let x1851 = x1850 in
            match Ojs.int_of_js x1851 with
            | 2 -> `TriggerCharacter
            | 3 -> `ContentChange
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1849 : [ `TriggerCharacter  | `ContentChange ]) ->
            match x1849 with
            | `TriggerCharacter -> Ojs.int_to_js 2
            | `ContentChange -> Ojs.int_to_js 3
      end
    module SignatureHelpContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1853 : Ojs.t) -> x1853
        and t_to_js : t -> Ojs.t = fun (x1852 : Ojs.t) -> x1852
        let (trigger_kind : t -> SignatureHelpTriggerKind.t) =
          fun (x1854 : t) ->
            SignatureHelpTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1854) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1855 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1855) "triggerCharacter")
        let (is_retrigger : t -> bool) =
          fun (x1856 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1856) "isRetrigger")
        let (active_signature_help : t -> SignatureHelp.t) =
          fun (x1857 : t) ->
            SignatureHelp.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1857) "activeSignatureHelp")
      end
    module SignatureHelpProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1859 : Ojs.t) -> x1859
        and t_to_js : t -> Ojs.t = fun (x1858 : Ojs.t) -> x1858
        let (provide_signature_help :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:SignatureHelpContext.t ->
                    SignatureHelp.t ProviderResult.t)
          =
          fun (x1864 : t) ->
            fun ~document:(x1860 : TextDocument.t) ->
              fun ~position:(x1861 : Position.t) ->
                fun ~token:(x1862 : CancellationToken.t) ->
                  fun ~context:(x1863 : SignatureHelpContext.t) ->
                    ProviderResult.t_of_js SignatureHelp.t_of_js
                      (Ojs.call (t_to_js x1864) "provideSignatureHelp"
                         [|(TextDocument.t_to_js x1860);(Position.t_to_js
                                                           x1861);(CancellationToken.t_to_js
                                                                    x1862);(
                           SignatureHelpContext.t_to_js x1863)|])
      end
    module SignatureHelpProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1867 : Ojs.t) -> x1867
        and t_to_js : t -> Ojs.t = fun (x1866 : Ojs.t) -> x1866
        let (trigger_characters : t -> string list) =
          fun (x1868 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1868) "triggerCharacters")
        let (retrigger_characters : t -> string list) =
          fun (x1870 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1870) "retriggerCharacters")
      end
    module CompletionItemKind =
      struct
        type t =
          [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
          | `Class  | `Interface  | `Module  | `Property  | `Unit  | 
            `Value 
          | `Enum  | `Keyword  | `Snippet  | `Color  | `Reference  | 
            `File 
          | `Folder  | `EnumMember  | `Constant  | `Struct  | `Event 
          | `Operator  | `TypeParameter  | `User  | `Issue ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1873 : Ojs.t) ->
            let x1874 = x1873 in
            match Ojs.int_of_js x1874 with
            | 1 -> `Method
            | 2 -> `Function
            | 3 -> `Constructor
            | 4 -> `Field
            | 5 -> `Variable
            | 6 -> `Class
            | 7 -> `Interface
            | 8 -> `Module
            | 9 -> `Property
            | 10 -> `Unit
            | 11 -> `Value
            | 12 -> `Enum
            | 13 -> `Keyword
            | 14 -> `Snippet
            | 15 -> `Color
            | 17 -> `Reference
            | 16 -> `File
            | 18 -> `Folder
            | 19 -> `EnumMember
            | 20 -> `Constant
            | 21 -> `Struct
            | 22 -> `Event
            | 23 -> `Operator
            | 24 -> `TypeParameter
            | 25 -> `User
            | 26 -> `Issue
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1872 :
              [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
              | `Class  | `Interface  | `Module  | `Property  | `Unit 
              | `Value  | `Enum  | `Keyword  | `Snippet  | `Color 
              | `Reference  | `File  | `Folder  | `EnumMember  | `Constant 
              | `Struct  | `Event  | `Operator  | `TypeParameter  | `User 
              | `Issue ])
            ->
            match x1872 with
            | `Method -> Ojs.int_to_js 1
            | `Function -> Ojs.int_to_js 2
            | `Constructor -> Ojs.int_to_js 3
            | `Field -> Ojs.int_to_js 4
            | `Variable -> Ojs.int_to_js 5
            | `Class -> Ojs.int_to_js 6
            | `Interface -> Ojs.int_to_js 7
            | `Module -> Ojs.int_to_js 8
            | `Property -> Ojs.int_to_js 9
            | `Unit -> Ojs.int_to_js 10
            | `Value -> Ojs.int_to_js 11
            | `Enum -> Ojs.int_to_js 12
            | `Keyword -> Ojs.int_to_js 13
            | `Snippet -> Ojs.int_to_js 14
            | `Color -> Ojs.int_to_js 15
            | `Reference -> Ojs.int_to_js 17
            | `File -> Ojs.int_to_js 16
            | `Folder -> Ojs.int_to_js 18
            | `EnumMember -> Ojs.int_to_js 19
            | `Constant -> Ojs.int_to_js 20
            | `Struct -> Ojs.int_to_js 21
            | `Event -> Ojs.int_to_js 22
            | `Operator -> Ojs.int_to_js 23
            | `TypeParameter -> Ojs.int_to_js 24
            | `User -> Ojs.int_to_js 25
            | `Issue -> Ojs.int_to_js 26
      end
    module CompletionItemTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1876 : Ojs.t) -> x1876
        and t_to_js : t -> Ojs.t = fun (x1875 : Ojs.t) -> x1875
      end
    module CompletionItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1878 : Ojs.t) -> x1878
        and t_to_js : t -> Ojs.t = fun (x1877 : Ojs.t) -> x1877
        let (label : t -> string) =
          fun (x1879 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1879) "label")
        let (set_label : t -> string -> unit) =
          fun (x1880 : t) ->
            fun (x1881 : string) ->
              Ojs.set_prop_ascii (t_to_js x1880) "label"
                (Ojs.string_to_js x1881)
        let (kind : t -> CompletionItemKind.t) =
          fun (x1882 : t) ->
            CompletionItemKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1882) "kind")
        let (set_kind : t -> CompletionItemKind.t -> unit) =
          fun (x1883 : t) ->
            fun (x1884 : CompletionItemKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1883) "kind"
                (CompletionItemKind.t_to_js x1884)
        let (tags : t -> CompletionItemTag.t list) =
          fun (x1885 : t) ->
            Ojs.list_of_js CompletionItemTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1885) "tags")
        let (set_tags : t -> CompletionItemTag.t list -> unit) =
          fun (x1887 : t) ->
            fun (x1888 : CompletionItemTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1887) "tags"
                (Ojs.list_to_js CompletionItemTag.t_to_js x1888)
        let (detail : t -> string) =
          fun (x1890 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1890) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1891 : t) ->
            fun (x1892 : string) ->
              Ojs.set_prop_ascii (t_to_js x1891) "detail"
                (Ojs.string_to_js x1892)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1893 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1893) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1895 : t) ->
            fun (x1896 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1895) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1896)
        let (sort_text : t -> string) =
          fun (x1898 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1898) "sortText")
        let (set_sort_text : t -> string -> unit) =
          fun (x1899 : t) ->
            fun (x1900 : string) ->
              Ojs.set_prop_ascii (t_to_js x1899) "sortText"
                (Ojs.string_to_js x1900)
        let (filter_text : t -> string) =
          fun (x1901 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1901) "filterText")
        let (set_filter_text : t -> string -> unit) =
          fun (x1902 : t) ->
            fun (x1903 : string) ->
              Ojs.set_prop_ascii (t_to_js x1902) "filterText"
                (Ojs.string_to_js x1903)
        let (preselect : t -> bool) =
          fun (x1904 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1904) "preselect")
        let (set_preselect : t -> bool -> unit) =
          fun (x1905 : t) ->
            fun (x1906 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1905) "preselect"
                (Ojs.bool_to_js x1906)
        let (insert_text : t -> SnippetString.t or_string) =
          fun (x1907 : t) ->
            or_string_of_js SnippetString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1907) "insertText")
        let (set_insert_text : t -> SnippetString.t or_string -> unit) =
          fun (x1909 : t) ->
            fun (x1910 : SnippetString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1909) "insertText"
                (or_string_to_js SnippetString.t_to_js x1910)
        module RangeWithEdit =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1913 : Ojs.t) -> x1913
            and t_to_js : t -> Ojs.t = fun (x1912 : Ojs.t) -> x1912
            let (inserting : t -> Range.t) =
              fun (x1914 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1914) "inserting")
            let (set_inserting : t -> Range.t -> unit) =
              fun (x1915 : t) ->
                fun (x1916 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1915) "inserting"
                    (Range.t_to_js x1916)
            let (replacing : t -> Range.t) =
              fun (x1917 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1917) "replacing")
            let (set_replacing : t -> Range.t -> unit) =
              fun (x1918 : t) ->
                fun (x1919 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1918) "replacing"
                    (Range.t_to_js x1919)
          end
        let (range : t -> (Range.t, RangeWithEdit.t) union2) =
          fun (x1920 : t) ->
            union2_of_js Range.t_of_js RangeWithEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1920) "range")
        let (set_range : t -> (Range.t, RangeWithEdit.t) union2 -> unit) =
          fun (x1923 : t) ->
            fun (x1924 : (Range.t, RangeWithEdit.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x1923) "range"
                (union2_to_js Range.t_to_js RangeWithEdit.t_to_js x1924)
        let (commit_characters : t -> string list) =
          fun (x1927 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1927) "commitCharacters")
        let (set_commit_characters : t -> string list -> unit) =
          fun (x1929 : t) ->
            fun (x1930 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1929) "commitCharacters"
                (Ojs.list_to_js Ojs.string_to_js x1930)
        let (keep_whitespace : t -> bool) =
          fun (x1932 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1932) "keepWhitespace")
        let (set_keep_whitespace : t -> bool -> unit) =
          fun (x1933 : t) ->
            fun (x1934 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1933) "keepWhitespace"
                (Ojs.bool_to_js x1934)
        let (text_edit : t -> TextEdit.t) =
          fun (x1935 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1935) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x1936 : t) ->
            fun (x1937 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1936) "textEdit"
                (TextEdit.t_to_js x1937)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x1938 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1938) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x1940 : t) ->
            fun (x1941 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x1940) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x1941)
        let (command : t -> Command.t) =
          fun (x1943 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1943) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1944 : t) ->
            fun (x1945 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1944) "command"
                (Command.t_to_js x1945)
        let (create :
          label:string -> ?kind:CompletionItemKind.t -> unit -> t) =
          fun ~label:(x1946 : string) ->
            fun ?kind:(x1947 : CompletionItemKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionItem")
                     (let x1948 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1948 "push" [|(Ojs.string_to_js x1946)|]);
                      (match x1947 with
                       | Some x1949 ->
                           ignore
                             (Ojs.call x1948 "push"
                                [|(CompletionItemKind.t_to_js x1949)|])
                       | None -> ());
                      x1948))
      end
    module CompletionList =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1951 : Ojs.t) -> x1951
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1950 : Ojs.t) -> x1950
        let (is_incomplete : 'T t -> bool) =
          fun (x1952 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1952) "isIncomplete")
        let (set_is_incomplete : 'T t -> bool -> unit) =
          fun (x1954 : 'T t) ->
            fun (x1955 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1954) "isIncomplete"
                (Ojs.bool_to_js x1955)
        let (items : 'T t -> 'T list) =
          fun (x1957 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1957) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x1960 : 'T t) ->
            fun (x1961 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1960) "items"
                (Ojs.list_to_js Obj.magic x1961)
        let (create : ?items:'T list -> ?is_incomplete:bool -> unit -> 'T t)
          =
          fun ?items:(x1964 : 'T list option) ->
            fun ?is_incomplete:(x1965 : bool option) ->
              fun () ->
                t_of_js Obj.magic
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionList")
                     (let x1966 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1964 with
                       | Some x1968 ->
                           ignore
                             (Ojs.call x1966 "push"
                                [|(Ojs.list_to_js Obj.magic x1968)|])
                       | None -> ());
                      (match x1965 with
                       | Some x1967 ->
                           ignore
                             (Ojs.call x1966 "push"
                                [|(Ojs.bool_to_js x1967)|])
                       | None -> ());
                      x1966))
      end
    module CompletionTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `TriggerForIncompleteCompletions ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1972 : Ojs.t) ->
            let x1973 = x1972 in
            match Ojs.int_of_js x1973 with
            | 1 -> `TriggerCharacter
            | 2 -> `TriggerForIncompleteCompletions
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1971 :
              [ `TriggerCharacter  | `TriggerForIncompleteCompletions ])
            ->
            match x1971 with
            | `TriggerCharacter -> Ojs.int_to_js 1
            | `TriggerForIncompleteCompletions -> Ojs.int_to_js 2
      end
    module CompletionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1975 : Ojs.t) -> x1975
        and t_to_js : t -> Ojs.t = fun (x1974 : Ojs.t) -> x1974
        let (trigger_kind : t -> CompletionTriggerKind.t) =
          fun (x1976 : t) ->
            CompletionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1976) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1977 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1977) "triggerCharacter")
      end
    module CompletionItemProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1979 : Ojs.t) -> x1979
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1978 : Ojs.t) -> x1978
        let (provide_completion_items :
          'T t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:CompletionContext.t ->
                    ('T CompletionList.t, 'T) or_array ProviderResult.t)
          =
          fun (x1984 : 'T t) ->
            fun ~document:(x1980 : TextDocument.t) ->
              fun ~position:(x1981 : Position.t) ->
                fun ~token:(x1982 : CancellationToken.t) ->
                  fun ~context:(x1983 : CompletionContext.t) ->
                    ProviderResult.t_of_js
                      (fun (x1986 : Ojs.t) ->
                         or_array_of_js
                           (fun (x1987 : Ojs.t) ->
                              CompletionList.t_of_js Obj.magic x1987)
                           Obj.magic x1986)
                      (Ojs.call (t_to_js Obj.magic x1984)
                         "provideCompletionItems"
                         [|(TextDocument.t_to_js x1980);(Position.t_to_js
                                                           x1981);(CancellationToken.t_to_js
                                                                    x1982);(
                           CompletionContext.t_to_js x1983)|])
        let (resolve_completion_item :
          'T t -> item:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1992 : 'T t) ->
            fun ~item:(x1990 : 'T) ->
              fun ~token:(x1991 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1992) "resolveCompletionItem"
                     [|(Obj.magic x1990);(CancellationToken.t_to_js x1991)|])
      end
    module DocumentLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1996 : Ojs.t) -> x1996
        and t_to_js : t -> Ojs.t = fun (x1995 : Ojs.t) -> x1995
        let (range : t -> Range.t) =
          fun (x1997 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1997) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1998 : t) ->
            fun (x1999 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1998) "range"
                (Range.t_to_js x1999)
        let (target : t -> Uri.t) =
          fun (x2000 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2000) "target")
        let (set_target : t -> Uri.t -> unit) =
          fun (x2001 : t) ->
            fun (x2002 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2001) "target" (Uri.t_to_js x2002)
        let (tooltip : t -> string) =
          fun (x2003 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2003) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2004 : t) ->
            fun (x2005 : string) ->
              Ojs.set_prop_ascii (t_to_js x2004) "tooltip"
                (Ojs.string_to_js x2005)
        let (create : range:Range.t -> ?target:Uri.t -> unit -> t) =
          fun ~range:(x2006 : Range.t) ->
            fun ?target:(x2007 : Uri.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentLink")
                     (let x2008 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2008 "push" [|(Range.t_to_js x2006)|]);
                      (match x2007 with
                       | Some x2009 ->
                           ignore
                             (Ojs.call x2008 "push" [|(Uri.t_to_js x2009)|])
                       | None -> ());
                      x2008))
      end
    module DocumentLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2011 : Ojs.t) -> x2011
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2010 : Ojs.t) -> x2010
        let (provide_document_links :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x2014 : 'T t) ->
            fun ~document:(x2012 : TextDocument.t) ->
              fun ~token:(x2013 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2016 : Ojs.t) -> Ojs.list_of_js Obj.magic x2016)
                  (Ojs.call (t_to_js Obj.magic x2014) "provideDocumentLinks"
                     [|(TextDocument.t_to_js x2012);(CancellationToken.t_to_js
                                                       x2013)|])
        let (resolve_document_link :
          'T t -> link:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x2020 : 'T t) ->
            fun ~link:(x2018 : 'T) ->
              fun ~token:(x2019 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x2020) "resolveDocumentLink"
                     [|(Obj.magic x2018);(CancellationToken.t_to_js x2019)|])
      end
    module Color =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2024 : Ojs.t) -> x2024
        and t_to_js : t -> Ojs.t = fun (x2023 : Ojs.t) -> x2023
        let (red : t -> int) =
          fun (x2025 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2025) "red")
        let (green : t -> int) =
          fun (x2026 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2026) "green")
        let (blue : t -> int) =
          fun (x2027 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2027) "blue")
        let (alpha : t -> int) =
          fun (x2028 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2028) "alpha")
        let (create : red:int -> green:int -> blue:int -> alpha:int -> t) =
          fun ~red:(x2029 : int) ->
            fun ~green:(x2030 : int) ->
              fun ~blue:(x2031 : int) ->
                fun ~alpha:(x2032 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Color")
                       [|(Ojs.int_to_js x2029);(Ojs.int_to_js x2030);(
                         Ojs.int_to_js x2031);(Ojs.int_to_js x2032)|])
      end
    module ColorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2034 : Ojs.t) -> x2034
        and t_to_js : t -> Ojs.t = fun (x2033 : Ojs.t) -> x2033
        let (range : t -> Range.t) =
          fun (x2035 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2035) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2036 : t) ->
            fun (x2037 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2036) "range"
                (Range.t_to_js x2037)
        let (color : t -> Color.t) =
          fun (x2038 : t) ->
            Color.t_of_js (Ojs.get_prop_ascii (t_to_js x2038) "color")
        let (set_color : t -> Color.t -> unit) =
          fun (x2039 : t) ->
            fun (x2040 : Color.t) ->
              Ojs.set_prop_ascii (t_to_js x2039) "color"
                (Color.t_to_js x2040)
        let (create : range:Range.t -> color:Color.t -> t) =
          fun ~range:(x2041 : Range.t) ->
            fun ~color:(x2042 : Color.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "ColorInformation")
                   [|(Range.t_to_js x2041);(Color.t_to_js x2042)|])
      end
    module ColorPresentation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2044 : Ojs.t) -> x2044
        and t_to_js : t -> Ojs.t = fun (x2043 : Ojs.t) -> x2043
        let (label : t -> string) =
          fun (x2045 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2045) "label")
        let (set_label : t -> string -> unit) =
          fun (x2046 : t) ->
            fun (x2047 : string) ->
              Ojs.set_prop_ascii (t_to_js x2046) "label"
                (Ojs.string_to_js x2047)
        let (text_edit : t -> TextEdit.t) =
          fun (x2048 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x2048) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x2049 : t) ->
            fun (x2050 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x2049) "textEdit"
                (TextEdit.t_to_js x2050)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x2051 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2051) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x2053 : t) ->
            fun (x2054 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x2053) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x2054)
        let (create : label:string -> t) =
          fun ~label:(x2056 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "ColorPresentation") [|(Ojs.string_to_js x2056)|])
      end
    module DocumentColorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2058 : Ojs.t) -> x2058
        and t_to_js : t -> Ojs.t = fun (x2057 : Ojs.t) -> x2057
        let (provide_document_colors :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                ColorInformation.t list ProviderResult.t)
          =
          fun (x2061 : t) ->
            fun ~document:(x2059 : TextDocument.t) ->
              fun ~token:(x2060 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2062 : Ojs.t) ->
                     Ojs.list_of_js ColorInformation.t_of_js x2062)
                  (Ojs.call (t_to_js x2061) "provideDocumentColors"
                     [|(TextDocument.t_to_js x2059);(CancellationToken.t_to_js
                                                       x2060)|])
        module Context =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2065 : Ojs.t) -> x2065
            and t_to_js : t -> Ojs.t = fun (x2064 : Ojs.t) -> x2064
            let (document : t -> TextDocument.t) =
              fun (x2066 : t) ->
                TextDocument.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x2066) "document")
            let (set_document : t -> TextDocument.t -> unit) =
              fun (x2067 : t) ->
                fun (x2068 : TextDocument.t) ->
                  Ojs.set_prop_ascii (t_to_js x2067) "document"
                    (TextDocument.t_to_js x2068)
            let (range : t -> Range.t) =
              fun (x2069 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2069) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x2070 : t) ->
                fun (x2071 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x2070) "range"
                    (Range.t_to_js x2071)
          end
        let (provide_color_presentations :
          t ->
            color:Color.t ->
              context:Context.t ->
                token:CancellationToken.t ->
                  ColorPresentation.t list ProviderResult.t)
          =
          fun (x2075 : t) ->
            fun ~color:(x2072 : Color.t) ->
              fun ~context:(x2073 : Context.t) ->
                fun ~token:(x2074 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2076 : Ojs.t) ->
                       Ojs.list_of_js ColorPresentation.t_of_js x2076)
                    (Ojs.call (t_to_js x2075) "provideColorPresentations"
                       [|(Color.t_to_js x2072);(Context.t_to_js x2073);(
                         CancellationToken.t_to_js x2074)|])
      end
    module FoldingRangeKind =
      struct
        type t = [ `Imports  | `Region ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2079 : Ojs.t) ->
            let x2080 = x2079 in
            match Ojs.int_of_js x2080 with
            | 2 -> `Imports
            | 3 -> `Region
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2078 : [ `Imports  | `Region ]) ->
            match x2078 with
            | `Imports -> Ojs.int_to_js 2
            | `Region -> Ojs.int_to_js 3
      end
    module FoldingRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2082 : Ojs.t) -> x2082
        and t_to_js : t -> Ojs.t = fun (x2081 : Ojs.t) -> x2081
        let (start : t -> int) =
          fun (x2083 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2083) "start")
        let (set_start : t -> int -> unit) =
          fun (x2084 : t) ->
            fun (x2085 : int) ->
              Ojs.set_prop_ascii (t_to_js x2084) "start"
                (Ojs.int_to_js x2085)
        let (end_ : t -> int) =
          fun (x2086 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2086) "end")
        let (set_end : t -> int -> unit) =
          fun (x2087 : t) ->
            fun (x2088 : int) ->
              Ojs.set_prop_ascii (t_to_js x2087) "end" (Ojs.int_to_js x2088)
        let (kind : t -> FoldingRangeKind.t) =
          fun (x2089 : t) ->
            FoldingRangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2089) "kind")
        let (set_kind : t -> FoldingRangeKind.t -> unit) =
          fun (x2090 : t) ->
            fun (x2091 : FoldingRangeKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2090) "kind"
                (FoldingRangeKind.t_to_js x2091)
        let (create :
          start:int -> end_:int -> ?kind:FoldingRangeKind.t -> unit -> t) =
          fun ~start:(x2092 : int) ->
            fun ~end_:(x2093 : int) ->
              fun ?kind:(x2094 : FoldingRangeKind.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FoldingRange")
                       (let x2095 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2095 "push" [|(Ojs.int_to_js x2092)|]);
                        ignore
                          (Ojs.call x2095 "push" [|(Ojs.int_to_js x2093)|]);
                        (match x2094 with
                         | Some x2096 ->
                             ignore
                               (Ojs.call x2095 "push"
                                  [|(FoldingRangeKind.t_to_js x2096)|])
                         | None -> ());
                        x2095))
      end
    module FoldingContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2098 : Ojs.t) -> x2098
        and t_to_js : t -> Ojs.t = fun (x2097 : Ojs.t) -> x2097
      end
    module FoldingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2100 : Ojs.t) -> x2100
        and t_to_js : t -> Ojs.t = fun (x2099 : Ojs.t) -> x2099
        let (on_did_change_folding_ranges : t -> unit Event.t) =
          fun (x2101 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x2101) "onDidChangeFoldingRanges")
        let (set_on_did_change_folding_ranges : t -> unit Event.t -> unit) =
          fun (x2103 : t) ->
            fun (x2104 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2103) "onDidChangeFoldingRanges"
                (Event.t_to_js Ojs.unit_to_js x2104)
        let (provide_folding_ranges :
          t ->
            document:TextDocument.t ->
              context:FoldingContext.t ->
                token:CancellationToken.t ->
                  FoldingRange.t list ProviderResult.t)
          =
          fun (x2109 : t) ->
            fun ~document:(x2106 : TextDocument.t) ->
              fun ~context:(x2107 : FoldingContext.t) ->
                fun ~token:(x2108 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2110 : Ojs.t) ->
                       Ojs.list_of_js FoldingRange.t_of_js x2110)
                    (Ojs.call (t_to_js x2109) "provideFoldingRanges"
                       [|(TextDocument.t_to_js x2106);(FoldingContext.t_to_js
                                                         x2107);(CancellationToken.t_to_js
                                                                   x2108)|])
      end
    module SelectionRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2113 : Ojs.t) -> x2113
        and t_to_js : t -> Ojs.t = fun (x2112 : Ojs.t) -> x2112
        let (range : t -> Range.t) =
          fun (x2114 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2114) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2115 : t) ->
            fun (x2116 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2115) "range"
                (Range.t_to_js x2116)
        let (parent : t -> t) =
          fun (x2117 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x2117) "parent")
        let (set_parent : t -> t -> unit) =
          fun (x2118 : t) ->
            fun (x2119 : t) ->
              Ojs.set_prop_ascii (t_to_js x2118) "parent" (t_to_js x2119)
        let (create : range:Range.t -> ?parent:t -> unit -> t) =
          fun ~range:(x2120 : Range.t) ->
            fun ?parent:(x2121 : t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SelectionRange")
                     (let x2122 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2122 "push" [|(Range.t_to_js x2120)|]);
                      (match x2121 with
                       | Some x2123 ->
                           ignore (Ojs.call x2122 "push" [|(t_to_js x2123)|])
                       | None -> ());
                      x2122))
      end
    module SelectionRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2125 : Ojs.t) -> x2125
        and t_to_js : t -> Ojs.t = fun (x2124 : Ojs.t) -> x2124
        let (provide_selection_ranges :
          t ->
            document:TextDocument.t ->
              positions:Position.t list ->
                token:CancellationToken.t ->
                  SelectionRange.t list ProviderResult.t)
          =
          fun (x2130 : t) ->
            fun ~document:(x2126 : TextDocument.t) ->
              fun ~positions:(x2127 : Position.t list) ->
                fun ~token:(x2129 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2131 : Ojs.t) ->
                       Ojs.list_of_js SelectionRange.t_of_js x2131)
                    (Ojs.call (t_to_js x2130) "provideSelectionRanges"
                       [|(TextDocument.t_to_js x2126);(Ojs.list_to_js
                                                         Position.t_to_js
                                                         x2127);(CancellationToken.t_to_js
                                                                   x2129)|])
      end
    module CallHierarchyItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2134 : Ojs.t) -> x2134
        and t_to_js : t -> Ojs.t = fun (x2133 : Ojs.t) -> x2133
        let (name : t -> string) =
          fun (x2135 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2135) "name")
        let (set_name : t -> string -> unit) =
          fun (x2136 : t) ->
            fun (x2137 : string) ->
              Ojs.set_prop_ascii (t_to_js x2136) "name"
                (Ojs.string_to_js x2137)
        let (kind : t -> SymbolKind.t) =
          fun (x2138 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x2138) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x2139 : t) ->
            fun (x2140 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2139) "kind"
                (SymbolKind.t_to_js x2140)
        let (tags : t -> SymbolTag.t list) =
          fun (x2141 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2141) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x2143 : t) ->
            fun (x2144 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x2143) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x2144)
        let (detail : t -> string) =
          fun (x2146 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2146) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x2147 : t) ->
            fun (x2148 : string) ->
              Ojs.set_prop_ascii (t_to_js x2147) "detail"
                (Ojs.string_to_js x2148)
        let (uri : t -> Uri.t) =
          fun (x2149 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2149) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x2150 : t) ->
            fun (x2151 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2150) "uri" (Uri.t_to_js x2151)
        let (range : t -> Range.t) =
          fun (x2152 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2152) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2153 : t) ->
            fun (x2154 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2153) "range"
                (Range.t_to_js x2154)
        let (selection_range : t -> Range.t) =
          fun (x2155 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2155) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x2156 : t) ->
            fun (x2157 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2156) "selectionRange"
                (Range.t_to_js x2157)
        let (create :
          kind:SymbolKind.t ->
            name:string ->
              detail:string ->
                uri:Uri.t -> range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~kind:(x2158 : SymbolKind.t) ->
            fun ~name:(x2159 : string) ->
              fun ~detail:(x2160 : string) ->
                fun ~uri:(x2161 : Uri.t) ->
                  fun ~range:(x2162 : Range.t) ->
                    fun ~selection_range:(x2163 : Range.t) ->
                      t_of_js
                        (Ojs.new_obj
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "CallHierarchyItem")
                           [|(SymbolKind.t_to_js x2158);(Ojs.string_to_js
                                                           x2159);(Ojs.string_to_js
                                                                    x2160);(
                             Uri.t_to_js x2161);(Range.t_to_js x2162);(
                             Range.t_to_js x2163)|])
      end
    module CallHierarchyIncomingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2165 : Ojs.t) -> x2165
        and t_to_js : t -> Ojs.t = fun (x2164 : Ojs.t) -> x2164
        let (from : t -> CallHierarchyItem.t) =
          fun (x2166 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2166) "from")
        let (set_from : t -> CallHierarchyItem.t -> unit) =
          fun (x2167 : t) ->
            fun (x2168 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2167) "from"
                (CallHierarchyItem.t_to_js x2168)
        let (from_ranges : t -> Range.t list) =
          fun (x2169 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2169) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2171 : t) ->
            fun (x2172 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2171) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2172)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2174 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2175 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyIncomingCall")
                   [|(CallHierarchyItem.t_to_js x2174);(Ojs.list_to_js
                                                          Range.t_to_js x2175)|])
      end
    module CallHierarchyOutgoingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2178 : Ojs.t) -> x2178
        and t_to_js : t -> Ojs.t = fun (x2177 : Ojs.t) -> x2177
        let (to_ : t -> CallHierarchyItem.t) =
          fun (x2179 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2179) "to")
        let (set_to : t -> CallHierarchyItem.t -> unit) =
          fun (x2180 : t) ->
            fun (x2181 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2180) "to"
                (CallHierarchyItem.t_to_js x2181)
        let (from_ranges : t -> Range.t list) =
          fun (x2182 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2182) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2184 : t) ->
            fun (x2185 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2184) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2185)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2187 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2188 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyOutgoingCall")
                   [|(CallHierarchyItem.t_to_js x2187);(Ojs.list_to_js
                                                          Range.t_to_js x2188)|])
      end
    module CallHierarchyProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2191 : Ojs.t) -> x2191
        and t_to_js : t -> Ojs.t = fun (x2190 : Ojs.t) -> x2190
        let (prepare_call_hierarchy :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (CallHierarchyItem.t, CallHierarchyItem.t) or_array
                    ProviderResult.t)
          =
          fun (x2195 : t) ->
            fun ~document:(x2192 : TextDocument.t) ->
              fun ~position:(x2193 : Position.t) ->
                fun ~token:(x2194 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2196 : Ojs.t) ->
                       or_array_of_js CallHierarchyItem.t_of_js
                         CallHierarchyItem.t_of_js x2196)
                    (Ojs.call (t_to_js x2195) "prepareCallHierarchy"
                       [|(TextDocument.t_to_js x2192);(Position.t_to_js x2193);(
                         CancellationToken.t_to_js x2194)|])
        let (provide_call_hierarchy_incoming_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyIncomingCall.t list ProviderResult.t)
          =
          fun (x2201 : t) ->
            fun ~item:(x2199 : CallHierarchyItem.t) ->
              fun ~token:(x2200 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2202 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyIncomingCall.t_of_js x2202)
                  (Ojs.call (t_to_js x2201)
                     "provideCallHierarchyIncomingCalls"
                     [|(CallHierarchyItem.t_to_js x2199);(CancellationToken.t_to_js
                                                            x2200)|])
        let (provide_call_hierarchy_outgoing_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyOutgoingCall.t list ProviderResult.t)
          =
          fun (x2206 : t) ->
            fun ~item:(x2204 : CallHierarchyItem.t) ->
              fun ~token:(x2205 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2207 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyOutgoingCall.t_of_js x2207)
                  (Ojs.call (t_to_js x2206)
                     "provideCallHierarchyOutgoingCalls"
                     [|(CallHierarchyItem.t_to_js x2204);(CancellationToken.t_to_js
                                                            x2205)|])
      end
    module LinkedEditingRanges =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2210 : Ojs.t) -> x2210
        and t_to_js : t -> Ojs.t = fun (x2209 : Ojs.t) -> x2209
        let (create :
          ranges:Range.t list -> ?word_pattern:regexp -> unit -> t) =
          fun ~ranges:(x2211 : Range.t list) ->
            fun ?word_pattern:(x2212 : regexp option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "LinkedEditingRanges")
                     (let x2213 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2213 "push"
                           [|(Ojs.list_to_js Range.t_to_js x2211)|]);
                      (match x2212 with
                       | Some x2214 ->
                           ignore
                             (Ojs.call x2213 "push" [|(regexp_to_js x2214)|])
                       | None -> ());
                      x2213))
        let (ranges : t -> Range.t list) =
          fun (x2216 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2216) "ranges")
        let (word_pattern : t -> regexp) =
          fun (x2218 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2218) "wordPattern")
      end
    module LinkedEditingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2220 : Ojs.t) -> x2220
        and t_to_js : t -> Ojs.t = fun (x2219 : Ojs.t) -> x2219
        let (provide_linked_editing_ranges :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  LinkedEditingRanges.t ProviderResult.t)
          =
          fun (x2224 : t) ->
            fun ~document:(x2221 : TextDocument.t) ->
              fun ~position:(x2222 : Position.t) ->
                fun ~token:(x2223 : CancellationToken.t) ->
                  ProviderResult.t_of_js LinkedEditingRanges.t_of_js
                    (Ojs.call (t_to_js x2224) "provideLinkedEditingRanges"
                       [|(TextDocument.t_to_js x2221);(Position.t_to_js x2222);(
                         CancellationToken.t_to_js x2223)|])
      end
    module CharacterPair =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2227 : Ojs.t) -> x2227
        and t_to_js : t -> Ojs.t = fun (x2226 : Ojs.t) -> x2226
      end
    module CommentRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2229 : Ojs.t) -> x2229
        and t_to_js : t -> Ojs.t = fun (x2228 : Ojs.t) -> x2228
        let (line_comment : t -> string) =
          fun (x2230 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2230) "lineComment")
        let (set_line_comment : t -> string -> unit) =
          fun (x2231 : t) ->
            fun (x2232 : string) ->
              Ojs.set_prop_ascii (t_to_js x2231) "lineComment"
                (Ojs.string_to_js x2232)
        let (block_comment : t -> CharacterPair.t) =
          fun (x2233 : t) ->
            CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2233) "blockComment")
        let (set_block_comment : t -> CharacterPair.t -> unit) =
          fun (x2234 : t) ->
            fun (x2235 : CharacterPair.t) ->
              Ojs.set_prop_ascii (t_to_js x2234) "blockComment"
                (CharacterPair.t_to_js x2235)
      end
    module IndentationRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2237 : Ojs.t) -> x2237
        and t_to_js : t -> Ojs.t = fun (x2236 : Ojs.t) -> x2236
        let (decrease_indent_pattern : t -> regexp) =
          fun (x2238 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2238) "decreaseIndentPattern")
        let (set_decrease_indent_pattern : t -> regexp -> unit) =
          fun (x2239 : t) ->
            fun (x2240 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2239) "decreaseIndentPattern"
                (regexp_to_js x2240)
        let (increase_indent_pattern : t -> regexp) =
          fun (x2241 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2241) "increaseIndentPattern")
        let (set_increase_indent_pattern : t -> regexp -> unit) =
          fun (x2242 : t) ->
            fun (x2243 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2242) "increaseIndentPattern"
                (regexp_to_js x2243)
        let (indent_next_line_pattern : t -> regexp) =
          fun (x2244 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2244) "indentNextLinePattern")
        let (set_indent_next_line_pattern : t -> regexp -> unit) =
          fun (x2245 : t) ->
            fun (x2246 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2245) "indentNextLinePattern"
                (regexp_to_js x2246)
        let (un_indented_line_pattern : t -> regexp) =
          fun (x2247 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2247) "unIndentedLinePattern")
        let (set_un_indented_line_pattern : t -> regexp -> unit) =
          fun (x2248 : t) ->
            fun (x2249 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2248) "unIndentedLinePattern"
                (regexp_to_js x2249)
      end
    module IndentAction =
      struct
        type t = [ `Indent  | `IndentOutdent  | `Outdent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2251 : Ojs.t) ->
            let x2252 = x2251 in
            match Ojs.int_of_js x2252 with
            | 1 -> `Indent
            | 2 -> `IndentOutdent
            | 3 -> `Outdent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2250 : [ `Indent  | `IndentOutdent  | `Outdent ]) ->
            match x2250 with
            | `Indent -> Ojs.int_to_js 1
            | `IndentOutdent -> Ojs.int_to_js 2
            | `Outdent -> Ojs.int_to_js 3
      end
    module EnterAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2254 : Ojs.t) -> x2254
        and t_to_js : t -> Ojs.t = fun (x2253 : Ojs.t) -> x2253
        let (indent_action : t -> IndentAction.t) =
          fun (x2255 : t) ->
            IndentAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2255) "indentAction")
        let (set_indent_action : t -> IndentAction.t -> unit) =
          fun (x2256 : t) ->
            fun (x2257 : IndentAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2256) "indentAction"
                (IndentAction.t_to_js x2257)
        let (append_text : t -> string) =
          fun (x2258 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2258) "appendText")
        let (set_append_text : t -> string -> unit) =
          fun (x2259 : t) ->
            fun (x2260 : string) ->
              Ojs.set_prop_ascii (t_to_js x2259) "appendText"
                (Ojs.string_to_js x2260)
        let (remove_text : t -> int) =
          fun (x2261 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2261) "removeText")
        let (set_remove_text : t -> int -> unit) =
          fun (x2262 : t) ->
            fun (x2263 : int) ->
              Ojs.set_prop_ascii (t_to_js x2262) "removeText"
                (Ojs.int_to_js x2263)
      end
    module OnEnterRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2265 : Ojs.t) -> x2265
        and t_to_js : t -> Ojs.t = fun (x2264 : Ojs.t) -> x2264
        let (before_text : t -> regexp) =
          fun (x2266 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2266) "beforeText")
        let (set_before_text : t -> regexp -> unit) =
          fun (x2267 : t) ->
            fun (x2268 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2267) "beforeText"
                (regexp_to_js x2268)
        let (after_text : t -> regexp) =
          fun (x2269 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2269) "afterText")
        let (set_after_text : t -> regexp -> unit) =
          fun (x2270 : t) ->
            fun (x2271 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2270) "afterText"
                (regexp_to_js x2271)
        let (previous_line_text : t -> regexp) =
          fun (x2272 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2272) "previousLineText")
        let (set_previous_line_text : t -> regexp -> unit) =
          fun (x2273 : t) ->
            fun (x2274 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2273) "previousLineText"
                (regexp_to_js x2274)
        let (action : t -> EnterAction.t) =
          fun (x2275 : t) ->
            EnterAction.t_of_js (Ojs.get_prop_ascii (t_to_js x2275) "action")
        let (set_action : t -> EnterAction.t -> unit) =
          fun (x2276 : t) ->
            fun (x2277 : EnterAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2276) "action"
                (EnterAction.t_to_js x2277)
      end
    module AutoClosingPairs =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2279 : Ojs.t) -> x2279
        and t_to_js : t -> Ojs.t = fun (x2278 : Ojs.t) -> x2278
        let (open_ : t -> string) =
          fun (x2280 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2280) "open")
        let (set_open : t -> string -> unit) =
          fun (x2281 : t) ->
            fun (x2282 : string) ->
              Ojs.set_prop_ascii (t_to_js x2281) "open"
                (Ojs.string_to_js x2282)
        let (close : t -> string) =
          fun (x2283 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2283) "close")
        let (set_close : t -> string -> unit) =
          fun (x2284 : t) ->
            fun (x2285 : string) ->
              Ojs.set_prop_ascii (t_to_js x2284) "close"
                (Ojs.string_to_js x2285)
        let (not_in : t -> string list) =
          fun (x2286 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2286) "notIn")
        let (set_not_in : t -> string list -> unit) =
          fun (x2288 : t) ->
            fun (x2289 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2288) "notIn"
                (Ojs.list_to_js Ojs.string_to_js x2289)
      end
    module CharacterPairSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2292 : Ojs.t) -> x2292
        and t_to_js : t -> Ojs.t = fun (x2291 : Ojs.t) -> x2291
        let (auto_closing_pairs : t -> AutoClosingPairs.t list) =
          fun (x2293 : t) ->
            Ojs.list_of_js AutoClosingPairs.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2293) "autoClosingPairs")
        let (set_auto_closing_pairs : t -> AutoClosingPairs.t list -> unit) =
          fun (x2295 : t) ->
            fun (x2296 : AutoClosingPairs.t list) ->
              Ojs.set_prop_ascii (t_to_js x2295) "autoClosingPairs"
                (Ojs.list_to_js AutoClosingPairs.t_to_js x2296)
      end
    module DocComment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2299 : Ojs.t) -> x2299
        and t_to_js : t -> Ojs.t = fun (x2298 : Ojs.t) -> x2298
        let (scope : t -> string) =
          fun (x2300 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2300) "scope")
        let (set_scope : t -> string -> unit) =
          fun (x2301 : t) ->
            fun (x2302 : string) ->
              Ojs.set_prop_ascii (t_to_js x2301) "scope"
                (Ojs.string_to_js x2302)
        let (open_ : t -> string) =
          fun (x2303 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2303) "open")
        let (set_open : t -> string -> unit) =
          fun (x2304 : t) ->
            fun (x2305 : string) ->
              Ojs.set_prop_ascii (t_to_js x2304) "open"
                (Ojs.string_to_js x2305)
        let (line_start : t -> string) =
          fun (x2306 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2306) "lineStart")
        let (set_line_start : t -> string -> unit) =
          fun (x2307 : t) ->
            fun (x2308 : string) ->
              Ojs.set_prop_ascii (t_to_js x2307) "lineStart"
                (Ojs.string_to_js x2308)
        let (close : t -> string) =
          fun (x2309 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2309) "close")
        let (set_close : t -> string -> unit) =
          fun (x2310 : t) ->
            fun (x2311 : string) ->
              Ojs.set_prop_ascii (t_to_js x2310) "close"
                (Ojs.string_to_js x2311)
      end
    module ElectricCharacterSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2313 : Ojs.t) -> x2313
        and t_to_js : t -> Ojs.t = fun (x2312 : Ojs.t) -> x2312
        let (brackets : t -> any) =
          fun (x2314 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x2314) "brackets")
        let (set_brackets : t -> any -> unit) =
          fun (x2315 : t) ->
            fun (x2316 : any) ->
              Ojs.set_prop_ascii (t_to_js x2315) "brackets" (any_to_js x2316)
        let (doc_comment : t -> DocComment.t) =
          fun (x2317 : t) ->
            DocComment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2317) "docComment")
        let (set_doc_comment : t -> DocComment.t -> unit) =
          fun (x2318 : t) ->
            fun (x2319 : DocComment.t) ->
              Ojs.set_prop_ascii (t_to_js x2318) "docComment"
                (DocComment.t_to_js x2319)
      end
    module LanguageConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2321 : Ojs.t) -> x2321
        and t_to_js : t -> Ojs.t = fun (x2320 : Ojs.t) -> x2320
        let (comments : t -> CommentRule.t) =
          fun (x2322 : t) ->
            CommentRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2322) "comments")
        let (set_comments : t -> CommentRule.t -> unit) =
          fun (x2323 : t) ->
            fun (x2324 : CommentRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2323) "comments"
                (CommentRule.t_to_js x2324)
        let (brackets : t -> CharacterPair.t list) =
          fun (x2325 : t) ->
            Ojs.list_of_js CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2325) "brackets")
        let (set_brackets : t -> CharacterPair.t list -> unit) =
          fun (x2327 : t) ->
            fun (x2328 : CharacterPair.t list) ->
              Ojs.set_prop_ascii (t_to_js x2327) "brackets"
                (Ojs.list_to_js CharacterPair.t_to_js x2328)
        let (word_pattern : t -> regexp) =
          fun (x2330 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2330) "wordPattern")
        let (set_word_pattern : t -> regexp -> unit) =
          fun (x2331 : t) ->
            fun (x2332 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2331) "wordPattern"
                (regexp_to_js x2332)
        let (indentation_rules : t -> IndentationRule.t) =
          fun (x2333 : t) ->
            IndentationRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2333) "indentationRules")
        let (set_indentation_rules : t -> IndentationRule.t -> unit) =
          fun (x2334 : t) ->
            fun (x2335 : IndentationRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2334) "indentationRules"
                (IndentationRule.t_to_js x2335)
        let (on_enter_rules : t -> OnEnterRule.t list) =
          fun (x2336 : t) ->
            Ojs.list_of_js OnEnterRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2336) "onEnterRules")
        let (set_on_enter_rules : t -> OnEnterRule.t list -> unit) =
          fun (x2338 : t) ->
            fun (x2339 : OnEnterRule.t list) ->
              Ojs.set_prop_ascii (t_to_js x2338) "onEnterRules"
                (Ojs.list_to_js OnEnterRule.t_to_js x2339)
        let (electric_character_support : t -> ElectricCharacterSupport.t) =
          fun (x2341 : t) ->
            ElectricCharacterSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2341)
                 "__electricCharacterSupport")
        let (set_electric_character_support :
          t -> ElectricCharacterSupport.t -> unit) =
          fun (x2342 : t) ->
            fun (x2343 : ElectricCharacterSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2342) "__electricCharacterSupport"
                (ElectricCharacterSupport.t_to_js x2343)
        let (character_pair_support : t -> CharacterPairSupport.t) =
          fun (x2344 : t) ->
            CharacterPairSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2344) "__characterPairSupport")
        let (set_character_pair_support :
          t -> CharacterPairSupport.t -> unit) =
          fun (x2345 : t) ->
            fun (x2346 : CharacterPairSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2345) "__characterPairSupport"
                (CharacterPairSupport.t_to_js x2346)
      end
    module ConfigurationTarget =
      struct
        type t = [ `Workspace  | `WorkspaceFolder ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2348 : Ojs.t) ->
            let x2349 = x2348 in
            match Ojs.int_of_js x2349 with
            | 2 -> `Workspace
            | 3 -> `WorkspaceFolder
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2347 : [ `Workspace  | `WorkspaceFolder ]) ->
            match x2347 with
            | `Workspace -> Ojs.int_to_js 2
            | `WorkspaceFolder -> Ojs.int_to_js 3
      end
    module InspectionResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2351 : Ojs.t) -> x2351
        and t_to_js : t -> Ojs.t = fun (x2350 : Ojs.t) -> x2350
        let (key : t -> string) =
          fun (x2352 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2352) "key")
        let (set_key : t -> string -> unit) =
          fun (x2353 : t) ->
            fun (x2354 : string) ->
              Ojs.set_prop_ascii (t_to_js x2353) "key"
                (Ojs.string_to_js x2354)
        let (default : t -> 'T) =
          fun (x2355 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2355) "defaultValue")
        let (set_default : t -> 'T -> unit) =
          fun (x2356 : t) ->
            fun (x2357 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2356) "defaultValue"
                (Obj.magic x2357)
        let (global_value : t -> 'T) =
          fun (x2358 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2358) "globalValue")
        let (set_global_value : t -> 'T -> unit) =
          fun (x2359 : t) ->
            fun (x2360 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2359) "globalValue"
                (Obj.magic x2360)
        let (workspace_value : t -> 'T) =
          fun (x2361 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2361) "workspaceValue")
        let (set_workspace_value : t -> 'T -> unit) =
          fun (x2362 : t) ->
            fun (x2363 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2362) "workspaceValue"
                (Obj.magic x2363)
        let (workspace_folder_value : t -> 'T) =
          fun (x2364 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2364) "workspaceFolderValue")
        let (set_workspace_folder_value : t -> 'T -> unit) =
          fun (x2365 : t) ->
            fun (x2366 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2365) "workspaceFolderValue"
                (Obj.magic x2366)
        let (default_language_value : t -> 'T) =
          fun (x2367 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2367) "defaultLanguageValue")
        let (set_default_language_value : t -> 'T -> unit) =
          fun (x2368 : t) ->
            fun (x2369 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2368) "defaultLanguageValue"
                (Obj.magic x2369)
        let (global_language_value : t -> 'T) =
          fun (x2370 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2370) "globalLanguageValue")
        let (set_global_language_value : t -> 'T -> unit) =
          fun (x2371 : t) ->
            fun (x2372 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2371) "globalLanguageValue"
                (Obj.magic x2372)
        let (workspace_language_value : t -> 'T) =
          fun (x2373 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2373) "workspaceLanguageValue")
        let (set_workspace_language_value : t -> 'T -> unit) =
          fun (x2374 : t) ->
            fun (x2375 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2374) "workspaceLanguageValue"
                (Obj.magic x2375)
        let (workspace_folder_language_value : t -> 'T) =
          fun (x2376 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2376)
                 "workspaceFolderLanguageValue")
        let (set_workspace_folder_language_value : t -> 'T -> unit) =
          fun (x2377 : t) ->
            fun (x2378 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2377)
                "workspaceFolderLanguageValue" (Obj.magic x2378)
        let (language_ids : t -> string list) =
          fun (x2379 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2379) "languageIds")
        let (set_language_ids : t -> string list -> unit) =
          fun (x2381 : t) ->
            fun (x2382 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2381) "languageIds"
                (Ojs.list_to_js Ojs.string_to_js x2382)
      end
    module WorkspaceConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2385 : Ojs.t) -> x2385
        and t_to_js : t -> Ojs.t = fun (x2384 : Ojs.t) -> x2384
        let (get : t -> string -> 'T or_undefined) =
          fun (x2387 : t) ->
            fun (x2386 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2387) "get" [|(Ojs.string_to_js x2386)|])
        let (get' : t -> string -> default:'T -> 'T) =
          fun (x2391 : t) ->
            fun (x2389 : string) ->
              fun ~default:(x2390 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2391) "get"
                     [|(Ojs.string_to_js x2389);(Obj.magic x2390)|])
        let (has : t -> string -> bool) =
          fun (x2393 : t) ->
            fun (x2392 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2393) "has" [|(Ojs.string_to_js x2392)|])
        let (inspect : t -> string -> InspectionResult.t or_undefined) =
          fun (x2395 : t) ->
            fun (x2394 : string) ->
              or_undefined_of_js InspectionResult.t_of_js
                (Ojs.call (t_to_js x2395) "inspect"
                   [|(Ojs.string_to_js x2394)|])
        let (update :
          t ->
            string ->
              any ->
                ?configuration_target:ConfigurationTarget.t or_boolean ->
                  ?override_in_language:bool -> unit -> unit Promise.t)
          =
          fun (x2405 : t) ->
            fun (x2397 : string) ->
              fun (x2398 : any) ->
                fun
                  ?configuration_target:(x2399 :
                                          ConfigurationTarget.t or_boolean
                                            option)
                  ->
                  fun ?override_in_language:(x2400 : bool option) ->
                    fun () ->
                      Promise.t_of_js Ojs.unit_of_js
                        (let x2406 = t_to_js x2405 in
                         Ojs.call (Ojs.get_prop_ascii x2406 "update") "apply"
                           [|x2406;((let x2401 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x2401 "push"
                                          [|(Ojs.string_to_js x2397)|]);
                                     ignore
                                       (Ojs.call x2401 "push"
                                          [|(any_to_js x2398)|]);
                                     (match x2399 with
                                      | Some x2403 ->
                                          ignore
                                            (Ojs.call x2401 "push"
                                               [|(or_boolean_to_js
                                                    ConfigurationTarget.t_to_js
                                                    x2403)|])
                                      | None -> ());
                                     (match x2400 with
                                      | Some x2402 ->
                                          ignore
                                            (Ojs.call x2401 "push"
                                               [|(Ojs.bool_to_js x2402)|])
                                      | None -> ());
                                     x2401))|])
        let (get : t -> string -> any) =
          fun (x2408 : t) ->
            fun (x2409 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2408) (Ojs.string_to_js x2409))
      end
    module LocationLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2411 : Ojs.t) -> x2411
        and t_to_js : t -> Ojs.t = fun (x2410 : Ojs.t) -> x2410
        let (origin_selection_range : t -> Range.t) =
          fun (x2412 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2412) "originSelectionRange")
        let (set_origin_selection_range : t -> Range.t -> unit) =
          fun (x2413 : t) ->
            fun (x2414 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2413) "originSelectionRange"
                (Range.t_to_js x2414)
        let (target_uri : t -> Uri.t) =
          fun (x2415 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2415) "targetUri")
        let (set_target_uri : t -> Uri.t -> unit) =
          fun (x2416 : t) ->
            fun (x2417 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2416) "targetUri"
                (Uri.t_to_js x2417)
        let (target_range : t -> Range.t) =
          fun (x2418 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2418) "targetRange")
        let (set_target_range : t -> Range.t -> unit) =
          fun (x2419 : t) ->
            fun (x2420 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2419) "targetRange"
                (Range.t_to_js x2420)
        let (target_selection_range : t -> Range.t) =
          fun (x2421 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2421) "targetSelectionRange")
        let (set_target_selection_range : t -> Range.t -> unit) =
          fun (x2422 : t) ->
            fun (x2423 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2422) "targetSelectionRange"
                (Range.t_to_js x2423)
      end
    module OutputChannel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2425 : Ojs.t) -> x2425
        and t_to_js : t -> Ojs.t = fun (x2424 : Ojs.t) -> x2424
        let (name : t -> string) =
          fun (x2426 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2426) "name")
        let (append : t -> value:string -> unit) =
          fun (x2428 : t) ->
            fun ~value:(x2427 : string) ->
              ignore
                (Ojs.call (t_to_js x2428) "append"
                   [|(Ojs.string_to_js x2427)|])
        let (append_line : t -> value:string -> unit) =
          fun (x2430 : t) ->
            fun ~value:(x2429 : string) ->
              ignore
                (Ojs.call (t_to_js x2430) "appendLine"
                   [|(Ojs.string_to_js x2429)|])
        let (clear : t -> unit) =
          fun (x2431 : t) -> ignore (Ojs.call (t_to_js x2431) "clear" [||])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2435 : t) ->
            fun ?preserve_focus:(x2432 : bool option) ->
              fun () ->
                ignore
                  (let x2436 = t_to_js x2435 in
                   Ojs.call (Ojs.get_prop_ascii x2436 "show") "apply"
                     [|x2436;((let x2433 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2432 with
                                | Some x2434 ->
                                    ignore
                                      (Ojs.call x2433 "push"
                                         [|(Ojs.bool_to_js x2434)|])
                                | None -> ());
                               x2433))|])
        let (show' :
          t -> ?column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x2442 : t) ->
            fun ?column:(x2437 : ViewColumn.t option) ->
              fun ?preserve_focus:(x2438 : bool option) ->
                fun () ->
                  ignore
                    (let x2443 = t_to_js x2442 in
                     Ojs.call (Ojs.get_prop_ascii x2443 "show") "apply"
                       [|x2443;((let x2439 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x2437 with
                                  | Some x2441 ->
                                      ignore
                                        (Ojs.call x2439 "push"
                                           [|(ViewColumn.t_to_js x2441)|])
                                  | None -> ());
                                 (match x2438 with
                                  | Some x2440 ->
                                      ignore
                                        (Ojs.call x2439 "push"
                                           [|(Ojs.bool_to_js x2440)|])
                                  | None -> ());
                                 x2439))|])
        let (hide : t -> unit) =
          fun (x2444 : t) -> ignore (Ojs.call (t_to_js x2444) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2445 : t) -> ignore (Ojs.call (t_to_js x2445) "dispose" [||])
      end
    module AccessibilityInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2447 : Ojs.t) -> x2447
        and t_to_js : t -> Ojs.t = fun (x2446 : Ojs.t) -> x2446
        let (label : t -> string) =
          fun (x2448 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2448) "label")
        let (set_label : t -> string -> unit) =
          fun (x2449 : t) ->
            fun (x2450 : string) ->
              Ojs.set_prop_ascii (t_to_js x2449) "label"
                (Ojs.string_to_js x2450)
        let (role : t -> string) =
          fun (x2451 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2451) "role")
        let (set_role : t -> string -> unit) =
          fun (x2452 : t) ->
            fun (x2453 : string) ->
              Ojs.set_prop_ascii (t_to_js x2452) "role"
                (Ojs.string_to_js x2453)
      end
    module StatusBarAlignment =
      struct
        type t = [ `Right ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2455 : Ojs.t) ->
            let x2456 = x2455 in
            match Ojs.int_of_js x2456 with | 2 -> `Right | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2454 : [ `Right ]) ->
            match x2454 with | `Right -> Ojs.int_to_js 2
      end
    module StatusBarItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2458 : Ojs.t) -> x2458
        and t_to_js : t -> Ojs.t = fun (x2457 : Ojs.t) -> x2457
        let (alignment : t -> StatusBarAlignment.t) =
          fun (x2459 : t) ->
            StatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2459) "alignment")
        let (priority : t -> int) =
          fun (x2460 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2460) "priority")
        let (text : t -> string) =
          fun (x2461 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2461) "text")
        let (set_text : t -> string -> unit) =
          fun (x2462 : t) ->
            fun (x2463 : string) ->
              Ojs.set_prop_ascii (t_to_js x2462) "text"
                (Ojs.string_to_js x2463)
        let (tooltip : t -> string or_undefined) =
          fun (x2464 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2464) "tooltip")
        let (set_tooltip : t -> string or_undefined -> unit) =
          fun (x2466 : t) ->
            fun (x2467 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2466) "tooltip"
                (or_undefined_to_js Ojs.string_to_js x2467)
        let (color : t -> ThemeColor.t or_string or_undefined) =
          fun (x2469 : t) ->
            or_undefined_of_js
              (fun (x2470 : Ojs.t) ->
                 or_string_of_js ThemeColor.t_of_js x2470)
              (Ojs.get_prop_ascii (t_to_js x2469) "color")
        let (set_color : t -> ThemeColor.t or_string or_undefined -> unit) =
          fun (x2472 : t) ->
            fun (x2473 : ThemeColor.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2472) "color"
                (or_undefined_to_js
                   (fun (x2474 : ThemeColor.t or_string) ->
                      or_string_to_js ThemeColor.t_to_js x2474) x2473)
        let (background_color : t -> ThemeColor.t or_undefined) =
          fun (x2476 : t) ->
            or_undefined_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2476) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_undefined -> unit) =
          fun (x2478 : t) ->
            fun (x2479 : ThemeColor.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2478) "backgroundColor"
                (or_undefined_to_js ThemeColor.t_to_js x2479)
        let (command : t -> Command.t or_string or_undefined) =
          fun (x2481 : t) ->
            or_undefined_of_js
              (fun (x2482 : Ojs.t) -> or_string_of_js Command.t_of_js x2482)
              (Ojs.get_prop_ascii (t_to_js x2481) "command")
        let (set_command : t -> Command.t or_string or_undefined -> unit) =
          fun (x2484 : t) ->
            fun (x2485 : Command.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2484) "command"
                (or_undefined_to_js
                   (fun (x2486 : Command.t or_string) ->
                      or_string_to_js Command.t_to_js x2486) x2485)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x2488 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2488) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x2489 : t) ->
            fun (x2490 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x2489) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x2490)
        let (show : t -> unit) =
          fun (x2491 : t) -> ignore (Ojs.call (t_to_js x2491) "show" [||])
        let (hide : t -> unit) =
          fun (x2492 : t) -> ignore (Ojs.call (t_to_js x2492) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2493 : t) -> ignore (Ojs.call (t_to_js x2493) "dispose" [||])
      end
    module Progress =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2495 : Ojs.t) -> x2495
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2494 : Ojs.t) -> x2494
        let (report : 'T t -> value:'T -> unit) =
          fun (x2497 : 'T t) ->
            fun ~value:(x2496 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x2497) "report"
                   [|(Obj.magic x2496)|])
      end
    module TerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2500 : Ojs.t) -> x2500
        and t_to_js : t -> Ojs.t = fun (x2499 : Ojs.t) -> x2499
        let (name : t -> string) =
          fun (x2501 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2501) "name")
        let (set_name : t -> string -> unit) =
          fun (x2502 : t) ->
            fun (x2503 : string) ->
              Ojs.set_prop_ascii (t_to_js x2502) "name"
                (Ojs.string_to_js x2503)
        let (shell_path : t -> string) =
          fun (x2504 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2504) "shellPath")
        let (set_shell_path : t -> string -> unit) =
          fun (x2505 : t) ->
            fun (x2506 : string) ->
              Ojs.set_prop_ascii (t_to_js x2505) "shellPath"
                (Ojs.string_to_js x2506)
        let (shell_args : t -> string list or_string) =
          fun (x2507 : t) ->
            or_string_of_js
              (fun (x2508 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x2508)
              (Ojs.get_prop_ascii (t_to_js x2507) "shellArgs")
        let (set_shell_args : t -> string list or_string -> unit) =
          fun (x2510 : t) ->
            fun (x2511 : string list or_string) ->
              Ojs.set_prop_ascii (t_to_js x2510) "shellArgs"
                (or_string_to_js
                   (fun (x2512 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x2512) x2511)
        let (cwd : t -> Uri.t or_string) =
          fun (x2514 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2514) "cwd")
        let (set_cwd : t -> Uri.t or_string -> unit) =
          fun (x2516 : t) ->
            fun (x2517 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2516) "cwd"
                (or_string_to_js Uri.t_to_js x2517)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2520 : Ojs.t) -> x2520
            and t_to_js : t -> Ojs.t = fun (x2519 : Ojs.t) -> x2519
            let (get : t -> string -> string or_null_or_undefined) =
              fun (x2521 : t) ->
                fun (x2522 : string) ->
                  or_null_or_undefined_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2521) (Ojs.string_to_js x2522))
            let (set : t -> string -> string or_null_or_undefined -> unit) =
              fun (x2524 : t) ->
                fun (x2525 : string) ->
                  fun (x2526 : string or_null_or_undefined) ->
                    Ojs.set_prop (t_to_js x2524) (Ojs.string_to_js x2525)
                      (or_null_or_undefined_to_js Ojs.string_to_js x2526)
          end
        let (env : t -> Env.t) =
          fun (x2528 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2528) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2529 : t) ->
            fun (x2530 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2529) "env" (Env.t_to_js x2530)
        let (strict_env : t -> bool) =
          fun (x2531 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2531) "strictEnv")
        let (set_strict_env : t -> bool -> unit) =
          fun (x2532 : t) ->
            fun (x2533 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2532) "strictEnv"
                (Ojs.bool_to_js x2533)
        let (hide_from_user : t -> bool) =
          fun (x2534 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2534) "hideFromUser")
        let (set_hide_from_user : t -> bool -> unit) =
          fun (x2535 : t) ->
            fun (x2536 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2535) "hideFromUser"
                (Ojs.bool_to_js x2536)
      end
    module TerminalDimensions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2538 : Ojs.t) -> x2538
        and t_to_js : t -> Ojs.t = fun (x2537 : Ojs.t) -> x2537
        let (columns : t -> int) =
          fun (x2539 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2539) "columns")
        let (rows : t -> int) =
          fun (x2540 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2540) "rows")
      end
    module TerminalExitStatus =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2542 : Ojs.t) -> x2542
        and t_to_js : t -> Ojs.t = fun (x2541 : Ojs.t) -> x2541
        let (code : t -> int or_undefined) =
          fun (x2543 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x2543) "code")
      end
    module Pseudoterminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2546 : Ojs.t) -> x2546
        and t_to_js : t -> Ojs.t = fun (x2545 : Ojs.t) -> x2545
        let (on_did_write : t -> string Event.t) =
          fun (x2547 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2547) "onDidWrite")
        let (set_on_did_write : t -> string Event.t -> unit) =
          fun (x2549 : t) ->
            fun (x2550 : string Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2549) "onDidWrite"
                (Event.t_to_js Ojs.string_to_js x2550)
        let (on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t) =
          fun (x2552 : t) ->
            Event.t_of_js
              (fun (x2553 : Ojs.t) ->
                 or_undefined_of_js TerminalDimensions.t_of_js x2553)
              (Ojs.get_prop_ascii (t_to_js x2552) "onDidOverrideDimensions")
        let (set_on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t -> unit) =
          fun (x2555 : t) ->
            fun (x2556 : TerminalDimensions.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2555) "onDidOverrideDimensions"
                (Event.t_to_js
                   (fun (x2557 : TerminalDimensions.t or_undefined) ->
                      or_undefined_to_js TerminalDimensions.t_to_js x2557)
                   x2556)
        let (on_did_close : t -> unit or_number Event.t) =
          fun (x2559 : t) ->
            Event.t_of_js
              (fun (x2560 : Ojs.t) -> or_number_of_js Ojs.unit_of_js x2560)
              (Ojs.get_prop_ascii (t_to_js x2559) "onDidClose")
        let (set_on_did_close : t -> unit or_number Event.t -> unit) =
          fun (x2562 : t) ->
            fun (x2563 : unit or_number Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2562) "onDidClose"
                (Event.t_to_js
                   (fun (x2564 : unit or_number) ->
                      or_number_to_js Ojs.unit_to_js x2564) x2563)
        let (open_ :
          t -> initial_dimensions:TerminalDimensions.t or_undefined -> unit)
          =
          fun (x2568 : t) ->
            fun
              ~initial_dimensions:(x2566 : TerminalDimensions.t or_undefined)
              ->
              ignore
                (Ojs.call (t_to_js x2568) "open"
                   [|(or_undefined_to_js TerminalDimensions.t_to_js x2566)|])
        let (close : t -> unit) =
          fun (x2569 : t) -> ignore (Ojs.call (t_to_js x2569) "close" [||])
        let (handle_input : t -> data:string -> unit) =
          fun (x2571 : t) ->
            fun ~data:(x2570 : string) ->
              ignore
                (Ojs.call (t_to_js x2571) "handleInput"
                   [|(Ojs.string_to_js x2570)|])
        let (set_dimensions : t -> dimensions:TerminalDimensions.t -> unit) =
          fun (x2573 : t) ->
            fun ~dimensions:(x2572 : TerminalDimensions.t) ->
              ignore
                (Ojs.call (t_to_js x2573) "setDimensions"
                   [|(TerminalDimensions.t_to_js x2572)|])
      end
    module ExtensionTerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2575 : Ojs.t) -> x2575
        and t_to_js : t -> Ojs.t = fun (x2574 : Ojs.t) -> x2574
        let (name : t -> string) =
          fun (x2576 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2576) "name")
        let (set_name : t -> string -> unit) =
          fun (x2577 : t) ->
            fun (x2578 : string) ->
              Ojs.set_prop_ascii (t_to_js x2577) "name"
                (Ojs.string_to_js x2578)
        let (pty : t -> Pseudoterminal.t) =
          fun (x2579 : t) ->
            Pseudoterminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2579) "pty")
        let (set_pty : t -> Pseudoterminal.t -> unit) =
          fun (x2580 : t) ->
            fun (x2581 : Pseudoterminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2580) "pty"
                (Pseudoterminal.t_to_js x2581)
      end
    module Terminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2583 : Ojs.t) -> x2583
        and t_to_js : t -> Ojs.t = fun (x2582 : Ojs.t) -> x2582
        let (name : t -> string) =
          fun (x2584 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2584) "name")
        let (process_id : t -> int or_undefined Promise.t) =
          fun (x2585 : t) ->
            Promise.t_of_js
              (fun (x2586 : Ojs.t) -> or_undefined_of_js Ojs.int_of_js x2586)
              (Ojs.get_prop_ascii (t_to_js x2585) "processId")
        let (creation_options :
          t ->
            (ExtensionTerminalOptions.t, TerminalOptions.t) union2 Readonly.t)
          =
          fun (x2588 : t) ->
            Readonly.t_of_js
              (fun (x2589 : Ojs.t) ->
                 union2_of_js ExtensionTerminalOptions.t_of_js
                   TerminalOptions.t_of_js x2589)
              (Ojs.get_prop_ascii (t_to_js x2588) "creationOptions")
        let (exit_status : t -> TerminalExitStatus.t or_undefined) =
          fun (x2592 : t) ->
            or_undefined_of_js TerminalExitStatus.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2592) "exitStatus")
        let (send_text :
          t -> text:string -> ?add_new_line:bool -> unit -> unit) =
          fun (x2598 : t) ->
            fun ~text:(x2594 : string) ->
              fun ?add_new_line:(x2595 : bool option) ->
                fun () ->
                  ignore
                    (let x2599 = t_to_js x2598 in
                     Ojs.call (Ojs.get_prop_ascii x2599 "sendText") "apply"
                       [|x2599;((let x2596 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2596 "push"
                                      [|(Ojs.string_to_js x2594)|]);
                                 (match x2595 with
                                  | Some x2597 ->
                                      ignore
                                        (Ojs.call x2596 "push"
                                           [|(Ojs.bool_to_js x2597)|])
                                  | None -> ());
                                 x2596))|])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2603 : t) ->
            fun ?preserve_focus:(x2600 : bool option) ->
              fun () ->
                ignore
                  (let x2604 = t_to_js x2603 in
                   Ojs.call (Ojs.get_prop_ascii x2604 "show") "apply"
                     [|x2604;((let x2601 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2600 with
                                | Some x2602 ->
                                    ignore
                                      (Ojs.call x2601 "push"
                                         [|(Ojs.bool_to_js x2602)|])
                                | None -> ());
                               x2601))|])
        let (hide : t -> unit) =
          fun (x2605 : t) -> ignore (Ojs.call (t_to_js x2605) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2606 : t) -> ignore (Ojs.call (t_to_js x2606) "dispose" [||])
      end
    module TerminalLinkContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2608 : Ojs.t) -> x2608
        and t_to_js : t -> Ojs.t = fun (x2607 : Ojs.t) -> x2607
        let (line : t -> string) =
          fun (x2609 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2609) "line")
        let (set_line : t -> string -> unit) =
          fun (x2610 : t) ->
            fun (x2611 : string) ->
              Ojs.set_prop_ascii (t_to_js x2610) "line"
                (Ojs.string_to_js x2611)
        let (terminal : t -> Terminal.t) =
          fun (x2612 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2612) "terminal")
        let (set_terminal : t -> Terminal.t -> unit) =
          fun (x2613 : t) ->
            fun (x2614 : Terminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2613) "terminal"
                (Terminal.t_to_js x2614)
      end
    module TerminalLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2616 : Ojs.t) -> x2616
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2615 : Ojs.t) -> x2615
        let (provide_terminal_links :
          'T t ->
            context:TerminalLinkContext.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x2619 : 'T t) ->
            fun ~context:(x2617 : TerminalLinkContext.t) ->
              fun ~token:(x2618 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2621 : Ojs.t) -> Ojs.list_of_js Obj.magic x2621)
                  (Ojs.call (t_to_js Obj.magic x2619) "provideTerminalLinks"
                     [|(TerminalLinkContext.t_to_js x2617);(CancellationToken.t_to_js
                                                              x2618)|])
        let (handle_terminal_link : 'T t -> link:'T -> unit ProviderResult.t)
          =
          fun (x2624 : 'T t) ->
            fun ~link:(x2623 : 'T) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js Obj.magic x2624) "handleTerminalLink"
                   [|(Obj.magic x2623)|])
      end
    module TerminalLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2628 : Ojs.t) -> x2628
        and t_to_js : t -> Ojs.t = fun (x2627 : Ojs.t) -> x2627
        let (start_index : t -> int) =
          fun (x2629 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2629) "startIndex")
        let (set_start_index : t -> int -> unit) =
          fun (x2630 : t) ->
            fun (x2631 : int) ->
              Ojs.set_prop_ascii (t_to_js x2630) "startIndex"
                (Ojs.int_to_js x2631)
        let (length : t -> int) =
          fun (x2632 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2632) "length")
        let (set_length : t -> int -> unit) =
          fun (x2633 : t) ->
            fun (x2634 : int) ->
              Ojs.set_prop_ascii (t_to_js x2633) "length"
                (Ojs.int_to_js x2634)
        let (tooltip : t -> string) =
          fun (x2635 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2635) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2636 : t) ->
            fun (x2637 : string) ->
              Ojs.set_prop_ascii (t_to_js x2636) "tooltip"
                (Ojs.string_to_js x2637)
      end
    module FileDecoration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2639 : Ojs.t) -> x2639
        and t_to_js : t -> Ojs.t = fun (x2638 : Ojs.t) -> x2638
        let (badge : t -> string) =
          fun (x2640 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2640) "badge")
        let (set_badge : t -> string -> unit) =
          fun (x2641 : t) ->
            fun (x2642 : string) ->
              Ojs.set_prop_ascii (t_to_js x2641) "badge"
                (Ojs.string_to_js x2642)
        let (tooltip : t -> string) =
          fun (x2643 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2643) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2644 : t) ->
            fun (x2645 : string) ->
              Ojs.set_prop_ascii (t_to_js x2644) "tooltip"
                (Ojs.string_to_js x2645)
        let (color : t -> ThemeColor.t) =
          fun (x2646 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x2646) "color")
        let (set_color : t -> ThemeColor.t -> unit) =
          fun (x2647 : t) ->
            fun (x2648 : ThemeColor.t) ->
              Ojs.set_prop_ascii (t_to_js x2647) "color"
                (ThemeColor.t_to_js x2648)
        let (propagate : t -> bool) =
          fun (x2649 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2649) "propagate")
        let (set_propagate : t -> bool -> unit) =
          fun (x2650 : t) ->
            fun (x2651 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2650) "propagate"
                (Ojs.bool_to_js x2651)
        let (create :
          ?badge:string ->
            ?tooltip:string -> ?color:ThemeColor.t -> unit -> t)
          =
          fun ?badge:(x2652 : string option) ->
            fun ?tooltip:(x2653 : string option) ->
              fun ?color:(x2654 : ThemeColor.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FileDecoration")
                       (let x2655 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x2652 with
                         | Some x2658 ->
                             ignore
                               (Ojs.call x2655 "push"
                                  [|(Ojs.string_to_js x2658)|])
                         | None -> ());
                        (match x2653 with
                         | Some x2657 ->
                             ignore
                               (Ojs.call x2655 "push"
                                  [|(Ojs.string_to_js x2657)|])
                         | None -> ());
                        (match x2654 with
                         | Some x2656 ->
                             ignore
                               (Ojs.call x2655 "push"
                                  [|(ThemeColor.t_to_js x2656)|])
                         | None -> ());
                        x2655))
      end
    module FileDecorationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2660 : Ojs.t) -> x2660
        and t_to_js : t -> Ojs.t = fun (x2659 : Ojs.t) -> x2659
        let (on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t) =
          fun (x2661 : t) ->
            Event.t_of_js
              (fun (x2662 : Ojs.t) ->
                 or_undefined_of_js
                   (fun (x2663 : Ojs.t) ->
                      or_array_of_js Uri.t_of_js Uri.t_of_js x2663) x2662)
              (Ojs.get_prop_ascii (t_to_js x2661)
                 "onDidChangeFileDecorations")
        let (set_on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t -> unit) =
          fun (x2666 : t) ->
            fun (x2667 : (Uri.t, Uri.t) or_array or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2666) "onDidChangeFileDecorations"
                (Event.t_to_js
                   (fun (x2668 : (Uri.t, Uri.t) or_array or_undefined) ->
                      or_undefined_to_js
                        (fun (x2669 : (Uri.t, Uri.t) or_array) ->
                           or_array_to_js Uri.t_to_js Uri.t_to_js x2669)
                        x2668) x2667)
        let (provide_file_decoration :
          t ->
            uri:Uri.t ->
              token:CancellationToken.t -> FileDecoration.t ProviderResult.t)
          =
          fun (x2674 : t) ->
            fun ~uri:(x2672 : Uri.t) ->
              fun ~token:(x2673 : CancellationToken.t) ->
                ProviderResult.t_of_js FileDecoration.t_of_js
                  (Ojs.call (t_to_js x2674) "provideFileDecoration"
                     [|(Uri.t_to_js x2672);(CancellationToken.t_to_js x2673)|])
      end
    module ExtensionKind =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2677 : Ojs.t) ->
            let x2678 = x2677 in
            match Ojs.int_of_js x2678 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2676 : [ `Workspace ]) ->
            match x2676 with | `Workspace -> Ojs.int_to_js 2
      end
    module Extension =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2680 : Ojs.t) -> x2680
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2679 : Ojs.t) -> x2679
        let (id : 'T t -> string) =
          fun (x2681 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2681) "id")
        let (extension_uri : 'T t -> Uri.t) =
          fun (x2683 : 'T t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2683) "extensionUri")
        let (extension_path : 'T t -> string) =
          fun (x2685 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2685) "extensionPath")
        let (is_active : 'T t -> bool) =
          fun (x2687 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2687) "isActive")
        let (package_json : 'T t -> any) =
          fun (x2689 : 'T t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2689) "packageJSON")
        let (extension_kind : 'T t -> ExtensionKind.t) =
          fun (x2691 : 'T t) ->
            ExtensionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2691) "extensionKind")
        let (set_extension_kind : 'T t -> ExtensionKind.t -> unit) =
          fun (x2693 : 'T t) ->
            fun (x2694 : ExtensionKind.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x2693) "extensionKind"
                (ExtensionKind.t_to_js x2694)
        let (exports : 'T t -> 'T) =
          fun (x2696 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2696) "exports")
        let (activate : 'T t -> 'T Promise.t) =
          fun (x2698 : 'T t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call (t_to_js Obj.magic x2698) "activate" [||])
      end
    module ExtensionMode =
      struct
        type t = [ `Development  | `Test ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2702 : Ojs.t) ->
            let x2703 = x2702 in
            match Ojs.int_of_js x2703 with
            | 2 -> `Development
            | 3 -> `Test
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2701 : [ `Development  | `Test ]) ->
            match x2701 with
            | `Development -> Ojs.int_to_js 2
            | `Test -> Ojs.int_to_js 3
      end
    module Memento =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2705 : Ojs.t) -> x2705
        and t_to_js : t -> Ojs.t = fun (x2704 : Ojs.t) -> x2704
        let (get : t -> key:string -> 'T or_undefined) =
          fun (x2707 : t) ->
            fun ~key:(x2706 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2707) "get" [|(Ojs.string_to_js x2706)|])
        let (get' : t -> key:string -> default:'T -> 'T) =
          fun (x2711 : t) ->
            fun ~key:(x2709 : string) ->
              fun ~default:(x2710 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2711) "get"
                     [|(Ojs.string_to_js x2709);(Obj.magic x2710)|])
        let (update : t -> key:string -> value:any -> unit Promise.t) =
          fun (x2714 : t) ->
            fun ~key:(x2712 : string) ->
              fun ~value:(x2713 : any) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2714) "update"
                     [|(Ojs.string_to_js x2712);(any_to_js x2713)|])
      end
    module SecretStorageChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2717 : Ojs.t) -> x2717
        and t_to_js : t -> Ojs.t = fun (x2716 : Ojs.t) -> x2716
        let (key : t -> string) =
          fun (x2718 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2718) "key")
      end
    module SecretStorage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2720 : Ojs.t) -> x2720
        and t_to_js : t -> Ojs.t = fun (x2719 : Ojs.t) -> x2719
        let (get : t -> key:string -> string or_undefined Promise.t) =
          fun (x2722 : t) ->
            fun ~key:(x2721 : string) ->
              Promise.t_of_js
                (fun (x2723 : Ojs.t) ->
                   or_undefined_of_js Ojs.string_of_js x2723)
                (Ojs.call (t_to_js x2722) "get" [|(Ojs.string_to_js x2721)|])
        let (store : t -> key:string -> value:string -> unit Promise.t) =
          fun (x2727 : t) ->
            fun ~key:(x2725 : string) ->
              fun ~value:(x2726 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2727) "store"
                     [|(Ojs.string_to_js x2725);(Ojs.string_to_js x2726)|])
        let (delete : t -> key:string -> unit Promise.t) =
          fun (x2730 : t) ->
            fun ~key:(x2729 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x2730) "delete"
                   [|(Ojs.string_to_js x2729)|])
        let (on_did_change : t -> SecretStorageChangeEvent.t Event.t) =
          fun (x2732 : t) ->
            Event.t_of_js SecretStorageChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2732) "onDidChange")
        let (set_on_did_change :
          t -> SecretStorageChangeEvent.t Event.t -> unit) =
          fun (x2734 : t) ->
            fun (x2735 : SecretStorageChangeEvent.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2734) "onDidChange"
                (Event.t_to_js SecretStorageChangeEvent.t_to_js x2735)
      end
    module EnvironmentVariableMutatorType =
      struct
        type t = [ `Append  | `Prepend ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2738 : Ojs.t) ->
            let x2739 = x2738 in
            match Ojs.int_of_js x2739 with
            | 2 -> `Append
            | 3 -> `Prepend
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2737 : [ `Append  | `Prepend ]) ->
            match x2737 with
            | `Append -> Ojs.int_to_js 2
            | `Prepend -> Ojs.int_to_js 3
      end
    module EnvironmentVariableMutator =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2741 : Ojs.t) -> x2741
        and t_to_js : t -> Ojs.t = fun (x2740 : Ojs.t) -> x2740
        let (type_ : t -> EnvironmentVariableMutatorType.t) =
          fun (x2742 : t) ->
            EnvironmentVariableMutatorType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2742) "type")
        let (value : t -> string) =
          fun (x2743 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2743) "value")
      end
    module EnvironmentVariableCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2745 : Ojs.t) -> x2745
        and t_to_js : t -> Ojs.t = fun (x2744 : Ojs.t) -> x2744
        let (persistent : t -> bool) =
          fun (x2746 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2746) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x2747 : t) ->
            fun (x2748 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2747) "persistent"
                (Ojs.bool_to_js x2748)
        let (replace : t -> variable:string -> value:string -> unit) =
          fun (x2751 : t) ->
            fun ~variable:(x2749 : string) ->
              fun ~value:(x2750 : string) ->
                ignore
                  (Ojs.call (t_to_js x2751) "replace"
                     [|(Ojs.string_to_js x2749);(Ojs.string_to_js x2750)|])
        let (append : t -> variable:string -> value:string -> unit) =
          fun (x2754 : t) ->
            fun ~variable:(x2752 : string) ->
              fun ~value:(x2753 : string) ->
                ignore
                  (Ojs.call (t_to_js x2754) "append"
                     [|(Ojs.string_to_js x2752);(Ojs.string_to_js x2753)|])
        let (prepend : t -> variable:string -> value:string -> unit) =
          fun (x2757 : t) ->
            fun ~variable:(x2755 : string) ->
              fun ~value:(x2756 : string) ->
                ignore
                  (Ojs.call (t_to_js x2757) "prepend"
                     [|(Ojs.string_to_js x2755);(Ojs.string_to_js x2756)|])
        let (get :
          t -> variable:string -> EnvironmentVariableMutator.t or_undefined)
          =
          fun (x2759 : t) ->
            fun ~variable:(x2758 : string) ->
              or_undefined_of_js EnvironmentVariableMutator.t_of_js
                (Ojs.call (t_to_js x2759) "get" [|(Ojs.string_to_js x2758)|])
        let (for_each :
          t ->
            callback:(variable:string ->
                        mutator:EnvironmentVariableMutator.t ->
                          collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x2768 : t) ->
            fun
              ~callback:(x2761 :
                          variable:string ->
                            mutator:EnvironmentVariableMutator.t ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x2762 : any option) ->
                fun () ->
                  ignore
                    (let x2769 = t_to_js x2768 in
                     Ojs.call (Ojs.get_prop_ascii x2769 "forEach") "apply"
                       [|x2769;((let x2763 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2763 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x2765 : Ojs.t) ->
                                              fun (x2766 : Ojs.t) ->
                                                fun (x2767 : Ojs.t) ->
                                                  any_to_js
                                                    (x2761
                                                       ~variable:(Ojs.string_of_js
                                                                    x2765)
                                                       ~mutator:(EnvironmentVariableMutator.t_of_js
                                                                   x2766)
                                                       ~collection:(t_of_js
                                                                    x2767))))|]);
                                 (match x2762 with
                                  | Some x2764 ->
                                      ignore
                                        (Ojs.call x2763 "push"
                                           [|(any_to_js x2764)|])
                                  | None -> ());
                                 x2763))|])
        let (delete : t -> variable:string -> unit) =
          fun (x2771 : t) ->
            fun ~variable:(x2770 : string) ->
              ignore
                (Ojs.call (t_to_js x2771) "delete"
                   [|(Ojs.string_to_js x2770)|])
        let (clear : t -> unit) =
          fun (x2772 : t) -> ignore (Ojs.call (t_to_js x2772) "clear" [||])
      end
    module ExtensionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2774 : Ojs.t) -> x2774
        and t_to_js : t -> Ojs.t = fun (x2773 : Ojs.t) -> x2773
        module Subscription =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2776 : Ojs.t) -> x2776
            and t_to_js : t -> Ojs.t = fun (x2775 : Ojs.t) -> x2775
            let (dispose : t -> any) =
              fun (x2777 : t) ->
                any_of_js (Ojs.call (t_to_js x2777) "dispose" [||])
          end
        module GlobalState =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2779 : Ojs.t) -> x2779
            and t_to_js : t -> Ojs.t = fun (x2778 : Ojs.t) -> x2778
            let (set_keys_for_sync : t -> keys:string list -> unit) =
              fun (x2782 : t) ->
                fun ~keys:(x2780 : string list) ->
                  ignore
                    (Ojs.call (t_to_js x2782) "setKeysForSync"
                       [|(Ojs.list_to_js Ojs.string_to_js x2780)|])
          end
        let (subscriptions : t -> Subscription.t list) =
          fun (x2783 : t) ->
            Ojs.list_of_js Subscription.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2783) "subscriptions")
        let (workspace_state : t -> Memento.t) =
          fun (x2785 : t) ->
            Memento.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2785) "workspaceState")
        let (global_state : t -> (Memento.t, GlobalState.t) intersection2) =
          fun (x2786 : t) ->
            intersection2_of_js Memento.t_of_js GlobalState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2786) "globalState")
        let (secrets : t -> SecretStorage.t) =
          fun (x2789 : t) ->
            SecretStorage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2789) "secrets")
        let (extension_uri : t -> Uri.t) =
          fun (x2790 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2790) "extensionUri")
        let (extension_path : t -> string) =
          fun (x2791 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2791) "extensionPath")
        let (environment_variable_collection :
          t -> EnvironmentVariableCollection.t) =
          fun (x2792 : t) ->
            EnvironmentVariableCollection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2792)
                 "environmentVariableCollection")
        let (as_absolute_path : t -> relative_path:string -> string) =
          fun (x2794 : t) ->
            fun ~relative_path:(x2793 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x2794) "asAbsolutePath"
                   [|(Ojs.string_to_js x2793)|])
        let (storage_uri : t -> Uri.t or_undefined) =
          fun (x2795 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2795) "storageUri")
        let (storage_path : t -> string or_undefined) =
          fun (x2797 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2797) "storagePath")
        let (global_storage_uri : t -> Uri.t) =
          fun (x2799 : t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2799) "globalStorageUri")
        let (global_storage_path : t -> string) =
          fun (x2800 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2800) "globalStoragePath")
        let (log_uri : t -> Uri.t) =
          fun (x2801 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2801) "logUri")
        let (log_path : t -> string) =
          fun (x2802 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2802) "logPath")
        let (extension_mode : t -> ExtensionMode.t) =
          fun (x2803 : t) ->
            ExtensionMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2803) "extensionMode")
        let (extension : t -> any Extension.t) =
          fun (x2804 : t) ->
            Extension.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x2804) "extension")
        let subscribe t disposable =
          let subscriptions = Ojs.get_prop_ascii (t_to_js t) "subscriptions" in
          let (_ : Ojs.t) =
            Ojs.call subscriptions "push" [|(Disposable.t_to_js disposable)|] in
          ()
      end
    module ColorThemeKind =
      struct
        type t = [ `Dark  | `HighContrast ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2809 : Ojs.t) ->
            let x2810 = x2809 in
            match Ojs.int_of_js x2810 with
            | 2 -> `Dark
            | 3 -> `HighContrast
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2808 : [ `Dark  | `HighContrast ]) ->
            match x2808 with
            | `Dark -> Ojs.int_to_js 2
            | `HighContrast -> Ojs.int_to_js 3
      end
    module ColorTheme =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2812 : Ojs.t) -> x2812
        and t_to_js : t -> Ojs.t = fun (x2811 : Ojs.t) -> x2811
        let (kind : t -> ColorThemeKind.t) =
          fun (x2813 : t) ->
            ColorThemeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2813) "kind")
      end
    module TaskRevealKind =
      struct
        type t = [ `Silent  | `Never ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2815 : Ojs.t) ->
            let x2816 = x2815 in
            match Ojs.int_of_js x2816 with
            | 2 -> `Silent
            | 3 -> `Never
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2814 : [ `Silent  | `Never ]) ->
            match x2814 with
            | `Silent -> Ojs.int_to_js 2
            | `Never -> Ojs.int_to_js 3
      end
    module TaskPanelKind =
      struct
        type t = [ `Dedicated  | `New ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2818 : Ojs.t) ->
            let x2819 = x2818 in
            match Ojs.int_of_js x2819 with
            | 2 -> `Dedicated
            | 3 -> `New
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2817 : [ `Dedicated  | `New ]) ->
            match x2817 with
            | `Dedicated -> Ojs.int_to_js 2
            | `New -> Ojs.int_to_js 3
      end
    module TaskPresentationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2821 : Ojs.t) -> x2821
        and t_to_js : t -> Ojs.t = fun (x2820 : Ojs.t) -> x2820
        let (reveal : t -> TaskRevealKind.t) =
          fun (x2822 : t) ->
            TaskRevealKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2822) "reveal")
        let (set_reveal : t -> TaskRevealKind.t -> unit) =
          fun (x2823 : t) ->
            fun (x2824 : TaskRevealKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2823) "reveal"
                (TaskRevealKind.t_to_js x2824)
        let (echo : t -> bool) =
          fun (x2825 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2825) "echo")
        let (set_echo : t -> bool -> unit) =
          fun (x2826 : t) ->
            fun (x2827 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2826) "echo"
                (Ojs.bool_to_js x2827)
        let (focus : t -> bool) =
          fun (x2828 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2828) "focus")
        let (set_focus : t -> bool -> unit) =
          fun (x2829 : t) ->
            fun (x2830 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2829) "focus"
                (Ojs.bool_to_js x2830)
        let (panel : t -> TaskPanelKind.t) =
          fun (x2831 : t) ->
            TaskPanelKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2831) "panel")
        let (set_panel : t -> TaskPanelKind.t -> unit) =
          fun (x2832 : t) ->
            fun (x2833 : TaskPanelKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2832) "panel"
                (TaskPanelKind.t_to_js x2833)
        let (show_reuse_message : t -> bool) =
          fun (x2834 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2834) "showReuseMessage")
        let (set_show_reuse_message : t -> bool -> unit) =
          fun (x2835 : t) ->
            fun (x2836 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2835) "showReuseMessage"
                (Ojs.bool_to_js x2836)
        let (clear : t -> bool) =
          fun (x2837 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2837) "clear")
        let (set_clear : t -> bool -> unit) =
          fun (x2838 : t) ->
            fun (x2839 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2838) "clear"
                (Ojs.bool_to_js x2839)
      end
    module TaskGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2841 : Ojs.t) -> x2841
        and t_to_js : t -> Ojs.t = fun (x2840 : Ojs.t) -> x2840
        let (clean : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Clean")
        let (set_clean : t -> unit) =
          fun (x2842 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Clean" (t_to_js x2842)
        let (build : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Build")
        let (set_build : t -> unit) =
          fun (x2843 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Build" (t_to_js x2843)
        let (rebuild : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Rebuild")
        let (set_rebuild : t -> unit) =
          fun (x2844 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Rebuild" (t_to_js x2844)
        let (test : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Test")
        let (set_test : t -> unit) =
          fun (x2845 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Test" (t_to_js x2845)
        let (create : id:string -> label:string -> t) =
          fun ~id:(x2846 : string) ->
            fun ~label:(x2847 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                   [|(Ojs.string_to_js x2846);(Ojs.string_to_js x2847)|])
      end
    module TaskDefinition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2849 : Ojs.t) -> x2849
        and t_to_js : t -> Ojs.t = fun (x2848 : Ojs.t) -> x2848
        let (type_ : t -> string) =
          fun (x2850 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2850) "type")
        let (get : t -> string -> any) =
          fun (x2851 : t) ->
            fun (x2852 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2851) (Ojs.string_to_js x2852))
        let (set : t -> string -> any -> unit) =
          fun (x2853 : t) ->
            fun (x2854 : string) ->
              fun (x2855 : any) ->
                Ojs.set_prop (t_to_js x2853) (Ojs.string_to_js x2854)
                  (any_to_js x2855)
      end
    module ProcessExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2857 : Ojs.t) -> x2857
        and t_to_js : t -> Ojs.t = fun (x2856 : Ojs.t) -> x2856
        let (cwd : t -> string) =
          fun (x2858 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2858) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2859 : t) ->
            fun (x2860 : string) ->
              Ojs.set_prop_ascii (t_to_js x2859) "cwd"
                (Ojs.string_to_js x2860)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2862 : Ojs.t) -> x2862
            and t_to_js : t -> Ojs.t = fun (x2861 : Ojs.t) -> x2861
            let (get : t -> string -> string) =
              fun (x2863 : t) ->
                fun (x2864 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2863) (Ojs.string_to_js x2864))
            let (set : t -> string -> string -> unit) =
              fun (x2865 : t) ->
                fun (x2866 : string) ->
                  fun (x2867 : string) ->
                    Ojs.set_prop (t_to_js x2865) (Ojs.string_to_js x2866)
                      (Ojs.string_to_js x2867)
          end
        let (env : t -> Env.t) =
          fun (x2868 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2868) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2869 : t) ->
            fun (x2870 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2869) "env" (Env.t_to_js x2870)
      end
    module ProcessExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2872 : Ojs.t) -> x2872
        and t_to_js : t -> Ojs.t = fun (x2871 : Ojs.t) -> x2871
        let (create :
          process:string -> ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2873 : string) ->
            fun ?options:(x2874 : ProcessExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ProcessExecution")
                     (let x2875 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2875 "push" [|(Ojs.string_to_js x2873)|]);
                      (match x2874 with
                       | Some x2876 ->
                           ignore
                             (Ojs.call x2875 "push"
                                [|(ProcessExecutionOptions.t_to_js x2876)|])
                       | None -> ());
                      x2875))
        let (create' :
          process:string ->
            args:string list ->
              ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2877 : string) ->
            fun ~args:(x2878 : string list) ->
              fun ?options:(x2879 : ProcessExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ProcessExecution")
                       (let x2880 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2880 "push" [|(Ojs.string_to_js x2877)|]);
                        ignore
                          (Ojs.call x2880 "push"
                             [|(Ojs.list_to_js Ojs.string_to_js x2878)|]);
                        (match x2879 with
                         | Some x2881 ->
                             ignore
                               (Ojs.call x2880 "push"
                                  [|(ProcessExecutionOptions.t_to_js x2881)|])
                         | None -> ());
                        x2880))
        let (process : t -> string) =
          fun (x2883 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2883) "process")
        let (set_process : t -> string -> unit) =
          fun (x2884 : t) ->
            fun (x2885 : string) ->
              Ojs.set_prop_ascii (t_to_js x2884) "process"
                (Ojs.string_to_js x2885)
        let (args : t -> string list) =
          fun (x2886 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2886) "args")
        let (set_args : t -> string list -> unit) =
          fun (x2888 : t) ->
            fun (x2889 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2888) "args"
                (Ojs.list_to_js Ojs.string_to_js x2889)
        let (options : t -> ProcessExecutionOptions.t) =
          fun (x2891 : t) ->
            ProcessExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2891) "options")
        let (set_options : t -> ProcessExecutionOptions.t -> unit) =
          fun (x2892 : t) ->
            fun (x2893 : ProcessExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2892) "options"
                (ProcessExecutionOptions.t_to_js x2893)
      end
    module ShellQuotingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2895 : Ojs.t) -> x2895
        and t_to_js : t -> Ojs.t = fun (x2894 : Ojs.t) -> x2894
        module Escape =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2897 : Ojs.t) -> x2897
            and t_to_js : t -> Ojs.t = fun (x2896 : Ojs.t) -> x2896
            let (escape_char : t -> string) =
              fun (x2898 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2898) "escapeChar")
            let (set_escape_char : t -> string -> unit) =
              fun (x2899 : t) ->
                fun (x2900 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2899) "escapeChar"
                    (Ojs.string_to_js x2900)
            let (chars_to_escape : t -> string) =
              fun (x2901 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2901) "charsToEscape")
            let (set_chars_to_escape : t -> string -> unit) =
              fun (x2902 : t) ->
                fun (x2903 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2902) "charsToEscape"
                    (Ojs.string_to_js x2903)
          end
        let (escape : t -> Escape.t or_string) =
          fun (x2904 : t) ->
            or_string_of_js Escape.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2904) "escape")
        let (set_escape : t -> Escape.t or_string -> unit) =
          fun (x2906 : t) ->
            fun (x2907 : Escape.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2906) "escape"
                (or_string_to_js Escape.t_to_js x2907)
        let (strong : t -> string) =
          fun (x2909 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2909) "strong")
        let (set_strong : t -> string -> unit) =
          fun (x2910 : t) ->
            fun (x2911 : string) ->
              Ojs.set_prop_ascii (t_to_js x2910) "strong"
                (Ojs.string_to_js x2911)
        let (weak : t -> string) =
          fun (x2912 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2912) "weak")
        let (set_weak : t -> string -> unit) =
          fun (x2913 : t) ->
            fun (x2914 : string) ->
              Ojs.set_prop_ascii (t_to_js x2913) "weak"
                (Ojs.string_to_js x2914)
      end
    module ShellExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2916 : Ojs.t) -> x2916
        and t_to_js : t -> Ojs.t = fun (x2915 : Ojs.t) -> x2915
        let (executable : t -> string) =
          fun (x2917 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2917) "executable")
        let (set_executable : t -> string -> unit) =
          fun (x2918 : t) ->
            fun (x2919 : string) ->
              Ojs.set_prop_ascii (t_to_js x2918) "executable"
                (Ojs.string_to_js x2919)
        let (shell_args : t -> string list) =
          fun (x2920 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2920) "shellArgs")
        let (set_shell_args : t -> string list -> unit) =
          fun (x2922 : t) ->
            fun (x2923 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2922) "shellArgs"
                (Ojs.list_to_js Ojs.string_to_js x2923)
        let (shell_quoting : t -> ShellQuotingOptions.t) =
          fun (x2925 : t) ->
            ShellQuotingOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2925) "shellQuoting")
        let (set_shell_quoting : t -> ShellQuotingOptions.t -> unit) =
          fun (x2926 : t) ->
            fun (x2927 : ShellQuotingOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2926) "shellQuoting"
                (ShellQuotingOptions.t_to_js x2927)
        let (cwd : t -> string) =
          fun (x2928 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2928) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2929 : t) ->
            fun (x2930 : string) ->
              Ojs.set_prop_ascii (t_to_js x2929) "cwd"
                (Ojs.string_to_js x2930)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2932 : Ojs.t) -> x2932
            and t_to_js : t -> Ojs.t = fun (x2931 : Ojs.t) -> x2931
            let (get : t -> string -> string) =
              fun (x2933 : t) ->
                fun (x2934 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2933) (Ojs.string_to_js x2934))
            let (set : t -> string -> string -> unit) =
              fun (x2935 : t) ->
                fun (x2936 : string) ->
                  fun (x2937 : string) ->
                    Ojs.set_prop (t_to_js x2935) (Ojs.string_to_js x2936)
                      (Ojs.string_to_js x2937)
          end
        let (env : t -> Env.t) =
          fun (x2938 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2938) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2939 : t) ->
            fun (x2940 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2939) "env" (Env.t_to_js x2940)
      end
    module ShellQuoting =
      struct
        type t = [ `Strong  | `Weak ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2942 : Ojs.t) ->
            let x2943 = x2942 in
            match Ojs.int_of_js x2943 with
            | 2 -> `Strong
            | 3 -> `Weak
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2941 : [ `Strong  | `Weak ]) ->
            match x2941 with
            | `Strong -> Ojs.int_to_js 2
            | `Weak -> Ojs.int_to_js 3
      end
    module ShellQuotedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2945 : Ojs.t) -> x2945
        and t_to_js : t -> Ojs.t = fun (x2944 : Ojs.t) -> x2944
        let (value : t -> string) =
          fun (x2946 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2946) "value")
        let (set_value : t -> string -> unit) =
          fun (x2947 : t) ->
            fun (x2948 : string) ->
              Ojs.set_prop_ascii (t_to_js x2947) "value"
                (Ojs.string_to_js x2948)
        let (quoting : t -> ShellQuoting.t) =
          fun (x2949 : t) ->
            ShellQuoting.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2949) "quoting")
        let (set_quoting : t -> ShellQuoting.t -> unit) =
          fun (x2950 : t) ->
            fun (x2951 : ShellQuoting.t) ->
              Ojs.set_prop_ascii (t_to_js x2950) "quoting"
                (ShellQuoting.t_to_js x2951)
      end
    module ShellExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2953 : Ojs.t) -> x2953
        and t_to_js : t -> Ojs.t = fun (x2952 : Ojs.t) -> x2952
        let (create :
          command_line:string ->
            ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command_line:(x2954 : string) ->
            fun ?options:(x2955 : ShellExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ShellExecution")
                     (let x2956 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2956 "push" [|(Ojs.string_to_js x2954)|]);
                      (match x2955 with
                       | Some x2957 ->
                           ignore
                             (Ojs.call x2956 "push"
                                [|(ShellExecutionOptions.t_to_js x2957)|])
                       | None -> ());
                      x2956))
        let (create' :
          command:ShellQuotedString.t or_string ->
            args:ShellQuotedString.t or_string list ->
              ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command:(x2958 : ShellQuotedString.t or_string) ->
            fun ~args:(x2959 : ShellQuotedString.t or_string list) ->
              fun ?options:(x2960 : ShellExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ShellExecution")
                       (let x2961 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2961 "push"
                             [|(or_string_to_js ShellQuotedString.t_to_js
                                  x2958)|]);
                        ignore
                          (Ojs.call x2961 "push"
                             [|(Ojs.list_to_js
                                  (fun
                                     (x2963 : ShellQuotedString.t or_string)
                                     ->
                                     or_string_to_js
                                       ShellQuotedString.t_to_js x2963) x2959)|]);
                        (match x2960 with
                         | Some x2962 ->
                             ignore
                               (Ojs.call x2961 "push"
                                  [|(ShellExecutionOptions.t_to_js x2962)|])
                         | None -> ());
                        x2961))
        let (command_line : t -> string or_undefined) =
          fun (x2966 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2966) "commandLine")
        let (set_command_line : t -> string or_undefined -> unit) =
          fun (x2968 : t) ->
            fun (x2969 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2968) "commandLine"
                (or_undefined_to_js Ojs.string_to_js x2969)
        let (command : t -> ShellQuotedString.t or_string) =
          fun (x2971 : t) ->
            or_string_of_js ShellQuotedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2971) "command")
        let (set_command : t -> ShellQuotedString.t or_string -> unit) =
          fun (x2973 : t) ->
            fun (x2974 : ShellQuotedString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2973) "command"
                (or_string_to_js ShellQuotedString.t_to_js x2974)
        let (args : t -> ShellQuotedString.t or_string list) =
          fun (x2976 : t) ->
            Ojs.list_of_js
              (fun (x2977 : Ojs.t) ->
                 or_string_of_js ShellQuotedString.t_of_js x2977)
              (Ojs.get_prop_ascii (t_to_js x2976) "args")
        let (set_args : t -> ShellQuotedString.t or_string list -> unit) =
          fun (x2979 : t) ->
            fun (x2980 : ShellQuotedString.t or_string list) ->
              Ojs.set_prop_ascii (t_to_js x2979) "args"
                (Ojs.list_to_js
                   (fun (x2981 : ShellQuotedString.t or_string) ->
                      or_string_to_js ShellQuotedString.t_to_js x2981) x2980)
        let (options : t -> ShellExecutionOptions.t) =
          fun (x2983 : t) ->
            ShellExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2983) "options")
        let (set_options : t -> ShellExecutionOptions.t -> unit) =
          fun (x2984 : t) ->
            fun (x2985 : ShellExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2984) "options"
                (ShellExecutionOptions.t_to_js x2985)
      end
    module CustomExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2987 : Ojs.t) -> x2987
        and t_to_js : t -> Ojs.t = fun (x2986 : Ojs.t) -> x2986
        let (create :
          callback:(resolvedDefinition:TaskDefinition.t ->
                      Pseudoterminal.t Promise.t)
            -> t)
          =
          fun
            ~callback:(x2988 :
                        resolvedDefinition:TaskDefinition.t ->
                          Pseudoterminal.t Promise.t)
            ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CustomExecution")
                 [|(Ojs.fun_to_js 1
                      (fun (x2989 : Ojs.t) ->
                         Promise.t_to_js Pseudoterminal.t_to_js
                           (x2988
                              ~resolvedDefinition:(TaskDefinition.t_of_js
                                                     x2989))))|])
      end
    module TaskScope =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2992 : Ojs.t) ->
            let x2993 = x2992 in
            match Ojs.int_of_js x2993 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2991 : [ `Workspace ]) ->
            match x2991 with | `Workspace -> Ojs.int_to_js 2
      end
    module RunOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2995 : Ojs.t) -> x2995
        and t_to_js : t -> Ojs.t = fun (x2994 : Ojs.t) -> x2994
        let (reevaluate_on_rerun : t -> bool) =
          fun (x2996 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2996) "reevaluateOnRerun")
        let (set_reevaluate_on_rerun : t -> bool -> unit) =
          fun (x2997 : t) ->
            fun (x2998 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2997) "reevaluateOnRerun"
                (Ojs.bool_to_js x2998)
      end
    module Task =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3000 : Ojs.t) -> x3000
        and t_to_js : t -> Ojs.t = fun (x2999 : Ojs.t) -> x2999
        let (create :
          task_definition:TaskDefinition.t ->
            scope:(WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum ->
              name:string ->
                source:string ->
                  ?execution:(CustomExecution.t, ProcessExecution.t,
                    ShellExecution.t) union3 ->
                    ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x3001 : TaskDefinition.t) ->
            fun
              ~scope:(x3002 :
                       (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum)
              ->
              fun ~name:(x3003 : string) ->
                fun ~source:(x3004 : string) ->
                  fun
                    ?execution:(x3005 :
                                 (CustomExecution.t, ProcessExecution.t,
                                   ShellExecution.t) union3 option)
                    ->
                    fun
                      ?problem_matchers:(x3006 :
                                          string list or_string option)
                      ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii
                                   (Ojs.get_prop_ascii Ojs.global
                                      "__LIB__VSCODE__IMPORTS") "vscode")
                                "Task")
                             (let x3007 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x3007 "push"
                                   [|(TaskDefinition.t_to_js x3001)|]);
                              ignore
                                (Ojs.call x3007 "push"
                                   [|(or_enum_to_js WorkspaceFolder.t_to_js
                                        (fun
                                           (x3016 :
                                             [ `Global  | `Workspace ])
                                           ->
                                           match x3016 with
                                           | `Global ->
                                               Ojs.string_to_js "Global"
                                           | `Workspace ->
                                               Ojs.string_to_js "Workspace")
                                        x3002)|]);
                              ignore
                                (Ojs.call x3007 "push"
                                   [|(Ojs.string_to_js x3003)|]);
                              ignore
                                (Ojs.call x3007 "push"
                                   [|(Ojs.string_to_js x3004)|]);
                              (match x3005 with
                               | Some x3011 ->
                                   ignore
                                     (Ojs.call x3007 "push"
                                        [|(union3_to_js
                                             CustomExecution.t_to_js
                                             ProcessExecution.t_to_js
                                             ShellExecution.t_to_js x3011)|])
                               | None -> ());
                              (match x3006 with
                               | Some x3008 ->
                                   ignore
                                     (Ojs.call x3007 "push"
                                        [|(or_string_to_js
                                             (fun (x3009 : string list) ->
                                                Ojs.list_to_js
                                                  Ojs.string_to_js x3009)
                                             x3008)|])
                               | None -> ());
                              x3007))
        let (create' :
          task_definition:TaskDefinition.t ->
            name:string ->
              source:string ->
                ?execution:(ProcessExecution.t, ShellExecution.t) union2 ->
                  ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x3017 : TaskDefinition.t) ->
            fun ~name:(x3018 : string) ->
              fun ~source:(x3019 : string) ->
                fun
                  ?execution:(x3020 :
                               (ProcessExecution.t, ShellExecution.t) union2
                                 option)
                  ->
                  fun
                    ?problem_matchers:(x3021 : string list or_string option)
                    ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "Task")
                           (let x3022 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x3022 "push"
                                 [|(TaskDefinition.t_to_js x3017)|]);
                            ignore
                              (Ojs.call x3022 "push"
                                 [|(Ojs.string_to_js x3018)|]);
                            ignore
                              (Ojs.call x3022 "push"
                                 [|(Ojs.string_to_js x3019)|]);
                            (match x3020 with
                             | Some x3026 ->
                                 ignore
                                   (Ojs.call x3022 "push"
                                      [|(union2_to_js
                                           ProcessExecution.t_to_js
                                           ShellExecution.t_to_js x3026)|])
                             | None -> ());
                            (match x3021 with
                             | Some x3023 ->
                                 ignore
                                   (Ojs.call x3022 "push"
                                      [|(or_string_to_js
                                           (fun (x3024 : string list) ->
                                              Ojs.list_to_js Ojs.string_to_js
                                                x3024) x3023)|])
                             | None -> ());
                            x3022))
        let (definition : t -> TaskDefinition.t) =
          fun (x3029 : t) ->
            TaskDefinition.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3029) "definition")
        let (set_definition : t -> TaskDefinition.t -> unit) =
          fun (x3030 : t) ->
            fun (x3031 : TaskDefinition.t) ->
              Ojs.set_prop_ascii (t_to_js x3030) "definition"
                (TaskDefinition.t_to_js x3031)
        let (scope :
          t -> (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum) =
          fun (x3032 : t) ->
            or_enum_of_js WorkspaceFolder.t_of_js
              (fun (x3034 : Ojs.t) ->
                 let x3035 = x3034 in
                 match Ojs.int_of_js x3035 with
                 | 1 -> `Global
                 | 2 -> `Workspace
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x3032) "scope")
        let (name : t -> string) =
          fun (x3036 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3036) "name")
        let (set_name : t -> string -> unit) =
          fun (x3037 : t) ->
            fun (x3038 : string) ->
              Ojs.set_prop_ascii (t_to_js x3037) "name"
                (Ojs.string_to_js x3038)
        let (detail : t -> string) =
          fun (x3039 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3039) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x3040 : t) ->
            fun (x3041 : string) ->
              Ojs.set_prop_ascii (t_to_js x3040) "detail"
                (Ojs.string_to_js x3041)
        let (execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3)
          =
          fun (x3042 : t) ->
            union3_of_js CustomExecution.t_of_js ProcessExecution.t_of_js
              ShellExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3042) "execution")
        let (set_execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3
              -> unit)
          =
          fun (x3046 : t) ->
            fun
              (x3047 :
                (CustomExecution.t, ProcessExecution.t, ShellExecution.t)
                  union3)
              ->
              Ojs.set_prop_ascii (t_to_js x3046) "execution"
                (union3_to_js CustomExecution.t_to_js
                   ProcessExecution.t_to_js ShellExecution.t_to_js x3047)
        let (is_background : t -> bool) =
          fun (x3051 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3051) "isBackground")
        let (set_is_background : t -> bool -> unit) =
          fun (x3052 : t) ->
            fun (x3053 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3052) "isBackground"
                (Ojs.bool_to_js x3053)
        let (source : t -> string) =
          fun (x3054 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3054) "source")
        let (set_source : t -> string -> unit) =
          fun (x3055 : t) ->
            fun (x3056 : string) ->
              Ojs.set_prop_ascii (t_to_js x3055) "source"
                (Ojs.string_to_js x3056)
        let (group : t -> TaskGroup.t) =
          fun (x3057 : t) ->
            TaskGroup.t_of_js (Ojs.get_prop_ascii (t_to_js x3057) "group")
        let (set_group : t -> TaskGroup.t -> unit) =
          fun (x3058 : t) ->
            fun (x3059 : TaskGroup.t) ->
              Ojs.set_prop_ascii (t_to_js x3058) "group"
                (TaskGroup.t_to_js x3059)
        let (presentation_options : t -> TaskPresentationOptions.t) =
          fun (x3060 : t) ->
            TaskPresentationOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3060) "presentationOptions")
        let (set_presentation_options :
          t -> TaskPresentationOptions.t -> unit) =
          fun (x3061 : t) ->
            fun (x3062 : TaskPresentationOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3061) "presentationOptions"
                (TaskPresentationOptions.t_to_js x3062)
        let (problem_matchers : t -> string list) =
          fun (x3063 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3063) "problemMatchers")
        let (set_problem_matchers : t -> string list -> unit) =
          fun (x3065 : t) ->
            fun (x3066 : string list) ->
              Ojs.set_prop_ascii (t_to_js x3065) "problemMatchers"
                (Ojs.list_to_js Ojs.string_to_js x3066)
        let (run_options : t -> RunOptions.t) =
          fun (x3068 : t) ->
            RunOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3068) "runOptions")
        let (set_run_options : t -> RunOptions.t -> unit) =
          fun (x3069 : t) ->
            fun (x3070 : RunOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3069) "runOptions"
                (RunOptions.t_to_js x3070)
      end
    module TaskProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3072 : Ojs.t) -> x3072
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3071 : Ojs.t) -> x3071
        let (provide_tasks :
          'T t -> token:CancellationToken.t -> 'T list ProviderResult.t) =
          fun (x3074 : 'T t) ->
            fun ~token:(x3073 : CancellationToken.t) ->
              ProviderResult.t_of_js
                (fun (x3076 : Ojs.t) -> Ojs.list_of_js Obj.magic x3076)
                (Ojs.call (t_to_js Obj.magic x3074) "provideTasks"
                   [|(CancellationToken.t_to_js x3073)|])
        let (resolve_task :
          'T t -> task:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x3080 : 'T t) ->
            fun ~task:(x3078 : 'T) ->
              fun ~token:(x3079 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x3080) "resolveTask"
                     [|(Obj.magic x3078);(CancellationToken.t_to_js x3079)|])
      end
    module TaskExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3084 : Ojs.t) -> x3084
        and t_to_js : t -> Ojs.t = fun (x3083 : Ojs.t) -> x3083
        let (task : t -> Task.t) =
          fun (x3085 : t) ->
            Task.t_of_js (Ojs.get_prop_ascii (t_to_js x3085) "task")
        let (set_task : t -> Task.t -> unit) =
          fun (x3086 : t) ->
            fun (x3087 : Task.t) ->
              Ojs.set_prop_ascii (t_to_js x3086) "task" (Task.t_to_js x3087)
        let (terminate : t -> unit) =
          fun (x3088 : t) ->
            ignore (Ojs.call (t_to_js x3088) "terminate" [||])
      end
    module TaskStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3090 : Ojs.t) -> x3090
        and t_to_js : t -> Ojs.t = fun (x3089 : Ojs.t) -> x3089
        let (execution : t -> TaskExecution.t) =
          fun (x3091 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3091) "execution")
      end
    module TaskEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3093 : Ojs.t) -> x3093
        and t_to_js : t -> Ojs.t = fun (x3092 : Ojs.t) -> x3092
        let (execution : t -> TaskExecution.t) =
          fun (x3094 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3094) "execution")
      end
    module TaskProcessStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3096 : Ojs.t) -> x3096
        and t_to_js : t -> Ojs.t = fun (x3095 : Ojs.t) -> x3095
        let (execution : t -> TaskExecution.t) =
          fun (x3097 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3097) "execution")
        let (process_id : t -> int) =
          fun (x3098 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3098) "processId")
      end
    module TaskProcessEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3100 : Ojs.t) -> x3100
        and t_to_js : t -> Ojs.t = fun (x3099 : Ojs.t) -> x3099
        let (execution : t -> TaskExecution.t) =
          fun (x3101 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3101) "execution")
        let (exit_code : t -> int or_undefined) =
          fun (x3102 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3102) "exitCode")
      end
    module TaskFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3105 : Ojs.t) -> x3105
        and t_to_js : t -> Ojs.t = fun (x3104 : Ojs.t) -> x3104
        let (version : t -> string) =
          fun (x3106 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3106) "version")
        let (set_version : t -> string -> unit) =
          fun (x3107 : t) ->
            fun (x3108 : string) ->
              Ojs.set_prop_ascii (t_to_js x3107) "version"
                (Ojs.string_to_js x3108)
        let (type_ : t -> string) =
          fun (x3109 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3109) "type")
        let (set_type : t -> string -> unit) =
          fun (x3110 : t) ->
            fun (x3111 : string) ->
              Ojs.set_prop_ascii (t_to_js x3110) "type"
                (Ojs.string_to_js x3111)
      end
    module Tasks =
      struct
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x3112 : string) ->
            fun ~provider:(x3113 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x3112);(TaskProvider.t_to_js
                                                 Task.t_to_js x3113)|])
        let (fetch_tasks :
          ?filter:TaskFilter.t -> unit -> Task.t list Promise.t) =
          fun ?filter:(x3115 : TaskFilter.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3119 : Ojs.t) -> Ojs.list_of_js Task.t_of_js x3119)
                (let x3118 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "tasks" in
                 Ojs.call (Ojs.get_prop_ascii x3118 "fetchTasks") "apply"
                   [|x3118;((let x3116 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3115 with
                              | Some x3117 ->
                                  ignore
                                    (Ojs.call x3116 "push"
                                       [|(TaskFilter.t_to_js x3117)|])
                              | None -> ());
                             x3116))|])
        let (execute_task : task:Task.t -> TaskExecution.t Promise.t) =
          fun ~task:(x3121 : Task.t) ->
            Promise.t_of_js TaskExecution.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                 "executeTask" [|(Task.t_to_js x3121)|])
        let (task_executions : TaskExecution.t list) =
          Ojs.list_of_js TaskExecution.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "taskExecutions")
        let (on_did_start_task : TaskStartEvent.t Event.t) =
          Event.t_of_js TaskStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTask")
        let (on_did_end_task : TaskEndEvent.t Event.t) =
          Event.t_of_js TaskEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTask")
        let (on_did_start_task_process : TaskProcessStartEvent.t Event.t) =
          Event.t_of_js TaskProcessStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTaskProcess")
        let (on_did_end_task_process : TaskProcessEndEvent.t Event.t) =
          Event.t_of_js TaskProcessEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTaskProcess")
      end
    module FileType =
      struct
        type t = [ `File  | `Directory  | `SymbolicLink ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3129 : Ojs.t) ->
            let x3130 = x3129 in
            match Ojs.int_of_js x3130 with
            | 1 -> `File
            | 2 -> `Directory
            | 64 -> `SymbolicLink
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3128 : [ `File  | `Directory  | `SymbolicLink ]) ->
            match x3128 with
            | `File -> Ojs.int_to_js 1
            | `Directory -> Ojs.int_to_js 2
            | `SymbolicLink -> Ojs.int_to_js 64
      end
    module FileStat =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3132 : Ojs.t) -> x3132
        and t_to_js : t -> Ojs.t = fun (x3131 : Ojs.t) -> x3131
        let (type_ : t -> FileType.t) =
          fun (x3133 : t) ->
            FileType.t_of_js (Ojs.get_prop_ascii (t_to_js x3133) "type")
        let (set_type : t -> FileType.t -> unit) =
          fun (x3134 : t) ->
            fun (x3135 : FileType.t) ->
              Ojs.set_prop_ascii (t_to_js x3134) "type"
                (FileType.t_to_js x3135)
        let (ctime : t -> int) =
          fun (x3136 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3136) "ctime")
        let (set_ctime : t -> int -> unit) =
          fun (x3137 : t) ->
            fun (x3138 : int) ->
              Ojs.set_prop_ascii (t_to_js x3137) "ctime"
                (Ojs.int_to_js x3138)
        let (mtime : t -> int) =
          fun (x3139 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3139) "mtime")
        let (set_mtime : t -> int -> unit) =
          fun (x3140 : t) ->
            fun (x3141 : int) ->
              Ojs.set_prop_ascii (t_to_js x3140) "mtime"
                (Ojs.int_to_js x3141)
        let (size : t -> int) =
          fun (x3142 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3142) "size")
        let (set_size : t -> int -> unit) =
          fun (x3143 : t) ->
            fun (x3144 : int) ->
              Ojs.set_prop_ascii (t_to_js x3143) "size" (Ojs.int_to_js x3144)
      end
    module FileSystemError =
      struct
        include struct include Error end
        let (file_not_found : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3145 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3149 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3149 "FileNotFound") "apply"
                   [|x3149;((let x3146 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3145 with
                              | Some x3147 ->
                                  ignore
                                    (Ojs.call x3146 "push"
                                       [|(or_string_to_js Uri.t_to_js x3147)|])
                              | None -> ());
                             x3146))|])
        let (file_exists : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3150 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3154 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3154 "FileExists") "apply"
                   [|x3154;((let x3151 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3150 with
                              | Some x3152 ->
                                  ignore
                                    (Ojs.call x3151 "push"
                                       [|(or_string_to_js Uri.t_to_js x3152)|])
                              | None -> ());
                             x3151))|])
        let (file_not_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3155 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3159 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3159 "FileNotADirectory")
                   "apply"
                   [|x3159;((let x3156 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3155 with
                              | Some x3157 ->
                                  ignore
                                    (Ojs.call x3156 "push"
                                       [|(or_string_to_js Uri.t_to_js x3157)|])
                              | None -> ());
                             x3156))|])
        let (file_is_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3160 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3164 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3164 "FileIsADirectory")
                   "apply"
                   [|x3164;((let x3161 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3160 with
                              | Some x3162 ->
                                  ignore
                                    (Ojs.call x3161 "push"
                                       [|(or_string_to_js Uri.t_to_js x3162)|])
                              | None -> ());
                             x3161))|])
        let (no_permissions : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3165 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3169 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3169 "NoPermissions") "apply"
                   [|x3169;((let x3166 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3165 with
                              | Some x3167 ->
                                  ignore
                                    (Ojs.call x3166 "push"
                                       [|(or_string_to_js Uri.t_to_js x3167)|])
                              | None -> ());
                             x3166))|])
        let (unavailable : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3170 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3174 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3174 "Unavailable") "apply"
                   [|x3174;((let x3171 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3170 with
                              | Some x3172 ->
                                  ignore
                                    (Ojs.call x3171 "push"
                                       [|(or_string_to_js Uri.t_to_js x3172)|])
                              | None -> ());
                             x3171))|])
        let (create : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3175 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "FileSystemError")
                   (let x3176 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3175 with
                     | Some x3177 ->
                         ignore
                           (Ojs.call x3176 "push"
                              [|(or_string_to_js Uri.t_to_js x3177)|])
                     | None -> ());
                    x3176))
        let (code : t -> string) =
          fun (x3179 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3179) "code")
      end
    module FileChangeType =
      struct
        type t = [ `Created  | `Deleted ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3181 : Ojs.t) ->
            let x3182 = x3181 in
            match Ojs.int_of_js x3182 with
            | 2 -> `Created
            | 3 -> `Deleted
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3180 : [ `Created  | `Deleted ]) ->
            match x3180 with
            | `Created -> Ojs.int_to_js 2
            | `Deleted -> Ojs.int_to_js 3
      end
    module FileChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3184 : Ojs.t) -> x3184
        and t_to_js : t -> Ojs.t = fun (x3183 : Ojs.t) -> x3183
        let (type_ : t -> FileChangeType.t) =
          fun (x3185 : t) ->
            FileChangeType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3185) "type")
        let (uri : t -> Uri.t) =
          fun (x3186 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3186) "uri")
      end
    module FileSystemProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3188 : Ojs.t) -> x3188
        and t_to_js : t -> Ojs.t = fun (x3187 : Ojs.t) -> x3187
        let (on_did_change_file : t -> FileChangeEvent.t list Event.t) =
          fun (x3189 : t) ->
            Event.t_of_js
              (fun (x3190 : Ojs.t) ->
                 Ojs.list_of_js FileChangeEvent.t_of_js x3190)
              (Ojs.get_prop_ascii (t_to_js x3189) "onDidChangeFile")
        module WatchOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3193 : Ojs.t) -> x3193
            and t_to_js : t -> Ojs.t = fun (x3192 : Ojs.t) -> x3192
            let (recursive : t -> bool) =
              fun (x3194 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3194) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3195 : t) ->
                fun (x3196 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3195) "recursive"
                    (Ojs.bool_to_js x3196)
            let (excludes : t -> string list) =
              fun (x3197 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3197) "excludes")
            let (set_excludes : t -> string list -> unit) =
              fun (x3199 : t) ->
                fun (x3200 : string list) ->
                  Ojs.set_prop_ascii (t_to_js x3199) "excludes"
                    (Ojs.list_to_js Ojs.string_to_js x3200)
          end
        let (watch :
          t -> uri:Uri.t -> options:WatchOptions.t -> Disposable.t) =
          fun (x3204 : t) ->
            fun ~uri:(x3202 : Uri.t) ->
              fun ~options:(x3203 : WatchOptions.t) ->
                Disposable.t_of_js
                  (Ojs.call (t_to_js x3204) "watch"
                     [|(Uri.t_to_js x3202);(WatchOptions.t_to_js x3203)|])
        let (stat :
          t -> uri:Uri.t -> (FileStat.t, FileStat.t Promise.t) union2) =
          fun (x3206 : t) ->
            fun ~uri:(x3205 : Uri.t) ->
              union2_of_js FileStat.t_of_js
                (fun (x3208 : Ojs.t) ->
                   Promise.t_of_js FileStat.t_of_js x3208)
                (Ojs.call (t_to_js x3206) "stat" [|(Uri.t_to_js x3205)|])
        let (read_directory :
          t ->
            uri:Uri.t ->
              ((string * FileType.t) list Promise.t, (string * FileType.t))
                or_array)
          =
          fun (x3211 : t) ->
            fun ~uri:(x3210 : Uri.t) ->
              or_array_of_js
                (fun (x3212 : Ojs.t) ->
                   Promise.t_of_js
                     (fun (x3213 : Ojs.t) ->
                        Ojs.list_of_js
                          (fun (x3214 : Ojs.t) ->
                             let x3215 = x3214 in
                             ((Ojs.string_of_js (Ojs.array_get x3215 0)),
                               (FileType.t_of_js (Ojs.array_get x3215 1))))
                          x3213) x3212)
                (fun (x3216 : Ojs.t) ->
                   let x3217 = x3216 in
                   ((Ojs.string_of_js (Ojs.array_get x3217 0)),
                     (FileType.t_of_js (Ojs.array_get x3217 1))))
                (Ojs.call (t_to_js x3211) "readDirectory"
                   [|(Uri.t_to_js x3210)|])
        let (create_directory :
          t -> uri:Uri.t -> (unit, unit Promise.t) union2) =
          fun (x3219 : t) ->
            fun ~uri:(x3218 : Uri.t) ->
              union2_of_js Ojs.unit_of_js
                (fun (x3221 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3221)
                (Ojs.call (t_to_js x3219) "createDirectory"
                   [|(Uri.t_to_js x3218)|])
        let (read_file :
          t -> uri:Uri.t -> (Uint8Array.t, Uint8Array.t Promise.t) union2) =
          fun (x3224 : t) ->
            fun ~uri:(x3223 : Uri.t) ->
              union2_of_js Uint8Array.t_of_js
                (fun (x3226 : Ojs.t) ->
                   Promise.t_of_js Uint8Array.t_of_js x3226)
                (Ojs.call (t_to_js x3224) "readFile" [|(Uri.t_to_js x3223)|])
        module WriteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3229 : Ojs.t) -> x3229
            and t_to_js : t -> Ojs.t = fun (x3228 : Ojs.t) -> x3228
            let (create : t -> bool) =
              fun (x3230 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3230) "create")
            let (set_create : t -> bool -> unit) =
              fun (x3231 : t) ->
                fun (x3232 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3231) "create"
                    (Ojs.bool_to_js x3232)
            let (overwrite : t -> bool) =
              fun (x3233 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3233) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3234 : t) ->
                fun (x3235 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3234) "overwrite"
                    (Ojs.bool_to_js x3235)
          end
        let (write_file :
          t ->
            uri:Uri.t ->
              content:Uint8Array.t ->
                options:WriteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3239 : t) ->
            fun ~uri:(x3236 : Uri.t) ->
              fun ~content:(x3237 : Uint8Array.t) ->
                fun ~options:(x3238 : WriteFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3241 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3241)
                    (Ojs.call (t_to_js x3239) "writeFile"
                       [|(Uri.t_to_js x3236);(Uint8Array.t_to_js x3237);(
                         WriteFileOptions.t_to_js x3238)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3244 : Ojs.t) -> x3244
            and t_to_js : t -> Ojs.t = fun (x3243 : Ojs.t) -> x3243
            let (recursive : t -> bool) =
              fun (x3245 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3245) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3246 : t) ->
                fun (x3247 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3246) "recursive"
                    (Ojs.bool_to_js x3247)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              options:DeleteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3250 : t) ->
            fun ~uri:(x3248 : Uri.t) ->
              fun ~options:(x3249 : DeleteFileOptions.t) ->
                union2_of_js Ojs.unit_of_js
                  (fun (x3252 : Ojs.t) ->
                     Promise.t_of_js Ojs.unit_of_js x3252)
                  (Ojs.call (t_to_js x3250) "delete"
                     [|(Uri.t_to_js x3248);(DeleteFileOptions.t_to_js x3249)|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3255 : Ojs.t) -> x3255
            and t_to_js : t -> Ojs.t = fun (x3254 : Ojs.t) -> x3254
            let (overwrite : t -> bool) =
              fun (x3256 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3256) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3257 : t) ->
                fun (x3258 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3257) "overwrite"
                    (Ojs.bool_to_js x3258)
          end
        let (rename :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3262 : t) ->
            fun ~old_uri:(x3259 : Uri.t) ->
              fun ~new_uri:(x3260 : Uri.t) ->
                fun ~options:(x3261 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3264 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3264)
                    (Ojs.call (t_to_js x3262) "rename"
                       [|(Uri.t_to_js x3259);(Uri.t_to_js x3260);(RenameFileOptions.t_to_js
                                                                    x3261)|])
        let (copy :
          t ->
            source:Uri.t ->
              destination:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3269 : t) ->
            fun ~source:(x3266 : Uri.t) ->
              fun ~destination:(x3267 : Uri.t) ->
                fun ~options:(x3268 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3271 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3271)
                    (Ojs.call (t_to_js x3269) "copy"
                       [|(Uri.t_to_js x3266);(Uri.t_to_js x3267);(RenameFileOptions.t_to_js
                                                                    x3268)|])
      end
    module FileSystem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3274 : Ojs.t) -> x3274
        and t_to_js : t -> Ojs.t = fun (x3273 : Ojs.t) -> x3273
        let (stat : t -> uri:Uri.t -> FileStat.t Promise.t) =
          fun (x3276 : t) ->
            fun ~uri:(x3275 : Uri.t) ->
              Promise.t_of_js FileStat.t_of_js
                (Ojs.call (t_to_js x3276) "stat" [|(Uri.t_to_js x3275)|])
        let (read_directory :
          t -> uri:Uri.t -> (string * FileType.t) list Promise.t) =
          fun (x3279 : t) ->
            fun ~uri:(x3278 : Uri.t) ->
              Promise.t_of_js
                (fun (x3280 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x3281 : Ojs.t) ->
                        let x3282 = x3281 in
                        ((Ojs.string_of_js (Ojs.array_get x3282 0)),
                          (FileType.t_of_js (Ojs.array_get x3282 1)))) x3280)
                (Ojs.call (t_to_js x3279) "readDirectory"
                   [|(Uri.t_to_js x3278)|])
        let (create_directory : t -> uri:Uri.t -> unit Promise.t) =
          fun (x3284 : t) ->
            fun ~uri:(x3283 : Uri.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3284) "createDirectory"
                   [|(Uri.t_to_js x3283)|])
        let (read_file : t -> uri:Uri.t -> Uint8Array.t Promise.t) =
          fun (x3287 : t) ->
            fun ~uri:(x3286 : Uri.t) ->
              Promise.t_of_js Uint8Array.t_of_js
                (Ojs.call (t_to_js x3287) "readFile" [|(Uri.t_to_js x3286)|])
        let (write_file :
          t -> uri:Uri.t -> content:Uint8Array.t -> unit Promise.t) =
          fun (x3291 : t) ->
            fun ~uri:(x3289 : Uri.t) ->
              fun ~content:(x3290 : Uint8Array.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x3291) "writeFile"
                     [|(Uri.t_to_js x3289);(Uint8Array.t_to_js x3290)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3294 : Ojs.t) -> x3294
            and t_to_js : t -> Ojs.t = fun (x3293 : Ojs.t) -> x3293
            let (recursive : t -> bool) =
              fun (x3295 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3295) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3296 : t) ->
                fun (x3297 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3296) "recursive"
                    (Ojs.bool_to_js x3297)
            let (use_trash : t -> bool) =
              fun (x3298 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3298) "useTrash")
            let (set_use_trash : t -> bool -> unit) =
              fun (x3299 : t) ->
                fun (x3300 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3299) "useTrash"
                    (Ojs.bool_to_js x3300)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3305 : t) ->
            fun ~uri:(x3301 : Uri.t) ->
              fun ?options:(x3302 : DeleteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x3306 = t_to_js x3305 in
                     Ojs.call (Ojs.get_prop_ascii x3306 "delete") "apply"
                       [|x3306;((let x3303 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3303 "push"
                                      [|(Uri.t_to_js x3301)|]);
                                 (match x3302 with
                                  | Some x3304 ->
                                      ignore
                                        (Ojs.call x3303 "push"
                                           [|(DeleteFileOptions.t_to_js x3304)|])
                                  | None -> ());
                                 x3303))|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3309 : Ojs.t) -> x3309
            and t_to_js : t -> Ojs.t = fun (x3308 : Ojs.t) -> x3308
            let (overwrite : t -> bool) =
              fun (x3310 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3310) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3311 : t) ->
                fun (x3312 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3311) "overwrite"
                    (Ojs.bool_to_js x3312)
          end
        let (rename :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3318 : t) ->
            fun ~source:(x3313 : Uri.t) ->
              fun ~target:(x3314 : Uri.t) ->
                fun ?options:(x3315 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3319 = t_to_js x3318 in
                       Ojs.call (Ojs.get_prop_ascii x3319 "rename") "apply"
                         [|x3319;((let x3316 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3316 "push"
                                        [|(Uri.t_to_js x3313)|]);
                                   ignore
                                     (Ojs.call x3316 "push"
                                        [|(Uri.t_to_js x3314)|]);
                                   (match x3315 with
                                    | Some x3317 ->
                                        ignore
                                          (Ojs.call x3316 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3317)|])
                                    | None -> ());
                                   x3316))|])
        let (copy :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3326 : t) ->
            fun ~source:(x3321 : Uri.t) ->
              fun ~target:(x3322 : Uri.t) ->
                fun ?options:(x3323 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3327 = t_to_js x3326 in
                       Ojs.call (Ojs.get_prop_ascii x3327 "copy") "apply"
                         [|x3327;((let x3324 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3324 "push"
                                        [|(Uri.t_to_js x3321)|]);
                                   ignore
                                     (Ojs.call x3324 "push"
                                        [|(Uri.t_to_js x3322)|]);
                                   (match x3323 with
                                    | Some x3325 ->
                                        ignore
                                          (Ojs.call x3324 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3325)|])
                                    | None -> ());
                                   x3324))|])
        let (is_writable_file_system :
          t -> scheme:string -> bool or_undefined) =
          fun (x3330 : t) ->
            fun ~scheme:(x3329 : string) ->
              or_undefined_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3330) "isWritableFileSystem"
                   [|(Ojs.string_to_js x3329)|])
      end
    module WebviewPortMapping =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3333 : Ojs.t) -> x3333
        and t_to_js : t -> Ojs.t = fun (x3332 : Ojs.t) -> x3332
        let (webview_port : t -> int) =
          fun (x3334 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3334) "webviewPort")
        let (extension_host_port : t -> int) =
          fun (x3335 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3335) "extensionHostPort")
      end
    module WebviewOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3337 : Ojs.t) -> x3337
        and t_to_js : t -> Ojs.t = fun (x3336 : Ojs.t) -> x3336
        let (enable_scripts : t -> bool) =
          fun (x3338 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3338) "enableScripts")
        let (enable_command_uris : t -> bool) =
          fun (x3339 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3339) "enableCommandUris")
        let (local_resource_roots : t -> Uri.t list) =
          fun (x3340 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3340) "localResourceRoots")
        let (port_mapping : t -> WebviewPortMapping.t list) =
          fun (x3342 : t) ->
            Ojs.list_of_js WebviewPortMapping.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3342) "portMapping")
      end
    module Webview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3345 : Ojs.t) -> x3345
        and t_to_js : t -> Ojs.t = fun (x3344 : Ojs.t) -> x3344
        let (options : t -> WebviewOptions.t) =
          fun (x3346 : t) ->
            WebviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3346) "options")
        let (set_options : t -> WebviewOptions.t -> unit) =
          fun (x3347 : t) ->
            fun (x3348 : WebviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3347) "options"
                (WebviewOptions.t_to_js x3348)
        let (html : t -> string) =
          fun (x3349 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3349) "html")
        let (set_html : t -> string -> unit) =
          fun (x3350 : t) ->
            fun (x3351 : string) ->
              Ojs.set_prop_ascii (t_to_js x3350) "html"
                (Ojs.string_to_js x3351)
        let (on_did_receive_message : t -> any Event.t) =
          fun (x3352 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x3352) "onDidReceiveMessage")
        let (post_message : t -> message:any -> bool Promise.t) =
          fun (x3355 : t) ->
            fun ~message:(x3354 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3355) "postMessage" [|(any_to_js x3354)|])
        let (as_webview_uri : t -> local_resource:Uri.t -> Uri.t) =
          fun (x3358 : t) ->
            fun ~local_resource:(x3357 : Uri.t) ->
              Uri.t_of_js
                (Ojs.call (t_to_js x3358) "asWebviewUri"
                   [|(Uri.t_to_js x3357)|])
        let (csp_source : t -> string) =
          fun (x3359 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3359) "cspSource")
      end
    module WebviewPanelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3361 : Ojs.t) -> x3361
        and t_to_js : t -> Ojs.t = fun (x3360 : Ojs.t) -> x3360
        let (enable_find_widget : t -> bool) =
          fun (x3362 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3362) "enableFindWidget")
        let (retain_context_when_hidden : t -> bool) =
          fun (x3363 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3363) "retainContextWhenHidden")
      end
    module WebviewPanel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3365 : Ojs.t) -> x3365
        and t_to_js : t -> Ojs.t = fun (x3364 : Ojs.t) -> x3364
        let (view_type : t -> string) =
          fun (x3366 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3366) "viewType")
        let (title : t -> string) =
          fun (x3367 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3367) "title")
        let (set_title : t -> string -> unit) =
          fun (x3368 : t) ->
            fun (x3369 : string) ->
              Ojs.set_prop_ascii (t_to_js x3368) "title"
                (Ojs.string_to_js x3369)
        let (icon_path : t -> (Uri.t, IconPath.t) union2) =
          fun (x3370 : t) ->
            union2_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3370) "iconPath")
        let (set_icon_path : t -> (Uri.t, IconPath.t) union2 -> unit) =
          fun (x3373 : t) ->
            fun (x3374 : (Uri.t, IconPath.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x3373) "iconPath"
                (union2_to_js Uri.t_to_js IconPath.t_to_js x3374)
        let (webview : t -> Webview.t) =
          fun (x3377 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3377) "webview")
        let (options : t -> WebviewPanelOptions.t) =
          fun (x3378 : t) ->
            WebviewPanelOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3378) "options")
        let (view_column : t -> ViewColumn.t) =
          fun (x3379 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3379) "viewColumn")
        let (active : t -> bool) =
          fun (x3380 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3380) "active")
        let (visible : t -> bool) =
          fun (x3381 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3381) "visible")
        module OnDidChangeViewStateEvent =
          struct
            type webview_panel = t
            let rec webview_panel_of_js : Ojs.t -> webview_panel =
              fun (x3383 : Ojs.t) -> t_of_js x3383
            and webview_panel_to_js : webview_panel -> Ojs.t =
              fun (x3382 : t) -> t_to_js x3382
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3385 : Ojs.t) -> x3385
            and t_to_js : t -> Ojs.t = fun (x3384 : Ojs.t) -> x3384
            let (webview_panel : t -> webview_panel) =
              fun (x3386 : t) ->
                webview_panel_of_js
                  (Ojs.get_prop_ascii (t_to_js x3386) "webviewPanel")
          end
        let (on_did_change_view_state :
          t -> OnDidChangeViewStateEvent.t Event.t) =
          fun (x3387 : t) ->
            Event.t_of_js OnDidChangeViewStateEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3387) "onDidChangeViewState")
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3389 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3389) "onDidDispose")
        let (reveal :
          t ->
            ?view_column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x3396 : t) ->
            fun ?view_column:(x3391 : ViewColumn.t option) ->
              fun ?preserve_focus:(x3392 : bool option) ->
                fun () ->
                  ignore
                    (let x3397 = t_to_js x3396 in
                     Ojs.call (Ojs.get_prop_ascii x3397 "reveal") "apply"
                       [|x3397;((let x3393 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x3391 with
                                  | Some x3395 ->
                                      ignore
                                        (Ojs.call x3393 "push"
                                           [|(ViewColumn.t_to_js x3395)|])
                                  | None -> ());
                                 (match x3392 with
                                  | Some x3394 ->
                                      ignore
                                        (Ojs.call x3393 "push"
                                           [|(Ojs.bool_to_js x3394)|])
                                  | None -> ());
                                 x3393))|])
        let (dispose : t -> any) =
          fun (x3398 : t) ->
            any_of_js (Ojs.call (t_to_js x3398) "dispose" [||])
      end
    module WebviewPanelSerializer =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3400 : Ojs.t) -> x3400
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3399 : Ojs.t) -> x3399
        let (deserialize_webview_panel :
          'T t -> webview_panel:WebviewPanel.t -> state:'T -> unit Promise.t)
          =
          fun (x3403 : 'T t) ->
            fun ~webview_panel:(x3401 : WebviewPanel.t) ->
              fun ~state:(x3402 : 'T) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3403)
                     "deserializeWebviewPanel"
                     [|(WebviewPanel.t_to_js x3401);(Obj.magic x3402)|])
      end
    module WebviewView =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3407 : Ojs.t) -> x3407
        and t_to_js : t -> Ojs.t = fun (x3406 : Ojs.t) -> x3406
        let (view_type : t -> string) =
          fun (x3408 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3408) "viewType")
        let (webview : t -> Webview.t) =
          fun (x3409 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3409) "webview")
        let (title : t -> string) =
          fun (x3410 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3410) "title")
        let (set_title : t -> string -> unit) =
          fun (x3411 : t) ->
            fun (x3412 : string) ->
              Ojs.set_prop_ascii (t_to_js x3411) "title"
                (Ojs.string_to_js x3412)
        let (description : t -> string) =
          fun (x3413 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3413) "description")
        let (set_description : t -> string -> unit) =
          fun (x3414 : t) ->
            fun (x3415 : string) ->
              Ojs.set_prop_ascii (t_to_js x3414) "description"
                (Ojs.string_to_js x3415)
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3416 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3416) "onDidDispose")
        let (visible : t -> bool) =
          fun (x3418 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3418) "visible")
        let (on_did_change_visibility : t -> unit Event.t) =
          fun (x3419 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3419) "onDidChangeVisibility")
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x3424 : t) ->
            fun ?preserve_focus:(x3421 : bool option) ->
              fun () ->
                ignore
                  (let x3425 = t_to_js x3424 in
                   Ojs.call (Ojs.get_prop_ascii x3425 "show") "apply"
                     [|x3425;((let x3422 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3421 with
                                | Some x3423 ->
                                    ignore
                                      (Ojs.call x3422 "push"
                                         [|(Ojs.bool_to_js x3423)|])
                                | None -> ());
                               x3422))|])
      end
    module WebviewViewResolveContext =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3427 : Ojs.t) -> x3427
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3426 : Ojs.t) -> x3426
        let (state : 'T t -> 'T or_undefined) =
          fun (x3428 : 'T t) ->
            or_undefined_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3428) "state")
      end
    module WebviewViewProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3432 : Ojs.t) -> x3432
        and t_to_js : t -> Ojs.t = fun (x3431 : Ojs.t) -> x3431
        let (resolve_webview_view :
          t ->
            webview_view:WebviewView.t ->
              context:unknown WebviewViewResolveContext.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3437 : t) ->
            fun ~webview_view:(x3433 : WebviewView.t) ->
              fun ~context:(x3434 : unknown WebviewViewResolveContext.t) ->
                fun ~token:(x3436 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3439 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3439)
                    (Ojs.call (t_to_js x3437) "resolveWebviewView"
                       [|(WebviewView.t_to_js x3433);(WebviewViewResolveContext.t_to_js
                                                        unknown_to_js x3434);(
                         CancellationToken.t_to_js x3436)|])
      end
    module CustomTextEditorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3442 : Ojs.t) -> x3442
        and t_to_js : t -> Ojs.t = fun (x3441 : Ojs.t) -> x3441
        let (resolve_custom_text_editor :
          t ->
            document:TextDocument.t ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3446 : t) ->
            fun ~document:(x3443 : TextDocument.t) ->
              fun ~webview_panel:(x3444 : WebviewPanel.t) ->
                fun ~token:(x3445 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3448 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3448)
                    (Ojs.call (t_to_js x3446) "resolveCustomTextEditor"
                       [|(TextDocument.t_to_js x3443);(WebviewPanel.t_to_js
                                                         x3444);(CancellationToken.t_to_js
                                                                   x3445)|])
      end
    module CustomDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3451 : Ojs.t) -> x3451
        and t_to_js : t -> Ojs.t = fun (x3450 : Ojs.t) -> x3450
        let (uri : t -> Uri.t) =
          fun (x3452 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3452) "uri")
        let (dispose : t -> unit) =
          fun (x3453 : t) -> ignore (Ojs.call (t_to_js x3453) "dispose" [||])
      end
    module CustomDocumentEditEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3455 : Ojs.t) -> x3455
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3454 : Ojs.t) -> x3454
        let (document : 'T t -> 'T) =
          fun (x3456 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3456) "document")
        let (undo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3458 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3461 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3461)
              (Ojs.call (t_to_js Obj.magic x3458) "undo" [||])
        let (redo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3463 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3466 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3466)
              (Ojs.call (t_to_js Obj.magic x3463) "redo" [||])
        let (label : 'T t -> string) =
          fun (x3468 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3468) "label")
      end
    module CustomDocumentContentChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3471 : Ojs.t) -> x3471
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3470 : Ojs.t) -> x3470
        let (document : 'T t -> 'T) =
          fun (x3472 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3472) "document")
      end
    module CustomDocumentBackup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3475 : Ojs.t) -> x3475
        and t_to_js : t -> Ojs.t = fun (x3474 : Ojs.t) -> x3474
        let (id : t -> string) =
          fun (x3476 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3476) "id")
        let (delete : t -> unit) =
          fun (x3477 : t) -> ignore (Ojs.call (t_to_js x3477) "delete" [||])
      end
    module CustomDocumentBackupContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3479 : Ojs.t) -> x3479
        and t_to_js : t -> Ojs.t = fun (x3478 : Ojs.t) -> x3478
        let (destination : t -> Uri.t) =
          fun (x3480 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3480) "destination")
      end
    module CustomDocumentOpenContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3482 : Ojs.t) -> x3482
        and t_to_js : t -> Ojs.t = fun (x3481 : Ojs.t) -> x3481
        let (backup_id : t -> string) =
          fun (x3483 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3483) "backupId")
        let (untitled_document_data : t -> Uint8Array.t) =
          fun (x3484 : t) ->
            Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3484) "untitledDocumentData")
      end
    module CustomReadonlyEditorProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3486 : Ojs.t) -> x3486
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3485 : Ojs.t) -> x3485
        let (open_custom_document :
          'T t ->
            uri:Uri.t ->
              open_context:CustomDocumentOpenContext.t ->
                token:CancellationToken.t -> ('T, 'T Promise.t) union2)
          =
          fun (x3490 : 'T t) ->
            fun ~uri:(x3487 : Uri.t) ->
              fun ~open_context:(x3488 : CustomDocumentOpenContext.t) ->
                fun ~token:(x3489 : CancellationToken.t) ->
                  union2_of_js Obj.magic
                    (fun (x3493 : Ojs.t) -> Promise.t_of_js Obj.magic x3493)
                    (Ojs.call (t_to_js Obj.magic x3490) "openCustomDocument"
                       [|(Uri.t_to_js x3487);(CustomDocumentOpenContext.t_to_js
                                                x3488);(CancellationToken.t_to_js
                                                          x3489)|])
        let (resolve_custom_editor :
          'T t ->
            document:'T ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3498 : 'T t) ->
            fun ~document:(x3495 : 'T) ->
              fun ~webview_panel:(x3496 : WebviewPanel.t) ->
                fun ~token:(x3497 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3501 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3501)
                    (Ojs.call (t_to_js Obj.magic x3498) "resolveCustomEditor"
                       [|(Obj.magic x3495);(WebviewPanel.t_to_js x3496);(
                         CancellationToken.t_to_js x3497)|])
      end
    module CustomEditorProvider =
      struct
        include struct include CustomReadonlyEditorProvider end
        let (on_did_change_custom_document :
          'T t ->
            ('T CustomDocumentContentChangeEvent.t Event.t,
              'T CustomDocumentEditEvent.t Event.t) union2)
          =
          fun (x3503 : 'T t) ->
            union2_of_js
              (fun (x3505 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3506 : Ojs.t) ->
                      CustomDocumentContentChangeEvent.t_of_js Obj.magic
                        x3506) x3505)
              (fun (x3508 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3509 : Ojs.t) ->
                      CustomDocumentEditEvent.t_of_js Obj.magic x3509) x3508)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3503)
                 "onDidChangeCustomDocument")
        let (save_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3513 : 'T t) ->
            fun ~document:(x3511 : 'T) ->
              fun ~cancellation:(x3512 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3513) "saveCustomDocument"
                     [|(Obj.magic x3511);(CancellationToken.t_to_js x3512)|])
        let (save_custom_document_as :
          'T t ->
            document:'T ->
              destination:Uri.t ->
                cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3519 : 'T t) ->
            fun ~document:(x3516 : 'T) ->
              fun ~destination:(x3517 : Uri.t) ->
                fun ~cancellation:(x3518 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js Obj.magic x3519)
                       "saveCustomDocumentAs"
                       [|(Obj.magic x3516);(Uri.t_to_js x3517);(CancellationToken.t_to_js
                                                                  x3518)|])
        let (revert_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3524 : 'T t) ->
            fun ~document:(x3522 : 'T) ->
              fun ~cancellation:(x3523 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3524) "revertCustomDocument"
                     [|(Obj.magic x3522);(CancellationToken.t_to_js x3523)|])
        let (backup_custom_document :
          'T t ->
            document:'T ->
              context:CustomDocumentBackupContext.t ->
                cancellation:CancellationToken.t ->
                  CustomDocumentBackup.t Promise.t)
          =
          fun (x3530 : 'T t) ->
            fun ~document:(x3527 : 'T) ->
              fun ~context:(x3528 : CustomDocumentBackupContext.t) ->
                fun ~cancellation:(x3529 : CancellationToken.t) ->
                  Promise.t_of_js CustomDocumentBackup.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3530)
                       "backupCustomDocument"
                       [|(Obj.magic x3527);(CustomDocumentBackupContext.t_to_js
                                              x3528);(CancellationToken.t_to_js
                                                        x3529)|])
        include struct include CustomReadonlyEditorProvider end
      end
    module Clipboard =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3534 : Ojs.t) -> x3534
        and t_to_js : t -> Ojs.t = fun (x3533 : Ojs.t) -> x3533
        let (read_text : t -> string Promise.t) =
          fun (x3535 : t) ->
            Promise.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x3535) "readText" [||])
        let (write_text : t -> value:string -> unit Promise.t) =
          fun (x3538 : t) ->
            fun ~value:(x3537 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3538) "writeText"
                   [|(Ojs.string_to_js x3537)|])
      end
    module UIKind =
      struct
        type t = [ `Desktop  | `Web ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3541 : Ojs.t) ->
            let x3542 = x3541 in
            match Ojs.int_of_js x3542 with
            | 1 -> `Desktop
            | 2 -> `Web
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3540 : [ `Desktop  | `Web ]) ->
            match x3540 with
            | `Desktop -> Ojs.int_to_js 1
            | `Web -> Ojs.int_to_js 2
      end
    module Env =
      struct
        let (app_name : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appName")
        let (app_root : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appRoot")
        let (uri_scheme : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uriScheme")
        let (language : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "language")
        let (clipboard : Clipboard.t) =
          Clipboard.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "clipboard")
        let (machine_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "machineId")
        let (session_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "sessionId")
        let (is_new_app_install : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isNewAppInstall")
        let (is_telemetry_enabled : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isTelemetryEnabled")
        let (on_did_change_telemetry_enabled : bool Event.t) =
          Event.t_of_js Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "onDidChangeTelemetryEnabled")
        let (remote_name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "remoteName")
        let (shell : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "shell")
        let (ui_kind : UIKind.t) =
          UIKind.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uiKind")
        let (open_external : target:Uri.t -> bool Promise.t) =
          fun ~target:(x3545 : Uri.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "openExternal" [|(Uri.t_to_js x3545)|])
        let (as_external_uri : target:Uri.t -> Uri.t Promise.t) =
          fun ~target:(x3547 : Uri.t) ->
            Promise.t_of_js Uri.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "asExternalUri" [|(Uri.t_to_js x3547)|])
      end
    module Commands =
      struct
        let (register_command : string -> (any list -> 'a) -> Disposable.t) =
          fun (x3549 : string) ->
            fun (x3550 : any list -> 'a) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerCommand"
                   [|(Ojs.string_to_js x3549);(Ojs.fun_to_js_args
                                                 (fun (x3551 : _) ->
                                                    Obj.magic
                                                      (x3550
                                                         (Ojs.list_of_js_from
                                                            any_of_js x3551 0))))|])
        let (register_text_editor_command :
          string ->
            (textEditor:TextEditor.t ->
               edit:TextEditorEdit.t -> args:any list -> unit)
              -> Disposable.t)
          =
          fun (x3553 : string) ->
            fun
              (x3554 :
                textEditor:TextEditor.t ->
                  edit:TextEditorEdit.t -> args:any list -> unit)
              ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerTextEditorCommand"
                   [|(Ojs.string_to_js x3553);(Ojs.fun_to_js_args
                                                 (fun (x3555 : _) ->
                                                    x3554
                                                      ~textEditor:(TextEditor.t_of_js
                                                                    (Ojs.array_get
                                                                    x3555 0))
                                                      ~edit:(TextEditorEdit.t_of_js
                                                               (Ojs.array_get
                                                                  x3555 1))
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js
                                                               x3555 2)))|])
        let (execute_command :
          string -> any list -> 'T or_undefined Promise.t) =
          fun (x3557 : string) ->
            fun (x3558 : any list) ->
              Promise.t_of_js
                (fun (x3562 : Ojs.t) -> or_undefined_of_js Obj.magic x3562)
                (let x3561 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3561 "executeCommand") "apply"
                   [|x3561;((let x3559 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3559 "push"
                                  [|(Ojs.string_to_js x3557)|]);
                             List.iter
                               (fun (x3560 : any) ->
                                  ignore
                                    (Ojs.call x3559 "push"
                                       [|(any_to_js x3560)|])) x3558;
                             x3559))|])
        let (get_commands :
          ?filter_internal:bool -> unit -> string list Promise.t) =
          fun ?filter_internal:(x3564 : bool option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3568 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3568)
                (let x3567 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3567 "getCommands") "apply"
                   [|x3567;((let x3565 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3564 with
                              | Some x3566 ->
                                  ignore
                                    (Ojs.call x3565 "push"
                                       [|(Ojs.bool_to_js x3566)|])
                              | None -> ());
                             x3565))|])
      end
    module WindowState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3571 : Ojs.t) -> x3571
        and t_to_js : t -> Ojs.t = fun (x3570 : Ojs.t) -> x3570
        let (focused : t -> bool) =
          fun (x3572 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3572) "focused")
      end
    module UriHandler =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3574 : Ojs.t) -> x3574
        and t_to_js : t -> Ojs.t = fun (x3573 : Ojs.t) -> x3573
        let (handle_uri : t -> uri:Uri.t -> unit ProviderResult.t) =
          fun (x3576 : t) ->
            fun ~uri:(x3575 : Uri.t) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3576) "handleUri" [|(Uri.t_to_js x3575)|])
      end
    module QuickInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3579 : Ojs.t) -> x3579
        and t_to_js : t -> Ojs.t = fun (x3578 : Ojs.t) -> x3578
        let (title : t -> string or_undefined) =
          fun (x3580 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3580) "title")
        let (set_title : t -> string or_undefined -> unit) =
          fun (x3582 : t) ->
            fun (x3583 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3582) "title"
                (or_undefined_to_js Ojs.string_to_js x3583)
        let (step : t -> int or_undefined) =
          fun (x3585 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3585) "step")
        let (set_step : t -> int or_undefined -> unit) =
          fun (x3587 : t) ->
            fun (x3588 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3587) "step"
                (or_undefined_to_js Ojs.int_to_js x3588)
        let (total_steps : t -> int or_undefined) =
          fun (x3590 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3590) "totalSteps")
        let (set_total_steps : t -> int or_undefined -> unit) =
          fun (x3592 : t) ->
            fun (x3593 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3592) "totalSteps"
                (or_undefined_to_js Ojs.int_to_js x3593)
        let (enabled : t -> bool) =
          fun (x3595 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3595) "enabled")
        let (set_enabled : t -> bool -> unit) =
          fun (x3596 : t) ->
            fun (x3597 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3596) "enabled"
                (Ojs.bool_to_js x3597)
        let (busy : t -> bool) =
          fun (x3598 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3598) "busy")
        let (set_busy : t -> bool -> unit) =
          fun (x3599 : t) ->
            fun (x3600 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3599) "busy"
                (Ojs.bool_to_js x3600)
        let (ignore_focus_out : t -> bool) =
          fun (x3601 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3601) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x3602 : t) ->
            fun (x3603 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3602) "ignoreFocusOut"
                (Ojs.bool_to_js x3603)
        let (show : t -> unit) =
          fun (x3604 : t) -> ignore (Ojs.call (t_to_js x3604) "show" [||])
        let (hide : t -> unit) =
          fun (x3605 : t) -> ignore (Ojs.call (t_to_js x3605) "hide" [||])
        let (on_did_hide : t -> unit Event.t) =
          fun (x3606 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3606) "onDidHide")
        let (set_on_did_hide : t -> unit Event.t -> unit) =
          fun (x3608 : t) ->
            fun (x3609 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x3608) "onDidHide"
                (Event.t_to_js Ojs.unit_to_js x3609)
        let (dispose : t -> unit) =
          fun (x3611 : t) -> ignore (Ojs.call (t_to_js x3611) "dispose" [||])
      end
    module QuickInputButton =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3613 : Ojs.t) -> x3613
        and t_to_js : t -> Ojs.t = fun (x3612 : Ojs.t) -> x3612
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x3614 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3614) "iconPath")
        let (tooltip : t -> string or_undefined) =
          fun (x3618 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3618) "tooltip")
      end
    module QuickInputButtons =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3621 : Ojs.t) -> x3621
        and t_to_js : t -> Ojs.t = fun (x3620 : Ojs.t) -> x3620
        let (back : unit -> QuickInputButton.t) =
          fun () ->
            QuickInputButton.t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") "Back")
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") [||])
      end
    module QuickPick =
      struct
        include struct include QuickInput end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3623 : Ojs.t) -> x3623
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3622 : Ojs.t) -> x3622
        let (value : 'T t -> string) =
          fun (x3624 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3624) "value")
        let (set_value : 'T t -> string -> unit) =
          fun (x3626 : 'T t) ->
            fun (x3627 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3626) "value"
                (Ojs.string_to_js x3627)
        let (placeholder : 'T t -> string or_undefined) =
          fun (x3629 : 'T t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3629) "placeholder")
        let (set_placeholder : 'T t -> string or_undefined -> unit) =
          fun (x3632 : 'T t) ->
            fun (x3633 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3632) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3633)
        let (on_did_change_value : 'T t -> string Event.t) =
          fun (x3636 : 'T t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3636)
                 "onDidChangeValue")
        let (on_did_accept : 'T t -> unit Event.t) =
          fun (x3639 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3639) "onDidAccept")
        let (buttons : 'T t -> QuickInputButton.t list) =
          fun (x3642 : 'T t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3642) "buttons")
        let (set_buttons : 'T t -> QuickInputButton.t list -> unit) =
          fun (x3645 : 'T t) ->
            fun (x3646 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3645) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3646)
        let (on_did_trigger_button : 'T t -> QuickInputButton.t Event.t) =
          fun (x3649 : 'T t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3649)
                 "onDidTriggerButton")
        let (items : 'T t -> 'T list) =
          fun (x3652 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3652) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x3655 : 'T t) ->
            fun (x3656 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3655) "items"
                (Ojs.list_to_js Obj.magic x3656)
        let (can_select_many : 'T t -> bool) =
          fun (x3659 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3659) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3661 : 'T t) ->
            fun (x3662 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3661) "canSelectMany"
                (Ojs.bool_to_js x3662)
        let (match_on_description : 'T t -> bool) =
          fun (x3664 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3664)
                 "matchOnDescription")
        let (set_match_on_description : 'T t -> bool -> unit) =
          fun (x3666 : 'T t) ->
            fun (x3667 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3666)
                "matchOnDescription" (Ojs.bool_to_js x3667)
        let (match_on_detail : 'T t -> bool) =
          fun (x3669 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3669) "matchOnDetail")
        let (set_match_on_detail : 'T t -> bool -> unit) =
          fun (x3671 : 'T t) ->
            fun (x3672 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3671) "matchOnDetail"
                (Ojs.bool_to_js x3672)
        let (active_items : 'T t -> 'T list) =
          fun (x3674 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3674) "activeItems")
        let (set_active_items : 'T t -> 'T list -> unit) =
          fun (x3677 : 'T t) ->
            fun (x3678 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3677) "activeItems"
                (Ojs.list_to_js Obj.magic x3678)
        let (on_did_change_active : 'T t -> 'T list Event.t) =
          fun (x3681 : 'T t) ->
            Event.t_of_js
              (fun (x3683 : Ojs.t) -> Ojs.list_of_js Obj.magic x3683)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3681)
                 "onDidChangeActive")
        let (selected_items : 'T t -> 'T list) =
          fun (x3685 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3685) "selectedItems")
        let (set_selected_items : 'T t -> 'T list -> unit) =
          fun (x3688 : 'T t) ->
            fun (x3689 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3688) "selectedItems"
                (Ojs.list_to_js Obj.magic x3689)
        let (on_did_change_selection : 'T t -> 'T list Event.t) =
          fun (x3692 : 'T t) ->
            Event.t_of_js
              (fun (x3694 : Ojs.t) -> Ojs.list_of_js Obj.magic x3694)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3692)
                 "onDidChangeSelection")
      end
    module InputBox =
      struct
        include struct include QuickInput end
        let (value : t -> string) =
          fun (x3696 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3696) "value")
        let (set_value : t -> string -> unit) =
          fun (x3697 : t) ->
            fun (x3698 : string) ->
              Ojs.set_prop_ascii (t_to_js x3697) "value"
                (Ojs.string_to_js x3698)
        let (placeholder : t -> string or_undefined) =
          fun (x3699 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3699) "placeholder")
        let (set_placeholder : t -> string or_undefined -> unit) =
          fun (x3701 : t) ->
            fun (x3702 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3701) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3702)
        let (password : t -> bool) =
          fun (x3704 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3704) "password")
        let (set_password : t -> bool -> unit) =
          fun (x3705 : t) ->
            fun (x3706 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3705) "password"
                (Ojs.bool_to_js x3706)
        let (on_did_change_value : t -> string Event.t) =
          fun (x3707 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3707) "onDidChangeValue")
        let (on_did_accept : t -> unit Event.t) =
          fun (x3709 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3709) "onDidAccept")
        let (buttons : t -> QuickInputButton.t list) =
          fun (x3711 : t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3711) "buttons")
        let (set_buttons : t -> QuickInputButton.t list -> unit) =
          fun (x3713 : t) ->
            fun (x3714 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js x3713) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3714)
        let (on_did_trigger_button : t -> QuickInputButton.t Event.t) =
          fun (x3716 : t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3716) "onDidTriggerButton")
        let (prompt : t -> string or_undefined) =
          fun (x3718 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3718) "prompt")
        let (set_prompt : t -> string or_undefined -> unit) =
          fun (x3720 : t) ->
            fun (x3721 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3720) "prompt"
                (or_undefined_to_js Ojs.string_to_js x3721)
        let (validation_message : t -> string or_undefined) =
          fun (x3723 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3723) "validationMessage")
        let (set_validation_message : t -> string or_undefined -> unit) =
          fun (x3725 : t) ->
            fun (x3726 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3725) "validationMessage"
                (or_undefined_to_js Ojs.string_to_js x3726)
      end
    module ProgressLocation =
      struct
        type t = [ `Window  | `Notification ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3729 : Ojs.t) ->
            let x3730 = x3729 in
            match Ojs.int_of_js x3730 with
            | 10 -> `Window
            | 15 -> `Notification
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3728 : [ `Window  | `Notification ]) ->
            match x3728 with
            | `Window -> Ojs.int_to_js 10
            | `Notification -> Ojs.int_to_js 15
      end
    module ProgressOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3732 : Ojs.t) -> x3732
        and t_to_js : t -> Ojs.t = fun (x3731 : Ojs.t) -> x3731
        module ViewId =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3734 : Ojs.t) -> x3734
            and t_to_js : t -> Ojs.t = fun (x3733 : Ojs.t) -> x3733
            let (view_id : t -> string) =
              fun (x3735 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3735) "viewId")
            let (set_view_id : t -> string -> unit) =
              fun (x3736 : t) ->
                fun (x3737 : string) ->
                  Ojs.set_prop_ascii (t_to_js x3736) "viewId"
                    (Ojs.string_to_js x3737)
          end
        let (location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum)
          =
          fun (x3738 : t) ->
            or_enum_of_js
              (fun (x3739 : Ojs.t) ->
                 union2_of_js ProgressLocation.t_of_js ViewId.t_of_js x3739)
              (fun (x3742 : Ojs.t) ->
                 let x3743 = x3742 in
                 match Ojs.int_of_js x3743 with
                 | 15 -> `Notification
                 | 1 -> `SourceControl
                 | 10 -> `Window
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x3738) "location")
        let (set_location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum -> 
              unit)
          =
          fun (x3744 : t) ->
            fun
              (x3745 :
                ((ProgressLocation.t, ViewId.t) union2,
                  [ `Notification  | `SourceControl  | `Window ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x3744) "location"
                (or_enum_to_js
                   (fun (x3746 : (ProgressLocation.t, ViewId.t) union2) ->
                      union2_to_js ProgressLocation.t_to_js ViewId.t_to_js
                        x3746)
                   (fun
                      (x3749 :
                        [ `Notification  | `SourceControl  | `Window ])
                      ->
                      match x3749 with
                      | `Notification -> Ojs.string_to_js "Notification"
                      | `SourceControl -> Ojs.string_to_js "SourceControl"
                      | `Window -> Ojs.string_to_js "Window") x3745)
        let (title : t -> string) =
          fun (x3750 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3750) "title")
        let (set_title : t -> string -> unit) =
          fun (x3751 : t) ->
            fun (x3752 : string) ->
              Ojs.set_prop_ascii (t_to_js x3751) "title"
                (Ojs.string_to_js x3752)
        let (cancellable : t -> bool) =
          fun (x3753 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3753) "cancellable")
        let (set_cancellable : t -> bool -> unit) =
          fun (x3754 : t) ->
            fun (x3755 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3754) "cancellable"
                (Ojs.bool_to_js x3755)
      end
    module TreeItemCollapsibleState =
      struct
        type t = [ `None  | `Collapsed  | `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3757 : Ojs.t) ->
            let x3758 = x3757 in
            match Ojs.int_of_js x3758 with
            | 0 -> `None
            | 1 -> `Collapsed
            | 2 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3756 : [ `None  | `Collapsed  | `Expanded ]) ->
            match x3756 with
            | `None -> Ojs.int_to_js 0
            | `Collapsed -> Ojs.int_to_js 1
            | `Expanded -> Ojs.int_to_js 2
      end
    module TreeItemLabel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3760 : Ojs.t) -> x3760
        and t_to_js : t -> Ojs.t = fun (x3759 : Ojs.t) -> x3759
        let (label : t -> string) =
          fun (x3761 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3761) "label")
        let (set_label : t -> string -> unit) =
          fun (x3762 : t) ->
            fun (x3763 : string) ->
              Ojs.set_prop_ascii (t_to_js x3762) "label"
                (Ojs.string_to_js x3763)
        let (highlights : t -> (int * int) list) =
          fun (x3764 : t) ->
            Ojs.list_of_js
              (fun (x3765 : Ojs.t) ->
                 let x3766 = x3765 in
                 ((Ojs.int_of_js (Ojs.array_get x3766 0)),
                   (Ojs.int_of_js (Ojs.array_get x3766 1))))
              (Ojs.get_prop_ascii (t_to_js x3764) "highlights")
        let (set_highlights : t -> (int * int) list -> unit) =
          fun (x3767 : t) ->
            fun (x3768 : (int * int) list) ->
              Ojs.set_prop_ascii (t_to_js x3767) "highlights"
                (Ojs.list_to_js
                   (fun (x3769 : (int * int)) ->
                      let (x3770, x3771) = x3769 in
                      let x3772 = Ojs.array_make 2 in
                      Ojs.array_set x3772 0 (Ojs.int_to_js x3770);
                      Ojs.array_set x3772 1 (Ojs.int_to_js x3771);
                      x3772) x3768)
        let (create :
          label:string -> ?highlights:(int * int) list -> unit -> t) =
          fun ~label:(x3773 : string) ->
            fun ?highlights:(x3774 : (int * int) list option) ->
              fun () ->
                let x3775 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3775 "label" (Ojs.string_to_js x3773);
                (match x3774 with
                 | Some x3776 ->
                     Ojs.set_prop_ascii x3775 "highlights"
                       (Ojs.list_to_js
                          (fun (x3777 : (int * int)) ->
                             let (x3778, x3779) = x3777 in
                             let x3780 = Ojs.array_make 2 in
                             Ojs.array_set x3780 0 (Ojs.int_to_js x3778);
                             Ojs.array_set x3780 1 (Ojs.int_to_js x3779);
                             x3780) x3776)
                 | None -> ());
                t_of_js x3775
      end
    module TreeItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3782 : Ojs.t) -> x3782
        and t_to_js : t -> Ojs.t = fun (x3781 : Ojs.t) -> x3781
        let (label : t -> TreeItemLabel.t or_string) =
          fun (x3783 : t) ->
            or_string_of_js TreeItemLabel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3783) "label")
        let (set_label : t -> TreeItemLabel.t or_string -> unit) =
          fun (x3785 : t) ->
            fun (x3786 : TreeItemLabel.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x3785) "label"
                (or_string_to_js TreeItemLabel.t_to_js x3786)
        let (id : t -> string) =
          fun (x3788 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3788) "id")
        let (set_id : t -> string -> unit) =
          fun (x3789 : t) ->
            fun (x3790 : string) ->
              Ojs.set_prop_ascii (t_to_js x3789) "id"
                (Ojs.string_to_js x3790)
        let (icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 or_string) =
          fun (x3791 : t) ->
            or_string_of_js
              (fun (x3792 : Ojs.t) ->
                 union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
                   x3792) (Ojs.get_prop_ascii (t_to_js x3791) "iconPath")
        let (set_icon_path :
          t ->
            [ `ThemeIcon of ThemeIcon.t  | `Uri of Uri.t 
            | `IconPath of IconPath.t  | `String of string ] -> unit)
          =
          fun (x3796 : t) ->
            fun
              (x3797 :
                [ `ThemeIcon of ThemeIcon.t  | `Uri of Uri.t 
                | `IconPath of IconPath.t  | `String of string ])
              ->
              Ojs.set_prop_ascii (t_to_js x3796) "iconPath"
                (match x3797 with
                 | `ThemeIcon x3798 -> ThemeIcon.t_to_js x3798
                 | `Uri x3799 -> Uri.t_to_js x3799
                 | `IconPath x3800 -> IconPath.t_to_js x3800
                 | `String x3801 -> Ojs.string_to_js x3801)
        let (description : t -> bool or_string) =
          fun (x3802 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3802) "description")
        let (set_description : t -> bool or_string -> unit) =
          fun (x3804 : t) ->
            fun (x3805 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x3804) "description"
                (or_string_to_js Ojs.bool_to_js x3805)
        let (resource_uri : t -> Uri.t) =
          fun (x3807 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3807) "resourceUri")
        let (set_resource_uri : t -> Uri.t -> unit) =
          fun (x3808 : t) ->
            fun (x3809 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x3808) "resourceUri"
                (Uri.t_to_js x3809)
        let (tooltip : t -> MarkdownString.t or_string or_undefined) =
          fun (x3810 : t) ->
            or_undefined_of_js
              (fun (x3811 : Ojs.t) ->
                 or_string_of_js MarkdownString.t_of_js x3811)
              (Ojs.get_prop_ascii (t_to_js x3810) "tooltip")
        let (set_tooltip :
          t -> MarkdownString.t or_string or_undefined -> unit) =
          fun (x3813 : t) ->
            fun (x3814 : MarkdownString.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3813) "tooltip"
                (or_undefined_to_js
                   (fun (x3815 : MarkdownString.t or_string) ->
                      or_string_to_js MarkdownString.t_to_js x3815) x3814)
        let (command : t -> Command.t) =
          fun (x3817 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x3817) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x3818 : t) ->
            fun (x3819 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x3818) "command"
                (Command.t_to_js x3819)
        let (collapsible_state : t -> TreeItemCollapsibleState.t) =
          fun (x3820 : t) ->
            TreeItemCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3820) "collapsibleState")
        let (set_collapsible_state : t -> TreeItemCollapsibleState.t -> unit)
          =
          fun (x3821 : t) ->
            fun (x3822 : TreeItemCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x3821) "collapsibleState"
                (TreeItemCollapsibleState.t_to_js x3822)
        let (context_value : t -> string) =
          fun (x3823 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3823) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x3824 : t) ->
            fun (x3825 : string) ->
              Ojs.set_prop_ascii (t_to_js x3824) "contextValue"
                (Ojs.string_to_js x3825)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x3826 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3826) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x3827 : t) ->
            fun (x3828 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x3827) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x3828)
        let (create :
          label:[ `String of string  | `TreeItemLabel of TreeItemLabel.t 
                | `Uri of Uri.t ]
            -> ?collapsible_state:TreeItemCollapsibleState.t -> unit -> t)
          =
          fun
            ~label:(x3829 :
                     [ `String of string 
                     | `TreeItemLabel of TreeItemLabel.t  | `Uri of Uri.t ])
            ->
            fun
              ?collapsible_state:(x3830 : TreeItemCollapsibleState.t option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "TreeItem")
                     (let x3831 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3831 "push"
                           [|((match x3829 with
                               | `String x3833 -> Ojs.string_to_js x3833
                               | `TreeItemLabel x3834 ->
                                   TreeItemLabel.t_to_js x3834
                               | `Uri x3835 -> Uri.t_to_js x3835))|]);
                      (match x3830 with
                       | Some x3832 ->
                           ignore
                             (Ojs.call x3831 "push"
                                [|(TreeItemCollapsibleState.t_to_js x3832)|])
                       | None -> ());
                      x3831))
      end
    module TreeDataProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3837 : Ojs.t) -> x3837
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3836 : Ojs.t) -> x3836
        module OnDidChangeTreeData =
          struct
            type 'T t = 'T or_null_or_undefined Event.t
            let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
              __T) ->
              fun (__T_of_js : Ojs.t -> __T) ->
                fun (x3841 : Ojs.t) ->
                  Event.t_of_js
                    (fun (x3842 : Ojs.t) ->
                       or_null_or_undefined_of_js __T_of_js x3842) x3841
            and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type
              __T) ->
              fun (__T_to_js : __T -> Ojs.t) ->
                fun (x3838 : __T or_null_or_undefined Event.t) ->
                  Event.t_to_js
                    (fun (x3839 : __T or_null_or_undefined) ->
                       or_null_or_undefined_to_js __T_to_js x3839) x3838
          end
        let (on_did_change_tree_data : 'T t -> 'T OnDidChangeTreeData.t) =
          fun (x3844 : 'T t) ->
            OnDidChangeTreeData.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3844)
                 "onDidChangeTreeData")
        let (set_on_did_change_tree_data :
          'T t -> 'T OnDidChangeTreeData.t -> unit) =
          fun (x3847 : 'T t) ->
            fun (x3848 : 'T OnDidChangeTreeData.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3847)
                "onDidChangeTreeData"
                (OnDidChangeTreeData.t_to_js Obj.magic x3848)
        let (get_tree_item :
          'T t -> 'T -> (TreeItem.t, TreeItem.t Promise.t) union2) =
          fun (x3852 : 'T t) ->
            fun (x3851 : 'T) ->
              union2_of_js TreeItem.t_of_js
                (fun (x3855 : Ojs.t) ->
                   Promise.t_of_js TreeItem.t_of_js x3855)
                (Ojs.call (t_to_js Obj.magic x3852) "getTreeItem"
                   [|(Obj.magic x3851)|])
        let (get_children :
          'T t -> ?element:'T -> unit -> 'T list ProviderResult.t) =
          fun (x3860 : 'T t) ->
            fun ?element:(x3857 : 'T option) ->
              fun () ->
                ProviderResult.t_of_js
                  (fun (x3863 : Ojs.t) -> Ojs.list_of_js Obj.magic x3863)
                  (let x3862 = t_to_js Obj.magic x3860 in
                   Ojs.call (Ojs.get_prop_ascii x3862 "getChildren") "apply"
                     [|x3862;((let x3858 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3857 with
                                | Some x3859 ->
                                    ignore
                                      (Ojs.call x3858 "push"
                                         [|(Obj.magic x3859)|])
                                | None -> ());
                               x3858))|])
        let (get_parent : 'T t -> 'T -> 'T ProviderResult.t) =
          fun (x3866 : 'T t) ->
            fun (x3865 : 'T) ->
              ProviderResult.t_of_js Obj.magic
                (Ojs.call (t_to_js Obj.magic x3866) "getParent"
                   [|(Obj.magic x3865)|])
        let (resolve_tree_item :
          'T t ->
            item:TreeItem.t ->
              element:'T ->
                token:CancellationToken.t -> TreeItem.t ProviderResult.t)
          =
          fun (x3872 : 'T t) ->
            fun ~item:(x3869 : TreeItem.t) ->
              fun ~element:(x3870 : 'T) ->
                fun ~token:(x3871 : CancellationToken.t) ->
                  ProviderResult.t_of_js TreeItem.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3872) "resolveTreeItem"
                       [|(TreeItem.t_to_js x3869);(Obj.magic x3870);(
                         CancellationToken.t_to_js x3871)|])
        let (create :
          ?on_did_change_tree_data:'T OnDidChangeTreeData.t ->
            get_tree_item:('T ->
                             [ `Value of TreeItem.t 
                             | `Promise of TreeItem.t Promise.t ])
              ->
              get_children:(?element:'T -> unit -> 'T list ProviderResult.t)
                ->
                ?get_parent:('T -> 'T ProviderResult.t) ->
                  ?resolve_tree_item:(item:TreeItem.t ->
                                        element:'T ->
                                          token:CancellationToken.t ->
                                            TreeItem.t ProviderResult.t)
                    -> unit -> 'T t)
          =
          fun
            ?on_did_change_tree_data:(x3875 :
                                       'T OnDidChangeTreeData.t option)
            ->
            fun
              ~get_tree_item:(x3876 :
                               'T ->
                                 [ `Value of TreeItem.t 
                                 | `Promise of TreeItem.t Promise.t ])
              ->
              fun
                ~get_children:(x3877 :
                                ?element:'T ->
                                  unit -> 'T list ProviderResult.t)
                ->
                fun ?get_parent:(x3878 : ('T -> 'T ProviderResult.t) option)
                  ->
                  fun
                    ?resolve_tree_item:(x3879 :
                                         (item:TreeItem.t ->
                                            element:'T ->
                                              token:CancellationToken.t ->
                                                TreeItem.t ProviderResult.t)
                                           option)
                    ->
                    fun () ->
                      let x3880 = Ojs.empty_obj () in
                      (match x3875 with
                       | Some x3898 ->
                           Ojs.set_prop_ascii x3880 "onDidChangeTreeData"
                             (OnDidChangeTreeData.t_to_js Obj.magic x3898)
                       | None -> ());
                      Ojs.set_prop_ascii x3880 "getTreeItem"
                        (Ojs.fun_to_js 1
                           (fun (x3894 : Ojs.t) ->
                              match x3876 (Obj.magic x3894) with
                              | `Value x3895 -> TreeItem.t_to_js x3895
                              | `Promise x3896 ->
                                  Promise.t_to_js TreeItem.t_to_js x3896));
                      Ojs.set_prop_ascii x3880 "getChildren"
                        (Ojs.fun_to_js 1
                           (fun (x3890 : Ojs.t) ->
                              ProviderResult.t_to_js
                                (fun (x3892 : 'T list) ->
                                   Ojs.list_to_js Obj.magic x3892)
                                (x3877
                                   ?element:(Ojs.option_of_js Obj.magic x3890)
                                   ())));
                      (match x3878 with
                       | Some x3887 ->
                           Ojs.set_prop_ascii x3880 "getParent"
                             (Ojs.fun_to_js 1
                                (fun (x3888 : Ojs.t) ->
                                   ProviderResult.t_to_js Obj.magic
                                     (x3887 (Obj.magic x3888))))
                       | None -> ());
                      (match x3879 with
                       | Some x3882 ->
                           Ojs.set_prop_ascii x3880 "resolveTreeItem"
                             (Ojs.fun_to_js 3
                                (fun (x3883 : Ojs.t) ->
                                   fun (x3884 : Ojs.t) ->
                                     fun (x3885 : Ojs.t) ->
                                       ProviderResult.t_to_js
                                         TreeItem.t_to_js
                                         (x3882
                                            ~item:(TreeItem.t_of_js x3883)
                                            ~element:(Obj.magic x3884)
                                            ~token:(CancellationToken.t_of_js
                                                      x3885))))
                       | None -> ());
                      t_of_js Obj.magic x3880
      end
    module TreeViewOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3901 : Ojs.t) -> x3901
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3900 : Ojs.t) -> x3900
        let (tree_data_provider : 'T t -> 'T TreeDataProvider.t) =
          fun (x3902 : 'T t) ->
            TreeDataProvider.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3902)
                 "treeDataProvider")
        let (set_tree_data_provider : 'T t -> 'T TreeDataProvider.t -> unit)
          =
          fun (x3905 : 'T t) ->
            fun (x3906 : 'T TreeDataProvider.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3905) "treeDataProvider"
                (TreeDataProvider.t_to_js Obj.magic x3906)
        let (show_collapse_all : 'T t -> bool) =
          fun (x3909 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3909) "showCollapseAll")
        let (set_show_collapse_all : 'T t -> bool -> unit) =
          fun (x3911 : 'T t) ->
            fun (x3912 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3911) "showCollapseAll"
                (Ojs.bool_to_js x3912)
        let (can_select_many : 'T t -> bool) =
          fun (x3914 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3914) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3916 : 'T t) ->
            fun (x3917 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3916) "canSelectMany"
                (Ojs.bool_to_js x3917)
      end
    module TreeViewExpansionEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3920 : Ojs.t) -> x3920
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3919 : Ojs.t) -> x3919
        let (element : 'T t -> 'T) =
          fun (x3921 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3921) "element")
      end
    module TreeViewSelectionChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3924 : Ojs.t) -> x3924
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3923 : Ojs.t) -> x3923
        let (selection : 'T t -> 'T list) =
          fun (x3925 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3925) "selection")
      end
    module TreeViewVisibilityChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3929 : Ojs.t) -> x3929
        and t_to_js : t -> Ojs.t = fun (x3928 : Ojs.t) -> x3928
        let (visible : t -> bool) =
          fun (x3930 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3930) "visible")
      end
    module TreeView =
      struct
        include struct include Disposable end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3932 : Ojs.t) -> x3932
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3931 : Ojs.t) -> x3931
        let (on_did_expand_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3933 : 'T t) ->
            Event.t_of_js
              (fun (x3935 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3935)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3933)
                 "onDidExpandElement")
        let (on_did_collapse_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3937 : 'T t) ->
            Event.t_of_js
              (fun (x3939 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3939)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3937)
                 "onDidCollapseElement")
        let (selection : 'T t -> 'T list) =
          fun (x3941 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3941) "selection")
        let (on_did_change_selection :
          'T t -> 'T TreeViewSelectionChangeEvent.t Event.t) =
          fun (x3944 : 'T t) ->
            Event.t_of_js
              (fun (x3946 : Ojs.t) ->
                 TreeViewSelectionChangeEvent.t_of_js Obj.magic x3946)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3944)
                 "onDidChangeSelection")
        let (visible : 'T t -> bool) =
          fun (x3948 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3948) "visible")
        let (on_did_change_visibility :
          'T t -> TreeViewVisibilityChangeEvent.t Event.t) =
          fun (x3950 : 'T t) ->
            Event.t_of_js TreeViewVisibilityChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3950)
                 "onDidChangeVisibility")
        let (message : 'T t -> string) =
          fun (x3953 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3953) "message")
        let (set_message : 'T t -> string -> unit) =
          fun (x3955 : 'T t) ->
            fun (x3956 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3955) "message"
                (Ojs.string_to_js x3956)
        let (title : 'T t -> string) =
          fun (x3958 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3958) "title")
        let (set_title : 'T t -> string -> unit) =
          fun (x3960 : 'T t) ->
            fun (x3961 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3960) "title"
                (Ojs.string_to_js x3961)
        let (description : 'T t -> string) =
          fun (x3963 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3963) "description")
        let (set_description : 'T t -> string -> unit) =
          fun (x3965 : 'T t) ->
            fun (x3966 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3965) "description"
                (Ojs.string_to_js x3966)
        module RevealOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3969 : Ojs.t) -> x3969
            and t_to_js : t -> Ojs.t = fun (x3968 : Ojs.t) -> x3968
            let (select : t -> bool) =
              fun (x3970 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3970) "select")
            let (set_select : t -> bool -> unit) =
              fun (x3971 : t) ->
                fun (x3972 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3971) "select"
                    (Ojs.bool_to_js x3972)
            let (focus : t -> bool) =
              fun (x3973 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3973) "focus")
            let (set_focus : t -> bool -> unit) =
              fun (x3974 : t) ->
                fun (x3975 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3974) "focus"
                    (Ojs.bool_to_js x3975)
            let (expand : t -> bool or_number) =
              fun (x3976 : t) ->
                or_number_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3976) "expand")
            let (set_expand : t -> bool or_number -> unit) =
              fun (x3978 : t) ->
                fun (x3979 : bool or_number) ->
                  Ojs.set_prop_ascii (t_to_js x3978) "expand"
                    (or_number_to_js Ojs.bool_to_js x3979)
          end
        let (reveal :
          'T t -> 'T -> ?options:RevealOptions.t -> unit -> unit Promise.t) =
          fun (x3985 : 'T t) ->
            fun (x3981 : 'T) ->
              fun ?options:(x3982 : RevealOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x3987 = t_to_js Obj.magic x3985 in
                     Ojs.call (Ojs.get_prop_ascii x3987 "reveal") "apply"
                       [|x3987;((let x3983 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3983 "push"
                                      [|(Obj.magic x3981)|]);
                                 (match x3982 with
                                  | Some x3984 ->
                                      ignore
                                        (Ojs.call x3983 "push"
                                           [|(RevealOptions.t_to_js x3984)|])
                                  | None -> ());
                                 x3983))|])
      end
    module Window =
      struct
        let (active_text_editor : TextEditor.t or_undefined) =
          or_undefined_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTextEditor")
        let (visible_text_editors : TextEditor.t list) =
          Ojs.list_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "visibleTextEditors")
        let (on_did_change_active_text_editor :
          TextEditor.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x3991 : Ojs.t) ->
               or_undefined_of_js TextEditor.t_of_js x3991)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTextEditor")
        let (on_did_change_visible_text_editors : TextEditor.t list Event.t)
          =
          Event.t_of_js
            (fun (x3993 : Ojs.t) -> Ojs.list_of_js TextEditor.t_of_js x3993)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeVisibleTextEditors")
        let (on_did_change_text_editor_selection :
          TextEditorSelectionChangeEvent.t Event.t) =
          Event.t_of_js TextEditorSelectionChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorSelection")
        let (on_did_change_text_editor_visible_ranges :
          TextEditorVisibleRangesChangeEvent.t Event.t) =
          Event.t_of_js TextEditorVisibleRangesChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorVisibleRanges")
        let (on_did_change_text_editor_options :
          TextEditorOptionsChangeEvent.t Event.t) =
          Event.t_of_js TextEditorOptionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorOptions")
        let (on_did_change_text_editor_view_column :
          TextEditorViewColumnChangeEvent.t Event.t) =
          Event.t_of_js TextEditorViewColumnChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorViewColumn")
        let (terminals : Terminal.t list) =
          Ojs.list_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "terminals")
        let (active_terminal : Terminal.t or_undefined) =
          or_undefined_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTerminal")
        let (on_did_change_active_terminal : Terminal.t or_undefined Event.t)
          =
          Event.t_of_js
            (fun (x4001 : Ojs.t) -> or_undefined_of_js Terminal.t_of_js x4001)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTerminal")
        let (on_did_open_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidOpenTerminal")
        let (on_did_close_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidCloseTerminal")
        let (state : WindowState.t) =
          WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "state")
        let (on_did_change_window_state : WindowState.t Event.t) =
          Event.t_of_js WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeWindowState")
        let (show_text_document :
          TextDocument.t ->
            ?column:ViewColumn.t ->
              ?preserve_focus:bool -> unit -> TextEditor.t Promise.t)
          =
          fun (x4006 : TextDocument.t) ->
            fun ?column:(x4007 : ViewColumn.t option) ->
              fun ?preserve_focus:(x4008 : bool option) ->
                fun () ->
                  Promise.t_of_js TextEditor.t_of_js
                    (let x4012 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4012 "showTextDocument")
                       "apply"
                       [|x4012;((let x4009 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4009 "push"
                                      [|(TextDocument.t_to_js x4006)|]);
                                 (match x4007 with
                                  | Some x4011 ->
                                      ignore
                                        (Ojs.call x4009 "push"
                                           [|(ViewColumn.t_to_js x4011)|])
                                  | None -> ());
                                 (match x4008 with
                                  | Some x4010 ->
                                      ignore
                                        (Ojs.call x4009 "push"
                                           [|(Ojs.bool_to_js x4010)|])
                                  | None -> ());
                                 x4009))|])
        let (show_text_document_with_options :
          TextDocument.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x4014 : TextDocument.t) ->
            fun ?options:(x4015 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x4018 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4018 "showTextDocument")
                     "apply"
                     [|x4018;((let x4016 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4016 "push"
                                    [|(TextDocument.t_to_js x4014)|]);
                               (match x4015 with
                                | Some x4017 ->
                                    ignore
                                      (Ojs.call x4016 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x4017)|])
                                | None -> ());
                               x4016))|])
        let (show_text_document_with_uri :
          Uri.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x4020 : Uri.t) ->
            fun ?options:(x4021 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x4024 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4024 "showTextDocument")
                     "apply"
                     [|x4024;((let x4022 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4022 "push"
                                    [|(Uri.t_to_js x4020)|]);
                               (match x4021 with
                                | Some x4023 ->
                                    ignore
                                      (Ojs.call x4022 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x4023)|])
                                | None -> ());
                               x4022))|])
        let (create_text_editor_decoration_type :
          DecorationRenderOptions.t -> TextEditorDecorationType.t) =
          fun (x4026 : DecorationRenderOptions.t) ->
            TextEditorDecorationType.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTextEditorDecorationType"
                 [|(DecorationRenderOptions.t_to_js x4026)|])
        let (show_information_message :
          string ->
            ?options:MessageOptions.t ->
              ?choices:(string * 'T) list ->
                unit -> 'T or_undefined Promise.t)
          =
          fun (x4027 : string) ->
            fun ?options:(x4028 : MessageOptions.t option) ->
              fun ?choices:(x4029 : (string * 'T) list option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4038 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4038)
                    (let x4037 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4037 "showInformationMessage")
                       "apply"
                       [|x4037;((let x4030 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4030 "push"
                                      [|(Ojs.string_to_js x4027)|]);
                                 (match x4028 with
                                  | Some x4036 ->
                                      ignore
                                        (Ojs.call x4030 "push"
                                           [|(MessageOptions.t_to_js x4036)|])
                                  | None -> ());
                                 (match x4029 with
                                  | Some x4031 ->
                                      ignore
                                        (Ojs.call x4030 "push"
                                           [|(Ojs.list_to_js
                                                (fun (x4032 : (string * 'T))
                                                   ->
                                                   let (x4033, x4034) = x4032 in
                                                   let x4035 =
                                                     Ojs.array_make 2 in
                                                   Ojs.array_set x4035 0
                                                     (Ojs.string_to_js x4033);
                                                   Ojs.array_set x4035 1
                                                     (Obj.magic x4034);
                                                   x4035) x4031)|])
                                  | None -> ());
                                 x4030))|])
        let (show_warning_message :
          string ->
            ?options:MessageOptions.t ->
              ?choices:(string * 'T) list ->
                unit -> 'T or_undefined Promise.t)
          =
          fun (x4040 : string) ->
            fun ?options:(x4041 : MessageOptions.t option) ->
              fun ?choices:(x4042 : (string * 'T) list option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4051 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4051)
                    (let x4050 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4050 "showWarningMessage")
                       "apply"
                       [|x4050;((let x4043 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4043 "push"
                                      [|(Ojs.string_to_js x4040)|]);
                                 (match x4041 with
                                  | Some x4049 ->
                                      ignore
                                        (Ojs.call x4043 "push"
                                           [|(MessageOptions.t_to_js x4049)|])
                                  | None -> ());
                                 (match x4042 with
                                  | Some x4044 ->
                                      ignore
                                        (Ojs.call x4043 "push"
                                           [|(Ojs.list_to_js
                                                (fun (x4045 : (string * 'T))
                                                   ->
                                                   let (x4046, x4047) = x4045 in
                                                   let x4048 =
                                                     Ojs.array_make 2 in
                                                   Ojs.array_set x4048 0
                                                     (Ojs.string_to_js x4046);
                                                   Ojs.array_set x4048 1
                                                     (Obj.magic x4047);
                                                   x4048) x4044)|])
                                  | None -> ());
                                 x4043))|])
        let (show_error_message :
          string ->
            ?options:MessageOptions.t ->
              ?choices:(string * 'T) list ->
                unit -> 'T or_undefined Promise.t)
          =
          fun (x4053 : string) ->
            fun ?options:(x4054 : MessageOptions.t option) ->
              fun ?choices:(x4055 : (string * 'T) list option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4064 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4064)
                    (let x4063 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4063 "showErrorMessage")
                       "apply"
                       [|x4063;((let x4056 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4056 "push"
                                      [|(Ojs.string_to_js x4053)|]);
                                 (match x4054 with
                                  | Some x4062 ->
                                      ignore
                                        (Ojs.call x4056 "push"
                                           [|(MessageOptions.t_to_js x4062)|])
                                  | None -> ());
                                 (match x4055 with
                                  | Some x4057 ->
                                      ignore
                                        (Ojs.call x4056 "push"
                                           [|(Ojs.list_to_js
                                                (fun (x4058 : (string * 'T))
                                                   ->
                                                   let (x4059, x4060) = x4058 in
                                                   let x4061 =
                                                     Ojs.array_make 2 in
                                                   Ojs.array_set x4061 0
                                                     (Ojs.string_to_js x4059);
                                                   Ojs.array_set x4061 1
                                                     (Obj.magic x4060);
                                                   x4061) x4057)|])
                                  | None -> ());
                                 x4056))|])
        module ShowQuickPickOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4067 : Ojs.t) -> x4067
            and t_to_js : t -> Ojs.t = fun (x4066 : Ojs.t) -> x4066
            let (can_pick_many : t -> [ `L_b_true ]) =
              fun (x4068 : t) ->
                let x4069 = Ojs.get_prop_ascii (t_to_js x4068) "canPickMany" in
                match Ojs.bool_of_js x4069 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_can_pick_many : t -> [ `L_b_true ] -> unit) =
              fun (x4070 : t) ->
                fun (x4071 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x4070) "canPickMany"
                    (match x4071 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (show_quick_pick :
          (string list Promise.t, string) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> string list or_undefined Promise.t)
          =
          fun (x4072 : (string list Promise.t, string) or_array) ->
            fun
              ?options:(x4073 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4074 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4085 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4086 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x4086) x4085)
                    (let x4084 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4084 "showQuickPick")
                       "apply"
                       [|x4084;((let x4075 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4075 "push"
                                      [|(or_array_to_js
                                           (fun
                                              (x4080 : string list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4081 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4081)
                                                x4080) Ojs.string_to_js x4072)|]);
                                 (match x4073 with
                                  | Some x4077 ->
                                      ignore
                                        (Ojs.call x4075 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4077)|])
                                  | None -> ());
                                 (match x4074 with
                                  | Some x4076 ->
                                      ignore
                                        (Ojs.call x4075 "push"
                                           [|(CancellationToken.t_to_js x4076)|])
                                  | None -> ());
                                 x4075))|])
        let (show_quick_pick' :
          ('T list Promise.t, 'T) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> 'T list or_undefined Promise.t)
          =
          fun (x4088 : ('T list Promise.t, 'T) or_array) ->
            fun
              ?options:(x4089 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4090 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4101 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4102 : Ojs.t) ->
                            Ojs.list_of_js Obj.magic x4102) x4101)
                    (let x4100 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4100 "showQuickPick")
                       "apply"
                       [|x4100;((let x4091 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4091 "push"
                                      [|(or_array_to_js
                                           (fun (x4096 : 'T list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4097 : 'T list) ->
                                                   Ojs.list_to_js Obj.magic
                                                     x4097) x4096) Obj.magic
                                           x4088)|]);
                                 (match x4089 with
                                  | Some x4093 ->
                                      ignore
                                        (Ojs.call x4091 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4093)|])
                                  | None -> ());
                                 (match x4090 with
                                  | Some x4092 ->
                                      ignore
                                        (Ojs.call x4091 "push"
                                           [|(CancellationToken.t_to_js x4092)|])
                                  | None -> ());
                                 x4091))|])
        let (show_workspace_folder_pick :
          ?options:WorkspaceFolderPickOptions.t ->
            unit -> WorkspaceFolder.t or_undefined Promise.t)
          =
          fun ?options:(x4104 : WorkspaceFolderPickOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4108 : Ojs.t) ->
                   or_undefined_of_js WorkspaceFolder.t_of_js x4108)
                (let x4107 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4107 "showWorkspaceFolderPick")
                   "apply"
                   [|x4107;((let x4105 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4104 with
                              | Some x4106 ->
                                  ignore
                                    (Ojs.call x4105 "push"
                                       [|(WorkspaceFolderPickOptions.t_to_js
                                            x4106)|])
                              | None -> ());
                             x4105))|])
        let (show_open_dialog :
          ?options:OpenDialogOptions.t ->
            unit -> Uri.t list or_undefined Promise.t)
          =
          fun ?options:(x4110 : OpenDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4114 : Ojs.t) ->
                   or_undefined_of_js
                     (fun (x4115 : Ojs.t) -> Ojs.list_of_js Uri.t_of_js x4115)
                     x4114)
                (let x4113 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4113 "showOpenDialog") "apply"
                   [|x4113;((let x4111 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4110 with
                              | Some x4112 ->
                                  ignore
                                    (Ojs.call x4111 "push"
                                       [|(OpenDialogOptions.t_to_js x4112)|])
                              | None -> ());
                             x4111))|])
        let (show_save_dialog :
          ?options:SaveDialogOptions.t ->
            unit -> Uri.t or_undefined Promise.t)
          =
          fun ?options:(x4117 : SaveDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4121 : Ojs.t) -> or_undefined_of_js Uri.t_of_js x4121)
                (let x4120 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4120 "showSaveDialog") "apply"
                   [|x4120;((let x4118 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4117 with
                              | Some x4119 ->
                                  ignore
                                    (Ojs.call x4118 "push"
                                       [|(SaveDialogOptions.t_to_js x4119)|])
                              | None -> ());
                             x4118))|])
        let (show_input_box :
          ?options:InputBoxOptions.t ->
            ?token:CancellationToken.t ->
              unit -> string or_undefined Promise.t)
          =
          fun ?options:(x4123 : InputBoxOptions.t option) ->
            fun ?token:(x4124 : CancellationToken.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x4129 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x4129)
                  (let x4128 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4128 "showInputBox") "apply"
                     [|x4128;((let x4125 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4123 with
                                | Some x4127 ->
                                    ignore
                                      (Ojs.call x4125 "push"
                                         [|(InputBoxOptions.t_to_js x4127)|])
                                | None -> ());
                               (match x4124 with
                                | Some x4126 ->
                                    ignore
                                      (Ojs.call x4125 "push"
                                         [|(CancellationToken.t_to_js x4126)|])
                                | None -> ());
                               x4125))|])
        let (create_quick_pick : unit -> 'T QuickPick.t) =
          fun () ->
            QuickPick.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createQuickPick" [||])
        let (create_input_box : unit -> InputBox.t) =
          fun () ->
            InputBox.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createInputBox" [||])
        let (create_output_channel : name:string -> OutputChannel.t) =
          fun ~name:(x4132 : string) ->
            OutputChannel.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createOutputChannel" [|(Ojs.string_to_js x4132)|])
        module ProgressInfo =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4134 : Ojs.t) -> x4134
            and t_to_js : t -> Ojs.t = fun (x4133 : Ojs.t) -> x4133
            let (message : t -> string) =
              fun (x4135 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4135) "message")
            let (set_message : t -> string -> unit) =
              fun (x4136 : t) ->
                fun (x4137 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4136) "message"
                    (Ojs.string_to_js x4137)
            let (increment : t -> int) =
              fun (x4138 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x4138) "increment")
            let (set_increment : t -> int -> unit) =
              fun (x4139 : t) ->
                fun (x4140 : int) ->
                  Ojs.set_prop_ascii (t_to_js x4139) "increment"
                    (Ojs.int_to_js x4140)
          end
        module ViewColumnLike =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4142 : Ojs.t) -> x4142
            and t_to_js : t -> Ojs.t = fun (x4141 : Ojs.t) -> x4141
            let (view_column : t -> ViewColumn.t) =
              fun (x4143 : t) ->
                ViewColumn.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4143) "viewColumn")
            let (set_view_column : t -> ViewColumn.t -> unit) =
              fun (x4144 : t) ->
                fun (x4145 : ViewColumn.t) ->
                  Ojs.set_prop_ascii (t_to_js x4144) "viewColumn"
                    (ViewColumn.t_to_js x4145)
            let (preserve_focus : t -> bool) =
              fun (x4146 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4146) "preserveFocus")
            let (set_preserve_focus : t -> bool -> unit) =
              fun (x4147 : t) ->
                fun (x4148 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x4147) "preserveFocus"
                    (Ojs.bool_to_js x4148)
          end
        module RegisterCustomEditorProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4150 : Ojs.t) -> x4150
            and t_to_js : t -> Ojs.t = fun (x4149 : Ojs.t) -> x4149
            let (webview_options : t -> WebviewPanelOptions.t) =
              fun (x4151 : t) ->
                WebviewPanelOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4151) "webviewOptions")
            let (supports_multiple_editors_per_document : t -> bool) =
              fun (x4152 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4152)
                     "supportsMultipleEditorsPerDocument")
          end
        module WebviewOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4154 : Ojs.t) -> x4154
            and t_to_js : t -> Ojs.t = fun (x4153 : Ojs.t) -> x4153
            let (retain_context_when_hidden : t -> bool) =
              fun (x4155 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4155)
                     "retainContextWhenHidden")
          end
        module RegisterWebviewViewProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4157 : Ojs.t) -> x4157
            and t_to_js : t -> Ojs.t = fun (x4156 : Ojs.t) -> x4156
            let (webview_options : t -> WebviewOptions.t) =
              fun (x4158 : t) ->
                WebviewOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4158) "webviewOptions")
          end
        let (create_webview_panel :
          view_type_:string ->
            title:string ->
              show_options:((ViewColumn.t, ViewColumnLike.t) union2,
                [ `Active  | `Beside  | `Eight  | `Five  | `Four  | `Nine 
                | `One  | `Seven  | `Six  | `Three  | `Two ]) or_enum ->
                ?options:(WebviewPanelOptions.t, WebviewOptions.t)
                  intersection2 -> unit -> WebviewPanel.t)
          =
          fun ~view_type_:(x4159 : string) ->
            fun ~title:(x4160 : string) ->
              fun
                ~show_options:(x4161 :
                                ((ViewColumn.t, ViewColumnLike.t) union2,
                                  [ `Active  | `Beside  | `Eight  | `Five 
                                  | `Four  | `Nine  | `One  | `Seven  | 
                                    `Six 
                                  | `Three  | `Two ]) or_enum)
                ->
                fun
                  ?options:(x4162 :
                             (WebviewPanelOptions.t, WebviewOptions.t)
                               intersection2 option)
                  ->
                  fun () ->
                    WebviewPanel.t_of_js
                      (let x4171 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4171 "createWebviewPanel")
                         "apply"
                         [|x4171;((let x4163 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4163 "push"
                                        [|(Ojs.string_to_js x4159)|]);
                                   ignore
                                     (Ojs.call x4163 "push"
                                        [|(Ojs.string_to_js x4160)|]);
                                   ignore
                                     (Ojs.call x4163 "push"
                                        [|(or_enum_to_js
                                             (fun
                                                (x4167 :
                                                  (ViewColumn.t,
                                                    ViewColumnLike.t) union2)
                                                ->
                                                union2_to_js
                                                  ViewColumn.t_to_js
                                                  ViewColumnLike.t_to_js
                                                  x4167)
                                             (fun
                                                (x4170 :
                                                  [ `Active  | `Beside 
                                                  | `Eight  | `Five  | 
                                                    `Four 
                                                  | `Nine  | `One  | 
                                                    `Seven 
                                                  | `Six  | `Three  | 
                                                    `Two ])
                                                ->
                                                match x4170 with
                                                | `Active ->
                                                    Ojs.string_to_js "Active"
                                                | `Beside ->
                                                    Ojs.string_to_js "Beside"
                                                | `Eight ->
                                                    Ojs.string_to_js "Eight"
                                                | `Five ->
                                                    Ojs.string_to_js "Five"
                                                | `Four ->
                                                    Ojs.string_to_js "Four"
                                                | `Nine ->
                                                    Ojs.string_to_js "Nine"
                                                | `One ->
                                                    Ojs.string_to_js "One"
                                                | `Seven ->
                                                    Ojs.string_to_js "Seven"
                                                | `Six ->
                                                    Ojs.string_to_js "Six"
                                                | `Three ->
                                                    Ojs.string_to_js "Three"
                                                | `Two ->
                                                    Ojs.string_to_js "Two")
                                             x4161)|]);
                                   (match x4162 with
                                    | Some x4164 ->
                                        ignore
                                          (Ojs.call x4163 "push"
                                             [|(intersection2_to_js
                                                  WebviewPanelOptions.t_to_js
                                                  WebviewOptions.t_to_js
                                                  x4164)|])
                                    | None -> ());
                                   x4163))|])
        let (set_status_bar_message :
          text:string -> hide_after_timeout:int -> Disposable.t) =
          fun ~text:(x4172 : string) ->
            fun ~hide_after_timeout:(x4173 : int) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4172);(Ojs.int_to_js x4173)|])
        let (set_status_bar_message :
          text:string -> hide_when_done:any Promise.t -> Disposable.t) =
          fun ~text:(x4174 : string) ->
            fun ~hide_when_done:(x4175 : any Promise.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4174);(Promise.t_to_js any_to_js
                                                 x4175)|])
        let (set_status_bar_message : text:string -> Disposable.t) =
          fun ~text:(x4177 : string) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "setStatusBarMessage" [|(Ojs.string_to_js x4177)|])
        let (with_scm_progress :
          task:(progress:int Progress.t -> 'R Promise.t) -> 'R Promise.t) =
          fun ~task:(x4178 : progress:int Progress.t -> 'R Promise.t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "withScmProgress"
                 [|(Ojs.fun_to_js 1
                      (fun (x4179 : Ojs.t) ->
                         Promise.t_to_js Obj.magic
                           (x4178
                              ~progress:(Progress.t_of_js Ojs.int_of_js x4179))))|])
        let (with_progress :
          options:ProgressOptions.t ->
            task:(progress:ProgressInfo.t Progress.t ->
                    token:CancellationToken.t -> 'R Promise.t)
              -> 'R Promise.t)
          =
          fun ~options:(x4183 : ProgressOptions.t) ->
            fun
              ~task:(x4184 :
                      progress:ProgressInfo.t Progress.t ->
                        token:CancellationToken.t -> 'R Promise.t)
              ->
              Promise.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "withProgress"
                   [|(ProgressOptions.t_to_js x4183);(Ojs.fun_to_js 2
                                                        (fun (x4185 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4187 : Ojs.t)
                                                             ->
                                                             Promise.t_to_js
                                                               Obj.magic
                                                               (x4184
                                                                  ~progress:(
                                                                  Progress.t_of_js
                                                                    ProgressInfo.t_of_js
                                                                    x4185)
                                                                  ~token:(
                                                                  CancellationToken.t_of_js
                                                                    x4187))))|])
        let (create_status_bar_item :
          ?alignment:StatusBarAlignment.t ->
            ?priority:int -> unit -> StatusBarItem.t)
          =
          fun ?alignment:(x4190 : StatusBarAlignment.t option) ->
            fun ?priority:(x4191 : int option) ->
              fun () ->
                StatusBarItem.t_of_js
                  (let x4195 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4195 "createStatusBarItem")
                     "apply"
                     [|x4195;((let x4192 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4190 with
                                | Some x4194 ->
                                    ignore
                                      (Ojs.call x4192 "push"
                                         [|(StatusBarAlignment.t_to_js x4194)|])
                                | None -> ());
                               (match x4191 with
                                | Some x4193 ->
                                    ignore
                                      (Ojs.call x4192 "push"
                                         [|(Ojs.int_to_js x4193)|])
                                | None -> ());
                               x4192))|])
        let (create_terminal :
          ?name:string ->
            ?shell_path:string ->
              ?shell_args:string list or_string -> unit -> Terminal.t)
          =
          fun ?name:(x4196 : string option) ->
            fun ?shell_path:(x4197 : string option) ->
              fun ?shell_args:(x4198 : string list or_string option) ->
                fun () ->
                  Terminal.t_of_js
                    (let x4205 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4205 "createTerminal")
                       "apply"
                       [|x4205;((let x4199 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x4196 with
                                  | Some x4204 ->
                                      ignore
                                        (Ojs.call x4199 "push"
                                           [|(Ojs.string_to_js x4204)|])
                                  | None -> ());
                                 (match x4197 with
                                  | Some x4203 ->
                                      ignore
                                        (Ojs.call x4199 "push"
                                           [|(Ojs.string_to_js x4203)|])
                                  | None -> ());
                                 (match x4198 with
                                  | Some x4200 ->
                                      ignore
                                        (Ojs.call x4199 "push"
                                           [|(or_string_to_js
                                                (fun (x4201 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4201)
                                                x4200)|])
                                  | None -> ());
                                 x4199))|])
        let (create_terminal : options:TerminalOptions.t -> Terminal.t) =
          fun ~options:(x4206 : TerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal" [|(TerminalOptions.t_to_js x4206)|])
        let (create_terminal :
          options:ExtensionTerminalOptions.t -> Terminal.t) =
          fun ~options:(x4207 : ExtensionTerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal"
                 [|(ExtensionTerminalOptions.t_to_js x4207)|])
        let (register_tree_data_provider :
          string -> 'T TreeDataProvider.t -> Disposable.t) =
          fun (x4208 : string) ->
            fun (x4209 : 'T TreeDataProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerTreeDataProvider"
                   [|(Ojs.string_to_js x4208);(TreeDataProvider.t_to_js
                                                 Obj.magic x4209)|])
        let (create_tree_view :
          string -> options:'T TreeViewOptions.t -> 'T TreeView.t) =
          fun (x4211 : string) ->
            fun ~options:(x4212 : 'T TreeViewOptions.t) ->
              TreeView.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "createTreeView"
                   [|(Ojs.string_to_js x4211);(TreeViewOptions.t_to_js
                                                 Obj.magic x4212)|])
        let (register_uri_handler : handler:UriHandler.t -> Disposable.t) =
          fun ~handler:(x4215 : UriHandler.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerUriHandler" [|(UriHandler.t_to_js x4215)|])
        let (register_webview_panel_serializer :
          string -> unknown WebviewPanelSerializer.t -> Disposable.t) =
          fun (x4216 : string) ->
            fun (x4217 : unknown WebviewPanelSerializer.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerWebviewPanelSerializer"
                   [|(Ojs.string_to_js x4216);(WebviewPanelSerializer.t_to_js
                                                 unknown_to_js x4217)|])
        let (register_webview_view_provider :
          string ->
            WebviewViewProvider.t ->
              ?options:RegisterWebviewViewProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4219 : string) ->
            fun (x4220 : WebviewViewProvider.t) ->
              fun
                ?options:(x4221 :
                           RegisterWebviewViewProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4224 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4224
                          "registerWebviewViewProvider") "apply"
                       [|x4224;((let x4222 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4222 "push"
                                      [|(Ojs.string_to_js x4219)|]);
                                 ignore
                                   (Ojs.call x4222 "push"
                                      [|(WebviewViewProvider.t_to_js x4220)|]);
                                 (match x4221 with
                                  | Some x4223 ->
                                      ignore
                                        (Ojs.call x4222 "push"
                                           [|(RegisterWebviewViewProviderOptions.t_to_js
                                                x4223)|])
                                  | None -> ());
                                 x4222))|])
        let (register_custom_editor_provider :
          string ->
            (CustomDocument.t CustomEditorProvider.t,
              CustomDocument.t CustomReadonlyEditorProvider.t,
              CustomTextEditorProvider.t) union3 ->
              ?options:RegisterCustomEditorProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4225 : string) ->
            fun
              (x4226 :
                (CustomDocument.t CustomEditorProvider.t,
                  CustomDocument.t CustomReadonlyEditorProvider.t,
                  CustomTextEditorProvider.t) union3)
              ->
              fun
                ?options:(x4227 :
                           RegisterCustomEditorProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4235 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4235
                          "registerCustomEditorProvider") "apply"
                       [|x4235;((let x4228 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4228 "push"
                                      [|(Ojs.string_to_js x4225)|]);
                                 ignore
                                   (Ojs.call x4228 "push"
                                      [|(union3_to_js
                                           (fun
                                              (x4230 :
                                                CustomDocument.t
                                                  CustomEditorProvider.t)
                                              ->
                                              CustomEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4230)
                                           (fun
                                              (x4232 :
                                                CustomDocument.t
                                                  CustomReadonlyEditorProvider.t)
                                              ->
                                              CustomReadonlyEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4232)
                                           CustomTextEditorProvider.t_to_js
                                           x4226)|]);
                                 (match x4227 with
                                  | Some x4229 ->
                                      ignore
                                        (Ojs.call x4228 "push"
                                           [|(RegisterCustomEditorProviderOptions.t_to_js
                                                x4229)|])
                                  | None -> ());
                                 x4228))|])
        let (register_terminal_link_provider :
          TerminalLink.t TerminalLinkProvider.t -> Disposable.t) =
          fun (x4236 : TerminalLink.t TerminalLinkProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerTerminalLinkProvider"
                 [|(TerminalLinkProvider.t_to_js TerminalLink.t_to_js x4236)|])
        let (register_file_decoration_provider :
          FileDecorationProvider.t -> Disposable.t) =
          fun (x4238 : FileDecorationProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerFileDecorationProvider"
                 [|(FileDecorationProvider.t_to_js x4238)|])
        let (active_color_theme : ColorTheme.t) =
          ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeColorTheme")
        let (on_did_change_active_color_theme : ColorTheme.t Event.t) =
          Event.t_of_js ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveColorTheme")
      end
    module TextDocumentContentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4241 : Ojs.t) -> x4241
        and t_to_js : t -> Ojs.t = fun (x4240 : Ojs.t) -> x4240
        let (range : t -> Range.t) =
          fun (x4242 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4242) "range")
        let (range_offset : t -> int) =
          fun (x4243 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4243) "rangeOffset")
        let (range_length : t -> int) =
          fun (x4244 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4244) "rangeLength")
        let (text : t -> string) =
          fun (x4245 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4245) "text")
      end
    module TextDocumentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4247 : Ojs.t) -> x4247
        and t_to_js : t -> Ojs.t = fun (x4246 : Ojs.t) -> x4246
        let (document : t -> TextDocument.t) =
          fun (x4248 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4248) "document")
        let (content_changes : t -> TextDocumentContentChangeEvent.t list) =
          fun (x4249 : t) ->
            Ojs.list_of_js TextDocumentContentChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4249) "contentChanges")
      end
    module TextDocumentSaveReason =
      struct
        type t = [ `AfterDelay  | `FocusOut ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4252 : Ojs.t) ->
            let x4253 = x4252 in
            match Ojs.int_of_js x4253 with
            | 2 -> `AfterDelay
            | 3 -> `FocusOut
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4251 : [ `AfterDelay  | `FocusOut ]) ->
            match x4251 with
            | `AfterDelay -> Ojs.int_to_js 2
            | `FocusOut -> Ojs.int_to_js 3
      end
    module TextDocumentWillSaveEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4255 : Ojs.t) -> x4255
        and t_to_js : t -> Ojs.t = fun (x4254 : Ojs.t) -> x4254
        let (document : t -> TextDocument.t) =
          fun (x4256 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4256) "document")
        let (reason : t -> TextDocumentSaveReason.t) =
          fun (x4257 : t) ->
            TextDocumentSaveReason.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4257) "reason")
        let (wait_until : t -> TextEdit.t list Promise.t -> unit) =
          fun (x4261 : t) ->
            fun (x4258 : TextEdit.t list Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4261) "waitUntil"
                   [|(Promise.t_to_js
                        (fun (x4259 : TextEdit.t list) ->
                           Ojs.list_to_js TextEdit.t_to_js x4259) x4258)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4264 : t) ->
            fun (x4262 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4264) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4262)|])
      end
    module FileWillCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4266 : Ojs.t) -> x4266
        and t_to_js : t -> Ojs.t = fun (x4265 : Ojs.t) -> x4265
        let (files : t -> Uri.t list) =
          fun (x4267 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4267) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4271 : t) ->
            fun (x4269 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4271) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4269)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4274 : t) ->
            fun (x4272 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4274) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4272)|])
      end
    module FileCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4276 : Ojs.t) -> x4276
        and t_to_js : t -> Ojs.t = fun (x4275 : Ojs.t) -> x4275
        let (files : t -> Uri.t list) =
          fun (x4277 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4277) "files")
      end
    module FileWillDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4280 : Ojs.t) -> x4280
        and t_to_js : t -> Ojs.t = fun (x4279 : Ojs.t) -> x4279
        let (files : t -> Uri.t list) =
          fun (x4281 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4281) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4285 : t) ->
            fun (x4283 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4285) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4283)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4288 : t) ->
            fun (x4286 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4288) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4286)|])
      end
    module FileDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4290 : Ojs.t) -> x4290
        and t_to_js : t -> Ojs.t = fun (x4289 : Ojs.t) -> x4289
        let (files : t -> Uri.t list) =
          fun (x4291 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4291) "files")
      end
    module FileWillRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4294 : Ojs.t) -> x4294
        and t_to_js : t -> Ojs.t = fun (x4293 : Ojs.t) -> x4293
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4296 : Ojs.t) -> x4296
            and t_to_js : t -> Ojs.t = fun (x4295 : Ojs.t) -> x4295
            let (old_uri : t -> Uri.t) =
              fun (x4297 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4297) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4298 : t) ->
                fun (x4299 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4298) "oldUri"
                    (Uri.t_to_js x4299)
            let (new_uri : t -> Uri.t) =
              fun (x4300 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4300) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4301 : t) ->
                fun (x4302 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4301) "newUri"
                    (Uri.t_to_js x4302)
          end
        let (files : t -> File.t list) =
          fun (x4303 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4303) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4307 : t) ->
            fun (x4305 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4307) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4305)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4310 : t) ->
            fun (x4308 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4310) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4308)|])
      end
    module FileRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4312 : Ojs.t) -> x4312
        and t_to_js : t -> Ojs.t = fun (x4311 : Ojs.t) -> x4311
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4314 : Ojs.t) -> x4314
            and t_to_js : t -> Ojs.t = fun (x4313 : Ojs.t) -> x4313
            let (old_uri : t -> Uri.t) =
              fun (x4315 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4315) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4316 : t) ->
                fun (x4317 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4316) "oldUri"
                    (Uri.t_to_js x4317)
            let (new_uri : t -> Uri.t) =
              fun (x4318 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4318) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4319 : t) ->
                fun (x4320 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4319) "newUri"
                    (Uri.t_to_js x4320)
          end
        let (files : t -> File.t list) =
          fun (x4321 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4321) "files")
      end
    module WorkspaceFoldersChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4324 : Ojs.t) -> x4324
        and t_to_js : t -> Ojs.t = fun (x4323 : Ojs.t) -> x4323
        let (added : t -> WorkspaceFolder.t list) =
          fun (x4325 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4325) "added")
        let (removed : t -> WorkspaceFolder.t list) =
          fun (x4327 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4327) "removed")
      end
    module UriWithLanguageId =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4330 : Ojs.t) -> x4330
        and t_to_js : t -> Ojs.t = fun (x4329 : Ojs.t) -> x4329
        let (uri : t -> Uri.t) =
          fun (x4331 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4331) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x4332 : t) ->
            fun (x4333 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4332) "uri" (Uri.t_to_js x4333)
        let (language_id : t -> string) =
          fun (x4334 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4334) "languageId")
        let (set_language_id : t -> string -> unit) =
          fun (x4335 : t) ->
            fun (x4336 : string) ->
              Ojs.set_prop_ascii (t_to_js x4335) "languageId"
                (Ojs.string_to_js x4336)
      end
    module ConfigurationScope =
      struct
        type t =
          (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
            union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4342 : Ojs.t) ->
            union4_of_js TextDocument.t_of_js Uri.t_of_js
              WorkspaceFolder.t_of_js UriWithLanguageId.t_of_js x4342
        and t_to_js : t -> Ojs.t =
          fun
            (x4337 :
              (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
                union4)
            ->
            union4_to_js TextDocument.t_to_js Uri.t_to_js
              WorkspaceFolder.t_to_js UriWithLanguageId.t_to_js x4337
      end
    module ConfigurationChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4348 : Ojs.t) -> x4348
        and t_to_js : t -> Ojs.t = fun (x4347 : Ojs.t) -> x4347
        let (affects_configuration :
          t -> string -> ?scope:ConfigurationScope.t -> unit -> bool) =
          fun (x4353 : t) ->
            fun (x4349 : string) ->
              fun ?scope:(x4350 : ConfigurationScope.t option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x4354 = t_to_js x4353 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4354 "affectsConfiguration")
                       "apply"
                       [|x4354;((let x4351 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4351 "push"
                                      [|(Ojs.string_to_js x4349)|]);
                                 (match x4350 with
                                  | Some x4352 ->
                                      ignore
                                        (Ojs.call x4351 "push"
                                           [|(ConfigurationScope.t_to_js
                                                x4352)|])
                                  | None -> ());
                                 x4351))|])
      end
    module Workspace =
      struct
        module RegisterFileSystemProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4356 : Ojs.t) -> x4356
            and t_to_js : t -> Ojs.t = fun (x4355 : Ojs.t) -> x4355
            let (is_case_sensitive : t -> bool) =
              fun (x4357 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4357) "isCaseSensitive")
            let (is_readonly : t -> bool) =
              fun (x4358 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4358) "isReadonly")
          end
        module OpenTextDocumentOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4360 : Ojs.t) -> x4360
            and t_to_js : t -> Ojs.t = fun (x4359 : Ojs.t) -> x4359
            let (language : t -> string) =
              fun (x4361 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4361) "language")
            let (set_language : t -> string -> unit) =
              fun (x4362 : t) ->
                fun (x4363 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4362) "language"
                    (Ojs.string_to_js x4363)
            let (content : t -> string) =
              fun (x4364 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4364) "content")
            let (set_content : t -> string -> unit) =
              fun (x4365 : t) ->
                fun (x4366 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4365) "content"
                    (Ojs.string_to_js x4366)
          end
        module WorkspaceFolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4368 : Ojs.t) -> x4368
            and t_to_js : t -> Ojs.t = fun (x4367 : Ojs.t) -> x4367
            let (uri : t -> Uri.t) =
              fun (x4369 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4369) "uri")
            let (set_uri : t -> Uri.t -> unit) =
              fun (x4370 : t) ->
                fun (x4371 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4370) "uri"
                    (Uri.t_to_js x4371)
            let (name : t -> string) =
              fun (x4372 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4372) "name")
            let (set_name : t -> string -> unit) =
              fun (x4373 : t) ->
                fun (x4374 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4373) "name"
                    (Ojs.string_to_js x4374)
          end
        let (fs : FileSystem.t) =
          FileSystem.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "fs")
        let (root_path : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "rootPath")
        let (workspace_folders : WorkspaceFolder.t list or_undefined) =
          or_undefined_of_js
            (fun (x4376 : Ojs.t) ->
               Ojs.list_of_js WorkspaceFolder.t_of_js x4376)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFolders")
        let (name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "name")
        let (workspace_file : Uri.t or_undefined) =
          or_undefined_of_js Uri.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFile")
        let (on_did_change_workspace_folders :
          WorkspaceFoldersChangeEvent.t Event.t) =
          Event.t_of_js WorkspaceFoldersChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeWorkspaceFolders")
        let (get_workspace_folder :
          uri:Uri.t -> WorkspaceFolder.t or_undefined) =
          fun ~uri:(x4381 : Uri.t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "getWorkspaceFolder" [|(Uri.t_to_js x4381)|])
        let (as_relative_path :
          Uri.t or_string -> ?include_workspace_folder:bool -> unit -> string)
          =
          fun (x4383 : Uri.t or_string) ->
            fun ?include_workspace_folder:(x4384 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x4388 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4388 "asRelativePath")
                     "apply"
                     [|x4388;((let x4385 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4385 "push"
                                    [|(or_string_to_js Uri.t_to_js x4383)|]);
                               (match x4384 with
                                | Some x4386 ->
                                    ignore
                                      (Ojs.call x4385 "push"
                                         [|(Ojs.bool_to_js x4386)|])
                                | None -> ());
                               x4385))|])
        let (update_workspace_folders :
          start:int ->
            delete_count:int or_null_or_undefined ->
              workspace_folders_to_add:WorkspaceFolder.t list -> bool)
          =
          fun ~start:(x4389 : int) ->
            fun ~delete_count:(x4390 : int or_null_or_undefined) ->
              fun ~workspace_folders_to_add:(x4391 : WorkspaceFolder.t list)
                ->
                Ojs.bool_of_js
                  (let x4395 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4395 "updateWorkspaceFolders")
                     "apply"
                     [|x4395;((let x4392 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4392 "push"
                                    [|(Ojs.int_to_js x4389)|]);
                               ignore
                                 (Ojs.call x4392 "push"
                                    [|(or_null_or_undefined_to_js
                                         Ojs.int_to_js x4390)|]);
                               List.iter
                                 (fun (x4393 : WorkspaceFolder.t) ->
                                    ignore
                                      (Ojs.call x4392 "push"
                                         [|(WorkspaceFolder.t_to_js x4393)|]))
                                 x4391;
                               x4392))|])
        let (create_file_system_watcher :
          GlobPattern.t ->
            ?ignore_create_events:bool ->
              ?ignore_change_events:bool ->
                ?ignore_delete_events:bool -> unit -> FileSystemWatcher.t)
          =
          fun (x4396 : GlobPattern.t) ->
            fun ?ignore_create_events:(x4397 : bool option) ->
              fun ?ignore_change_events:(x4398 : bool option) ->
                fun ?ignore_delete_events:(x4399 : bool option) ->
                  fun () ->
                    FileSystemWatcher.t_of_js
                      (let x4404 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4404 "createFileSystemWatcher")
                         "apply"
                         [|x4404;((let x4400 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4400 "push"
                                        [|(GlobPattern.t_to_js x4396)|]);
                                   (match x4397 with
                                    | Some x4403 ->
                                        ignore
                                          (Ojs.call x4400 "push"
                                             [|(Ojs.bool_to_js x4403)|])
                                    | None -> ());
                                   (match x4398 with
                                    | Some x4402 ->
                                        ignore
                                          (Ojs.call x4400 "push"
                                             [|(Ojs.bool_to_js x4402)|])
                                    | None -> ());
                                   (match x4399 with
                                    | Some x4401 ->
                                        ignore
                                          (Ojs.call x4400 "push"
                                             [|(Ojs.bool_to_js x4401)|])
                                    | None -> ());
                                   x4400))|])
        let (find_files :
          GlobPattern.t ->
            ?exclude:GlobPattern.t or_null ->
              ?max_results:int ->
                ?token:CancellationToken.t -> unit -> Uri.t list Promise.t)
          =
          fun (x4405 : GlobPattern.t) ->
            fun ?exclude:(x4406 : GlobPattern.t or_null option) ->
              fun ?max_results:(x4407 : int option) ->
                fun ?token:(x4408 : CancellationToken.t option) ->
                  fun () ->
                    Promise.t_of_js
                      (fun (x4415 : Ojs.t) ->
                         Ojs.list_of_js Uri.t_of_js x4415)
                      (let x4414 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call (Ojs.get_prop_ascii x4414 "findFiles")
                         "apply"
                         [|x4414;((let x4409 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4409 "push"
                                        [|(GlobPattern.t_to_js x4405)|]);
                                   (match x4406 with
                                    | Some x4412 ->
                                        ignore
                                          (Ojs.call x4409 "push"
                                             [|(or_null_to_js
                                                  GlobPattern.t_to_js x4412)|])
                                    | None -> ());
                                   (match x4407 with
                                    | Some x4411 ->
                                        ignore
                                          (Ojs.call x4409 "push"
                                             [|(Ojs.int_to_js x4411)|])
                                    | None -> ());
                                   (match x4408 with
                                    | Some x4410 ->
                                        ignore
                                          (Ojs.call x4409 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4410)|])
                                    | None -> ());
                                   x4409))|])
        let (save_all : ?include_untitled:bool -> unit -> bool Promise.t) =
          fun ?include_untitled:(x4417 : bool option) ->
            fun () ->
              Promise.t_of_js Ojs.bool_of_js
                (let x4420 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x4420 "saveAll") "apply"
                   [|x4420;((let x4418 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4417 with
                              | Some x4419 ->
                                  ignore
                                    (Ojs.call x4418 "push"
                                       [|(Ojs.bool_to_js x4419)|])
                              | None -> ());
                             x4418))|])
        let (apply_edit : WorkspaceEdit.t -> bool Promise.t) =
          fun (x4422 : WorkspaceEdit.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "applyEdit" [|(WorkspaceEdit.t_to_js x4422)|])
        let (text_documents : TextDocument.t list) =
          Ojs.list_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "textDocuments")
        let (open_text_document :
          [ `Uri of Uri.t  | `Filename of string 
          | `Interactive of OpenTextDocumentOptions.t option ] ->
            TextDocument.t Promise.t)
          =
          fun
            (x4425 :
              [ `Uri of Uri.t  | `Filename of string 
              | `Interactive of OpenTextDocumentOptions.t option ])
            ->
            Promise.t_of_js TextDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "openTextDocument"
                 [|((match x4425 with
                     | `Uri x4426 -> Uri.t_to_js x4426
                     | `Filename x4427 -> Ojs.string_to_js x4427
                     | `Interactive x4428 ->
                         Ojs.option_to_js OpenTextDocumentOptions.t_to_js
                           x4428))|])
        let (register_text_document_content_provider :
          scheme:string ->
            provider:TextDocumentContentProvider.t -> Disposable.t)
          =
          fun ~scheme:(x4431 : string) ->
            fun ~provider:(x4432 : TextDocumentContentProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTextDocumentContentProvider"
                   [|(Ojs.string_to_js x4431);(TextDocumentContentProvider.t_to_js
                                                 x4432)|])
        let (on_did_open_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidOpenTextDocument")
        let (on_did_close_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCloseTextDocument")
        let (on_did_change_text_document : TextDocumentChangeEvent.t Event.t)
          =
          Event.t_of_js TextDocumentChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeTextDocument")
        let (on_will_save_text_document :
          TextDocumentWillSaveEvent.t Event.t) =
          Event.t_of_js TextDocumentWillSaveEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillSaveTextDocument")
        let (on_did_save_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidSaveTextDocument")
        let (on_will_create_files : FileWillCreateEvent.t Event.t) =
          Event.t_of_js FileWillCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillCreateFiles")
        let (on_did_create_files : FileCreateEvent.t Event.t) =
          Event.t_of_js FileCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCreateFiles")
        let (on_will_delete_files : FileWillDeleteEvent.t Event.t) =
          Event.t_of_js FileWillDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillDeleteFiles")
        let (on_did_delete_files : FileDeleteEvent.t Event.t) =
          Event.t_of_js FileDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidDeleteFiles")
        let (on_will_rename_files : FileWillRenameEvent.t Event.t) =
          Event.t_of_js FileWillRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillRenameFiles")
        let (on_did_rename_files : FileRenameEvent.t Event.t) =
          Event.t_of_js FileRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidRenameFiles")
        let (get_configuration :
          ?section:string or_undefined ->
            ?scope:ConfigurationScope.t or_null ->
              unit -> WorkspaceConfiguration.t)
          =
          fun ?section:(x4444 : string or_undefined option) ->
            fun ?scope:(x4445 : ConfigurationScope.t or_null option) ->
              fun () ->
                WorkspaceConfiguration.t_of_js
                  (let x4451 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4451 "getConfiguration")
                     "apply"
                     [|x4451;((let x4446 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4444 with
                                | Some x4449 ->
                                    ignore
                                      (Ojs.call x4446 "push"
                                         [|(or_undefined_to_js
                                              Ojs.string_to_js x4449)|])
                                | None -> ());
                               (match x4445 with
                                | Some x4447 ->
                                    ignore
                                      (Ojs.call x4446 "push"
                                         [|(or_null_to_js
                                              ConfigurationScope.t_to_js
                                              x4447)|])
                                | None -> ());
                               x4446))|])
        let (on_did_change_configuration :
          ConfigurationChangeEvent.t Event.t) =
          Event.t_of_js ConfigurationChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeConfiguration")
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x4453 : string) ->
            fun ~provider:(x4454 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x4453);(TaskProvider.t_to_js
                                                 Task.t_to_js x4454)|])
        let (register_file_system_provider :
          scheme:string ->
            provider:FileSystemProvider.t ->
              ?options:RegisterFileSystemProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun ~scheme:(x4456 : string) ->
            fun ~provider:(x4457 : FileSystemProvider.t) ->
              fun
                ?options:(x4458 : RegisterFileSystemProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4461 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "workspace" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4461 "registerFileSystemProvider")
                       "apply"
                       [|x4461;((let x4459 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4459 "push"
                                      [|(Ojs.string_to_js x4456)|]);
                                 ignore
                                   (Ojs.call x4459 "push"
                                      [|(FileSystemProvider.t_to_js x4457)|]);
                                 (match x4458 with
                                  | Some x4460 ->
                                      ignore
                                        (Ojs.call x4459 "push"
                                           [|(RegisterFileSystemProviderOptions.t_to_js
                                                x4460)|])
                                  | None -> ());
                                 x4459))|])
      end
    module Languages =
      struct
        let (get_languages : unit -> string list Promise.t) =
          fun () ->
            Promise.t_of_js
              (fun (x4462 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4462)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getLanguages" [||])
        let (set_text_document_language :
          document:TextDocument.t ->
            language_id:string -> TextDocument.t Promise.t)
          =
          fun ~document:(x4464 : TextDocument.t) ->
            fun ~language_id:(x4465 : string) ->
              Promise.t_of_js TextDocument.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setTextDocumentLanguage"
                   [|(TextDocument.t_to_js x4464);(Ojs.string_to_js x4465)|])
        let (match_ :
          selector:DocumentSelector.t -> document:TextDocument.t -> int) =
          fun ~selector:(x4467 : DocumentSelector.t) ->
            fun ~document:(x4468 : TextDocument.t) ->
              Ojs.int_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "match"
                   [|(DocumentSelector.t_to_js x4467);(TextDocument.t_to_js
                                                         x4468)|])
        let (on_did_change_diagnostics : DiagnosticChangeEvent.t Event.t) =
          Event.t_of_js DiagnosticChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "languages") "onDidChangeDiagnostics")
        let (get_diagnostics : resource:Uri.t -> Diagnostic.t list) =
          fun ~resource:(x4470 : Uri.t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [|(Uri.t_to_js x4470)|])
        let (get_diagnostics : unit -> (Uri.t * Diagnostic.t list) list) =
          fun () ->
            Ojs.list_of_js
              (fun (x4472 : Ojs.t) ->
                 let x4473 = x4472 in
                 ((Uri.t_of_js (Ojs.array_get x4473 0)),
                   (Ojs.list_of_js Diagnostic.t_of_js (Ojs.array_get x4473 1))))
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [||])
        let (create_diagnostic_collection :
          ?name:string -> unit -> DiagnosticCollection.t) =
          fun ?name:(x4475 : string option) ->
            fun () ->
              DiagnosticCollection.t_of_js
                (let x4478 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4478 "createDiagnosticCollection")
                   "apply"
                   [|x4478;((let x4476 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4475 with
                              | Some x4477 ->
                                  ignore
                                    (Ojs.call x4476 "push"
                                       [|(Ojs.string_to_js x4477)|])
                              | None -> ());
                             x4476))|])
        let (register_completion_item_provider :
          selector:DocumentSelector.t ->
            provider:CompletionItem.t CompletionItemProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4479 : DocumentSelector.t) ->
            fun ~provider:(x4480 : CompletionItem.t CompletionItemProvider.t)
              ->
              fun ~trigger_characters:(x4481 : string list) ->
                Disposable.t_of_js
                  (let x4485 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4485
                        "registerCompletionItemProvider") "apply"
                     [|x4485;((let x4482 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4482 "push"
                                    [|(DocumentSelector.t_to_js x4479)|]);
                               ignore
                                 (Ojs.call x4482 "push"
                                    [|(CompletionItemProvider.t_to_js
                                         CompletionItem.t_to_js x4480)|]);
                               List.iter
                                 (fun (x4483 : string) ->
                                    ignore
                                      (Ojs.call x4482 "push"
                                         [|(Ojs.string_to_js x4483)|])) x4481;
                               x4482))|])
        let (register_code_actions_provider :
          selector:DocumentSelector.t ->
            provider:CodeAction.t CodeActionProvider.t ->
              ?metadata:CodeActionProviderMetadata.t -> unit -> Disposable.t)
          =
          fun ~selector:(x4486 : DocumentSelector.t) ->
            fun ~provider:(x4487 : CodeAction.t CodeActionProvider.t) ->
              fun ?metadata:(x4488 : CodeActionProviderMetadata.t option) ->
                fun () ->
                  Disposable.t_of_js
                    (let x4492 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4492
                          "registerCodeActionsProvider") "apply"
                       [|x4492;((let x4489 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4489 "push"
                                      [|(DocumentSelector.t_to_js x4486)|]);
                                 ignore
                                   (Ojs.call x4489 "push"
                                      [|(CodeActionProvider.t_to_js
                                           CodeAction.t_to_js x4487)|]);
                                 (match x4488 with
                                  | Some x4490 ->
                                      ignore
                                        (Ojs.call x4489 "push"
                                           [|(CodeActionProviderMetadata.t_to_js
                                                x4490)|])
                                  | None -> ());
                                 x4489))|])
        let (register_code_lens_provider :
          selector:DocumentSelector.t ->
            provider:CodeLens.t CodeLensProvider.t -> Disposable.t)
          =
          fun ~selector:(x4493 : DocumentSelector.t) ->
            fun ~provider:(x4494 : CodeLens.t CodeLensProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCodeLensProvider"
                   [|(DocumentSelector.t_to_js x4493);(CodeLensProvider.t_to_js
                                                         CodeLens.t_to_js
                                                         x4494)|])
        let (register_definition_provider :
          selector:DocumentSelector.t ->
            provider:DefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4496 : DocumentSelector.t) ->
            fun ~provider:(x4497 : DefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4496);(DefinitionProvider.t_to_js
                                                         x4497)|])
        let (register_implementation_provider :
          selector:DocumentSelector.t ->
            provider:ImplementationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4498 : DocumentSelector.t) ->
            fun ~provider:(x4499 : ImplementationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerImplementationProvider"
                   [|(DocumentSelector.t_to_js x4498);(ImplementationProvider.t_to_js
                                                         x4499)|])
        let (register_type_definition_provider :
          selector:DocumentSelector.t ->
            provider:TypeDefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4500 : DocumentSelector.t) ->
            fun ~provider:(x4501 : TypeDefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerTypeDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4500);(TypeDefinitionProvider.t_to_js
                                                         x4501)|])
        let (register_declaration_provider :
          selector:DocumentSelector.t ->
            provider:DeclarationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4502 : DocumentSelector.t) ->
            fun ~provider:(x4503 : DeclarationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDeclarationProvider"
                   [|(DocumentSelector.t_to_js x4502);(DeclarationProvider.t_to_js
                                                         x4503)|])
        let (register_hover_provider :
          selector:DocumentSelector.t ->
            provider:HoverProvider.t -> Disposable.t)
          =
          fun ~selector:(x4504 : DocumentSelector.t) ->
            fun ~provider:(x4505 : HoverProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerHoverProvider"
                   [|(DocumentSelector.t_to_js x4504);(HoverProvider.t_to_js
                                                         x4505)|])
        let (register_evaluatable_expression_provider :
          selector:DocumentSelector.t ->
            provider:EvaluatableExpressionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4506 : DocumentSelector.t) ->
            fun ~provider:(x4507 : EvaluatableExpressionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerEvaluatableExpressionProvider"
                   [|(DocumentSelector.t_to_js x4506);(EvaluatableExpressionProvider.t_to_js
                                                         x4507)|])
        let (register_inline_values_provider :
          selector:DocumentSelector.t ->
            provider:InlineValuesProvider.t -> Disposable.t)
          =
          fun ~selector:(x4508 : DocumentSelector.t) ->
            fun ~provider:(x4509 : InlineValuesProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerInlineValuesProvider"
                   [|(DocumentSelector.t_to_js x4508);(InlineValuesProvider.t_to_js
                                                         x4509)|])
        let (register_document_highlight_provider :
          selector:DocumentSelector.t ->
            provider:DocumentHighlightProvider.t -> Disposable.t)
          =
          fun ~selector:(x4510 : DocumentSelector.t) ->
            fun ~provider:(x4511 : DocumentHighlightProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentHighlightProvider"
                   [|(DocumentSelector.t_to_js x4510);(DocumentHighlightProvider.t_to_js
                                                         x4511)|])
        let (register_document_symbol_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSymbolProvider.t ->
              ?meta_data:DocumentSymbolProviderMetadata.t ->
                unit -> Disposable.t)
          =
          fun ~selector:(x4512 : DocumentSelector.t) ->
            fun ~provider:(x4513 : DocumentSymbolProvider.t) ->
              fun
                ?meta_data:(x4514 : DocumentSymbolProviderMetadata.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4517 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4517
                          "registerDocumentSymbolProvider") "apply"
                       [|x4517;((let x4515 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4515 "push"
                                      [|(DocumentSelector.t_to_js x4512)|]);
                                 ignore
                                   (Ojs.call x4515 "push"
                                      [|(DocumentSymbolProvider.t_to_js x4513)|]);
                                 (match x4514 with
                                  | Some x4516 ->
                                      ignore
                                        (Ojs.call x4515 "push"
                                           [|(DocumentSymbolProviderMetadata.t_to_js
                                                x4516)|])
                                  | None -> ());
                                 x4515))|])
        let (register_workspace_symbol_provider :
          provider:SymbolInformation.t WorkspaceSymbolProvider.t ->
            Disposable.t)
          =
          fun
            ~provider:(x4518 : SymbolInformation.t WorkspaceSymbolProvider.t)
            ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "registerWorkspaceSymbolProvider"
                 [|(WorkspaceSymbolProvider.t_to_js SymbolInformation.t_to_js
                      x4518)|])
        let (register_reference_provider :
          selector:DocumentSelector.t ->
            provider:ReferenceProvider.t -> Disposable.t)
          =
          fun ~selector:(x4520 : DocumentSelector.t) ->
            fun ~provider:(x4521 : ReferenceProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerReferenceProvider"
                   [|(DocumentSelector.t_to_js x4520);(ReferenceProvider.t_to_js
                                                         x4521)|])
        let (register_rename_provider :
          selector:DocumentSelector.t ->
            provider:RenameProvider.t -> Disposable.t)
          =
          fun ~selector:(x4522 : DocumentSelector.t) ->
            fun ~provider:(x4523 : RenameProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerRenameProvider"
                   [|(DocumentSelector.t_to_js x4522);(RenameProvider.t_to_js
                                                         x4523)|])
        let (register_document_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4524 : DocumentSelector.t) ->
            fun ~provider:(x4525 : DocumentSemanticTokensProvider.t) ->
              fun ~legend:(x4526 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4524);(DocumentSemanticTokensProvider.t_to_js
                                                           x4525);(SemanticTokensLegend.t_to_js
                                                                    x4526)|])
        let (register_document_range_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4527 : DocumentSelector.t) ->
            fun ~provider:(x4528 : DocumentRangeSemanticTokensProvider.t) ->
              fun ~legend:(x4529 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentRangeSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4527);(DocumentRangeSemanticTokensProvider.t_to_js
                                                           x4528);(SemanticTokensLegend.t_to_js
                                                                    x4529)|])
        let (register_document_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4530 : DocumentSelector.t) ->
            fun ~provider:(x4531 : DocumentFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4530);(DocumentFormattingEditProvider.t_to_js
                                                         x4531)|])
        let (register_document_range_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4532 : DocumentSelector.t) ->
            fun ~provider:(x4533 : DocumentRangeFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentRangeFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4532);(DocumentRangeFormattingEditProvider.t_to_js
                                                         x4533)|])
        let (register_on_type_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:OnTypeFormattingEditProvider.t ->
              first_trigger_character:string ->
                more_trigger_character:string list -> Disposable.t)
          =
          fun ~selector:(x4534 : DocumentSelector.t) ->
            fun ~provider:(x4535 : OnTypeFormattingEditProvider.t) ->
              fun ~first_trigger_character:(x4536 : string) ->
                fun ~more_trigger_character:(x4537 : string list) ->
                  Disposable.t_of_js
                    (let x4540 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4540
                          "registerOnTypeFormattingEditProvider") "apply"
                       [|x4540;((let x4538 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4538 "push"
                                      [|(DocumentSelector.t_to_js x4534)|]);
                                 ignore
                                   (Ojs.call x4538 "push"
                                      [|(OnTypeFormattingEditProvider.t_to_js
                                           x4535)|]);
                                 ignore
                                   (Ojs.call x4538 "push"
                                      [|(Ojs.string_to_js x4536)|]);
                                 List.iter
                                   (fun (x4539 : string) ->
                                      ignore
                                        (Ojs.call x4538 "push"
                                           [|(Ojs.string_to_js x4539)|]))
                                   x4537;
                                 x4538))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4541 : DocumentSelector.t) ->
            fun ~provider:(x4542 : SignatureHelpProvider.t) ->
              fun ~trigger_characters:(x4543 : string list) ->
                Disposable.t_of_js
                  (let x4546 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4546
                        "registerSignatureHelpProvider") "apply"
                     [|x4546;((let x4544 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4544 "push"
                                    [|(DocumentSelector.t_to_js x4541)|]);
                               ignore
                                 (Ojs.call x4544 "push"
                                    [|(SignatureHelpProvider.t_to_js x4542)|]);
                               List.iter
                                 (fun (x4545 : string) ->
                                    ignore
                                      (Ojs.call x4544 "push"
                                         [|(Ojs.string_to_js x4545)|])) x4543;
                               x4544))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              metadata:SignatureHelpProviderMetadata.t -> Disposable.t)
          =
          fun ~selector:(x4547 : DocumentSelector.t) ->
            fun ~provider:(x4548 : SignatureHelpProvider.t) ->
              fun ~metadata:(x4549 : SignatureHelpProviderMetadata.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerSignatureHelpProvider"
                     [|(DocumentSelector.t_to_js x4547);(SignatureHelpProvider.t_to_js
                                                           x4548);(SignatureHelpProviderMetadata.t_to_js
                                                                    x4549)|])
        let (register_document_link_provider :
          selector:DocumentSelector.t ->
            provider:DocumentLink.t DocumentLinkProvider.t -> Disposable.t)
          =
          fun ~selector:(x4550 : DocumentSelector.t) ->
            fun ~provider:(x4551 : DocumentLink.t DocumentLinkProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentLinkProvider"
                   [|(DocumentSelector.t_to_js x4550);(DocumentLinkProvider.t_to_js
                                                         DocumentLink.t_to_js
                                                         x4551)|])
        let (register_color_provider :
          selector:DocumentSelector.t ->
            provider:DocumentColorProvider.t -> Disposable.t)
          =
          fun ~selector:(x4553 : DocumentSelector.t) ->
            fun ~provider:(x4554 : DocumentColorProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerColorProvider"
                   [|(DocumentSelector.t_to_js x4553);(DocumentColorProvider.t_to_js
                                                         x4554)|])
        let (register_folding_range_provider :
          selector:DocumentSelector.t ->
            provider:FoldingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4555 : DocumentSelector.t) ->
            fun ~provider:(x4556 : FoldingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerFoldingRangeProvider"
                   [|(DocumentSelector.t_to_js x4555);(FoldingRangeProvider.t_to_js
                                                         x4556)|])
        let (register_selection_range_provider :
          selector:DocumentSelector.t ->
            provider:SelectionRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4557 : DocumentSelector.t) ->
            fun ~provider:(x4558 : SelectionRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerSelectionRangeProvider"
                   [|(DocumentSelector.t_to_js x4557);(SelectionRangeProvider.t_to_js
                                                         x4558)|])
        let (register_call_hierarchy_provider :
          selector:DocumentSelector.t ->
            provider:CallHierarchyProvider.t -> Disposable.t)
          =
          fun ~selector:(x4559 : DocumentSelector.t) ->
            fun ~provider:(x4560 : CallHierarchyProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCallHierarchyProvider"
                   [|(DocumentSelector.t_to_js x4559);(CallHierarchyProvider.t_to_js
                                                         x4560)|])
        let (register_linked_editing_range_provider :
          selector:DocumentSelector.t ->
            provider:LinkedEditingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4561 : DocumentSelector.t) ->
            fun ~provider:(x4562 : LinkedEditingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerLinkedEditingRangeProvider"
                   [|(DocumentSelector.t_to_js x4561);(LinkedEditingRangeProvider.t_to_js
                                                         x4562)|])
        let (set_language_configuration :
          language:string ->
            configuration:LanguageConfiguration.t -> Disposable.t)
          =
          fun ~language:(x4563 : string) ->
            fun ~configuration:(x4564 : LanguageConfiguration.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setLanguageConfiguration"
                   [|(Ojs.string_to_js x4563);(LanguageConfiguration.t_to_js
                                                 x4564)|])
      end
    module SourceControlInputBox =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4566 : Ojs.t) -> x4566
        and t_to_js : t -> Ojs.t = fun (x4565 : Ojs.t) -> x4565
        let (value : t -> string) =
          fun (x4567 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4567) "value")
        let (set_value : t -> string -> unit) =
          fun (x4568 : t) ->
            fun (x4569 : string) ->
              Ojs.set_prop_ascii (t_to_js x4568) "value"
                (Ojs.string_to_js x4569)
        let (placeholder : t -> string) =
          fun (x4570 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4570) "placeholder")
        let (set_placeholder : t -> string -> unit) =
          fun (x4571 : t) ->
            fun (x4572 : string) ->
              Ojs.set_prop_ascii (t_to_js x4571) "placeholder"
                (Ojs.string_to_js x4572)
        let (visible : t -> bool) =
          fun (x4573 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4573) "visible")
        let (set_visible : t -> bool -> unit) =
          fun (x4574 : t) ->
            fun (x4575 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4574) "visible"
                (Ojs.bool_to_js x4575)
      end
    module QuickDiffProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4577 : Ojs.t) -> x4577
        and t_to_js : t -> Ojs.t = fun (x4576 : Ojs.t) -> x4576
        let (provide_original_resource :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> Uri.t ProviderResult.t)
          =
          fun (x4580 : t) ->
            fun ~uri:(x4578 : Uri.t) ->
              fun ~token:(x4579 : CancellationToken.t) ->
                ProviderResult.t_of_js Uri.t_of_js
                  (Ojs.call (t_to_js x4580) "provideOriginalResource"
                     [|(Uri.t_to_js x4578);(CancellationToken.t_to_js x4579)|])
      end
    module SourceControlResourceThemableDecorations =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4583 : Ojs.t) -> x4583
        and t_to_js : t -> Ojs.t = fun (x4582 : Ojs.t) -> x4582
        let (icon_path : t -> Uri.t or_string) =
          fun (x4584 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4584) "iconPath")
      end
    module SourceControlResourceDecorations =
      struct
        include struct include SourceControlResourceThemableDecorations end
        let (strike_through : t -> bool) =
          fun (x4586 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4586) "strikeThrough")
        let (faded : t -> bool) =
          fun (x4587 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4587) "faded")
        let (tooltip : t -> string) =
          fun (x4588 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4588) "tooltip")
        let (light : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4589 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4589) "light")
        let (dark : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4590 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4590) "dark")
      end
    module SourceControlResourceState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4592 : Ojs.t) -> x4592
        and t_to_js : t -> Ojs.t = fun (x4591 : Ojs.t) -> x4591
        let (resource_uri : t -> Uri.t) =
          fun (x4593 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4593) "resourceUri")
        let (command : t -> Command.t) =
          fun (x4594 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x4594) "command")
        let (decorations : t -> SourceControlResourceDecorations.t) =
          fun (x4595 : t) ->
            SourceControlResourceDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4595) "decorations")
        let (context_value : t -> string) =
          fun (x4596 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4596) "contextValue")
      end
    module SourceControlResourceGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4598 : Ojs.t) -> x4598
        and t_to_js : t -> Ojs.t = fun (x4597 : Ojs.t) -> x4597
        let (id : t -> string) =
          fun (x4599 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4599) "id")
        let (label : t -> string) =
          fun (x4600 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4600) "label")
        let (set_label : t -> string -> unit) =
          fun (x4601 : t) ->
            fun (x4602 : string) ->
              Ojs.set_prop_ascii (t_to_js x4601) "label"
                (Ojs.string_to_js x4602)
        let (hide_when_empty : t -> bool) =
          fun (x4603 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4603) "hideWhenEmpty")
        let (set_hide_when_empty : t -> bool -> unit) =
          fun (x4604 : t) ->
            fun (x4605 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4604) "hideWhenEmpty"
                (Ojs.bool_to_js x4605)
        let (resource_states : t -> SourceControlResourceState.t list) =
          fun (x4606 : t) ->
            Ojs.list_of_js SourceControlResourceState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4606) "resourceStates")
        let (set_resource_states :
          t -> SourceControlResourceState.t list -> unit) =
          fun (x4608 : t) ->
            fun (x4609 : SourceControlResourceState.t list) ->
              Ojs.set_prop_ascii (t_to_js x4608) "resourceStates"
                (Ojs.list_to_js SourceControlResourceState.t_to_js x4609)
        let (dispose : t -> unit) =
          fun (x4611 : t) -> ignore (Ojs.call (t_to_js x4611) "dispose" [||])
      end
    module SourceControl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4613 : Ojs.t) -> x4613
        and t_to_js : t -> Ojs.t = fun (x4612 : Ojs.t) -> x4612
        let (id : t -> string) =
          fun (x4614 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4614) "id")
        let (label : t -> string) =
          fun (x4615 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4615) "label")
        let (root_uri : t -> Uri.t or_undefined) =
          fun (x4616 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4616) "rootUri")
        let (input_box : t -> SourceControlInputBox.t) =
          fun (x4618 : t) ->
            SourceControlInputBox.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4618) "inputBox")
        let (count : t -> int) =
          fun (x4619 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4619) "count")
        let (set_count : t -> int -> unit) =
          fun (x4620 : t) ->
            fun (x4621 : int) ->
              Ojs.set_prop_ascii (t_to_js x4620) "count"
                (Ojs.int_to_js x4621)
        let (quick_diff_provider : t -> QuickDiffProvider.t) =
          fun (x4622 : t) ->
            QuickDiffProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4622) "quickDiffProvider")
        let (set_quick_diff_provider : t -> QuickDiffProvider.t -> unit) =
          fun (x4623 : t) ->
            fun (x4624 : QuickDiffProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x4623) "quickDiffProvider"
                (QuickDiffProvider.t_to_js x4624)
        let (commit_template : t -> string) =
          fun (x4625 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4625) "commitTemplate")
        let (set_commit_template : t -> string -> unit) =
          fun (x4626 : t) ->
            fun (x4627 : string) ->
              Ojs.set_prop_ascii (t_to_js x4626) "commitTemplate"
                (Ojs.string_to_js x4627)
        let (accept_input_command : t -> Command.t) =
          fun (x4628 : t) ->
            Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4628) "acceptInputCommand")
        let (set_accept_input_command : t -> Command.t -> unit) =
          fun (x4629 : t) ->
            fun (x4630 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x4629) "acceptInputCommand"
                (Command.t_to_js x4630)
        let (status_bar_commands : t -> Command.t list) =
          fun (x4631 : t) ->
            Ojs.list_of_js Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4631) "statusBarCommands")
        let (set_status_bar_commands : t -> Command.t list -> unit) =
          fun (x4633 : t) ->
            fun (x4634 : Command.t list) ->
              Ojs.set_prop_ascii (t_to_js x4633) "statusBarCommands"
                (Ojs.list_to_js Command.t_to_js x4634)
        let (create_resource_group :
          t -> id:string -> label:string -> SourceControlResourceGroup.t) =
          fun (x4638 : t) ->
            fun ~id:(x4636 : string) ->
              fun ~label:(x4637 : string) ->
                SourceControlResourceGroup.t_of_js
                  (Ojs.call (t_to_js x4638) "createResourceGroup"
                     [|(Ojs.string_to_js x4636);(Ojs.string_to_js x4637)|])
        let (dispose : t -> unit) =
          fun (x4639 : t) -> ignore (Ojs.call (t_to_js x4639) "dispose" [||])
      end
    module Scm =
      struct
        let (input_box : SourceControlInputBox.t) =
          SourceControlInputBox.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "scm") "inputBox")
        let (create_source_control :
          id:string ->
            label:string -> ?root_uri:Uri.t -> unit -> SourceControl.t)
          =
          fun ~id:(x4640 : string) ->
            fun ~label:(x4641 : string) ->
              fun ?root_uri:(x4642 : Uri.t option) ->
                fun () ->
                  SourceControl.t_of_js
                    (let x4645 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "scm" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4645 "createSourceControl")
                       "apply"
                       [|x4645;((let x4643 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4643 "push"
                                      [|(Ojs.string_to_js x4640)|]);
                                 ignore
                                   (Ojs.call x4643 "push"
                                      [|(Ojs.string_to_js x4641)|]);
                                 (match x4642 with
                                  | Some x4644 ->
                                      ignore
                                        (Ojs.call x4643 "push"
                                           [|(Uri.t_to_js x4644)|])
                                  | None -> ());
                                 x4643))|])
      end
    module DebugProtocolMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4647 : Ojs.t) -> x4647
        and t_to_js : t -> Ojs.t = fun (x4646 : Ojs.t) -> x4646
      end
    module DebugProtocolSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4649 : Ojs.t) -> x4649
        and t_to_js : t -> Ojs.t = fun (x4648 : Ojs.t) -> x4648
      end
    module Breakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4651 : Ojs.t) -> x4651
        and t_to_js : t -> Ojs.t = fun (x4650 : Ojs.t) -> x4650
        let (id : t -> string) =
          fun (x4652 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4652) "id")
        let (enabled : t -> bool) =
          fun (x4653 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4653) "enabled")
        let (condition : t -> string) =
          fun (x4654 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4654) "condition")
        let (hit_condition : t -> string) =
          fun (x4655 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4655) "hitCondition")
        let (log_message : t -> string) =
          fun (x4656 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4656) "logMessage")
        let (create :
          ?enabled:bool ->
            ?condition:string ->
              ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ?enabled:(x4657 : bool option) ->
            fun ?condition:(x4658 : string option) ->
              fun ?hit_condition:(x4659 : string option) ->
                fun ?log_message:(x4660 : string option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "Breakpoint")
                         (let x4661 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x4657 with
                           | Some x4665 ->
                               ignore
                                 (Ojs.call x4661 "push"
                                    [|(Ojs.bool_to_js x4665)|])
                           | None -> ());
                          (match x4658 with
                           | Some x4664 ->
                               ignore
                                 (Ojs.call x4661 "push"
                                    [|(Ojs.string_to_js x4664)|])
                           | None -> ());
                          (match x4659 with
                           | Some x4663 ->
                               ignore
                                 (Ojs.call x4661 "push"
                                    [|(Ojs.string_to_js x4663)|])
                           | None -> ());
                          (match x4660 with
                           | Some x4662 ->
                               ignore
                                 (Ojs.call x4661 "push"
                                    [|(Ojs.string_to_js x4662)|])
                           | None -> ());
                          x4661))
      end
    module SourceBreakpoint =
      struct
        include struct include Breakpoint end
        let (location : t -> Location.t) =
          fun (x4666 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x4666) "location")
        let (create :
          location:Location.t ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~location:(x4667 : Location.t) ->
            fun ?enabled:(x4668 : bool option) ->
              fun ?condition:(x4669 : string option) ->
                fun ?hit_condition:(x4670 : string option) ->
                  fun ?log_message:(x4671 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SourceBreakpoint")
                           (let x4672 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4672 "push"
                                 [|(Location.t_to_js x4667)|]);
                            (match x4668 with
                             | Some x4676 ->
                                 ignore
                                   (Ojs.call x4672 "push"
                                      [|(Ojs.bool_to_js x4676)|])
                             | None -> ());
                            (match x4669 with
                             | Some x4675 ->
                                 ignore
                                   (Ojs.call x4672 "push"
                                      [|(Ojs.string_to_js x4675)|])
                             | None -> ());
                            (match x4670 with
                             | Some x4674 ->
                                 ignore
                                   (Ojs.call x4672 "push"
                                      [|(Ojs.string_to_js x4674)|])
                             | None -> ());
                            (match x4671 with
                             | Some x4673 ->
                                 ignore
                                   (Ojs.call x4672 "push"
                                      [|(Ojs.string_to_js x4673)|])
                             | None -> ());
                            x4672))
      end
    module FunctionBreakpoint =
      struct
        include struct include Breakpoint end
        let (function_name : t -> string) =
          fun (x4677 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4677) "functionName")
        let (create :
          function_name:string ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~function_name:(x4678 : string) ->
            fun ?enabled:(x4679 : bool option) ->
              fun ?condition:(x4680 : string option) ->
                fun ?hit_condition:(x4681 : string option) ->
                  fun ?log_message:(x4682 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "FunctionBreakpoint")
                           (let x4683 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4683 "push"
                                 [|(Ojs.string_to_js x4678)|]);
                            (match x4679 with
                             | Some x4687 ->
                                 ignore
                                   (Ojs.call x4683 "push"
                                      [|(Ojs.bool_to_js x4687)|])
                             | None -> ());
                            (match x4680 with
                             | Some x4686 ->
                                 ignore
                                   (Ojs.call x4683 "push"
                                      [|(Ojs.string_to_js x4686)|])
                             | None -> ());
                            (match x4681 with
                             | Some x4685 ->
                                 ignore
                                   (Ojs.call x4683 "push"
                                      [|(Ojs.string_to_js x4685)|])
                             | None -> ());
                            (match x4682 with
                             | Some x4684 ->
                                 ignore
                                   (Ojs.call x4683 "push"
                                      [|(Ojs.string_to_js x4684)|])
                             | None -> ());
                            x4683))
        include struct include Breakpoint end
      end
    module BreakpointsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4689 : Ojs.t) -> x4689
        and t_to_js : t -> Ojs.t = fun (x4688 : Ojs.t) -> x4688
        let (added : t -> Breakpoint.t list) =
          fun (x4690 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4690) "added")
        let (removed : t -> Breakpoint.t list) =
          fun (x4692 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4692) "removed")
        let (changed : t -> Breakpoint.t list) =
          fun (x4694 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4694) "changed")
      end
    module DebugProtocolBreakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4697 : Ojs.t) -> x4697
        and t_to_js : t -> Ojs.t = fun (x4696 : Ojs.t) -> x4696
      end
    module DebugConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4699 : Ojs.t) -> x4699
        and t_to_js : t -> Ojs.t = fun (x4698 : Ojs.t) -> x4698
        let (type_ : t -> string) =
          fun (x4700 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4700) "type")
        let (set_type : t -> string -> unit) =
          fun (x4701 : t) ->
            fun (x4702 : string) ->
              Ojs.set_prop_ascii (t_to_js x4701) "type"
                (Ojs.string_to_js x4702)
        let (name : t -> string) =
          fun (x4703 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4703) "name")
        let (set_name : t -> string -> unit) =
          fun (x4704 : t) ->
            fun (x4705 : string) ->
              Ojs.set_prop_ascii (t_to_js x4704) "name"
                (Ojs.string_to_js x4705)
        let (request : t -> string) =
          fun (x4706 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4706) "request")
        let (set_request : t -> string -> unit) =
          fun (x4707 : t) ->
            fun (x4708 : string) ->
              Ojs.set_prop_ascii (t_to_js x4707) "request"
                (Ojs.string_to_js x4708)
        let (get : t -> string -> any) =
          fun (x4709 : t) ->
            fun (x4710 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x4709) (Ojs.string_to_js x4710))
        let (set : t -> string -> any -> unit) =
          fun (x4711 : t) ->
            fun (x4712 : string) ->
              fun (x4713 : any) ->
                Ojs.set_prop (t_to_js x4711) (Ojs.string_to_js x4712)
                  (any_to_js x4713)
      end
    module DebugSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4715 : Ojs.t) -> x4715
        and t_to_js : t -> Ojs.t = fun (x4714 : Ojs.t) -> x4714
        let (id : t -> string) =
          fun (x4716 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4716) "id")
        let (type_ : t -> string) =
          fun (x4717 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4717) "type")
        let (name : t -> string) =
          fun (x4718 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4718) "name")
        let (set_name : t -> string -> unit) =
          fun (x4719 : t) ->
            fun (x4720 : string) ->
              Ojs.set_prop_ascii (t_to_js x4719) "name"
                (Ojs.string_to_js x4720)
        let (workspace_folder : t -> WorkspaceFolder.t or_undefined) =
          fun (x4721 : t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4721) "workspaceFolder")
        let (configuration : t -> DebugConfiguration.t) =
          fun (x4723 : t) ->
            DebugConfiguration.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4723) "configuration")
        let (custom_request :
          t -> command:string -> ?args:any -> unit -> any Promise.t) =
          fun (x4728 : t) ->
            fun ~command:(x4724 : string) ->
              fun ?args:(x4725 : any option) ->
                fun () ->
                  Promise.t_of_js any_of_js
                    (let x4729 = t_to_js x4728 in
                     Ojs.call (Ojs.get_prop_ascii x4729 "customRequest")
                       "apply"
                       [|x4729;((let x4726 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4726 "push"
                                      [|(Ojs.string_to_js x4724)|]);
                                 (match x4725 with
                                  | Some x4727 ->
                                      ignore
                                        (Ojs.call x4726 "push"
                                           [|(any_to_js x4727)|])
                                  | None -> ());
                                 x4726))|])
        let (get_debug_protocol_breakpoint :
          t ->
            breakpoint:Breakpoint.t ->
              DebugProtocolBreakpoint.t or_undefined Promise.t)
          =
          fun (x4732 : t) ->
            fun ~breakpoint:(x4731 : Breakpoint.t) ->
              Promise.t_of_js
                (fun (x4733 : Ojs.t) ->
                   or_undefined_of_js DebugProtocolBreakpoint.t_of_js x4733)
                (Ojs.call (t_to_js x4732) "getDebugProtocolBreakpoint"
                   [|(Breakpoint.t_to_js x4731)|])
      end
    module DebugSessionCustomEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4736 : Ojs.t) -> x4736
        and t_to_js : t -> Ojs.t = fun (x4735 : Ojs.t) -> x4735
        let (session : t -> DebugSession.t) =
          fun (x4737 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4737) "session")
        let (event : t -> string) =
          fun (x4738 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4738) "event")
        let (body : t -> any) =
          fun (x4739 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x4739) "body")
      end
    module DebugConfigurationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4741 : Ojs.t) -> x4741
        and t_to_js : t -> Ojs.t = fun (x4740 : Ojs.t) -> x4740
        let (provide_debug_configurations :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              ?token:CancellationToken.t ->
                unit -> DebugConfiguration.t list ProviderResult.t)
          =
          fun (x4747 : t) ->
            fun ~folder:(x4742 : WorkspaceFolder.t or_undefined) ->
              fun ?token:(x4743 : CancellationToken.t option) ->
                fun () ->
                  ProviderResult.t_of_js
                    (fun (x4749 : Ojs.t) ->
                       Ojs.list_of_js DebugConfiguration.t_of_js x4749)
                    (let x4748 = t_to_js x4747 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4748 "provideDebugConfigurations")
                       "apply"
                       [|x4748;((let x4744 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4744 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4742)|]);
                                 (match x4743 with
                                  | Some x4745 ->
                                      ignore
                                        (Ojs.call x4744 "push"
                                           [|(CancellationToken.t_to_js x4745)|])
                                  | None -> ());
                                 x4744))|])
        let (resolve_debug_configuration :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4757 : t) ->
            fun ~folder:(x4751 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4752 : DebugConfiguration.t) ->
                fun ?token:(x4753 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4758 = t_to_js x4757 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4758
                            "resolveDebugConfiguration") "apply"
                         [|x4758;((let x4754 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4754 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4751)|]);
                                   ignore
                                     (Ojs.call x4754 "push"
                                        [|(DebugConfiguration.t_to_js x4752)|]);
                                   (match x4753 with
                                    | Some x4755 ->
                                        ignore
                                          (Ojs.call x4754 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4755)|])
                                    | None -> ());
                                   x4754))|])
        let (resolve_debug_configuration_with_substituted_variables :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4766 : t) ->
            fun ~folder:(x4760 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4761 : DebugConfiguration.t) ->
                fun ?token:(x4762 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4767 = t_to_js x4766 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4767
                            "resolveDebugConfigurationWithSubstitutedVariables")
                         "apply"
                         [|x4767;((let x4763 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4763 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4760)|]);
                                   ignore
                                     (Ojs.call x4763 "push"
                                        [|(DebugConfiguration.t_to_js x4761)|]);
                                   (match x4762 with
                                    | Some x4764 ->
                                        ignore
                                          (Ojs.call x4763 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4764)|])
                                    | None -> ());
                                   x4763))|])
      end
    module DebugAdapterExecutableOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4770 : Ojs.t) -> x4770
        and t_to_js : t -> Ojs.t = fun (x4769 : Ojs.t) -> x4769
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4772 : Ojs.t) -> x4772
            and t_to_js : t -> Ojs.t = fun (x4771 : Ojs.t) -> x4771
            let (get : t -> string -> string) =
              fun (x4773 : t) ->
                fun (x4774 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x4773) (Ojs.string_to_js x4774))
            let (set : t -> string -> string -> unit) =
              fun (x4775 : t) ->
                fun (x4776 : string) ->
                  fun (x4777 : string) ->
                    Ojs.set_prop (t_to_js x4775) (Ojs.string_to_js x4776)
                      (Ojs.string_to_js x4777)
          end
        let (env : t -> Env.t) =
          fun (x4778 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x4778) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x4779 : t) ->
            fun (x4780 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x4779) "env" (Env.t_to_js x4780)
        let (cwd : t -> string) =
          fun (x4781 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4781) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x4782 : t) ->
            fun (x4783 : string) ->
              Ojs.set_prop_ascii (t_to_js x4782) "cwd"
                (Ojs.string_to_js x4783)
      end
    module DebugAdapterExecutable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4785 : Ojs.t) -> x4785
        and t_to_js : t -> Ojs.t = fun (x4784 : Ojs.t) -> x4784
        let (create :
          command:string ->
            ?args:string list ->
              ?options:DebugAdapterExecutableOptions.t -> unit -> t)
          =
          fun ~command:(x4786 : string) ->
            fun ?args:(x4787 : string list option) ->
              fun ?options:(x4788 : DebugAdapterExecutableOptions.t option)
                ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "DebugAdapterExecutable")
                       (let x4789 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x4789 "push" [|(Ojs.string_to_js x4786)|]);
                        (match x4787 with
                         | Some x4791 ->
                             ignore
                               (Ojs.call x4789 "push"
                                  [|(Ojs.list_to_js Ojs.string_to_js x4791)|])
                         | None -> ());
                        (match x4788 with
                         | Some x4790 ->
                             ignore
                               (Ojs.call x4789 "push"
                                  [|(DebugAdapterExecutableOptions.t_to_js
                                       x4790)|])
                         | None -> ());
                        x4789))
        let (command : t -> string) =
          fun (x4793 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4793) "command")
        let (args : t -> string list) =
          fun (x4794 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4794) "args")
        let (options : t -> DebugAdapterExecutableOptions.t) =
          fun (x4796 : t) ->
            DebugAdapterExecutableOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4796) "options")
      end
    module DebugAdapterServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4798 : Ojs.t) -> x4798
        and t_to_js : t -> Ojs.t = fun (x4797 : Ojs.t) -> x4797
        let (port : t -> int) =
          fun (x4799 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4799) "port")
        let (host : t -> string) =
          fun (x4800 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4800) "host")
        let (create : port:int -> ?host:string -> unit -> t) =
          fun ~port:(x4801 : int) ->
            fun ?host:(x4802 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DebugAdapterServer")
                     (let x4803 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4803 "push" [|(Ojs.int_to_js x4801)|]);
                      (match x4802 with
                       | Some x4804 ->
                           ignore
                             (Ojs.call x4803 "push"
                                [|(Ojs.string_to_js x4804)|])
                       | None -> ());
                      x4803))
      end
    module DebugAdapterNamedPipeServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4806 : Ojs.t) -> x4806
        and t_to_js : t -> Ojs.t = fun (x4805 : Ojs.t) -> x4805
        let (path : t -> string) =
          fun (x4807 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4807) "path")
        let (create : path:string -> t) =
          fun ~path:(x4808 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterNamedPipeServer")
                 [|(Ojs.string_to_js x4808)|])
      end
    module DebugAdapter =
      struct
        include struct include Disposable end
        let (on_did_send_message : t -> DebugProtocolMessage.t Event.t) =
          fun (x4809 : t) ->
            Event.t_of_js DebugProtocolMessage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4809) "onDidSendMessage")
        let (handle_message : t -> message:DebugProtocolMessage.t -> unit) =
          fun (x4812 : t) ->
            fun ~message:(x4811 : DebugProtocolMessage.t) ->
              ignore
                (Ojs.call (t_to_js x4812) "handleMessage"
                   [|(DebugProtocolMessage.t_to_js x4811)|])
      end
    module DebugAdapterInlineImplementation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4814 : Ojs.t) -> x4814
        and t_to_js : t -> Ojs.t = fun (x4813 : Ojs.t) -> x4813
        let (create : implementation:DebugAdapter.t -> t) =
          fun ~implementation:(x4815 : DebugAdapter.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterInlineImplementation")
                 [|(DebugAdapter.t_to_js x4815)|])
      end
    module DebugAdapterDescriptor =
      struct
        type t =
          (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
            DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4821 : Ojs.t) ->
            union4_of_js DebugAdapterExecutable.t_of_js
              DebugAdapterInlineImplementation.t_of_js
              DebugAdapterNamedPipeServer.t_of_js DebugAdapterServer.t_of_js
              x4821
        and t_to_js : t -> Ojs.t =
          fun
            (x4816 :
              (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
                DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4)
            ->
            union4_to_js DebugAdapterExecutable.t_to_js
              DebugAdapterInlineImplementation.t_to_js
              DebugAdapterNamedPipeServer.t_to_js DebugAdapterServer.t_to_js
              x4816
      end
    module DebugAdapterDescriptorFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4827 : Ojs.t) -> x4827
        and t_to_js : t -> Ojs.t = fun (x4826 : Ojs.t) -> x4826
        let (create_debug_adapter_descriptor :
          t ->
            session:DebugSession.t ->
              executable:DebugAdapterExecutable.t or_undefined ->
                DebugAdapterDescriptor.t ProviderResult.t)
          =
          fun (x4831 : t) ->
            fun ~session:(x4828 : DebugSession.t) ->
              fun ~executable:(x4829 : DebugAdapterExecutable.t or_undefined)
                ->
                ProviderResult.t_of_js DebugAdapterDescriptor.t_of_js
                  (Ojs.call (t_to_js x4831) "createDebugAdapterDescriptor"
                     [|(DebugSession.t_to_js x4828);(or_undefined_to_js
                                                       DebugAdapterExecutable.t_to_js
                                                       x4829)|])
      end
    module DebugAdapterTracker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4834 : Ojs.t) -> x4834
        and t_to_js : t -> Ojs.t = fun (x4833 : Ojs.t) -> x4833
        let (on_will_start_session : t -> unit) =
          fun (x4835 : t) ->
            ignore (Ojs.call (t_to_js x4835) "onWillStartSession" [||])
        let (on_will_receive_message : t -> message:any -> unit) =
          fun (x4837 : t) ->
            fun ~message:(x4836 : any) ->
              ignore
                (Ojs.call (t_to_js x4837) "onWillReceiveMessage"
                   [|(any_to_js x4836)|])
        let (on_did_send_message : t -> message:any -> unit) =
          fun (x4839 : t) ->
            fun ~message:(x4838 : any) ->
              ignore
                (Ojs.call (t_to_js x4839) "onDidSendMessage"
                   [|(any_to_js x4838)|])
        let (on_will_stop_session : t -> unit) =
          fun (x4840 : t) ->
            ignore (Ojs.call (t_to_js x4840) "onWillStopSession" [||])
        let (on_error : t -> error:Error.t -> unit) =
          fun (x4842 : t) ->
            fun ~error:(x4841 : Error.t) ->
              ignore
                (Ojs.call (t_to_js x4842) "onError" [|(Error.t_to_js x4841)|])
        let (on_exit :
          t -> code:int or_undefined -> signal:string or_undefined -> unit) =
          fun (x4847 : t) ->
            fun ~code:(x4843 : int or_undefined) ->
              fun ~signal:(x4845 : string or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x4847) "onExit"
                     [|(or_undefined_to_js Ojs.int_to_js x4843);(or_undefined_to_js
                                                                   Ojs.string_to_js
                                                                   x4845)|])
      end
    module DebugAdapterTrackerFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4849 : Ojs.t) -> x4849
        and t_to_js : t -> Ojs.t = fun (x4848 : Ojs.t) -> x4848
        let (create_debug_adapter_tracker :
          t ->
            session:DebugSession.t -> DebugAdapterTracker.t ProviderResult.t)
          =
          fun (x4851 : t) ->
            fun ~session:(x4850 : DebugSession.t) ->
              ProviderResult.t_of_js DebugAdapterTracker.t_of_js
                (Ojs.call (t_to_js x4851) "createDebugAdapterTracker"
                   [|(DebugSession.t_to_js x4850)|])
      end
    module DebugConsole =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4854 : Ojs.t) -> x4854
        and t_to_js : t -> Ojs.t = fun (x4853 : Ojs.t) -> x4853
        let (append : t -> value:string -> unit) =
          fun (x4856 : t) ->
            fun ~value:(x4855 : string) ->
              ignore
                (Ojs.call (t_to_js x4856) "append"
                   [|(Ojs.string_to_js x4855)|])
        let (append_line : t -> value:string -> unit) =
          fun (x4858 : t) ->
            fun ~value:(x4857 : string) ->
              ignore
                (Ojs.call (t_to_js x4858) "appendLine"
                   [|(Ojs.string_to_js x4857)|])
      end
    module DebugConsoleMode =
      struct
        type t = [ `MergeWithParent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4860 : Ojs.t) ->
            let x4861 = x4860 in
            match Ojs.int_of_js x4861 with
            | 1 -> `MergeWithParent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4859 : [ `MergeWithParent ]) ->
            match x4859 with | `MergeWithParent -> Ojs.int_to_js 1
      end
    module DebugSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4863 : Ojs.t) -> x4863
        and t_to_js : t -> Ojs.t = fun (x4862 : Ojs.t) -> x4862
        let (parent_session : t -> DebugSession.t) =
          fun (x4864 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4864) "parentSession")
        let (set_parent_session : t -> DebugSession.t -> unit) =
          fun (x4865 : t) ->
            fun (x4866 : DebugSession.t) ->
              Ojs.set_prop_ascii (t_to_js x4865) "parentSession"
                (DebugSession.t_to_js x4866)
        let (console_mode : t -> DebugConsoleMode.t) =
          fun (x4867 : t) ->
            DebugConsoleMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4867) "consoleMode")
        let (set_console_mode : t -> DebugConsoleMode.t -> unit) =
          fun (x4868 : t) ->
            fun (x4869 : DebugConsoleMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4868) "consoleMode"
                (DebugConsoleMode.t_to_js x4869)
        let (no_debug : t -> bool) =
          fun (x4870 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4870) "noDebug")
        let (set_no_debug : t -> bool -> unit) =
          fun (x4871 : t) ->
            fun (x4872 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4871) "noDebug"
                (Ojs.bool_to_js x4872)
        let (compact : t -> bool) =
          fun (x4873 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4873) "compact")
        let (set_compact : t -> bool -> unit) =
          fun (x4874 : t) ->
            fun (x4875 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4874) "compact"
                (Ojs.bool_to_js x4875)
      end
    module DebugConfigurationProviderTriggerKind =
      struct
        type t = [ `Dynamic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4877 : Ojs.t) ->
            let x4878 = x4877 in
            match Ojs.int_of_js x4878 with
            | 2 -> `Dynamic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4876 : [ `Dynamic ]) ->
            match x4876 with | `Dynamic -> Ojs.int_to_js 2
      end
    module Debug =
      struct
        let (active_debug_session : DebugSession.t or_undefined) =
          or_undefined_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugSession")
        let (active_debug_console : DebugConsole.t) =
          DebugConsole.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugConsole")
        let (breakpoints : Breakpoint.t list) =
          Ojs.list_of_js Breakpoint.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "breakpoints")
        let (on_did_change_active_debug_session :
          DebugSession.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x4881 : Ojs.t) ->
               or_undefined_of_js DebugSession.t_of_js x4881)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeActiveDebugSession")
        let (on_did_start_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidStartDebugSession")
        let (on_did_receive_debug_session_custom_event :
          DebugSessionCustomEvent.t Event.t) =
          Event.t_of_js DebugSessionCustomEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidReceiveDebugSessionCustomEvent")
        let (on_did_terminate_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidTerminateDebugSession")
        let (on_did_change_breakpoints : BreakpointsChangeEvent.t Event.t) =
          Event.t_of_js BreakpointsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeBreakpoints")
        let (register_debug_configuration_provider :
          debug_type_:string ->
            provider:DebugConfigurationProvider.t ->
              ?trigger_kind:DebugConfigurationProviderTriggerKind.t ->
                unit -> Disposable.t)
          =
          fun ~debug_type_:(x4887 : string) ->
            fun ~provider:(x4888 : DebugConfigurationProvider.t) ->
              fun
                ?trigger_kind:(x4889 :
                                DebugConfigurationProviderTriggerKind.t
                                  option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4892 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4892
                          "registerDebugConfigurationProvider") "apply"
                       [|x4892;((let x4890 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4890 "push"
                                      [|(Ojs.string_to_js x4887)|]);
                                 ignore
                                   (Ojs.call x4890 "push"
                                      [|(DebugConfigurationProvider.t_to_js
                                           x4888)|]);
                                 (match x4889 with
                                  | Some x4891 ->
                                      ignore
                                        (Ojs.call x4890 "push"
                                           [|(DebugConfigurationProviderTriggerKind.t_to_js
                                                x4891)|])
                                  | None -> ());
                                 x4890))|])
        let (register_debug_adapter_descriptor_factory :
          debug_type_:string ->
            factory:DebugAdapterDescriptorFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4893 : string) ->
            fun ~factory:(x4894 : DebugAdapterDescriptorFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterDescriptorFactory"
                   [|(Ojs.string_to_js x4893);(DebugAdapterDescriptorFactory.t_to_js
                                                 x4894)|])
        let (register_debug_adapter_tracker_factory :
          debug_type_:string ->
            factory:DebugAdapterTrackerFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4895 : string) ->
            fun ~factory:(x4896 : DebugAdapterTrackerFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterTrackerFactory"
                   [|(Ojs.string_to_js x4895);(DebugAdapterTrackerFactory.t_to_js
                                                 x4896)|])
        let (start_debugging :
          folder:WorkspaceFolder.t or_undefined ->
            name_or_configuration:DebugConfiguration.t or_string ->
              ?parent_session_or_options:(DebugSession.t,
                DebugSessionOptions.t) union2 -> unit -> bool Promise.t)
          =
          fun ~folder:(x4897 : WorkspaceFolder.t or_undefined) ->
            fun
              ~name_or_configuration:(x4898 : DebugConfiguration.t or_string)
              ->
              fun
                ?parent_session_or_options:(x4899 :
                                             (DebugSession.t,
                                               DebugSessionOptions.t) union2
                                               option)
                ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x4906 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call (Ojs.get_prop_ascii x4906 "startDebugging")
                       "apply"
                       [|x4906;((let x4900 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4900 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4897)|]);
                                 ignore
                                   (Ojs.call x4900 "push"
                                      [|(or_string_to_js
                                           DebugConfiguration.t_to_js x4898)|]);
                                 (match x4899 with
                                  | Some x4901 ->
                                      ignore
                                        (Ojs.call x4900 "push"
                                           [|(union2_to_js
                                                DebugSession.t_to_js
                                                DebugSessionOptions.t_to_js
                                                x4901)|])
                                  | None -> ());
                                 x4900))|])
        let (stop_debugging :
          ?session:DebugSession.t -> unit -> unit Promise.t) =
          fun ?session:(x4908 : DebugSession.t option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x4911 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                 Ojs.call (Ojs.get_prop_ascii x4911 "stopDebugging") "apply"
                   [|x4911;((let x4909 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4908 with
                              | Some x4910 ->
                                  ignore
                                    (Ojs.call x4909 "push"
                                       [|(DebugSession.t_to_js x4910)|])
                              | None -> ());
                             x4909))|])
        let (add_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4913 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "addBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4913)|])
        let (remove_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4915 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "removeBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4915)|])
        let (as_debug_source_uri :
          source:DebugProtocolSource.t ->
            ?session:DebugSession.t -> unit -> Uri.t)
          =
          fun ~source:(x4917 : DebugProtocolSource.t) ->
            fun ?session:(x4918 : DebugSession.t option) ->
              fun () ->
                Uri.t_of_js
                  (let x4921 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                   Ojs.call (Ojs.get_prop_ascii x4921 "asDebugSourceUri")
                     "apply"
                     [|x4921;((let x4919 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4919 "push"
                                    [|(DebugProtocolSource.t_to_js x4917)|]);
                               (match x4918 with
                                | Some x4920 ->
                                    ignore
                                      (Ojs.call x4919 "push"
                                         [|(DebugSession.t_to_js x4920)|])
                                | None -> ());
                               x4919))|])
      end
    module Extensions =
      struct
        let (get_extension :
          extension_id:string -> any Extension.t or_undefined) =
          fun ~extension_id:(x4922 : string) ->
            or_undefined_of_js
              (fun (x4923 : Ojs.t) -> Extension.t_of_js any_of_js x4923)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4922)|])
        let (get_extension :
          extension_id:string -> 'T Extension.t or_undefined) =
          fun ~extension_id:(x4925 : string) ->
            or_undefined_of_js
              (fun (x4926 : Ojs.t) -> Extension.t_of_js Obj.magic x4926)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4925)|])
        let (all : any Extension.t list) =
          Ojs.list_of_js
            (fun (x4928 : Ojs.t) -> Extension.t_of_js any_of_js x4928)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "all")
        let (on_did_change : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "onDidChange")
      end
    module CommentThreadCollapsibleState =
      struct
        type t = [ `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4932 : Ojs.t) ->
            let x4933 = x4932 in
            match Ojs.int_of_js x4933 with
            | 1 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4931 : [ `Expanded ]) ->
            match x4931 with | `Expanded -> Ojs.int_to_js 1
      end
    module CommentMode =
      struct
        type t = [ `Preview ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4935 : Ojs.t) ->
            let x4936 = x4935 in
            match Ojs.int_of_js x4936 with
            | 1 -> `Preview
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4934 : [ `Preview ]) ->
            match x4934 with | `Preview -> Ojs.int_to_js 1
      end
    module CommentAuthorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4938 : Ojs.t) -> x4938
        and t_to_js : t -> Ojs.t = fun (x4937 : Ojs.t) -> x4937
        let (name : t -> string) =
          fun (x4939 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4939) "name")
        let (set_name : t -> string -> unit) =
          fun (x4940 : t) ->
            fun (x4941 : string) ->
              Ojs.set_prop_ascii (t_to_js x4940) "name"
                (Ojs.string_to_js x4941)
        let (icon_path : t -> Uri.t) =
          fun (x4942 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4942) "iconPath")
        let (set_icon_path : t -> Uri.t -> unit) =
          fun (x4943 : t) ->
            fun (x4944 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4943) "iconPath"
                (Uri.t_to_js x4944)
      end
    module CommentReaction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4946 : Ojs.t) -> x4946
        and t_to_js : t -> Ojs.t = fun (x4945 : Ojs.t) -> x4945
        let (label : t -> string) =
          fun (x4947 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4947) "label")
        let (icon_path : t -> Uri.t or_string) =
          fun (x4948 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4948) "iconPath")
        let (count : t -> int) =
          fun (x4950 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4950) "count")
        let (author_has_reacted : t -> bool) =
          fun (x4951 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4951) "authorHasReacted")
      end
    module Comment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4953 : Ojs.t) -> x4953
        and t_to_js : t -> Ojs.t = fun (x4952 : Ojs.t) -> x4952
        let (body : t -> MarkdownString.t or_string) =
          fun (x4954 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4954) "body")
        let (set_body : t -> MarkdownString.t or_string -> unit) =
          fun (x4956 : t) ->
            fun (x4957 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x4956) "body"
                (or_string_to_js MarkdownString.t_to_js x4957)
        let (mode : t -> CommentMode.t) =
          fun (x4959 : t) ->
            CommentMode.t_of_js (Ojs.get_prop_ascii (t_to_js x4959) "mode")
        let (set_mode : t -> CommentMode.t -> unit) =
          fun (x4960 : t) ->
            fun (x4961 : CommentMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4960) "mode"
                (CommentMode.t_to_js x4961)
        let (author : t -> CommentAuthorInformation.t) =
          fun (x4962 : t) ->
            CommentAuthorInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4962) "author")
        let (set_author : t -> CommentAuthorInformation.t -> unit) =
          fun (x4963 : t) ->
            fun (x4964 : CommentAuthorInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x4963) "author"
                (CommentAuthorInformation.t_to_js x4964)
        let (context_value : t -> string) =
          fun (x4965 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4965) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x4966 : t) ->
            fun (x4967 : string) ->
              Ojs.set_prop_ascii (t_to_js x4966) "contextValue"
                (Ojs.string_to_js x4967)
        let (reactions : t -> CommentReaction.t list) =
          fun (x4968 : t) ->
            Ojs.list_of_js CommentReaction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4968) "reactions")
        let (set_reactions : t -> CommentReaction.t list -> unit) =
          fun (x4970 : t) ->
            fun (x4971 : CommentReaction.t list) ->
              Ojs.set_prop_ascii (t_to_js x4970) "reactions"
                (Ojs.list_to_js CommentReaction.t_to_js x4971)
        let (label : t -> string) =
          fun (x4973 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4973) "label")
        let (set_label : t -> string -> unit) =
          fun (x4974 : t) ->
            fun (x4975 : string) ->
              Ojs.set_prop_ascii (t_to_js x4974) "label"
                (Ojs.string_to_js x4975)
      end
    module CommentThread =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4977 : Ojs.t) -> x4977
        and t_to_js : t -> Ojs.t = fun (x4976 : Ojs.t) -> x4976
        let (uri : t -> Uri.t) =
          fun (x4978 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4978) "uri")
        let (range : t -> Range.t) =
          fun (x4979 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4979) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x4980 : t) ->
            fun (x4981 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x4980) "range"
                (Range.t_to_js x4981)
        let (comments : t -> Comment.t list) =
          fun (x4982 : t) ->
            Ojs.list_of_js Comment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4982) "comments")
        let (set_comments : t -> Comment.t list -> unit) =
          fun (x4984 : t) ->
            fun (x4985 : Comment.t list) ->
              Ojs.set_prop_ascii (t_to_js x4984) "comments"
                (Ojs.list_to_js Comment.t_to_js x4985)
        let (collapsible_state : t -> CommentThreadCollapsibleState.t) =
          fun (x4987 : t) ->
            CommentThreadCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4987) "collapsibleState")
        let (set_collapsible_state :
          t -> CommentThreadCollapsibleState.t -> unit) =
          fun (x4988 : t) ->
            fun (x4989 : CommentThreadCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x4988) "collapsibleState"
                (CommentThreadCollapsibleState.t_to_js x4989)
        let (can_reply : t -> bool) =
          fun (x4990 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4990) "canReply")
        let (set_can_reply : t -> bool -> unit) =
          fun (x4991 : t) ->
            fun (x4992 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4991) "canReply"
                (Ojs.bool_to_js x4992)
        let (context_value : t -> string) =
          fun (x4993 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4993) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x4994 : t) ->
            fun (x4995 : string) ->
              Ojs.set_prop_ascii (t_to_js x4994) "contextValue"
                (Ojs.string_to_js x4995)
        let (label : t -> string) =
          fun (x4996 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4996) "label")
        let (set_label : t -> string -> unit) =
          fun (x4997 : t) ->
            fun (x4998 : string) ->
              Ojs.set_prop_ascii (t_to_js x4997) "label"
                (Ojs.string_to_js x4998)
        let (dispose : t -> unit) =
          fun (x4999 : t) -> ignore (Ojs.call (t_to_js x4999) "dispose" [||])
      end
    module CommentReply =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5001 : Ojs.t) -> x5001
        and t_to_js : t -> Ojs.t = fun (x5000 : Ojs.t) -> x5000
        let (thread : t -> CommentThread.t) =
          fun (x5002 : t) ->
            CommentThread.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5002) "thread")
        let (set_thread : t -> CommentThread.t -> unit) =
          fun (x5003 : t) ->
            fun (x5004 : CommentThread.t) ->
              Ojs.set_prop_ascii (t_to_js x5003) "thread"
                (CommentThread.t_to_js x5004)
        let (text : t -> string) =
          fun (x5005 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5005) "text")
        let (set_text : t -> string -> unit) =
          fun (x5006 : t) ->
            fun (x5007 : string) ->
              Ojs.set_prop_ascii (t_to_js x5006) "text"
                (Ojs.string_to_js x5007)
      end
    module CommentingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5009 : Ojs.t) -> x5009
        and t_to_js : t -> Ojs.t = fun (x5008 : Ojs.t) -> x5008
        let (provide_commenting_ranges :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> Range.t list ProviderResult.t)
          =
          fun (x5012 : t) ->
            fun ~document:(x5010 : TextDocument.t) ->
              fun ~token:(x5011 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x5013 : Ojs.t) -> Ojs.list_of_js Range.t_of_js x5013)
                  (Ojs.call (t_to_js x5012) "provideCommentingRanges"
                     [|(TextDocument.t_to_js x5010);(CancellationToken.t_to_js
                                                       x5011)|])
      end
    module CommentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5016 : Ojs.t) -> x5016
        and t_to_js : t -> Ojs.t = fun (x5015 : Ojs.t) -> x5015
        let (prompt : t -> string) =
          fun (x5017 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5017) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x5018 : t) ->
            fun (x5019 : string) ->
              Ojs.set_prop_ascii (t_to_js x5018) "prompt"
                (Ojs.string_to_js x5019)
        let (place_holder : t -> string) =
          fun (x5020 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5020) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x5021 : t) ->
            fun (x5022 : string) ->
              Ojs.set_prop_ascii (t_to_js x5021) "placeHolder"
                (Ojs.string_to_js x5022)
      end
    module CommentController =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5024 : Ojs.t) -> x5024
        and t_to_js : t -> Ojs.t = fun (x5023 : Ojs.t) -> x5023
        let (id : t -> string) =
          fun (x5025 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5025) "id")
        let (label : t -> string) =
          fun (x5026 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5026) "label")
        let (options : t -> CommentOptions.t) =
          fun (x5027 : t) ->
            CommentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5027) "options")
        let (set_options : t -> CommentOptions.t -> unit) =
          fun (x5028 : t) ->
            fun (x5029 : CommentOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x5028) "options"
                (CommentOptions.t_to_js x5029)
        let (commenting_range_provider : t -> CommentingRangeProvider.t) =
          fun (x5030 : t) ->
            CommentingRangeProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5030) "commentingRangeProvider")
        let (set_commenting_range_provider :
          t -> CommentingRangeProvider.t -> unit) =
          fun (x5031 : t) ->
            fun (x5032 : CommentingRangeProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x5031) "commentingRangeProvider"
                (CommentingRangeProvider.t_to_js x5032)
        let (create_comment_thread :
          t ->
            uri:Uri.t ->
              range:Range.t -> comments:Comment.t list -> CommentThread.t)
          =
          fun (x5037 : t) ->
            fun ~uri:(x5033 : Uri.t) ->
              fun ~range:(x5034 : Range.t) ->
                fun ~comments:(x5035 : Comment.t list) ->
                  CommentThread.t_of_js
                    (Ojs.call (t_to_js x5037) "createCommentThread"
                       [|(Uri.t_to_js x5033);(Range.t_to_js x5034);(Ojs.list_to_js
                                                                    Comment.t_to_js
                                                                    x5035)|])
        let (reaction_handler :
          t ->
            comment:Comment.t -> reaction:CommentReaction.t -> unit Promise.t)
          =
          fun (x5040 : t) ->
            fun ~comment:(x5038 : Comment.t) ->
              fun ~reaction:(x5039 : CommentReaction.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x5040) "reactionHandler"
                     [|(Comment.t_to_js x5038);(CommentReaction.t_to_js x5039)|])
        let (dispose : t -> unit) =
          fun (x5042 : t) -> ignore (Ojs.call (t_to_js x5042) "dispose" [||])
      end
    module Comments =
      struct
        let (create_comment_controller :
          id:string -> label:string -> CommentController.t) =
          fun ~id:(x5043 : string) ->
            fun ~label:(x5044 : string) ->
              CommentController.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "comments")
                   "createCommentController"
                   [|(Ojs.string_to_js x5043);(Ojs.string_to_js x5044)|])
      end
    module AuthenticationSessionAccountInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5046 : Ojs.t) -> x5046
        and t_to_js : t -> Ojs.t = fun (x5045 : Ojs.t) -> x5045
        let (id : t -> string) =
          fun (x5047 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5047) "id")
        let (label : t -> string) =
          fun (x5048 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5048) "label")
      end
    module AuthenticationSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5050 : Ojs.t) -> x5050
        and t_to_js : t -> Ojs.t = fun (x5049 : Ojs.t) -> x5049
        let (id : t -> string) =
          fun (x5051 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5051) "id")
        let (access_token : t -> string) =
          fun (x5052 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5052) "accessToken")
        let (account : t -> AuthenticationSessionAccountInformation.t) =
          fun (x5053 : t) ->
            AuthenticationSessionAccountInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5053) "account")
        let (scopes : t -> string list) =
          fun (x5054 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5054) "scopes")
      end
    module AuthenticationGetSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5057 : Ojs.t) -> x5057
        and t_to_js : t -> Ojs.t = fun (x5056 : Ojs.t) -> x5056
        let (create_if_none : t -> bool) =
          fun (x5058 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5058) "createIfNone")
        let (set_create_if_none : t -> bool -> unit) =
          fun (x5059 : t) ->
            fun (x5060 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5059) "createIfNone"
                (Ojs.bool_to_js x5060)
        let (clear_session_preference : t -> bool) =
          fun (x5061 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5061) "clearSessionPreference")
        let (set_clear_session_preference : t -> bool -> unit) =
          fun (x5062 : t) ->
            fun (x5063 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5062) "clearSessionPreference"
                (Ojs.bool_to_js x5063)
      end
    module AuthenticationProviderInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5065 : Ojs.t) -> x5065
        and t_to_js : t -> Ojs.t = fun (x5064 : Ojs.t) -> x5064
        let (id : t -> string) =
          fun (x5066 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5066) "id")
        let (label : t -> string) =
          fun (x5067 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5067) "label")
      end
    module AuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5069 : Ojs.t) -> x5069
        and t_to_js : t -> Ojs.t = fun (x5068 : Ojs.t) -> x5068
        let (provider : t -> AuthenticationProviderInformation.t) =
          fun (x5070 : t) ->
            AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5070) "provider")
      end
    module AuthenticationProviderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5072 : Ojs.t) -> x5072
        and t_to_js : t -> Ojs.t = fun (x5071 : Ojs.t) -> x5071
        let (supports_multiple_accounts : t -> bool) =
          fun (x5073 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5073) "supportsMultipleAccounts")
      end
    module AuthenticationProviderAuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5075 : Ojs.t) -> x5075
        and t_to_js : t -> Ojs.t = fun (x5074 : Ojs.t) -> x5074
        let (added : t -> AuthenticationSession.t list) =
          fun (x5076 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5076) "added")
        let (removed : t -> AuthenticationSession.t list) =
          fun (x5078 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5078) "removed")
        let (changed : t -> AuthenticationSession.t list) =
          fun (x5080 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5080) "changed")
      end
    module AuthenticationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5083 : Ojs.t) -> x5083
        and t_to_js : t -> Ojs.t = fun (x5082 : Ojs.t) -> x5082
        let (on_did_change_sessions :
          t ->
            AuthenticationProviderAuthenticationSessionsChangeEvent.t Event.t)
          =
          fun (x5084 : t) ->
            Event.t_of_js
              AuthenticationProviderAuthenticationSessionsChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5084) "onDidChangeSessions")
        let (get_sessions :
          t ->
            ?scopes:string list ->
              unit -> AuthenticationSession.t list Promise.t)
          =
          fun (x5090 : t) ->
            fun ?scopes:(x5086 : string list option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x5092 : Ojs.t) ->
                     Ojs.list_of_js AuthenticationSession.t_of_js x5092)
                  (let x5091 = t_to_js x5090 in
                   Ojs.call (Ojs.get_prop_ascii x5091 "getSessions") "apply"
                     [|x5091;((let x5087 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x5086 with
                                | Some x5088 ->
                                    ignore
                                      (Ojs.call x5087 "push"
                                         [|(Ojs.list_to_js Ojs.string_to_js
                                              x5088)|])
                                | None -> ());
                               x5087))|])
        let (create_session :
          t -> scopes:string list -> AuthenticationSession.t Promise.t) =
          fun (x5096 : t) ->
            fun ~scopes:(x5094 : string list) ->
              Promise.t_of_js AuthenticationSession.t_of_js
                (Ojs.call (t_to_js x5096) "createSession"
                   [|(Ojs.list_to_js Ojs.string_to_js x5094)|])
        let (remove_session : t -> session_id:string -> unit Promise.t) =
          fun (x5099 : t) ->
            fun ~session_id:(x5098 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x5099) "removeSession"
                   [|(Ojs.string_to_js x5098)|])
      end
    module Authentication =
      struct
        module AuthenticationGetSessionOptions2 =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x5102 : Ojs.t) -> x5102
            and t_to_js : t -> Ojs.t = fun (x5101 : Ojs.t) -> x5101
            let (create_if_none : t -> [ `L_b_true ]) =
              fun (x5103 : t) ->
                let x5104 = Ojs.get_prop_ascii (t_to_js x5103) "createIfNone" in
                match Ojs.bool_of_js x5104 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_create_if_none : t -> [ `L_b_true ] -> unit) =
              fun (x5105 : t) ->
                fun (x5106 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x5105) "createIfNone"
                    (match x5106 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              options:(AuthenticationGetSessionOptions.t,
                AuthenticationGetSessionOptions2.t) intersection2 ->
                AuthenticationSession.t Promise.t)
          =
          fun ~provider_id:(x5107 : string) ->
            fun ~scopes:(x5108 : string list) ->
              fun
                ~options:(x5110 :
                           (AuthenticationGetSessionOptions.t,
                             AuthenticationGetSessionOptions2.t)
                             intersection2)
                ->
                Promise.t_of_js AuthenticationSession.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "authentication") "getSession"
                     [|(Ojs.string_to_js x5107);(Ojs.list_to_js
                                                   Ojs.string_to_js x5108);(
                       intersection2_to_js
                         AuthenticationGetSessionOptions.t_to_js
                         AuthenticationGetSessionOptions2.t_to_js x5110)|])
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              ?options:AuthenticationGetSessionOptions.t ->
                unit -> AuthenticationSession.t or_undefined Promise.t)
          =
          fun ~provider_id:(x5114 : string) ->
            fun ~scopes:(x5115 : string list) ->
              fun ?options:(x5116 : AuthenticationGetSessionOptions.t option)
                ->
                fun () ->
                  Promise.t_of_js
                    (fun (x5121 : Ojs.t) ->
                       or_undefined_of_js AuthenticationSession.t_of_js x5121)
                    (let x5120 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "authentication" in
                     Ojs.call (Ojs.get_prop_ascii x5120 "getSession") "apply"
                       [|x5120;((let x5117 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x5117 "push"
                                      [|(Ojs.string_to_js x5114)|]);
                                 ignore
                                   (Ojs.call x5117 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js
                                           x5115)|]);
                                 (match x5116 with
                                  | Some x5118 ->
                                      ignore
                                        (Ojs.call x5117 "push"
                                           [|(AuthenticationGetSessionOptions.t_to_js
                                                x5118)|])
                                  | None -> ());
                                 x5117))|])
        let (on_did_change_sessions :
          AuthenticationSessionsChangeEvent.t Event.t) =
          Event.t_of_js AuthenticationSessionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "authentication") "onDidChangeSessions")
        let (register_authentication_provider :
          id:string ->
            label:string ->
              provider:AuthenticationProvider.t ->
                ?options:AuthenticationProviderOptions.t ->
                  unit -> Disposable.t)
          =
          fun ~id:(x5124 : string) ->
            fun ~label:(x5125 : string) ->
              fun ~provider:(x5126 : AuthenticationProvider.t) ->
                fun ?options:(x5127 : AuthenticationProviderOptions.t option)
                  ->
                  fun () ->
                    Disposable.t_of_js
                      (let x5130 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "authentication" in
                       Ojs.call
                         (Ojs.get_prop_ascii x5130
                            "registerAuthenticationProvider") "apply"
                         [|x5130;((let x5128 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x5128 "push"
                                        [|(Ojs.string_to_js x5124)|]);
                                   ignore
                                     (Ojs.call x5128 "push"
                                        [|(Ojs.string_to_js x5125)|]);
                                   ignore
                                     (Ojs.call x5128 "push"
                                        [|(AuthenticationProvider.t_to_js
                                             x5126)|]);
                                   (match x5127 with
                                    | Some x5129 ->
                                        ignore
                                          (Ojs.call x5128 "push"
                                             [|(AuthenticationProviderOptions.t_to_js
                                                  x5129)|])
                                    | None -> ());
                                   x5128))|])
      end
  end
include struct include Vscode end
