[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2015
module Vscode =
  struct
    let (version : string) =
      Ojs.string_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii
              (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
              "vscode") "version")
    module Command =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (title : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "title")
        let (set_title : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "title" (Ojs.string_to_js x5)
        let (command : t -> string) =
          fun (x6 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "command")
        let (set_command : t -> string -> unit) =
          fun (x7 : t) ->
            fun (x8 : string) ->
              Ojs.set_prop_ascii (t_to_js x7) "command" (Ojs.string_to_js x8)
        let (tooltip : t -> string) =
          fun (x9 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x9) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x10 : t) ->
            fun (x11 : string) ->
              Ojs.set_prop_ascii (t_to_js x10) "tooltip"
                (Ojs.string_to_js x11)
        let (arguments : t -> any list) =
          fun (x12 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x12) "arguments")
        let (set_arguments : t -> any list -> unit) =
          fun (x14 : t) ->
            fun (x15 : any list) ->
              Ojs.set_prop_ascii (t_to_js x14) "arguments"
                (Ojs.list_to_js any_to_js x15)
        let (create :
          title:string ->
            command:string ->
              ?tooltip:string -> ?arguments:any list -> unit -> t)
          =
          fun ~title:(x17 : string) ->
            fun ~command:(x18 : string) ->
              fun ?tooltip:(x19 : string option) ->
                fun ?arguments:(x20 : any list option) ->
                  fun () ->
                    let x21 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x21 "title" (Ojs.string_to_js x17);
                    Ojs.set_prop_ascii x21 "command" (Ojs.string_to_js x18);
                    (match x19 with
                     | Some x24 ->
                         Ojs.set_prop_ascii x21 "tooltip"
                           (Ojs.string_to_js x24)
                     | None -> ());
                    (match x20 with
                     | Some x22 ->
                         Ojs.set_prop_ascii x21 "arguments"
                           (Ojs.list_to_js any_to_js x22)
                     | None -> ());
                    t_of_js x21
      end
    module Position =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x26 : Ojs.t) -> x26
        and t_to_js : t -> Ojs.t = fun (x25 : Ojs.t) -> x25
        let (line : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "line")
        let (character : t -> int) =
          fun (x28 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x28) "character")
        let (create : line:int -> character:int -> t) =
          fun ~line:(x29 : int) ->
            fun ~character:(x30 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Position")
                   [|(Ojs.int_to_js x29);(Ojs.int_to_js x30)|])
        let (is_before : t -> other:t -> bool) =
          fun (x32 : t) ->
            fun ~other:(x31 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x32) "isBefore" [|(t_to_js x31)|])
        let (is_before_or_equal : t -> other:t -> bool) =
          fun (x34 : t) ->
            fun ~other:(x33 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x34) "isBeforeOrEqual" [|(t_to_js x33)|])
        let (is_after : t -> other:t -> bool) =
          fun (x36 : t) ->
            fun ~other:(x35 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x36) "isAfter" [|(t_to_js x35)|])
        let (is_after_or_equal : t -> other:t -> bool) =
          fun (x38 : t) ->
            fun ~other:(x37 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x38) "isAfterOrEqual" [|(t_to_js x37)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x40 : t) ->
            fun ~other:(x39 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x40) "isEqual" [|(t_to_js x39)|])
        let (compare_to : t -> other:t -> int) =
          fun (x42 : t) ->
            fun ~other:(x41 : t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x42) "compareTo" [|(t_to_js x41)|])
        let (translate :
          t -> ?line_delta:int -> ?character_delta:int -> unit -> t) =
          fun (x48 : t) ->
            fun ?line_delta:(x43 : int option) ->
              fun ?character_delta:(x44 : int option) ->
                fun () ->
                  t_of_js
                    (let x49 = t_to_js x48 in
                     Ojs.call (Ojs.get_prop_ascii x49 "translate") "apply"
                       [|x49;((let x45 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x43 with
                                | Some x47 ->
                                    ignore
                                      (Ojs.call x45 "push"
                                         [|(Ojs.int_to_js x47)|])
                                | None -> ());
                               (match x44 with
                                | Some x46 ->
                                    ignore
                                      (Ojs.call x45 "push"
                                         [|(Ojs.int_to_js x46)|])
                                | None -> ());
                               x45))|])
        module TranslateChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
            and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
            let (line_delta : t -> int) =
              fun (x52 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x52) "lineDelta")
            let (set_line_delta : t -> int -> unit) =
              fun (x53 : t) ->
                fun (x54 : int) ->
                  Ojs.set_prop_ascii (t_to_js x53) "lineDelta"
                    (Ojs.int_to_js x54)
            let (character_delta : t -> int) =
              fun (x55 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x55) "characterDelta")
            let (set_character_delta : t -> int -> unit) =
              fun (x56 : t) ->
                fun (x57 : int) ->
                  Ojs.set_prop_ascii (t_to_js x56) "characterDelta"
                    (Ojs.int_to_js x57)
          end
        let (translate' : t -> TranslateChange.t -> t) =
          fun (x59 : t) ->
            fun (x58 : TranslateChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x59) "translate"
                   [|(TranslateChange.t_to_js x58)|])
        let (with_ : t -> ?line:int -> ?character:int -> unit -> t) =
          fun (x65 : t) ->
            fun ?line:(x60 : int option) ->
              fun ?character:(x61 : int option) ->
                fun () ->
                  t_of_js
                    (let x66 = t_to_js x65 in
                     Ojs.call (Ojs.get_prop_ascii x66 "with") "apply"
                       [|x66;((let x62 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x60 with
                                | Some x64 ->
                                    ignore
                                      (Ojs.call x62 "push"
                                         [|(Ojs.int_to_js x64)|])
                                | None -> ());
                               (match x61 with
                                | Some x63 ->
                                    ignore
                                      (Ojs.call x62 "push"
                                         [|(Ojs.int_to_js x63)|])
                                | None -> ());
                               x62))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x68 : Ojs.t) -> x68
            and t_to_js : t -> Ojs.t = fun (x67 : Ojs.t) -> x67
            let (line : t -> int) =
              fun (x69 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x69) "line")
            let (set_line : t -> int -> unit) =
              fun (x70 : t) ->
                fun (x71 : int) ->
                  Ojs.set_prop_ascii (t_to_js x70) "line" (Ojs.int_to_js x71)
            let (character : t -> int) =
              fun (x72 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "character")
            let (set_character : t -> int -> unit) =
              fun (x73 : t) ->
                fun (x74 : int) ->
                  Ojs.set_prop_ascii (t_to_js x73) "character"
                    (Ojs.int_to_js x74)
          end
        let (with' : t -> WithChange.t -> t) =
          fun (x76 : t) ->
            fun (x75 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x76) "with" [|(WithChange.t_to_js x75)|])
      end
    module Range =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x78 : Ojs.t) -> x78
        and t_to_js : t -> Ojs.t = fun (x77 : Ojs.t) -> x77
        let (start : t -> Position.t) =
          fun (x79 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x79) "start")
        let (end_ : t -> Position.t) =
          fun (x80 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x80) "end")
        let (create : start:Position.t -> end_:Position.t -> t) =
          fun ~start:(x81 : Position.t) ->
            fun ~end_:(x82 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                   [|(Position.t_to_js x81);(Position.t_to_js x82)|])
        let (create' :
          start_line:int ->
            start_character:int -> end_line:int -> end_character:int -> t)
          =
          fun ~start_line:(x83 : int) ->
            fun ~start_character:(x84 : int) ->
              fun ~end_line:(x85 : int) ->
                fun ~end_character:(x86 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                       [|(Ojs.int_to_js x83);(Ojs.int_to_js x84);(Ojs.int_to_js
                                                                    x85);(
                         Ojs.int_to_js x86)|])
        let (is_empty : t -> bool) =
          fun (x87 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x87) "isEmpty")
        let (set_is_empty : t -> bool -> unit) =
          fun (x88 : t) ->
            fun (x89 : bool) ->
              Ojs.set_prop_ascii (t_to_js x88) "isEmpty" (Ojs.bool_to_js x89)
        let (is_single_line : t -> bool) =
          fun (x90 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x90) "isSingleLine")
        let (set_is_single_line : t -> bool -> unit) =
          fun (x91 : t) ->
            fun (x92 : bool) ->
              Ojs.set_prop_ascii (t_to_js x91) "isSingleLine"
                (Ojs.bool_to_js x92)
        let (contains : t -> (Position.t, t) union2 -> bool) =
          fun (x96 : t) ->
            fun (x93 : (Position.t, t) union2) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x96) "contains"
                   [|(union2_to_js Position.t_to_js t_to_js x93)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x98 : t) ->
            fun ~other:(x97 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x98) "isEqual" [|(t_to_js x97)|])
        let (intersection : t -> range:t -> t or_undefined) =
          fun (x100 : t) ->
            fun ~range:(x99 : t) ->
              or_undefined_of_js t_of_js
                (Ojs.call (t_to_js x100) "intersection" [|(t_to_js x99)|])
        let (union : t -> other:t -> t) =
          fun (x103 : t) ->
            fun ~other:(x102 : t) ->
              t_of_js (Ojs.call (t_to_js x103) "union" [|(t_to_js x102)|])
        let (with_ : t -> ?start:Position.t -> ?end_:Position.t -> unit -> t)
          =
          fun (x109 : t) ->
            fun ?start:(x104 : Position.t option) ->
              fun ?end_:(x105 : Position.t option) ->
                fun () ->
                  t_of_js
                    (let x110 = t_to_js x109 in
                     Ojs.call (Ojs.get_prop_ascii x110 "with") "apply"
                       [|x110;((let x106 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x104 with
                                 | Some x108 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Position.t_to_js x108)|])
                                 | None -> ());
                                (match x105 with
                                 | Some x107 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Position.t_to_js x107)|])
                                 | None -> ());
                                x106))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x112 : Ojs.t) -> x112
            and t_to_js : t -> Ojs.t = fun (x111 : Ojs.t) -> x111
            let (start : t -> Position.t) =
              fun (x113 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x113) "start")
            let (set_start : t -> Position.t -> unit) =
              fun (x114 : t) ->
                fun (x115 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x114) "start"
                    (Position.t_to_js x115)
            let (end_ : t -> Position.t) =
              fun (x116 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x116) "end")
            let (set_end : t -> Position.t -> unit) =
              fun (x117 : t) ->
                fun (x118 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x117) "end"
                    (Position.t_to_js x118)
          end
        let (with' : t -> change:WithChange.t -> t) =
          fun (x120 : t) ->
            fun ~change:(x119 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x120) "with" [|(WithChange.t_to_js x119)|])
      end
    module Uri =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x122 : Ojs.t) -> x122
        and t_to_js : t -> Ojs.t = fun (x121 : Ojs.t) -> x121
        let (parse : string -> ?strict:bool -> unit -> t) =
          fun (x123 : string) ->
            fun ?strict:(x124 : bool option) ->
              fun () ->
                t_of_js
                  (let x127 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                   Ojs.call (Ojs.get_prop_ascii x127 "parse") "apply"
                     [|x127;((let x125 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x125 "push"
                                   [|(Ojs.string_to_js x123)|]);
                              (match x124 with
                               | Some x126 ->
                                   ignore
                                     (Ojs.call x125 "push"
                                        [|(Ojs.bool_to_js x126)|])
                               | None -> ());
                              x125))|])
        let (file : string -> t) =
          fun (x128 : string) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Uri") "file"
                 [|(Ojs.string_to_js x128)|])
        let (join_path : t -> string list -> t) =
          fun (x129 : t) ->
            fun (x130 : string list) ->
              t_of_js
                (let x133 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                 Ojs.call (Ojs.get_prop_ascii x133 "joinPath") "apply"
                   [|x133;((let x131 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x131 "push" [|(t_to_js x129)|]);
                            List.iter
                              (fun (x132 : string) ->
                                 ignore
                                   (Ojs.call x131 "push"
                                      [|(Ojs.string_to_js x132)|])) x130;
                            x131))|])
        let (create :
          scheme:string ->
            authority:string ->
              path:string -> query:string -> fragment:string -> t)
          =
          fun ~scheme:(x134 : string) ->
            fun ~authority:(x135 : string) ->
              fun ~path:(x136 : string) ->
                fun ~query:(x137 : string) ->
                  fun ~fragment:(x138 : string) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode") "Uri")
                         [|(Ojs.string_to_js x134);(Ojs.string_to_js x135);(
                           Ojs.string_to_js x136);(Ojs.string_to_js x137);(
                           Ojs.string_to_js x138)|])
        let (scheme : t -> string) =
          fun (x139 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x139) "scheme")
        let (authority : t -> string) =
          fun (x140 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x140) "authority")
        let (path : t -> string) =
          fun (x141 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x141) "path")
        let (query : t -> string) =
          fun (x142 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x142) "query")
        let (fragment : t -> string) =
          fun (x143 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x143) "fragment")
        let (fs_path : t -> string) =
          fun (x144 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x144) "fsPath")
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x146 : Ojs.t) -> x146
            and t_to_js : t -> Ojs.t = fun (x145 : Ojs.t) -> x145
            let (scheme : t -> string) =
              fun (x147 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x147) "scheme")
            let (set_scheme : t -> string -> unit) =
              fun (x148 : t) ->
                fun (x149 : string) ->
                  Ojs.set_prop_ascii (t_to_js x148) "scheme"
                    (Ojs.string_to_js x149)
            let (authority : t -> string) =
              fun (x150 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x150) "authority")
            let (set_authority : t -> string -> unit) =
              fun (x151 : t) ->
                fun (x152 : string) ->
                  Ojs.set_prop_ascii (t_to_js x151) "authority"
                    (Ojs.string_to_js x152)
            let (path : t -> string) =
              fun (x153 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x153) "path")
            let (set_path : t -> string -> unit) =
              fun (x154 : t) ->
                fun (x155 : string) ->
                  Ojs.set_prop_ascii (t_to_js x154) "path"
                    (Ojs.string_to_js x155)
            let (query : t -> string) =
              fun (x156 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x156) "query")
            let (set_query : t -> string -> unit) =
              fun (x157 : t) ->
                fun (x158 : string) ->
                  Ojs.set_prop_ascii (t_to_js x157) "query"
                    (Ojs.string_to_js x158)
            let (fragment : t -> string) =
              fun (x159 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x159) "fragment")
            let (set_fragment : t -> string -> unit) =
              fun (x160 : t) ->
                fun (x161 : string) ->
                  Ojs.set_prop_ascii (t_to_js x160) "fragment"
                    (Ojs.string_to_js x161)
            let (create :
              ?scheme:string ->
                ?authority:string ->
                  ?path:string ->
                    ?query:string -> ?fragment:string -> unit -> t)
              =
              fun ?scheme:(x162 : string option) ->
                fun ?authority:(x163 : string option) ->
                  fun ?path:(x164 : string option) ->
                    fun ?query:(x165 : string option) ->
                      fun ?fragment:(x166 : string option) ->
                        fun () ->
                          let x167 = Ojs.empty_obj () in
                          (match x162 with
                           | Some x172 ->
                               Ojs.set_prop_ascii x167 "scheme"
                                 (Ojs.string_to_js x172)
                           | None -> ());
                          (match x163 with
                           | Some x171 ->
                               Ojs.set_prop_ascii x167 "authority"
                                 (Ojs.string_to_js x171)
                           | None -> ());
                          (match x164 with
                           | Some x170 ->
                               Ojs.set_prop_ascii x167 "path"
                                 (Ojs.string_to_js x170)
                           | None -> ());
                          (match x165 with
                           | Some x169 ->
                               Ojs.set_prop_ascii x167 "query"
                                 (Ojs.string_to_js x169)
                           | None -> ());
                          (match x166 with
                           | Some x168 ->
                               Ojs.set_prop_ascii x167 "fragment"
                                 (Ojs.string_to_js x168)
                           | None -> ());
                          t_of_js x167
          end
        let (with_ : t -> WithChange.t -> t) =
          fun (x174 : t) ->
            fun (x173 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x174) "with" [|(WithChange.t_to_js x173)|])
        let (to_string : t -> ?skip_encoding:bool -> unit -> string) =
          fun (x178 : t) ->
            fun ?skip_encoding:(x175 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x179 = t_to_js x178 in
                   Ojs.call (Ojs.get_prop_ascii x179 "toString") "apply"
                     [|x179;((let x176 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x175 with
                               | Some x177 ->
                                   ignore
                                     (Ojs.call x176 "push"
                                        [|(Ojs.bool_to_js x177)|])
                               | None -> ());
                              x176))|])
        let (to_json : t -> any) =
          fun (x180 : t) -> any_of_js (Ojs.call (t_to_js x180) "toJSON" [||])
      end
    module TextLine =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x182 : Ojs.t) -> x182
        and t_to_js : t -> Ojs.t = fun (x181 : Ojs.t) -> x181
        let (line_number : t -> int) =
          fun (x183 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x183) "lineNumber")
        let (text : t -> string) =
          fun (x184 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x184) "text")
        let (range : t -> Range.t) =
          fun (x185 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x185) "range")
        let (range_including_line_break : t -> Range.t) =
          fun (x186 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x186) "rangeIncludingLineBreak")
        let (first_non_whitespace_character_index : t -> int) =
          fun (x187 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x187)
                 "firstNonWhitespaceCharacterIndex")
        let (is_empty_or_whitespace : t -> bool) =
          fun (x188 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x188) "isEmptyOrWhitespace")
        let (create :
          line_number:int ->
            text:string ->
              range:Range.t ->
                range_including_line_break:Range.t ->
                  first_non_whitespace_character_index:int ->
                    is_empty_or_whitespace:bool -> t)
          =
          fun ~line_number:(x189 : int) ->
            fun ~text:(x190 : string) ->
              fun ~range:(x191 : Range.t) ->
                fun ~range_including_line_break:(x192 : Range.t) ->
                  fun ~first_non_whitespace_character_index:(x193 : int) ->
                    fun ~is_empty_or_whitespace:(x194 : bool) ->
                      let x195 = Ojs.empty_obj () in
                      Ojs.set_prop_ascii x195 "lineNumber"
                        (Ojs.int_to_js x189);
                      Ojs.set_prop_ascii x195 "text" (Ojs.string_to_js x190);
                      Ojs.set_prop_ascii x195 "range" (Range.t_to_js x191);
                      Ojs.set_prop_ascii x195 "rangeIncludingLineBreak"
                        (Range.t_to_js x192);
                      Ojs.set_prop_ascii x195
                        "firstNonWhitespaceCharacterIndex"
                        (Ojs.int_to_js x193);
                      Ojs.set_prop_ascii x195 "isEmptyOrWhitespace"
                        (Ojs.bool_to_js x194);
                      t_of_js x195
      end
    module EndOfLine =
      struct
        type t = [ `CRLF ]
        let rec t_of_js : Ojs.t -> t =
          fun (x197 : Ojs.t) ->
            let x198 = x197 in
            match Ojs.int_of_js x198 with | 2 -> `CRLF | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x196 : [ `CRLF ]) ->
            match x196 with | `CRLF -> Ojs.int_to_js 2
      end
    module TextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x200 : Ojs.t) -> x200
        and t_to_js : t -> Ojs.t = fun (x199 : Ojs.t) -> x199
        let (uri : t -> Uri.t) =
          fun (x201 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x201) "uri")
        let (file_name : t -> string) =
          fun (x202 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x202) "fileName")
        let (is_untitled : t -> bool) =
          fun (x203 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x203) "isUntitled")
        let (language_id : t -> string) =
          fun (x204 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x204) "languageId")
        let (version : t -> int) =
          fun (x205 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x205) "version")
        let (is_dirty : t -> bool) =
          fun (x206 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x206) "isDirty")
        let (is_closed : t -> bool) =
          fun (x207 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x207) "isClosed")
        let (save : t -> bool Promise.t) =
          fun (x208 : t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (t_to_js x208) "save" [||])
        let (eol : t -> EndOfLine.t) =
          fun (x210 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x210) "eol")
        let (line_count : t -> int) =
          fun (x211 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x211) "lineCount")
        let (line_at : t -> int -> TextLine.t) =
          fun (x213 : t) ->
            fun (x212 : int) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x213) "lineAt" [|(Ojs.int_to_js x212)|])
        let (line_at' : t -> Position.t -> TextLine.t) =
          fun (x215 : t) ->
            fun (x214 : Position.t) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x215) "lineAt" [|(Position.t_to_js x214)|])
        let (offset_at : t -> Position.t -> int) =
          fun (x217 : t) ->
            fun (x216 : Position.t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x217) "offsetAt"
                   [|(Position.t_to_js x216)|])
        let (position_at : t -> int -> Position.t) =
          fun (x219 : t) ->
            fun (x218 : int) ->
              Position.t_of_js
                (Ojs.call (t_to_js x219) "positionAt"
                   [|(Ojs.int_to_js x218)|])
        let (get_text : t -> ?range:Range.t -> unit -> string) =
          fun (x223 : t) ->
            fun ?range:(x220 : Range.t option) ->
              fun () ->
                Ojs.string_of_js
                  (let x224 = t_to_js x223 in
                   Ojs.call (Ojs.get_prop_ascii x224 "getText") "apply"
                     [|x224;((let x221 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x220 with
                               | Some x222 ->
                                   ignore
                                     (Ojs.call x221 "push"
                                        [|(Range.t_to_js x222)|])
                               | None -> ());
                              x221))|])
        let (get_word_range_at_position :
          t -> Position.t -> ?regex:regexp -> unit -> Range.t or_undefined) =
          fun (x229 : t) ->
            fun (x225 : Position.t) ->
              fun ?regex:(x226 : regexp option) ->
                fun () ->
                  or_undefined_of_js Range.t_of_js
                    (let x230 = t_to_js x229 in
                     Ojs.call
                       (Ojs.get_prop_ascii x230 "getWordRangeAtPosition")
                       "apply"
                       [|x230;((let x227 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x227 "push"
                                     [|(Position.t_to_js x225)|]);
                                (match x226 with
                                 | Some x228 ->
                                     ignore
                                       (Ojs.call x227 "push"
                                          [|(regexp_to_js x228)|])
                                 | None -> ());
                                x227))|])
        let (validate_range : t -> Range.t -> Range.t) =
          fun (x233 : t) ->
            fun (x232 : Range.t) ->
              Range.t_of_js
                (Ojs.call (t_to_js x233) "validateRange"
                   [|(Range.t_to_js x232)|])
        let (validate_position : t -> Position.t -> Position.t) =
          fun (x235 : t) ->
            fun (x234 : Position.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x235) "validatePosition"
                   [|(Position.t_to_js x234)|])
      end
    module Selection =
      struct
        include struct include Range end
        let (anchor : t -> Position.t) =
          fun (x236 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x236) "anchor")
        let (set_anchor : t -> Position.t -> unit) =
          fun (x237 : t) ->
            fun (x238 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x237) "anchor"
                (Position.t_to_js x238)
        let (active : t -> Position.t) =
          fun (x239 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x239) "active")
        let (set_active : t -> Position.t -> unit) =
          fun (x240 : t) ->
            fun (x241 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x240) "active"
                (Position.t_to_js x241)
        let (create : anchor:Position.t -> active:Position.t -> t) =
          fun ~anchor:(x242 : Position.t) ->
            fun ~active:(x243 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Selection")
                   [|(Position.t_to_js x242);(Position.t_to_js x243)|])
        let (create' :
          anchor_line:int ->
            anchor_character:int ->
              active_line:int -> active_character:int -> t)
          =
          fun ~anchor_line:(x244 : int) ->
            fun ~anchor_character:(x245 : int) ->
              fun ~active_line:(x246 : int) ->
                fun ~active_character:(x247 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Selection")
                       [|(Ojs.int_to_js x244);(Ojs.int_to_js x245);(Ojs.int_to_js
                                                                    x246);(
                         Ojs.int_to_js x247)|])
        let (is_reversed : t -> bool) =
          fun (x248 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x248) "isReversed")
        let (set_is_reversed : t -> bool -> unit) =
          fun (x249 : t) ->
            fun (x250 : bool) ->
              Ojs.set_prop_ascii (t_to_js x249) "isReversed"
                (Ojs.bool_to_js x250)
      end
    module TextEditorCursorStyle =
      struct
        type t =
          [ `Block  | `Underline  | `LineThin  | `BlockOutline 
          | `UnderlineThin ]
        let rec t_of_js : Ojs.t -> t =
          fun (x252 : Ojs.t) ->
            let x253 = x252 in
            match Ojs.int_of_js x253 with
            | 2 -> `Block
            | 3 -> `Underline
            | 4 -> `LineThin
            | 5 -> `BlockOutline
            | 6 -> `UnderlineThin
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x251 :
              [ `Block  | `Underline  | `LineThin  | `BlockOutline 
              | `UnderlineThin ])
            ->
            match x251 with
            | `Block -> Ojs.int_to_js 2
            | `Underline -> Ojs.int_to_js 3
            | `LineThin -> Ojs.int_to_js 4
            | `BlockOutline -> Ojs.int_to_js 5
            | `UnderlineThin -> Ojs.int_to_js 6
      end
    module TextEditorLineNumbersStyle =
      struct
        type t = [ `On  | `Relative ]
        let rec t_of_js : Ojs.t -> t =
          fun (x255 : Ojs.t) ->
            let x256 = x255 in
            match Ojs.int_of_js x256 with
            | 1 -> `On
            | 2 -> `Relative
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x254 : [ `On  | `Relative ]) ->
            match x254 with
            | `On -> Ojs.int_to_js 1
            | `Relative -> Ojs.int_to_js 2
      end
    module TextEditorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x258 : Ojs.t) -> x258
        and t_to_js : t -> Ojs.t = fun (x257 : Ojs.t) -> x257
        let (tab_size : t -> string or_number) =
          fun (x259 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x259) "tabSize")
        let (set_tab_size : t -> string or_number -> unit) =
          fun (x261 : t) ->
            fun (x262 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x261) "tabSize"
                (or_number_to_js Ojs.string_to_js x262)
        let (insert_spaces : t -> bool or_string) =
          fun (x264 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x264) "insertSpaces")
        let (set_insert_spaces : t -> bool or_string -> unit) =
          fun (x266 : t) ->
            fun (x267 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x266) "insertSpaces"
                (or_string_to_js Ojs.bool_to_js x267)
        let (cursor_style : t -> TextEditorCursorStyle.t) =
          fun (x269 : t) ->
            TextEditorCursorStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x269) "cursorStyle")
        let (set_cursor_style : t -> TextEditorCursorStyle.t -> unit) =
          fun (x270 : t) ->
            fun (x271 : TextEditorCursorStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x270) "cursorStyle"
                (TextEditorCursorStyle.t_to_js x271)
        let (line_numbers : t -> TextEditorLineNumbersStyle.t) =
          fun (x272 : t) ->
            TextEditorLineNumbersStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x272) "lineNumbers")
        let (set_line_numbers : t -> TextEditorLineNumbersStyle.t -> unit) =
          fun (x273 : t) ->
            fun (x274 : TextEditorLineNumbersStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x273) "lineNumbers"
                (TextEditorLineNumbersStyle.t_to_js x274)
        let (create :
          ?tab_size:string or_number ->
            ?insert_spaces:bool or_string ->
              ?cursor_style:TextEditorCursorStyle.t ->
                ?line_numbers:TextEditorLineNumbersStyle.t -> unit -> t)
          =
          fun ?tab_size:(x275 : string or_number option) ->
            fun ?insert_spaces:(x276 : bool or_string option) ->
              fun ?cursor_style:(x277 : TextEditorCursorStyle.t option) ->
                fun
                  ?line_numbers:(x278 : TextEditorLineNumbersStyle.t option)
                  ->
                  fun () ->
                    let x279 = Ojs.empty_obj () in
                    (match x275 with
                     | Some x284 ->
                         Ojs.set_prop_ascii x279 "tabSize"
                           (or_number_to_js Ojs.string_to_js x284)
                     | None -> ());
                    (match x276 with
                     | Some x282 ->
                         Ojs.set_prop_ascii x279 "insertSpaces"
                           (or_string_to_js Ojs.bool_to_js x282)
                     | None -> ());
                    (match x277 with
                     | Some x281 ->
                         Ojs.set_prop_ascii x279 "cursorStyle"
                           (TextEditorCursorStyle.t_to_js x281)
                     | None -> ());
                    (match x278 with
                     | Some x280 ->
                         Ojs.set_prop_ascii x279 "lineNumbers"
                           (TextEditorLineNumbersStyle.t_to_js x280)
                     | None -> ());
                    t_of_js x279
      end
    module TextEditorDecorationType =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x287 : Ojs.t) -> x287
        and t_to_js : t -> Ojs.t = fun (x286 : Ojs.t) -> x286
        let (key : t -> string) =
          fun (x288 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x288) "key")
        let (dispose : t -> unit) =
          fun (x289 : t) -> ignore (Ojs.call (t_to_js x289) "dispose" [||])
        let (create : key:string -> dispose:(unit -> unit) -> t) =
          fun ~key:(x290 : string) ->
            fun ~dispose:(x291 : unit -> unit) ->
              let x292 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x292 "key" (Ojs.string_to_js x290);
              Ojs.set_prop_ascii x292 "dispose"
                (Ojs.fun_to_js 1 (fun _ -> x291 ()));
              t_of_js x292
      end
    module TextEditorRevealType =
      struct
        type t = [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ]
        let rec t_of_js : Ojs.t -> t =
          fun (x294 : Ojs.t) ->
            let x295 = x294 in
            match Ojs.int_of_js x295 with
            | 1 -> `InCenter
            | 2 -> `InCenterIfOutsideViewport
            | 3 -> `AtTop
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x293 : [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ])
            ->
            match x293 with
            | `InCenter -> Ojs.int_to_js 1
            | `InCenterIfOutsideViewport -> Ojs.int_to_js 2
            | `AtTop -> Ojs.int_to_js 3
      end
    module TextEditorSelectionChangeKind =
      struct
        type t = [ `Mouse  | `Command ]
        let rec t_of_js : Ojs.t -> t =
          fun (x297 : Ojs.t) ->
            let x298 = x297 in
            match Ojs.int_of_js x298 with
            | 2 -> `Mouse
            | 3 -> `Command
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x296 : [ `Mouse  | `Command ]) ->
            match x296 with
            | `Mouse -> Ojs.int_to_js 2
            | `Command -> Ojs.int_to_js 3
      end
    module TextEditorEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x300 : Ojs.t) -> x300
        and t_to_js : t -> Ojs.t = fun (x299 : Ojs.t) -> x299
        type replace_location =
          [ `Position of Position.t  | `Range of Range.t 
          | `Selection of Selection.t ]
        let rec replace_location_to_js : replace_location -> Ojs.t =
          fun
            (x301 :
              [ `Position of Position.t  | `Range of Range.t 
              | `Selection of Selection.t ])
            ->
            match x301 with
            | `Position x302 -> Position.t_to_js x302
            | `Range x303 -> Range.t_to_js x303
            | `Selection x304 -> Selection.t_to_js x304
        let replace_location_of_js js_val =
          if Ojs.has_property js_val "anchor"
          then `Position (Position.t_of_js js_val)
          else
            if Ojs.has_property js_val "start"
            then `Range (Range.t_of_js js_val)
            else `Selection (Selection.t_of_js js_val)
        type delete_location =
          [ `Range of Range.t  | `Selection of Selection.t ]
        let rec delete_location_to_js : delete_location -> Ojs.t =
          fun (x310 : [ `Range of Range.t  | `Selection of Selection.t ]) ->
            match x310 with
            | `Range x311 -> Range.t_to_js x311
            | `Selection x312 -> Selection.t_to_js x312
        let delete_location_of_js js_val =
          if Ojs.has_property js_val "anchor"
          then `Selection (Selection.t_of_js js_val)
          else `Range (Range.t_of_js js_val)
        let (replace :
          t -> location:replace_location -> value:string -> unit) =
          fun (x319 : t) ->
            fun ~location:(x317 : replace_location) ->
              fun ~value:(x318 : string) ->
                ignore
                  (Ojs.call (t_to_js x319) "replace"
                     [|(replace_location_to_js x317);(Ojs.string_to_js x318)|])
        let (insert : t -> location:Position.t -> value:string -> unit) =
          fun (x322 : t) ->
            fun ~location:(x320 : Position.t) ->
              fun ~value:(x321 : string) ->
                ignore
                  (Ojs.call (t_to_js x322) "insert"
                     [|(Position.t_to_js x320);(Ojs.string_to_js x321)|])
        let (delete : t -> delete_location -> unit) =
          fun (x324 : t) ->
            fun (x323 : delete_location) ->
              ignore
                (Ojs.call (t_to_js x324) "delete"
                   [|(delete_location_to_js x323)|])
        let (set_end_of_line : t -> EndOfLine.t -> unit) =
          fun (x326 : t) ->
            fun (x325 : EndOfLine.t) ->
              ignore
                (Ojs.call (t_to_js x326) "setEndOfLine"
                   [|(EndOfLine.t_to_js x325)|])
        let (create :
          replace:(location:replace_location -> value:string -> unit) ->
            insert:(location:Position.t -> value:string -> unit) ->
              delete:(location:delete_location -> unit) ->
                set_end_of_line:(end_of_line:EndOfLine.t -> t) -> t)
          =
          fun
            ~replace:(x327 :
                       location:replace_location -> value:string -> unit)
            ->
            fun ~insert:(x328 : location:Position.t -> value:string -> unit)
              ->
              fun ~delete:(x329 : location:delete_location -> unit) ->
                fun ~set_end_of_line:(x330 : end_of_line:EndOfLine.t -> t) ->
                  let x331 = Ojs.empty_obj () in
                  Ojs.set_prop_ascii x331 "replace"
                    (Ojs.fun_to_js 2
                       (fun (x336 : Ojs.t) ->
                          fun (x337 : Ojs.t) ->
                            x327 ~location:(replace_location_of_js x336)
                              ~value:(Ojs.string_of_js x337)));
                  Ojs.set_prop_ascii x331 "insert"
                    (Ojs.fun_to_js 2
                       (fun (x334 : Ojs.t) ->
                          fun (x335 : Ojs.t) ->
                            x328 ~location:(Position.t_of_js x334)
                              ~value:(Ojs.string_of_js x335)));
                  Ojs.set_prop_ascii x331 "delete"
                    (Ojs.fun_to_js 1
                       (fun (x333 : Ojs.t) ->
                          x329 ~location:(delete_location_of_js x333)));
                  Ojs.set_prop_ascii x331 "setEndOfLine"
                    (Ojs.fun_to_js 1
                       (fun (x332 : Ojs.t) ->
                          t_to_js
                            (x330 ~end_of_line:(EndOfLine.t_of_js x332))));
                  t_of_js x331
      end
    module ViewColumn =
      struct
        type t =
          [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | `Six 
          | `Seven  | `Eight  | `Nine ]
        let rec t_of_js : Ojs.t -> t =
          fun (x339 : Ojs.t) ->
            let x340 = x339 in
            match Ojs.int_of_js x340 with
            | (-2) -> `Beside
            | 1 -> `One
            | 2 -> `Two
            | 3 -> `Three
            | 4 -> `Four
            | 5 -> `Five
            | 6 -> `Six
            | 7 -> `Seven
            | 8 -> `Eight
            | 9 -> `Nine
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x338 :
              [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | 
                `Six 
              | `Seven  | `Eight  | `Nine ])
            ->
            match x338 with
            | `Beside -> Ojs.int_to_js (-2)
            | `One -> Ojs.int_to_js 1
            | `Two -> Ojs.int_to_js 2
            | `Three -> Ojs.int_to_js 3
            | `Four -> Ojs.int_to_js 4
            | `Five -> Ojs.int_to_js 5
            | `Six -> Ojs.int_to_js 6
            | `Seven -> Ojs.int_to_js 7
            | `Eight -> Ojs.int_to_js 8
            | `Nine -> Ojs.int_to_js 9
      end
    module SnippetString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x342 : Ojs.t) -> x342
        and t_to_js : t -> Ojs.t = fun (x341 : Ojs.t) -> x341
        let (value : t -> string) =
          fun (x343 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x343) "value")
        let (set_value : t -> string -> unit) =
          fun (x344 : t) ->
            fun (x345 : string) ->
              Ojs.set_prop_ascii (t_to_js x344) "value"
                (Ojs.string_to_js x345)
        let (create : ?value:string -> unit -> t) =
          fun ?value:(x346 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SnippetString")
                   (let x347 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x346 with
                     | Some x348 ->
                         ignore
                           (Ojs.call x347 "push" [|(Ojs.string_to_js x348)|])
                     | None -> ());
                    x347))
        let (append_text : t -> string -> t) =
          fun (x350 : t) ->
            fun (x349 : string) ->
              t_of_js
                (Ojs.call (t_to_js x350) "appendText"
                   [|(Ojs.string_to_js x349)|])
        let (append_tabstop : t -> ?number:int -> unit -> t) =
          fun (x354 : t) ->
            fun ?number:(x351 : int option) ->
              fun () ->
                t_of_js
                  (let x355 = t_to_js x354 in
                   Ojs.call (Ojs.get_prop_ascii x355 "appendTabstop") "apply"
                     [|x355;((let x352 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x351 with
                               | Some x353 ->
                                   ignore
                                     (Ojs.call x352 "push"
                                        [|(Ojs.int_to_js x353)|])
                               | None -> ());
                              x352))|])
        let (append_placeholder : t -> string -> ?number:int -> unit -> t) =
          fun (x360 : t) ->
            fun (x356 : string) ->
              fun ?number:(x357 : int option) ->
                fun () ->
                  t_of_js
                    (let x361 = t_to_js x360 in
                     Ojs.call (Ojs.get_prop_ascii x361 "appendPlaceholder")
                       "apply"
                       [|x361;((let x358 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x358 "push"
                                     [|(Ojs.string_to_js x356)|]);
                                (match x357 with
                                 | Some x359 ->
                                     ignore
                                       (Ojs.call x358 "push"
                                          [|(Ojs.int_to_js x359)|])
                                 | None -> ());
                                x358))|])
        let (append_choice : t -> string list -> ?number:int -> unit -> t) =
          fun (x367 : t) ->
            fun (x362 : string list) ->
              fun ?number:(x363 : int option) ->
                fun () ->
                  t_of_js
                    (let x368 = t_to_js x367 in
                     Ojs.call (Ojs.get_prop_ascii x368 "appendChoice")
                       "apply"
                       [|x368;((let x364 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x364 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x362)|]);
                                (match x363 with
                                 | Some x365 ->
                                     ignore
                                       (Ojs.call x364 "push"
                                          [|(Ojs.int_to_js x365)|])
                                 | None -> ());
                                x364))|])
        let (append_variable : t -> string -> default:string -> t) =
          fun (x371 : t) ->
            fun (x369 : string) ->
              fun ~default:(x370 : string) ->
                t_of_js
                  (Ojs.call (t_to_js x371) "appendVariable"
                     [|(Ojs.string_to_js x369);(Ojs.string_to_js x370)|])
      end
    module ThemeColor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x373 : Ojs.t) -> x373
        and t_to_js : t -> Ojs.t = fun (x372 : Ojs.t) -> x372
        let (create : string -> t) =
          fun (x374 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeColor")
                 [|(Ojs.string_to_js x374)|])
      end
    module ThemeIcon =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x376 : Ojs.t) -> x376
        and t_to_js : t -> Ojs.t = fun (x375 : Ojs.t) -> x375
        let (file : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "File")
        let (folder : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "Folder")
        let (id : t -> string) =
          fun (x377 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x377) "id")
        let (color : t -> ThemeColor.t) =
          fun (x378 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x378) "color")
        let (create : string -> ?color:ThemeColor.t -> unit -> t) =
          fun (x379 : string) ->
            fun ?color:(x380 : ThemeColor.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                     (let x381 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x381 "push" [|(Ojs.string_to_js x379)|]);
                      (match x380 with
                       | Some x382 ->
                           ignore
                             (Ojs.call x381 "push"
                                [|(ThemeColor.t_to_js x382)|])
                       | None -> ());
                      x381))
      end
    module ThemableDecorationAttachmentRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x384 : Ojs.t) -> x384
        and t_to_js : t -> Ojs.t = fun (x383 : Ojs.t) -> x383
        let (content_text : t -> string) =
          fun (x385 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x385) "contentText")
        let (set_content_text : t -> string -> unit) =
          fun (x386 : t) ->
            fun (x387 : string) ->
              Ojs.set_prop_ascii (t_to_js x386) "contentText"
                (Ojs.string_to_js x387)
        let (content_icon_path : t -> Uri.t or_string) =
          fun (x388 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x388) "contentIconPath")
        let (set_content_icon_path : t -> Uri.t or_string -> unit) =
          fun (x390 : t) ->
            fun (x391 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x390) "contentIconPath"
                (or_string_to_js Uri.t_to_js x391)
        let (border : t -> string) =
          fun (x393 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x393) "border")
        let (set_border : t -> string -> unit) =
          fun (x394 : t) ->
            fun (x395 : string) ->
              Ojs.set_prop_ascii (t_to_js x394) "border"
                (Ojs.string_to_js x395)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x396 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x396) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x398 : t) ->
            fun (x399 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x398) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x399)
        let (font_style : t -> string) =
          fun (x401 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x401) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x402 : t) ->
            fun (x403 : string) ->
              Ojs.set_prop_ascii (t_to_js x402) "fontStyle"
                (Ojs.string_to_js x403)
        let (font_weight : t -> string) =
          fun (x404 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x404) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x405 : t) ->
            fun (x406 : string) ->
              Ojs.set_prop_ascii (t_to_js x405) "fontWeight"
                (Ojs.string_to_js x406)
        let (text_decoration : t -> string) =
          fun (x407 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x407) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x408 : t) ->
            fun (x409 : string) ->
              Ojs.set_prop_ascii (t_to_js x408) "textDecoration"
                (Ojs.string_to_js x409)
        let (color : t -> ThemeColor.t or_string) =
          fun (x410 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x410) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x412 : t) ->
            fun (x413 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x412) "color"
                (or_string_to_js ThemeColor.t_to_js x413)
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x415 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x415) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x417 : t) ->
            fun (x418 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x417) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x418)
        let (margin : t -> string) =
          fun (x420 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x420) "margin")
        let (set_margin : t -> string -> unit) =
          fun (x421 : t) ->
            fun (x422 : string) ->
              Ojs.set_prop_ascii (t_to_js x421) "margin"
                (Ojs.string_to_js x422)
        let (width : t -> string) =
          fun (x423 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x423) "width")
        let (set_width : t -> string -> unit) =
          fun (x424 : t) ->
            fun (x425 : string) ->
              Ojs.set_prop_ascii (t_to_js x424) "width"
                (Ojs.string_to_js x425)
        let (height : t -> string) =
          fun (x426 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x426) "height")
        let (set_height : t -> string -> unit) =
          fun (x427 : t) ->
            fun (x428 : string) ->
              Ojs.set_prop_ascii (t_to_js x427) "height"
                (Ojs.string_to_js x428)
      end
    module ThemableDecorationRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x430 : Ojs.t) -> x430
        and t_to_js : t -> Ojs.t = fun (x429 : Ojs.t) -> x429
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x431 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x431) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x433 : t) ->
            fun (x434 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x433) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x434)
        let (outline : t -> string) =
          fun (x436 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x436) "outline")
        let (set_outline : t -> string -> unit) =
          fun (x437 : t) ->
            fun (x438 : string) ->
              Ojs.set_prop_ascii (t_to_js x437) "outline"
                (Ojs.string_to_js x438)
        let (outline_color : t -> ThemeColor.t or_string) =
          fun (x439 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x439) "outlineColor")
        let (set_outline_color : t -> ThemeColor.t or_string -> unit) =
          fun (x441 : t) ->
            fun (x442 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x441) "outlineColor"
                (or_string_to_js ThemeColor.t_to_js x442)
        let (outline_style : t -> string) =
          fun (x444 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x444) "outlineStyle")
        let (set_outline_style : t -> string -> unit) =
          fun (x445 : t) ->
            fun (x446 : string) ->
              Ojs.set_prop_ascii (t_to_js x445) "outlineStyle"
                (Ojs.string_to_js x446)
        let (outline_width : t -> string) =
          fun (x447 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x447) "outlineWidth")
        let (set_outline_width : t -> string -> unit) =
          fun (x448 : t) ->
            fun (x449 : string) ->
              Ojs.set_prop_ascii (t_to_js x448) "outlineWidth"
                (Ojs.string_to_js x449)
        let (border : t -> string) =
          fun (x450 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x450) "border")
        let (set_border : t -> string -> unit) =
          fun (x451 : t) ->
            fun (x452 : string) ->
              Ojs.set_prop_ascii (t_to_js x451) "border"
                (Ojs.string_to_js x452)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x453 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x453) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x455 : t) ->
            fun (x456 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x455) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x456)
        let (border_radius : t -> string) =
          fun (x458 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x458) "borderRadius")
        let (set_border_radius : t -> string -> unit) =
          fun (x459 : t) ->
            fun (x460 : string) ->
              Ojs.set_prop_ascii (t_to_js x459) "borderRadius"
                (Ojs.string_to_js x460)
        let (border_spacing : t -> string) =
          fun (x461 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x461) "borderSpacing")
        let (set_border_spacing : t -> string -> unit) =
          fun (x462 : t) ->
            fun (x463 : string) ->
              Ojs.set_prop_ascii (t_to_js x462) "borderSpacing"
                (Ojs.string_to_js x463)
        let (border_style : t -> string) =
          fun (x464 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x464) "borderStyle")
        let (set_border_style : t -> string -> unit) =
          fun (x465 : t) ->
            fun (x466 : string) ->
              Ojs.set_prop_ascii (t_to_js x465) "borderStyle"
                (Ojs.string_to_js x466)
        let (border_width : t -> string) =
          fun (x467 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x467) "borderWidth")
        let (set_border_width : t -> string -> unit) =
          fun (x468 : t) ->
            fun (x469 : string) ->
              Ojs.set_prop_ascii (t_to_js x468) "borderWidth"
                (Ojs.string_to_js x469)
        let (font_style : t -> string) =
          fun (x470 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x470) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x471 : t) ->
            fun (x472 : string) ->
              Ojs.set_prop_ascii (t_to_js x471) "fontStyle"
                (Ojs.string_to_js x472)
        let (font_weight : t -> string) =
          fun (x473 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x473) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x474 : t) ->
            fun (x475 : string) ->
              Ojs.set_prop_ascii (t_to_js x474) "fontWeight"
                (Ojs.string_to_js x475)
        let (text_decoration : t -> string) =
          fun (x476 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x476) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x477 : t) ->
            fun (x478 : string) ->
              Ojs.set_prop_ascii (t_to_js x477) "textDecoration"
                (Ojs.string_to_js x478)
        let (cursor : t -> string) =
          fun (x479 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x479) "cursor")
        let (set_cursor : t -> string -> unit) =
          fun (x480 : t) ->
            fun (x481 : string) ->
              Ojs.set_prop_ascii (t_to_js x480) "cursor"
                (Ojs.string_to_js x481)
        let (color : t -> ThemeColor.t or_string) =
          fun (x482 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x482) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x484 : t) ->
            fun (x485 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x484) "color"
                (or_string_to_js ThemeColor.t_to_js x485)
        let (opacity : t -> string) =
          fun (x487 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x487) "opacity")
        let (set_opacity : t -> string -> unit) =
          fun (x488 : t) ->
            fun (x489 : string) ->
              Ojs.set_prop_ascii (t_to_js x488) "opacity"
                (Ojs.string_to_js x489)
        let (letter_spacing : t -> string) =
          fun (x490 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x490) "letterSpacing")
        let (set_letter_spacing : t -> string -> unit) =
          fun (x491 : t) ->
            fun (x492 : string) ->
              Ojs.set_prop_ascii (t_to_js x491) "letterSpacing"
                (Ojs.string_to_js x492)
        let (gutter_icon_path : t -> Uri.t or_string) =
          fun (x493 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x493) "gutterIconPath")
        let (set_gutter_icon_path : t -> Uri.t or_string -> unit) =
          fun (x495 : t) ->
            fun (x496 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x495) "gutterIconPath"
                (or_string_to_js Uri.t_to_js x496)
        let (gutter_icon_size : t -> string) =
          fun (x498 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x498) "gutterIconSize")
        let (set_gutter_icon_size : t -> string -> unit) =
          fun (x499 : t) ->
            fun (x500 : string) ->
              Ojs.set_prop_ascii (t_to_js x499) "gutterIconSize"
                (Ojs.string_to_js x500)
        let (overview_ruler_color : t -> ThemeColor.t or_string) =
          fun (x501 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x501) "overviewRulerColor")
        let (set_overview_ruler_color : t -> ThemeColor.t or_string -> unit)
          =
          fun (x503 : t) ->
            fun (x504 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x503) "overviewRulerColor"
                (or_string_to_js ThemeColor.t_to_js x504)
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x506 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x506) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x507 : t) ->
            fun (x508 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x507) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x508)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x509 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x509) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x510 : t) ->
            fun (x511 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x510) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x511)
      end
    module OverviewRulerLane =
      struct
        type t = [ `Center  | `Right  | `Full ]
        let rec t_of_js : Ojs.t -> t =
          fun (x513 : Ojs.t) ->
            let x514 = x513 in
            match Ojs.int_of_js x514 with
            | 2 -> `Center
            | 4 -> `Right
            | 7 -> `Full
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x512 : [ `Center  | `Right  | `Full ]) ->
            match x512 with
            | `Center -> Ojs.int_to_js 2
            | `Right -> Ojs.int_to_js 4
            | `Full -> Ojs.int_to_js 7
      end
    module DecorationRangeBehavior =
      struct
        type t = [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]
        let rec t_of_js : Ojs.t -> t =
          fun (x516 : Ojs.t) ->
            let x517 = x516 in
            match Ojs.int_of_js x517 with
            | 1 -> `ClosedClosed
            | 2 -> `OpenClosed
            | 3 -> `ClosedOpen
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x515 : [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]) ->
            match x515 with
            | `ClosedClosed -> Ojs.int_to_js 1
            | `OpenClosed -> Ojs.int_to_js 2
            | `ClosedOpen -> Ojs.int_to_js 3
      end
    module DecorationRenderOptions =
      struct
        include struct include ThemableDecorationRenderOptions end
        let (is_whole_line : t -> bool) =
          fun (x518 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x518) "isWholeLine")
        let (set_is_whole_line : t -> bool -> unit) =
          fun (x519 : t) ->
            fun (x520 : bool) ->
              Ojs.set_prop_ascii (t_to_js x519) "isWholeLine"
                (Ojs.bool_to_js x520)
        let (range_behavior : t -> DecorationRangeBehavior.t) =
          fun (x521 : t) ->
            DecorationRangeBehavior.t_of_js
              (Ojs.get_prop_ascii (t_to_js x521) "rangeBehavior")
        let (set_range_behavior : t -> DecorationRangeBehavior.t -> unit) =
          fun (x522 : t) ->
            fun (x523 : DecorationRangeBehavior.t) ->
              Ojs.set_prop_ascii (t_to_js x522) "rangeBehavior"
                (DecorationRangeBehavior.t_to_js x523)
        let (overview_ruler_lane : t -> OverviewRulerLane.t) =
          fun (x524 : t) ->
            OverviewRulerLane.t_of_js
              (Ojs.get_prop_ascii (t_to_js x524) "overviewRulerLane")
        let (set_overview_ruler_lane : t -> OverviewRulerLane.t -> unit) =
          fun (x525 : t) ->
            fun (x526 : OverviewRulerLane.t) ->
              Ojs.set_prop_ascii (t_to_js x525) "overviewRulerLane"
                (OverviewRulerLane.t_to_js x526)
        let (light : t -> ThemableDecorationRenderOptions.t) =
          fun (x527 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x527) "light")
        let (set_light : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x528 : t) ->
            fun (x529 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x528) "light"
                (ThemableDecorationRenderOptions.t_to_js x529)
        let (dark : t -> ThemableDecorationRenderOptions.t) =
          fun (x530 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x530) "dark")
        let (set_dark : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x531 : t) ->
            fun (x532 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x531) "dark"
                (ThemableDecorationRenderOptions.t_to_js x532)
      end
    module ThemableDecorationInstanceRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x534 : Ojs.t) -> x534
        and t_to_js : t -> Ojs.t = fun (x533 : Ojs.t) -> x533
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x535 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x535) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x536 : t) ->
            fun (x537 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x536) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x537)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x538 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x538) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x539 : t) ->
            fun (x540 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x539) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x540)
      end
    module DecorationInstanceRenderOptions =
      struct
        include struct include ThemableDecorationInstanceRenderOptions end
        let (light : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x541 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x541) "light")
        let (set_light :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x542 : t) ->
            fun (x543 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x542) "light"
                (ThemableDecorationInstanceRenderOptions.t_to_js x543)
        let (dark : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x544 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x544) "dark")
        let (set_dark :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x545 : t) ->
            fun (x546 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x545) "dark"
                (ThemableDecorationInstanceRenderOptions.t_to_js x546)
      end
    module MarkedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x548 : Ojs.t) -> x548
        and t_to_js : t -> Ojs.t = fun (x547 : Ojs.t) -> x547
      end
    module DecorationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x550 : Ojs.t) -> x550
        and t_to_js : t -> Ojs.t = fun (x549 : Ojs.t) -> x549
        let (range : t -> Range.t) =
          fun (x551 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x551) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x552 : t) ->
            fun (x553 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x552) "range" (Range.t_to_js x553)
        let (hover_message : t -> (MarkedString.t, MarkedString.t) or_array)
          =
          fun (x554 : t) ->
            or_array_of_js MarkedString.t_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x554) "hoverMessage")
        let (set_hover_message :
          t -> (MarkedString.t, MarkedString.t) or_array -> unit) =
          fun (x557 : t) ->
            fun (x558 : (MarkedString.t, MarkedString.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x557) "hoverMessage"
                (or_array_to_js MarkedString.t_to_js MarkedString.t_to_js
                   x558)
        let (render_options : t -> DecorationInstanceRenderOptions.t) =
          fun (x561 : t) ->
            DecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x561) "renderOptions")
        let (set_render_options :
          t -> DecorationInstanceRenderOptions.t -> unit) =
          fun (x562 : t) ->
            fun (x563 : DecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x562) "renderOptions"
                (DecorationInstanceRenderOptions.t_to_js x563)
      end
    module TextEditor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x565 : Ojs.t) -> x565
        and t_to_js : t -> Ojs.t = fun (x564 : Ojs.t) -> x564
        let (document : t -> TextDocument.t) =
          fun (x566 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x566) "document")
        let (selection : t -> Selection.t) =
          fun (x567 : t) ->
            Selection.t_of_js (Ojs.get_prop_ascii (t_to_js x567) "selection")
        let (set_selection : t -> Selection.t -> unit) =
          fun (x568 : t) ->
            fun (x569 : Selection.t) ->
              Ojs.set_prop_ascii (t_to_js x568) "selection"
                (Selection.t_to_js x569)
        let (selections : t -> Selection.t list) =
          fun (x570 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x570) "selections")
        let (set_selections : t -> Selection.t list -> unit) =
          fun (x572 : t) ->
            fun (x573 : Selection.t list) ->
              Ojs.set_prop_ascii (t_to_js x572) "selections"
                (Ojs.list_to_js Selection.t_to_js x573)
        let (visible_ranges : t -> Range.t list) =
          fun (x575 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x575) "visibleRanges")
        let (options : t -> TextEditorOptions.t) =
          fun (x577 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x577) "options")
        let (set_options : t -> TextEditorOptions.t -> unit) =
          fun (x578 : t) ->
            fun (x579 : TextEditorOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x578) "options"
                (TextEditorOptions.t_to_js x579)
        let (view_column : t -> ViewColumn.t) =
          fun (x580 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x580) "viewColumn")
        module EditOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x582 : Ojs.t) -> x582
            and t_to_js : t -> Ojs.t = fun (x581 : Ojs.t) -> x581
            let (undo_stop_before : t -> bool) =
              fun (x583 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x583) "undoStopBefore")
            let (set_undo_stop_before : t -> bool -> unit) =
              fun (x584 : t) ->
                fun (x585 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x584) "undoStopBefore"
                    (Ojs.bool_to_js x585)
            let (undo_stop_after : t -> bool) =
              fun (x586 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x586) "undoStopAfter")
            let (set_undo_stop_after : t -> bool -> unit) =
              fun (x587 : t) ->
                fun (x588 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x587) "undoStopAfter"
                    (Ojs.bool_to_js x588)
          end
        let (edit :
          t ->
            (TextEditorEdit.t -> unit) ->
              ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x594 : t) ->
            fun (x589 : TextEditorEdit.t -> unit) ->
              fun ?options:(x590 : EditOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x595 = t_to_js x594 in
                     Ojs.call (Ojs.get_prop_ascii x595 "edit") "apply"
                       [|x595;((let x591 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x591 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x593 : Ojs.t) ->
                                             x589
                                               (TextEditorEdit.t_of_js x593)))|]);
                                (match x590 with
                                 | Some x592 ->
                                     ignore
                                       (Ojs.call x591 "push"
                                          [|(EditOptions.t_to_js x592)|])
                                 | None -> ());
                                x591))|])
        let (insert_snippet :
          t ->
            SnippetString.t ->
              ?location:(Position.t, Range.t, Position.t list, Range.t list)
                union4 -> ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x609 : t) ->
            fun (x597 : SnippetString.t) ->
              fun
                ?location:(x598 :
                            (Position.t, Range.t, Position.t list,
                              Range.t list) union4 option)
                ->
                fun ?options:(x599 : EditOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.bool_of_js
                      (let x610 = t_to_js x609 in
                       Ojs.call (Ojs.get_prop_ascii x610 "insertSnippet")
                         "apply"
                         [|x610;((let x600 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x600 "push"
                                       [|(SnippetString.t_to_js x597)|]);
                                  (match x598 with
                                   | Some x602 ->
                                       ignore
                                         (Ojs.call x600 "push"
                                            [|(union4_to_js Position.t_to_js
                                                 Range.t_to_js
                                                 (fun
                                                    (x605 : Position.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Position.t_to_js x605)
                                                 (fun (x607 : Range.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Range.t_to_js x607)
                                                 x602)|])
                                   | None -> ());
                                  (match x599 with
                                   | Some x601 ->
                                       ignore
                                         (Ojs.call x600 "push"
                                            [|(EditOptions.t_to_js x601)|])
                                   | None -> ());
                                  x600))|])
        let (set_decorations :
          t ->
            TextEditorDecorationType.t ->
              (DecorationOptions.t, Range.t) union2 list -> unit)
          =
          fun (x617 : t) ->
            fun (x612 : TextEditorDecorationType.t) ->
              fun (x613 : (DecorationOptions.t, Range.t) union2 list) ->
                ignore
                  (Ojs.call (t_to_js x617) "setDecorations"
                     [|(TextEditorDecorationType.t_to_js x612);(Ojs.list_to_js
                                                                  (fun
                                                                    (x614 :
                                                                    (DecorationOptions.t,
                                                                    Range.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    DecorationOptions.t_to_js
                                                                    Range.t_to_js
                                                                    x614)
                                                                  x613)|])
        let (reveal_range :
          t ->
            Range.t -> ?reveal_type_:TextEditorRevealType.t -> unit -> unit)
          =
          fun (x622 : t) ->
            fun (x618 : Range.t) ->
              fun ?reveal_type_:(x619 : TextEditorRevealType.t option) ->
                fun () ->
                  ignore
                    (let x623 = t_to_js x622 in
                     Ojs.call (Ojs.get_prop_ascii x623 "revealRange") "apply"
                       [|x623;((let x620 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x620 "push"
                                     [|(Range.t_to_js x618)|]);
                                (match x619 with
                                 | Some x621 ->
                                     ignore
                                       (Ojs.call x620 "push"
                                          [|(TextEditorRevealType.t_to_js
                                               x621)|])
                                 | None -> ());
                                x620))|])
        let (show : t -> ?column:ViewColumn.t -> unit -> unit) =
          fun (x627 : t) ->
            fun ?column:(x624 : ViewColumn.t option) ->
              fun () ->
                ignore
                  (let x628 = t_to_js x627 in
                   Ojs.call (Ojs.get_prop_ascii x628 "show") "apply"
                     [|x628;((let x625 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x624 with
                               | Some x626 ->
                                   ignore
                                     (Ojs.call x625 "push"
                                        [|(ViewColumn.t_to_js x626)|])
                               | None -> ());
                              x625))|])
        let (hide : t -> unit) =
          fun (x629 : t) -> ignore (Ojs.call (t_to_js x629) "hide" [||])
      end
    module TextEditorSelectionChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x631 : Ojs.t) -> x631
        and t_to_js : t -> Ojs.t = fun (x630 : Ojs.t) -> x630
        let (text_editor : t -> TextEditor.t) =
          fun (x632 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x632) "textEditor")
        let (selections : t -> Selection.t list) =
          fun (x633 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x633) "selections")
        let (kind : t -> TextEditorSelectionChangeKind.t) =
          fun (x635 : t) ->
            TextEditorSelectionChangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x635) "kind")
      end
    module TextEditorVisibleRangesChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x637 : Ojs.t) -> x637
        and t_to_js : t -> Ojs.t = fun (x636 : Ojs.t) -> x636
        let (text_editor : t -> TextEditor.t) =
          fun (x638 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x638) "textEditor")
        let (visible_ranges : t -> Range.t list) =
          fun (x639 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x639) "visibleRanges")
      end
    module TextEditorOptionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x642 : Ojs.t) -> x642
        and t_to_js : t -> Ojs.t = fun (x641 : Ojs.t) -> x641
        let (text_editor : t -> TextEditor.t) =
          fun (x643 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x643) "textEditor")
        let (options : t -> TextEditorOptions.t) =
          fun (x644 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x644) "options")
      end
    module TextEditorViewColumnChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x646 : Ojs.t) -> x646
        and t_to_js : t -> Ojs.t = fun (x645 : Ojs.t) -> x645
        let (text_editor : t -> TextEditor.t) =
          fun (x647 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x647) "textEditor")
        let (view_column : t -> ViewColumn.t) =
          fun (x648 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x648) "viewColumn")
      end
    module TextDocumentShowOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x650 : Ojs.t) -> x650
        and t_to_js : t -> Ojs.t = fun (x649 : Ojs.t) -> x649
        let (view_column : t -> ViewColumn.t) =
          fun (x651 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x651) "viewColumn")
        let (set_view_column : t -> ViewColumn.t -> unit) =
          fun (x652 : t) ->
            fun (x653 : ViewColumn.t) ->
              Ojs.set_prop_ascii (t_to_js x652) "viewColumn"
                (ViewColumn.t_to_js x653)
        let (preserve_focus : t -> bool) =
          fun (x654 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x654) "preserveFocus")
        let (set_preserve_focus : t -> bool -> unit) =
          fun (x655 : t) ->
            fun (x656 : bool) ->
              Ojs.set_prop_ascii (t_to_js x655) "preserveFocus"
                (Ojs.bool_to_js x656)
        let (preview : t -> bool) =
          fun (x657 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x657) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x658 : t) ->
            fun (x659 : bool) ->
              Ojs.set_prop_ascii (t_to_js x658) "preview"
                (Ojs.bool_to_js x659)
        let (selection : t -> Range.t) =
          fun (x660 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x660) "selection")
        let (set_selection : t -> Range.t -> unit) =
          fun (x661 : t) ->
            fun (x662 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x661) "selection"
                (Range.t_to_js x662)
      end
    module DisposableLike =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x664 : Ojs.t) -> x664
        and t_to_js : t -> Ojs.t = fun (x663 : Ojs.t) -> x663
        let (dispose : t -> any) =
          fun (x665 : t) ->
            any_of_js (Ojs.call (t_to_js x665) "dispose" [||])
      end
    module Disposable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x667 : Ojs.t) -> x667
        and t_to_js : t -> Ojs.t = fun (x666 : Ojs.t) -> x666
        let (from : DisposableLike.t list -> t) =
          fun (x668 : DisposableLike.t list) ->
            t_of_js
              (let x671 =
                 Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                      "vscode") "Disposable" in
               Ojs.call (Ojs.get_prop_ascii x671 "from") "apply"
                 [|x671;((let x669 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x670 : DisposableLike.t) ->
                               ignore
                                 (Ojs.call x669 "push"
                                    [|(DisposableLike.t_to_js x670)|])) x668;
                          x669))|])
        let (create : untyped_function -> t) =
          fun (x672 : untyped_function) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Disposable")
                 [|(untyped_function_to_js x672)|])
        let (dispose : t -> any) =
          fun (x673 : t) ->
            any_of_js (Ojs.call (t_to_js x673) "dispose" [||])
      end
    module Event =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x675 : Ojs.t) -> x675
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x674 : Ojs.t) -> x674
        let (apply :
          'T t ->
            ('T -> any) ->
              ?this_args:any ->
                ?disposables:Disposable.t list -> unit -> Disposable.t)
          =
          fun (x684 : 'T t) ->
            fun (x676 : 'T -> any) ->
              fun ?this_args:(x677 : any option) ->
                fun ?disposables:(x678 : Disposable.t list option) ->
                  fun () ->
                    Disposable.t_of_js
                      (Ojs.call (t_to_js Obj.magic x684) "apply"
                         [|Ojs.null;((let x679 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x679 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x683 : Ojs.t) ->
                                                   any_to_js
                                                     (x676 (Obj.magic x683))))|]);
                                      (match x677 with
                                       | Some x682 ->
                                           ignore
                                             (Ojs.call x679 "push"
                                                [|(any_to_js x682)|])
                                       | None -> ());
                                      (match x678 with
                                       | Some x680 ->
                                           ignore
                                             (Ojs.call x679 "push"
                                                [|(Ojs.list_to_js
                                                     Disposable.t_to_js x680)|])
                                       | None -> ());
                                      x679))|])
      end
    module CancellationToken =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x687 : Ojs.t) -> x687
        and t_to_js : t -> Ojs.t = fun (x686 : Ojs.t) -> x686
        let (is_cancellation_requested : t -> bool) =
          fun (x688 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x688) "isCancellationRequested")
        let (set_is_cancellation_requested : t -> bool -> unit) =
          fun (x689 : t) ->
            fun (x690 : bool) ->
              Ojs.set_prop_ascii (t_to_js x689) "isCancellationRequested"
                (Ojs.bool_to_js x690)
        let (on_cancellation_requested : t -> any Event.t) =
          fun (x691 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x691) "onCancellationRequested")
        let (set_on_cancellation_requested : t -> any Event.t -> unit) =
          fun (x693 : t) ->
            fun (x694 : any Event.t) ->
              Ojs.set_prop_ascii (t_to_js x693) "onCancellationRequested"
                (Event.t_to_js any_to_js x694)
      end
    module CancellationTokenSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x697 : Ojs.t) -> x697
        and t_to_js : t -> Ojs.t = fun (x696 : Ojs.t) -> x696
        let (token : t -> CancellationToken.t) =
          fun (x698 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x698) "token")
        let (set_token : t -> CancellationToken.t -> unit) =
          fun (x699 : t) ->
            fun (x700 : CancellationToken.t) ->
              Ojs.set_prop_ascii (t_to_js x699) "token"
                (CancellationToken.t_to_js x700)
        let (cancel : t -> unit) =
          fun (x701 : t) -> ignore (Ojs.call (t_to_js x701) "cancel" [||])
        let (dispose : t -> unit) =
          fun (x702 : t) -> ignore (Ojs.call (t_to_js x702) "dispose" [||])
      end
    module CancellationError =
      struct
        include struct include Error end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CancellationError") [||])
      end
    module EventEmitter =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x704 : Ojs.t) -> x704
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x703 : Ojs.t) -> x703
        let (event : 'T t -> 'T Event.t) =
          fun (x705 : 'T t) ->
            Event.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x705) "event")
        let (set_event : 'T t -> 'T Event.t -> unit) =
          fun (x708 : 'T t) ->
            fun (x709 : 'T Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x708) "event"
                (Event.t_to_js Obj.magic x709)
        let (fire : 'T t -> 'T -> unit) =
          fun (x713 : 'T t) ->
            fun (x712 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x713) "fire"
                   [|(Obj.magic x712)|])
        let (dispose : 'T t -> unit) =
          fun (x715 : 'T t) ->
            ignore (Ojs.call (t_to_js Obj.magic x715) "dispose" [||])
        let (create : unit -> 'T t) =
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "EventEmitter")
                 [||])
      end
    module FileSystemWatcher =
      struct
        include struct include Disposable end
        let (ignore_create_events : t -> bool) =
          fun (x718 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x718) "ignoreCreateEvents")
        let (set_ignore_create_events : t -> bool -> unit) =
          fun (x719 : t) ->
            fun (x720 : bool) ->
              Ojs.set_prop_ascii (t_to_js x719) "ignoreCreateEvents"
                (Ojs.bool_to_js x720)
        let (ignore_change_events : t -> bool) =
          fun (x721 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x721) "ignoreChangeEvents")
        let (set_ignore_change_events : t -> bool -> unit) =
          fun (x722 : t) ->
            fun (x723 : bool) ->
              Ojs.set_prop_ascii (t_to_js x722) "ignoreChangeEvents"
                (Ojs.bool_to_js x723)
        let (ignore_delete_events : t -> bool) =
          fun (x724 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x724) "ignoreDeleteEvents")
        let (set_ignore_delete_events : t -> bool -> unit) =
          fun (x725 : t) ->
            fun (x726 : bool) ->
              Ojs.set_prop_ascii (t_to_js x725) "ignoreDeleteEvents"
                (Ojs.bool_to_js x726)
        let (on_did_create : t -> Uri.t Event.t) =
          fun (x727 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x727) "onDidCreate")
        let (set_on_did_create : t -> Uri.t Event.t -> unit) =
          fun (x729 : t) ->
            fun (x730 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x729) "onDidCreate"
                (Event.t_to_js Uri.t_to_js x730)
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x732 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x732) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x734 : t) ->
            fun (x735 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x734) "onDidChange"
                (Event.t_to_js Uri.t_to_js x735)
        let (on_did_delete : t -> Uri.t Event.t) =
          fun (x737 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x737) "onDidDelete")
        let (set_on_did_delete : t -> Uri.t Event.t -> unit) =
          fun (x739 : t) ->
            fun (x740 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x739) "onDidDelete"
                (Event.t_to_js Uri.t_to_js x740)
      end
    module ProviderResult =
      struct
        type 'T t =
          [ `Value of 'T or_null_or_undefined 
          | `Promise of 'T or_null_or_undefined Promise.t ]
        let rec t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun
              (x742 :
                [ `Value of __T or_null_or_undefined 
                | `Promise of __T or_null_or_undefined Promise.t ])
              ->
              match x742 with
              | `Value x743 -> or_null_or_undefined_to_js __T_to_js x743
              | `Promise x745 ->
                  Promise.t_to_js
                    (fun (x746 : __T or_null_or_undefined) ->
                       or_null_or_undefined_to_js __T_to_js x746) x745
        let t_to_js ml_to_js =
          function
          | `Value v -> or_undefined_to_js ml_to_js v
          | `Promise p -> Promise.t_to_js (or_undefined_to_js ml_to_js) p
        let t_of_js ml_of_js js_val =
          if Ojs.has_property js_val "then"
          then
            `Promise (Promise.t_of_js (or_undefined_of_js ml_of_js) js_val)
          else `Value (or_undefined_of_js ml_of_js js_val)
      end
    module TextDocumentContentProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x754 : Ojs.t) -> x754
        and t_to_js : t -> Ojs.t = fun (x753 : Ojs.t) -> x753
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x755 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x755) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x757 : t) ->
            fun (x758 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x757) "onDidChange"
                (Event.t_to_js Uri.t_to_js x758)
        let (provide_text_document_content :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> string ProviderResult.t)
          =
          fun (x762 : t) ->
            fun ~uri:(x760 : Uri.t) ->
              fun ~token:(x761 : CancellationToken.t) ->
                ProviderResult.t_of_js Ojs.string_of_js
                  (Ojs.call (t_to_js x762) "provideTextDocumentContent"
                     [|(Uri.t_to_js x760);(CancellationToken.t_to_js x761)|])
      end
    module QuickPickItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x765 : Ojs.t) -> x765
        and t_to_js : t -> Ojs.t = fun (x764 : Ojs.t) -> x764
        let (label : t -> string) =
          fun (x766 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x766) "label")
        let (set_label : t -> string -> unit) =
          fun (x767 : t) ->
            fun (x768 : string) ->
              Ojs.set_prop_ascii (t_to_js x767) "label"
                (Ojs.string_to_js x768)
        let (description : t -> string) =
          fun (x769 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x769) "description")
        let (set_description : t -> string -> unit) =
          fun (x770 : t) ->
            fun (x771 : string) ->
              Ojs.set_prop_ascii (t_to_js x770) "description"
                (Ojs.string_to_js x771)
        let (detail : t -> string) =
          fun (x772 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x772) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x773 : t) ->
            fun (x774 : string) ->
              Ojs.set_prop_ascii (t_to_js x773) "detail"
                (Ojs.string_to_js x774)
        let (picked : t -> bool) =
          fun (x775 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x775) "picked")
        let (set_picked : t -> bool -> unit) =
          fun (x776 : t) ->
            fun (x777 : bool) ->
              Ojs.set_prop_ascii (t_to_js x776) "picked"
                (Ojs.bool_to_js x777)
        let (always_show : t -> bool) =
          fun (x778 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x778) "alwaysShow")
        let (set_always_show : t -> bool -> unit) =
          fun (x779 : t) ->
            fun (x780 : bool) ->
              Ojs.set_prop_ascii (t_to_js x779) "alwaysShow"
                (Ojs.bool_to_js x780)
      end
    module QuickPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x782 : Ojs.t) -> x782
        and t_to_js : t -> Ojs.t = fun (x781 : Ojs.t) -> x781
        let (match_on_description : t -> bool) =
          fun (x783 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x783) "matchOnDescription")
        let (set_match_on_description : t -> bool -> unit) =
          fun (x784 : t) ->
            fun (x785 : bool) ->
              Ojs.set_prop_ascii (t_to_js x784) "matchOnDescription"
                (Ojs.bool_to_js x785)
        let (match_on_detail : t -> bool) =
          fun (x786 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x786) "matchOnDetail")
        let (set_match_on_detail : t -> bool -> unit) =
          fun (x787 : t) ->
            fun (x788 : bool) ->
              Ojs.set_prop_ascii (t_to_js x787) "matchOnDetail"
                (Ojs.bool_to_js x788)
        let (place_holder : t -> string) =
          fun (x789 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x789) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x790 : t) ->
            fun (x791 : string) ->
              Ojs.set_prop_ascii (t_to_js x790) "placeHolder"
                (Ojs.string_to_js x791)
        let (ignore_focus_out : t -> bool) =
          fun (x792 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x792) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x793 : t) ->
            fun (x794 : bool) ->
              Ojs.set_prop_ascii (t_to_js x793) "ignoreFocusOut"
                (Ojs.bool_to_js x794)
        let (can_pick_many : t -> bool) =
          fun (x795 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x795) "canPickMany")
        let (set_can_pick_many : t -> bool -> unit) =
          fun (x796 : t) ->
            fun (x797 : bool) ->
              Ojs.set_prop_ascii (t_to_js x796) "canPickMany"
                (Ojs.bool_to_js x797)
        let (on_did_select_item : t -> item:QuickPickItem.t or_string -> any)
          =
          fun (x800 : t) ->
            fun ~item:(x798 : QuickPickItem.t or_string) ->
              any_of_js
                (Ojs.call (t_to_js x800) "onDidSelectItem"
                   [|(or_string_to_js QuickPickItem.t_to_js x798)|])
      end
    module WorkspaceFolderPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x802 : Ojs.t) -> x802
        and t_to_js : t -> Ojs.t = fun (x801 : Ojs.t) -> x801
        let (place_holder : t -> string) =
          fun (x803 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x803) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x804 : t) ->
            fun (x805 : string) ->
              Ojs.set_prop_ascii (t_to_js x804) "placeHolder"
                (Ojs.string_to_js x805)
        let (ignore_focus_out : t -> bool) =
          fun (x806 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x806) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x807 : t) ->
            fun (x808 : bool) ->
              Ojs.set_prop_ascii (t_to_js x807) "ignoreFocusOut"
                (Ojs.bool_to_js x808)
      end
    module OpenDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x810 : Ojs.t) -> x810
        and t_to_js : t -> Ojs.t = fun (x809 : Ojs.t) -> x809
        let (default_uri : t -> Uri.t) =
          fun (x811 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x811) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x812 : t) ->
            fun (x813 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x812) "defaultUri"
                (Uri.t_to_js x813)
        let (open_label : t -> string) =
          fun (x814 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x814) "openLabel")
        let (set_open_label : t -> string -> unit) =
          fun (x815 : t) ->
            fun (x816 : string) ->
              Ojs.set_prop_ascii (t_to_js x815) "openLabel"
                (Ojs.string_to_js x816)
        let (can_select_files : t -> bool) =
          fun (x817 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x817) "canSelectFiles")
        let (set_can_select_files : t -> bool -> unit) =
          fun (x818 : t) ->
            fun (x819 : bool) ->
              Ojs.set_prop_ascii (t_to_js x818) "canSelectFiles"
                (Ojs.bool_to_js x819)
        let (can_select_folders : t -> bool) =
          fun (x820 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x820) "canSelectFolders")
        let (set_can_select_folders : t -> bool -> unit) =
          fun (x821 : t) ->
            fun (x822 : bool) ->
              Ojs.set_prop_ascii (t_to_js x821) "canSelectFolders"
                (Ojs.bool_to_js x822)
        let (can_select_many : t -> bool) =
          fun (x823 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x823) "canSelectMany")
        let (set_can_select_many : t -> bool -> unit) =
          fun (x824 : t) ->
            fun (x825 : bool) ->
              Ojs.set_prop_ascii (t_to_js x824) "canSelectMany"
                (Ojs.bool_to_js x825)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x827 : Ojs.t) -> x827
            and t_to_js : t -> Ojs.t = fun (x826 : Ojs.t) -> x826
            let (get : t -> string -> string list) =
              fun (x828 : t) ->
                fun (x829 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x828) (Ojs.string_to_js x829))
            let (set : t -> string -> string list -> unit) =
              fun (x831 : t) ->
                fun (x832 : string) ->
                  fun (x833 : string list) ->
                    Ojs.set_prop (t_to_js x831) (Ojs.string_to_js x832)
                      (Ojs.list_to_js Ojs.string_to_js x833)
          end
        let (filters : t -> Filters.t) =
          fun (x835 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x835) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x836 : t) ->
            fun (x837 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x836) "filters"
                (Filters.t_to_js x837)
        let (title : t -> string) =
          fun (x838 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x838) "title")
        let (set_title : t -> string -> unit) =
          fun (x839 : t) ->
            fun (x840 : string) ->
              Ojs.set_prop_ascii (t_to_js x839) "title"
                (Ojs.string_to_js x840)
      end
    module SaveDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x842 : Ojs.t) -> x842
        and t_to_js : t -> Ojs.t = fun (x841 : Ojs.t) -> x841
        let (default_uri : t -> Uri.t) =
          fun (x843 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x843) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x844 : t) ->
            fun (x845 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x844) "defaultUri"
                (Uri.t_to_js x845)
        let (save_label : t -> string) =
          fun (x846 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x846) "saveLabel")
        let (set_save_label : t -> string -> unit) =
          fun (x847 : t) ->
            fun (x848 : string) ->
              Ojs.set_prop_ascii (t_to_js x847) "saveLabel"
                (Ojs.string_to_js x848)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x850 : Ojs.t) -> x850
            and t_to_js : t -> Ojs.t = fun (x849 : Ojs.t) -> x849
            let (get : t -> string -> string list) =
              fun (x851 : t) ->
                fun (x852 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x851) (Ojs.string_to_js x852))
            let (set : t -> string -> string list -> unit) =
              fun (x854 : t) ->
                fun (x855 : string) ->
                  fun (x856 : string list) ->
                    Ojs.set_prop (t_to_js x854) (Ojs.string_to_js x855)
                      (Ojs.list_to_js Ojs.string_to_js x856)
          end
        let (filters : t -> Filters.t) =
          fun (x858 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x858) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x859 : t) ->
            fun (x860 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x859) "filters"
                (Filters.t_to_js x860)
        let (title : t -> string) =
          fun (x861 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x861) "title")
        let (set_title : t -> string -> unit) =
          fun (x862 : t) ->
            fun (x863 : string) ->
              Ojs.set_prop_ascii (t_to_js x862) "title"
                (Ojs.string_to_js x863)
      end
    module MessageItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x865 : Ojs.t) -> x865
        and t_to_js : t -> Ojs.t = fun (x864 : Ojs.t) -> x864
        let (title : t -> string) =
          fun (x866 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x866) "title")
        let (set_title : t -> string -> unit) =
          fun (x867 : t) ->
            fun (x868 : string) ->
              Ojs.set_prop_ascii (t_to_js x867) "title"
                (Ojs.string_to_js x868)
        let (is_close_affordance : t -> bool) =
          fun (x869 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x869) "isCloseAffordance")
        let (set_is_close_affordance : t -> bool -> unit) =
          fun (x870 : t) ->
            fun (x871 : bool) ->
              Ojs.set_prop_ascii (t_to_js x870) "isCloseAffordance"
                (Ojs.bool_to_js x871)
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x873 : Ojs.t) -> x873
        and t_to_js : t -> Ojs.t = fun (x872 : Ojs.t) -> x872
        let (modal : t -> bool) =
          fun (x874 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x874) "modal")
        let (set_modal : t -> bool -> unit) =
          fun (x875 : t) ->
            fun (x876 : bool) ->
              Ojs.set_prop_ascii (t_to_js x875) "modal" (Ojs.bool_to_js x876)
      end
    module InputBoxOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x878 : Ojs.t) -> x878
        and t_to_js : t -> Ojs.t = fun (x877 : Ojs.t) -> x877
        let (value : t -> string) =
          fun (x879 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x879) "value")
        let (set_value : t -> string -> unit) =
          fun (x880 : t) ->
            fun (x881 : string) ->
              Ojs.set_prop_ascii (t_to_js x880) "value"
                (Ojs.string_to_js x881)
        let (value_selection : t -> (int * int)) =
          fun (x882 : t) ->
            let x883 = Ojs.get_prop_ascii (t_to_js x882) "valueSelection" in
            ((Ojs.int_of_js (Ojs.array_get x883 0)),
              (Ojs.int_of_js (Ojs.array_get x883 1)))
        let (set_value_selection : t -> (int * int) -> unit) =
          fun (x884 : t) ->
            fun (x885 : (int * int)) ->
              Ojs.set_prop_ascii (t_to_js x884) "valueSelection"
                (let (x886, x887) = x885 in
                 let x888 = Ojs.array_make 2 in
                 Ojs.array_set x888 0 (Ojs.int_to_js x886);
                 Ojs.array_set x888 1 (Ojs.int_to_js x887);
                 x888)
        let (prompt : t -> string) =
          fun (x889 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x889) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x890 : t) ->
            fun (x891 : string) ->
              Ojs.set_prop_ascii (t_to_js x890) "prompt"
                (Ojs.string_to_js x891)
        let (place_holder : t -> string) =
          fun (x892 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x892) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x893 : t) ->
            fun (x894 : string) ->
              Ojs.set_prop_ascii (t_to_js x893) "placeHolder"
                (Ojs.string_to_js x894)
        let (password : t -> bool) =
          fun (x895 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x895) "password")
        let (set_password : t -> bool -> unit) =
          fun (x896 : t) ->
            fun (x897 : bool) ->
              Ojs.set_prop_ascii (t_to_js x896) "password"
                (Ojs.bool_to_js x897)
        let (ignore_focus_out : t -> bool) =
          fun (x898 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x898) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x899 : t) ->
            fun (x900 : bool) ->
              Ojs.set_prop_ascii (t_to_js x899) "ignoreFocusOut"
                (Ojs.bool_to_js x900)
        let (validate_input :
          t ->
            value:string ->
              string or_null_or_undefined Promise.t or_string
                or_null_or_undefined)
          =
          fun (x902 : t) ->
            fun ~value:(x901 : string) ->
              or_null_or_undefined_of_js
                (fun (x903 : Ojs.t) ->
                   or_string_of_js
                     (fun (x904 : Ojs.t) ->
                        Promise.t_of_js
                          (fun (x905 : Ojs.t) ->
                             or_null_or_undefined_of_js Ojs.string_of_js x905)
                          x904) x903)
                (Ojs.call (t_to_js x902) "validateInput"
                   [|(Ojs.string_to_js x901)|])
      end
    module WorkspaceFolder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x908 : Ojs.t) -> x908
        and t_to_js : t -> Ojs.t = fun (x907 : Ojs.t) -> x907
        let (uri : t -> Uri.t) =
          fun (x909 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x909) "uri")
        let (name : t -> string) =
          fun (x910 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x910) "name")
        let (index : t -> int) =
          fun (x911 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x911) "index")
        let (create : uri:Uri.t -> name:string -> index:int -> t) =
          fun ~uri:(x912 : Uri.t) ->
            fun ~name:(x913 : string) ->
              fun ~index:(x914 : int) ->
                let x915 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x915 "uri" (Uri.t_to_js x912);
                Ojs.set_prop_ascii x915 "name" (Ojs.string_to_js x913);
                Ojs.set_prop_ascii x915 "index" (Ojs.int_to_js x914);
                t_of_js x915
      end
    module RelativePattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x917 : Ojs.t) -> x917
        and t_to_js : t -> Ojs.t = fun (x916 : Ojs.t) -> x916
        let (base : t -> string) =
          fun (x918 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x918) "base")
        let (set_base : t -> string -> unit) =
          fun (x919 : t) ->
            fun (x920 : string) ->
              Ojs.set_prop_ascii (t_to_js x919) "base"
                (Ojs.string_to_js x920)
        let (pattern : t -> string) =
          fun (x921 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x921) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x922 : t) ->
            fun (x923 : string) ->
              Ojs.set_prop_ascii (t_to_js x922) "pattern"
                (Ojs.string_to_js x923)
        let (create :
          base:(Uri.t, WorkspaceFolder.t) union2 or_string ->
            pattern:string -> t)
          =
          fun ~base:(x924 : (Uri.t, WorkspaceFolder.t) union2 or_string) ->
            fun ~pattern:(x928 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "RelativePattern")
                   [|(or_string_to_js
                        (fun (x925 : (Uri.t, WorkspaceFolder.t) union2) ->
                           union2_to_js Uri.t_to_js WorkspaceFolder.t_to_js
                             x925) x924);(Ojs.string_to_js x928)|])
      end
    module GlobPattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x930 : Ojs.t) -> x930
        and t_to_js : t -> Ojs.t = fun (x929 : Ojs.t) -> x929
      end
    module DocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x932 : Ojs.t) -> x932
        and t_to_js : t -> Ojs.t = fun (x931 : Ojs.t) -> x931
        let (language : t -> string) =
          fun (x933 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x933) "language")
        let (scheme : t -> string) =
          fun (x934 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x934) "scheme")
        let (pattern : t -> GlobPattern.t) =
          fun (x935 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x935) "pattern")
      end
    module DocumentSelector =
      struct
        type t =
          (DocumentFilter.t, DocumentFilter.t or_string list) union2
            or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x942 : Ojs.t) ->
            or_string_of_js
              (fun (x943 : Ojs.t) ->
                 union2_of_js DocumentFilter.t_of_js
                   (fun (x945 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x946 : Ojs.t) ->
                           or_string_of_js DocumentFilter.t_of_js x946) x945)
                   x943) x942
        and t_to_js : t -> Ojs.t =
          fun
            (x936 :
              (DocumentFilter.t, DocumentFilter.t or_string list) union2
                or_string)
            ->
            or_string_to_js
              (fun
                 (x937 :
                   (DocumentFilter.t, DocumentFilter.t or_string list) union2)
                 ->
                 union2_to_js DocumentFilter.t_to_js
                   (fun (x939 : DocumentFilter.t or_string list) ->
                      Ojs.list_to_js
                        (fun (x940 : DocumentFilter.t or_string) ->
                           or_string_to_js DocumentFilter.t_to_js x940) x939)
                   x937) x936
      end
    module Location =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x949 : Ojs.t) -> x949
        and t_to_js : t -> Ojs.t = fun (x948 : Ojs.t) -> x948
        let (uri : t -> Uri.t) =
          fun (x950 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x950) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x951 : t) ->
            fun (x952 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x951) "uri" (Uri.t_to_js x952)
        let (range : t -> Range.t) =
          fun (x953 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x953) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x954 : t) ->
            fun (x955 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x954) "range" (Range.t_to_js x955)
        let (create :
          uri:Uri.t -> range_or_position:(Position.t, Range.t) union2 -> t) =
          fun ~uri:(x956 : Uri.t) ->
            fun ~range_or_position:(x957 : (Position.t, Range.t) union2) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Location")
                   [|(Uri.t_to_js x956);(union2_to_js Position.t_to_js
                                           Range.t_to_js x957)|])
      end
    module DiagnosticChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x961 : Ojs.t) -> x961
        and t_to_js : t -> Ojs.t = fun (x960 : Ojs.t) -> x960
        let (uris : t -> Uri.t list) =
          fun (x962 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x962) "uris")
      end
    module DiagnosticSeverity =
      struct
        type t = [ `Warning  | `Information  | `Hint ]
        let rec t_of_js : Ojs.t -> t =
          fun (x965 : Ojs.t) ->
            let x966 = x965 in
            match Ojs.int_of_js x966 with
            | 1 -> `Warning
            | 2 -> `Information
            | 3 -> `Hint
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x964 : [ `Warning  | `Information  | `Hint ]) ->
            match x964 with
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
            | `Hint -> Ojs.int_to_js 3
      end
    module DiagnosticRelatedInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x968 : Ojs.t) -> x968
        and t_to_js : t -> Ojs.t = fun (x967 : Ojs.t) -> x967
        let (location : t -> Location.t) =
          fun (x969 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x969) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x970 : t) ->
            fun (x971 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x970) "location"
                (Location.t_to_js x971)
        let (message : t -> string) =
          fun (x972 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x972) "message")
        let (set_message : t -> string -> unit) =
          fun (x973 : t) ->
            fun (x974 : string) ->
              Ojs.set_prop_ascii (t_to_js x973) "message"
                (Ojs.string_to_js x974)
        let (create : location:Location.t -> message:string -> t) =
          fun ~location:(x975 : Location.t) ->
            fun ~message:(x976 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "DiagnosticRelatedInformation")
                   [|(Location.t_to_js x975);(Ojs.string_to_js x976)|])
      end
    module DiagnosticTag =
      struct
        type t = [ `Deprecated ]
        let rec t_of_js : Ojs.t -> t =
          fun (x978 : Ojs.t) ->
            let x979 = x978 in
            match Ojs.int_of_js x979 with
            | 2 -> `Deprecated
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x977 : [ `Deprecated ]) ->
            match x977 with | `Deprecated -> Ojs.int_to_js 2
      end
    module Diagnostic =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x981 : Ojs.t) -> x981
        and t_to_js : t -> Ojs.t = fun (x980 : Ojs.t) -> x980
        let (range : t -> Range.t) =
          fun (x982 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x982) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x983 : t) ->
            fun (x984 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x983) "range" (Range.t_to_js x984)
        let (message : t -> string) =
          fun (x985 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x985) "message")
        let (set_message : t -> string -> unit) =
          fun (x986 : t) ->
            fun (x987 : string) ->
              Ojs.set_prop_ascii (t_to_js x986) "message"
                (Ojs.string_to_js x987)
        let (severity : t -> DiagnosticSeverity.t) =
          fun (x988 : t) ->
            DiagnosticSeverity.t_of_js
              (Ojs.get_prop_ascii (t_to_js x988) "severity")
        let (set_severity : t -> DiagnosticSeverity.t -> unit) =
          fun (x989 : t) ->
            fun (x990 : DiagnosticSeverity.t) ->
              Ojs.set_prop_ascii (t_to_js x989) "severity"
                (DiagnosticSeverity.t_to_js x990)
        let (source : t -> string) =
          fun (x991 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x991) "source")
        let (set_source : t -> string -> unit) =
          fun (x992 : t) ->
            fun (x993 : string) ->
              Ojs.set_prop_ascii (t_to_js x992) "source"
                (Ojs.string_to_js x993)
        module Code =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x995 : Ojs.t) -> x995
            and t_to_js : t -> Ojs.t = fun (x994 : Ojs.t) -> x994
            let (value : t -> string or_number) =
              fun (x996 : t) ->
                or_number_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x996) "value")
            let (set_value : t -> string or_number -> unit) =
              fun (x998 : t) ->
                fun (x999 : string or_number) ->
                  Ojs.set_prop_ascii (t_to_js x998) "value"
                    (or_number_to_js Ojs.string_to_js x999)
            let (target : t -> Uri.t) =
              fun (x1001 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1001) "target")
            let (set_target : t -> Uri.t -> unit) =
              fun (x1002 : t) ->
                fun (x1003 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x1002) "target"
                    (Uri.t_to_js x1003)
          end
        let (code : t -> Code.t or_string or_number) =
          fun (x1004 : t) ->
            or_number_of_js
              (fun (x1005 : Ojs.t) -> or_string_of_js Code.t_of_js x1005)
              (Ojs.get_prop_ascii (t_to_js x1004) "code")
        let (set_code : t -> Code.t or_string or_number -> unit) =
          fun (x1007 : t) ->
            fun (x1008 : Code.t or_string or_number) ->
              Ojs.set_prop_ascii (t_to_js x1007) "code"
                (or_number_to_js
                   (fun (x1009 : Code.t or_string) ->
                      or_string_to_js Code.t_to_js x1009) x1008)
        let (related_information : t -> DiagnosticRelatedInformation.t list)
          =
          fun (x1011 : t) ->
            Ojs.list_of_js DiagnosticRelatedInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1011) "relatedInformation")
        let (set_related_information :
          t -> DiagnosticRelatedInformation.t list -> unit) =
          fun (x1013 : t) ->
            fun (x1014 : DiagnosticRelatedInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1013) "relatedInformation"
                (Ojs.list_to_js DiagnosticRelatedInformation.t_to_js x1014)
        let (tags : t -> DiagnosticTag.t list) =
          fun (x1016 : t) ->
            Ojs.list_of_js DiagnosticTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1016) "tags")
        let (set_tags : t -> DiagnosticTag.t list -> unit) =
          fun (x1018 : t) ->
            fun (x1019 : DiagnosticTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1018) "tags"
                (Ojs.list_to_js DiagnosticTag.t_to_js x1019)
        let (create :
          range:Range.t ->
            message:string -> ?severity:DiagnosticSeverity.t -> unit -> t)
          =
          fun ~range:(x1021 : Range.t) ->
            fun ~message:(x1022 : string) ->
              fun ?severity:(x1023 : DiagnosticSeverity.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Diagnostic")
                       (let x1024 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1024 "push" [|(Range.t_to_js x1021)|]);
                        ignore
                          (Ojs.call x1024 "push" [|(Ojs.string_to_js x1022)|]);
                        (match x1023 with
                         | Some x1025 ->
                             ignore
                               (Ojs.call x1024 "push"
                                  [|(DiagnosticSeverity.t_to_js x1025)|])
                         | None -> ());
                        x1024))
      end
    module DiagnosticCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1027 : Ojs.t) -> x1027
        and t_to_js : t -> Ojs.t = fun (x1026 : Ojs.t) -> x1026
        let (name : t -> string) =
          fun (x1028 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1028) "name")
        let (set :
          t ->
            uri:Uri.t -> diagnostics:Diagnostic.t list or_undefined -> unit)
          =
          fun (x1033 : t) ->
            fun ~uri:(x1029 : Uri.t) ->
              fun ~diagnostics:(x1030 : Diagnostic.t list or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x1033) "set"
                     [|(Uri.t_to_js x1029);(or_undefined_to_js
                                              (fun
                                                 (x1031 : Diagnostic.t list)
                                                 ->
                                                 Ojs.list_to_js
                                                   Diagnostic.t_to_js x1031)
                                              x1030)|])
        let (set' :
          t -> entries:(Uri.t * Diagnostic.t list or_undefined) list -> unit)
          =
          fun (x1041 : t) ->
            fun
              ~entries:(x1034 :
                         (Uri.t * Diagnostic.t list or_undefined) list)
              ->
              ignore
                (Ojs.call (t_to_js x1041) "set"
                   [|(Ojs.list_to_js
                        (fun
                           (x1035 : (Uri.t * Diagnostic.t list or_undefined))
                           ->
                           let (x1036, x1037) = x1035 in
                           let x1038 = Ojs.array_make 2 in
                           Ojs.array_set x1038 0 (Uri.t_to_js x1036);
                           Ojs.array_set x1038 1
                             (or_undefined_to_js
                                (fun (x1039 : Diagnostic.t list) ->
                                   Ojs.list_to_js Diagnostic.t_to_js x1039)
                                x1037);
                           x1038) x1034)|])
        let (delete : t -> uri:Uri.t -> unit) =
          fun (x1043 : t) ->
            fun ~uri:(x1042 : Uri.t) ->
              ignore
                (Ojs.call (t_to_js x1043) "delete" [|(Uri.t_to_js x1042)|])
        let (clear : t -> unit) =
          fun (x1044 : t) -> ignore (Ojs.call (t_to_js x1044) "clear" [||])
        let (for_each :
          t ->
            callback:(uri:Uri.t ->
                        diagnostics:Diagnostic.t list -> collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x1053 : t) ->
            fun
              ~callback:(x1045 :
                          uri:Uri.t ->
                            diagnostics:Diagnostic.t list ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x1046 : any option) ->
                fun () ->
                  ignore
                    (let x1054 = t_to_js x1053 in
                     Ojs.call (Ojs.get_prop_ascii x1054 "forEach") "apply"
                       [|x1054;((let x1047 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1047 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x1049 : Ojs.t) ->
                                              fun (x1050 : Ojs.t) ->
                                                fun (x1052 : Ojs.t) ->
                                                  any_to_js
                                                    (x1045
                                                       ~uri:(Uri.t_of_js
                                                               x1049)
                                                       ~diagnostics:(
                                                       Ojs.list_of_js
                                                         Diagnostic.t_of_js
                                                         x1050)
                                                       ~collection:(t_of_js
                                                                    x1052))))|]);
                                 (match x1046 with
                                  | Some x1048 ->
                                      ignore
                                        (Ojs.call x1047 "push"
                                           [|(any_to_js x1048)|])
                                  | None -> ());
                                 x1047))|])
        let (get : t -> uri:Uri.t -> Diagnostic.t list or_undefined) =
          fun (x1056 : t) ->
            fun ~uri:(x1055 : Uri.t) ->
              or_undefined_of_js
                (fun (x1057 : Ojs.t) ->
                   Ojs.list_of_js Diagnostic.t_of_js x1057)
                (Ojs.call (t_to_js x1056) "get" [|(Uri.t_to_js x1055)|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x1060 : t) ->
            fun ~uri:(x1059 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1060) "has" [|(Uri.t_to_js x1059)|])
        let (dispose : t -> unit) =
          fun (x1061 : t) -> ignore (Ojs.call (t_to_js x1061) "dispose" [||])
      end
    module CodeActionKind =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1063 : Ojs.t) -> x1063
        and t_to_js : t -> Ojs.t = fun (x1062 : Ojs.t) -> x1062
        let (empty : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Empty")
        let (quick_fix : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "QuickFix")
        let (refactor : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Refactor")
        let (refactor_extract : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorExtract")
        let (refactor_inline : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorInline")
        let (refactor_rewrite : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorRewrite")
        let (source : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Source")
        let (source_organize_imports : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceOrganizeImports")
        let (source_fix_all : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceFixAll")
        let (create : value:string -> t) =
          fun ~value:(x1064 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") [|(Ojs.string_to_js x1064)|])
        let (value : t -> string) =
          fun (x1065 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1065) "value")
        let (append : t -> parts:string -> t) =
          fun (x1067 : t) ->
            fun ~parts:(x1066 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1067) "append"
                   [|(Ojs.string_to_js x1066)|])
        let (intersects : t -> other:t -> bool) =
          fun (x1069 : t) ->
            fun ~other:(x1068 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1069) "intersects" [|(t_to_js x1068)|])
        let (contains : t -> other:t -> bool) =
          fun (x1071 : t) ->
            fun ~other:(x1070 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1071) "contains" [|(t_to_js x1070)|])
      end
    module CodeActionTriggerKind =
      struct
        type t = [ `Automatic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1073 : Ojs.t) ->
            let x1074 = x1073 in
            match Ojs.int_of_js x1074 with
            | 2 -> `Automatic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1072 : [ `Automatic ]) ->
            match x1072 with | `Automatic -> Ojs.int_to_js 2
      end
    module CodeActionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1076 : Ojs.t) -> x1076
        and t_to_js : t -> Ojs.t = fun (x1075 : Ojs.t) -> x1075
        let (trigger_kind : t -> CodeActionTriggerKind.t) =
          fun (x1077 : t) ->
            CodeActionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1077) "triggerKind")
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1078 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1078) "diagnostics")
        let (only : t -> CodeActionKind.t) =
          fun (x1080 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1080) "only")
      end
    module CodeLens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1082 : Ojs.t) -> x1082
        and t_to_js : t -> Ojs.t = fun (x1081 : Ojs.t) -> x1081
        let (range : t -> Range.t) =
          fun (x1083 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1083) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1084 : t) ->
            fun (x1085 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1084) "range"
                (Range.t_to_js x1085)
        let (command : t -> Command.t) =
          fun (x1086 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1086) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1087 : t) ->
            fun (x1088 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1087) "command"
                (Command.t_to_js x1088)
        let (is_resolved : t -> bool) =
          fun (x1089 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1089) "isResolved")
        let (create : range:Range.t -> ?command:Command.t -> unit -> t) =
          fun ~range:(x1090 : Range.t) ->
            fun ?command:(x1091 : Command.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "CodeLens")
                     (let x1092 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1092 "push" [|(Range.t_to_js x1090)|]);
                      (match x1091 with
                       | Some x1093 ->
                           ignore
                             (Ojs.call x1092 "push"
                                [|(Command.t_to_js x1093)|])
                       | None -> ());
                      x1092))
      end
    module CodeLensProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1095 : Ojs.t) -> x1095
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1094 : Ojs.t) -> x1094
        let (on_did_change_code_lenses : 'T t -> unit Event.t) =
          fun (x1096 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1096)
                 "onDidChangeCodeLenses")
        let (set_on_did_change_code_lenses : 'T t -> unit Event.t -> unit) =
          fun (x1099 : 'T t) ->
            fun (x1100 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1099)
                "onDidChangeCodeLenses" (Event.t_to_js Ojs.unit_to_js x1100)
        let (provide_code_lenses :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1105 : 'T t) ->
            fun ~document:(x1103 : TextDocument.t) ->
              fun ~token:(x1104 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1107 : Ojs.t) -> Ojs.list_of_js Obj.magic x1107)
                  (Ojs.call (t_to_js Obj.magic x1105) "provideCodeLenses"
                     [|(TextDocument.t_to_js x1103);(CancellationToken.t_to_js
                                                       x1104)|])
        let (resolve_code_lens :
          'T t ->
            code_lens:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1111 : 'T t) ->
            fun ~code_lens:(x1109 : 'T) ->
              fun ~token:(x1110 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1111) "resolveCodeLens"
                     [|(Obj.magic x1109);(CancellationToken.t_to_js x1110)|])
      end
    module DefinitionLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1115 : Ojs.t) -> x1115
        and t_to_js : t -> Ojs.t = fun (x1114 : Ojs.t) -> x1114
      end
    module Definition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1117 : Ojs.t) -> x1117
        and t_to_js : t -> Ojs.t = fun (x1116 : Ojs.t) -> x1116
      end
    module DefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1119 : Ojs.t) -> x1119
        and t_to_js : t -> Ojs.t = fun (x1118 : Ojs.t) -> x1118
        let (provide_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1123 : t) ->
            fun ~document:(x1120 : TextDocument.t) ->
              fun ~position:(x1121 : Position.t) ->
                fun ~token:(x1122 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1124 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1124)
                    (Ojs.call (t_to_js x1123) "provideDefinition"
                       [|(TextDocument.t_to_js x1120);(Position.t_to_js x1121);(
                         CancellationToken.t_to_js x1122)|])
      end
    module ImplementationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1128 : Ojs.t) -> x1128
        and t_to_js : t -> Ojs.t = fun (x1127 : Ojs.t) -> x1127
        let (provide_implementation :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1132 : t) ->
            fun ~document:(x1129 : TextDocument.t) ->
              fun ~position:(x1130 : Position.t) ->
                fun ~token:(x1131 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1133 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1133)
                    (Ojs.call (t_to_js x1132) "provideImplementation"
                       [|(TextDocument.t_to_js x1129);(Position.t_to_js x1130);(
                         CancellationToken.t_to_js x1131)|])
      end
    module TypeDefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1137 : Ojs.t) -> x1137
        and t_to_js : t -> Ojs.t = fun (x1136 : Ojs.t) -> x1136
        let (provide_type_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1141 : t) ->
            fun ~document:(x1138 : TextDocument.t) ->
              fun ~position:(x1139 : Position.t) ->
                fun ~token:(x1140 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1142 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1142)
                    (Ojs.call (t_to_js x1141) "provideTypeDefinition"
                       [|(TextDocument.t_to_js x1138);(Position.t_to_js x1139);(
                         CancellationToken.t_to_js x1140)|])
      end
    module Declaration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1146 : Ojs.t) -> x1146
        and t_to_js : t -> Ojs.t = fun (x1145 : Ojs.t) -> x1145
      end
    module DeclarationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1148 : Ojs.t) -> x1148
        and t_to_js : t -> Ojs.t = fun (x1147 : Ojs.t) -> x1147
        let (provide_declaration :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Declaration.t ProviderResult.t)
          =
          fun (x1152 : t) ->
            fun ~document:(x1149 : TextDocument.t) ->
              fun ~position:(x1150 : Position.t) ->
                fun ~token:(x1151 : CancellationToken.t) ->
                  ProviderResult.t_of_js Declaration.t_of_js
                    (Ojs.call (t_to_js x1152) "provideDeclaration"
                       [|(TextDocument.t_to_js x1149);(Position.t_to_js x1150);(
                         CancellationToken.t_to_js x1151)|])
      end
    module MarkdownString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1155 : Ojs.t) -> x1155
        and t_to_js : t -> Ojs.t = fun (x1154 : Ojs.t) -> x1154
        let (value : t -> string) =
          fun (x1156 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1156) "value")
        let (set_value : t -> string -> unit) =
          fun (x1157 : t) ->
            fun (x1158 : string) ->
              Ojs.set_prop_ascii (t_to_js x1157) "value"
                (Ojs.string_to_js x1158)
        let (is_trusted : t -> bool) =
          fun (x1159 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1159) "isTrusted")
        let (set_is_trusted : t -> bool -> unit) =
          fun (x1160 : t) ->
            fun (x1161 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1160) "isTrusted"
                (Ojs.bool_to_js x1161)
        let (support_theme_icons : t -> bool) =
          fun (x1162 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1162) "supportThemeIcons")
        let (create :
          ?value:string -> ?support_theme_icons:bool -> unit -> t) =
          fun ?value:(x1163 : string option) ->
            fun ?support_theme_icons:(x1164 : bool option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "MarkdownString")
                     (let x1165 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1163 with
                       | Some x1167 ->
                           ignore
                             (Ojs.call x1165 "push"
                                [|(Ojs.string_to_js x1167)|])
                       | None -> ());
                      (match x1164 with
                       | Some x1166 ->
                           ignore
                             (Ojs.call x1165 "push"
                                [|(Ojs.bool_to_js x1166)|])
                       | None -> ());
                      x1165))
        let (append_text : t -> value:string -> t) =
          fun (x1169 : t) ->
            fun ~value:(x1168 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1169) "appendText"
                   [|(Ojs.string_to_js x1168)|])
        let (append_markdown : t -> value:string -> t) =
          fun (x1171 : t) ->
            fun ~value:(x1170 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1171) "appendMarkdown"
                   [|(Ojs.string_to_js x1170)|])
        let (append_codeblock :
          t -> value:string -> ?language:string -> unit -> t) =
          fun (x1176 : t) ->
            fun ~value:(x1172 : string) ->
              fun ?language:(x1173 : string option) ->
                fun () ->
                  t_of_js
                    (let x1177 = t_to_js x1176 in
                     Ojs.call (Ojs.get_prop_ascii x1177 "appendCodeblock")
                       "apply"
                       [|x1177;((let x1174 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1174 "push"
                                      [|(Ojs.string_to_js x1172)|]);
                                 (match x1173 with
                                  | Some x1175 ->
                                      ignore
                                        (Ojs.call x1174 "push"
                                           [|(Ojs.string_to_js x1175)|])
                                  | None -> ());
                                 x1174))|])
      end
    module Hover =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1179 : Ojs.t) -> x1179
        and t_to_js : t -> Ojs.t = fun (x1178 : Ojs.t) -> x1178
        let (contents : t -> MarkedString.t list) =
          fun (x1180 : t) ->
            Ojs.list_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1180) "contents")
        let (set_contents : t -> MarkedString.t list -> unit) =
          fun (x1182 : t) ->
            fun (x1183 : MarkedString.t list) ->
              Ojs.set_prop_ascii (t_to_js x1182) "contents"
                (Ojs.list_to_js MarkedString.t_to_js x1183)
        let (range : t -> Range.t) =
          fun (x1185 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1185) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1186 : t) ->
            fun (x1187 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1186) "range"
                (Range.t_to_js x1187)
        let (create :
          contents:(MarkedString.t, MarkedString.t) or_array ->
            ?range:Range.t -> unit -> t)
          =
          fun ~contents:(x1188 : (MarkedString.t, MarkedString.t) or_array)
            ->
            fun ?range:(x1189 : Range.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "Hover")
                     (let x1190 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1190 "push"
                           [|(or_array_to_js MarkedString.t_to_js
                                MarkedString.t_to_js x1188)|]);
                      (match x1189 with
                       | Some x1191 ->
                           ignore
                             (Ojs.call x1190 "push" [|(Range.t_to_js x1191)|])
                       | None -> ());
                      x1190))
      end
    module HoverProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1195 : Ojs.t) -> x1195
        and t_to_js : t -> Ojs.t = fun (x1194 : Ojs.t) -> x1194
        let (provide_hover :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Hover.t ProviderResult.t)
          =
          fun (x1199 : t) ->
            fun ~document:(x1196 : TextDocument.t) ->
              fun ~position:(x1197 : Position.t) ->
                fun ~token:(x1198 : CancellationToken.t) ->
                  ProviderResult.t_of_js Hover.t_of_js
                    (Ojs.call (t_to_js x1199) "provideHover"
                       [|(TextDocument.t_to_js x1196);(Position.t_to_js x1197);(
                         CancellationToken.t_to_js x1198)|])
      end
    module EvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1202 : Ojs.t) -> x1202
        and t_to_js : t -> Ojs.t = fun (x1201 : Ojs.t) -> x1201
        let (range : t -> Range.t) =
          fun (x1203 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1203) "range")
        let (expression : t -> string) =
          fun (x1204 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1204) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1205 : Range.t) ->
            fun ?expression:(x1206 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "EvaluatableExpression")
                     (let x1207 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1207 "push" [|(Range.t_to_js x1205)|]);
                      (match x1206 with
                       | Some x1208 ->
                           ignore
                             (Ojs.call x1207 "push"
                                [|(Ojs.string_to_js x1208)|])
                       | None -> ());
                      x1207))
      end
    module EvaluatableExpressionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1210 : Ojs.t) -> x1210
        and t_to_js : t -> Ojs.t = fun (x1209 : Ojs.t) -> x1209
        let (provide_evaluatable_expression :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  EvaluatableExpression.t ProviderResult.t)
          =
          fun (x1214 : t) ->
            fun ~document:(x1211 : TextDocument.t) ->
              fun ~position:(x1212 : Position.t) ->
                fun ~token:(x1213 : CancellationToken.t) ->
                  ProviderResult.t_of_js EvaluatableExpression.t_of_js
                    (Ojs.call (t_to_js x1214) "provideEvaluatableExpression"
                       [|(TextDocument.t_to_js x1211);(Position.t_to_js x1212);(
                         CancellationToken.t_to_js x1213)|])
      end
    module InlineValueText =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1217 : Ojs.t) -> x1217
        and t_to_js : t -> Ojs.t = fun (x1216 : Ojs.t) -> x1216
        let (range : t -> Range.t) =
          fun (x1218 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1218) "range")
        let (text : t -> string) =
          fun (x1219 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1219) "text")
        let (create : range:Range.t -> text:string -> t) =
          fun ~range:(x1220 : Range.t) ->
            fun ~text:(x1221 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "InlineValueText")
                   [|(Range.t_to_js x1220);(Ojs.string_to_js x1221)|])
      end
    module InlineValueVariableLookup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1223 : Ojs.t) -> x1223
        and t_to_js : t -> Ojs.t = fun (x1222 : Ojs.t) -> x1222
        let (range : t -> Range.t) =
          fun (x1224 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1224) "range")
        let (variable_name : t -> string) =
          fun (x1225 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1225) "variableName")
        let (case_sensitive_lookup : t -> bool) =
          fun (x1226 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1226) "caseSensitiveLookup")
        let (create :
          range:Range.t ->
            ?variable_name:string -> ?case_sensitive_lookup:bool -> unit -> t)
          =
          fun ~range:(x1227 : Range.t) ->
            fun ?variable_name:(x1228 : string option) ->
              fun ?case_sensitive_lookup:(x1229 : bool option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "InlineValueVariableLookup")
                       (let x1230 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1230 "push" [|(Range.t_to_js x1227)|]);
                        (match x1228 with
                         | Some x1232 ->
                             ignore
                               (Ojs.call x1230 "push"
                                  [|(Ojs.string_to_js x1232)|])
                         | None -> ());
                        (match x1229 with
                         | Some x1231 ->
                             ignore
                               (Ojs.call x1230 "push"
                                  [|(Ojs.bool_to_js x1231)|])
                         | None -> ());
                        x1230))
      end
    module InlineValueEvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1234 : Ojs.t) -> x1234
        and t_to_js : t -> Ojs.t = fun (x1233 : Ojs.t) -> x1233
        let (range : t -> Range.t) =
          fun (x1235 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1235) "range")
        let (expression : t -> string) =
          fun (x1236 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1236) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1237 : Range.t) ->
            fun ?expression:(x1238 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "InlineValueEvaluatableExpression")
                     (let x1239 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1239 "push" [|(Range.t_to_js x1237)|]);
                      (match x1238 with
                       | Some x1240 ->
                           ignore
                             (Ojs.call x1239 "push"
                                [|(Ojs.string_to_js x1240)|])
                       | None -> ());
                      x1239))
      end
    module InlineValue =
      struct
        type t =
          (InlineValueEvaluatableExpression.t, InlineValueText.t,
            InlineValueVariableLookup.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x1245 : Ojs.t) ->
            union3_of_js InlineValueEvaluatableExpression.t_of_js
              InlineValueText.t_of_js InlineValueVariableLookup.t_of_js x1245
        and t_to_js : t -> Ojs.t =
          fun
            (x1241 :
              (InlineValueEvaluatableExpression.t, InlineValueText.t,
                InlineValueVariableLookup.t) union3)
            ->
            union3_to_js InlineValueEvaluatableExpression.t_to_js
              InlineValueText.t_to_js InlineValueVariableLookup.t_to_js x1241
      end
    module InlineValueContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1250 : Ojs.t) -> x1250
        and t_to_js : t -> Ojs.t = fun (x1249 : Ojs.t) -> x1249
        let (frame_id : t -> int) =
          fun (x1251 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1251) "frameId")
        let (stopped_location : t -> Range.t) =
          fun (x1252 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1252) "stoppedLocation")
      end
    module InlineValuesProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1254 : Ojs.t) -> x1254
        and t_to_js : t -> Ojs.t = fun (x1253 : Ojs.t) -> x1253
        let (on_did_change_inline_values : t -> unit Event.t or_undefined) =
          fun (x1255 : t) ->
            or_undefined_of_js
              (fun (x1256 : Ojs.t) -> Event.t_of_js Ojs.unit_of_js x1256)
              (Ojs.get_prop_ascii (t_to_js x1255) "onDidChangeInlineValues")
        let (set_on_did_change_inline_values :
          t -> unit Event.t or_undefined -> unit) =
          fun (x1258 : t) ->
            fun (x1259 : unit Event.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1258) "onDidChangeInlineValues"
                (or_undefined_to_js
                   (fun (x1260 : unit Event.t) ->
                      Event.t_to_js Ojs.unit_to_js x1260) x1259)
        let (provide_inline_values :
          t ->
            document:TextDocument.t ->
              view_port:Range.t ->
                context:InlineValueContext.t ->
                  token:CancellationToken.t ->
                    InlineValue.t list ProviderResult.t)
          =
          fun (x1266 : t) ->
            fun ~document:(x1262 : TextDocument.t) ->
              fun ~view_port:(x1263 : Range.t) ->
                fun ~context:(x1264 : InlineValueContext.t) ->
                  fun ~token:(x1265 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1267 : Ojs.t) ->
                         Ojs.list_of_js InlineValue.t_of_js x1267)
                      (Ojs.call (t_to_js x1266) "provideInlineValues"
                         [|(TextDocument.t_to_js x1262);(Range.t_to_js x1263);(
                           InlineValueContext.t_to_js x1264);(CancellationToken.t_to_js
                                                                x1265)|])
      end
    module DocumentHighlightKind =
      struct
        type t = [ `Read  | `Write ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1270 : Ojs.t) ->
            let x1271 = x1270 in
            match Ojs.int_of_js x1271 with
            | 1 -> `Read
            | 2 -> `Write
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1269 : [ `Read  | `Write ]) ->
            match x1269 with
            | `Read -> Ojs.int_to_js 1
            | `Write -> Ojs.int_to_js 2
      end
    module DocumentHighlight =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1273 : Ojs.t) -> x1273
        and t_to_js : t -> Ojs.t = fun (x1272 : Ojs.t) -> x1272
        let (range : t -> Range.t) =
          fun (x1274 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1274) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1275 : t) ->
            fun (x1276 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1275) "range"
                (Range.t_to_js x1276)
        let (kind : t -> DocumentHighlightKind.t) =
          fun (x1277 : t) ->
            DocumentHighlightKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1277) "kind")
        let (set_kind : t -> DocumentHighlightKind.t -> unit) =
          fun (x1278 : t) ->
            fun (x1279 : DocumentHighlightKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1278) "kind"
                (DocumentHighlightKind.t_to_js x1279)
        let (create :
          range:Range.t -> ?kind:DocumentHighlightKind.t -> unit -> t) =
          fun ~range:(x1280 : Range.t) ->
            fun ?kind:(x1281 : DocumentHighlightKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentHighlight")
                     (let x1282 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1282 "push" [|(Range.t_to_js x1280)|]);
                      (match x1281 with
                       | Some x1283 ->
                           ignore
                             (Ojs.call x1282 "push"
                                [|(DocumentHighlightKind.t_to_js x1283)|])
                       | None -> ());
                      x1282))
      end
    module DocumentHighlightProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1285 : Ojs.t) -> x1285
        and t_to_js : t -> Ojs.t = fun (x1284 : Ojs.t) -> x1284
        let (provide_document_highlights :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  DocumentHighlight.t list ProviderResult.t)
          =
          fun (x1289 : t) ->
            fun ~document:(x1286 : TextDocument.t) ->
              fun ~position:(x1287 : Position.t) ->
                fun ~token:(x1288 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1290 : Ojs.t) ->
                       Ojs.list_of_js DocumentHighlight.t_of_js x1290)
                    (Ojs.call (t_to_js x1289) "provideDocumentHighlights"
                       [|(TextDocument.t_to_js x1286);(Position.t_to_js x1287);(
                         CancellationToken.t_to_js x1288)|])
      end
    module SymbolKind =
      struct
        type t =
          [ `Module  | `Namespace  | `Package  | `Class  | `Method 
          | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
          | `Function  | `Variable  | `Constant  | `String  | `Number 
          | `Boolean  | `Array  | `Object  | `Key  | `Null  | `EnumMember 
          | `Struct  | `Event  | `Operator  | `TypeParameter ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1293 : Ojs.t) ->
            let x1294 = x1293 in
            match Ojs.int_of_js x1294 with
            | 1 -> `Module
            | 2 -> `Namespace
            | 3 -> `Package
            | 4 -> `Class
            | 5 -> `Method
            | 6 -> `Property
            | 7 -> `Field
            | 8 -> `Constructor
            | 9 -> `Enum
            | 10 -> `Interface
            | 11 -> `Function
            | 12 -> `Variable
            | 13 -> `Constant
            | 14 -> `String
            | 15 -> `Number
            | 16 -> `Boolean
            | 17 -> `Array
            | 18 -> `Object
            | 19 -> `Key
            | 20 -> `Null
            | 21 -> `EnumMember
            | 22 -> `Struct
            | 23 -> `Event
            | 24 -> `Operator
            | 25 -> `TypeParameter
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1292 :
              [ `Module  | `Namespace  | `Package  | `Class  | `Method 
              | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
              | `Function  | `Variable  | `Constant  | `String  | `Number 
              | `Boolean  | `Array  | `Object  | `Key  | `Null 
              | `EnumMember  | `Struct  | `Event  | `Operator 
              | `TypeParameter ])
            ->
            match x1292 with
            | `Module -> Ojs.int_to_js 1
            | `Namespace -> Ojs.int_to_js 2
            | `Package -> Ojs.int_to_js 3
            | `Class -> Ojs.int_to_js 4
            | `Method -> Ojs.int_to_js 5
            | `Property -> Ojs.int_to_js 6
            | `Field -> Ojs.int_to_js 7
            | `Constructor -> Ojs.int_to_js 8
            | `Enum -> Ojs.int_to_js 9
            | `Interface -> Ojs.int_to_js 10
            | `Function -> Ojs.int_to_js 11
            | `Variable -> Ojs.int_to_js 12
            | `Constant -> Ojs.int_to_js 13
            | `String -> Ojs.int_to_js 14
            | `Number -> Ojs.int_to_js 15
            | `Boolean -> Ojs.int_to_js 16
            | `Array -> Ojs.int_to_js 17
            | `Object -> Ojs.int_to_js 18
            | `Key -> Ojs.int_to_js 19
            | `Null -> Ojs.int_to_js 20
            | `EnumMember -> Ojs.int_to_js 21
            | `Struct -> Ojs.int_to_js 22
            | `Event -> Ojs.int_to_js 23
            | `Operator -> Ojs.int_to_js 24
            | `TypeParameter -> Ojs.int_to_js 25
      end
    module SymbolTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1296 : Ojs.t) -> x1296
        and t_to_js : t -> Ojs.t = fun (x1295 : Ojs.t) -> x1295
      end
    module SymbolInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1298 : Ojs.t) -> x1298
        and t_to_js : t -> Ojs.t = fun (x1297 : Ojs.t) -> x1297
        let (name : t -> string) =
          fun (x1299 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1299) "name")
        let (set_name : t -> string -> unit) =
          fun (x1300 : t) ->
            fun (x1301 : string) ->
              Ojs.set_prop_ascii (t_to_js x1300) "name"
                (Ojs.string_to_js x1301)
        let (container_name : t -> string) =
          fun (x1302 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1302) "containerName")
        let (set_container_name : t -> string -> unit) =
          fun (x1303 : t) ->
            fun (x1304 : string) ->
              Ojs.set_prop_ascii (t_to_js x1303) "containerName"
                (Ojs.string_to_js x1304)
        let (kind : t -> SymbolKind.t) =
          fun (x1305 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1305) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1306 : t) ->
            fun (x1307 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1306) "kind"
                (SymbolKind.t_to_js x1307)
        let (tags : t -> SymbolTag.t list) =
          fun (x1308 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1308) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1310 : t) ->
            fun (x1311 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1310) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1311)
        let (location : t -> Location.t) =
          fun (x1313 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x1313) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x1314 : t) ->
            fun (x1315 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x1314) "location"
                (Location.t_to_js x1315)
        let (create :
          name:string ->
            kind:SymbolKind.t ->
              container_name:string -> location:Location.t -> t)
          =
          fun ~name:(x1316 : string) ->
            fun ~kind:(x1317 : SymbolKind.t) ->
              fun ~container_name:(x1318 : string) ->
                fun ~location:(x1319 : Location.t) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SymbolInformation")
                       [|(Ojs.string_to_js x1316);(SymbolKind.t_to_js x1317);(
                         Ojs.string_to_js x1318);(Location.t_to_js x1319)|])
        let (create' :
          name:string ->
            kind:SymbolKind.t ->
              range:Range.t ->
                ?uri:Uri.t -> ?container_name:string -> unit -> t)
          =
          fun ~name:(x1320 : string) ->
            fun ~kind:(x1321 : SymbolKind.t) ->
              fun ~range:(x1322 : Range.t) ->
                fun ?uri:(x1323 : Uri.t option) ->
                  fun ?container_name:(x1324 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SymbolInformation")
                           (let x1325 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x1325 "push"
                                 [|(Ojs.string_to_js x1320)|]);
                            ignore
                              (Ojs.call x1325 "push"
                                 [|(SymbolKind.t_to_js x1321)|]);
                            ignore
                              (Ojs.call x1325 "push"
                                 [|(Range.t_to_js x1322)|]);
                            (match x1323 with
                             | Some x1327 ->
                                 ignore
                                   (Ojs.call x1325 "push"
                                      [|(Uri.t_to_js x1327)|])
                             | None -> ());
                            (match x1324 with
                             | Some x1326 ->
                                 ignore
                                   (Ojs.call x1325 "push"
                                      [|(Ojs.string_to_js x1326)|])
                             | None -> ());
                            x1325))
      end
    module DocumentSymbol =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1329 : Ojs.t) -> x1329
        and t_to_js : t -> Ojs.t = fun (x1328 : Ojs.t) -> x1328
        let (name : t -> string) =
          fun (x1330 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1330) "name")
        let (set_name : t -> string -> unit) =
          fun (x1331 : t) ->
            fun (x1332 : string) ->
              Ojs.set_prop_ascii (t_to_js x1331) "name"
                (Ojs.string_to_js x1332)
        let (detail : t -> string) =
          fun (x1333 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1333) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1334 : t) ->
            fun (x1335 : string) ->
              Ojs.set_prop_ascii (t_to_js x1334) "detail"
                (Ojs.string_to_js x1335)
        let (kind : t -> SymbolKind.t) =
          fun (x1336 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1336) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1337 : t) ->
            fun (x1338 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1337) "kind"
                (SymbolKind.t_to_js x1338)
        let (tags : t -> SymbolTag.t list) =
          fun (x1339 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1339) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1341 : t) ->
            fun (x1342 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1341) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1342)
        let (range : t -> Range.t) =
          fun (x1344 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1344) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1345 : t) ->
            fun (x1346 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1345) "range"
                (Range.t_to_js x1346)
        let (selection_range : t -> Range.t) =
          fun (x1347 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1347) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x1348 : t) ->
            fun (x1349 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1348) "selectionRange"
                (Range.t_to_js x1349)
        let (children : t -> t list) =
          fun (x1350 : t) ->
            Ojs.list_of_js t_of_js
              (Ojs.get_prop_ascii (t_to_js x1350) "children")
        let (set_children : t -> t list -> unit) =
          fun (x1352 : t) ->
            fun (x1353 : t list) ->
              Ojs.set_prop_ascii (t_to_js x1352) "children"
                (Ojs.list_to_js t_to_js x1353)
        let (create :
          name:string ->
            detail:string ->
              kind:SymbolKind.t ->
                range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~name:(x1355 : string) ->
            fun ~detail:(x1356 : string) ->
              fun ~kind:(x1357 : SymbolKind.t) ->
                fun ~range:(x1358 : Range.t) ->
                  fun ~selection_range:(x1359 : Range.t) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "DocumentSymbol")
                         [|(Ojs.string_to_js x1355);(Ojs.string_to_js x1356);(
                           SymbolKind.t_to_js x1357);(Range.t_to_js x1358);(
                           Range.t_to_js x1359)|])
      end
    module DocumentSymbolProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1361 : Ojs.t) -> x1361
        and t_to_js : t -> Ojs.t = fun (x1360 : Ojs.t) -> x1360
        let (provide_document_symbols :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                [ `U_n_0 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_1 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_2 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_3 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_4 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_5 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_6 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_7 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_8 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_9 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_10 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_11 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_12 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_13 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_14 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_15 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_16 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_17 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_18 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_19 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_20 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_21 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_22 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_23 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_24 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_25 of (DocumentSymbol.t, SymbolInformation.t) union2 ]
                  list ProviderResult.t)
          =
          fun (x1364 : t) ->
            fun ~document:(x1362 : TextDocument.t) ->
              fun ~token:(x1363 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1365 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x1366 : Ojs.t) ->
                          let x1367 = x1366 in
                          match Ojs.int_of_js
                                  (Ojs.get_prop_ascii x1367 "kind")
                          with
                          | 0 ->
                              `U_n_0
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 1 ->
                              `U_n_1
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 2 ->
                              `U_n_2
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 3 ->
                              `U_n_3
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 4 ->
                              `U_n_4
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 5 ->
                              `U_n_5
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 6 ->
                              `U_n_6
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 7 ->
                              `U_n_7
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 8 ->
                              `U_n_8
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 9 ->
                              `U_n_9
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 10 ->
                              `U_n_10
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 11 ->
                              `U_n_11
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 12 ->
                              `U_n_12
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 13 ->
                              `U_n_13
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 14 ->
                              `U_n_14
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 15 ->
                              `U_n_15
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 16 ->
                              `U_n_16
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 17 ->
                              `U_n_17
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 18 ->
                              `U_n_18
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 19 ->
                              `U_n_19
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 20 ->
                              `U_n_20
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 21 ->
                              `U_n_21
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 22 ->
                              `U_n_22
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 23 ->
                              `U_n_23
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 24 ->
                              `U_n_24
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | 25 ->
                              `U_n_25
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1367)
                          | _ -> assert false) x1365)
                  (Ojs.call (t_to_js x1364) "provideDocumentSymbols"
                     [|(TextDocument.t_to_js x1362);(CancellationToken.t_to_js
                                                       x1363)|])
      end
    module DocumentSymbolProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1421 : Ojs.t) -> x1421
        and t_to_js : t -> Ojs.t = fun (x1420 : Ojs.t) -> x1420
        let (label : t -> string) =
          fun (x1422 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1422) "label")
        let (set_label : t -> string -> unit) =
          fun (x1423 : t) ->
            fun (x1424 : string) ->
              Ojs.set_prop_ascii (t_to_js x1423) "label"
                (Ojs.string_to_js x1424)
      end
    module WorkspaceSymbolProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1426 : Ojs.t) -> x1426
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1425 : Ojs.t) -> x1425
        let (provide_workspace_symbols :
          'T t ->
            query:string ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1429 : 'T t) ->
            fun ~query:(x1427 : string) ->
              fun ~token:(x1428 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1431 : Ojs.t) -> Ojs.list_of_js Obj.magic x1431)
                  (Ojs.call (t_to_js Obj.magic x1429)
                     "provideWorkspaceSymbols"
                     [|(Ojs.string_to_js x1427);(CancellationToken.t_to_js
                                                   x1428)|])
        let (resolve_workspace_symbol :
          'T t ->
            symbol:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1435 : 'T t) ->
            fun ~symbol:(x1433 : 'T) ->
              fun ~token:(x1434 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1435)
                     "resolveWorkspaceSymbol"
                     [|(Obj.magic x1433);(CancellationToken.t_to_js x1434)|])
      end
    module ReferenceContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1439 : Ojs.t) -> x1439
        and t_to_js : t -> Ojs.t = fun (x1438 : Ojs.t) -> x1438
        let (include_declaration : t -> bool) =
          fun (x1440 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1440) "includeDeclaration")
        let (set_include_declaration : t -> bool -> unit) =
          fun (x1441 : t) ->
            fun (x1442 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1441) "includeDeclaration"
                (Ojs.bool_to_js x1442)
      end
    module ReferenceProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1444 : Ojs.t) -> x1444
        and t_to_js : t -> Ojs.t = fun (x1443 : Ojs.t) -> x1443
        let (provide_references :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                context:ReferenceContext.t ->
                  token:CancellationToken.t ->
                    Location.t list ProviderResult.t)
          =
          fun (x1449 : t) ->
            fun ~document:(x1445 : TextDocument.t) ->
              fun ~position:(x1446 : Position.t) ->
                fun ~context:(x1447 : ReferenceContext.t) ->
                  fun ~token:(x1448 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1450 : Ojs.t) ->
                         Ojs.list_of_js Location.t_of_js x1450)
                      (Ojs.call (t_to_js x1449) "provideReferences"
                         [|(TextDocument.t_to_js x1445);(Position.t_to_js
                                                           x1446);(ReferenceContext.t_to_js
                                                                    x1447);(
                           CancellationToken.t_to_js x1448)|])
      end
    module TextEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1453 : Ojs.t) -> x1453
        and t_to_js : t -> Ojs.t = fun (x1452 : Ojs.t) -> x1452
        let (replace : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1454 : Range.t) ->
            fun ~new_text:(x1455 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "replace"
                   [|(Range.t_to_js x1454);(Ojs.string_to_js x1455)|])
        let (insert : position:Position.t -> new_text:string -> t) =
          fun ~position:(x1456 : Position.t) ->
            fun ~new_text:(x1457 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "insert"
                   [|(Position.t_to_js x1456);(Ojs.string_to_js x1457)|])
        let (delete : range:Range.t -> t) =
          fun ~range:(x1458 : Range.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "delete" [|(Range.t_to_js x1458)|])
        let (set_end_of_line : eol:EndOfLine.t -> t) =
          fun ~eol:(x1459 : EndOfLine.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "setEndOfLine" [|(EndOfLine.t_to_js x1459)|])
        let (range : t -> Range.t) =
          fun (x1460 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1460) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1461 : t) ->
            fun (x1462 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1461) "range"
                (Range.t_to_js x1462)
        let (new_text : t -> string) =
          fun (x1463 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1463) "newText")
        let (set_new_text : t -> string -> unit) =
          fun (x1464 : t) ->
            fun (x1465 : string) ->
              Ojs.set_prop_ascii (t_to_js x1464) "newText"
                (Ojs.string_to_js x1465)
        let (new_eol : t -> EndOfLine.t) =
          fun (x1466 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x1466) "newEol")
        let (set_new_eol : t -> EndOfLine.t -> unit) =
          fun (x1467 : t) ->
            fun (x1468 : EndOfLine.t) ->
              Ojs.set_prop_ascii (t_to_js x1467) "newEol"
                (EndOfLine.t_to_js x1468)
        let (create : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1469 : Range.t) ->
            fun ~new_text:(x1470 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   [|(Range.t_to_js x1469);(Ojs.string_to_js x1470)|])
      end
    module IconPath =
      struct
        type t =
          {
          light: [ `String of string  | `Uri of Uri.t ] ;
          dark: [ `String of string  | `Uri of Uri.t ] }
        let rec t_to_js : t -> Ojs.t =
          fun (x1471 : t) ->
            Ojs.obj
              [|("light",
                  ((match x1471.light with
                    | `String x1472 -> Ojs.string_to_js x1472
                    | `Uri x1473 -> Uri.t_to_js x1473)));("dark",
                                                           ((match x1471.dark
                                                             with
                                                             | `String x1474
                                                                 ->
                                                                 Ojs.string_to_js
                                                                   x1474
                                                             | `Uri x1475 ->
                                                                 Uri.t_to_js
                                                                   x1475)))|]
        let t_of_js js_val =
          let light_js = Ojs.get_prop_ascii js_val "light" in
          let dark_js = Ojs.get_prop_ascii js_val "dark" in
          let light =
            if Ojs.has_property light_js "parse"
            then `Uri (Uri.t_of_js light_js)
            else `String (Ojs.string_of_js light_js) in
          let dark =
            if Ojs.has_property dark_js "parse"
            then `Uri (Uri.t_of_js dark_js)
            else `String (Ojs.string_of_js dark_js) in
          { light; dark }
      end
    module WorkspaceEditEntryMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1483 : Ojs.t) -> x1483
        and t_to_js : t -> Ojs.t = fun (x1482 : Ojs.t) -> x1482
        let (needs_confirmation : t -> bool) =
          fun (x1484 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1484) "needsConfirmation")
        let (set_needs_confirmation : t -> bool -> unit) =
          fun (x1485 : t) ->
            fun (x1486 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1485) "needsConfirmation"
                (Ojs.bool_to_js x1486)
        let (label : t -> string) =
          fun (x1487 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1487) "label")
        let (set_label : t -> string -> unit) =
          fun (x1488 : t) ->
            fun (x1489 : string) ->
              Ojs.set_prop_ascii (t_to_js x1488) "label"
                (Ojs.string_to_js x1489)
        let (description : t -> string) =
          fun (x1490 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1490) "description")
        let (set_description : t -> string -> unit) =
          fun (x1491 : t) ->
            fun (x1492 : string) ->
              Ojs.set_prop_ascii (t_to_js x1491) "description"
                (Ojs.string_to_js x1492)
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x1493 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1493) "iconPath")
        let (set_icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 -> unit) =
          fun (x1497 : t) ->
            fun (x1498 : (ThemeIcon.t, Uri.t, IconPath.t) union3) ->
              Ojs.set_prop_ascii (t_to_js x1497) "iconPath"
                (union3_to_js ThemeIcon.t_to_js Uri.t_to_js IconPath.t_to_js
                   x1498)
      end
    module WorkspaceEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1503 : Ojs.t) -> x1503
        and t_to_js : t -> Ojs.t = fun (x1502 : Ojs.t) -> x1502
        let (size : t -> int) =
          fun (x1504 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1504) "size")
        let (replace :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1511 : t) ->
            fun ~uri:(x1505 : Uri.t) ->
              fun ~range:(x1506 : Range.t) ->
                fun ~new_text:(x1507 : string) ->
                  fun ?metadata:(x1508 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1512 = t_to_js x1511 in
                         Ojs.call (Ojs.get_prop_ascii x1512 "replace")
                           "apply"
                           [|x1512;((let x1509 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1509 "push"
                                          [|(Uri.t_to_js x1505)|]);
                                     ignore
                                       (Ojs.call x1509 "push"
                                          [|(Range.t_to_js x1506)|]);
                                     ignore
                                       (Ojs.call x1509 "push"
                                          [|(Ojs.string_to_js x1507)|]);
                                     (match x1508 with
                                      | Some x1510 ->
                                          ignore
                                            (Ojs.call x1509 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1510)|])
                                      | None -> ());
                                     x1509))|])
        let (insert :
          t ->
            uri:Uri.t ->
              position:Position.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1519 : t) ->
            fun ~uri:(x1513 : Uri.t) ->
              fun ~position:(x1514 : Position.t) ->
                fun ~new_text:(x1515 : string) ->
                  fun ?metadata:(x1516 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1520 = t_to_js x1519 in
                         Ojs.call (Ojs.get_prop_ascii x1520 "insert") "apply"
                           [|x1520;((let x1517 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1517 "push"
                                          [|(Uri.t_to_js x1513)|]);
                                     ignore
                                       (Ojs.call x1517 "push"
                                          [|(Position.t_to_js x1514)|]);
                                     ignore
                                       (Ojs.call x1517 "push"
                                          [|(Ojs.string_to_js x1515)|]);
                                     (match x1516 with
                                      | Some x1518 ->
                                          ignore
                                            (Ojs.call x1517 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1518)|])
                                      | None -> ());
                                     x1517))|])
        let (delete :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1526 : t) ->
            fun ~uri:(x1521 : Uri.t) ->
              fun ~range:(x1522 : Range.t) ->
                fun ?metadata:(x1523 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1527 = t_to_js x1526 in
                       Ojs.call (Ojs.get_prop_ascii x1527 "delete") "apply"
                         [|x1527;((let x1524 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1524 "push"
                                        [|(Uri.t_to_js x1521)|]);
                                   ignore
                                     (Ojs.call x1524 "push"
                                        [|(Range.t_to_js x1522)|]);
                                   (match x1523 with
                                    | Some x1525 ->
                                        ignore
                                          (Ojs.call x1524 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1525)|])
                                    | None -> ());
                                   x1524))|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x1529 : t) ->
            fun ~uri:(x1528 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1529) "has" [|(Uri.t_to_js x1528)|])
        let (set_ : t -> uri:Uri.t -> edits:TextEdit.t list -> unit) =
          fun (x1533 : t) ->
            fun ~uri:(x1530 : Uri.t) ->
              fun ~edits:(x1531 : TextEdit.t list) ->
                ignore
                  (Ojs.call (t_to_js x1533) "set"
                     [|(Uri.t_to_js x1530);(Ojs.list_to_js TextEdit.t_to_js
                                              x1531)|])
        let (get : t -> uri:Uri.t -> TextEdit.t list) =
          fun (x1535 : t) ->
            fun ~uri:(x1534 : Uri.t) ->
              Ojs.list_of_js TextEdit.t_of_js
                (Ojs.call (t_to_js x1535) "get" [|(Uri.t_to_js x1534)|])
        module CreateFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1538 : Ojs.t) -> x1538
            and t_to_js : t -> Ojs.t = fun (x1537 : Ojs.t) -> x1537
            let (overwrite : t -> bool) =
              fun (x1539 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1539) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x1540 : t) ->
                fun (x1541 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1540) "overwrite"
                    (Ojs.bool_to_js x1541)
            let (ignore_if_exists : t -> bool) =
              fun (x1542 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1542) "ignoreIfExists")
            let (set_ignore_if_exists : t -> bool -> unit) =
              fun (x1543 : t) ->
                fun (x1544 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1543) "ignoreIfExists"
                    (Ojs.bool_to_js x1544)
          end
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1546 : Ojs.t) -> x1546
            and t_to_js : t -> Ojs.t = fun (x1545 : Ojs.t) -> x1545
            let (recursive : t -> bool) =
              fun (x1547 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1547) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x1548 : t) ->
                fun (x1549 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1548) "recursive"
                    (Ojs.bool_to_js x1549)
            let (ignore_if_not_exists : t -> bool) =
              fun (x1550 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1550) "ignoreIfNotExists")
            let (set_ignore_if_not_exists : t -> bool -> unit) =
              fun (x1551 : t) ->
                fun (x1552 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1551) "ignoreIfNotExists"
                    (Ojs.bool_to_js x1552)
          end
        let (create_file :
          t ->
            uri:Uri.t ->
              ?options:CreateFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1559 : t) ->
            fun ~uri:(x1553 : Uri.t) ->
              fun ?options:(x1554 : CreateFileOptions.t option) ->
                fun ?metadata:(x1555 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1560 = t_to_js x1559 in
                       Ojs.call (Ojs.get_prop_ascii x1560 "createFile")
                         "apply"
                         [|x1560;((let x1556 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1556 "push"
                                        [|(Uri.t_to_js x1553)|]);
                                   (match x1554 with
                                    | Some x1558 ->
                                        ignore
                                          (Ojs.call x1556 "push"
                                             [|(CreateFileOptions.t_to_js
                                                  x1558)|])
                                    | None -> ());
                                   (match x1555 with
                                    | Some x1557 ->
                                        ignore
                                          (Ojs.call x1556 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1557)|])
                                    | None -> ());
                                   x1556))|])
        let (delete_file :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1567 : t) ->
            fun ~uri:(x1561 : Uri.t) ->
              fun ?options:(x1562 : DeleteFileOptions.t option) ->
                fun ?metadata:(x1563 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1568 = t_to_js x1567 in
                       Ojs.call (Ojs.get_prop_ascii x1568 "deleteFile")
                         "apply"
                         [|x1568;((let x1564 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1564 "push"
                                        [|(Uri.t_to_js x1561)|]);
                                   (match x1562 with
                                    | Some x1566 ->
                                        ignore
                                          (Ojs.call x1564 "push"
                                             [|(DeleteFileOptions.t_to_js
                                                  x1566)|])
                                    | None -> ());
                                   (match x1563 with
                                    | Some x1565 ->
                                        ignore
                                          (Ojs.call x1564 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1565)|])
                                    | None -> ());
                                   x1564))|])
        let (rename_file :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                ?options:CreateFileOptions.t ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1576 : t) ->
            fun ~old_uri:(x1569 : Uri.t) ->
              fun ~new_uri:(x1570 : Uri.t) ->
                fun ?options:(x1571 : CreateFileOptions.t option) ->
                  fun ?metadata:(x1572 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1577 = t_to_js x1576 in
                         Ojs.call (Ojs.get_prop_ascii x1577 "renameFile")
                           "apply"
                           [|x1577;((let x1573 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1573 "push"
                                          [|(Uri.t_to_js x1569)|]);
                                     ignore
                                       (Ojs.call x1573 "push"
                                          [|(Uri.t_to_js x1570)|]);
                                     (match x1571 with
                                      | Some x1575 ->
                                          ignore
                                            (Ojs.call x1573 "push"
                                               [|(CreateFileOptions.t_to_js
                                                    x1575)|])
                                      | None -> ());
                                     (match x1572 with
                                      | Some x1574 ->
                                          ignore
                                            (Ojs.call x1573 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1574)|])
                                      | None -> ());
                                     x1573))|])
        let (entries : t -> (Uri.t * TextEdit.t list) list) =
          fun (x1578 : t) ->
            Ojs.list_of_js
              (fun (x1579 : Ojs.t) ->
                 let x1580 = x1579 in
                 ((Uri.t_of_js (Ojs.array_get x1580 0)),
                   (Ojs.list_of_js TextEdit.t_of_js (Ojs.array_get x1580 1))))
              (Ojs.call (t_to_js x1578) "entries" [||])
      end
    module CodeAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1583 : Ojs.t) -> x1583
        and t_to_js : t -> Ojs.t = fun (x1582 : Ojs.t) -> x1582
        module Disabled =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1585 : Ojs.t) -> x1585
            and t_to_js : t -> Ojs.t = fun (x1584 : Ojs.t) -> x1584
            let (reason : t -> string) =
              fun (x1586 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1586) "reason")
          end
        let (title : t -> string) =
          fun (x1587 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1587) "title")
        let (set_title : t -> string -> unit) =
          fun (x1588 : t) ->
            fun (x1589 : string) ->
              Ojs.set_prop_ascii (t_to_js x1588) "title"
                (Ojs.string_to_js x1589)
        let (edit : t -> WorkspaceEdit.t) =
          fun (x1590 : t) ->
            WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1590) "edit")
        let (set_edit : t -> WorkspaceEdit.t -> unit) =
          fun (x1591 : t) ->
            fun (x1592 : WorkspaceEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1591) "edit"
                (WorkspaceEdit.t_to_js x1592)
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1593 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1593) "diagnostics")
        let (set_diagnostics : t -> Diagnostic.t list -> unit) =
          fun (x1595 : t) ->
            fun (x1596 : Diagnostic.t list) ->
              Ojs.set_prop_ascii (t_to_js x1595) "diagnostics"
                (Ojs.list_to_js Diagnostic.t_to_js x1596)
        let (command : t -> Command.t) =
          fun (x1598 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1598) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1599 : t) ->
            fun (x1600 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1599) "command"
                (Command.t_to_js x1600)
        let (kind : t -> CodeActionKind.t) =
          fun (x1601 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1601) "kind")
        let (set_kind : t -> CodeActionKind.t -> unit) =
          fun (x1602 : t) ->
            fun (x1603 : CodeActionKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1602) "kind"
                (CodeActionKind.t_to_js x1603)
        let (is_preferred : t -> bool) =
          fun (x1604 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1604) "isPreferred")
        let (set_is_preferred : t -> bool -> unit) =
          fun (x1605 : t) ->
            fun (x1606 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1605) "isPreferred"
                (Ojs.bool_to_js x1606)
        let (disabled : t -> Disabled.t) =
          fun (x1607 : t) ->
            Disabled.t_of_js (Ojs.get_prop_ascii (t_to_js x1607) "disabled")
        let (set_disabled : t -> Disabled.t -> unit) =
          fun (x1608 : t) ->
            fun (x1609 : Disabled.t) ->
              Ojs.set_prop_ascii (t_to_js x1608) "disabled"
                (Disabled.t_to_js x1609)
        let (create : title:string -> ?kind:CodeActionKind.t -> unit -> t) =
          fun ~title:(x1610 : string) ->
            fun ?kind:(x1611 : CodeActionKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CodeAction")
                     (let x1612 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1612 "push" [|(Ojs.string_to_js x1610)|]);
                      (match x1611 with
                       | Some x1613 ->
                           ignore
                             (Ojs.call x1612 "push"
                                [|(CodeActionKind.t_to_js x1613)|])
                       | None -> ());
                      x1612))
      end
    module CodeActionProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1615 : Ojs.t) -> x1615
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1614 : Ojs.t) -> x1614
        let (provide_code_actions :
          'T t ->
            document:TextDocument.t ->
              range:(Range.t, Selection.t) union2 ->
                context:CodeActionContext.t ->
                  token:CancellationToken.t ->
                    (Command.t, 'T) union2 list ProviderResult.t)
          =
          fun (x1622 : 'T t) ->
            fun ~document:(x1616 : TextDocument.t) ->
              fun ~range:(x1617 : (Range.t, Selection.t) union2) ->
                fun ~context:(x1620 : CodeActionContext.t) ->
                  fun ~token:(x1621 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1624 : Ojs.t) ->
                         Ojs.list_of_js
                           (fun (x1625 : Ojs.t) ->
                              union2_of_js Command.t_of_js Obj.magic x1625)
                           x1624)
                      (Ojs.call (t_to_js Obj.magic x1622)
                         "provideCodeActions"
                         [|(TextDocument.t_to_js x1616);(union2_to_js
                                                           Range.t_to_js
                                                           Selection.t_to_js
                                                           x1617);(CodeActionContext.t_to_js
                                                                    x1620);(
                           CancellationToken.t_to_js x1621)|])
        let (resolve_code_action :
          'T t ->
            code_action:'T ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1630 : 'T t) ->
            fun ~code_action:(x1628 : 'T) ->
              fun ~token:(x1629 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1630) "resolveCodeAction"
                     [|(Obj.magic x1628);(CancellationToken.t_to_js x1629)|])
      end
    module CodeActionProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1634 : Ojs.t) -> x1634
        and t_to_js : t -> Ojs.t = fun (x1633 : Ojs.t) -> x1633
        let (provided_code_action_kinds : t -> CodeActionKind.t list) =
          fun (x1635 : t) ->
            Ojs.list_of_js CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1635) "providedCodeActionKinds")
        module Documentation =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1638 : Ojs.t) -> x1638
            and t_to_js : t -> Ojs.t = fun (x1637 : Ojs.t) -> x1637
            let (kind : t -> CodeActionKind.t) =
              fun (x1639 : t) ->
                CodeActionKind.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1639) "kind")
            let (command : t -> Command.t) =
              fun (x1640 : t) ->
                Command.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1640) "command")
          end
        let (documentation : t -> Documentation.t list) =
          fun (x1641 : t) ->
            Ojs.list_of_js Documentation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1641) "documentation")
      end
    module RenameProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1644 : Ojs.t) -> x1644
        and t_to_js : t -> Ojs.t = fun (x1643 : Ojs.t) -> x1643
        let (provide_rename_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                new_name:string ->
                  token:CancellationToken.t ->
                    WorkspaceEdit.t ProviderResult.t)
          =
          fun (x1649 : t) ->
            fun ~document:(x1645 : TextDocument.t) ->
              fun ~position:(x1646 : Position.t) ->
                fun ~new_name:(x1647 : string) ->
                  fun ~token:(x1648 : CancellationToken.t) ->
                    ProviderResult.t_of_js WorkspaceEdit.t_of_js
                      (Ojs.call (t_to_js x1649) "provideRenameEdits"
                         [|(TextDocument.t_to_js x1645);(Position.t_to_js
                                                           x1646);(Ojs.string_to_js
                                                                    x1647);(
                           CancellationToken.t_to_js x1648)|])
        module RangeWithPlaceHolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1652 : Ojs.t) -> x1652
            and t_to_js : t -> Ojs.t = fun (x1651 : Ojs.t) -> x1651
            let (range : t -> Range.t) =
              fun (x1653 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1653) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x1654 : t) ->
                fun (x1655 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1654) "range"
                    (Range.t_to_js x1655)
            let (placeholder : t -> string) =
              fun (x1656 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1656) "placeholder")
            let (set_placeholder : t -> string -> unit) =
              fun (x1657 : t) ->
                fun (x1658 : string) ->
                  Ojs.set_prop_ascii (t_to_js x1657) "placeholder"
                    (Ojs.string_to_js x1658)
          end
        let (prepare_rename :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Range.t, RangeWithPlaceHolder.t) union2 ProviderResult.t)
          =
          fun (x1662 : t) ->
            fun ~document:(x1659 : TextDocument.t) ->
              fun ~position:(x1660 : Position.t) ->
                fun ~token:(x1661 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1663 : Ojs.t) ->
                       union2_of_js Range.t_of_js
                         RangeWithPlaceHolder.t_of_js x1663)
                    (Ojs.call (t_to_js x1662) "prepareRename"
                       [|(TextDocument.t_to_js x1659);(Position.t_to_js x1660);(
                         CancellationToken.t_to_js x1661)|])
      end
    module SemanticTokensLegend =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1667 : Ojs.t) -> x1667
        and t_to_js : t -> Ojs.t = fun (x1666 : Ojs.t) -> x1666
        let (token_types : t -> string list) =
          fun (x1668 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1668) "tokenTypes")
        let (token_modifiers : t -> string list) =
          fun (x1670 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1670) "tokenModifiers")
        let (create :
          token_types:string list ->
            ?token_modifiers:string list -> unit -> t)
          =
          fun ~token_types:(x1672 : string list) ->
            fun ?token_modifiers:(x1673 : string list option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensLegend")
                     (let x1674 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1674 "push"
                           [|(Ojs.list_to_js Ojs.string_to_js x1672)|]);
                      (match x1673 with
                       | Some x1675 ->
                           ignore
                             (Ojs.call x1674 "push"
                                [|(Ojs.list_to_js Ojs.string_to_js x1675)|])
                       | None -> ());
                      x1674))
      end
    module SemanticTokens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1679 : Ojs.t) -> x1679
        and t_to_js : t -> Ojs.t = fun (x1678 : Ojs.t) -> x1678
        let (result_id : t -> string) =
          fun (x1680 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1680) "resultId")
        let (data : t -> Uint32Array.t) =
          fun (x1681 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1681) "data")
        let (create : data:Uint32Array.t -> ?result_id:string -> unit -> t) =
          fun ~data:(x1682 : Uint32Array.t) ->
            fun ?result_id:(x1683 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokens")
                     (let x1684 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1684 "push"
                           [|(Uint32Array.t_to_js x1682)|]);
                      (match x1683 with
                       | Some x1685 ->
                           ignore
                             (Ojs.call x1684 "push"
                                [|(Ojs.string_to_js x1685)|])
                       | None -> ());
                      x1684))
      end
    module SemanticTokensEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1687 : Ojs.t) -> x1687
        and t_to_js : t -> Ojs.t = fun (x1686 : Ojs.t) -> x1686
        let (start : t -> int) =
          fun (x1688 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1688) "start")
        let (delete_count : t -> int) =
          fun (x1689 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1689) "deleteCount")
        let (data : t -> Uint32Array.t) =
          fun (x1690 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1690) "data")
        let (create :
          start:int -> delete_count:int -> ?data:Uint32Array.t -> unit -> t)
          =
          fun ~start:(x1691 : int) ->
            fun ~delete_count:(x1692 : int) ->
              fun ?data:(x1693 : Uint32Array.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SemanticTokensEdit")
                       (let x1694 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1694 "push" [|(Ojs.int_to_js x1691)|]);
                        ignore
                          (Ojs.call x1694 "push" [|(Ojs.int_to_js x1692)|]);
                        (match x1693 with
                         | Some x1695 ->
                             ignore
                               (Ojs.call x1694 "push"
                                  [|(Uint32Array.t_to_js x1695)|])
                         | None -> ());
                        x1694))
      end
    module SemanticTokensEdits =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1697 : Ojs.t) -> x1697
        and t_to_js : t -> Ojs.t = fun (x1696 : Ojs.t) -> x1696
        let (result_id : t -> string) =
          fun (x1698 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1698) "resultId")
        let (edits : t -> SemanticTokensEdit.t list) =
          fun (x1699 : t) ->
            Ojs.list_of_js SemanticTokensEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1699) "edits")
        let (create :
          edits:SemanticTokensEdit.t list -> ?result_id:string -> unit -> t)
          =
          fun ~edits:(x1701 : SemanticTokensEdit.t list) ->
            fun ?result_id:(x1702 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensEdits")
                     (let x1703 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1703 "push"
                           [|(Ojs.list_to_js SemanticTokensEdit.t_to_js x1701)|]);
                      (match x1702 with
                       | Some x1704 ->
                           ignore
                             (Ojs.call x1703 "push"
                                [|(Ojs.string_to_js x1704)|])
                       | None -> ());
                      x1703))
      end
    module SemanticTokensBuilder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1707 : Ojs.t) -> x1707
        and t_to_js : t -> Ojs.t = fun (x1706 : Ojs.t) -> x1706
        let (create : ?legend:SemanticTokensLegend.t -> unit -> t) =
          fun ?legend:(x1708 : SemanticTokensLegend.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SemanticTokensBuilder")
                   (let x1709 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x1708 with
                     | Some x1710 ->
                         ignore
                           (Ojs.call x1709 "push"
                              [|(SemanticTokensLegend.t_to_js x1710)|])
                     | None -> ());
                    x1709))
        let (push :
          t ->
            line:int ->
              char:int ->
                length:int ->
                  token_type_:int -> ?token_modifiers:int -> unit -> unit)
          =
          fun (x1718 : t) ->
            fun ~line:(x1711 : int) ->
              fun ~char:(x1712 : int) ->
                fun ~length:(x1713 : int) ->
                  fun ~token_type_:(x1714 : int) ->
                    fun ?token_modifiers:(x1715 : int option) ->
                      fun () ->
                        ignore
                          (let x1719 = t_to_js x1718 in
                           Ojs.call (Ojs.get_prop_ascii x1719 "push") "apply"
                             [|x1719;((let x1716 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1716 "push"
                                            [|(Ojs.int_to_js x1711)|]);
                                       ignore
                                         (Ojs.call x1716 "push"
                                            [|(Ojs.int_to_js x1712)|]);
                                       ignore
                                         (Ojs.call x1716 "push"
                                            [|(Ojs.int_to_js x1713)|]);
                                       ignore
                                         (Ojs.call x1716 "push"
                                            [|(Ojs.int_to_js x1714)|]);
                                       (match x1715 with
                                        | Some x1717 ->
                                            ignore
                                              (Ojs.call x1716 "push"
                                                 [|(Ojs.int_to_js x1717)|])
                                        | None -> ());
                                       x1716))|])
        let (push' :
          t ->
            range:Range.t ->
              token_type_:string ->
                ?token_modifiers:string list -> unit -> unit)
          =
          fun (x1726 : t) ->
            fun ~range:(x1720 : Range.t) ->
              fun ~token_type_:(x1721 : string) ->
                fun ?token_modifiers:(x1722 : string list option) ->
                  fun () ->
                    ignore
                      (let x1727 = t_to_js x1726 in
                       Ojs.call (Ojs.get_prop_ascii x1727 "push") "apply"
                         [|x1727;((let x1723 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1723 "push"
                                        [|(Range.t_to_js x1720)|]);
                                   ignore
                                     (Ojs.call x1723 "push"
                                        [|(Ojs.string_to_js x1721)|]);
                                   (match x1722 with
                                    | Some x1724 ->
                                        ignore
                                          (Ojs.call x1723 "push"
                                             [|(Ojs.list_to_js
                                                  Ojs.string_to_js x1724)|])
                                    | None -> ());
                                   x1723))|])
        let (build : t -> ?result_id:string -> unit -> SemanticTokens.t) =
          fun (x1731 : t) ->
            fun ?result_id:(x1728 : string option) ->
              fun () ->
                SemanticTokens.t_of_js
                  (let x1732 = t_to_js x1731 in
                   Ojs.call (Ojs.get_prop_ascii x1732 "build") "apply"
                     [|x1732;((let x1729 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1728 with
                                | Some x1730 ->
                                    ignore
                                      (Ojs.call x1729 "push"
                                         [|(Ojs.string_to_js x1730)|])
                                | None -> ());
                               x1729))|])
      end
    module DocumentSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1734 : Ojs.t) -> x1734
        and t_to_js : t -> Ojs.t = fun (x1733 : Ojs.t) -> x1733
        let (on_did_change_semantic_tokens : t -> unit Event.t) =
          fun (x1735 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1735) "onDidChangeSemanticTokens")
        let (set_on_did_change_semantic_tokens : t -> unit Event.t -> unit) =
          fun (x1737 : t) ->
            fun (x1738 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1737) "onDidChangeSemanticTokens"
                (Event.t_to_js Ojs.unit_to_js x1738)
        let (provide_document_semantic_tokens :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> SemanticTokens.t ProviderResult.t)
          =
          fun (x1742 : t) ->
            fun ~document:(x1740 : TextDocument.t) ->
              fun ~token:(x1741 : CancellationToken.t) ->
                ProviderResult.t_of_js SemanticTokens.t_of_js
                  (Ojs.call (t_to_js x1742) "provideDocumentSemanticTokens"
                     [|(TextDocument.t_to_js x1740);(CancellationToken.t_to_js
                                                       x1741)|])
        let (provide_document_semantic_tokens_edits :
          t ->
            document:TextDocument.t ->
              previous_result_id:string ->
                token:CancellationToken.t ->
                  (SemanticTokens.t, SemanticTokensEdits.t) union2
                    ProviderResult.t)
          =
          fun (x1747 : t) ->
            fun ~document:(x1744 : TextDocument.t) ->
              fun ~previous_result_id:(x1745 : string) ->
                fun ~token:(x1746 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1748 : Ojs.t) ->
                       union2_of_js SemanticTokens.t_of_js
                         SemanticTokensEdits.t_of_js x1748)
                    (Ojs.call (t_to_js x1747)
                       "provideDocumentSemanticTokensEdits"
                       [|(TextDocument.t_to_js x1744);(Ojs.string_to_js x1745);(
                         CancellationToken.t_to_js x1746)|])
      end
    module DocumentRangeSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1752 : Ojs.t) -> x1752
        and t_to_js : t -> Ojs.t = fun (x1751 : Ojs.t) -> x1751
        let (provide_document_range_semantic_tokens :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                token:CancellationToken.t ->
                  SemanticTokens.t ProviderResult.t)
          =
          fun (x1756 : t) ->
            fun ~document:(x1753 : TextDocument.t) ->
              fun ~range:(x1754 : Range.t) ->
                fun ~token:(x1755 : CancellationToken.t) ->
                  ProviderResult.t_of_js SemanticTokens.t_of_js
                    (Ojs.call (t_to_js x1756)
                       "provideDocumentRangeSemanticTokens"
                       [|(TextDocument.t_to_js x1753);(Range.t_to_js x1754);(
                         CancellationToken.t_to_js x1755)|])
      end
    module FormattingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1759 : Ojs.t) -> x1759
        and t_to_js : t -> Ojs.t = fun (x1758 : Ojs.t) -> x1758
        let (tab_size : t -> int) =
          fun (x1760 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1760) "tabSize")
        let (set_tab_size : t -> int -> unit) =
          fun (x1761 : t) ->
            fun (x1762 : int) ->
              Ojs.set_prop_ascii (t_to_js x1761) "tabSize"
                (Ojs.int_to_js x1762)
        let (insert_spaces : t -> bool) =
          fun (x1763 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1763) "insertSpaces")
        let (set_insert_spaces : t -> bool -> unit) =
          fun (x1764 : t) ->
            fun (x1765 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1764) "insertSpaces"
                (Ojs.bool_to_js x1765)
        let (get : t -> string -> bool or_string or_number) =
          fun (x1766 : t) ->
            fun (x1767 : string) ->
              or_number_of_js
                (fun (x1768 : Ojs.t) -> or_string_of_js Ojs.bool_of_js x1768)
                (Ojs.get_prop (t_to_js x1766) (Ojs.string_to_js x1767))
        let (set : t -> string -> bool or_string or_number -> unit) =
          fun (x1770 : t) ->
            fun (x1771 : string) ->
              fun (x1772 : bool or_string or_number) ->
                Ojs.set_prop (t_to_js x1770) (Ojs.string_to_js x1771)
                  (or_number_to_js
                     (fun (x1773 : bool or_string) ->
                        or_string_to_js Ojs.bool_to_js x1773) x1772)
      end
    module DocumentFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1776 : Ojs.t) -> x1776
        and t_to_js : t -> Ojs.t = fun (x1775 : Ojs.t) -> x1775
        let (provide_document_formatting_edits :
          t ->
            document:TextDocument.t ->
              options:FormattingOptions.t ->
                token:CancellationToken.t -> TextEdit.t list ProviderResult.t)
          =
          fun (x1780 : t) ->
            fun ~document:(x1777 : TextDocument.t) ->
              fun ~options:(x1778 : FormattingOptions.t) ->
                fun ~token:(x1779 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1781 : Ojs.t) ->
                       Ojs.list_of_js TextEdit.t_of_js x1781)
                    (Ojs.call (t_to_js x1780)
                       "provideDocumentFormattingEdits"
                       [|(TextDocument.t_to_js x1777);(FormattingOptions.t_to_js
                                                         x1778);(CancellationToken.t_to_js
                                                                   x1779)|])
      end
    module DocumentRangeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1784 : Ojs.t) -> x1784
        and t_to_js : t -> Ojs.t = fun (x1783 : Ojs.t) -> x1783
        let (provide_document_range_formatting_edits :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                options:FormattingOptions.t ->
                  token:CancellationToken.t ->
                    TextEdit.t list ProviderResult.t)
          =
          fun (x1789 : t) ->
            fun ~document:(x1785 : TextDocument.t) ->
              fun ~range:(x1786 : Range.t) ->
                fun ~options:(x1787 : FormattingOptions.t) ->
                  fun ~token:(x1788 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1790 : Ojs.t) ->
                         Ojs.list_of_js TextEdit.t_of_js x1790)
                      (Ojs.call (t_to_js x1789)
                         "provideDocumentRangeFormattingEdits"
                         [|(TextDocument.t_to_js x1785);(Range.t_to_js x1786);(
                           FormattingOptions.t_to_js x1787);(CancellationToken.t_to_js
                                                               x1788)|])
      end
    module OnTypeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1793 : Ojs.t) -> x1793
        and t_to_js : t -> Ojs.t = fun (x1792 : Ojs.t) -> x1792
        let (provide_on_type_formatting_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                ch:string ->
                  options:FormattingOptions.t ->
                    token:CancellationToken.t ->
                      TextEdit.t list ProviderResult.t)
          =
          fun (x1799 : t) ->
            fun ~document:(x1794 : TextDocument.t) ->
              fun ~position:(x1795 : Position.t) ->
                fun ~ch:(x1796 : string) ->
                  fun ~options:(x1797 : FormattingOptions.t) ->
                    fun ~token:(x1798 : CancellationToken.t) ->
                      ProviderResult.t_of_js
                        (fun (x1800 : Ojs.t) ->
                           Ojs.list_of_js TextEdit.t_of_js x1800)
                        (Ojs.call (t_to_js x1799)
                           "provideOnTypeFormattingEdits"
                           [|(TextDocument.t_to_js x1794);(Position.t_to_js
                                                             x1795);(
                             Ojs.string_to_js x1796);(FormattingOptions.t_to_js
                                                        x1797);(CancellationToken.t_to_js
                                                                  x1798)|])
      end
    module ParameterInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1803 : Ojs.t) -> x1803
        and t_to_js : t -> Ojs.t = fun (x1802 : Ojs.t) -> x1802
        let (label : t -> (int * int) or_string) =
          fun (x1804 : t) ->
            or_string_of_js
              (fun (x1805 : Ojs.t) ->
                 let x1806 = x1805 in
                 ((Ojs.int_of_js (Ojs.array_get x1806 0)),
                   (Ojs.int_of_js (Ojs.array_get x1806 1))))
              (Ojs.get_prop_ascii (t_to_js x1804) "label")
        let (set_label : t -> (int * int) or_string -> unit) =
          fun (x1807 : t) ->
            fun (x1808 : (int * int) or_string) ->
              Ojs.set_prop_ascii (t_to_js x1807) "label"
                (or_string_to_js
                   (fun (x1809 : (int * int)) ->
                      let (x1810, x1811) = x1809 in
                      let x1812 = Ojs.array_make 2 in
                      Ojs.array_set x1812 0 (Ojs.int_to_js x1810);
                      Ojs.array_set x1812 1 (Ojs.int_to_js x1811);
                      x1812) x1808)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1813 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1813) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1815 : t) ->
            fun (x1816 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1815) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1816)
        let (create :
          label:(int * int) or_string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1818 : (int * int) or_string) ->
            fun ?documentation:(x1819 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ParameterInformation")
                     (let x1820 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1820 "push"
                           [|(or_string_to_js
                                (fun (x1823 : (int * int)) ->
                                   let (x1824, x1825) = x1823 in
                                   let x1826 = Ojs.array_make 2 in
                                   Ojs.array_set x1826 0
                                     (Ojs.int_to_js x1824);
                                   Ojs.array_set x1826 1
                                     (Ojs.int_to_js x1825);
                                   x1826) x1818)|]);
                      (match x1819 with
                       | Some x1821 ->
                           ignore
                             (Ojs.call x1820 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1821)|])
                       | None -> ());
                      x1820))
      end
    module SignatureInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1828 : Ojs.t) -> x1828
        and t_to_js : t -> Ojs.t = fun (x1827 : Ojs.t) -> x1827
        let (label : t -> string) =
          fun (x1829 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1829) "label")
        let (set_label : t -> string -> unit) =
          fun (x1830 : t) ->
            fun (x1831 : string) ->
              Ojs.set_prop_ascii (t_to_js x1830) "label"
                (Ojs.string_to_js x1831)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1832 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1832) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1834 : t) ->
            fun (x1835 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1834) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1835)
        let (parameters : t -> ParameterInformation.t list) =
          fun (x1837 : t) ->
            Ojs.list_of_js ParameterInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1837) "parameters")
        let (set_parameters : t -> ParameterInformation.t list -> unit) =
          fun (x1839 : t) ->
            fun (x1840 : ParameterInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1839) "parameters"
                (Ojs.list_to_js ParameterInformation.t_to_js x1840)
        let (active_parameter : t -> int) =
          fun (x1842 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1842) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1843 : t) ->
            fun (x1844 : int) ->
              Ojs.set_prop_ascii (t_to_js x1843) "activeParameter"
                (Ojs.int_to_js x1844)
        let (create :
          label:string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1845 : string) ->
            fun ?documentation:(x1846 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SignatureInformation")
                     (let x1847 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1847 "push" [|(Ojs.string_to_js x1845)|]);
                      (match x1846 with
                       | Some x1848 ->
                           ignore
                             (Ojs.call x1847 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1848)|])
                       | None -> ());
                      x1847))
      end
    module SignatureHelp =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1851 : Ojs.t) -> x1851
        and t_to_js : t -> Ojs.t = fun (x1850 : Ojs.t) -> x1850
        let (signatures : t -> SignatureInformation.t list) =
          fun (x1852 : t) ->
            Ojs.list_of_js SignatureInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1852) "signatures")
        let (set_signatures : t -> SignatureInformation.t list -> unit) =
          fun (x1854 : t) ->
            fun (x1855 : SignatureInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1854) "signatures"
                (Ojs.list_to_js SignatureInformation.t_to_js x1855)
        let (active_signature : t -> int) =
          fun (x1857 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1857) "activeSignature")
        let (set_active_signature : t -> int -> unit) =
          fun (x1858 : t) ->
            fun (x1859 : int) ->
              Ojs.set_prop_ascii (t_to_js x1858) "activeSignature"
                (Ojs.int_to_js x1859)
        let (active_parameter : t -> int) =
          fun (x1860 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1860) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1861 : t) ->
            fun (x1862 : int) ->
              Ojs.set_prop_ascii (t_to_js x1861) "activeParameter"
                (Ojs.int_to_js x1862)
      end
    module SignatureHelpTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `ContentChange ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1864 : Ojs.t) ->
            let x1865 = x1864 in
            match Ojs.int_of_js x1865 with
            | 2 -> `TriggerCharacter
            | 3 -> `ContentChange
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1863 : [ `TriggerCharacter  | `ContentChange ]) ->
            match x1863 with
            | `TriggerCharacter -> Ojs.int_to_js 2
            | `ContentChange -> Ojs.int_to_js 3
      end
    module SignatureHelpContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1867 : Ojs.t) -> x1867
        and t_to_js : t -> Ojs.t = fun (x1866 : Ojs.t) -> x1866
        let (trigger_kind : t -> SignatureHelpTriggerKind.t) =
          fun (x1868 : t) ->
            SignatureHelpTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1868) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1869 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1869) "triggerCharacter")
        let (is_retrigger : t -> bool) =
          fun (x1870 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1870) "isRetrigger")
        let (active_signature_help : t -> SignatureHelp.t) =
          fun (x1871 : t) ->
            SignatureHelp.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1871) "activeSignatureHelp")
      end
    module SignatureHelpProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1873 : Ojs.t) -> x1873
        and t_to_js : t -> Ojs.t = fun (x1872 : Ojs.t) -> x1872
        let (provide_signature_help :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:SignatureHelpContext.t ->
                    SignatureHelp.t ProviderResult.t)
          =
          fun (x1878 : t) ->
            fun ~document:(x1874 : TextDocument.t) ->
              fun ~position:(x1875 : Position.t) ->
                fun ~token:(x1876 : CancellationToken.t) ->
                  fun ~context:(x1877 : SignatureHelpContext.t) ->
                    ProviderResult.t_of_js SignatureHelp.t_of_js
                      (Ojs.call (t_to_js x1878) "provideSignatureHelp"
                         [|(TextDocument.t_to_js x1874);(Position.t_to_js
                                                           x1875);(CancellationToken.t_to_js
                                                                    x1876);(
                           SignatureHelpContext.t_to_js x1877)|])
      end
    module SignatureHelpProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1881 : Ojs.t) -> x1881
        and t_to_js : t -> Ojs.t = fun (x1880 : Ojs.t) -> x1880
        let (trigger_characters : t -> string list) =
          fun (x1882 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1882) "triggerCharacters")
        let (retrigger_characters : t -> string list) =
          fun (x1884 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1884) "retriggerCharacters")
      end
    module CompletionItemKind =
      struct
        type t =
          [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
          | `Class  | `Interface  | `Module  | `Property  | `Unit  | 
            `Value 
          | `Enum  | `Keyword  | `Snippet  | `Color  | `Reference  | 
            `File 
          | `Folder  | `EnumMember  | `Constant  | `Struct  | `Event 
          | `Operator  | `TypeParameter  | `User  | `Issue ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1887 : Ojs.t) ->
            let x1888 = x1887 in
            match Ojs.int_of_js x1888 with
            | 1 -> `Method
            | 2 -> `Function
            | 3 -> `Constructor
            | 4 -> `Field
            | 5 -> `Variable
            | 6 -> `Class
            | 7 -> `Interface
            | 8 -> `Module
            | 9 -> `Property
            | 10 -> `Unit
            | 11 -> `Value
            | 12 -> `Enum
            | 13 -> `Keyword
            | 14 -> `Snippet
            | 15 -> `Color
            | 17 -> `Reference
            | 16 -> `File
            | 18 -> `Folder
            | 19 -> `EnumMember
            | 20 -> `Constant
            | 21 -> `Struct
            | 22 -> `Event
            | 23 -> `Operator
            | 24 -> `TypeParameter
            | 25 -> `User
            | 26 -> `Issue
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1886 :
              [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
              | `Class  | `Interface  | `Module  | `Property  | `Unit 
              | `Value  | `Enum  | `Keyword  | `Snippet  | `Color 
              | `Reference  | `File  | `Folder  | `EnumMember  | `Constant 
              | `Struct  | `Event  | `Operator  | `TypeParameter  | `User 
              | `Issue ])
            ->
            match x1886 with
            | `Method -> Ojs.int_to_js 1
            | `Function -> Ojs.int_to_js 2
            | `Constructor -> Ojs.int_to_js 3
            | `Field -> Ojs.int_to_js 4
            | `Variable -> Ojs.int_to_js 5
            | `Class -> Ojs.int_to_js 6
            | `Interface -> Ojs.int_to_js 7
            | `Module -> Ojs.int_to_js 8
            | `Property -> Ojs.int_to_js 9
            | `Unit -> Ojs.int_to_js 10
            | `Value -> Ojs.int_to_js 11
            | `Enum -> Ojs.int_to_js 12
            | `Keyword -> Ojs.int_to_js 13
            | `Snippet -> Ojs.int_to_js 14
            | `Color -> Ojs.int_to_js 15
            | `Reference -> Ojs.int_to_js 17
            | `File -> Ojs.int_to_js 16
            | `Folder -> Ojs.int_to_js 18
            | `EnumMember -> Ojs.int_to_js 19
            | `Constant -> Ojs.int_to_js 20
            | `Struct -> Ojs.int_to_js 21
            | `Event -> Ojs.int_to_js 22
            | `Operator -> Ojs.int_to_js 23
            | `TypeParameter -> Ojs.int_to_js 24
            | `User -> Ojs.int_to_js 25
            | `Issue -> Ojs.int_to_js 26
      end
    module CompletionItemTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1890 : Ojs.t) -> x1890
        and t_to_js : t -> Ojs.t = fun (x1889 : Ojs.t) -> x1889
      end
    module CompletionItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1892 : Ojs.t) -> x1892
        and t_to_js : t -> Ojs.t = fun (x1891 : Ojs.t) -> x1891
        let (label : t -> string) =
          fun (x1893 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1893) "label")
        let (set_label : t -> string -> unit) =
          fun (x1894 : t) ->
            fun (x1895 : string) ->
              Ojs.set_prop_ascii (t_to_js x1894) "label"
                (Ojs.string_to_js x1895)
        let (kind : t -> CompletionItemKind.t) =
          fun (x1896 : t) ->
            CompletionItemKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1896) "kind")
        let (set_kind : t -> CompletionItemKind.t -> unit) =
          fun (x1897 : t) ->
            fun (x1898 : CompletionItemKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1897) "kind"
                (CompletionItemKind.t_to_js x1898)
        let (tags : t -> CompletionItemTag.t list) =
          fun (x1899 : t) ->
            Ojs.list_of_js CompletionItemTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1899) "tags")
        let (set_tags : t -> CompletionItemTag.t list -> unit) =
          fun (x1901 : t) ->
            fun (x1902 : CompletionItemTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1901) "tags"
                (Ojs.list_to_js CompletionItemTag.t_to_js x1902)
        let (detail : t -> string) =
          fun (x1904 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1904) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1905 : t) ->
            fun (x1906 : string) ->
              Ojs.set_prop_ascii (t_to_js x1905) "detail"
                (Ojs.string_to_js x1906)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1907 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1907) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1909 : t) ->
            fun (x1910 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1909) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1910)
        let (sort_text : t -> string) =
          fun (x1912 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1912) "sortText")
        let (set_sort_text : t -> string -> unit) =
          fun (x1913 : t) ->
            fun (x1914 : string) ->
              Ojs.set_prop_ascii (t_to_js x1913) "sortText"
                (Ojs.string_to_js x1914)
        let (filter_text : t -> string) =
          fun (x1915 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1915) "filterText")
        let (set_filter_text : t -> string -> unit) =
          fun (x1916 : t) ->
            fun (x1917 : string) ->
              Ojs.set_prop_ascii (t_to_js x1916) "filterText"
                (Ojs.string_to_js x1917)
        let (preselect : t -> bool) =
          fun (x1918 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1918) "preselect")
        let (set_preselect : t -> bool -> unit) =
          fun (x1919 : t) ->
            fun (x1920 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1919) "preselect"
                (Ojs.bool_to_js x1920)
        let (insert_text : t -> SnippetString.t or_string) =
          fun (x1921 : t) ->
            or_string_of_js SnippetString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1921) "insertText")
        let (set_insert_text : t -> SnippetString.t or_string -> unit) =
          fun (x1923 : t) ->
            fun (x1924 : SnippetString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1923) "insertText"
                (or_string_to_js SnippetString.t_to_js x1924)
        module RangeWithEdit =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1927 : Ojs.t) -> x1927
            and t_to_js : t -> Ojs.t = fun (x1926 : Ojs.t) -> x1926
            let (inserting : t -> Range.t) =
              fun (x1928 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1928) "inserting")
            let (set_inserting : t -> Range.t -> unit) =
              fun (x1929 : t) ->
                fun (x1930 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1929) "inserting"
                    (Range.t_to_js x1930)
            let (replacing : t -> Range.t) =
              fun (x1931 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1931) "replacing")
            let (set_replacing : t -> Range.t -> unit) =
              fun (x1932 : t) ->
                fun (x1933 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1932) "replacing"
                    (Range.t_to_js x1933)
          end
        let (range : t -> (Range.t, RangeWithEdit.t) union2) =
          fun (x1934 : t) ->
            union2_of_js Range.t_of_js RangeWithEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1934) "range")
        let (set_range : t -> (Range.t, RangeWithEdit.t) union2 -> unit) =
          fun (x1937 : t) ->
            fun (x1938 : (Range.t, RangeWithEdit.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x1937) "range"
                (union2_to_js Range.t_to_js RangeWithEdit.t_to_js x1938)
        let (commit_characters : t -> string list) =
          fun (x1941 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1941) "commitCharacters")
        let (set_commit_characters : t -> string list -> unit) =
          fun (x1943 : t) ->
            fun (x1944 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1943) "commitCharacters"
                (Ojs.list_to_js Ojs.string_to_js x1944)
        let (keep_whitespace : t -> bool) =
          fun (x1946 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1946) "keepWhitespace")
        let (set_keep_whitespace : t -> bool -> unit) =
          fun (x1947 : t) ->
            fun (x1948 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1947) "keepWhitespace"
                (Ojs.bool_to_js x1948)
        let (text_edit : t -> TextEdit.t) =
          fun (x1949 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1949) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x1950 : t) ->
            fun (x1951 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1950) "textEdit"
                (TextEdit.t_to_js x1951)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x1952 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1952) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x1954 : t) ->
            fun (x1955 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x1954) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x1955)
        let (command : t -> Command.t) =
          fun (x1957 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1957) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1958 : t) ->
            fun (x1959 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1958) "command"
                (Command.t_to_js x1959)
        let (create :
          label:string -> ?kind:CompletionItemKind.t -> unit -> t) =
          fun ~label:(x1960 : string) ->
            fun ?kind:(x1961 : CompletionItemKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionItem")
                     (let x1962 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1962 "push" [|(Ojs.string_to_js x1960)|]);
                      (match x1961 with
                       | Some x1963 ->
                           ignore
                             (Ojs.call x1962 "push"
                                [|(CompletionItemKind.t_to_js x1963)|])
                       | None -> ());
                      x1962))
      end
    module CompletionList =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1965 : Ojs.t) -> x1965
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1964 : Ojs.t) -> x1964
        let (is_incomplete : 'T t -> bool) =
          fun (x1966 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1966) "isIncomplete")
        let (set_is_incomplete : 'T t -> bool -> unit) =
          fun (x1968 : 'T t) ->
            fun (x1969 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1968) "isIncomplete"
                (Ojs.bool_to_js x1969)
        let (items : 'T t -> 'T list) =
          fun (x1971 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1971) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x1974 : 'T t) ->
            fun (x1975 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1974) "items"
                (Ojs.list_to_js Obj.magic x1975)
        let (create : ?items:'T list -> ?is_incomplete:bool -> unit -> 'T t)
          =
          fun ?items:(x1978 : 'T list option) ->
            fun ?is_incomplete:(x1979 : bool option) ->
              fun () ->
                t_of_js Obj.magic
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionList")
                     (let x1980 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1978 with
                       | Some x1982 ->
                           ignore
                             (Ojs.call x1980 "push"
                                [|(Ojs.list_to_js Obj.magic x1982)|])
                       | None -> ());
                      (match x1979 with
                       | Some x1981 ->
                           ignore
                             (Ojs.call x1980 "push"
                                [|(Ojs.bool_to_js x1981)|])
                       | None -> ());
                      x1980))
      end
    module CompletionTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `TriggerForIncompleteCompletions ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1986 : Ojs.t) ->
            let x1987 = x1986 in
            match Ojs.int_of_js x1987 with
            | 1 -> `TriggerCharacter
            | 2 -> `TriggerForIncompleteCompletions
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1985 :
              [ `TriggerCharacter  | `TriggerForIncompleteCompletions ])
            ->
            match x1985 with
            | `TriggerCharacter -> Ojs.int_to_js 1
            | `TriggerForIncompleteCompletions -> Ojs.int_to_js 2
      end
    module CompletionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1989 : Ojs.t) -> x1989
        and t_to_js : t -> Ojs.t = fun (x1988 : Ojs.t) -> x1988
        let (trigger_kind : t -> CompletionTriggerKind.t) =
          fun (x1990 : t) ->
            CompletionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1990) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1991 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1991) "triggerCharacter")
      end
    module CompletionItemProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1993 : Ojs.t) -> x1993
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1992 : Ojs.t) -> x1992
        let (provide_completion_items :
          'T t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:CompletionContext.t ->
                    ('T CompletionList.t, 'T) or_array ProviderResult.t)
          =
          fun (x1998 : 'T t) ->
            fun ~document:(x1994 : TextDocument.t) ->
              fun ~position:(x1995 : Position.t) ->
                fun ~token:(x1996 : CancellationToken.t) ->
                  fun ~context:(x1997 : CompletionContext.t) ->
                    ProviderResult.t_of_js
                      (fun (x2000 : Ojs.t) ->
                         or_array_of_js
                           (fun (x2001 : Ojs.t) ->
                              CompletionList.t_of_js Obj.magic x2001)
                           Obj.magic x2000)
                      (Ojs.call (t_to_js Obj.magic x1998)
                         "provideCompletionItems"
                         [|(TextDocument.t_to_js x1994);(Position.t_to_js
                                                           x1995);(CancellationToken.t_to_js
                                                                    x1996);(
                           CompletionContext.t_to_js x1997)|])
        let (resolve_completion_item :
          'T t -> item:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x2006 : 'T t) ->
            fun ~item:(x2004 : 'T) ->
              fun ~token:(x2005 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x2006) "resolveCompletionItem"
                     [|(Obj.magic x2004);(CancellationToken.t_to_js x2005)|])
      end
    module DocumentLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2010 : Ojs.t) -> x2010
        and t_to_js : t -> Ojs.t = fun (x2009 : Ojs.t) -> x2009
        let (range : t -> Range.t) =
          fun (x2011 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2011) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2012 : t) ->
            fun (x2013 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2012) "range"
                (Range.t_to_js x2013)
        let (target : t -> Uri.t) =
          fun (x2014 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2014) "target")
        let (set_target : t -> Uri.t -> unit) =
          fun (x2015 : t) ->
            fun (x2016 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2015) "target" (Uri.t_to_js x2016)
        let (tooltip : t -> string) =
          fun (x2017 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2017) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2018 : t) ->
            fun (x2019 : string) ->
              Ojs.set_prop_ascii (t_to_js x2018) "tooltip"
                (Ojs.string_to_js x2019)
        let (create : range:Range.t -> ?target:Uri.t -> unit -> t) =
          fun ~range:(x2020 : Range.t) ->
            fun ?target:(x2021 : Uri.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentLink")
                     (let x2022 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2022 "push" [|(Range.t_to_js x2020)|]);
                      (match x2021 with
                       | Some x2023 ->
                           ignore
                             (Ojs.call x2022 "push" [|(Uri.t_to_js x2023)|])
                       | None -> ());
                      x2022))
      end
    module DocumentLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2025 : Ojs.t) -> x2025
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2024 : Ojs.t) -> x2024
        let (provide_document_links :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x2028 : 'T t) ->
            fun ~document:(x2026 : TextDocument.t) ->
              fun ~token:(x2027 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2030 : Ojs.t) -> Ojs.list_of_js Obj.magic x2030)
                  (Ojs.call (t_to_js Obj.magic x2028) "provideDocumentLinks"
                     [|(TextDocument.t_to_js x2026);(CancellationToken.t_to_js
                                                       x2027)|])
        let (resolve_document_link :
          'T t -> link:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x2034 : 'T t) ->
            fun ~link:(x2032 : 'T) ->
              fun ~token:(x2033 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x2034) "resolveDocumentLink"
                     [|(Obj.magic x2032);(CancellationToken.t_to_js x2033)|])
      end
    module Color =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2038 : Ojs.t) -> x2038
        and t_to_js : t -> Ojs.t = fun (x2037 : Ojs.t) -> x2037
        let (red : t -> int) =
          fun (x2039 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2039) "red")
        let (green : t -> int) =
          fun (x2040 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2040) "green")
        let (blue : t -> int) =
          fun (x2041 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2041) "blue")
        let (alpha : t -> int) =
          fun (x2042 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2042) "alpha")
        let (create : red:int -> green:int -> blue:int -> alpha:int -> t) =
          fun ~red:(x2043 : int) ->
            fun ~green:(x2044 : int) ->
              fun ~blue:(x2045 : int) ->
                fun ~alpha:(x2046 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Color")
                       [|(Ojs.int_to_js x2043);(Ojs.int_to_js x2044);(
                         Ojs.int_to_js x2045);(Ojs.int_to_js x2046)|])
      end
    module ColorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2048 : Ojs.t) -> x2048
        and t_to_js : t -> Ojs.t = fun (x2047 : Ojs.t) -> x2047
        let (range : t -> Range.t) =
          fun (x2049 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2049) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2050 : t) ->
            fun (x2051 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2050) "range"
                (Range.t_to_js x2051)
        let (color : t -> Color.t) =
          fun (x2052 : t) ->
            Color.t_of_js (Ojs.get_prop_ascii (t_to_js x2052) "color")
        let (set_color : t -> Color.t -> unit) =
          fun (x2053 : t) ->
            fun (x2054 : Color.t) ->
              Ojs.set_prop_ascii (t_to_js x2053) "color"
                (Color.t_to_js x2054)
        let (create : range:Range.t -> color:Color.t -> t) =
          fun ~range:(x2055 : Range.t) ->
            fun ~color:(x2056 : Color.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "ColorInformation")
                   [|(Range.t_to_js x2055);(Color.t_to_js x2056)|])
      end
    module ColorPresentation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2058 : Ojs.t) -> x2058
        and t_to_js : t -> Ojs.t = fun (x2057 : Ojs.t) -> x2057
        let (label : t -> string) =
          fun (x2059 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2059) "label")
        let (set_label : t -> string -> unit) =
          fun (x2060 : t) ->
            fun (x2061 : string) ->
              Ojs.set_prop_ascii (t_to_js x2060) "label"
                (Ojs.string_to_js x2061)
        let (text_edit : t -> TextEdit.t) =
          fun (x2062 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x2062) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x2063 : t) ->
            fun (x2064 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x2063) "textEdit"
                (TextEdit.t_to_js x2064)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x2065 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2065) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x2067 : t) ->
            fun (x2068 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x2067) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x2068)
        let (create : label:string -> t) =
          fun ~label:(x2070 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "ColorPresentation") [|(Ojs.string_to_js x2070)|])
      end
    module DocumentColorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2072 : Ojs.t) -> x2072
        and t_to_js : t -> Ojs.t = fun (x2071 : Ojs.t) -> x2071
        let (provide_document_colors :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                ColorInformation.t list ProviderResult.t)
          =
          fun (x2075 : t) ->
            fun ~document:(x2073 : TextDocument.t) ->
              fun ~token:(x2074 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2076 : Ojs.t) ->
                     Ojs.list_of_js ColorInformation.t_of_js x2076)
                  (Ojs.call (t_to_js x2075) "provideDocumentColors"
                     [|(TextDocument.t_to_js x2073);(CancellationToken.t_to_js
                                                       x2074)|])
        module Context =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2079 : Ojs.t) -> x2079
            and t_to_js : t -> Ojs.t = fun (x2078 : Ojs.t) -> x2078
            let (document : t -> TextDocument.t) =
              fun (x2080 : t) ->
                TextDocument.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x2080) "document")
            let (set_document : t -> TextDocument.t -> unit) =
              fun (x2081 : t) ->
                fun (x2082 : TextDocument.t) ->
                  Ojs.set_prop_ascii (t_to_js x2081) "document"
                    (TextDocument.t_to_js x2082)
            let (range : t -> Range.t) =
              fun (x2083 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2083) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x2084 : t) ->
                fun (x2085 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x2084) "range"
                    (Range.t_to_js x2085)
          end
        let (provide_color_presentations :
          t ->
            color:Color.t ->
              context:Context.t ->
                token:CancellationToken.t ->
                  ColorPresentation.t list ProviderResult.t)
          =
          fun (x2089 : t) ->
            fun ~color:(x2086 : Color.t) ->
              fun ~context:(x2087 : Context.t) ->
                fun ~token:(x2088 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2090 : Ojs.t) ->
                       Ojs.list_of_js ColorPresentation.t_of_js x2090)
                    (Ojs.call (t_to_js x2089) "provideColorPresentations"
                       [|(Color.t_to_js x2086);(Context.t_to_js x2087);(
                         CancellationToken.t_to_js x2088)|])
      end
    module FoldingRangeKind =
      struct
        type t = [ `Imports  | `Region ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2093 : Ojs.t) ->
            let x2094 = x2093 in
            match Ojs.int_of_js x2094 with
            | 2 -> `Imports
            | 3 -> `Region
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2092 : [ `Imports  | `Region ]) ->
            match x2092 with
            | `Imports -> Ojs.int_to_js 2
            | `Region -> Ojs.int_to_js 3
      end
    module FoldingRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2096 : Ojs.t) -> x2096
        and t_to_js : t -> Ojs.t = fun (x2095 : Ojs.t) -> x2095
        let (start : t -> int) =
          fun (x2097 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2097) "start")
        let (set_start : t -> int -> unit) =
          fun (x2098 : t) ->
            fun (x2099 : int) ->
              Ojs.set_prop_ascii (t_to_js x2098) "start"
                (Ojs.int_to_js x2099)
        let (end_ : t -> int) =
          fun (x2100 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2100) "end")
        let (set_end : t -> int -> unit) =
          fun (x2101 : t) ->
            fun (x2102 : int) ->
              Ojs.set_prop_ascii (t_to_js x2101) "end" (Ojs.int_to_js x2102)
        let (kind : t -> FoldingRangeKind.t) =
          fun (x2103 : t) ->
            FoldingRangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2103) "kind")
        let (set_kind : t -> FoldingRangeKind.t -> unit) =
          fun (x2104 : t) ->
            fun (x2105 : FoldingRangeKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2104) "kind"
                (FoldingRangeKind.t_to_js x2105)
        let (create :
          start:int -> end_:int -> ?kind:FoldingRangeKind.t -> unit -> t) =
          fun ~start:(x2106 : int) ->
            fun ~end_:(x2107 : int) ->
              fun ?kind:(x2108 : FoldingRangeKind.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FoldingRange")
                       (let x2109 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2109 "push" [|(Ojs.int_to_js x2106)|]);
                        ignore
                          (Ojs.call x2109 "push" [|(Ojs.int_to_js x2107)|]);
                        (match x2108 with
                         | Some x2110 ->
                             ignore
                               (Ojs.call x2109 "push"
                                  [|(FoldingRangeKind.t_to_js x2110)|])
                         | None -> ());
                        x2109))
      end
    module FoldingContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2112 : Ojs.t) -> x2112
        and t_to_js : t -> Ojs.t = fun (x2111 : Ojs.t) -> x2111
      end
    module FoldingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2114 : Ojs.t) -> x2114
        and t_to_js : t -> Ojs.t = fun (x2113 : Ojs.t) -> x2113
        let (on_did_change_folding_ranges : t -> unit Event.t) =
          fun (x2115 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x2115) "onDidChangeFoldingRanges")
        let (set_on_did_change_folding_ranges : t -> unit Event.t -> unit) =
          fun (x2117 : t) ->
            fun (x2118 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2117) "onDidChangeFoldingRanges"
                (Event.t_to_js Ojs.unit_to_js x2118)
        let (provide_folding_ranges :
          t ->
            document:TextDocument.t ->
              context:FoldingContext.t ->
                token:CancellationToken.t ->
                  FoldingRange.t list ProviderResult.t)
          =
          fun (x2123 : t) ->
            fun ~document:(x2120 : TextDocument.t) ->
              fun ~context:(x2121 : FoldingContext.t) ->
                fun ~token:(x2122 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2124 : Ojs.t) ->
                       Ojs.list_of_js FoldingRange.t_of_js x2124)
                    (Ojs.call (t_to_js x2123) "provideFoldingRanges"
                       [|(TextDocument.t_to_js x2120);(FoldingContext.t_to_js
                                                         x2121);(CancellationToken.t_to_js
                                                                   x2122)|])
      end
    module SelectionRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2127 : Ojs.t) -> x2127
        and t_to_js : t -> Ojs.t = fun (x2126 : Ojs.t) -> x2126
        let (range : t -> Range.t) =
          fun (x2128 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2128) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2129 : t) ->
            fun (x2130 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2129) "range"
                (Range.t_to_js x2130)
        let (parent : t -> t) =
          fun (x2131 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x2131) "parent")
        let (set_parent : t -> t -> unit) =
          fun (x2132 : t) ->
            fun (x2133 : t) ->
              Ojs.set_prop_ascii (t_to_js x2132) "parent" (t_to_js x2133)
        let (create : range:Range.t -> ?parent:t -> unit -> t) =
          fun ~range:(x2134 : Range.t) ->
            fun ?parent:(x2135 : t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SelectionRange")
                     (let x2136 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2136 "push" [|(Range.t_to_js x2134)|]);
                      (match x2135 with
                       | Some x2137 ->
                           ignore (Ojs.call x2136 "push" [|(t_to_js x2137)|])
                       | None -> ());
                      x2136))
      end
    module SelectionRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2139 : Ojs.t) -> x2139
        and t_to_js : t -> Ojs.t = fun (x2138 : Ojs.t) -> x2138
        let (provide_selection_ranges :
          t ->
            document:TextDocument.t ->
              positions:Position.t list ->
                token:CancellationToken.t ->
                  SelectionRange.t list ProviderResult.t)
          =
          fun (x2144 : t) ->
            fun ~document:(x2140 : TextDocument.t) ->
              fun ~positions:(x2141 : Position.t list) ->
                fun ~token:(x2143 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2145 : Ojs.t) ->
                       Ojs.list_of_js SelectionRange.t_of_js x2145)
                    (Ojs.call (t_to_js x2144) "provideSelectionRanges"
                       [|(TextDocument.t_to_js x2140);(Ojs.list_to_js
                                                         Position.t_to_js
                                                         x2141);(CancellationToken.t_to_js
                                                                   x2143)|])
      end
    module CallHierarchyItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2148 : Ojs.t) -> x2148
        and t_to_js : t -> Ojs.t = fun (x2147 : Ojs.t) -> x2147
        let (name : t -> string) =
          fun (x2149 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2149) "name")
        let (set_name : t -> string -> unit) =
          fun (x2150 : t) ->
            fun (x2151 : string) ->
              Ojs.set_prop_ascii (t_to_js x2150) "name"
                (Ojs.string_to_js x2151)
        let (kind : t -> SymbolKind.t) =
          fun (x2152 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x2152) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x2153 : t) ->
            fun (x2154 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2153) "kind"
                (SymbolKind.t_to_js x2154)
        let (tags : t -> SymbolTag.t list) =
          fun (x2155 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2155) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x2157 : t) ->
            fun (x2158 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x2157) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x2158)
        let (detail : t -> string) =
          fun (x2160 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2160) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x2161 : t) ->
            fun (x2162 : string) ->
              Ojs.set_prop_ascii (t_to_js x2161) "detail"
                (Ojs.string_to_js x2162)
        let (uri : t -> Uri.t) =
          fun (x2163 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2163) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x2164 : t) ->
            fun (x2165 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2164) "uri" (Uri.t_to_js x2165)
        let (range : t -> Range.t) =
          fun (x2166 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2166) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2167 : t) ->
            fun (x2168 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2167) "range"
                (Range.t_to_js x2168)
        let (selection_range : t -> Range.t) =
          fun (x2169 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2169) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x2170 : t) ->
            fun (x2171 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2170) "selectionRange"
                (Range.t_to_js x2171)
        let (create :
          kind:SymbolKind.t ->
            name:string ->
              detail:string ->
                uri:Uri.t -> range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~kind:(x2172 : SymbolKind.t) ->
            fun ~name:(x2173 : string) ->
              fun ~detail:(x2174 : string) ->
                fun ~uri:(x2175 : Uri.t) ->
                  fun ~range:(x2176 : Range.t) ->
                    fun ~selection_range:(x2177 : Range.t) ->
                      t_of_js
                        (Ojs.new_obj
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "CallHierarchyItem")
                           [|(SymbolKind.t_to_js x2172);(Ojs.string_to_js
                                                           x2173);(Ojs.string_to_js
                                                                    x2174);(
                             Uri.t_to_js x2175);(Range.t_to_js x2176);(
                             Range.t_to_js x2177)|])
      end
    module CallHierarchyIncomingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2179 : Ojs.t) -> x2179
        and t_to_js : t -> Ojs.t = fun (x2178 : Ojs.t) -> x2178
        let (from : t -> CallHierarchyItem.t) =
          fun (x2180 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2180) "from")
        let (set_from : t -> CallHierarchyItem.t -> unit) =
          fun (x2181 : t) ->
            fun (x2182 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2181) "from"
                (CallHierarchyItem.t_to_js x2182)
        let (from_ranges : t -> Range.t list) =
          fun (x2183 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2183) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2185 : t) ->
            fun (x2186 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2185) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2186)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2188 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2189 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyIncomingCall")
                   [|(CallHierarchyItem.t_to_js x2188);(Ojs.list_to_js
                                                          Range.t_to_js x2189)|])
      end
    module CallHierarchyOutgoingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2192 : Ojs.t) -> x2192
        and t_to_js : t -> Ojs.t = fun (x2191 : Ojs.t) -> x2191
        let (to_ : t -> CallHierarchyItem.t) =
          fun (x2193 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2193) "to")
        let (set_to : t -> CallHierarchyItem.t -> unit) =
          fun (x2194 : t) ->
            fun (x2195 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2194) "to"
                (CallHierarchyItem.t_to_js x2195)
        let (from_ranges : t -> Range.t list) =
          fun (x2196 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2196) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2198 : t) ->
            fun (x2199 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2198) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2199)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2201 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2202 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyOutgoingCall")
                   [|(CallHierarchyItem.t_to_js x2201);(Ojs.list_to_js
                                                          Range.t_to_js x2202)|])
      end
    module CallHierarchyProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2205 : Ojs.t) -> x2205
        and t_to_js : t -> Ojs.t = fun (x2204 : Ojs.t) -> x2204
        let (prepare_call_hierarchy :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (CallHierarchyItem.t, CallHierarchyItem.t) or_array
                    ProviderResult.t)
          =
          fun (x2209 : t) ->
            fun ~document:(x2206 : TextDocument.t) ->
              fun ~position:(x2207 : Position.t) ->
                fun ~token:(x2208 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2210 : Ojs.t) ->
                       or_array_of_js CallHierarchyItem.t_of_js
                         CallHierarchyItem.t_of_js x2210)
                    (Ojs.call (t_to_js x2209) "prepareCallHierarchy"
                       [|(TextDocument.t_to_js x2206);(Position.t_to_js x2207);(
                         CancellationToken.t_to_js x2208)|])
        let (provide_call_hierarchy_incoming_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyIncomingCall.t list ProviderResult.t)
          =
          fun (x2215 : t) ->
            fun ~item:(x2213 : CallHierarchyItem.t) ->
              fun ~token:(x2214 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2216 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyIncomingCall.t_of_js x2216)
                  (Ojs.call (t_to_js x2215)
                     "provideCallHierarchyIncomingCalls"
                     [|(CallHierarchyItem.t_to_js x2213);(CancellationToken.t_to_js
                                                            x2214)|])
        let (provide_call_hierarchy_outgoing_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyOutgoingCall.t list ProviderResult.t)
          =
          fun (x2220 : t) ->
            fun ~item:(x2218 : CallHierarchyItem.t) ->
              fun ~token:(x2219 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2221 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyOutgoingCall.t_of_js x2221)
                  (Ojs.call (t_to_js x2220)
                     "provideCallHierarchyOutgoingCalls"
                     [|(CallHierarchyItem.t_to_js x2218);(CancellationToken.t_to_js
                                                            x2219)|])
      end
    module LinkedEditingRanges =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2224 : Ojs.t) -> x2224
        and t_to_js : t -> Ojs.t = fun (x2223 : Ojs.t) -> x2223
        let (create :
          ranges:Range.t list -> ?word_pattern:regexp -> unit -> t) =
          fun ~ranges:(x2225 : Range.t list) ->
            fun ?word_pattern:(x2226 : regexp option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "LinkedEditingRanges")
                     (let x2227 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2227 "push"
                           [|(Ojs.list_to_js Range.t_to_js x2225)|]);
                      (match x2226 with
                       | Some x2228 ->
                           ignore
                             (Ojs.call x2227 "push" [|(regexp_to_js x2228)|])
                       | None -> ());
                      x2227))
        let (ranges : t -> Range.t list) =
          fun (x2230 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2230) "ranges")
        let (word_pattern : t -> regexp) =
          fun (x2232 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2232) "wordPattern")
      end
    module LinkedEditingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2234 : Ojs.t) -> x2234
        and t_to_js : t -> Ojs.t = fun (x2233 : Ojs.t) -> x2233
        let (provide_linked_editing_ranges :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  LinkedEditingRanges.t ProviderResult.t)
          =
          fun (x2238 : t) ->
            fun ~document:(x2235 : TextDocument.t) ->
              fun ~position:(x2236 : Position.t) ->
                fun ~token:(x2237 : CancellationToken.t) ->
                  ProviderResult.t_of_js LinkedEditingRanges.t_of_js
                    (Ojs.call (t_to_js x2238) "provideLinkedEditingRanges"
                       [|(TextDocument.t_to_js x2235);(Position.t_to_js x2236);(
                         CancellationToken.t_to_js x2237)|])
      end
    module CharacterPair =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2241 : Ojs.t) -> x2241
        and t_to_js : t -> Ojs.t = fun (x2240 : Ojs.t) -> x2240
      end
    module CommentRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2243 : Ojs.t) -> x2243
        and t_to_js : t -> Ojs.t = fun (x2242 : Ojs.t) -> x2242
        let (line_comment : t -> string) =
          fun (x2244 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2244) "lineComment")
        let (set_line_comment : t -> string -> unit) =
          fun (x2245 : t) ->
            fun (x2246 : string) ->
              Ojs.set_prop_ascii (t_to_js x2245) "lineComment"
                (Ojs.string_to_js x2246)
        let (block_comment : t -> CharacterPair.t) =
          fun (x2247 : t) ->
            CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2247) "blockComment")
        let (set_block_comment : t -> CharacterPair.t -> unit) =
          fun (x2248 : t) ->
            fun (x2249 : CharacterPair.t) ->
              Ojs.set_prop_ascii (t_to_js x2248) "blockComment"
                (CharacterPair.t_to_js x2249)
      end
    module IndentationRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2251 : Ojs.t) -> x2251
        and t_to_js : t -> Ojs.t = fun (x2250 : Ojs.t) -> x2250
        let (decrease_indent_pattern : t -> regexp) =
          fun (x2252 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2252) "decreaseIndentPattern")
        let (set_decrease_indent_pattern : t -> regexp -> unit) =
          fun (x2253 : t) ->
            fun (x2254 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2253) "decreaseIndentPattern"
                (regexp_to_js x2254)
        let (increase_indent_pattern : t -> regexp) =
          fun (x2255 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2255) "increaseIndentPattern")
        let (set_increase_indent_pattern : t -> regexp -> unit) =
          fun (x2256 : t) ->
            fun (x2257 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2256) "increaseIndentPattern"
                (regexp_to_js x2257)
        let (indent_next_line_pattern : t -> regexp) =
          fun (x2258 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2258) "indentNextLinePattern")
        let (set_indent_next_line_pattern : t -> regexp -> unit) =
          fun (x2259 : t) ->
            fun (x2260 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2259) "indentNextLinePattern"
                (regexp_to_js x2260)
        let (un_indented_line_pattern : t -> regexp) =
          fun (x2261 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2261) "unIndentedLinePattern")
        let (set_un_indented_line_pattern : t -> regexp -> unit) =
          fun (x2262 : t) ->
            fun (x2263 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2262) "unIndentedLinePattern"
                (regexp_to_js x2263)
      end
    module IndentAction =
      struct
        type t = [ `Indent  | `IndentOutdent  | `Outdent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2265 : Ojs.t) ->
            let x2266 = x2265 in
            match Ojs.int_of_js x2266 with
            | 1 -> `Indent
            | 2 -> `IndentOutdent
            | 3 -> `Outdent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2264 : [ `Indent  | `IndentOutdent  | `Outdent ]) ->
            match x2264 with
            | `Indent -> Ojs.int_to_js 1
            | `IndentOutdent -> Ojs.int_to_js 2
            | `Outdent -> Ojs.int_to_js 3
      end
    module EnterAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2268 : Ojs.t) -> x2268
        and t_to_js : t -> Ojs.t = fun (x2267 : Ojs.t) -> x2267
        let (indent_action : t -> IndentAction.t) =
          fun (x2269 : t) ->
            IndentAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2269) "indentAction")
        let (set_indent_action : t -> IndentAction.t -> unit) =
          fun (x2270 : t) ->
            fun (x2271 : IndentAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2270) "indentAction"
                (IndentAction.t_to_js x2271)
        let (append_text : t -> string) =
          fun (x2272 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2272) "appendText")
        let (set_append_text : t -> string -> unit) =
          fun (x2273 : t) ->
            fun (x2274 : string) ->
              Ojs.set_prop_ascii (t_to_js x2273) "appendText"
                (Ojs.string_to_js x2274)
        let (remove_text : t -> int) =
          fun (x2275 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2275) "removeText")
        let (set_remove_text : t -> int -> unit) =
          fun (x2276 : t) ->
            fun (x2277 : int) ->
              Ojs.set_prop_ascii (t_to_js x2276) "removeText"
                (Ojs.int_to_js x2277)
      end
    module OnEnterRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2279 : Ojs.t) -> x2279
        and t_to_js : t -> Ojs.t = fun (x2278 : Ojs.t) -> x2278
        let (before_text : t -> regexp) =
          fun (x2280 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2280) "beforeText")
        let (set_before_text : t -> regexp -> unit) =
          fun (x2281 : t) ->
            fun (x2282 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2281) "beforeText"
                (regexp_to_js x2282)
        let (after_text : t -> regexp) =
          fun (x2283 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2283) "afterText")
        let (set_after_text : t -> regexp -> unit) =
          fun (x2284 : t) ->
            fun (x2285 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2284) "afterText"
                (regexp_to_js x2285)
        let (previous_line_text : t -> regexp) =
          fun (x2286 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2286) "previousLineText")
        let (set_previous_line_text : t -> regexp -> unit) =
          fun (x2287 : t) ->
            fun (x2288 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2287) "previousLineText"
                (regexp_to_js x2288)
        let (action : t -> EnterAction.t) =
          fun (x2289 : t) ->
            EnterAction.t_of_js (Ojs.get_prop_ascii (t_to_js x2289) "action")
        let (set_action : t -> EnterAction.t -> unit) =
          fun (x2290 : t) ->
            fun (x2291 : EnterAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2290) "action"
                (EnterAction.t_to_js x2291)
      end
    module AutoClosingPairs =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2293 : Ojs.t) -> x2293
        and t_to_js : t -> Ojs.t = fun (x2292 : Ojs.t) -> x2292
        let (open_ : t -> string) =
          fun (x2294 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2294) "open")
        let (set_open : t -> string -> unit) =
          fun (x2295 : t) ->
            fun (x2296 : string) ->
              Ojs.set_prop_ascii (t_to_js x2295) "open"
                (Ojs.string_to_js x2296)
        let (close : t -> string) =
          fun (x2297 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2297) "close")
        let (set_close : t -> string -> unit) =
          fun (x2298 : t) ->
            fun (x2299 : string) ->
              Ojs.set_prop_ascii (t_to_js x2298) "close"
                (Ojs.string_to_js x2299)
        let (not_in : t -> string list) =
          fun (x2300 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2300) "notIn")
        let (set_not_in : t -> string list -> unit) =
          fun (x2302 : t) ->
            fun (x2303 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2302) "notIn"
                (Ojs.list_to_js Ojs.string_to_js x2303)
      end
    module CharacterPairSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2306 : Ojs.t) -> x2306
        and t_to_js : t -> Ojs.t = fun (x2305 : Ojs.t) -> x2305
        let (auto_closing_pairs : t -> AutoClosingPairs.t list) =
          fun (x2307 : t) ->
            Ojs.list_of_js AutoClosingPairs.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2307) "autoClosingPairs")
        let (set_auto_closing_pairs : t -> AutoClosingPairs.t list -> unit) =
          fun (x2309 : t) ->
            fun (x2310 : AutoClosingPairs.t list) ->
              Ojs.set_prop_ascii (t_to_js x2309) "autoClosingPairs"
                (Ojs.list_to_js AutoClosingPairs.t_to_js x2310)
      end
    module DocComment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2313 : Ojs.t) -> x2313
        and t_to_js : t -> Ojs.t = fun (x2312 : Ojs.t) -> x2312
        let (scope : t -> string) =
          fun (x2314 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2314) "scope")
        let (set_scope : t -> string -> unit) =
          fun (x2315 : t) ->
            fun (x2316 : string) ->
              Ojs.set_prop_ascii (t_to_js x2315) "scope"
                (Ojs.string_to_js x2316)
        let (open_ : t -> string) =
          fun (x2317 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2317) "open")
        let (set_open : t -> string -> unit) =
          fun (x2318 : t) ->
            fun (x2319 : string) ->
              Ojs.set_prop_ascii (t_to_js x2318) "open"
                (Ojs.string_to_js x2319)
        let (line_start : t -> string) =
          fun (x2320 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2320) "lineStart")
        let (set_line_start : t -> string -> unit) =
          fun (x2321 : t) ->
            fun (x2322 : string) ->
              Ojs.set_prop_ascii (t_to_js x2321) "lineStart"
                (Ojs.string_to_js x2322)
        let (close : t -> string) =
          fun (x2323 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2323) "close")
        let (set_close : t -> string -> unit) =
          fun (x2324 : t) ->
            fun (x2325 : string) ->
              Ojs.set_prop_ascii (t_to_js x2324) "close"
                (Ojs.string_to_js x2325)
      end
    module ElectricCharacterSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2327 : Ojs.t) -> x2327
        and t_to_js : t -> Ojs.t = fun (x2326 : Ojs.t) -> x2326
        let (brackets : t -> any) =
          fun (x2328 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x2328) "brackets")
        let (set_brackets : t -> any -> unit) =
          fun (x2329 : t) ->
            fun (x2330 : any) ->
              Ojs.set_prop_ascii (t_to_js x2329) "brackets" (any_to_js x2330)
        let (doc_comment : t -> DocComment.t) =
          fun (x2331 : t) ->
            DocComment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2331) "docComment")
        let (set_doc_comment : t -> DocComment.t -> unit) =
          fun (x2332 : t) ->
            fun (x2333 : DocComment.t) ->
              Ojs.set_prop_ascii (t_to_js x2332) "docComment"
                (DocComment.t_to_js x2333)
      end
    module LanguageConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2335 : Ojs.t) -> x2335
        and t_to_js : t -> Ojs.t = fun (x2334 : Ojs.t) -> x2334
        let (comments : t -> CommentRule.t) =
          fun (x2336 : t) ->
            CommentRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2336) "comments")
        let (set_comments : t -> CommentRule.t -> unit) =
          fun (x2337 : t) ->
            fun (x2338 : CommentRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2337) "comments"
                (CommentRule.t_to_js x2338)
        let (brackets : t -> CharacterPair.t list) =
          fun (x2339 : t) ->
            Ojs.list_of_js CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2339) "brackets")
        let (set_brackets : t -> CharacterPair.t list -> unit) =
          fun (x2341 : t) ->
            fun (x2342 : CharacterPair.t list) ->
              Ojs.set_prop_ascii (t_to_js x2341) "brackets"
                (Ojs.list_to_js CharacterPair.t_to_js x2342)
        let (word_pattern : t -> regexp) =
          fun (x2344 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2344) "wordPattern")
        let (set_word_pattern : t -> regexp -> unit) =
          fun (x2345 : t) ->
            fun (x2346 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2345) "wordPattern"
                (regexp_to_js x2346)
        let (indentation_rules : t -> IndentationRule.t) =
          fun (x2347 : t) ->
            IndentationRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2347) "indentationRules")
        let (set_indentation_rules : t -> IndentationRule.t -> unit) =
          fun (x2348 : t) ->
            fun (x2349 : IndentationRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2348) "indentationRules"
                (IndentationRule.t_to_js x2349)
        let (on_enter_rules : t -> OnEnterRule.t list) =
          fun (x2350 : t) ->
            Ojs.list_of_js OnEnterRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2350) "onEnterRules")
        let (set_on_enter_rules : t -> OnEnterRule.t list -> unit) =
          fun (x2352 : t) ->
            fun (x2353 : OnEnterRule.t list) ->
              Ojs.set_prop_ascii (t_to_js x2352) "onEnterRules"
                (Ojs.list_to_js OnEnterRule.t_to_js x2353)
        let (electric_character_support : t -> ElectricCharacterSupport.t) =
          fun (x2355 : t) ->
            ElectricCharacterSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2355)
                 "__electricCharacterSupport")
        let (set_electric_character_support :
          t -> ElectricCharacterSupport.t -> unit) =
          fun (x2356 : t) ->
            fun (x2357 : ElectricCharacterSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2356) "__electricCharacterSupport"
                (ElectricCharacterSupport.t_to_js x2357)
        let (character_pair_support : t -> CharacterPairSupport.t) =
          fun (x2358 : t) ->
            CharacterPairSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2358) "__characterPairSupport")
        let (set_character_pair_support :
          t -> CharacterPairSupport.t -> unit) =
          fun (x2359 : t) ->
            fun (x2360 : CharacterPairSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2359) "__characterPairSupport"
                (CharacterPairSupport.t_to_js x2360)
      end
    module ConfigurationTarget =
      struct
        type t = [ `Workspace  | `WorkspaceFolder ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2362 : Ojs.t) ->
            let x2363 = x2362 in
            match Ojs.int_of_js x2363 with
            | 2 -> `Workspace
            | 3 -> `WorkspaceFolder
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2361 : [ `Workspace  | `WorkspaceFolder ]) ->
            match x2361 with
            | `Workspace -> Ojs.int_to_js 2
            | `WorkspaceFolder -> Ojs.int_to_js 3
      end
    module InspectionResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2365 : Ojs.t) -> x2365
        and t_to_js : t -> Ojs.t = fun (x2364 : Ojs.t) -> x2364
        let (key : t -> string) =
          fun (x2366 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2366) "key")
        let (set_key : t -> string -> unit) =
          fun (x2367 : t) ->
            fun (x2368 : string) ->
              Ojs.set_prop_ascii (t_to_js x2367) "key"
                (Ojs.string_to_js x2368)
        let (default : t -> 'T) =
          fun (x2369 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2369) "defaultValue")
        let (set_default : t -> 'T -> unit) =
          fun (x2370 : t) ->
            fun (x2371 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2370) "defaultValue"
                (Obj.magic x2371)
        let (global_value : t -> 'T) =
          fun (x2372 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2372) "globalValue")
        let (set_global_value : t -> 'T -> unit) =
          fun (x2373 : t) ->
            fun (x2374 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2373) "globalValue"
                (Obj.magic x2374)
        let (workspace_value : t -> 'T) =
          fun (x2375 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2375) "workspaceValue")
        let (set_workspace_value : t -> 'T -> unit) =
          fun (x2376 : t) ->
            fun (x2377 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2376) "workspaceValue"
                (Obj.magic x2377)
        let (workspace_folder_value : t -> 'T) =
          fun (x2378 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2378) "workspaceFolderValue")
        let (set_workspace_folder_value : t -> 'T -> unit) =
          fun (x2379 : t) ->
            fun (x2380 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2379) "workspaceFolderValue"
                (Obj.magic x2380)
        let (default_language_value : t -> 'T) =
          fun (x2381 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2381) "defaultLanguageValue")
        let (set_default_language_value : t -> 'T -> unit) =
          fun (x2382 : t) ->
            fun (x2383 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2382) "defaultLanguageValue"
                (Obj.magic x2383)
        let (global_language_value : t -> 'T) =
          fun (x2384 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2384) "globalLanguageValue")
        let (set_global_language_value : t -> 'T -> unit) =
          fun (x2385 : t) ->
            fun (x2386 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2385) "globalLanguageValue"
                (Obj.magic x2386)
        let (workspace_language_value : t -> 'T) =
          fun (x2387 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2387) "workspaceLanguageValue")
        let (set_workspace_language_value : t -> 'T -> unit) =
          fun (x2388 : t) ->
            fun (x2389 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2388) "workspaceLanguageValue"
                (Obj.magic x2389)
        let (workspace_folder_language_value : t -> 'T) =
          fun (x2390 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2390)
                 "workspaceFolderLanguageValue")
        let (set_workspace_folder_language_value : t -> 'T -> unit) =
          fun (x2391 : t) ->
            fun (x2392 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2391)
                "workspaceFolderLanguageValue" (Obj.magic x2392)
        let (language_ids : t -> string list) =
          fun (x2393 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2393) "languageIds")
        let (set_language_ids : t -> string list -> unit) =
          fun (x2395 : t) ->
            fun (x2396 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2395) "languageIds"
                (Ojs.list_to_js Ojs.string_to_js x2396)
      end
    module WorkspaceConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2399 : Ojs.t) -> x2399
        and t_to_js : t -> Ojs.t = fun (x2398 : Ojs.t) -> x2398
        let (get : t -> string -> 'T or_undefined) =
          fun (x2401 : t) ->
            fun (x2400 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2401) "get" [|(Ojs.string_to_js x2400)|])
        let (get' : t -> string -> default:'T -> 'T) =
          fun (x2405 : t) ->
            fun (x2403 : string) ->
              fun ~default:(x2404 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2405) "get"
                     [|(Ojs.string_to_js x2403);(Obj.magic x2404)|])
        let (has : t -> string -> bool) =
          fun (x2407 : t) ->
            fun (x2406 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2407) "has" [|(Ojs.string_to_js x2406)|])
        let (inspect : t -> string -> InspectionResult.t or_undefined) =
          fun (x2409 : t) ->
            fun (x2408 : string) ->
              or_undefined_of_js InspectionResult.t_of_js
                (Ojs.call (t_to_js x2409) "inspect"
                   [|(Ojs.string_to_js x2408)|])
        let (update :
          t ->
            string ->
              any ->
                ?configuration_target:ConfigurationTarget.t or_boolean ->
                  ?override_in_language:bool -> unit -> unit Promise.t)
          =
          fun (x2419 : t) ->
            fun (x2411 : string) ->
              fun (x2412 : any) ->
                fun
                  ?configuration_target:(x2413 :
                                          ConfigurationTarget.t or_boolean
                                            option)
                  ->
                  fun ?override_in_language:(x2414 : bool option) ->
                    fun () ->
                      Promise.t_of_js Ojs.unit_of_js
                        (let x2420 = t_to_js x2419 in
                         Ojs.call (Ojs.get_prop_ascii x2420 "update") "apply"
                           [|x2420;((let x2415 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x2415 "push"
                                          [|(Ojs.string_to_js x2411)|]);
                                     ignore
                                       (Ojs.call x2415 "push"
                                          [|(any_to_js x2412)|]);
                                     (match x2413 with
                                      | Some x2417 ->
                                          ignore
                                            (Ojs.call x2415 "push"
                                               [|(or_boolean_to_js
                                                    ConfigurationTarget.t_to_js
                                                    x2417)|])
                                      | None -> ());
                                     (match x2414 with
                                      | Some x2416 ->
                                          ignore
                                            (Ojs.call x2415 "push"
                                               [|(Ojs.bool_to_js x2416)|])
                                      | None -> ());
                                     x2415))|])
        let (get : t -> string -> any) =
          fun (x2422 : t) ->
            fun (x2423 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2422) (Ojs.string_to_js x2423))
      end
    module LocationLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2425 : Ojs.t) -> x2425
        and t_to_js : t -> Ojs.t = fun (x2424 : Ojs.t) -> x2424
        let (origin_selection_range : t -> Range.t) =
          fun (x2426 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2426) "originSelectionRange")
        let (set_origin_selection_range : t -> Range.t -> unit) =
          fun (x2427 : t) ->
            fun (x2428 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2427) "originSelectionRange"
                (Range.t_to_js x2428)
        let (target_uri : t -> Uri.t) =
          fun (x2429 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2429) "targetUri")
        let (set_target_uri : t -> Uri.t -> unit) =
          fun (x2430 : t) ->
            fun (x2431 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2430) "targetUri"
                (Uri.t_to_js x2431)
        let (target_range : t -> Range.t) =
          fun (x2432 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2432) "targetRange")
        let (set_target_range : t -> Range.t -> unit) =
          fun (x2433 : t) ->
            fun (x2434 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2433) "targetRange"
                (Range.t_to_js x2434)
        let (target_selection_range : t -> Range.t) =
          fun (x2435 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2435) "targetSelectionRange")
        let (set_target_selection_range : t -> Range.t -> unit) =
          fun (x2436 : t) ->
            fun (x2437 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2436) "targetSelectionRange"
                (Range.t_to_js x2437)
      end
    module OutputChannel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2439 : Ojs.t) -> x2439
        and t_to_js : t -> Ojs.t = fun (x2438 : Ojs.t) -> x2438
        let (name : t -> string) =
          fun (x2440 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2440) "name")
        let (append : t -> value:string -> unit) =
          fun (x2442 : t) ->
            fun ~value:(x2441 : string) ->
              ignore
                (Ojs.call (t_to_js x2442) "append"
                   [|(Ojs.string_to_js x2441)|])
        let (append_line : t -> value:string -> unit) =
          fun (x2444 : t) ->
            fun ~value:(x2443 : string) ->
              ignore
                (Ojs.call (t_to_js x2444) "appendLine"
                   [|(Ojs.string_to_js x2443)|])
        let (clear : t -> unit) =
          fun (x2445 : t) -> ignore (Ojs.call (t_to_js x2445) "clear" [||])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2449 : t) ->
            fun ?preserve_focus:(x2446 : bool option) ->
              fun () ->
                ignore
                  (let x2450 = t_to_js x2449 in
                   Ojs.call (Ojs.get_prop_ascii x2450 "show") "apply"
                     [|x2450;((let x2447 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2446 with
                                | Some x2448 ->
                                    ignore
                                      (Ojs.call x2447 "push"
                                         [|(Ojs.bool_to_js x2448)|])
                                | None -> ());
                               x2447))|])
        let (show' :
          t -> ?column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x2456 : t) ->
            fun ?column:(x2451 : ViewColumn.t option) ->
              fun ?preserve_focus:(x2452 : bool option) ->
                fun () ->
                  ignore
                    (let x2457 = t_to_js x2456 in
                     Ojs.call (Ojs.get_prop_ascii x2457 "show") "apply"
                       [|x2457;((let x2453 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x2451 with
                                  | Some x2455 ->
                                      ignore
                                        (Ojs.call x2453 "push"
                                           [|(ViewColumn.t_to_js x2455)|])
                                  | None -> ());
                                 (match x2452 with
                                  | Some x2454 ->
                                      ignore
                                        (Ojs.call x2453 "push"
                                           [|(Ojs.bool_to_js x2454)|])
                                  | None -> ());
                                 x2453))|])
        let (hide : t -> unit) =
          fun (x2458 : t) -> ignore (Ojs.call (t_to_js x2458) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2459 : t) -> ignore (Ojs.call (t_to_js x2459) "dispose" [||])
      end
    module AccessibilityInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2461 : Ojs.t) -> x2461
        and t_to_js : t -> Ojs.t = fun (x2460 : Ojs.t) -> x2460
        let (label : t -> string) =
          fun (x2462 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2462) "label")
        let (set_label : t -> string -> unit) =
          fun (x2463 : t) ->
            fun (x2464 : string) ->
              Ojs.set_prop_ascii (t_to_js x2463) "label"
                (Ojs.string_to_js x2464)
        let (role : t -> string) =
          fun (x2465 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2465) "role")
        let (set_role : t -> string -> unit) =
          fun (x2466 : t) ->
            fun (x2467 : string) ->
              Ojs.set_prop_ascii (t_to_js x2466) "role"
                (Ojs.string_to_js x2467)
      end
    module StatusBarAlignment =
      struct
        type t = [ `Right ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2469 : Ojs.t) ->
            let x2470 = x2469 in
            match Ojs.int_of_js x2470 with | 2 -> `Right | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2468 : [ `Right ]) ->
            match x2468 with | `Right -> Ojs.int_to_js 2
      end
    module StatusBarItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2472 : Ojs.t) -> x2472
        and t_to_js : t -> Ojs.t = fun (x2471 : Ojs.t) -> x2471
        let (alignment : t -> StatusBarAlignment.t) =
          fun (x2473 : t) ->
            StatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2473) "alignment")
        let (priority : t -> int) =
          fun (x2474 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2474) "priority")
        let (text : t -> string) =
          fun (x2475 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2475) "text")
        let (set_text : t -> string -> unit) =
          fun (x2476 : t) ->
            fun (x2477 : string) ->
              Ojs.set_prop_ascii (t_to_js x2476) "text"
                (Ojs.string_to_js x2477)
        let (tooltip : t -> string or_undefined) =
          fun (x2478 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2478) "tooltip")
        let (set_tooltip : t -> string or_undefined -> unit) =
          fun (x2480 : t) ->
            fun (x2481 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2480) "tooltip"
                (or_undefined_to_js Ojs.string_to_js x2481)
        let (color : t -> ThemeColor.t or_string or_undefined) =
          fun (x2483 : t) ->
            or_undefined_of_js
              (fun (x2484 : Ojs.t) ->
                 or_string_of_js ThemeColor.t_of_js x2484)
              (Ojs.get_prop_ascii (t_to_js x2483) "color")
        let (set_color : t -> ThemeColor.t or_string or_undefined -> unit) =
          fun (x2486 : t) ->
            fun (x2487 : ThemeColor.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2486) "color"
                (or_undefined_to_js
                   (fun (x2488 : ThemeColor.t or_string) ->
                      or_string_to_js ThemeColor.t_to_js x2488) x2487)
        let (background_color : t -> ThemeColor.t or_undefined) =
          fun (x2490 : t) ->
            or_undefined_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2490) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_undefined -> unit) =
          fun (x2492 : t) ->
            fun (x2493 : ThemeColor.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2492) "backgroundColor"
                (or_undefined_to_js ThemeColor.t_to_js x2493)
        let (command : t -> Command.t or_string or_undefined) =
          fun (x2495 : t) ->
            or_undefined_of_js
              (fun (x2496 : Ojs.t) -> or_string_of_js Command.t_of_js x2496)
              (Ojs.get_prop_ascii (t_to_js x2495) "command")
        let (set_command : t -> Command.t or_string or_undefined -> unit) =
          fun (x2498 : t) ->
            fun (x2499 : Command.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2498) "command"
                (or_undefined_to_js
                   (fun (x2500 : Command.t or_string) ->
                      or_string_to_js Command.t_to_js x2500) x2499)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x2502 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2502) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x2503 : t) ->
            fun (x2504 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x2503) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x2504)
        let (show : t -> unit) =
          fun (x2505 : t) -> ignore (Ojs.call (t_to_js x2505) "show" [||])
        let (hide : t -> unit) =
          fun (x2506 : t) -> ignore (Ojs.call (t_to_js x2506) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2507 : t) -> ignore (Ojs.call (t_to_js x2507) "dispose" [||])
      end
    module Progress =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2509 : Ojs.t) -> x2509
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2508 : Ojs.t) -> x2508
        let (report : 'T t -> value:'T -> unit) =
          fun (x2511 : 'T t) ->
            fun ~value:(x2510 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x2511) "report"
                   [|(Obj.magic x2510)|])
      end
    module TerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2514 : Ojs.t) -> x2514
        and t_to_js : t -> Ojs.t = fun (x2513 : Ojs.t) -> x2513
        let (name : t -> string) =
          fun (x2515 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2515) "name")
        let (set_name : t -> string -> unit) =
          fun (x2516 : t) ->
            fun (x2517 : string) ->
              Ojs.set_prop_ascii (t_to_js x2516) "name"
                (Ojs.string_to_js x2517)
        let (shell_path : t -> string) =
          fun (x2518 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2518) "shellPath")
        let (set_shell_path : t -> string -> unit) =
          fun (x2519 : t) ->
            fun (x2520 : string) ->
              Ojs.set_prop_ascii (t_to_js x2519) "shellPath"
                (Ojs.string_to_js x2520)
        let (shell_args : t -> string list or_string) =
          fun (x2521 : t) ->
            or_string_of_js
              (fun (x2522 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x2522)
              (Ojs.get_prop_ascii (t_to_js x2521) "shellArgs")
        let (set_shell_args : t -> string list or_string -> unit) =
          fun (x2524 : t) ->
            fun (x2525 : string list or_string) ->
              Ojs.set_prop_ascii (t_to_js x2524) "shellArgs"
                (or_string_to_js
                   (fun (x2526 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x2526) x2525)
        let (cwd : t -> Uri.t or_string) =
          fun (x2528 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2528) "cwd")
        let (set_cwd : t -> Uri.t or_string -> unit) =
          fun (x2530 : t) ->
            fun (x2531 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2530) "cwd"
                (or_string_to_js Uri.t_to_js x2531)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2534 : Ojs.t) -> x2534
            and t_to_js : t -> Ojs.t = fun (x2533 : Ojs.t) -> x2533
            let (get : t -> string -> string or_null_or_undefined) =
              fun (x2535 : t) ->
                fun (x2536 : string) ->
                  or_null_or_undefined_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2535) (Ojs.string_to_js x2536))
            let (set : t -> string -> string or_null_or_undefined -> unit) =
              fun (x2538 : t) ->
                fun (x2539 : string) ->
                  fun (x2540 : string or_null_or_undefined) ->
                    Ojs.set_prop (t_to_js x2538) (Ojs.string_to_js x2539)
                      (or_null_or_undefined_to_js Ojs.string_to_js x2540)
          end
        let (env : t -> Env.t) =
          fun (x2542 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2542) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2543 : t) ->
            fun (x2544 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2543) "env" (Env.t_to_js x2544)
        let (strict_env : t -> bool) =
          fun (x2545 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2545) "strictEnv")
        let (set_strict_env : t -> bool -> unit) =
          fun (x2546 : t) ->
            fun (x2547 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2546) "strictEnv"
                (Ojs.bool_to_js x2547)
        let (hide_from_user : t -> bool) =
          fun (x2548 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2548) "hideFromUser")
        let (set_hide_from_user : t -> bool -> unit) =
          fun (x2549 : t) ->
            fun (x2550 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2549) "hideFromUser"
                (Ojs.bool_to_js x2550)
      end
    module TerminalDimensions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2552 : Ojs.t) -> x2552
        and t_to_js : t -> Ojs.t = fun (x2551 : Ojs.t) -> x2551
        let (columns : t -> int) =
          fun (x2553 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2553) "columns")
        let (rows : t -> int) =
          fun (x2554 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2554) "rows")
      end
    module TerminalExitStatus =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2556 : Ojs.t) -> x2556
        and t_to_js : t -> Ojs.t = fun (x2555 : Ojs.t) -> x2555
        let (code : t -> int or_undefined) =
          fun (x2557 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x2557) "code")
      end
    module Pseudoterminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2560 : Ojs.t) -> x2560
        and t_to_js : t -> Ojs.t = fun (x2559 : Ojs.t) -> x2559
        let (on_did_write : t -> string Event.t) =
          fun (x2561 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2561) "onDidWrite")
        let (set_on_did_write : t -> string Event.t -> unit) =
          fun (x2563 : t) ->
            fun (x2564 : string Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2563) "onDidWrite"
                (Event.t_to_js Ojs.string_to_js x2564)
        let (on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t) =
          fun (x2566 : t) ->
            Event.t_of_js
              (fun (x2567 : Ojs.t) ->
                 or_undefined_of_js TerminalDimensions.t_of_js x2567)
              (Ojs.get_prop_ascii (t_to_js x2566) "onDidOverrideDimensions")
        let (set_on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t -> unit) =
          fun (x2569 : t) ->
            fun (x2570 : TerminalDimensions.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2569) "onDidOverrideDimensions"
                (Event.t_to_js
                   (fun (x2571 : TerminalDimensions.t or_undefined) ->
                      or_undefined_to_js TerminalDimensions.t_to_js x2571)
                   x2570)
        let (on_did_close : t -> unit or_number Event.t) =
          fun (x2573 : t) ->
            Event.t_of_js
              (fun (x2574 : Ojs.t) -> or_number_of_js Ojs.unit_of_js x2574)
              (Ojs.get_prop_ascii (t_to_js x2573) "onDidClose")
        let (set_on_did_close : t -> unit or_number Event.t -> unit) =
          fun (x2576 : t) ->
            fun (x2577 : unit or_number Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2576) "onDidClose"
                (Event.t_to_js
                   (fun (x2578 : unit or_number) ->
                      or_number_to_js Ojs.unit_to_js x2578) x2577)
        let (open_ :
          t -> initial_dimensions:TerminalDimensions.t or_undefined -> unit)
          =
          fun (x2582 : t) ->
            fun
              ~initial_dimensions:(x2580 : TerminalDimensions.t or_undefined)
              ->
              ignore
                (Ojs.call (t_to_js x2582) "open"
                   [|(or_undefined_to_js TerminalDimensions.t_to_js x2580)|])
        let (close : t -> unit) =
          fun (x2583 : t) -> ignore (Ojs.call (t_to_js x2583) "close" [||])
        let (handle_input : t -> data:string -> unit) =
          fun (x2585 : t) ->
            fun ~data:(x2584 : string) ->
              ignore
                (Ojs.call (t_to_js x2585) "handleInput"
                   [|(Ojs.string_to_js x2584)|])
        let (set_dimensions : t -> dimensions:TerminalDimensions.t -> unit) =
          fun (x2587 : t) ->
            fun ~dimensions:(x2586 : TerminalDimensions.t) ->
              ignore
                (Ojs.call (t_to_js x2587) "setDimensions"
                   [|(TerminalDimensions.t_to_js x2586)|])
      end
    module ExtensionTerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2589 : Ojs.t) -> x2589
        and t_to_js : t -> Ojs.t = fun (x2588 : Ojs.t) -> x2588
        let (name : t -> string) =
          fun (x2590 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2590) "name")
        let (set_name : t -> string -> unit) =
          fun (x2591 : t) ->
            fun (x2592 : string) ->
              Ojs.set_prop_ascii (t_to_js x2591) "name"
                (Ojs.string_to_js x2592)
        let (pty : t -> Pseudoterminal.t) =
          fun (x2593 : t) ->
            Pseudoterminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2593) "pty")
        let (set_pty : t -> Pseudoterminal.t -> unit) =
          fun (x2594 : t) ->
            fun (x2595 : Pseudoterminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2594) "pty"
                (Pseudoterminal.t_to_js x2595)
      end
    module Terminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2597 : Ojs.t) -> x2597
        and t_to_js : t -> Ojs.t = fun (x2596 : Ojs.t) -> x2596
        let (name : t -> string) =
          fun (x2598 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2598) "name")
        let (process_id : t -> int or_undefined Promise.t) =
          fun (x2599 : t) ->
            Promise.t_of_js
              (fun (x2600 : Ojs.t) -> or_undefined_of_js Ojs.int_of_js x2600)
              (Ojs.get_prop_ascii (t_to_js x2599) "processId")
        let (creation_options :
          t ->
            (ExtensionTerminalOptions.t, TerminalOptions.t) union2 Readonly.t)
          =
          fun (x2602 : t) ->
            Readonly.t_of_js
              (fun (x2603 : Ojs.t) ->
                 union2_of_js ExtensionTerminalOptions.t_of_js
                   TerminalOptions.t_of_js x2603)
              (Ojs.get_prop_ascii (t_to_js x2602) "creationOptions")
        let (exit_status : t -> TerminalExitStatus.t or_undefined) =
          fun (x2606 : t) ->
            or_undefined_of_js TerminalExitStatus.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2606) "exitStatus")
        let (send_text :
          t -> text:string -> ?add_new_line:bool -> unit -> unit) =
          fun (x2612 : t) ->
            fun ~text:(x2608 : string) ->
              fun ?add_new_line:(x2609 : bool option) ->
                fun () ->
                  ignore
                    (let x2613 = t_to_js x2612 in
                     Ojs.call (Ojs.get_prop_ascii x2613 "sendText") "apply"
                       [|x2613;((let x2610 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2610 "push"
                                      [|(Ojs.string_to_js x2608)|]);
                                 (match x2609 with
                                  | Some x2611 ->
                                      ignore
                                        (Ojs.call x2610 "push"
                                           [|(Ojs.bool_to_js x2611)|])
                                  | None -> ());
                                 x2610))|])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2617 : t) ->
            fun ?preserve_focus:(x2614 : bool option) ->
              fun () ->
                ignore
                  (let x2618 = t_to_js x2617 in
                   Ojs.call (Ojs.get_prop_ascii x2618 "show") "apply"
                     [|x2618;((let x2615 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2614 with
                                | Some x2616 ->
                                    ignore
                                      (Ojs.call x2615 "push"
                                         [|(Ojs.bool_to_js x2616)|])
                                | None -> ());
                               x2615))|])
        let (hide : t -> unit) =
          fun (x2619 : t) -> ignore (Ojs.call (t_to_js x2619) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2620 : t) -> ignore (Ojs.call (t_to_js x2620) "dispose" [||])
      end
    module TerminalLinkContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2622 : Ojs.t) -> x2622
        and t_to_js : t -> Ojs.t = fun (x2621 : Ojs.t) -> x2621
        let (line : t -> string) =
          fun (x2623 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2623) "line")
        let (set_line : t -> string -> unit) =
          fun (x2624 : t) ->
            fun (x2625 : string) ->
              Ojs.set_prop_ascii (t_to_js x2624) "line"
                (Ojs.string_to_js x2625)
        let (terminal : t -> Terminal.t) =
          fun (x2626 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2626) "terminal")
        let (set_terminal : t -> Terminal.t -> unit) =
          fun (x2627 : t) ->
            fun (x2628 : Terminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2627) "terminal"
                (Terminal.t_to_js x2628)
      end
    module TerminalLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2630 : Ojs.t) -> x2630
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2629 : Ojs.t) -> x2629
        let (provide_terminal_links :
          'T t ->
            context:TerminalLinkContext.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x2633 : 'T t) ->
            fun ~context:(x2631 : TerminalLinkContext.t) ->
              fun ~token:(x2632 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2635 : Ojs.t) -> Ojs.list_of_js Obj.magic x2635)
                  (Ojs.call (t_to_js Obj.magic x2633) "provideTerminalLinks"
                     [|(TerminalLinkContext.t_to_js x2631);(CancellationToken.t_to_js
                                                              x2632)|])
        let (handle_terminal_link : 'T t -> link:'T -> unit ProviderResult.t)
          =
          fun (x2638 : 'T t) ->
            fun ~link:(x2637 : 'T) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js Obj.magic x2638) "handleTerminalLink"
                   [|(Obj.magic x2637)|])
      end
    module TerminalLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2642 : Ojs.t) -> x2642
        and t_to_js : t -> Ojs.t = fun (x2641 : Ojs.t) -> x2641
        let (start_index : t -> int) =
          fun (x2643 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2643) "startIndex")
        let (set_start_index : t -> int -> unit) =
          fun (x2644 : t) ->
            fun (x2645 : int) ->
              Ojs.set_prop_ascii (t_to_js x2644) "startIndex"
                (Ojs.int_to_js x2645)
        let (length : t -> int) =
          fun (x2646 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2646) "length")
        let (set_length : t -> int -> unit) =
          fun (x2647 : t) ->
            fun (x2648 : int) ->
              Ojs.set_prop_ascii (t_to_js x2647) "length"
                (Ojs.int_to_js x2648)
        let (tooltip : t -> string) =
          fun (x2649 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2649) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2650 : t) ->
            fun (x2651 : string) ->
              Ojs.set_prop_ascii (t_to_js x2650) "tooltip"
                (Ojs.string_to_js x2651)
      end
    module FileDecoration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2653 : Ojs.t) -> x2653
        and t_to_js : t -> Ojs.t = fun (x2652 : Ojs.t) -> x2652
        let (badge : t -> string) =
          fun (x2654 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2654) "badge")
        let (set_badge : t -> string -> unit) =
          fun (x2655 : t) ->
            fun (x2656 : string) ->
              Ojs.set_prop_ascii (t_to_js x2655) "badge"
                (Ojs.string_to_js x2656)
        let (tooltip : t -> string) =
          fun (x2657 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2657) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2658 : t) ->
            fun (x2659 : string) ->
              Ojs.set_prop_ascii (t_to_js x2658) "tooltip"
                (Ojs.string_to_js x2659)
        let (color : t -> ThemeColor.t) =
          fun (x2660 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x2660) "color")
        let (set_color : t -> ThemeColor.t -> unit) =
          fun (x2661 : t) ->
            fun (x2662 : ThemeColor.t) ->
              Ojs.set_prop_ascii (t_to_js x2661) "color"
                (ThemeColor.t_to_js x2662)
        let (propagate : t -> bool) =
          fun (x2663 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2663) "propagate")
        let (set_propagate : t -> bool -> unit) =
          fun (x2664 : t) ->
            fun (x2665 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2664) "propagate"
                (Ojs.bool_to_js x2665)
        let (create :
          ?badge:string ->
            ?tooltip:string -> ?color:ThemeColor.t -> unit -> t)
          =
          fun ?badge:(x2666 : string option) ->
            fun ?tooltip:(x2667 : string option) ->
              fun ?color:(x2668 : ThemeColor.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FileDecoration")
                       (let x2669 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x2666 with
                         | Some x2672 ->
                             ignore
                               (Ojs.call x2669 "push"
                                  [|(Ojs.string_to_js x2672)|])
                         | None -> ());
                        (match x2667 with
                         | Some x2671 ->
                             ignore
                               (Ojs.call x2669 "push"
                                  [|(Ojs.string_to_js x2671)|])
                         | None -> ());
                        (match x2668 with
                         | Some x2670 ->
                             ignore
                               (Ojs.call x2669 "push"
                                  [|(ThemeColor.t_to_js x2670)|])
                         | None -> ());
                        x2669))
      end
    module FileDecorationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2674 : Ojs.t) -> x2674
        and t_to_js : t -> Ojs.t = fun (x2673 : Ojs.t) -> x2673
        let (on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t) =
          fun (x2675 : t) ->
            Event.t_of_js
              (fun (x2676 : Ojs.t) ->
                 or_undefined_of_js
                   (fun (x2677 : Ojs.t) ->
                      or_array_of_js Uri.t_of_js Uri.t_of_js x2677) x2676)
              (Ojs.get_prop_ascii (t_to_js x2675)
                 "onDidChangeFileDecorations")
        let (set_on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t -> unit) =
          fun (x2680 : t) ->
            fun (x2681 : (Uri.t, Uri.t) or_array or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2680) "onDidChangeFileDecorations"
                (Event.t_to_js
                   (fun (x2682 : (Uri.t, Uri.t) or_array or_undefined) ->
                      or_undefined_to_js
                        (fun (x2683 : (Uri.t, Uri.t) or_array) ->
                           or_array_to_js Uri.t_to_js Uri.t_to_js x2683)
                        x2682) x2681)
        let (provide_file_decoration :
          t ->
            uri:Uri.t ->
              token:CancellationToken.t -> FileDecoration.t ProviderResult.t)
          =
          fun (x2688 : t) ->
            fun ~uri:(x2686 : Uri.t) ->
              fun ~token:(x2687 : CancellationToken.t) ->
                ProviderResult.t_of_js FileDecoration.t_of_js
                  (Ojs.call (t_to_js x2688) "provideFileDecoration"
                     [|(Uri.t_to_js x2686);(CancellationToken.t_to_js x2687)|])
      end
    module ExtensionKind =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2691 : Ojs.t) ->
            let x2692 = x2691 in
            match Ojs.int_of_js x2692 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2690 : [ `Workspace ]) ->
            match x2690 with | `Workspace -> Ojs.int_to_js 2
      end
    module Extension =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2694 : Ojs.t) -> x2694
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2693 : Ojs.t) -> x2693
        let (id : 'T t -> string) =
          fun (x2695 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2695) "id")
        let (extension_uri : 'T t -> Uri.t) =
          fun (x2697 : 'T t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2697) "extensionUri")
        let (extension_path : 'T t -> string) =
          fun (x2699 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2699) "extensionPath")
        let (is_active : 'T t -> bool) =
          fun (x2701 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2701) "isActive")
        let (package_json : 'T t -> any) =
          fun (x2703 : 'T t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2703) "packageJSON")
        let (extension_kind : 'T t -> ExtensionKind.t) =
          fun (x2705 : 'T t) ->
            ExtensionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2705) "extensionKind")
        let (set_extension_kind : 'T t -> ExtensionKind.t -> unit) =
          fun (x2707 : 'T t) ->
            fun (x2708 : ExtensionKind.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x2707) "extensionKind"
                (ExtensionKind.t_to_js x2708)
        let (exports : 'T t -> 'T) =
          fun (x2710 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2710) "exports")
        let (activate : 'T t -> 'T Promise.t) =
          fun (x2712 : 'T t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call (t_to_js Obj.magic x2712) "activate" [||])
      end
    module ExtensionMode =
      struct
        type t = [ `Development  | `Test ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2716 : Ojs.t) ->
            let x2717 = x2716 in
            match Ojs.int_of_js x2717 with
            | 2 -> `Development
            | 3 -> `Test
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2715 : [ `Development  | `Test ]) ->
            match x2715 with
            | `Development -> Ojs.int_to_js 2
            | `Test -> Ojs.int_to_js 3
      end
    module Memento =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2719 : Ojs.t) -> x2719
        and t_to_js : t -> Ojs.t = fun (x2718 : Ojs.t) -> x2718
        let (get : t -> key:string -> 'T or_undefined) =
          fun (x2721 : t) ->
            fun ~key:(x2720 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2721) "get" [|(Ojs.string_to_js x2720)|])
        let (get' : t -> key:string -> default:'T -> 'T) =
          fun (x2725 : t) ->
            fun ~key:(x2723 : string) ->
              fun ~default:(x2724 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2725) "get"
                     [|(Ojs.string_to_js x2723);(Obj.magic x2724)|])
        let (update : t -> key:string -> value:any -> unit Promise.t) =
          fun (x2728 : t) ->
            fun ~key:(x2726 : string) ->
              fun ~value:(x2727 : any) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2728) "update"
                     [|(Ojs.string_to_js x2726);(any_to_js x2727)|])
      end
    module SecretStorageChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2731 : Ojs.t) -> x2731
        and t_to_js : t -> Ojs.t = fun (x2730 : Ojs.t) -> x2730
        let (key : t -> string) =
          fun (x2732 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2732) "key")
      end
    module SecretStorage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2734 : Ojs.t) -> x2734
        and t_to_js : t -> Ojs.t = fun (x2733 : Ojs.t) -> x2733
        let (get : t -> key:string -> string or_undefined Promise.t) =
          fun (x2736 : t) ->
            fun ~key:(x2735 : string) ->
              Promise.t_of_js
                (fun (x2737 : Ojs.t) ->
                   or_undefined_of_js Ojs.string_of_js x2737)
                (Ojs.call (t_to_js x2736) "get" [|(Ojs.string_to_js x2735)|])
        let (store : t -> key:string -> value:string -> unit Promise.t) =
          fun (x2741 : t) ->
            fun ~key:(x2739 : string) ->
              fun ~value:(x2740 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2741) "store"
                     [|(Ojs.string_to_js x2739);(Ojs.string_to_js x2740)|])
        let (delete : t -> key:string -> unit Promise.t) =
          fun (x2744 : t) ->
            fun ~key:(x2743 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x2744) "delete"
                   [|(Ojs.string_to_js x2743)|])
        let (on_did_change : t -> SecretStorageChangeEvent.t Event.t) =
          fun (x2746 : t) ->
            Event.t_of_js SecretStorageChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2746) "onDidChange")
        let (set_on_did_change :
          t -> SecretStorageChangeEvent.t Event.t -> unit) =
          fun (x2748 : t) ->
            fun (x2749 : SecretStorageChangeEvent.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2748) "onDidChange"
                (Event.t_to_js SecretStorageChangeEvent.t_to_js x2749)
      end
    module EnvironmentVariableMutatorType =
      struct
        type t = [ `Append  | `Prepend ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2752 : Ojs.t) ->
            let x2753 = x2752 in
            match Ojs.int_of_js x2753 with
            | 2 -> `Append
            | 3 -> `Prepend
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2751 : [ `Append  | `Prepend ]) ->
            match x2751 with
            | `Append -> Ojs.int_to_js 2
            | `Prepend -> Ojs.int_to_js 3
      end
    module EnvironmentVariableMutator =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2755 : Ojs.t) -> x2755
        and t_to_js : t -> Ojs.t = fun (x2754 : Ojs.t) -> x2754
        let (type_ : t -> EnvironmentVariableMutatorType.t) =
          fun (x2756 : t) ->
            EnvironmentVariableMutatorType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2756) "type")
        let (value : t -> string) =
          fun (x2757 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2757) "value")
      end
    module EnvironmentVariableCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2759 : Ojs.t) -> x2759
        and t_to_js : t -> Ojs.t = fun (x2758 : Ojs.t) -> x2758
        let (persistent : t -> bool) =
          fun (x2760 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2760) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x2761 : t) ->
            fun (x2762 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2761) "persistent"
                (Ojs.bool_to_js x2762)
        let (replace : t -> variable:string -> value:string -> unit) =
          fun (x2765 : t) ->
            fun ~variable:(x2763 : string) ->
              fun ~value:(x2764 : string) ->
                ignore
                  (Ojs.call (t_to_js x2765) "replace"
                     [|(Ojs.string_to_js x2763);(Ojs.string_to_js x2764)|])
        let (append : t -> variable:string -> value:string -> unit) =
          fun (x2768 : t) ->
            fun ~variable:(x2766 : string) ->
              fun ~value:(x2767 : string) ->
                ignore
                  (Ojs.call (t_to_js x2768) "append"
                     [|(Ojs.string_to_js x2766);(Ojs.string_to_js x2767)|])
        let (prepend : t -> variable:string -> value:string -> unit) =
          fun (x2771 : t) ->
            fun ~variable:(x2769 : string) ->
              fun ~value:(x2770 : string) ->
                ignore
                  (Ojs.call (t_to_js x2771) "prepend"
                     [|(Ojs.string_to_js x2769);(Ojs.string_to_js x2770)|])
        let (get :
          t -> variable:string -> EnvironmentVariableMutator.t or_undefined)
          =
          fun (x2773 : t) ->
            fun ~variable:(x2772 : string) ->
              or_undefined_of_js EnvironmentVariableMutator.t_of_js
                (Ojs.call (t_to_js x2773) "get" [|(Ojs.string_to_js x2772)|])
        let (for_each :
          t ->
            callback:(variable:string ->
                        mutator:EnvironmentVariableMutator.t ->
                          collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x2782 : t) ->
            fun
              ~callback:(x2775 :
                          variable:string ->
                            mutator:EnvironmentVariableMutator.t ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x2776 : any option) ->
                fun () ->
                  ignore
                    (let x2783 = t_to_js x2782 in
                     Ojs.call (Ojs.get_prop_ascii x2783 "forEach") "apply"
                       [|x2783;((let x2777 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2777 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x2779 : Ojs.t) ->
                                              fun (x2780 : Ojs.t) ->
                                                fun (x2781 : Ojs.t) ->
                                                  any_to_js
                                                    (x2775
                                                       ~variable:(Ojs.string_of_js
                                                                    x2779)
                                                       ~mutator:(EnvironmentVariableMutator.t_of_js
                                                                   x2780)
                                                       ~collection:(t_of_js
                                                                    x2781))))|]);
                                 (match x2776 with
                                  | Some x2778 ->
                                      ignore
                                        (Ojs.call x2777 "push"
                                           [|(any_to_js x2778)|])
                                  | None -> ());
                                 x2777))|])
        let (delete : t -> variable:string -> unit) =
          fun (x2785 : t) ->
            fun ~variable:(x2784 : string) ->
              ignore
                (Ojs.call (t_to_js x2785) "delete"
                   [|(Ojs.string_to_js x2784)|])
        let (clear : t -> unit) =
          fun (x2786 : t) -> ignore (Ojs.call (t_to_js x2786) "clear" [||])
      end
    module ExtensionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2788 : Ojs.t) -> x2788
        and t_to_js : t -> Ojs.t = fun (x2787 : Ojs.t) -> x2787
        module Subscription =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2790 : Ojs.t) -> x2790
            and t_to_js : t -> Ojs.t = fun (x2789 : Ojs.t) -> x2789
            let (dispose : t -> any) =
              fun (x2791 : t) ->
                any_of_js (Ojs.call (t_to_js x2791) "dispose" [||])
          end
        module GlobalState =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2793 : Ojs.t) -> x2793
            and t_to_js : t -> Ojs.t = fun (x2792 : Ojs.t) -> x2792
            let (set_keys_for_sync : t -> keys:string list -> unit) =
              fun (x2796 : t) ->
                fun ~keys:(x2794 : string list) ->
                  ignore
                    (Ojs.call (t_to_js x2796) "setKeysForSync"
                       [|(Ojs.list_to_js Ojs.string_to_js x2794)|])
          end
        let (subscriptions : t -> Subscription.t list) =
          fun (x2797 : t) ->
            Ojs.list_of_js Subscription.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2797) "subscriptions")
        let (workspace_state : t -> Memento.t) =
          fun (x2799 : t) ->
            Memento.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2799) "workspaceState")
        let (global_state : t -> (Memento.t, GlobalState.t) intersection2) =
          fun (x2800 : t) ->
            intersection2_of_js Memento.t_of_js GlobalState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2800) "globalState")
        let (secrets : t -> SecretStorage.t) =
          fun (x2803 : t) ->
            SecretStorage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2803) "secrets")
        let (extension_uri : t -> Uri.t) =
          fun (x2804 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2804) "extensionUri")
        let (extension_path : t -> string) =
          fun (x2805 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2805) "extensionPath")
        let (environment_variable_collection :
          t -> EnvironmentVariableCollection.t) =
          fun (x2806 : t) ->
            EnvironmentVariableCollection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2806)
                 "environmentVariableCollection")
        let (as_absolute_path : t -> relative_path:string -> string) =
          fun (x2808 : t) ->
            fun ~relative_path:(x2807 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x2808) "asAbsolutePath"
                   [|(Ojs.string_to_js x2807)|])
        let (storage_uri : t -> Uri.t or_undefined) =
          fun (x2809 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2809) "storageUri")
        let (storage_path : t -> string or_undefined) =
          fun (x2811 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2811) "storagePath")
        let (global_storage_uri : t -> Uri.t) =
          fun (x2813 : t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2813) "globalStorageUri")
        let (global_storage_path : t -> string) =
          fun (x2814 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2814) "globalStoragePath")
        let (log_uri : t -> Uri.t) =
          fun (x2815 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2815) "logUri")
        let (log_path : t -> string) =
          fun (x2816 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2816) "logPath")
        let (extension_mode : t -> ExtensionMode.t) =
          fun (x2817 : t) ->
            ExtensionMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2817) "extensionMode")
        let (extension : t -> any Extension.t) =
          fun (x2818 : t) ->
            Extension.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x2818) "extension")
        let subscribe t disposable =
          let subscriptions = Ojs.get_prop_ascii (t_to_js t) "subscriptions" in
          let (_ : Ojs.t) =
            Ojs.call subscriptions "push" [|(Disposable.t_to_js disposable)|] in
          ()
      end
    module ColorThemeKind =
      struct
        type t = [ `Dark  | `HighContrast ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2823 : Ojs.t) ->
            let x2824 = x2823 in
            match Ojs.int_of_js x2824 with
            | 2 -> `Dark
            | 3 -> `HighContrast
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2822 : [ `Dark  | `HighContrast ]) ->
            match x2822 with
            | `Dark -> Ojs.int_to_js 2
            | `HighContrast -> Ojs.int_to_js 3
      end
    module ColorTheme =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2826 : Ojs.t) -> x2826
        and t_to_js : t -> Ojs.t = fun (x2825 : Ojs.t) -> x2825
        let (kind : t -> ColorThemeKind.t) =
          fun (x2827 : t) ->
            ColorThemeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2827) "kind")
      end
    module TaskRevealKind =
      struct
        type t = [ `Silent  | `Never ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2829 : Ojs.t) ->
            let x2830 = x2829 in
            match Ojs.int_of_js x2830 with
            | 2 -> `Silent
            | 3 -> `Never
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2828 : [ `Silent  | `Never ]) ->
            match x2828 with
            | `Silent -> Ojs.int_to_js 2
            | `Never -> Ojs.int_to_js 3
      end
    module TaskPanelKind =
      struct
        type t = [ `Dedicated  | `New ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2832 : Ojs.t) ->
            let x2833 = x2832 in
            match Ojs.int_of_js x2833 with
            | 2 -> `Dedicated
            | 3 -> `New
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2831 : [ `Dedicated  | `New ]) ->
            match x2831 with
            | `Dedicated -> Ojs.int_to_js 2
            | `New -> Ojs.int_to_js 3
      end
    module TaskPresentationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2835 : Ojs.t) -> x2835
        and t_to_js : t -> Ojs.t = fun (x2834 : Ojs.t) -> x2834
        let (reveal : t -> TaskRevealKind.t) =
          fun (x2836 : t) ->
            TaskRevealKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2836) "reveal")
        let (set_reveal : t -> TaskRevealKind.t -> unit) =
          fun (x2837 : t) ->
            fun (x2838 : TaskRevealKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2837) "reveal"
                (TaskRevealKind.t_to_js x2838)
        let (echo : t -> bool) =
          fun (x2839 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2839) "echo")
        let (set_echo : t -> bool -> unit) =
          fun (x2840 : t) ->
            fun (x2841 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2840) "echo"
                (Ojs.bool_to_js x2841)
        let (focus : t -> bool) =
          fun (x2842 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2842) "focus")
        let (set_focus : t -> bool -> unit) =
          fun (x2843 : t) ->
            fun (x2844 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2843) "focus"
                (Ojs.bool_to_js x2844)
        let (panel : t -> TaskPanelKind.t) =
          fun (x2845 : t) ->
            TaskPanelKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2845) "panel")
        let (set_panel : t -> TaskPanelKind.t -> unit) =
          fun (x2846 : t) ->
            fun (x2847 : TaskPanelKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2846) "panel"
                (TaskPanelKind.t_to_js x2847)
        let (show_reuse_message : t -> bool) =
          fun (x2848 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2848) "showReuseMessage")
        let (set_show_reuse_message : t -> bool -> unit) =
          fun (x2849 : t) ->
            fun (x2850 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2849) "showReuseMessage"
                (Ojs.bool_to_js x2850)
        let (clear : t -> bool) =
          fun (x2851 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2851) "clear")
        let (set_clear : t -> bool -> unit) =
          fun (x2852 : t) ->
            fun (x2853 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2852) "clear"
                (Ojs.bool_to_js x2853)
      end
    module TaskGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2855 : Ojs.t) -> x2855
        and t_to_js : t -> Ojs.t = fun (x2854 : Ojs.t) -> x2854
        let (clean : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Clean")
        let (set_clean : t -> unit) =
          fun (x2856 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Clean" (t_to_js x2856)
        let (build : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Build")
        let (set_build : t -> unit) =
          fun (x2857 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Build" (t_to_js x2857)
        let (rebuild : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Rebuild")
        let (set_rebuild : t -> unit) =
          fun (x2858 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Rebuild" (t_to_js x2858)
        let (test : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Test")
        let (set_test : t -> unit) =
          fun (x2859 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Test" (t_to_js x2859)
        let (create : id:string -> label:string -> t) =
          fun ~id:(x2860 : string) ->
            fun ~label:(x2861 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                   [|(Ojs.string_to_js x2860);(Ojs.string_to_js x2861)|])
      end
    module TaskDefinition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2863 : Ojs.t) -> x2863
        and t_to_js : t -> Ojs.t = fun (x2862 : Ojs.t) -> x2862
        let (type_ : t -> string) =
          fun (x2864 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2864) "type")
        let (get : t -> string -> any) =
          fun (x2865 : t) ->
            fun (x2866 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2865) (Ojs.string_to_js x2866))
        let (set : t -> string -> any -> unit) =
          fun (x2867 : t) ->
            fun (x2868 : string) ->
              fun (x2869 : any) ->
                Ojs.set_prop (t_to_js x2867) (Ojs.string_to_js x2868)
                  (any_to_js x2869)
      end
    module ProcessExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2871 : Ojs.t) -> x2871
        and t_to_js : t -> Ojs.t = fun (x2870 : Ojs.t) -> x2870
        let (cwd : t -> string) =
          fun (x2872 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2872) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2873 : t) ->
            fun (x2874 : string) ->
              Ojs.set_prop_ascii (t_to_js x2873) "cwd"
                (Ojs.string_to_js x2874)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2876 : Ojs.t) -> x2876
            and t_to_js : t -> Ojs.t = fun (x2875 : Ojs.t) -> x2875
            let (get : t -> string -> string) =
              fun (x2877 : t) ->
                fun (x2878 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2877) (Ojs.string_to_js x2878))
            let (set : t -> string -> string -> unit) =
              fun (x2879 : t) ->
                fun (x2880 : string) ->
                  fun (x2881 : string) ->
                    Ojs.set_prop (t_to_js x2879) (Ojs.string_to_js x2880)
                      (Ojs.string_to_js x2881)
          end
        let (env : t -> Env.t) =
          fun (x2882 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2882) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2883 : t) ->
            fun (x2884 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2883) "env" (Env.t_to_js x2884)
      end
    module ProcessExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2886 : Ojs.t) -> x2886
        and t_to_js : t -> Ojs.t = fun (x2885 : Ojs.t) -> x2885
        let (create :
          process:string -> ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2887 : string) ->
            fun ?options:(x2888 : ProcessExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ProcessExecution")
                     (let x2889 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2889 "push" [|(Ojs.string_to_js x2887)|]);
                      (match x2888 with
                       | Some x2890 ->
                           ignore
                             (Ojs.call x2889 "push"
                                [|(ProcessExecutionOptions.t_to_js x2890)|])
                       | None -> ());
                      x2889))
        let (create' :
          process:string ->
            args:string list ->
              ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2891 : string) ->
            fun ~args:(x2892 : string list) ->
              fun ?options:(x2893 : ProcessExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ProcessExecution")
                       (let x2894 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2894 "push" [|(Ojs.string_to_js x2891)|]);
                        ignore
                          (Ojs.call x2894 "push"
                             [|(Ojs.list_to_js Ojs.string_to_js x2892)|]);
                        (match x2893 with
                         | Some x2895 ->
                             ignore
                               (Ojs.call x2894 "push"
                                  [|(ProcessExecutionOptions.t_to_js x2895)|])
                         | None -> ());
                        x2894))
        let (process : t -> string) =
          fun (x2897 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2897) "process")
        let (set_process : t -> string -> unit) =
          fun (x2898 : t) ->
            fun (x2899 : string) ->
              Ojs.set_prop_ascii (t_to_js x2898) "process"
                (Ojs.string_to_js x2899)
        let (args : t -> string list) =
          fun (x2900 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2900) "args")
        let (set_args : t -> string list -> unit) =
          fun (x2902 : t) ->
            fun (x2903 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2902) "args"
                (Ojs.list_to_js Ojs.string_to_js x2903)
        let (options : t -> ProcessExecutionOptions.t) =
          fun (x2905 : t) ->
            ProcessExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2905) "options")
        let (set_options : t -> ProcessExecutionOptions.t -> unit) =
          fun (x2906 : t) ->
            fun (x2907 : ProcessExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2906) "options"
                (ProcessExecutionOptions.t_to_js x2907)
      end
    module ShellQuotingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2909 : Ojs.t) -> x2909
        and t_to_js : t -> Ojs.t = fun (x2908 : Ojs.t) -> x2908
        module Escape =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2911 : Ojs.t) -> x2911
            and t_to_js : t -> Ojs.t = fun (x2910 : Ojs.t) -> x2910
            let (escape_char : t -> string) =
              fun (x2912 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2912) "escapeChar")
            let (set_escape_char : t -> string -> unit) =
              fun (x2913 : t) ->
                fun (x2914 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2913) "escapeChar"
                    (Ojs.string_to_js x2914)
            let (chars_to_escape : t -> string) =
              fun (x2915 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2915) "charsToEscape")
            let (set_chars_to_escape : t -> string -> unit) =
              fun (x2916 : t) ->
                fun (x2917 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2916) "charsToEscape"
                    (Ojs.string_to_js x2917)
          end
        let (escape : t -> Escape.t or_string) =
          fun (x2918 : t) ->
            or_string_of_js Escape.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2918) "escape")
        let (set_escape : t -> Escape.t or_string -> unit) =
          fun (x2920 : t) ->
            fun (x2921 : Escape.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2920) "escape"
                (or_string_to_js Escape.t_to_js x2921)
        let (strong : t -> string) =
          fun (x2923 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2923) "strong")
        let (set_strong : t -> string -> unit) =
          fun (x2924 : t) ->
            fun (x2925 : string) ->
              Ojs.set_prop_ascii (t_to_js x2924) "strong"
                (Ojs.string_to_js x2925)
        let (weak : t -> string) =
          fun (x2926 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2926) "weak")
        let (set_weak : t -> string -> unit) =
          fun (x2927 : t) ->
            fun (x2928 : string) ->
              Ojs.set_prop_ascii (t_to_js x2927) "weak"
                (Ojs.string_to_js x2928)
      end
    module ShellExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2930 : Ojs.t) -> x2930
        and t_to_js : t -> Ojs.t = fun (x2929 : Ojs.t) -> x2929
        let (executable : t -> string) =
          fun (x2931 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2931) "executable")
        let (set_executable : t -> string -> unit) =
          fun (x2932 : t) ->
            fun (x2933 : string) ->
              Ojs.set_prop_ascii (t_to_js x2932) "executable"
                (Ojs.string_to_js x2933)
        let (shell_args : t -> string list) =
          fun (x2934 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2934) "shellArgs")
        let (set_shell_args : t -> string list -> unit) =
          fun (x2936 : t) ->
            fun (x2937 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2936) "shellArgs"
                (Ojs.list_to_js Ojs.string_to_js x2937)
        let (shell_quoting : t -> ShellQuotingOptions.t) =
          fun (x2939 : t) ->
            ShellQuotingOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2939) "shellQuoting")
        let (set_shell_quoting : t -> ShellQuotingOptions.t -> unit) =
          fun (x2940 : t) ->
            fun (x2941 : ShellQuotingOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2940) "shellQuoting"
                (ShellQuotingOptions.t_to_js x2941)
        let (cwd : t -> string) =
          fun (x2942 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2942) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2943 : t) ->
            fun (x2944 : string) ->
              Ojs.set_prop_ascii (t_to_js x2943) "cwd"
                (Ojs.string_to_js x2944)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2946 : Ojs.t) -> x2946
            and t_to_js : t -> Ojs.t = fun (x2945 : Ojs.t) -> x2945
            let (get : t -> string -> string) =
              fun (x2947 : t) ->
                fun (x2948 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2947) (Ojs.string_to_js x2948))
            let (set : t -> string -> string -> unit) =
              fun (x2949 : t) ->
                fun (x2950 : string) ->
                  fun (x2951 : string) ->
                    Ojs.set_prop (t_to_js x2949) (Ojs.string_to_js x2950)
                      (Ojs.string_to_js x2951)
          end
        let (env : t -> Env.t) =
          fun (x2952 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2952) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2953 : t) ->
            fun (x2954 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2953) "env" (Env.t_to_js x2954)
      end
    module ShellQuoting =
      struct
        type t = [ `Strong  | `Weak ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2956 : Ojs.t) ->
            let x2957 = x2956 in
            match Ojs.int_of_js x2957 with
            | 2 -> `Strong
            | 3 -> `Weak
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2955 : [ `Strong  | `Weak ]) ->
            match x2955 with
            | `Strong -> Ojs.int_to_js 2
            | `Weak -> Ojs.int_to_js 3
      end
    module ShellQuotedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2959 : Ojs.t) -> x2959
        and t_to_js : t -> Ojs.t = fun (x2958 : Ojs.t) -> x2958
        let (value : t -> string) =
          fun (x2960 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2960) "value")
        let (set_value : t -> string -> unit) =
          fun (x2961 : t) ->
            fun (x2962 : string) ->
              Ojs.set_prop_ascii (t_to_js x2961) "value"
                (Ojs.string_to_js x2962)
        let (quoting : t -> ShellQuoting.t) =
          fun (x2963 : t) ->
            ShellQuoting.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2963) "quoting")
        let (set_quoting : t -> ShellQuoting.t -> unit) =
          fun (x2964 : t) ->
            fun (x2965 : ShellQuoting.t) ->
              Ojs.set_prop_ascii (t_to_js x2964) "quoting"
                (ShellQuoting.t_to_js x2965)
      end
    module ShellExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2967 : Ojs.t) -> x2967
        and t_to_js : t -> Ojs.t = fun (x2966 : Ojs.t) -> x2966
        let (create :
          command_line:string ->
            ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command_line:(x2968 : string) ->
            fun ?options:(x2969 : ShellExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ShellExecution")
                     (let x2970 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2970 "push" [|(Ojs.string_to_js x2968)|]);
                      (match x2969 with
                       | Some x2971 ->
                           ignore
                             (Ojs.call x2970 "push"
                                [|(ShellExecutionOptions.t_to_js x2971)|])
                       | None -> ());
                      x2970))
        let (create' :
          command:ShellQuotedString.t or_string ->
            args:ShellQuotedString.t or_string list ->
              ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command:(x2972 : ShellQuotedString.t or_string) ->
            fun ~args:(x2973 : ShellQuotedString.t or_string list) ->
              fun ?options:(x2974 : ShellExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ShellExecution")
                       (let x2975 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2975 "push"
                             [|(or_string_to_js ShellQuotedString.t_to_js
                                  x2972)|]);
                        ignore
                          (Ojs.call x2975 "push"
                             [|(Ojs.list_to_js
                                  (fun
                                     (x2977 : ShellQuotedString.t or_string)
                                     ->
                                     or_string_to_js
                                       ShellQuotedString.t_to_js x2977) x2973)|]);
                        (match x2974 with
                         | Some x2976 ->
                             ignore
                               (Ojs.call x2975 "push"
                                  [|(ShellExecutionOptions.t_to_js x2976)|])
                         | None -> ());
                        x2975))
        let (command_line : t -> string or_undefined) =
          fun (x2980 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2980) "commandLine")
        let (set_command_line : t -> string or_undefined -> unit) =
          fun (x2982 : t) ->
            fun (x2983 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2982) "commandLine"
                (or_undefined_to_js Ojs.string_to_js x2983)
        let (command : t -> ShellQuotedString.t or_string) =
          fun (x2985 : t) ->
            or_string_of_js ShellQuotedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2985) "command")
        let (set_command : t -> ShellQuotedString.t or_string -> unit) =
          fun (x2987 : t) ->
            fun (x2988 : ShellQuotedString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2987) "command"
                (or_string_to_js ShellQuotedString.t_to_js x2988)
        let (args : t -> ShellQuotedString.t or_string list) =
          fun (x2990 : t) ->
            Ojs.list_of_js
              (fun (x2991 : Ojs.t) ->
                 or_string_of_js ShellQuotedString.t_of_js x2991)
              (Ojs.get_prop_ascii (t_to_js x2990) "args")
        let (set_args : t -> ShellQuotedString.t or_string list -> unit) =
          fun (x2993 : t) ->
            fun (x2994 : ShellQuotedString.t or_string list) ->
              Ojs.set_prop_ascii (t_to_js x2993) "args"
                (Ojs.list_to_js
                   (fun (x2995 : ShellQuotedString.t or_string) ->
                      or_string_to_js ShellQuotedString.t_to_js x2995) x2994)
        let (options : t -> ShellExecutionOptions.t) =
          fun (x2997 : t) ->
            ShellExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2997) "options")
        let (set_options : t -> ShellExecutionOptions.t -> unit) =
          fun (x2998 : t) ->
            fun (x2999 : ShellExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2998) "options"
                (ShellExecutionOptions.t_to_js x2999)
      end
    module CustomExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3001 : Ojs.t) -> x3001
        and t_to_js : t -> Ojs.t = fun (x3000 : Ojs.t) -> x3000
        let (create :
          callback:(resolvedDefinition:TaskDefinition.t ->
                      Pseudoterminal.t Promise.t)
            -> t)
          =
          fun
            ~callback:(x3002 :
                        resolvedDefinition:TaskDefinition.t ->
                          Pseudoterminal.t Promise.t)
            ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CustomExecution")
                 [|(Ojs.fun_to_js 1
                      (fun (x3003 : Ojs.t) ->
                         Promise.t_to_js Pseudoterminal.t_to_js
                           (x3002
                              ~resolvedDefinition:(TaskDefinition.t_of_js
                                                     x3003))))|])
      end
    module TaskScope =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3006 : Ojs.t) ->
            let x3007 = x3006 in
            match Ojs.int_of_js x3007 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3005 : [ `Workspace ]) ->
            match x3005 with | `Workspace -> Ojs.int_to_js 2
      end
    module RunOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3009 : Ojs.t) -> x3009
        and t_to_js : t -> Ojs.t = fun (x3008 : Ojs.t) -> x3008
        let (reevaluate_on_rerun : t -> bool) =
          fun (x3010 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3010) "reevaluateOnRerun")
        let (set_reevaluate_on_rerun : t -> bool -> unit) =
          fun (x3011 : t) ->
            fun (x3012 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3011) "reevaluateOnRerun"
                (Ojs.bool_to_js x3012)
      end
    module Task =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3014 : Ojs.t) -> x3014
        and t_to_js : t -> Ojs.t = fun (x3013 : Ojs.t) -> x3013
        let (create :
          task_definition:TaskDefinition.t ->
            scope:(WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum ->
              name:string ->
                source:string ->
                  ?execution:(CustomExecution.t, ProcessExecution.t,
                    ShellExecution.t) union3 ->
                    ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x3015 : TaskDefinition.t) ->
            fun
              ~scope:(x3016 :
                       (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum)
              ->
              fun ~name:(x3017 : string) ->
                fun ~source:(x3018 : string) ->
                  fun
                    ?execution:(x3019 :
                                 (CustomExecution.t, ProcessExecution.t,
                                   ShellExecution.t) union3 option)
                    ->
                    fun
                      ?problem_matchers:(x3020 :
                                          string list or_string option)
                      ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii
                                   (Ojs.get_prop_ascii Ojs.global
                                      "__LIB__VSCODE__IMPORTS") "vscode")
                                "Task")
                             (let x3021 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x3021 "push"
                                   [|(TaskDefinition.t_to_js x3015)|]);
                              ignore
                                (Ojs.call x3021 "push"
                                   [|(or_enum_to_js WorkspaceFolder.t_to_js
                                        (fun
                                           (x3030 :
                                             [ `Global  | `Workspace ])
                                           ->
                                           match x3030 with
                                           | `Global ->
                                               Ojs.string_to_js "Global"
                                           | `Workspace ->
                                               Ojs.string_to_js "Workspace")
                                        x3016)|]);
                              ignore
                                (Ojs.call x3021 "push"
                                   [|(Ojs.string_to_js x3017)|]);
                              ignore
                                (Ojs.call x3021 "push"
                                   [|(Ojs.string_to_js x3018)|]);
                              (match x3019 with
                               | Some x3025 ->
                                   ignore
                                     (Ojs.call x3021 "push"
                                        [|(union3_to_js
                                             CustomExecution.t_to_js
                                             ProcessExecution.t_to_js
                                             ShellExecution.t_to_js x3025)|])
                               | None -> ());
                              (match x3020 with
                               | Some x3022 ->
                                   ignore
                                     (Ojs.call x3021 "push"
                                        [|(or_string_to_js
                                             (fun (x3023 : string list) ->
                                                Ojs.list_to_js
                                                  Ojs.string_to_js x3023)
                                             x3022)|])
                               | None -> ());
                              x3021))
        let (create' :
          task_definition:TaskDefinition.t ->
            name:string ->
              source:string ->
                ?execution:(ProcessExecution.t, ShellExecution.t) union2 ->
                  ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x3031 : TaskDefinition.t) ->
            fun ~name:(x3032 : string) ->
              fun ~source:(x3033 : string) ->
                fun
                  ?execution:(x3034 :
                               (ProcessExecution.t, ShellExecution.t) union2
                                 option)
                  ->
                  fun
                    ?problem_matchers:(x3035 : string list or_string option)
                    ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "Task")
                           (let x3036 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x3036 "push"
                                 [|(TaskDefinition.t_to_js x3031)|]);
                            ignore
                              (Ojs.call x3036 "push"
                                 [|(Ojs.string_to_js x3032)|]);
                            ignore
                              (Ojs.call x3036 "push"
                                 [|(Ojs.string_to_js x3033)|]);
                            (match x3034 with
                             | Some x3040 ->
                                 ignore
                                   (Ojs.call x3036 "push"
                                      [|(union2_to_js
                                           ProcessExecution.t_to_js
                                           ShellExecution.t_to_js x3040)|])
                             | None -> ());
                            (match x3035 with
                             | Some x3037 ->
                                 ignore
                                   (Ojs.call x3036 "push"
                                      [|(or_string_to_js
                                           (fun (x3038 : string list) ->
                                              Ojs.list_to_js Ojs.string_to_js
                                                x3038) x3037)|])
                             | None -> ());
                            x3036))
        let (definition : t -> TaskDefinition.t) =
          fun (x3043 : t) ->
            TaskDefinition.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3043) "definition")
        let (set_definition : t -> TaskDefinition.t -> unit) =
          fun (x3044 : t) ->
            fun (x3045 : TaskDefinition.t) ->
              Ojs.set_prop_ascii (t_to_js x3044) "definition"
                (TaskDefinition.t_to_js x3045)
        let (scope :
          t -> (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum) =
          fun (x3046 : t) ->
            or_enum_of_js WorkspaceFolder.t_of_js
              (fun (x3048 : Ojs.t) ->
                 let x3049 = x3048 in
                 match Ojs.int_of_js x3049 with
                 | 1 -> `Global
                 | 2 -> `Workspace
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x3046) "scope")
        let (name : t -> string) =
          fun (x3050 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3050) "name")
        let (set_name : t -> string -> unit) =
          fun (x3051 : t) ->
            fun (x3052 : string) ->
              Ojs.set_prop_ascii (t_to_js x3051) "name"
                (Ojs.string_to_js x3052)
        let (detail : t -> string) =
          fun (x3053 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3053) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x3054 : t) ->
            fun (x3055 : string) ->
              Ojs.set_prop_ascii (t_to_js x3054) "detail"
                (Ojs.string_to_js x3055)
        let (execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3)
          =
          fun (x3056 : t) ->
            union3_of_js CustomExecution.t_of_js ProcessExecution.t_of_js
              ShellExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3056) "execution")
        let (set_execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3
              -> unit)
          =
          fun (x3060 : t) ->
            fun
              (x3061 :
                (CustomExecution.t, ProcessExecution.t, ShellExecution.t)
                  union3)
              ->
              Ojs.set_prop_ascii (t_to_js x3060) "execution"
                (union3_to_js CustomExecution.t_to_js
                   ProcessExecution.t_to_js ShellExecution.t_to_js x3061)
        let (is_background : t -> bool) =
          fun (x3065 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3065) "isBackground")
        let (set_is_background : t -> bool -> unit) =
          fun (x3066 : t) ->
            fun (x3067 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3066) "isBackground"
                (Ojs.bool_to_js x3067)
        let (source : t -> string) =
          fun (x3068 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3068) "source")
        let (set_source : t -> string -> unit) =
          fun (x3069 : t) ->
            fun (x3070 : string) ->
              Ojs.set_prop_ascii (t_to_js x3069) "source"
                (Ojs.string_to_js x3070)
        let (group : t -> TaskGroup.t) =
          fun (x3071 : t) ->
            TaskGroup.t_of_js (Ojs.get_prop_ascii (t_to_js x3071) "group")
        let (set_group : t -> TaskGroup.t -> unit) =
          fun (x3072 : t) ->
            fun (x3073 : TaskGroup.t) ->
              Ojs.set_prop_ascii (t_to_js x3072) "group"
                (TaskGroup.t_to_js x3073)
        let (presentation_options : t -> TaskPresentationOptions.t) =
          fun (x3074 : t) ->
            TaskPresentationOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3074) "presentationOptions")
        let (set_presentation_options :
          t -> TaskPresentationOptions.t -> unit) =
          fun (x3075 : t) ->
            fun (x3076 : TaskPresentationOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3075) "presentationOptions"
                (TaskPresentationOptions.t_to_js x3076)
        let (problem_matchers : t -> string list) =
          fun (x3077 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3077) "problemMatchers")
        let (set_problem_matchers : t -> string list -> unit) =
          fun (x3079 : t) ->
            fun (x3080 : string list) ->
              Ojs.set_prop_ascii (t_to_js x3079) "problemMatchers"
                (Ojs.list_to_js Ojs.string_to_js x3080)
        let (run_options : t -> RunOptions.t) =
          fun (x3082 : t) ->
            RunOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3082) "runOptions")
        let (set_run_options : t -> RunOptions.t -> unit) =
          fun (x3083 : t) ->
            fun (x3084 : RunOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3083) "runOptions"
                (RunOptions.t_to_js x3084)
      end
    module TaskProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3086 : Ojs.t) -> x3086
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3085 : Ojs.t) -> x3085
        let (provide_tasks :
          'T t -> token:CancellationToken.t -> 'T list ProviderResult.t) =
          fun (x3088 : 'T t) ->
            fun ~token:(x3087 : CancellationToken.t) ->
              ProviderResult.t_of_js
                (fun (x3090 : Ojs.t) -> Ojs.list_of_js Obj.magic x3090)
                (Ojs.call (t_to_js Obj.magic x3088) "provideTasks"
                   [|(CancellationToken.t_to_js x3087)|])
        let (resolve_task :
          'T t -> task:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x3094 : 'T t) ->
            fun ~task:(x3092 : 'T) ->
              fun ~token:(x3093 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x3094) "resolveTask"
                     [|(Obj.magic x3092);(CancellationToken.t_to_js x3093)|])
      end
    module TaskExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3098 : Ojs.t) -> x3098
        and t_to_js : t -> Ojs.t = fun (x3097 : Ojs.t) -> x3097
        let (task : t -> Task.t) =
          fun (x3099 : t) ->
            Task.t_of_js (Ojs.get_prop_ascii (t_to_js x3099) "task")
        let (set_task : t -> Task.t -> unit) =
          fun (x3100 : t) ->
            fun (x3101 : Task.t) ->
              Ojs.set_prop_ascii (t_to_js x3100) "task" (Task.t_to_js x3101)
        let (terminate : t -> unit) =
          fun (x3102 : t) ->
            ignore (Ojs.call (t_to_js x3102) "terminate" [||])
      end
    module TaskStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3104 : Ojs.t) -> x3104
        and t_to_js : t -> Ojs.t = fun (x3103 : Ojs.t) -> x3103
        let (execution : t -> TaskExecution.t) =
          fun (x3105 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3105) "execution")
      end
    module TaskEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3107 : Ojs.t) -> x3107
        and t_to_js : t -> Ojs.t = fun (x3106 : Ojs.t) -> x3106
        let (execution : t -> TaskExecution.t) =
          fun (x3108 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3108) "execution")
      end
    module TaskProcessStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3110 : Ojs.t) -> x3110
        and t_to_js : t -> Ojs.t = fun (x3109 : Ojs.t) -> x3109
        let (execution : t -> TaskExecution.t) =
          fun (x3111 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3111) "execution")
        let (process_id : t -> int) =
          fun (x3112 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3112) "processId")
      end
    module TaskProcessEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3114 : Ojs.t) -> x3114
        and t_to_js : t -> Ojs.t = fun (x3113 : Ojs.t) -> x3113
        let (execution : t -> TaskExecution.t) =
          fun (x3115 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3115) "execution")
        let (exit_code : t -> int or_undefined) =
          fun (x3116 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3116) "exitCode")
      end
    module TaskFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3119 : Ojs.t) -> x3119
        and t_to_js : t -> Ojs.t = fun (x3118 : Ojs.t) -> x3118
        let (version : t -> string) =
          fun (x3120 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3120) "version")
        let (set_version : t -> string -> unit) =
          fun (x3121 : t) ->
            fun (x3122 : string) ->
              Ojs.set_prop_ascii (t_to_js x3121) "version"
                (Ojs.string_to_js x3122)
        let (type_ : t -> string) =
          fun (x3123 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3123) "type")
        let (set_type : t -> string -> unit) =
          fun (x3124 : t) ->
            fun (x3125 : string) ->
              Ojs.set_prop_ascii (t_to_js x3124) "type"
                (Ojs.string_to_js x3125)
      end
    module Tasks =
      struct
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x3126 : string) ->
            fun ~provider:(x3127 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x3126);(TaskProvider.t_to_js
                                                 Task.t_to_js x3127)|])
        let (fetch_tasks :
          ?filter:TaskFilter.t -> unit -> Task.t list Promise.t) =
          fun ?filter:(x3129 : TaskFilter.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3133 : Ojs.t) -> Ojs.list_of_js Task.t_of_js x3133)
                (let x3132 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "tasks" in
                 Ojs.call (Ojs.get_prop_ascii x3132 "fetchTasks") "apply"
                   [|x3132;((let x3130 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3129 with
                              | Some x3131 ->
                                  ignore
                                    (Ojs.call x3130 "push"
                                       [|(TaskFilter.t_to_js x3131)|])
                              | None -> ());
                             x3130))|])
        let (execute_task : task:Task.t -> TaskExecution.t Promise.t) =
          fun ~task:(x3135 : Task.t) ->
            Promise.t_of_js TaskExecution.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                 "executeTask" [|(Task.t_to_js x3135)|])
        let (task_executions : TaskExecution.t list) =
          Ojs.list_of_js TaskExecution.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "taskExecutions")
        let (on_did_start_task : TaskStartEvent.t Event.t) =
          Event.t_of_js TaskStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTask")
        let (on_did_end_task : TaskEndEvent.t Event.t) =
          Event.t_of_js TaskEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTask")
        let (on_did_start_task_process : TaskProcessStartEvent.t Event.t) =
          Event.t_of_js TaskProcessStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTaskProcess")
        let (on_did_end_task_process : TaskProcessEndEvent.t Event.t) =
          Event.t_of_js TaskProcessEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTaskProcess")
      end
    module FileType =
      struct
        type t = [ `File  | `Directory  | `SymbolicLink ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3143 : Ojs.t) ->
            let x3144 = x3143 in
            match Ojs.int_of_js x3144 with
            | 1 -> `File
            | 2 -> `Directory
            | 64 -> `SymbolicLink
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3142 : [ `File  | `Directory  | `SymbolicLink ]) ->
            match x3142 with
            | `File -> Ojs.int_to_js 1
            | `Directory -> Ojs.int_to_js 2
            | `SymbolicLink -> Ojs.int_to_js 64
      end
    module FileStat =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3146 : Ojs.t) -> x3146
        and t_to_js : t -> Ojs.t = fun (x3145 : Ojs.t) -> x3145
        let (type_ : t -> FileType.t) =
          fun (x3147 : t) ->
            FileType.t_of_js (Ojs.get_prop_ascii (t_to_js x3147) "type")
        let (set_type : t -> FileType.t -> unit) =
          fun (x3148 : t) ->
            fun (x3149 : FileType.t) ->
              Ojs.set_prop_ascii (t_to_js x3148) "type"
                (FileType.t_to_js x3149)
        let (ctime : t -> int) =
          fun (x3150 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3150) "ctime")
        let (set_ctime : t -> int -> unit) =
          fun (x3151 : t) ->
            fun (x3152 : int) ->
              Ojs.set_prop_ascii (t_to_js x3151) "ctime"
                (Ojs.int_to_js x3152)
        let (mtime : t -> int) =
          fun (x3153 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3153) "mtime")
        let (set_mtime : t -> int -> unit) =
          fun (x3154 : t) ->
            fun (x3155 : int) ->
              Ojs.set_prop_ascii (t_to_js x3154) "mtime"
                (Ojs.int_to_js x3155)
        let (size : t -> int) =
          fun (x3156 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3156) "size")
        let (set_size : t -> int -> unit) =
          fun (x3157 : t) ->
            fun (x3158 : int) ->
              Ojs.set_prop_ascii (t_to_js x3157) "size" (Ojs.int_to_js x3158)
      end
    module FileSystemError =
      struct
        include struct include Error end
        let (file_not_found : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3159 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3163 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3163 "FileNotFound") "apply"
                   [|x3163;((let x3160 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3159 with
                              | Some x3161 ->
                                  ignore
                                    (Ojs.call x3160 "push"
                                       [|(or_string_to_js Uri.t_to_js x3161)|])
                              | None -> ());
                             x3160))|])
        let (file_exists : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3164 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3168 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3168 "FileExists") "apply"
                   [|x3168;((let x3165 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3164 with
                              | Some x3166 ->
                                  ignore
                                    (Ojs.call x3165 "push"
                                       [|(or_string_to_js Uri.t_to_js x3166)|])
                              | None -> ());
                             x3165))|])
        let (file_not_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3169 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3173 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3173 "FileNotADirectory")
                   "apply"
                   [|x3173;((let x3170 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3169 with
                              | Some x3171 ->
                                  ignore
                                    (Ojs.call x3170 "push"
                                       [|(or_string_to_js Uri.t_to_js x3171)|])
                              | None -> ());
                             x3170))|])
        let (file_is_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3174 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3178 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3178 "FileIsADirectory")
                   "apply"
                   [|x3178;((let x3175 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3174 with
                              | Some x3176 ->
                                  ignore
                                    (Ojs.call x3175 "push"
                                       [|(or_string_to_js Uri.t_to_js x3176)|])
                              | None -> ());
                             x3175))|])
        let (no_permissions : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3179 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3183 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3183 "NoPermissions") "apply"
                   [|x3183;((let x3180 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3179 with
                              | Some x3181 ->
                                  ignore
                                    (Ojs.call x3180 "push"
                                       [|(or_string_to_js Uri.t_to_js x3181)|])
                              | None -> ());
                             x3180))|])
        let (unavailable : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3184 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3188 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3188 "Unavailable") "apply"
                   [|x3188;((let x3185 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3184 with
                              | Some x3186 ->
                                  ignore
                                    (Ojs.call x3185 "push"
                                       [|(or_string_to_js Uri.t_to_js x3186)|])
                              | None -> ());
                             x3185))|])
        let (create : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3189 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "FileSystemError")
                   (let x3190 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3189 with
                     | Some x3191 ->
                         ignore
                           (Ojs.call x3190 "push"
                              [|(or_string_to_js Uri.t_to_js x3191)|])
                     | None -> ());
                    x3190))
        let (code : t -> string) =
          fun (x3193 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3193) "code")
      end
    module FileChangeType =
      struct
        type t = [ `Created  | `Deleted ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3195 : Ojs.t) ->
            let x3196 = x3195 in
            match Ojs.int_of_js x3196 with
            | 2 -> `Created
            | 3 -> `Deleted
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3194 : [ `Created  | `Deleted ]) ->
            match x3194 with
            | `Created -> Ojs.int_to_js 2
            | `Deleted -> Ojs.int_to_js 3
      end
    module FileChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3198 : Ojs.t) -> x3198
        and t_to_js : t -> Ojs.t = fun (x3197 : Ojs.t) -> x3197
        let (type_ : t -> FileChangeType.t) =
          fun (x3199 : t) ->
            FileChangeType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3199) "type")
        let (uri : t -> Uri.t) =
          fun (x3200 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3200) "uri")
      end
    module FileSystemProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3202 : Ojs.t) -> x3202
        and t_to_js : t -> Ojs.t = fun (x3201 : Ojs.t) -> x3201
        let (on_did_change_file : t -> FileChangeEvent.t list Event.t) =
          fun (x3203 : t) ->
            Event.t_of_js
              (fun (x3204 : Ojs.t) ->
                 Ojs.list_of_js FileChangeEvent.t_of_js x3204)
              (Ojs.get_prop_ascii (t_to_js x3203) "onDidChangeFile")
        module WatchOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3207 : Ojs.t) -> x3207
            and t_to_js : t -> Ojs.t = fun (x3206 : Ojs.t) -> x3206
            let (recursive : t -> bool) =
              fun (x3208 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3208) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3209 : t) ->
                fun (x3210 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3209) "recursive"
                    (Ojs.bool_to_js x3210)
            let (excludes : t -> string list) =
              fun (x3211 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3211) "excludes")
            let (set_excludes : t -> string list -> unit) =
              fun (x3213 : t) ->
                fun (x3214 : string list) ->
                  Ojs.set_prop_ascii (t_to_js x3213) "excludes"
                    (Ojs.list_to_js Ojs.string_to_js x3214)
          end
        let (watch :
          t -> uri:Uri.t -> options:WatchOptions.t -> Disposable.t) =
          fun (x3218 : t) ->
            fun ~uri:(x3216 : Uri.t) ->
              fun ~options:(x3217 : WatchOptions.t) ->
                Disposable.t_of_js
                  (Ojs.call (t_to_js x3218) "watch"
                     [|(Uri.t_to_js x3216);(WatchOptions.t_to_js x3217)|])
        let (stat :
          t -> uri:Uri.t -> (FileStat.t, FileStat.t Promise.t) union2) =
          fun (x3220 : t) ->
            fun ~uri:(x3219 : Uri.t) ->
              union2_of_js FileStat.t_of_js
                (fun (x3222 : Ojs.t) ->
                   Promise.t_of_js FileStat.t_of_js x3222)
                (Ojs.call (t_to_js x3220) "stat" [|(Uri.t_to_js x3219)|])
        let (read_directory :
          t ->
            uri:Uri.t ->
              ((string * FileType.t) list Promise.t, (string * FileType.t))
                or_array)
          =
          fun (x3225 : t) ->
            fun ~uri:(x3224 : Uri.t) ->
              or_array_of_js
                (fun (x3226 : Ojs.t) ->
                   Promise.t_of_js
                     (fun (x3227 : Ojs.t) ->
                        Ojs.list_of_js
                          (fun (x3228 : Ojs.t) ->
                             let x3229 = x3228 in
                             ((Ojs.string_of_js (Ojs.array_get x3229 0)),
                               (FileType.t_of_js (Ojs.array_get x3229 1))))
                          x3227) x3226)
                (fun (x3230 : Ojs.t) ->
                   let x3231 = x3230 in
                   ((Ojs.string_of_js (Ojs.array_get x3231 0)),
                     (FileType.t_of_js (Ojs.array_get x3231 1))))
                (Ojs.call (t_to_js x3225) "readDirectory"
                   [|(Uri.t_to_js x3224)|])
        let (create_directory :
          t -> uri:Uri.t -> (unit, unit Promise.t) union2) =
          fun (x3233 : t) ->
            fun ~uri:(x3232 : Uri.t) ->
              union2_of_js Ojs.unit_of_js
                (fun (x3235 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3235)
                (Ojs.call (t_to_js x3233) "createDirectory"
                   [|(Uri.t_to_js x3232)|])
        let (read_file :
          t -> uri:Uri.t -> (Uint8Array.t, Uint8Array.t Promise.t) union2) =
          fun (x3238 : t) ->
            fun ~uri:(x3237 : Uri.t) ->
              union2_of_js Uint8Array.t_of_js
                (fun (x3240 : Ojs.t) ->
                   Promise.t_of_js Uint8Array.t_of_js x3240)
                (Ojs.call (t_to_js x3238) "readFile" [|(Uri.t_to_js x3237)|])
        module WriteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3243 : Ojs.t) -> x3243
            and t_to_js : t -> Ojs.t = fun (x3242 : Ojs.t) -> x3242
            let (create : t -> bool) =
              fun (x3244 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3244) "create")
            let (set_create : t -> bool -> unit) =
              fun (x3245 : t) ->
                fun (x3246 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3245) "create"
                    (Ojs.bool_to_js x3246)
            let (overwrite : t -> bool) =
              fun (x3247 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3247) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3248 : t) ->
                fun (x3249 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3248) "overwrite"
                    (Ojs.bool_to_js x3249)
          end
        let (write_file :
          t ->
            uri:Uri.t ->
              content:Uint8Array.t ->
                options:WriteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3253 : t) ->
            fun ~uri:(x3250 : Uri.t) ->
              fun ~content:(x3251 : Uint8Array.t) ->
                fun ~options:(x3252 : WriteFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3255 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3255)
                    (Ojs.call (t_to_js x3253) "writeFile"
                       [|(Uri.t_to_js x3250);(Uint8Array.t_to_js x3251);(
                         WriteFileOptions.t_to_js x3252)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3258 : Ojs.t) -> x3258
            and t_to_js : t -> Ojs.t = fun (x3257 : Ojs.t) -> x3257
            let (recursive : t -> bool) =
              fun (x3259 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3259) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3260 : t) ->
                fun (x3261 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3260) "recursive"
                    (Ojs.bool_to_js x3261)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              options:DeleteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3264 : t) ->
            fun ~uri:(x3262 : Uri.t) ->
              fun ~options:(x3263 : DeleteFileOptions.t) ->
                union2_of_js Ojs.unit_of_js
                  (fun (x3266 : Ojs.t) ->
                     Promise.t_of_js Ojs.unit_of_js x3266)
                  (Ojs.call (t_to_js x3264) "delete"
                     [|(Uri.t_to_js x3262);(DeleteFileOptions.t_to_js x3263)|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3269 : Ojs.t) -> x3269
            and t_to_js : t -> Ojs.t = fun (x3268 : Ojs.t) -> x3268
            let (overwrite : t -> bool) =
              fun (x3270 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3270) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3271 : t) ->
                fun (x3272 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3271) "overwrite"
                    (Ojs.bool_to_js x3272)
          end
        let (rename :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3276 : t) ->
            fun ~old_uri:(x3273 : Uri.t) ->
              fun ~new_uri:(x3274 : Uri.t) ->
                fun ~options:(x3275 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3278 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3278)
                    (Ojs.call (t_to_js x3276) "rename"
                       [|(Uri.t_to_js x3273);(Uri.t_to_js x3274);(RenameFileOptions.t_to_js
                                                                    x3275)|])
        let (copy :
          t ->
            source:Uri.t ->
              destination:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3283 : t) ->
            fun ~source:(x3280 : Uri.t) ->
              fun ~destination:(x3281 : Uri.t) ->
                fun ~options:(x3282 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3285 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3285)
                    (Ojs.call (t_to_js x3283) "copy"
                       [|(Uri.t_to_js x3280);(Uri.t_to_js x3281);(RenameFileOptions.t_to_js
                                                                    x3282)|])
      end
    module FileSystem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3288 : Ojs.t) -> x3288
        and t_to_js : t -> Ojs.t = fun (x3287 : Ojs.t) -> x3287
        let (stat : t -> uri:Uri.t -> FileStat.t Promise.t) =
          fun (x3290 : t) ->
            fun ~uri:(x3289 : Uri.t) ->
              Promise.t_of_js FileStat.t_of_js
                (Ojs.call (t_to_js x3290) "stat" [|(Uri.t_to_js x3289)|])
        let (read_directory :
          t -> uri:Uri.t -> (string * FileType.t) list Promise.t) =
          fun (x3293 : t) ->
            fun ~uri:(x3292 : Uri.t) ->
              Promise.t_of_js
                (fun (x3294 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x3295 : Ojs.t) ->
                        let x3296 = x3295 in
                        ((Ojs.string_of_js (Ojs.array_get x3296 0)),
                          (FileType.t_of_js (Ojs.array_get x3296 1)))) x3294)
                (Ojs.call (t_to_js x3293) "readDirectory"
                   [|(Uri.t_to_js x3292)|])
        let (create_directory : t -> uri:Uri.t -> unit Promise.t) =
          fun (x3298 : t) ->
            fun ~uri:(x3297 : Uri.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3298) "createDirectory"
                   [|(Uri.t_to_js x3297)|])
        let (read_file : t -> uri:Uri.t -> Uint8Array.t Promise.t) =
          fun (x3301 : t) ->
            fun ~uri:(x3300 : Uri.t) ->
              Promise.t_of_js Uint8Array.t_of_js
                (Ojs.call (t_to_js x3301) "readFile" [|(Uri.t_to_js x3300)|])
        let (write_file :
          t -> uri:Uri.t -> content:Uint8Array.t -> unit Promise.t) =
          fun (x3305 : t) ->
            fun ~uri:(x3303 : Uri.t) ->
              fun ~content:(x3304 : Uint8Array.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x3305) "writeFile"
                     [|(Uri.t_to_js x3303);(Uint8Array.t_to_js x3304)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3308 : Ojs.t) -> x3308
            and t_to_js : t -> Ojs.t = fun (x3307 : Ojs.t) -> x3307
            let (recursive : t -> bool) =
              fun (x3309 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3309) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3310 : t) ->
                fun (x3311 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3310) "recursive"
                    (Ojs.bool_to_js x3311)
            let (use_trash : t -> bool) =
              fun (x3312 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3312) "useTrash")
            let (set_use_trash : t -> bool -> unit) =
              fun (x3313 : t) ->
                fun (x3314 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3313) "useTrash"
                    (Ojs.bool_to_js x3314)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3319 : t) ->
            fun ~uri:(x3315 : Uri.t) ->
              fun ?options:(x3316 : DeleteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x3320 = t_to_js x3319 in
                     Ojs.call (Ojs.get_prop_ascii x3320 "delete") "apply"
                       [|x3320;((let x3317 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3317 "push"
                                      [|(Uri.t_to_js x3315)|]);
                                 (match x3316 with
                                  | Some x3318 ->
                                      ignore
                                        (Ojs.call x3317 "push"
                                           [|(DeleteFileOptions.t_to_js x3318)|])
                                  | None -> ());
                                 x3317))|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3323 : Ojs.t) -> x3323
            and t_to_js : t -> Ojs.t = fun (x3322 : Ojs.t) -> x3322
            let (overwrite : t -> bool) =
              fun (x3324 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3324) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3325 : t) ->
                fun (x3326 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3325) "overwrite"
                    (Ojs.bool_to_js x3326)
          end
        let (rename :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3332 : t) ->
            fun ~source:(x3327 : Uri.t) ->
              fun ~target:(x3328 : Uri.t) ->
                fun ?options:(x3329 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3333 = t_to_js x3332 in
                       Ojs.call (Ojs.get_prop_ascii x3333 "rename") "apply"
                         [|x3333;((let x3330 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3330 "push"
                                        [|(Uri.t_to_js x3327)|]);
                                   ignore
                                     (Ojs.call x3330 "push"
                                        [|(Uri.t_to_js x3328)|]);
                                   (match x3329 with
                                    | Some x3331 ->
                                        ignore
                                          (Ojs.call x3330 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3331)|])
                                    | None -> ());
                                   x3330))|])
        let (copy :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3340 : t) ->
            fun ~source:(x3335 : Uri.t) ->
              fun ~target:(x3336 : Uri.t) ->
                fun ?options:(x3337 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3341 = t_to_js x3340 in
                       Ojs.call (Ojs.get_prop_ascii x3341 "copy") "apply"
                         [|x3341;((let x3338 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3338 "push"
                                        [|(Uri.t_to_js x3335)|]);
                                   ignore
                                     (Ojs.call x3338 "push"
                                        [|(Uri.t_to_js x3336)|]);
                                   (match x3337 with
                                    | Some x3339 ->
                                        ignore
                                          (Ojs.call x3338 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3339)|])
                                    | None -> ());
                                   x3338))|])
        let (is_writable_file_system :
          t -> scheme:string -> bool or_undefined) =
          fun (x3344 : t) ->
            fun ~scheme:(x3343 : string) ->
              or_undefined_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3344) "isWritableFileSystem"
                   [|(Ojs.string_to_js x3343)|])
      end
    module WebviewPortMapping =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3347 : Ojs.t) -> x3347
        and t_to_js : t -> Ojs.t = fun (x3346 : Ojs.t) -> x3346
        let (webview_port : t -> int) =
          fun (x3348 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3348) "webviewPort")
        let (extension_host_port : t -> int) =
          fun (x3349 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3349) "extensionHostPort")
      end
    module WebviewOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3351 : Ojs.t) -> x3351
        and t_to_js : t -> Ojs.t = fun (x3350 : Ojs.t) -> x3350
        let (enable_scripts : t -> bool) =
          fun (x3352 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3352) "enableScripts")
        let (enable_command_uris : t -> bool) =
          fun (x3353 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3353) "enableCommandUris")
        let (local_resource_roots : t -> Uri.t list) =
          fun (x3354 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3354) "localResourceRoots")
        let (port_mapping : t -> WebviewPortMapping.t list) =
          fun (x3356 : t) ->
            Ojs.list_of_js WebviewPortMapping.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3356) "portMapping")
      end
    module Webview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3359 : Ojs.t) -> x3359
        and t_to_js : t -> Ojs.t = fun (x3358 : Ojs.t) -> x3358
        let (options : t -> WebviewOptions.t) =
          fun (x3360 : t) ->
            WebviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3360) "options")
        let (set_options : t -> WebviewOptions.t -> unit) =
          fun (x3361 : t) ->
            fun (x3362 : WebviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3361) "options"
                (WebviewOptions.t_to_js x3362)
        let (html : t -> string) =
          fun (x3363 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3363) "html")
        let (set_html : t -> string -> unit) =
          fun (x3364 : t) ->
            fun (x3365 : string) ->
              Ojs.set_prop_ascii (t_to_js x3364) "html"
                (Ojs.string_to_js x3365)
        let (on_did_receive_message : t -> any Event.t) =
          fun (x3366 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x3366) "onDidReceiveMessage")
        let (post_message : t -> message:any -> bool Promise.t) =
          fun (x3369 : t) ->
            fun ~message:(x3368 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3369) "postMessage" [|(any_to_js x3368)|])
        let (as_webview_uri : t -> local_resource:Uri.t -> Uri.t) =
          fun (x3372 : t) ->
            fun ~local_resource:(x3371 : Uri.t) ->
              Uri.t_of_js
                (Ojs.call (t_to_js x3372) "asWebviewUri"
                   [|(Uri.t_to_js x3371)|])
        let (csp_source : t -> string) =
          fun (x3373 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3373) "cspSource")
      end
    module WebviewPanelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3375 : Ojs.t) -> x3375
        and t_to_js : t -> Ojs.t = fun (x3374 : Ojs.t) -> x3374
        let (enable_find_widget : t -> bool) =
          fun (x3376 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3376) "enableFindWidget")
        let (retain_context_when_hidden : t -> bool) =
          fun (x3377 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3377) "retainContextWhenHidden")
      end
    module WebviewPanel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3379 : Ojs.t) -> x3379
        and t_to_js : t -> Ojs.t = fun (x3378 : Ojs.t) -> x3378
        let (view_type : t -> string) =
          fun (x3380 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3380) "viewType")
        let (title : t -> string) =
          fun (x3381 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3381) "title")
        let (set_title : t -> string -> unit) =
          fun (x3382 : t) ->
            fun (x3383 : string) ->
              Ojs.set_prop_ascii (t_to_js x3382) "title"
                (Ojs.string_to_js x3383)
        let (icon_path : t -> (Uri.t, IconPath.t) union2) =
          fun (x3384 : t) ->
            union2_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3384) "iconPath")
        let (set_icon_path : t -> (Uri.t, IconPath.t) union2 -> unit) =
          fun (x3387 : t) ->
            fun (x3388 : (Uri.t, IconPath.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x3387) "iconPath"
                (union2_to_js Uri.t_to_js IconPath.t_to_js x3388)
        let (webview : t -> Webview.t) =
          fun (x3391 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3391) "webview")
        let (options : t -> WebviewPanelOptions.t) =
          fun (x3392 : t) ->
            WebviewPanelOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3392) "options")
        let (view_column : t -> ViewColumn.t) =
          fun (x3393 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3393) "viewColumn")
        let (active : t -> bool) =
          fun (x3394 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3394) "active")
        let (visible : t -> bool) =
          fun (x3395 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3395) "visible")
        module OnDidChangeViewStateEvent =
          struct
            type webview_panel = t
            let rec webview_panel_of_js : Ojs.t -> webview_panel =
              fun (x3397 : Ojs.t) -> t_of_js x3397
            and webview_panel_to_js : webview_panel -> Ojs.t =
              fun (x3396 : t) -> t_to_js x3396
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3399 : Ojs.t) -> x3399
            and t_to_js : t -> Ojs.t = fun (x3398 : Ojs.t) -> x3398
            let (webview_panel : t -> webview_panel) =
              fun (x3400 : t) ->
                webview_panel_of_js
                  (Ojs.get_prop_ascii (t_to_js x3400) "webviewPanel")
          end
        let (on_did_change_view_state :
          t -> OnDidChangeViewStateEvent.t Event.t) =
          fun (x3401 : t) ->
            Event.t_of_js OnDidChangeViewStateEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3401) "onDidChangeViewState")
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3403 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3403) "onDidDispose")
        let (reveal :
          t ->
            ?view_column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x3410 : t) ->
            fun ?view_column:(x3405 : ViewColumn.t option) ->
              fun ?preserve_focus:(x3406 : bool option) ->
                fun () ->
                  ignore
                    (let x3411 = t_to_js x3410 in
                     Ojs.call (Ojs.get_prop_ascii x3411 "reveal") "apply"
                       [|x3411;((let x3407 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x3405 with
                                  | Some x3409 ->
                                      ignore
                                        (Ojs.call x3407 "push"
                                           [|(ViewColumn.t_to_js x3409)|])
                                  | None -> ());
                                 (match x3406 with
                                  | Some x3408 ->
                                      ignore
                                        (Ojs.call x3407 "push"
                                           [|(Ojs.bool_to_js x3408)|])
                                  | None -> ());
                                 x3407))|])
        let (dispose : t -> any) =
          fun (x3412 : t) ->
            any_of_js (Ojs.call (t_to_js x3412) "dispose" [||])
      end
    module WebviewPanelSerializer =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3414 : Ojs.t) -> x3414
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3413 : Ojs.t) -> x3413
        let (deserialize_webview_panel :
          'T t -> webview_panel:WebviewPanel.t -> state:'T -> unit Promise.t)
          =
          fun (x3417 : 'T t) ->
            fun ~webview_panel:(x3415 : WebviewPanel.t) ->
              fun ~state:(x3416 : 'T) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3417)
                     "deserializeWebviewPanel"
                     [|(WebviewPanel.t_to_js x3415);(Obj.magic x3416)|])
      end
    module WebviewView =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3421 : Ojs.t) -> x3421
        and t_to_js : t -> Ojs.t = fun (x3420 : Ojs.t) -> x3420
        let (view_type : t -> string) =
          fun (x3422 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3422) "viewType")
        let (webview : t -> Webview.t) =
          fun (x3423 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3423) "webview")
        let (title : t -> string) =
          fun (x3424 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3424) "title")
        let (set_title : t -> string -> unit) =
          fun (x3425 : t) ->
            fun (x3426 : string) ->
              Ojs.set_prop_ascii (t_to_js x3425) "title"
                (Ojs.string_to_js x3426)
        let (description : t -> string) =
          fun (x3427 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3427) "description")
        let (set_description : t -> string -> unit) =
          fun (x3428 : t) ->
            fun (x3429 : string) ->
              Ojs.set_prop_ascii (t_to_js x3428) "description"
                (Ojs.string_to_js x3429)
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3430 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3430) "onDidDispose")
        let (visible : t -> bool) =
          fun (x3432 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3432) "visible")
        let (on_did_change_visibility : t -> unit Event.t) =
          fun (x3433 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3433) "onDidChangeVisibility")
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x3438 : t) ->
            fun ?preserve_focus:(x3435 : bool option) ->
              fun () ->
                ignore
                  (let x3439 = t_to_js x3438 in
                   Ojs.call (Ojs.get_prop_ascii x3439 "show") "apply"
                     [|x3439;((let x3436 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3435 with
                                | Some x3437 ->
                                    ignore
                                      (Ojs.call x3436 "push"
                                         [|(Ojs.bool_to_js x3437)|])
                                | None -> ());
                               x3436))|])
      end
    module WebviewViewResolveContext =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3441 : Ojs.t) -> x3441
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3440 : Ojs.t) -> x3440
        let (state : 'T t -> 'T or_undefined) =
          fun (x3442 : 'T t) ->
            or_undefined_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3442) "state")
      end
    module WebviewViewProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3446 : Ojs.t) -> x3446
        and t_to_js : t -> Ojs.t = fun (x3445 : Ojs.t) -> x3445
        let (resolve_webview_view :
          t ->
            webview_view:WebviewView.t ->
              context:unknown WebviewViewResolveContext.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3451 : t) ->
            fun ~webview_view:(x3447 : WebviewView.t) ->
              fun ~context:(x3448 : unknown WebviewViewResolveContext.t) ->
                fun ~token:(x3450 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3453 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3453)
                    (Ojs.call (t_to_js x3451) "resolveWebviewView"
                       [|(WebviewView.t_to_js x3447);(WebviewViewResolveContext.t_to_js
                                                        unknown_to_js x3448);(
                         CancellationToken.t_to_js x3450)|])
      end
    module CustomTextEditorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3456 : Ojs.t) -> x3456
        and t_to_js : t -> Ojs.t = fun (x3455 : Ojs.t) -> x3455
        let (resolve_custom_text_editor :
          t ->
            document:TextDocument.t ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3460 : t) ->
            fun ~document:(x3457 : TextDocument.t) ->
              fun ~webview_panel:(x3458 : WebviewPanel.t) ->
                fun ~token:(x3459 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3462 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3462)
                    (Ojs.call (t_to_js x3460) "resolveCustomTextEditor"
                       [|(TextDocument.t_to_js x3457);(WebviewPanel.t_to_js
                                                         x3458);(CancellationToken.t_to_js
                                                                   x3459)|])
      end
    module CustomDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3465 : Ojs.t) -> x3465
        and t_to_js : t -> Ojs.t = fun (x3464 : Ojs.t) -> x3464
        let (uri : t -> Uri.t) =
          fun (x3466 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3466) "uri")
        let (dispose : t -> unit) =
          fun (x3467 : t) -> ignore (Ojs.call (t_to_js x3467) "dispose" [||])
      end
    module CustomDocumentEditEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3469 : Ojs.t) -> x3469
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3468 : Ojs.t) -> x3468
        let (document : 'T t -> 'T) =
          fun (x3470 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3470) "document")
        let (undo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3472 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3475 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3475)
              (Ojs.call (t_to_js Obj.magic x3472) "undo" [||])
        let (redo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3477 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3480 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3480)
              (Ojs.call (t_to_js Obj.magic x3477) "redo" [||])
        let (label : 'T t -> string) =
          fun (x3482 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3482) "label")
      end
    module CustomDocumentContentChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3485 : Ojs.t) -> x3485
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3484 : Ojs.t) -> x3484
        let (document : 'T t -> 'T) =
          fun (x3486 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3486) "document")
      end
    module CustomDocumentBackup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3489 : Ojs.t) -> x3489
        and t_to_js : t -> Ojs.t = fun (x3488 : Ojs.t) -> x3488
        let (id : t -> string) =
          fun (x3490 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3490) "id")
        let (delete : t -> unit) =
          fun (x3491 : t) -> ignore (Ojs.call (t_to_js x3491) "delete" [||])
      end
    module CustomDocumentBackupContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3493 : Ojs.t) -> x3493
        and t_to_js : t -> Ojs.t = fun (x3492 : Ojs.t) -> x3492
        let (destination : t -> Uri.t) =
          fun (x3494 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3494) "destination")
      end
    module CustomDocumentOpenContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3496 : Ojs.t) -> x3496
        and t_to_js : t -> Ojs.t = fun (x3495 : Ojs.t) -> x3495
        let (backup_id : t -> string) =
          fun (x3497 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3497) "backupId")
        let (untitled_document_data : t -> Uint8Array.t) =
          fun (x3498 : t) ->
            Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3498) "untitledDocumentData")
      end
    module CustomReadonlyEditorProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3500 : Ojs.t) -> x3500
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3499 : Ojs.t) -> x3499
        let (open_custom_document :
          'T t ->
            uri:Uri.t ->
              open_context:CustomDocumentOpenContext.t ->
                token:CancellationToken.t -> ('T, 'T Promise.t) union2)
          =
          fun (x3504 : 'T t) ->
            fun ~uri:(x3501 : Uri.t) ->
              fun ~open_context:(x3502 : CustomDocumentOpenContext.t) ->
                fun ~token:(x3503 : CancellationToken.t) ->
                  union2_of_js Obj.magic
                    (fun (x3507 : Ojs.t) -> Promise.t_of_js Obj.magic x3507)
                    (Ojs.call (t_to_js Obj.magic x3504) "openCustomDocument"
                       [|(Uri.t_to_js x3501);(CustomDocumentOpenContext.t_to_js
                                                x3502);(CancellationToken.t_to_js
                                                          x3503)|])
        let (resolve_custom_editor :
          'T t ->
            document:'T ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3512 : 'T t) ->
            fun ~document:(x3509 : 'T) ->
              fun ~webview_panel:(x3510 : WebviewPanel.t) ->
                fun ~token:(x3511 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3515 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3515)
                    (Ojs.call (t_to_js Obj.magic x3512) "resolveCustomEditor"
                       [|(Obj.magic x3509);(WebviewPanel.t_to_js x3510);(
                         CancellationToken.t_to_js x3511)|])
      end
    module CustomEditorProvider =
      struct
        include struct include CustomReadonlyEditorProvider end
        let (on_did_change_custom_document :
          'T t ->
            ('T CustomDocumentContentChangeEvent.t Event.t,
              'T CustomDocumentEditEvent.t Event.t) union2)
          =
          fun (x3517 : 'T t) ->
            union2_of_js
              (fun (x3519 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3520 : Ojs.t) ->
                      CustomDocumentContentChangeEvent.t_of_js Obj.magic
                        x3520) x3519)
              (fun (x3522 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3523 : Ojs.t) ->
                      CustomDocumentEditEvent.t_of_js Obj.magic x3523) x3522)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3517)
                 "onDidChangeCustomDocument")
        let (save_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3527 : 'T t) ->
            fun ~document:(x3525 : 'T) ->
              fun ~cancellation:(x3526 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3527) "saveCustomDocument"
                     [|(Obj.magic x3525);(CancellationToken.t_to_js x3526)|])
        let (save_custom_document_as :
          'T t ->
            document:'T ->
              destination:Uri.t ->
                cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3533 : 'T t) ->
            fun ~document:(x3530 : 'T) ->
              fun ~destination:(x3531 : Uri.t) ->
                fun ~cancellation:(x3532 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js Obj.magic x3533)
                       "saveCustomDocumentAs"
                       [|(Obj.magic x3530);(Uri.t_to_js x3531);(CancellationToken.t_to_js
                                                                  x3532)|])
        let (revert_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3538 : 'T t) ->
            fun ~document:(x3536 : 'T) ->
              fun ~cancellation:(x3537 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3538) "revertCustomDocument"
                     [|(Obj.magic x3536);(CancellationToken.t_to_js x3537)|])
        let (backup_custom_document :
          'T t ->
            document:'T ->
              context:CustomDocumentBackupContext.t ->
                cancellation:CancellationToken.t ->
                  CustomDocumentBackup.t Promise.t)
          =
          fun (x3544 : 'T t) ->
            fun ~document:(x3541 : 'T) ->
              fun ~context:(x3542 : CustomDocumentBackupContext.t) ->
                fun ~cancellation:(x3543 : CancellationToken.t) ->
                  Promise.t_of_js CustomDocumentBackup.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3544)
                       "backupCustomDocument"
                       [|(Obj.magic x3541);(CustomDocumentBackupContext.t_to_js
                                              x3542);(CancellationToken.t_to_js
                                                        x3543)|])
        include struct include CustomReadonlyEditorProvider end
      end
    module Clipboard =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3548 : Ojs.t) -> x3548
        and t_to_js : t -> Ojs.t = fun (x3547 : Ojs.t) -> x3547
        let (read_text : t -> string Promise.t) =
          fun (x3549 : t) ->
            Promise.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x3549) "readText" [||])
        let (write_text : t -> value:string -> unit Promise.t) =
          fun (x3552 : t) ->
            fun ~value:(x3551 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3552) "writeText"
                   [|(Ojs.string_to_js x3551)|])
      end
    module UIKind =
      struct
        type t = [ `Desktop  | `Web ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3555 : Ojs.t) ->
            let x3556 = x3555 in
            match Ojs.int_of_js x3556 with
            | 1 -> `Desktop
            | 2 -> `Web
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3554 : [ `Desktop  | `Web ]) ->
            match x3554 with
            | `Desktop -> Ojs.int_to_js 1
            | `Web -> Ojs.int_to_js 2
      end
    module Env =
      struct
        let (app_name : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appName")
        let (app_root : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appRoot")
        let (uri_scheme : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uriScheme")
        let (language : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "language")
        let (clipboard : Clipboard.t) =
          Clipboard.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "clipboard")
        let (machine_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "machineId")
        let (session_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "sessionId")
        let (is_new_app_install : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isNewAppInstall")
        let (is_telemetry_enabled : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isTelemetryEnabled")
        let (on_did_change_telemetry_enabled : bool Event.t) =
          Event.t_of_js Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "onDidChangeTelemetryEnabled")
        let (remote_name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "remoteName")
        let (shell : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "shell")
        let (ui_kind : UIKind.t) =
          UIKind.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uiKind")
        let (open_external : target:Uri.t -> bool Promise.t) =
          fun ~target:(x3559 : Uri.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "openExternal" [|(Uri.t_to_js x3559)|])
        let (as_external_uri : target:Uri.t -> Uri.t Promise.t) =
          fun ~target:(x3561 : Uri.t) ->
            Promise.t_of_js Uri.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "asExternalUri" [|(Uri.t_to_js x3561)|])
      end
    module Commands =
      struct
        let (register_command : string -> (any list -> 'a) -> Disposable.t) =
          fun (x3563 : string) ->
            fun (x3564 : any list -> 'a) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerCommand"
                   [|(Ojs.string_to_js x3563);(Ojs.fun_to_js_args
                                                 (fun (x3565 : _) ->
                                                    Obj.magic
                                                      (x3564
                                                         (Ojs.list_of_js_from
                                                            any_of_js x3565 0))))|])
        let (register_text_editor_command :
          string ->
            (textEditor:TextEditor.t ->
               edit:TextEditorEdit.t -> args:any list -> unit)
              -> Disposable.t)
          =
          fun (x3567 : string) ->
            fun
              (x3568 :
                textEditor:TextEditor.t ->
                  edit:TextEditorEdit.t -> args:any list -> unit)
              ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerTextEditorCommand"
                   [|(Ojs.string_to_js x3567);(Ojs.fun_to_js_args
                                                 (fun (x3569 : _) ->
                                                    x3568
                                                      ~textEditor:(TextEditor.t_of_js
                                                                    (Ojs.array_get
                                                                    x3569 0))
                                                      ~edit:(TextEditorEdit.t_of_js
                                                               (Ojs.array_get
                                                                  x3569 1))
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js
                                                               x3569 2)))|])
        let (execute_command :
          string -> any list -> 'T or_undefined Promise.t) =
          fun (x3571 : string) ->
            fun (x3572 : any list) ->
              Promise.t_of_js
                (fun (x3576 : Ojs.t) -> or_undefined_of_js Obj.magic x3576)
                (let x3575 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3575 "executeCommand") "apply"
                   [|x3575;((let x3573 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3573 "push"
                                  [|(Ojs.string_to_js x3571)|]);
                             List.iter
                               (fun (x3574 : any) ->
                                  ignore
                                    (Ojs.call x3573 "push"
                                       [|(any_to_js x3574)|])) x3572;
                             x3573))|])
        let (get_commands :
          ?filter_internal:bool -> unit -> string list Promise.t) =
          fun ?filter_internal:(x3578 : bool option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3582 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3582)
                (let x3581 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3581 "getCommands") "apply"
                   [|x3581;((let x3579 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3578 with
                              | Some x3580 ->
                                  ignore
                                    (Ojs.call x3579 "push"
                                       [|(Ojs.bool_to_js x3580)|])
                              | None -> ());
                             x3579))|])
      end
    module WindowState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3585 : Ojs.t) -> x3585
        and t_to_js : t -> Ojs.t = fun (x3584 : Ojs.t) -> x3584
        let (focused : t -> bool) =
          fun (x3586 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3586) "focused")
      end
    module UriHandler =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3588 : Ojs.t) -> x3588
        and t_to_js : t -> Ojs.t = fun (x3587 : Ojs.t) -> x3587
        let (handle_uri : t -> uri:Uri.t -> unit ProviderResult.t) =
          fun (x3590 : t) ->
            fun ~uri:(x3589 : Uri.t) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3590) "handleUri" [|(Uri.t_to_js x3589)|])
      end
    module QuickInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3593 : Ojs.t) -> x3593
        and t_to_js : t -> Ojs.t = fun (x3592 : Ojs.t) -> x3592
        let (title : t -> string or_undefined) =
          fun (x3594 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3594) "title")
        let (set_title : t -> string or_undefined -> unit) =
          fun (x3596 : t) ->
            fun (x3597 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3596) "title"
                (or_undefined_to_js Ojs.string_to_js x3597)
        let (step : t -> int or_undefined) =
          fun (x3599 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3599) "step")
        let (set_step : t -> int or_undefined -> unit) =
          fun (x3601 : t) ->
            fun (x3602 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3601) "step"
                (or_undefined_to_js Ojs.int_to_js x3602)
        let (total_steps : t -> int or_undefined) =
          fun (x3604 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3604) "totalSteps")
        let (set_total_steps : t -> int or_undefined -> unit) =
          fun (x3606 : t) ->
            fun (x3607 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3606) "totalSteps"
                (or_undefined_to_js Ojs.int_to_js x3607)
        let (enabled : t -> bool) =
          fun (x3609 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3609) "enabled")
        let (set_enabled : t -> bool -> unit) =
          fun (x3610 : t) ->
            fun (x3611 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3610) "enabled"
                (Ojs.bool_to_js x3611)
        let (busy : t -> bool) =
          fun (x3612 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3612) "busy")
        let (set_busy : t -> bool -> unit) =
          fun (x3613 : t) ->
            fun (x3614 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3613) "busy"
                (Ojs.bool_to_js x3614)
        let (ignore_focus_out : t -> bool) =
          fun (x3615 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3615) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x3616 : t) ->
            fun (x3617 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3616) "ignoreFocusOut"
                (Ojs.bool_to_js x3617)
        let (show : t -> unit) =
          fun (x3618 : t) -> ignore (Ojs.call (t_to_js x3618) "show" [||])
        let (hide : t -> unit) =
          fun (x3619 : t) -> ignore (Ojs.call (t_to_js x3619) "hide" [||])
        let (on_did_hide : t -> unit Event.t) =
          fun (x3620 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3620) "onDidHide")
        let (set_on_did_hide : t -> unit Event.t -> unit) =
          fun (x3622 : t) ->
            fun (x3623 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x3622) "onDidHide"
                (Event.t_to_js Ojs.unit_to_js x3623)
        let (dispose : t -> unit) =
          fun (x3625 : t) -> ignore (Ojs.call (t_to_js x3625) "dispose" [||])
      end
    module QuickInputButton =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3627 : Ojs.t) -> x3627
        and t_to_js : t -> Ojs.t = fun (x3626 : Ojs.t) -> x3626
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x3628 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3628) "iconPath")
        let (tooltip : t -> string or_undefined) =
          fun (x3632 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3632) "tooltip")
      end
    module QuickInputButtons =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3635 : Ojs.t) -> x3635
        and t_to_js : t -> Ojs.t = fun (x3634 : Ojs.t) -> x3634
        let (back : unit -> QuickInputButton.t) =
          fun () ->
            QuickInputButton.t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") "Back")
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") [||])
      end
    module QuickPick =
      struct
        include struct include QuickInput end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3637 : Ojs.t) -> x3637
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3636 : Ojs.t) -> x3636
        let (value : 'T t -> string) =
          fun (x3638 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3638) "value")
        let (set_value : 'T t -> string -> unit) =
          fun (x3640 : 'T t) ->
            fun (x3641 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3640) "value"
                (Ojs.string_to_js x3641)
        let (placeholder : 'T t -> string or_undefined) =
          fun (x3643 : 'T t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3643) "placeholder")
        let (set_placeholder : 'T t -> string or_undefined -> unit) =
          fun (x3646 : 'T t) ->
            fun (x3647 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3646) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3647)
        let (on_did_change_value : 'T t -> string Event.t) =
          fun (x3650 : 'T t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3650)
                 "onDidChangeValue")
        let (on_did_accept : 'T t -> unit Event.t) =
          fun (x3653 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3653) "onDidAccept")
        let (buttons : 'T t -> QuickInputButton.t list) =
          fun (x3656 : 'T t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3656) "buttons")
        let (set_buttons : 'T t -> QuickInputButton.t list -> unit) =
          fun (x3659 : 'T t) ->
            fun (x3660 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3659) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3660)
        let (on_did_trigger_button : 'T t -> QuickInputButton.t Event.t) =
          fun (x3663 : 'T t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3663)
                 "onDidTriggerButton")
        let (items : 'T t -> 'T list) =
          fun (x3666 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3666) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x3669 : 'T t) ->
            fun (x3670 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3669) "items"
                (Ojs.list_to_js Obj.magic x3670)
        let (can_select_many : 'T t -> bool) =
          fun (x3673 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3673) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3675 : 'T t) ->
            fun (x3676 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3675) "canSelectMany"
                (Ojs.bool_to_js x3676)
        let (match_on_description : 'T t -> bool) =
          fun (x3678 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3678)
                 "matchOnDescription")
        let (set_match_on_description : 'T t -> bool -> unit) =
          fun (x3680 : 'T t) ->
            fun (x3681 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3680)
                "matchOnDescription" (Ojs.bool_to_js x3681)
        let (match_on_detail : 'T t -> bool) =
          fun (x3683 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3683) "matchOnDetail")
        let (set_match_on_detail : 'T t -> bool -> unit) =
          fun (x3685 : 'T t) ->
            fun (x3686 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3685) "matchOnDetail"
                (Ojs.bool_to_js x3686)
        let (active_items : 'T t -> 'T list) =
          fun (x3688 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3688) "activeItems")
        let (set_active_items : 'T t -> 'T list -> unit) =
          fun (x3691 : 'T t) ->
            fun (x3692 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3691) "activeItems"
                (Ojs.list_to_js Obj.magic x3692)
        let (on_did_change_active : 'T t -> 'T list Event.t) =
          fun (x3695 : 'T t) ->
            Event.t_of_js
              (fun (x3697 : Ojs.t) -> Ojs.list_of_js Obj.magic x3697)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3695)
                 "onDidChangeActive")
        let (selected_items : 'T t -> 'T list) =
          fun (x3699 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3699) "selectedItems")
        let (set_selected_items : 'T t -> 'T list -> unit) =
          fun (x3702 : 'T t) ->
            fun (x3703 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3702) "selectedItems"
                (Ojs.list_to_js Obj.magic x3703)
        let (on_did_change_selection : 'T t -> 'T list Event.t) =
          fun (x3706 : 'T t) ->
            Event.t_of_js
              (fun (x3708 : Ojs.t) -> Ojs.list_of_js Obj.magic x3708)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3706)
                 "onDidChangeSelection")
      end
    module InputBox =
      struct
        include struct include QuickInput end
        let (value : t -> string) =
          fun (x3710 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3710) "value")
        let (set_value : t -> string -> unit) =
          fun (x3711 : t) ->
            fun (x3712 : string) ->
              Ojs.set_prop_ascii (t_to_js x3711) "value"
                (Ojs.string_to_js x3712)
        let (placeholder : t -> string or_undefined) =
          fun (x3713 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3713) "placeholder")
        let (set_placeholder : t -> string or_undefined -> unit) =
          fun (x3715 : t) ->
            fun (x3716 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3715) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3716)
        let (password : t -> bool) =
          fun (x3718 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3718) "password")
        let (set_password : t -> bool -> unit) =
          fun (x3719 : t) ->
            fun (x3720 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3719) "password"
                (Ojs.bool_to_js x3720)
        let (on_did_change_value : t -> string Event.t) =
          fun (x3721 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3721) "onDidChangeValue")
        let (on_did_accept : t -> unit Event.t) =
          fun (x3723 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3723) "onDidAccept")
        let (buttons : t -> QuickInputButton.t list) =
          fun (x3725 : t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3725) "buttons")
        let (set_buttons : t -> QuickInputButton.t list -> unit) =
          fun (x3727 : t) ->
            fun (x3728 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js x3727) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3728)
        let (on_did_trigger_button : t -> QuickInputButton.t Event.t) =
          fun (x3730 : t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3730) "onDidTriggerButton")
        let (prompt : t -> string or_undefined) =
          fun (x3732 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3732) "prompt")
        let (set_prompt : t -> string or_undefined -> unit) =
          fun (x3734 : t) ->
            fun (x3735 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3734) "prompt"
                (or_undefined_to_js Ojs.string_to_js x3735)
        let (validation_message : t -> string or_undefined) =
          fun (x3737 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3737) "validationMessage")
        let (set_validation_message : t -> string or_undefined -> unit) =
          fun (x3739 : t) ->
            fun (x3740 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3739) "validationMessage"
                (or_undefined_to_js Ojs.string_to_js x3740)
      end
    module ProgressLocation =
      struct
        type t = [ `Window  | `Notification ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3743 : Ojs.t) ->
            let x3744 = x3743 in
            match Ojs.int_of_js x3744 with
            | 10 -> `Window
            | 15 -> `Notification
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3742 : [ `Window  | `Notification ]) ->
            match x3742 with
            | `Window -> Ojs.int_to_js 10
            | `Notification -> Ojs.int_to_js 15
      end
    module ProgressOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3746 : Ojs.t) -> x3746
        and t_to_js : t -> Ojs.t = fun (x3745 : Ojs.t) -> x3745
        module ViewId =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3748 : Ojs.t) -> x3748
            and t_to_js : t -> Ojs.t = fun (x3747 : Ojs.t) -> x3747
            let (view_id : t -> string) =
              fun (x3749 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3749) "viewId")
            let (set_view_id : t -> string -> unit) =
              fun (x3750 : t) ->
                fun (x3751 : string) ->
                  Ojs.set_prop_ascii (t_to_js x3750) "viewId"
                    (Ojs.string_to_js x3751)
          end
        let (location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum)
          =
          fun (x3752 : t) ->
            or_enum_of_js
              (fun (x3753 : Ojs.t) ->
                 union2_of_js ProgressLocation.t_of_js ViewId.t_of_js x3753)
              (fun (x3756 : Ojs.t) ->
                 let x3757 = x3756 in
                 match Ojs.int_of_js x3757 with
                 | 15 -> `Notification
                 | 1 -> `SourceControl
                 | 10 -> `Window
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x3752) "location")
        let (set_location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum -> 
              unit)
          =
          fun (x3758 : t) ->
            fun
              (x3759 :
                ((ProgressLocation.t, ViewId.t) union2,
                  [ `Notification  | `SourceControl  | `Window ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x3758) "location"
                (or_enum_to_js
                   (fun (x3760 : (ProgressLocation.t, ViewId.t) union2) ->
                      union2_to_js ProgressLocation.t_to_js ViewId.t_to_js
                        x3760)
                   (fun
                      (x3763 :
                        [ `Notification  | `SourceControl  | `Window ])
                      ->
                      match x3763 with
                      | `Notification -> Ojs.string_to_js "Notification"
                      | `SourceControl -> Ojs.string_to_js "SourceControl"
                      | `Window -> Ojs.string_to_js "Window") x3759)
        let (title : t -> string) =
          fun (x3764 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3764) "title")
        let (set_title : t -> string -> unit) =
          fun (x3765 : t) ->
            fun (x3766 : string) ->
              Ojs.set_prop_ascii (t_to_js x3765) "title"
                (Ojs.string_to_js x3766)
        let (cancellable : t -> bool) =
          fun (x3767 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3767) "cancellable")
        let (set_cancellable : t -> bool -> unit) =
          fun (x3768 : t) ->
            fun (x3769 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3768) "cancellable"
                (Ojs.bool_to_js x3769)
      end
    module TreeItemCollapsibleState =
      struct
        type t = [ `None  | `Collapsed  | `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3771 : Ojs.t) ->
            let x3772 = x3771 in
            match Ojs.int_of_js x3772 with
            | 0 -> `None
            | 1 -> `Collapsed
            | 2 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3770 : [ `None  | `Collapsed  | `Expanded ]) ->
            match x3770 with
            | `None -> Ojs.int_to_js 0
            | `Collapsed -> Ojs.int_to_js 1
            | `Expanded -> Ojs.int_to_js 2
      end
    module TreeItemLabel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3774 : Ojs.t) -> x3774
        and t_to_js : t -> Ojs.t = fun (x3773 : Ojs.t) -> x3773
        let (label : t -> string) =
          fun (x3775 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3775) "label")
        let (set_label : t -> string -> unit) =
          fun (x3776 : t) ->
            fun (x3777 : string) ->
              Ojs.set_prop_ascii (t_to_js x3776) "label"
                (Ojs.string_to_js x3777)
        let (highlights : t -> (int * int) list) =
          fun (x3778 : t) ->
            Ojs.list_of_js
              (fun (x3779 : Ojs.t) ->
                 let x3780 = x3779 in
                 ((Ojs.int_of_js (Ojs.array_get x3780 0)),
                   (Ojs.int_of_js (Ojs.array_get x3780 1))))
              (Ojs.get_prop_ascii (t_to_js x3778) "highlights")
        let (set_highlights : t -> (int * int) list -> unit) =
          fun (x3781 : t) ->
            fun (x3782 : (int * int) list) ->
              Ojs.set_prop_ascii (t_to_js x3781) "highlights"
                (Ojs.list_to_js
                   (fun (x3783 : (int * int)) ->
                      let (x3784, x3785) = x3783 in
                      let x3786 = Ojs.array_make 2 in
                      Ojs.array_set x3786 0 (Ojs.int_to_js x3784);
                      Ojs.array_set x3786 1 (Ojs.int_to_js x3785);
                      x3786) x3782)
        let (create :
          label:string -> ?highlights:(int * int) list -> unit -> t) =
          fun ~label:(x3787 : string) ->
            fun ?highlights:(x3788 : (int * int) list option) ->
              fun () ->
                let x3789 = Ojs.empty_obj () in
                Ojs.set_prop_ascii x3789 "label" (Ojs.string_to_js x3787);
                (match x3788 with
                 | Some x3790 ->
                     Ojs.set_prop_ascii x3789 "highlights"
                       (Ojs.list_to_js
                          (fun (x3791 : (int * int)) ->
                             let (x3792, x3793) = x3791 in
                             let x3794 = Ojs.array_make 2 in
                             Ojs.array_set x3794 0 (Ojs.int_to_js x3792);
                             Ojs.array_set x3794 1 (Ojs.int_to_js x3793);
                             x3794) x3790)
                 | None -> ());
                t_of_js x3789
      end
    module TreeItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3796 : Ojs.t) -> x3796
        and t_to_js : t -> Ojs.t = fun (x3795 : Ojs.t) -> x3795
        let (label : t -> TreeItemLabel.t or_string) =
          fun (x3797 : t) ->
            or_string_of_js TreeItemLabel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3797) "label")
        let (set_label : t -> TreeItemLabel.t or_string -> unit) =
          fun (x3799 : t) ->
            fun (x3800 : TreeItemLabel.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x3799) "label"
                (or_string_to_js TreeItemLabel.t_to_js x3800)
        let (id : t -> string) =
          fun (x3802 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3802) "id")
        let (set_id : t -> string -> unit) =
          fun (x3803 : t) ->
            fun (x3804 : string) ->
              Ojs.set_prop_ascii (t_to_js x3803) "id"
                (Ojs.string_to_js x3804)
        let (icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 or_string) =
          fun (x3805 : t) ->
            or_string_of_js
              (fun (x3806 : Ojs.t) ->
                 union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
                   x3806) (Ojs.get_prop_ascii (t_to_js x3805) "iconPath")
        let (set_icon_path :
          t ->
            [ `ThemeIcon of ThemeIcon.t  | `Uri of Uri.t 
            | `IconPath of IconPath.t  | `String of string ] -> unit)
          =
          fun (x3810 : t) ->
            fun
              (x3811 :
                [ `ThemeIcon of ThemeIcon.t  | `Uri of Uri.t 
                | `IconPath of IconPath.t  | `String of string ])
              ->
              Ojs.set_prop_ascii (t_to_js x3810) "iconPath"
                (match x3811 with
                 | `ThemeIcon x3812 -> ThemeIcon.t_to_js x3812
                 | `Uri x3813 -> Uri.t_to_js x3813
                 | `IconPath x3814 -> IconPath.t_to_js x3814
                 | `String x3815 -> Ojs.string_to_js x3815)
        let (description : t -> bool or_string) =
          fun (x3816 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3816) "description")
        let (set_description : t -> bool or_string -> unit) =
          fun (x3818 : t) ->
            fun (x3819 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x3818) "description"
                (or_string_to_js Ojs.bool_to_js x3819)
        let (resource_uri : t -> Uri.t) =
          fun (x3821 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3821) "resourceUri")
        let (set_resource_uri : t -> Uri.t -> unit) =
          fun (x3822 : t) ->
            fun (x3823 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x3822) "resourceUri"
                (Uri.t_to_js x3823)
        let (tooltip : t -> MarkdownString.t or_string or_undefined) =
          fun (x3824 : t) ->
            or_undefined_of_js
              (fun (x3825 : Ojs.t) ->
                 or_string_of_js MarkdownString.t_of_js x3825)
              (Ojs.get_prop_ascii (t_to_js x3824) "tooltip")
        let (set_tooltip :
          t -> MarkdownString.t or_string or_undefined -> unit) =
          fun (x3827 : t) ->
            fun (x3828 : MarkdownString.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3827) "tooltip"
                (or_undefined_to_js
                   (fun (x3829 : MarkdownString.t or_string) ->
                      or_string_to_js MarkdownString.t_to_js x3829) x3828)
        let (command : t -> Command.t) =
          fun (x3831 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x3831) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x3832 : t) ->
            fun (x3833 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x3832) "command"
                (Command.t_to_js x3833)
        let (collapsible_state : t -> TreeItemCollapsibleState.t) =
          fun (x3834 : t) ->
            TreeItemCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3834) "collapsibleState")
        let (set_collapsible_state : t -> TreeItemCollapsibleState.t -> unit)
          =
          fun (x3835 : t) ->
            fun (x3836 : TreeItemCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x3835) "collapsibleState"
                (TreeItemCollapsibleState.t_to_js x3836)
        let (context_value : t -> string) =
          fun (x3837 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3837) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x3838 : t) ->
            fun (x3839 : string) ->
              Ojs.set_prop_ascii (t_to_js x3838) "contextValue"
                (Ojs.string_to_js x3839)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x3840 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3840) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x3841 : t) ->
            fun (x3842 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x3841) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x3842)
        let (create :
          label:[ `String of string  | `TreeItemLabel of TreeItemLabel.t 
                | `Uri of Uri.t ]
            -> ?collapsible_state:TreeItemCollapsibleState.t -> unit -> t)
          =
          fun
            ~label:(x3843 :
                     [ `String of string 
                     | `TreeItemLabel of TreeItemLabel.t  | `Uri of Uri.t ])
            ->
            fun
              ?collapsible_state:(x3844 : TreeItemCollapsibleState.t option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "TreeItem")
                     (let x3845 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3845 "push"
                           [|((match x3843 with
                               | `String x3847 -> Ojs.string_to_js x3847
                               | `TreeItemLabel x3848 ->
                                   TreeItemLabel.t_to_js x3848
                               | `Uri x3849 -> Uri.t_to_js x3849))|]);
                      (match x3844 with
                       | Some x3846 ->
                           ignore
                             (Ojs.call x3845 "push"
                                [|(TreeItemCollapsibleState.t_to_js x3846)|])
                       | None -> ());
                      x3845))
      end
    module TreeDataProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3851 : Ojs.t) -> x3851
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3850 : Ojs.t) -> x3850
        module OnDidChangeTreeData =
          struct
            type 'T t = 'T or_null_or_undefined Event.t
            let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
              __T) ->
              fun (__T_of_js : Ojs.t -> __T) ->
                fun (x3855 : Ojs.t) ->
                  Event.t_of_js
                    (fun (x3856 : Ojs.t) ->
                       or_null_or_undefined_of_js __T_of_js x3856) x3855
            and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type
              __T) ->
              fun (__T_to_js : __T -> Ojs.t) ->
                fun (x3852 : __T or_null_or_undefined Event.t) ->
                  Event.t_to_js
                    (fun (x3853 : __T or_null_or_undefined) ->
                       or_null_or_undefined_to_js __T_to_js x3853) x3852
          end
        let (on_did_change_tree_data : 'T t -> 'T OnDidChangeTreeData.t) =
          fun (x3858 : 'T t) ->
            OnDidChangeTreeData.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3858)
                 "onDidChangeTreeData")
        let (set_on_did_change_tree_data :
          'T t -> 'T OnDidChangeTreeData.t -> unit) =
          fun (x3861 : 'T t) ->
            fun (x3862 : 'T OnDidChangeTreeData.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3861)
                "onDidChangeTreeData"
                (OnDidChangeTreeData.t_to_js Obj.magic x3862)
        let (get_tree_item :
          'T t -> 'T -> (TreeItem.t, TreeItem.t Promise.t) union2) =
          fun (x3866 : 'T t) ->
            fun (x3865 : 'T) ->
              union2_of_js TreeItem.t_of_js
                (fun (x3869 : Ojs.t) ->
                   Promise.t_of_js TreeItem.t_of_js x3869)
                (Ojs.call (t_to_js Obj.magic x3866) "getTreeItem"
                   [|(Obj.magic x3865)|])
        let (get_children :
          'T t -> ?element:'T -> unit -> 'T list ProviderResult.t) =
          fun (x3874 : 'T t) ->
            fun ?element:(x3871 : 'T option) ->
              fun () ->
                ProviderResult.t_of_js
                  (fun (x3877 : Ojs.t) -> Ojs.list_of_js Obj.magic x3877)
                  (let x3876 = t_to_js Obj.magic x3874 in
                   Ojs.call (Ojs.get_prop_ascii x3876 "getChildren") "apply"
                     [|x3876;((let x3872 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3871 with
                                | Some x3873 ->
                                    ignore
                                      (Ojs.call x3872 "push"
                                         [|(Obj.magic x3873)|])
                                | None -> ());
                               x3872))|])
        let (get_parent : 'T t -> 'T -> 'T ProviderResult.t) =
          fun (x3880 : 'T t) ->
            fun (x3879 : 'T) ->
              ProviderResult.t_of_js Obj.magic
                (Ojs.call (t_to_js Obj.magic x3880) "getParent"
                   [|(Obj.magic x3879)|])
        let (resolve_tree_item :
          'T t ->
            item:TreeItem.t ->
              element:'T ->
                token:CancellationToken.t -> TreeItem.t ProviderResult.t)
          =
          fun (x3886 : 'T t) ->
            fun ~item:(x3883 : TreeItem.t) ->
              fun ~element:(x3884 : 'T) ->
                fun ~token:(x3885 : CancellationToken.t) ->
                  ProviderResult.t_of_js TreeItem.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3886) "resolveTreeItem"
                       [|(TreeItem.t_to_js x3883);(Obj.magic x3884);(
                         CancellationToken.t_to_js x3885)|])
        let (create :
          ?on_did_change_tree_data:'T OnDidChangeTreeData.t ->
            get_tree_item:('T ->
                             [ `Value of TreeItem.t 
                             | `Promise of TreeItem.t Promise.t ])
              ->
              get_children:(?element:'T -> unit -> 'T list ProviderResult.t)
                ->
                ?get_parent:('T -> 'T ProviderResult.t) ->
                  ?resolve_tree_item:(item:TreeItem.t ->
                                        element:'T ->
                                          token:CancellationToken.t ->
                                            TreeItem.t ProviderResult.t)
                    -> unit -> 'T t)
          =
          fun
            ?on_did_change_tree_data:(x3889 :
                                       'T OnDidChangeTreeData.t option)
            ->
            fun
              ~get_tree_item:(x3890 :
                               'T ->
                                 [ `Value of TreeItem.t 
                                 | `Promise of TreeItem.t Promise.t ])
              ->
              fun
                ~get_children:(x3891 :
                                ?element:'T ->
                                  unit -> 'T list ProviderResult.t)
                ->
                fun ?get_parent:(x3892 : ('T -> 'T ProviderResult.t) option)
                  ->
                  fun
                    ?resolve_tree_item:(x3893 :
                                         (item:TreeItem.t ->
                                            element:'T ->
                                              token:CancellationToken.t ->
                                                TreeItem.t ProviderResult.t)
                                           option)
                    ->
                    fun () ->
                      let x3894 = Ojs.empty_obj () in
                      (match x3889 with
                       | Some x3912 ->
                           Ojs.set_prop_ascii x3894 "onDidChangeTreeData"
                             (OnDidChangeTreeData.t_to_js Obj.magic x3912)
                       | None -> ());
                      Ojs.set_prop_ascii x3894 "getTreeItem"
                        (Ojs.fun_to_js 1
                           (fun (x3908 : Ojs.t) ->
                              match x3890 (Obj.magic x3908) with
                              | `Value x3909 -> TreeItem.t_to_js x3909
                              | `Promise x3910 ->
                                  Promise.t_to_js TreeItem.t_to_js x3910));
                      Ojs.set_prop_ascii x3894 "getChildren"
                        (Ojs.fun_to_js 1
                           (fun (x3904 : Ojs.t) ->
                              ProviderResult.t_to_js
                                (fun (x3906 : 'T list) ->
                                   Ojs.list_to_js Obj.magic x3906)
                                (x3891
                                   ?element:(Ojs.option_of_js Obj.magic x3904)
                                   ())));
                      (match x3892 with
                       | Some x3901 ->
                           Ojs.set_prop_ascii x3894 "getParent"
                             (Ojs.fun_to_js 1
                                (fun (x3902 : Ojs.t) ->
                                   ProviderResult.t_to_js Obj.magic
                                     (x3901 (Obj.magic x3902))))
                       | None -> ());
                      (match x3893 with
                       | Some x3896 ->
                           Ojs.set_prop_ascii x3894 "resolveTreeItem"
                             (Ojs.fun_to_js 3
                                (fun (x3897 : Ojs.t) ->
                                   fun (x3898 : Ojs.t) ->
                                     fun (x3899 : Ojs.t) ->
                                       ProviderResult.t_to_js
                                         TreeItem.t_to_js
                                         (x3896
                                            ~item:(TreeItem.t_of_js x3897)
                                            ~element:(Obj.magic x3898)
                                            ~token:(CancellationToken.t_of_js
                                                      x3899))))
                       | None -> ());
                      t_of_js Obj.magic x3894
      end
    module TreeViewOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3915 : Ojs.t) -> x3915
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3914 : Ojs.t) -> x3914
        let (tree_data_provider : 'T t -> 'T TreeDataProvider.t) =
          fun (x3916 : 'T t) ->
            TreeDataProvider.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3916)
                 "treeDataProvider")
        let (set_tree_data_provider : 'T t -> 'T TreeDataProvider.t -> unit)
          =
          fun (x3919 : 'T t) ->
            fun (x3920 : 'T TreeDataProvider.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3919) "treeDataProvider"
                (TreeDataProvider.t_to_js Obj.magic x3920)
        let (show_collapse_all : 'T t -> bool) =
          fun (x3923 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3923) "showCollapseAll")
        let (set_show_collapse_all : 'T t -> bool -> unit) =
          fun (x3925 : 'T t) ->
            fun (x3926 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3925) "showCollapseAll"
                (Ojs.bool_to_js x3926)
        let (can_select_many : 'T t -> bool) =
          fun (x3928 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3928) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3930 : 'T t) ->
            fun (x3931 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3930) "canSelectMany"
                (Ojs.bool_to_js x3931)
      end
    module TreeViewExpansionEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3934 : Ojs.t) -> x3934
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3933 : Ojs.t) -> x3933
        let (element : 'T t -> 'T) =
          fun (x3935 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3935) "element")
      end
    module TreeViewSelectionChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3938 : Ojs.t) -> x3938
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3937 : Ojs.t) -> x3937
        let (selection : 'T t -> 'T list) =
          fun (x3939 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3939) "selection")
      end
    module TreeViewVisibilityChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3943 : Ojs.t) -> x3943
        and t_to_js : t -> Ojs.t = fun (x3942 : Ojs.t) -> x3942
        let (visible : t -> bool) =
          fun (x3944 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3944) "visible")
      end
    module TreeView =
      struct
        include struct include Disposable end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3946 : Ojs.t) -> x3946
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3945 : Ojs.t) -> x3945
        let (on_did_expand_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3947 : 'T t) ->
            Event.t_of_js
              (fun (x3949 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3949)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3947)
                 "onDidExpandElement")
        let (on_did_collapse_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3951 : 'T t) ->
            Event.t_of_js
              (fun (x3953 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3953)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3951)
                 "onDidCollapseElement")
        let (selection : 'T t -> 'T list) =
          fun (x3955 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3955) "selection")
        let (on_did_change_selection :
          'T t -> 'T TreeViewSelectionChangeEvent.t Event.t) =
          fun (x3958 : 'T t) ->
            Event.t_of_js
              (fun (x3960 : Ojs.t) ->
                 TreeViewSelectionChangeEvent.t_of_js Obj.magic x3960)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3958)
                 "onDidChangeSelection")
        let (visible : 'T t -> bool) =
          fun (x3962 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3962) "visible")
        let (on_did_change_visibility :
          'T t -> TreeViewVisibilityChangeEvent.t Event.t) =
          fun (x3964 : 'T t) ->
            Event.t_of_js TreeViewVisibilityChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3964)
                 "onDidChangeVisibility")
        let (message : 'T t -> string) =
          fun (x3967 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3967) "message")
        let (set_message : 'T t -> string -> unit) =
          fun (x3969 : 'T t) ->
            fun (x3970 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3969) "message"
                (Ojs.string_to_js x3970)
        let (title : 'T t -> string) =
          fun (x3972 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3972) "title")
        let (set_title : 'T t -> string -> unit) =
          fun (x3974 : 'T t) ->
            fun (x3975 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3974) "title"
                (Ojs.string_to_js x3975)
        let (description : 'T t -> string) =
          fun (x3977 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3977) "description")
        let (set_description : 'T t -> string -> unit) =
          fun (x3979 : 'T t) ->
            fun (x3980 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3979) "description"
                (Ojs.string_to_js x3980)
        module RevealOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3983 : Ojs.t) -> x3983
            and t_to_js : t -> Ojs.t = fun (x3982 : Ojs.t) -> x3982
            let (select : t -> bool) =
              fun (x3984 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3984) "select")
            let (set_select : t -> bool -> unit) =
              fun (x3985 : t) ->
                fun (x3986 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3985) "select"
                    (Ojs.bool_to_js x3986)
            let (focus : t -> bool) =
              fun (x3987 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3987) "focus")
            let (set_focus : t -> bool -> unit) =
              fun (x3988 : t) ->
                fun (x3989 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3988) "focus"
                    (Ojs.bool_to_js x3989)
            let (expand : t -> bool or_number) =
              fun (x3990 : t) ->
                or_number_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3990) "expand")
            let (set_expand : t -> bool or_number -> unit) =
              fun (x3992 : t) ->
                fun (x3993 : bool or_number) ->
                  Ojs.set_prop_ascii (t_to_js x3992) "expand"
                    (or_number_to_js Ojs.bool_to_js x3993)
          end
        let (reveal :
          'T t -> 'T -> ?options:RevealOptions.t -> unit -> unit Promise.t) =
          fun (x3999 : 'T t) ->
            fun (x3995 : 'T) ->
              fun ?options:(x3996 : RevealOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x4001 = t_to_js Obj.magic x3999 in
                     Ojs.call (Ojs.get_prop_ascii x4001 "reveal") "apply"
                       [|x4001;((let x3997 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3997 "push"
                                      [|(Obj.magic x3995)|]);
                                 (match x3996 with
                                  | Some x3998 ->
                                      ignore
                                        (Ojs.call x3997 "push"
                                           [|(RevealOptions.t_to_js x3998)|])
                                  | None -> ());
                                 x3997))|])
      end
    module Window =
      struct
        let (active_text_editor : TextEditor.t or_undefined) =
          or_undefined_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTextEditor")
        let (visible_text_editors : TextEditor.t list) =
          Ojs.list_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "visibleTextEditors")
        let (on_did_change_active_text_editor :
          TextEditor.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x4005 : Ojs.t) ->
               or_undefined_of_js TextEditor.t_of_js x4005)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTextEditor")
        let (on_did_change_visible_text_editors : TextEditor.t list Event.t)
          =
          Event.t_of_js
            (fun (x4007 : Ojs.t) -> Ojs.list_of_js TextEditor.t_of_js x4007)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeVisibleTextEditors")
        let (on_did_change_text_editor_selection :
          TextEditorSelectionChangeEvent.t Event.t) =
          Event.t_of_js TextEditorSelectionChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorSelection")
        let (on_did_change_text_editor_visible_ranges :
          TextEditorVisibleRangesChangeEvent.t Event.t) =
          Event.t_of_js TextEditorVisibleRangesChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorVisibleRanges")
        let (on_did_change_text_editor_options :
          TextEditorOptionsChangeEvent.t Event.t) =
          Event.t_of_js TextEditorOptionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorOptions")
        let (on_did_change_text_editor_view_column :
          TextEditorViewColumnChangeEvent.t Event.t) =
          Event.t_of_js TextEditorViewColumnChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorViewColumn")
        let (terminals : Terminal.t list) =
          Ojs.list_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "terminals")
        let (active_terminal : Terminal.t or_undefined) =
          or_undefined_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTerminal")
        let (on_did_change_active_terminal : Terminal.t or_undefined Event.t)
          =
          Event.t_of_js
            (fun (x4015 : Ojs.t) -> or_undefined_of_js Terminal.t_of_js x4015)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTerminal")
        let (on_did_open_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidOpenTerminal")
        let (on_did_close_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidCloseTerminal")
        let (state : WindowState.t) =
          WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "state")
        let (on_did_change_window_state : WindowState.t Event.t) =
          Event.t_of_js WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeWindowState")
        let (show_text_document :
          TextDocument.t ->
            ?column:ViewColumn.t ->
              ?preserve_focus:bool -> unit -> TextEditor.t Promise.t)
          =
          fun (x4020 : TextDocument.t) ->
            fun ?column:(x4021 : ViewColumn.t option) ->
              fun ?preserve_focus:(x4022 : bool option) ->
                fun () ->
                  Promise.t_of_js TextEditor.t_of_js
                    (let x4026 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4026 "showTextDocument")
                       "apply"
                       [|x4026;((let x4023 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4023 "push"
                                      [|(TextDocument.t_to_js x4020)|]);
                                 (match x4021 with
                                  | Some x4025 ->
                                      ignore
                                        (Ojs.call x4023 "push"
                                           [|(ViewColumn.t_to_js x4025)|])
                                  | None -> ());
                                 (match x4022 with
                                  | Some x4024 ->
                                      ignore
                                        (Ojs.call x4023 "push"
                                           [|(Ojs.bool_to_js x4024)|])
                                  | None -> ());
                                 x4023))|])
        let (show_text_document_with_options :
          TextDocument.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x4028 : TextDocument.t) ->
            fun ?options:(x4029 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x4032 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4032 "showTextDocument")
                     "apply"
                     [|x4032;((let x4030 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4030 "push"
                                    [|(TextDocument.t_to_js x4028)|]);
                               (match x4029 with
                                | Some x4031 ->
                                    ignore
                                      (Ojs.call x4030 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x4031)|])
                                | None -> ());
                               x4030))|])
        let (show_text_document_with_uri :
          Uri.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x4034 : Uri.t) ->
            fun ?options:(x4035 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x4038 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4038 "showTextDocument")
                     "apply"
                     [|x4038;((let x4036 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4036 "push"
                                    [|(Uri.t_to_js x4034)|]);
                               (match x4035 with
                                | Some x4037 ->
                                    ignore
                                      (Ojs.call x4036 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x4037)|])
                                | None -> ());
                               x4036))|])
        let (create_text_editor_decoration_type :
          DecorationRenderOptions.t -> TextEditorDecorationType.t) =
          fun (x4040 : DecorationRenderOptions.t) ->
            TextEditorDecorationType.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTextEditorDecorationType"
                 [|(DecorationRenderOptions.t_to_js x4040)|])
        let (show_information_message :
          string ->
            ?options:MessageOptions.t ->
              ?choices:(string * 'T) list ->
                unit -> 'T or_undefined Promise.t)
          =
          fun (x4041 : string) ->
            fun ?options:(x4042 : MessageOptions.t option) ->
              fun ?choices:(x4043 : (string * 'T) list option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4052 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4052)
                    (let x4051 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4051 "showInformationMessage")
                       "apply"
                       [|x4051;((let x4044 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4044 "push"
                                      [|(Ojs.string_to_js x4041)|]);
                                 (match x4042 with
                                  | Some x4050 ->
                                      ignore
                                        (Ojs.call x4044 "push"
                                           [|(MessageOptions.t_to_js x4050)|])
                                  | None -> ());
                                 (match x4043 with
                                  | Some x4045 ->
                                      ignore
                                        (Ojs.call x4044 "push"
                                           [|(Ojs.list_to_js
                                                (fun (x4046 : (string * 'T))
                                                   ->
                                                   let (x4047, x4048) = x4046 in
                                                   let x4049 =
                                                     Ojs.array_make 2 in
                                                   Ojs.array_set x4049 0
                                                     (Ojs.string_to_js x4047);
                                                   Ojs.array_set x4049 1
                                                     (Obj.magic x4048);
                                                   x4049) x4045)|])
                                  | None -> ());
                                 x4044))|])
        let (show_warning_message :
          string ->
            ?options:MessageOptions.t ->
              ?choices:(string * 'T) list ->
                unit -> 'T or_undefined Promise.t)
          =
          fun (x4054 : string) ->
            fun ?options:(x4055 : MessageOptions.t option) ->
              fun ?choices:(x4056 : (string * 'T) list option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4065 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4065)
                    (let x4064 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4064 "showWarningMessage")
                       "apply"
                       [|x4064;((let x4057 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4057 "push"
                                      [|(Ojs.string_to_js x4054)|]);
                                 (match x4055 with
                                  | Some x4063 ->
                                      ignore
                                        (Ojs.call x4057 "push"
                                           [|(MessageOptions.t_to_js x4063)|])
                                  | None -> ());
                                 (match x4056 with
                                  | Some x4058 ->
                                      ignore
                                        (Ojs.call x4057 "push"
                                           [|(Ojs.list_to_js
                                                (fun (x4059 : (string * 'T))
                                                   ->
                                                   let (x4060, x4061) = x4059 in
                                                   let x4062 =
                                                     Ojs.array_make 2 in
                                                   Ojs.array_set x4062 0
                                                     (Ojs.string_to_js x4060);
                                                   Ojs.array_set x4062 1
                                                     (Obj.magic x4061);
                                                   x4062) x4058)|])
                                  | None -> ());
                                 x4057))|])
        let (show_error_message :
          string ->
            ?options:MessageOptions.t ->
              ?choices:(string * 'T) list ->
                unit -> 'T or_undefined Promise.t)
          =
          fun (x4067 : string) ->
            fun ?options:(x4068 : MessageOptions.t option) ->
              fun ?choices:(x4069 : (string * 'T) list option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4078 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4078)
                    (let x4077 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4077 "showErrorMessage")
                       "apply"
                       [|x4077;((let x4070 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4070 "push"
                                      [|(Ojs.string_to_js x4067)|]);
                                 (match x4068 with
                                  | Some x4076 ->
                                      ignore
                                        (Ojs.call x4070 "push"
                                           [|(MessageOptions.t_to_js x4076)|])
                                  | None -> ());
                                 (match x4069 with
                                  | Some x4071 ->
                                      ignore
                                        (Ojs.call x4070 "push"
                                           [|(Ojs.list_to_js
                                                (fun (x4072 : (string * 'T))
                                                   ->
                                                   let (x4073, x4074) = x4072 in
                                                   let x4075 =
                                                     Ojs.array_make 2 in
                                                   Ojs.array_set x4075 0
                                                     (Ojs.string_to_js x4073);
                                                   Ojs.array_set x4075 1
                                                     (Obj.magic x4074);
                                                   x4075) x4071)|])
                                  | None -> ());
                                 x4070))|])
        module ShowQuickPickOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4081 : Ojs.t) -> x4081
            and t_to_js : t -> Ojs.t = fun (x4080 : Ojs.t) -> x4080
            let (can_pick_many : t -> [ `L_b_true ]) =
              fun (x4082 : t) ->
                let x4083 = Ojs.get_prop_ascii (t_to_js x4082) "canPickMany" in
                match Ojs.bool_of_js x4083 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_can_pick_many : t -> [ `L_b_true ] -> unit) =
              fun (x4084 : t) ->
                fun (x4085 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x4084) "canPickMany"
                    (match x4085 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (show_quick_pick :
          (string list Promise.t, string) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> string list or_undefined Promise.t)
          =
          fun (x4086 : (string list Promise.t, string) or_array) ->
            fun
              ?options:(x4087 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4088 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4099 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4100 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x4100) x4099)
                    (let x4098 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4098 "showQuickPick")
                       "apply"
                       [|x4098;((let x4089 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4089 "push"
                                      [|(or_array_to_js
                                           (fun
                                              (x4094 : string list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4095 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4095)
                                                x4094) Ojs.string_to_js x4086)|]);
                                 (match x4087 with
                                  | Some x4091 ->
                                      ignore
                                        (Ojs.call x4089 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4091)|])
                                  | None -> ());
                                 (match x4088 with
                                  | Some x4090 ->
                                      ignore
                                        (Ojs.call x4089 "push"
                                           [|(CancellationToken.t_to_js x4090)|])
                                  | None -> ());
                                 x4089))|])
        let (show_quick_pick' :
          ('T list Promise.t, 'T) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> 'T list or_undefined Promise.t)
          =
          fun (x4102 : ('T list Promise.t, 'T) or_array) ->
            fun
              ?options:(x4103 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4104 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4115 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4116 : Ojs.t) ->
                            Ojs.list_of_js Obj.magic x4116) x4115)
                    (let x4114 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4114 "showQuickPick")
                       "apply"
                       [|x4114;((let x4105 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4105 "push"
                                      [|(or_array_to_js
                                           (fun (x4110 : 'T list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4111 : 'T list) ->
                                                   Ojs.list_to_js Obj.magic
                                                     x4111) x4110) Obj.magic
                                           x4102)|]);
                                 (match x4103 with
                                  | Some x4107 ->
                                      ignore
                                        (Ojs.call x4105 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4107)|])
                                  | None -> ());
                                 (match x4104 with
                                  | Some x4106 ->
                                      ignore
                                        (Ojs.call x4105 "push"
                                           [|(CancellationToken.t_to_js x4106)|])
                                  | None -> ());
                                 x4105))|])
        let (show_workspace_folder_pick :
          ?options:WorkspaceFolderPickOptions.t ->
            unit -> WorkspaceFolder.t or_undefined Promise.t)
          =
          fun ?options:(x4118 : WorkspaceFolderPickOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4122 : Ojs.t) ->
                   or_undefined_of_js WorkspaceFolder.t_of_js x4122)
                (let x4121 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4121 "showWorkspaceFolderPick")
                   "apply"
                   [|x4121;((let x4119 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4118 with
                              | Some x4120 ->
                                  ignore
                                    (Ojs.call x4119 "push"
                                       [|(WorkspaceFolderPickOptions.t_to_js
                                            x4120)|])
                              | None -> ());
                             x4119))|])
        let (show_open_dialog :
          ?options:OpenDialogOptions.t ->
            unit -> Uri.t list or_undefined Promise.t)
          =
          fun ?options:(x4124 : OpenDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4128 : Ojs.t) ->
                   or_undefined_of_js
                     (fun (x4129 : Ojs.t) -> Ojs.list_of_js Uri.t_of_js x4129)
                     x4128)
                (let x4127 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4127 "showOpenDialog") "apply"
                   [|x4127;((let x4125 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4124 with
                              | Some x4126 ->
                                  ignore
                                    (Ojs.call x4125 "push"
                                       [|(OpenDialogOptions.t_to_js x4126)|])
                              | None -> ());
                             x4125))|])
        let (show_save_dialog :
          ?options:SaveDialogOptions.t ->
            unit -> Uri.t or_undefined Promise.t)
          =
          fun ?options:(x4131 : SaveDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4135 : Ojs.t) -> or_undefined_of_js Uri.t_of_js x4135)
                (let x4134 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4134 "showSaveDialog") "apply"
                   [|x4134;((let x4132 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4131 with
                              | Some x4133 ->
                                  ignore
                                    (Ojs.call x4132 "push"
                                       [|(SaveDialogOptions.t_to_js x4133)|])
                              | None -> ());
                             x4132))|])
        let (show_input_box :
          ?options:InputBoxOptions.t ->
            ?token:CancellationToken.t ->
              unit -> string or_undefined Promise.t)
          =
          fun ?options:(x4137 : InputBoxOptions.t option) ->
            fun ?token:(x4138 : CancellationToken.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x4143 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x4143)
                  (let x4142 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4142 "showInputBox") "apply"
                     [|x4142;((let x4139 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4137 with
                                | Some x4141 ->
                                    ignore
                                      (Ojs.call x4139 "push"
                                         [|(InputBoxOptions.t_to_js x4141)|])
                                | None -> ());
                               (match x4138 with
                                | Some x4140 ->
                                    ignore
                                      (Ojs.call x4139 "push"
                                         [|(CancellationToken.t_to_js x4140)|])
                                | None -> ());
                               x4139))|])
        let (create_quick_pick : unit -> 'T QuickPick.t) =
          fun () ->
            QuickPick.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createQuickPick" [||])
        let (create_input_box : unit -> InputBox.t) =
          fun () ->
            InputBox.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createInputBox" [||])
        let (create_output_channel : name:string -> OutputChannel.t) =
          fun ~name:(x4146 : string) ->
            OutputChannel.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createOutputChannel" [|(Ojs.string_to_js x4146)|])
        module ProgressInfo =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4148 : Ojs.t) -> x4148
            and t_to_js : t -> Ojs.t = fun (x4147 : Ojs.t) -> x4147
            let (message : t -> string) =
              fun (x4149 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4149) "message")
            let (set_message : t -> string -> unit) =
              fun (x4150 : t) ->
                fun (x4151 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4150) "message"
                    (Ojs.string_to_js x4151)
            let (increment : t -> int) =
              fun (x4152 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x4152) "increment")
            let (set_increment : t -> int -> unit) =
              fun (x4153 : t) ->
                fun (x4154 : int) ->
                  Ojs.set_prop_ascii (t_to_js x4153) "increment"
                    (Ojs.int_to_js x4154)
          end
        module ViewColumnLike =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4156 : Ojs.t) -> x4156
            and t_to_js : t -> Ojs.t = fun (x4155 : Ojs.t) -> x4155
            let (view_column : t -> ViewColumn.t) =
              fun (x4157 : t) ->
                ViewColumn.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4157) "viewColumn")
            let (set_view_column : t -> ViewColumn.t -> unit) =
              fun (x4158 : t) ->
                fun (x4159 : ViewColumn.t) ->
                  Ojs.set_prop_ascii (t_to_js x4158) "viewColumn"
                    (ViewColumn.t_to_js x4159)
            let (preserve_focus : t -> bool) =
              fun (x4160 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4160) "preserveFocus")
            let (set_preserve_focus : t -> bool -> unit) =
              fun (x4161 : t) ->
                fun (x4162 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x4161) "preserveFocus"
                    (Ojs.bool_to_js x4162)
          end
        module RegisterCustomEditorProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4164 : Ojs.t) -> x4164
            and t_to_js : t -> Ojs.t = fun (x4163 : Ojs.t) -> x4163
            let (webview_options : t -> WebviewPanelOptions.t) =
              fun (x4165 : t) ->
                WebviewPanelOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4165) "webviewOptions")
            let (supports_multiple_editors_per_document : t -> bool) =
              fun (x4166 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4166)
                     "supportsMultipleEditorsPerDocument")
          end
        module WebviewOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4168 : Ojs.t) -> x4168
            and t_to_js : t -> Ojs.t = fun (x4167 : Ojs.t) -> x4167
            let (retain_context_when_hidden : t -> bool) =
              fun (x4169 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4169)
                     "retainContextWhenHidden")
          end
        module RegisterWebviewViewProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4171 : Ojs.t) -> x4171
            and t_to_js : t -> Ojs.t = fun (x4170 : Ojs.t) -> x4170
            let (webview_options : t -> WebviewOptions.t) =
              fun (x4172 : t) ->
                WebviewOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4172) "webviewOptions")
          end
        let (create_webview_panel :
          view_type_:string ->
            title:string ->
              show_options:((ViewColumn.t, ViewColumnLike.t) union2,
                [ `Active  | `Beside  | `Eight  | `Five  | `Four  | `Nine 
                | `One  | `Seven  | `Six  | `Three  | `Two ]) or_enum ->
                ?options:(WebviewPanelOptions.t, WebviewOptions.t)
                  intersection2 -> unit -> WebviewPanel.t)
          =
          fun ~view_type_:(x4173 : string) ->
            fun ~title:(x4174 : string) ->
              fun
                ~show_options:(x4175 :
                                ((ViewColumn.t, ViewColumnLike.t) union2,
                                  [ `Active  | `Beside  | `Eight  | `Five 
                                  | `Four  | `Nine  | `One  | `Seven  | 
                                    `Six 
                                  | `Three  | `Two ]) or_enum)
                ->
                fun
                  ?options:(x4176 :
                             (WebviewPanelOptions.t, WebviewOptions.t)
                               intersection2 option)
                  ->
                  fun () ->
                    WebviewPanel.t_of_js
                      (let x4185 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4185 "createWebviewPanel")
                         "apply"
                         [|x4185;((let x4177 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4177 "push"
                                        [|(Ojs.string_to_js x4173)|]);
                                   ignore
                                     (Ojs.call x4177 "push"
                                        [|(Ojs.string_to_js x4174)|]);
                                   ignore
                                     (Ojs.call x4177 "push"
                                        [|(or_enum_to_js
                                             (fun
                                                (x4181 :
                                                  (ViewColumn.t,
                                                    ViewColumnLike.t) union2)
                                                ->
                                                union2_to_js
                                                  ViewColumn.t_to_js
                                                  ViewColumnLike.t_to_js
                                                  x4181)
                                             (fun
                                                (x4184 :
                                                  [ `Active  | `Beside 
                                                  | `Eight  | `Five  | 
                                                    `Four 
                                                  | `Nine  | `One  | 
                                                    `Seven 
                                                  | `Six  | `Three  | 
                                                    `Two ])
                                                ->
                                                match x4184 with
                                                | `Active ->
                                                    Ojs.string_to_js "Active"
                                                | `Beside ->
                                                    Ojs.string_to_js "Beside"
                                                | `Eight ->
                                                    Ojs.string_to_js "Eight"
                                                | `Five ->
                                                    Ojs.string_to_js "Five"
                                                | `Four ->
                                                    Ojs.string_to_js "Four"
                                                | `Nine ->
                                                    Ojs.string_to_js "Nine"
                                                | `One ->
                                                    Ojs.string_to_js "One"
                                                | `Seven ->
                                                    Ojs.string_to_js "Seven"
                                                | `Six ->
                                                    Ojs.string_to_js "Six"
                                                | `Three ->
                                                    Ojs.string_to_js "Three"
                                                | `Two ->
                                                    Ojs.string_to_js "Two")
                                             x4175)|]);
                                   (match x4176 with
                                    | Some x4178 ->
                                        ignore
                                          (Ojs.call x4177 "push"
                                             [|(intersection2_to_js
                                                  WebviewPanelOptions.t_to_js
                                                  WebviewOptions.t_to_js
                                                  x4178)|])
                                    | None -> ());
                                   x4177))|])
        let (set_status_bar_message :
          text:string -> hide_after_timeout:int -> Disposable.t) =
          fun ~text:(x4186 : string) ->
            fun ~hide_after_timeout:(x4187 : int) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4186);(Ojs.int_to_js x4187)|])
        let (set_status_bar_message :
          text:string -> hide_when_done:any Promise.t -> Disposable.t) =
          fun ~text:(x4188 : string) ->
            fun ~hide_when_done:(x4189 : any Promise.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4188);(Promise.t_to_js any_to_js
                                                 x4189)|])
        let (set_status_bar_message : text:string -> Disposable.t) =
          fun ~text:(x4191 : string) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "setStatusBarMessage" [|(Ojs.string_to_js x4191)|])
        let (with_scm_progress :
          task:(progress:int Progress.t -> 'R Promise.t) -> 'R Promise.t) =
          fun ~task:(x4192 : progress:int Progress.t -> 'R Promise.t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "withScmProgress"
                 [|(Ojs.fun_to_js 1
                      (fun (x4193 : Ojs.t) ->
                         Promise.t_to_js Obj.magic
                           (x4192
                              ~progress:(Progress.t_of_js Ojs.int_of_js x4193))))|])
        let (with_progress :
          options:ProgressOptions.t ->
            task:(progress:ProgressInfo.t Progress.t ->
                    token:CancellationToken.t -> 'R Promise.t)
              -> 'R Promise.t)
          =
          fun ~options:(x4197 : ProgressOptions.t) ->
            fun
              ~task:(x4198 :
                      progress:ProgressInfo.t Progress.t ->
                        token:CancellationToken.t -> 'R Promise.t)
              ->
              Promise.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "withProgress"
                   [|(ProgressOptions.t_to_js x4197);(Ojs.fun_to_js 2
                                                        (fun (x4199 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4201 : Ojs.t)
                                                             ->
                                                             Promise.t_to_js
                                                               Obj.magic
                                                               (x4198
                                                                  ~progress:(
                                                                  Progress.t_of_js
                                                                    ProgressInfo.t_of_js
                                                                    x4199)
                                                                  ~token:(
                                                                  CancellationToken.t_of_js
                                                                    x4201))))|])
        let (create_status_bar_item :
          ?alignment:StatusBarAlignment.t ->
            ?priority:int -> unit -> StatusBarItem.t)
          =
          fun ?alignment:(x4204 : StatusBarAlignment.t option) ->
            fun ?priority:(x4205 : int option) ->
              fun () ->
                StatusBarItem.t_of_js
                  (let x4209 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4209 "createStatusBarItem")
                     "apply"
                     [|x4209;((let x4206 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4204 with
                                | Some x4208 ->
                                    ignore
                                      (Ojs.call x4206 "push"
                                         [|(StatusBarAlignment.t_to_js x4208)|])
                                | None -> ());
                               (match x4205 with
                                | Some x4207 ->
                                    ignore
                                      (Ojs.call x4206 "push"
                                         [|(Ojs.int_to_js x4207)|])
                                | None -> ());
                               x4206))|])
        let (create_terminal :
          ?name:string ->
            ?shell_path:string ->
              ?shell_args:string list or_string -> unit -> Terminal.t)
          =
          fun ?name:(x4210 : string option) ->
            fun ?shell_path:(x4211 : string option) ->
              fun ?shell_args:(x4212 : string list or_string option) ->
                fun () ->
                  Terminal.t_of_js
                    (let x4219 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4219 "createTerminal")
                       "apply"
                       [|x4219;((let x4213 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x4210 with
                                  | Some x4218 ->
                                      ignore
                                        (Ojs.call x4213 "push"
                                           [|(Ojs.string_to_js x4218)|])
                                  | None -> ());
                                 (match x4211 with
                                  | Some x4217 ->
                                      ignore
                                        (Ojs.call x4213 "push"
                                           [|(Ojs.string_to_js x4217)|])
                                  | None -> ());
                                 (match x4212 with
                                  | Some x4214 ->
                                      ignore
                                        (Ojs.call x4213 "push"
                                           [|(or_string_to_js
                                                (fun (x4215 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4215)
                                                x4214)|])
                                  | None -> ());
                                 x4213))|])
        let (create_terminal : options:TerminalOptions.t -> Terminal.t) =
          fun ~options:(x4220 : TerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal" [|(TerminalOptions.t_to_js x4220)|])
        let (create_terminal :
          options:ExtensionTerminalOptions.t -> Terminal.t) =
          fun ~options:(x4221 : ExtensionTerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal"
                 [|(ExtensionTerminalOptions.t_to_js x4221)|])
        let (register_tree_data_provider :
          string -> 'T TreeDataProvider.t -> Disposable.t) =
          fun (x4222 : string) ->
            fun (x4223 : 'T TreeDataProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerTreeDataProvider"
                   [|(Ojs.string_to_js x4222);(TreeDataProvider.t_to_js
                                                 Obj.magic x4223)|])
        let (create_tree_view :
          string -> options:'T TreeViewOptions.t -> 'T TreeView.t) =
          fun (x4225 : string) ->
            fun ~options:(x4226 : 'T TreeViewOptions.t) ->
              TreeView.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "createTreeView"
                   [|(Ojs.string_to_js x4225);(TreeViewOptions.t_to_js
                                                 Obj.magic x4226)|])
        let (register_uri_handler : handler:UriHandler.t -> Disposable.t) =
          fun ~handler:(x4229 : UriHandler.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerUriHandler" [|(UriHandler.t_to_js x4229)|])
        let (register_webview_panel_serializer :
          string -> unknown WebviewPanelSerializer.t -> Disposable.t) =
          fun (x4230 : string) ->
            fun (x4231 : unknown WebviewPanelSerializer.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerWebviewPanelSerializer"
                   [|(Ojs.string_to_js x4230);(WebviewPanelSerializer.t_to_js
                                                 unknown_to_js x4231)|])
        let (register_webview_view_provider :
          string ->
            WebviewViewProvider.t ->
              ?options:RegisterWebviewViewProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4233 : string) ->
            fun (x4234 : WebviewViewProvider.t) ->
              fun
                ?options:(x4235 :
                           RegisterWebviewViewProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4238 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4238
                          "registerWebviewViewProvider") "apply"
                       [|x4238;((let x4236 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4236 "push"
                                      [|(Ojs.string_to_js x4233)|]);
                                 ignore
                                   (Ojs.call x4236 "push"
                                      [|(WebviewViewProvider.t_to_js x4234)|]);
                                 (match x4235 with
                                  | Some x4237 ->
                                      ignore
                                        (Ojs.call x4236 "push"
                                           [|(RegisterWebviewViewProviderOptions.t_to_js
                                                x4237)|])
                                  | None -> ());
                                 x4236))|])
        let (register_custom_editor_provider :
          string ->
            (CustomDocument.t CustomEditorProvider.t,
              CustomDocument.t CustomReadonlyEditorProvider.t,
              CustomTextEditorProvider.t) union3 ->
              ?options:RegisterCustomEditorProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4239 : string) ->
            fun
              (x4240 :
                (CustomDocument.t CustomEditorProvider.t,
                  CustomDocument.t CustomReadonlyEditorProvider.t,
                  CustomTextEditorProvider.t) union3)
              ->
              fun
                ?options:(x4241 :
                           RegisterCustomEditorProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4249 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4249
                          "registerCustomEditorProvider") "apply"
                       [|x4249;((let x4242 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4242 "push"
                                      [|(Ojs.string_to_js x4239)|]);
                                 ignore
                                   (Ojs.call x4242 "push"
                                      [|(union3_to_js
                                           (fun
                                              (x4244 :
                                                CustomDocument.t
                                                  CustomEditorProvider.t)
                                              ->
                                              CustomEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4244)
                                           (fun
                                              (x4246 :
                                                CustomDocument.t
                                                  CustomReadonlyEditorProvider.t)
                                              ->
                                              CustomReadonlyEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4246)
                                           CustomTextEditorProvider.t_to_js
                                           x4240)|]);
                                 (match x4241 with
                                  | Some x4243 ->
                                      ignore
                                        (Ojs.call x4242 "push"
                                           [|(RegisterCustomEditorProviderOptions.t_to_js
                                                x4243)|])
                                  | None -> ());
                                 x4242))|])
        let (register_terminal_link_provider :
          TerminalLink.t TerminalLinkProvider.t -> Disposable.t) =
          fun (x4250 : TerminalLink.t TerminalLinkProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerTerminalLinkProvider"
                 [|(TerminalLinkProvider.t_to_js TerminalLink.t_to_js x4250)|])
        let (register_file_decoration_provider :
          FileDecorationProvider.t -> Disposable.t) =
          fun (x4252 : FileDecorationProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerFileDecorationProvider"
                 [|(FileDecorationProvider.t_to_js x4252)|])
        let (active_color_theme : ColorTheme.t) =
          ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeColorTheme")
        let (on_did_change_active_color_theme : ColorTheme.t Event.t) =
          Event.t_of_js ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveColorTheme")
      end
    module TextDocumentContentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4255 : Ojs.t) -> x4255
        and t_to_js : t -> Ojs.t = fun (x4254 : Ojs.t) -> x4254
        let (range : t -> Range.t) =
          fun (x4256 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4256) "range")
        let (range_offset : t -> int) =
          fun (x4257 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4257) "rangeOffset")
        let (range_length : t -> int) =
          fun (x4258 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4258) "rangeLength")
        let (text : t -> string) =
          fun (x4259 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4259) "text")
      end
    module TextDocumentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4261 : Ojs.t) -> x4261
        and t_to_js : t -> Ojs.t = fun (x4260 : Ojs.t) -> x4260
        let (document : t -> TextDocument.t) =
          fun (x4262 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4262) "document")
        let (content_changes : t -> TextDocumentContentChangeEvent.t list) =
          fun (x4263 : t) ->
            Ojs.list_of_js TextDocumentContentChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4263) "contentChanges")
      end
    module TextDocumentSaveReason =
      struct
        type t = [ `AfterDelay  | `FocusOut ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4266 : Ojs.t) ->
            let x4267 = x4266 in
            match Ojs.int_of_js x4267 with
            | 2 -> `AfterDelay
            | 3 -> `FocusOut
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4265 : [ `AfterDelay  | `FocusOut ]) ->
            match x4265 with
            | `AfterDelay -> Ojs.int_to_js 2
            | `FocusOut -> Ojs.int_to_js 3
      end
    module TextDocumentWillSaveEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4269 : Ojs.t) -> x4269
        and t_to_js : t -> Ojs.t = fun (x4268 : Ojs.t) -> x4268
        let (document : t -> TextDocument.t) =
          fun (x4270 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4270) "document")
        let (reason : t -> TextDocumentSaveReason.t) =
          fun (x4271 : t) ->
            TextDocumentSaveReason.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4271) "reason")
        let (wait_until : t -> TextEdit.t list Promise.t -> unit) =
          fun (x4275 : t) ->
            fun (x4272 : TextEdit.t list Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4275) "waitUntil"
                   [|(Promise.t_to_js
                        (fun (x4273 : TextEdit.t list) ->
                           Ojs.list_to_js TextEdit.t_to_js x4273) x4272)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4278 : t) ->
            fun (x4276 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4278) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4276)|])
      end
    module FileWillCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4280 : Ojs.t) -> x4280
        and t_to_js : t -> Ojs.t = fun (x4279 : Ojs.t) -> x4279
        let (files : t -> Uri.t list) =
          fun (x4281 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4281) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4285 : t) ->
            fun (x4283 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4285) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4283)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4288 : t) ->
            fun (x4286 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4288) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4286)|])
      end
    module FileCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4290 : Ojs.t) -> x4290
        and t_to_js : t -> Ojs.t = fun (x4289 : Ojs.t) -> x4289
        let (files : t -> Uri.t list) =
          fun (x4291 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4291) "files")
      end
    module FileWillDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4294 : Ojs.t) -> x4294
        and t_to_js : t -> Ojs.t = fun (x4293 : Ojs.t) -> x4293
        let (files : t -> Uri.t list) =
          fun (x4295 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4295) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4299 : t) ->
            fun (x4297 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4299) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4297)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4302 : t) ->
            fun (x4300 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4302) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4300)|])
      end
    module FileDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4304 : Ojs.t) -> x4304
        and t_to_js : t -> Ojs.t = fun (x4303 : Ojs.t) -> x4303
        let (files : t -> Uri.t list) =
          fun (x4305 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4305) "files")
      end
    module FileWillRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4308 : Ojs.t) -> x4308
        and t_to_js : t -> Ojs.t = fun (x4307 : Ojs.t) -> x4307
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4310 : Ojs.t) -> x4310
            and t_to_js : t -> Ojs.t = fun (x4309 : Ojs.t) -> x4309
            let (old_uri : t -> Uri.t) =
              fun (x4311 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4311) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4312 : t) ->
                fun (x4313 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4312) "oldUri"
                    (Uri.t_to_js x4313)
            let (new_uri : t -> Uri.t) =
              fun (x4314 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4314) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4315 : t) ->
                fun (x4316 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4315) "newUri"
                    (Uri.t_to_js x4316)
          end
        let (files : t -> File.t list) =
          fun (x4317 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4317) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4321 : t) ->
            fun (x4319 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4321) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4319)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4324 : t) ->
            fun (x4322 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4324) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4322)|])
      end
    module FileRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4326 : Ojs.t) -> x4326
        and t_to_js : t -> Ojs.t = fun (x4325 : Ojs.t) -> x4325
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4328 : Ojs.t) -> x4328
            and t_to_js : t -> Ojs.t = fun (x4327 : Ojs.t) -> x4327
            let (old_uri : t -> Uri.t) =
              fun (x4329 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4329) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4330 : t) ->
                fun (x4331 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4330) "oldUri"
                    (Uri.t_to_js x4331)
            let (new_uri : t -> Uri.t) =
              fun (x4332 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4332) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4333 : t) ->
                fun (x4334 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4333) "newUri"
                    (Uri.t_to_js x4334)
          end
        let (files : t -> File.t list) =
          fun (x4335 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4335) "files")
      end
    module WorkspaceFoldersChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4338 : Ojs.t) -> x4338
        and t_to_js : t -> Ojs.t = fun (x4337 : Ojs.t) -> x4337
        let (added : t -> WorkspaceFolder.t list) =
          fun (x4339 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4339) "added")
        let (removed : t -> WorkspaceFolder.t list) =
          fun (x4341 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4341) "removed")
      end
    module UriWithLanguageId =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4344 : Ojs.t) -> x4344
        and t_to_js : t -> Ojs.t = fun (x4343 : Ojs.t) -> x4343
        let (uri : t -> Uri.t) =
          fun (x4345 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4345) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x4346 : t) ->
            fun (x4347 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4346) "uri" (Uri.t_to_js x4347)
        let (language_id : t -> string) =
          fun (x4348 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4348) "languageId")
        let (set_language_id : t -> string -> unit) =
          fun (x4349 : t) ->
            fun (x4350 : string) ->
              Ojs.set_prop_ascii (t_to_js x4349) "languageId"
                (Ojs.string_to_js x4350)
      end
    module ConfigurationScope =
      struct
        type t =
          (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
            union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4356 : Ojs.t) ->
            union4_of_js TextDocument.t_of_js Uri.t_of_js
              WorkspaceFolder.t_of_js UriWithLanguageId.t_of_js x4356
        and t_to_js : t -> Ojs.t =
          fun
            (x4351 :
              (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
                union4)
            ->
            union4_to_js TextDocument.t_to_js Uri.t_to_js
              WorkspaceFolder.t_to_js UriWithLanguageId.t_to_js x4351
      end
    module ConfigurationChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4362 : Ojs.t) -> x4362
        and t_to_js : t -> Ojs.t = fun (x4361 : Ojs.t) -> x4361
        let (affects_configuration :
          t -> string -> ?scope:ConfigurationScope.t -> unit -> bool) =
          fun (x4367 : t) ->
            fun (x4363 : string) ->
              fun ?scope:(x4364 : ConfigurationScope.t option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x4368 = t_to_js x4367 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4368 "affectsConfiguration")
                       "apply"
                       [|x4368;((let x4365 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4365 "push"
                                      [|(Ojs.string_to_js x4363)|]);
                                 (match x4364 with
                                  | Some x4366 ->
                                      ignore
                                        (Ojs.call x4365 "push"
                                           [|(ConfigurationScope.t_to_js
                                                x4366)|])
                                  | None -> ());
                                 x4365))|])
      end
    module Workspace =
      struct
        module RegisterFileSystemProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4370 : Ojs.t) -> x4370
            and t_to_js : t -> Ojs.t = fun (x4369 : Ojs.t) -> x4369
            let (is_case_sensitive : t -> bool) =
              fun (x4371 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4371) "isCaseSensitive")
            let (is_readonly : t -> bool) =
              fun (x4372 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4372) "isReadonly")
          end
        module OpenTextDocumentOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4374 : Ojs.t) -> x4374
            and t_to_js : t -> Ojs.t = fun (x4373 : Ojs.t) -> x4373
            let (language : t -> string) =
              fun (x4375 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4375) "language")
            let (set_language : t -> string -> unit) =
              fun (x4376 : t) ->
                fun (x4377 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4376) "language"
                    (Ojs.string_to_js x4377)
            let (content : t -> string) =
              fun (x4378 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4378) "content")
            let (set_content : t -> string -> unit) =
              fun (x4379 : t) ->
                fun (x4380 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4379) "content"
                    (Ojs.string_to_js x4380)
          end
        module WorkspaceFolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4382 : Ojs.t) -> x4382
            and t_to_js : t -> Ojs.t = fun (x4381 : Ojs.t) -> x4381
            let (uri : t -> Uri.t) =
              fun (x4383 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4383) "uri")
            let (set_uri : t -> Uri.t -> unit) =
              fun (x4384 : t) ->
                fun (x4385 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4384) "uri"
                    (Uri.t_to_js x4385)
            let (name : t -> string) =
              fun (x4386 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4386) "name")
            let (set_name : t -> string -> unit) =
              fun (x4387 : t) ->
                fun (x4388 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4387) "name"
                    (Ojs.string_to_js x4388)
          end
        let (fs : FileSystem.t) =
          FileSystem.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "fs")
        let (root_path : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "rootPath")
        let (workspace_folders : WorkspaceFolder.t list or_undefined) =
          or_undefined_of_js
            (fun (x4390 : Ojs.t) ->
               Ojs.list_of_js WorkspaceFolder.t_of_js x4390)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFolders")
        let (name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "name")
        let (workspace_file : Uri.t or_undefined) =
          or_undefined_of_js Uri.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFile")
        let (on_did_change_workspace_folders :
          WorkspaceFoldersChangeEvent.t Event.t) =
          Event.t_of_js WorkspaceFoldersChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeWorkspaceFolders")
        let (get_workspace_folder :
          uri:Uri.t -> WorkspaceFolder.t or_undefined) =
          fun ~uri:(x4395 : Uri.t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "getWorkspaceFolder" [|(Uri.t_to_js x4395)|])
        let (as_relative_path :
          Uri.t or_string -> ?include_workspace_folder:bool -> unit -> string)
          =
          fun (x4397 : Uri.t or_string) ->
            fun ?include_workspace_folder:(x4398 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x4402 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4402 "asRelativePath")
                     "apply"
                     [|x4402;((let x4399 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4399 "push"
                                    [|(or_string_to_js Uri.t_to_js x4397)|]);
                               (match x4398 with
                                | Some x4400 ->
                                    ignore
                                      (Ojs.call x4399 "push"
                                         [|(Ojs.bool_to_js x4400)|])
                                | None -> ());
                               x4399))|])
        let (update_workspace_folders :
          start:int ->
            delete_count:int or_null_or_undefined ->
              workspace_folders_to_add:WorkspaceFolder.t list -> bool)
          =
          fun ~start:(x4403 : int) ->
            fun ~delete_count:(x4404 : int or_null_or_undefined) ->
              fun ~workspace_folders_to_add:(x4405 : WorkspaceFolder.t list)
                ->
                Ojs.bool_of_js
                  (let x4409 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4409 "updateWorkspaceFolders")
                     "apply"
                     [|x4409;((let x4406 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4406 "push"
                                    [|(Ojs.int_to_js x4403)|]);
                               ignore
                                 (Ojs.call x4406 "push"
                                    [|(or_null_or_undefined_to_js
                                         Ojs.int_to_js x4404)|]);
                               List.iter
                                 (fun (x4407 : WorkspaceFolder.t) ->
                                    ignore
                                      (Ojs.call x4406 "push"
                                         [|(WorkspaceFolder.t_to_js x4407)|]))
                                 x4405;
                               x4406))|])
        let (create_file_system_watcher :
          GlobPattern.t ->
            ?ignore_create_events:bool ->
              ?ignore_change_events:bool ->
                ?ignore_delete_events:bool -> unit -> FileSystemWatcher.t)
          =
          fun (x4410 : GlobPattern.t) ->
            fun ?ignore_create_events:(x4411 : bool option) ->
              fun ?ignore_change_events:(x4412 : bool option) ->
                fun ?ignore_delete_events:(x4413 : bool option) ->
                  fun () ->
                    FileSystemWatcher.t_of_js
                      (let x4418 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4418 "createFileSystemWatcher")
                         "apply"
                         [|x4418;((let x4414 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4414 "push"
                                        [|(GlobPattern.t_to_js x4410)|]);
                                   (match x4411 with
                                    | Some x4417 ->
                                        ignore
                                          (Ojs.call x4414 "push"
                                             [|(Ojs.bool_to_js x4417)|])
                                    | None -> ());
                                   (match x4412 with
                                    | Some x4416 ->
                                        ignore
                                          (Ojs.call x4414 "push"
                                             [|(Ojs.bool_to_js x4416)|])
                                    | None -> ());
                                   (match x4413 with
                                    | Some x4415 ->
                                        ignore
                                          (Ojs.call x4414 "push"
                                             [|(Ojs.bool_to_js x4415)|])
                                    | None -> ());
                                   x4414))|])
        let (find_files :
          GlobPattern.t ->
            ?exclude:GlobPattern.t or_null ->
              ?max_results:int ->
                ?token:CancellationToken.t -> unit -> Uri.t list Promise.t)
          =
          fun (x4419 : GlobPattern.t) ->
            fun ?exclude:(x4420 : GlobPattern.t or_null option) ->
              fun ?max_results:(x4421 : int option) ->
                fun ?token:(x4422 : CancellationToken.t option) ->
                  fun () ->
                    Promise.t_of_js
                      (fun (x4429 : Ojs.t) ->
                         Ojs.list_of_js Uri.t_of_js x4429)
                      (let x4428 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call (Ojs.get_prop_ascii x4428 "findFiles")
                         "apply"
                         [|x4428;((let x4423 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4423 "push"
                                        [|(GlobPattern.t_to_js x4419)|]);
                                   (match x4420 with
                                    | Some x4426 ->
                                        ignore
                                          (Ojs.call x4423 "push"
                                             [|(or_null_to_js
                                                  GlobPattern.t_to_js x4426)|])
                                    | None -> ());
                                   (match x4421 with
                                    | Some x4425 ->
                                        ignore
                                          (Ojs.call x4423 "push"
                                             [|(Ojs.int_to_js x4425)|])
                                    | None -> ());
                                   (match x4422 with
                                    | Some x4424 ->
                                        ignore
                                          (Ojs.call x4423 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4424)|])
                                    | None -> ());
                                   x4423))|])
        let (save_all : ?include_untitled:bool -> unit -> bool Promise.t) =
          fun ?include_untitled:(x4431 : bool option) ->
            fun () ->
              Promise.t_of_js Ojs.bool_of_js
                (let x4434 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x4434 "saveAll") "apply"
                   [|x4434;((let x4432 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4431 with
                              | Some x4433 ->
                                  ignore
                                    (Ojs.call x4432 "push"
                                       [|(Ojs.bool_to_js x4433)|])
                              | None -> ());
                             x4432))|])
        let (apply_edit : WorkspaceEdit.t -> bool Promise.t) =
          fun (x4436 : WorkspaceEdit.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "applyEdit" [|(WorkspaceEdit.t_to_js x4436)|])
        let (text_documents : TextDocument.t list) =
          Ojs.list_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "textDocuments")
        let (open_text_document :
          [ `Uri of Uri.t  | `Filename of string 
          | `Interactive of OpenTextDocumentOptions.t option ] ->
            TextDocument.t Promise.t)
          =
          fun
            (x4439 :
              [ `Uri of Uri.t  | `Filename of string 
              | `Interactive of OpenTextDocumentOptions.t option ])
            ->
            Promise.t_of_js TextDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "openTextDocument"
                 [|((match x4439 with
                     | `Uri x4440 -> Uri.t_to_js x4440
                     | `Filename x4441 -> Ojs.string_to_js x4441
                     | `Interactive x4442 ->
                         Ojs.option_to_js OpenTextDocumentOptions.t_to_js
                           x4442))|])
        let (register_text_document_content_provider :
          scheme:string ->
            provider:TextDocumentContentProvider.t -> Disposable.t)
          =
          fun ~scheme:(x4445 : string) ->
            fun ~provider:(x4446 : TextDocumentContentProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTextDocumentContentProvider"
                   [|(Ojs.string_to_js x4445);(TextDocumentContentProvider.t_to_js
                                                 x4446)|])
        let (on_did_open_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidOpenTextDocument")
        let (on_did_close_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCloseTextDocument")
        let (on_did_change_text_document : TextDocumentChangeEvent.t Event.t)
          =
          Event.t_of_js TextDocumentChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeTextDocument")
        let (on_will_save_text_document :
          TextDocumentWillSaveEvent.t Event.t) =
          Event.t_of_js TextDocumentWillSaveEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillSaveTextDocument")
        let (on_did_save_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidSaveTextDocument")
        let (on_will_create_files : FileWillCreateEvent.t Event.t) =
          Event.t_of_js FileWillCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillCreateFiles")
        let (on_did_create_files : FileCreateEvent.t Event.t) =
          Event.t_of_js FileCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCreateFiles")
        let (on_will_delete_files : FileWillDeleteEvent.t Event.t) =
          Event.t_of_js FileWillDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillDeleteFiles")
        let (on_did_delete_files : FileDeleteEvent.t Event.t) =
          Event.t_of_js FileDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidDeleteFiles")
        let (on_will_rename_files : FileWillRenameEvent.t Event.t) =
          Event.t_of_js FileWillRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillRenameFiles")
        let (on_did_rename_files : FileRenameEvent.t Event.t) =
          Event.t_of_js FileRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidRenameFiles")
        let (get_configuration :
          ?section:string or_undefined ->
            ?scope:ConfigurationScope.t or_null ->
              unit -> WorkspaceConfiguration.t)
          =
          fun ?section:(x4458 : string or_undefined option) ->
            fun ?scope:(x4459 : ConfigurationScope.t or_null option) ->
              fun () ->
                WorkspaceConfiguration.t_of_js
                  (let x4465 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4465 "getConfiguration")
                     "apply"
                     [|x4465;((let x4460 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4458 with
                                | Some x4463 ->
                                    ignore
                                      (Ojs.call x4460 "push"
                                         [|(or_undefined_to_js
                                              Ojs.string_to_js x4463)|])
                                | None -> ());
                               (match x4459 with
                                | Some x4461 ->
                                    ignore
                                      (Ojs.call x4460 "push"
                                         [|(or_null_to_js
                                              ConfigurationScope.t_to_js
                                              x4461)|])
                                | None -> ());
                               x4460))|])
        let (on_did_change_configuration :
          ConfigurationChangeEvent.t Event.t) =
          Event.t_of_js ConfigurationChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeConfiguration")
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x4467 : string) ->
            fun ~provider:(x4468 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x4467);(TaskProvider.t_to_js
                                                 Task.t_to_js x4468)|])
        let (register_file_system_provider :
          scheme:string ->
            provider:FileSystemProvider.t ->
              ?options:RegisterFileSystemProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun ~scheme:(x4470 : string) ->
            fun ~provider:(x4471 : FileSystemProvider.t) ->
              fun
                ?options:(x4472 : RegisterFileSystemProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4475 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "workspace" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4475 "registerFileSystemProvider")
                       "apply"
                       [|x4475;((let x4473 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4473 "push"
                                      [|(Ojs.string_to_js x4470)|]);
                                 ignore
                                   (Ojs.call x4473 "push"
                                      [|(FileSystemProvider.t_to_js x4471)|]);
                                 (match x4472 with
                                  | Some x4474 ->
                                      ignore
                                        (Ojs.call x4473 "push"
                                           [|(RegisterFileSystemProviderOptions.t_to_js
                                                x4474)|])
                                  | None -> ());
                                 x4473))|])
      end
    module Languages =
      struct
        let (get_languages : unit -> string list Promise.t) =
          fun () ->
            Promise.t_of_js
              (fun (x4476 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4476)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getLanguages" [||])
        let (set_text_document_language :
          document:TextDocument.t ->
            language_id:string -> TextDocument.t Promise.t)
          =
          fun ~document:(x4478 : TextDocument.t) ->
            fun ~language_id:(x4479 : string) ->
              Promise.t_of_js TextDocument.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setTextDocumentLanguage"
                   [|(TextDocument.t_to_js x4478);(Ojs.string_to_js x4479)|])
        let (match_ :
          selector:DocumentSelector.t -> document:TextDocument.t -> int) =
          fun ~selector:(x4481 : DocumentSelector.t) ->
            fun ~document:(x4482 : TextDocument.t) ->
              Ojs.int_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "match"
                   [|(DocumentSelector.t_to_js x4481);(TextDocument.t_to_js
                                                         x4482)|])
        let (on_did_change_diagnostics : DiagnosticChangeEvent.t Event.t) =
          Event.t_of_js DiagnosticChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "languages") "onDidChangeDiagnostics")
        let (get_diagnostics : resource:Uri.t -> Diagnostic.t list) =
          fun ~resource:(x4484 : Uri.t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [|(Uri.t_to_js x4484)|])
        let (get_diagnostics : unit -> (Uri.t * Diagnostic.t list) list) =
          fun () ->
            Ojs.list_of_js
              (fun (x4486 : Ojs.t) ->
                 let x4487 = x4486 in
                 ((Uri.t_of_js (Ojs.array_get x4487 0)),
                   (Ojs.list_of_js Diagnostic.t_of_js (Ojs.array_get x4487 1))))
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [||])
        let (create_diagnostic_collection :
          ?name:string -> unit -> DiagnosticCollection.t) =
          fun ?name:(x4489 : string option) ->
            fun () ->
              DiagnosticCollection.t_of_js
                (let x4492 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4492 "createDiagnosticCollection")
                   "apply"
                   [|x4492;((let x4490 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4489 with
                              | Some x4491 ->
                                  ignore
                                    (Ojs.call x4490 "push"
                                       [|(Ojs.string_to_js x4491)|])
                              | None -> ());
                             x4490))|])
        let (register_completion_item_provider :
          selector:DocumentSelector.t ->
            provider:CompletionItem.t CompletionItemProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4493 : DocumentSelector.t) ->
            fun ~provider:(x4494 : CompletionItem.t CompletionItemProvider.t)
              ->
              fun ~trigger_characters:(x4495 : string list) ->
                Disposable.t_of_js
                  (let x4499 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4499
                        "registerCompletionItemProvider") "apply"
                     [|x4499;((let x4496 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4496 "push"
                                    [|(DocumentSelector.t_to_js x4493)|]);
                               ignore
                                 (Ojs.call x4496 "push"
                                    [|(CompletionItemProvider.t_to_js
                                         CompletionItem.t_to_js x4494)|]);
                               List.iter
                                 (fun (x4497 : string) ->
                                    ignore
                                      (Ojs.call x4496 "push"
                                         [|(Ojs.string_to_js x4497)|])) x4495;
                               x4496))|])
        let (register_code_actions_provider :
          selector:DocumentSelector.t ->
            provider:CodeAction.t CodeActionProvider.t ->
              ?metadata:CodeActionProviderMetadata.t -> unit -> Disposable.t)
          =
          fun ~selector:(x4500 : DocumentSelector.t) ->
            fun ~provider:(x4501 : CodeAction.t CodeActionProvider.t) ->
              fun ?metadata:(x4502 : CodeActionProviderMetadata.t option) ->
                fun () ->
                  Disposable.t_of_js
                    (let x4506 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4506
                          "registerCodeActionsProvider") "apply"
                       [|x4506;((let x4503 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4503 "push"
                                      [|(DocumentSelector.t_to_js x4500)|]);
                                 ignore
                                   (Ojs.call x4503 "push"
                                      [|(CodeActionProvider.t_to_js
                                           CodeAction.t_to_js x4501)|]);
                                 (match x4502 with
                                  | Some x4504 ->
                                      ignore
                                        (Ojs.call x4503 "push"
                                           [|(CodeActionProviderMetadata.t_to_js
                                                x4504)|])
                                  | None -> ());
                                 x4503))|])
        let (register_code_lens_provider :
          selector:DocumentSelector.t ->
            provider:CodeLens.t CodeLensProvider.t -> Disposable.t)
          =
          fun ~selector:(x4507 : DocumentSelector.t) ->
            fun ~provider:(x4508 : CodeLens.t CodeLensProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCodeLensProvider"
                   [|(DocumentSelector.t_to_js x4507);(CodeLensProvider.t_to_js
                                                         CodeLens.t_to_js
                                                         x4508)|])
        let (register_definition_provider :
          selector:DocumentSelector.t ->
            provider:DefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4510 : DocumentSelector.t) ->
            fun ~provider:(x4511 : DefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4510);(DefinitionProvider.t_to_js
                                                         x4511)|])
        let (register_implementation_provider :
          selector:DocumentSelector.t ->
            provider:ImplementationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4512 : DocumentSelector.t) ->
            fun ~provider:(x4513 : ImplementationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerImplementationProvider"
                   [|(DocumentSelector.t_to_js x4512);(ImplementationProvider.t_to_js
                                                         x4513)|])
        let (register_type_definition_provider :
          selector:DocumentSelector.t ->
            provider:TypeDefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4514 : DocumentSelector.t) ->
            fun ~provider:(x4515 : TypeDefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerTypeDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4514);(TypeDefinitionProvider.t_to_js
                                                         x4515)|])
        let (register_declaration_provider :
          selector:DocumentSelector.t ->
            provider:DeclarationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4516 : DocumentSelector.t) ->
            fun ~provider:(x4517 : DeclarationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDeclarationProvider"
                   [|(DocumentSelector.t_to_js x4516);(DeclarationProvider.t_to_js
                                                         x4517)|])
        let (register_hover_provider :
          selector:DocumentSelector.t ->
            provider:HoverProvider.t -> Disposable.t)
          =
          fun ~selector:(x4518 : DocumentSelector.t) ->
            fun ~provider:(x4519 : HoverProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerHoverProvider"
                   [|(DocumentSelector.t_to_js x4518);(HoverProvider.t_to_js
                                                         x4519)|])
        let (register_evaluatable_expression_provider :
          selector:DocumentSelector.t ->
            provider:EvaluatableExpressionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4520 : DocumentSelector.t) ->
            fun ~provider:(x4521 : EvaluatableExpressionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerEvaluatableExpressionProvider"
                   [|(DocumentSelector.t_to_js x4520);(EvaluatableExpressionProvider.t_to_js
                                                         x4521)|])
        let (register_inline_values_provider :
          selector:DocumentSelector.t ->
            provider:InlineValuesProvider.t -> Disposable.t)
          =
          fun ~selector:(x4522 : DocumentSelector.t) ->
            fun ~provider:(x4523 : InlineValuesProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerInlineValuesProvider"
                   [|(DocumentSelector.t_to_js x4522);(InlineValuesProvider.t_to_js
                                                         x4523)|])
        let (register_document_highlight_provider :
          selector:DocumentSelector.t ->
            provider:DocumentHighlightProvider.t -> Disposable.t)
          =
          fun ~selector:(x4524 : DocumentSelector.t) ->
            fun ~provider:(x4525 : DocumentHighlightProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentHighlightProvider"
                   [|(DocumentSelector.t_to_js x4524);(DocumentHighlightProvider.t_to_js
                                                         x4525)|])
        let (register_document_symbol_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSymbolProvider.t ->
              ?meta_data:DocumentSymbolProviderMetadata.t ->
                unit -> Disposable.t)
          =
          fun ~selector:(x4526 : DocumentSelector.t) ->
            fun ~provider:(x4527 : DocumentSymbolProvider.t) ->
              fun
                ?meta_data:(x4528 : DocumentSymbolProviderMetadata.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4531 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4531
                          "registerDocumentSymbolProvider") "apply"
                       [|x4531;((let x4529 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4529 "push"
                                      [|(DocumentSelector.t_to_js x4526)|]);
                                 ignore
                                   (Ojs.call x4529 "push"
                                      [|(DocumentSymbolProvider.t_to_js x4527)|]);
                                 (match x4528 with
                                  | Some x4530 ->
                                      ignore
                                        (Ojs.call x4529 "push"
                                           [|(DocumentSymbolProviderMetadata.t_to_js
                                                x4530)|])
                                  | None -> ());
                                 x4529))|])
        let (register_workspace_symbol_provider :
          provider:SymbolInformation.t WorkspaceSymbolProvider.t ->
            Disposable.t)
          =
          fun
            ~provider:(x4532 : SymbolInformation.t WorkspaceSymbolProvider.t)
            ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "registerWorkspaceSymbolProvider"
                 [|(WorkspaceSymbolProvider.t_to_js SymbolInformation.t_to_js
                      x4532)|])
        let (register_reference_provider :
          selector:DocumentSelector.t ->
            provider:ReferenceProvider.t -> Disposable.t)
          =
          fun ~selector:(x4534 : DocumentSelector.t) ->
            fun ~provider:(x4535 : ReferenceProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerReferenceProvider"
                   [|(DocumentSelector.t_to_js x4534);(ReferenceProvider.t_to_js
                                                         x4535)|])
        let (register_rename_provider :
          selector:DocumentSelector.t ->
            provider:RenameProvider.t -> Disposable.t)
          =
          fun ~selector:(x4536 : DocumentSelector.t) ->
            fun ~provider:(x4537 : RenameProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerRenameProvider"
                   [|(DocumentSelector.t_to_js x4536);(RenameProvider.t_to_js
                                                         x4537)|])
        let (register_document_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4538 : DocumentSelector.t) ->
            fun ~provider:(x4539 : DocumentSemanticTokensProvider.t) ->
              fun ~legend:(x4540 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4538);(DocumentSemanticTokensProvider.t_to_js
                                                           x4539);(SemanticTokensLegend.t_to_js
                                                                    x4540)|])
        let (register_document_range_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4541 : DocumentSelector.t) ->
            fun ~provider:(x4542 : DocumentRangeSemanticTokensProvider.t) ->
              fun ~legend:(x4543 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentRangeSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4541);(DocumentRangeSemanticTokensProvider.t_to_js
                                                           x4542);(SemanticTokensLegend.t_to_js
                                                                    x4543)|])
        let (register_document_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4544 : DocumentSelector.t) ->
            fun ~provider:(x4545 : DocumentFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4544);(DocumentFormattingEditProvider.t_to_js
                                                         x4545)|])
        let (register_document_range_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4546 : DocumentSelector.t) ->
            fun ~provider:(x4547 : DocumentRangeFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentRangeFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4546);(DocumentRangeFormattingEditProvider.t_to_js
                                                         x4547)|])
        let (register_on_type_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:OnTypeFormattingEditProvider.t ->
              first_trigger_character:string ->
                more_trigger_character:string list -> Disposable.t)
          =
          fun ~selector:(x4548 : DocumentSelector.t) ->
            fun ~provider:(x4549 : OnTypeFormattingEditProvider.t) ->
              fun ~first_trigger_character:(x4550 : string) ->
                fun ~more_trigger_character:(x4551 : string list) ->
                  Disposable.t_of_js
                    (let x4554 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4554
                          "registerOnTypeFormattingEditProvider") "apply"
                       [|x4554;((let x4552 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4552 "push"
                                      [|(DocumentSelector.t_to_js x4548)|]);
                                 ignore
                                   (Ojs.call x4552 "push"
                                      [|(OnTypeFormattingEditProvider.t_to_js
                                           x4549)|]);
                                 ignore
                                   (Ojs.call x4552 "push"
                                      [|(Ojs.string_to_js x4550)|]);
                                 List.iter
                                   (fun (x4553 : string) ->
                                      ignore
                                        (Ojs.call x4552 "push"
                                           [|(Ojs.string_to_js x4553)|]))
                                   x4551;
                                 x4552))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4555 : DocumentSelector.t) ->
            fun ~provider:(x4556 : SignatureHelpProvider.t) ->
              fun ~trigger_characters:(x4557 : string list) ->
                Disposable.t_of_js
                  (let x4560 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4560
                        "registerSignatureHelpProvider") "apply"
                     [|x4560;((let x4558 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4558 "push"
                                    [|(DocumentSelector.t_to_js x4555)|]);
                               ignore
                                 (Ojs.call x4558 "push"
                                    [|(SignatureHelpProvider.t_to_js x4556)|]);
                               List.iter
                                 (fun (x4559 : string) ->
                                    ignore
                                      (Ojs.call x4558 "push"
                                         [|(Ojs.string_to_js x4559)|])) x4557;
                               x4558))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              metadata:SignatureHelpProviderMetadata.t -> Disposable.t)
          =
          fun ~selector:(x4561 : DocumentSelector.t) ->
            fun ~provider:(x4562 : SignatureHelpProvider.t) ->
              fun ~metadata:(x4563 : SignatureHelpProviderMetadata.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerSignatureHelpProvider"
                     [|(DocumentSelector.t_to_js x4561);(SignatureHelpProvider.t_to_js
                                                           x4562);(SignatureHelpProviderMetadata.t_to_js
                                                                    x4563)|])
        let (register_document_link_provider :
          selector:DocumentSelector.t ->
            provider:DocumentLink.t DocumentLinkProvider.t -> Disposable.t)
          =
          fun ~selector:(x4564 : DocumentSelector.t) ->
            fun ~provider:(x4565 : DocumentLink.t DocumentLinkProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentLinkProvider"
                   [|(DocumentSelector.t_to_js x4564);(DocumentLinkProvider.t_to_js
                                                         DocumentLink.t_to_js
                                                         x4565)|])
        let (register_color_provider :
          selector:DocumentSelector.t ->
            provider:DocumentColorProvider.t -> Disposable.t)
          =
          fun ~selector:(x4567 : DocumentSelector.t) ->
            fun ~provider:(x4568 : DocumentColorProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerColorProvider"
                   [|(DocumentSelector.t_to_js x4567);(DocumentColorProvider.t_to_js
                                                         x4568)|])
        let (register_folding_range_provider :
          selector:DocumentSelector.t ->
            provider:FoldingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4569 : DocumentSelector.t) ->
            fun ~provider:(x4570 : FoldingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerFoldingRangeProvider"
                   [|(DocumentSelector.t_to_js x4569);(FoldingRangeProvider.t_to_js
                                                         x4570)|])
        let (register_selection_range_provider :
          selector:DocumentSelector.t ->
            provider:SelectionRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4571 : DocumentSelector.t) ->
            fun ~provider:(x4572 : SelectionRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerSelectionRangeProvider"
                   [|(DocumentSelector.t_to_js x4571);(SelectionRangeProvider.t_to_js
                                                         x4572)|])
        let (register_call_hierarchy_provider :
          selector:DocumentSelector.t ->
            provider:CallHierarchyProvider.t -> Disposable.t)
          =
          fun ~selector:(x4573 : DocumentSelector.t) ->
            fun ~provider:(x4574 : CallHierarchyProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCallHierarchyProvider"
                   [|(DocumentSelector.t_to_js x4573);(CallHierarchyProvider.t_to_js
                                                         x4574)|])
        let (register_linked_editing_range_provider :
          selector:DocumentSelector.t ->
            provider:LinkedEditingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4575 : DocumentSelector.t) ->
            fun ~provider:(x4576 : LinkedEditingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerLinkedEditingRangeProvider"
                   [|(DocumentSelector.t_to_js x4575);(LinkedEditingRangeProvider.t_to_js
                                                         x4576)|])
        let (set_language_configuration :
          language:string ->
            configuration:LanguageConfiguration.t -> Disposable.t)
          =
          fun ~language:(x4577 : string) ->
            fun ~configuration:(x4578 : LanguageConfiguration.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setLanguageConfiguration"
                   [|(Ojs.string_to_js x4577);(LanguageConfiguration.t_to_js
                                                 x4578)|])
      end
    module SourceControlInputBox =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4580 : Ojs.t) -> x4580
        and t_to_js : t -> Ojs.t = fun (x4579 : Ojs.t) -> x4579
        let (value : t -> string) =
          fun (x4581 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4581) "value")
        let (set_value : t -> string -> unit) =
          fun (x4582 : t) ->
            fun (x4583 : string) ->
              Ojs.set_prop_ascii (t_to_js x4582) "value"
                (Ojs.string_to_js x4583)
        let (placeholder : t -> string) =
          fun (x4584 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4584) "placeholder")
        let (set_placeholder : t -> string -> unit) =
          fun (x4585 : t) ->
            fun (x4586 : string) ->
              Ojs.set_prop_ascii (t_to_js x4585) "placeholder"
                (Ojs.string_to_js x4586)
        let (visible : t -> bool) =
          fun (x4587 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4587) "visible")
        let (set_visible : t -> bool -> unit) =
          fun (x4588 : t) ->
            fun (x4589 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4588) "visible"
                (Ojs.bool_to_js x4589)
      end
    module QuickDiffProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4591 : Ojs.t) -> x4591
        and t_to_js : t -> Ojs.t = fun (x4590 : Ojs.t) -> x4590
        let (provide_original_resource :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> Uri.t ProviderResult.t)
          =
          fun (x4594 : t) ->
            fun ~uri:(x4592 : Uri.t) ->
              fun ~token:(x4593 : CancellationToken.t) ->
                ProviderResult.t_of_js Uri.t_of_js
                  (Ojs.call (t_to_js x4594) "provideOriginalResource"
                     [|(Uri.t_to_js x4592);(CancellationToken.t_to_js x4593)|])
      end
    module SourceControlResourceThemableDecorations =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4597 : Ojs.t) -> x4597
        and t_to_js : t -> Ojs.t = fun (x4596 : Ojs.t) -> x4596
        let (icon_path : t -> Uri.t or_string) =
          fun (x4598 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4598) "iconPath")
      end
    module SourceControlResourceDecorations =
      struct
        include struct include SourceControlResourceThemableDecorations end
        let (strike_through : t -> bool) =
          fun (x4600 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4600) "strikeThrough")
        let (faded : t -> bool) =
          fun (x4601 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4601) "faded")
        let (tooltip : t -> string) =
          fun (x4602 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4602) "tooltip")
        let (light : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4603 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4603) "light")
        let (dark : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4604 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4604) "dark")
      end
    module SourceControlResourceState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4606 : Ojs.t) -> x4606
        and t_to_js : t -> Ojs.t = fun (x4605 : Ojs.t) -> x4605
        let (resource_uri : t -> Uri.t) =
          fun (x4607 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4607) "resourceUri")
        let (command : t -> Command.t) =
          fun (x4608 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x4608) "command")
        let (decorations : t -> SourceControlResourceDecorations.t) =
          fun (x4609 : t) ->
            SourceControlResourceDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4609) "decorations")
        let (context_value : t -> string) =
          fun (x4610 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4610) "contextValue")
      end
    module SourceControlResourceGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4612 : Ojs.t) -> x4612
        and t_to_js : t -> Ojs.t = fun (x4611 : Ojs.t) -> x4611
        let (id : t -> string) =
          fun (x4613 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4613) "id")
        let (label : t -> string) =
          fun (x4614 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4614) "label")
        let (set_label : t -> string -> unit) =
          fun (x4615 : t) ->
            fun (x4616 : string) ->
              Ojs.set_prop_ascii (t_to_js x4615) "label"
                (Ojs.string_to_js x4616)
        let (hide_when_empty : t -> bool) =
          fun (x4617 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4617) "hideWhenEmpty")
        let (set_hide_when_empty : t -> bool -> unit) =
          fun (x4618 : t) ->
            fun (x4619 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4618) "hideWhenEmpty"
                (Ojs.bool_to_js x4619)
        let (resource_states : t -> SourceControlResourceState.t list) =
          fun (x4620 : t) ->
            Ojs.list_of_js SourceControlResourceState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4620) "resourceStates")
        let (set_resource_states :
          t -> SourceControlResourceState.t list -> unit) =
          fun (x4622 : t) ->
            fun (x4623 : SourceControlResourceState.t list) ->
              Ojs.set_prop_ascii (t_to_js x4622) "resourceStates"
                (Ojs.list_to_js SourceControlResourceState.t_to_js x4623)
        let (dispose : t -> unit) =
          fun (x4625 : t) -> ignore (Ojs.call (t_to_js x4625) "dispose" [||])
      end
    module SourceControl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4627 : Ojs.t) -> x4627
        and t_to_js : t -> Ojs.t = fun (x4626 : Ojs.t) -> x4626
        let (id : t -> string) =
          fun (x4628 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4628) "id")
        let (label : t -> string) =
          fun (x4629 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4629) "label")
        let (root_uri : t -> Uri.t or_undefined) =
          fun (x4630 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4630) "rootUri")
        let (input_box : t -> SourceControlInputBox.t) =
          fun (x4632 : t) ->
            SourceControlInputBox.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4632) "inputBox")
        let (count : t -> int) =
          fun (x4633 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4633) "count")
        let (set_count : t -> int -> unit) =
          fun (x4634 : t) ->
            fun (x4635 : int) ->
              Ojs.set_prop_ascii (t_to_js x4634) "count"
                (Ojs.int_to_js x4635)
        let (quick_diff_provider : t -> QuickDiffProvider.t) =
          fun (x4636 : t) ->
            QuickDiffProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4636) "quickDiffProvider")
        let (set_quick_diff_provider : t -> QuickDiffProvider.t -> unit) =
          fun (x4637 : t) ->
            fun (x4638 : QuickDiffProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x4637) "quickDiffProvider"
                (QuickDiffProvider.t_to_js x4638)
        let (commit_template : t -> string) =
          fun (x4639 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4639) "commitTemplate")
        let (set_commit_template : t -> string -> unit) =
          fun (x4640 : t) ->
            fun (x4641 : string) ->
              Ojs.set_prop_ascii (t_to_js x4640) "commitTemplate"
                (Ojs.string_to_js x4641)
        let (accept_input_command : t -> Command.t) =
          fun (x4642 : t) ->
            Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4642) "acceptInputCommand")
        let (set_accept_input_command : t -> Command.t -> unit) =
          fun (x4643 : t) ->
            fun (x4644 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x4643) "acceptInputCommand"
                (Command.t_to_js x4644)
        let (status_bar_commands : t -> Command.t list) =
          fun (x4645 : t) ->
            Ojs.list_of_js Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4645) "statusBarCommands")
        let (set_status_bar_commands : t -> Command.t list -> unit) =
          fun (x4647 : t) ->
            fun (x4648 : Command.t list) ->
              Ojs.set_prop_ascii (t_to_js x4647) "statusBarCommands"
                (Ojs.list_to_js Command.t_to_js x4648)
        let (create_resource_group :
          t -> id:string -> label:string -> SourceControlResourceGroup.t) =
          fun (x4652 : t) ->
            fun ~id:(x4650 : string) ->
              fun ~label:(x4651 : string) ->
                SourceControlResourceGroup.t_of_js
                  (Ojs.call (t_to_js x4652) "createResourceGroup"
                     [|(Ojs.string_to_js x4650);(Ojs.string_to_js x4651)|])
        let (dispose : t -> unit) =
          fun (x4653 : t) -> ignore (Ojs.call (t_to_js x4653) "dispose" [||])
      end
    module Scm =
      struct
        let (input_box : SourceControlInputBox.t) =
          SourceControlInputBox.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "scm") "inputBox")
        let (create_source_control :
          id:string ->
            label:string -> ?root_uri:Uri.t -> unit -> SourceControl.t)
          =
          fun ~id:(x4654 : string) ->
            fun ~label:(x4655 : string) ->
              fun ?root_uri:(x4656 : Uri.t option) ->
                fun () ->
                  SourceControl.t_of_js
                    (let x4659 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "scm" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4659 "createSourceControl")
                       "apply"
                       [|x4659;((let x4657 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4657 "push"
                                      [|(Ojs.string_to_js x4654)|]);
                                 ignore
                                   (Ojs.call x4657 "push"
                                      [|(Ojs.string_to_js x4655)|]);
                                 (match x4656 with
                                  | Some x4658 ->
                                      ignore
                                        (Ojs.call x4657 "push"
                                           [|(Uri.t_to_js x4658)|])
                                  | None -> ());
                                 x4657))|])
      end
    module DebugProtocolMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4661 : Ojs.t) -> x4661
        and t_to_js : t -> Ojs.t = fun (x4660 : Ojs.t) -> x4660
      end
    module DebugProtocolSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4663 : Ojs.t) -> x4663
        and t_to_js : t -> Ojs.t = fun (x4662 : Ojs.t) -> x4662
      end
    module Breakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4665 : Ojs.t) -> x4665
        and t_to_js : t -> Ojs.t = fun (x4664 : Ojs.t) -> x4664
        let (id : t -> string) =
          fun (x4666 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4666) "id")
        let (enabled : t -> bool) =
          fun (x4667 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4667) "enabled")
        let (condition : t -> string) =
          fun (x4668 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4668) "condition")
        let (hit_condition : t -> string) =
          fun (x4669 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4669) "hitCondition")
        let (log_message : t -> string) =
          fun (x4670 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4670) "logMessage")
        let (create :
          ?enabled:bool ->
            ?condition:string ->
              ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ?enabled:(x4671 : bool option) ->
            fun ?condition:(x4672 : string option) ->
              fun ?hit_condition:(x4673 : string option) ->
                fun ?log_message:(x4674 : string option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "Breakpoint")
                         (let x4675 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x4671 with
                           | Some x4679 ->
                               ignore
                                 (Ojs.call x4675 "push"
                                    [|(Ojs.bool_to_js x4679)|])
                           | None -> ());
                          (match x4672 with
                           | Some x4678 ->
                               ignore
                                 (Ojs.call x4675 "push"
                                    [|(Ojs.string_to_js x4678)|])
                           | None -> ());
                          (match x4673 with
                           | Some x4677 ->
                               ignore
                                 (Ojs.call x4675 "push"
                                    [|(Ojs.string_to_js x4677)|])
                           | None -> ());
                          (match x4674 with
                           | Some x4676 ->
                               ignore
                                 (Ojs.call x4675 "push"
                                    [|(Ojs.string_to_js x4676)|])
                           | None -> ());
                          x4675))
      end
    module SourceBreakpoint =
      struct
        include struct include Breakpoint end
        let (location : t -> Location.t) =
          fun (x4680 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x4680) "location")
        let (create :
          location:Location.t ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~location:(x4681 : Location.t) ->
            fun ?enabled:(x4682 : bool option) ->
              fun ?condition:(x4683 : string option) ->
                fun ?hit_condition:(x4684 : string option) ->
                  fun ?log_message:(x4685 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SourceBreakpoint")
                           (let x4686 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4686 "push"
                                 [|(Location.t_to_js x4681)|]);
                            (match x4682 with
                             | Some x4690 ->
                                 ignore
                                   (Ojs.call x4686 "push"
                                      [|(Ojs.bool_to_js x4690)|])
                             | None -> ());
                            (match x4683 with
                             | Some x4689 ->
                                 ignore
                                   (Ojs.call x4686 "push"
                                      [|(Ojs.string_to_js x4689)|])
                             | None -> ());
                            (match x4684 with
                             | Some x4688 ->
                                 ignore
                                   (Ojs.call x4686 "push"
                                      [|(Ojs.string_to_js x4688)|])
                             | None -> ());
                            (match x4685 with
                             | Some x4687 ->
                                 ignore
                                   (Ojs.call x4686 "push"
                                      [|(Ojs.string_to_js x4687)|])
                             | None -> ());
                            x4686))
      end
    module FunctionBreakpoint =
      struct
        include struct include Breakpoint end
        let (function_name : t -> string) =
          fun (x4691 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4691) "functionName")
        let (create :
          function_name:string ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~function_name:(x4692 : string) ->
            fun ?enabled:(x4693 : bool option) ->
              fun ?condition:(x4694 : string option) ->
                fun ?hit_condition:(x4695 : string option) ->
                  fun ?log_message:(x4696 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "FunctionBreakpoint")
                           (let x4697 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4697 "push"
                                 [|(Ojs.string_to_js x4692)|]);
                            (match x4693 with
                             | Some x4701 ->
                                 ignore
                                   (Ojs.call x4697 "push"
                                      [|(Ojs.bool_to_js x4701)|])
                             | None -> ());
                            (match x4694 with
                             | Some x4700 ->
                                 ignore
                                   (Ojs.call x4697 "push"
                                      [|(Ojs.string_to_js x4700)|])
                             | None -> ());
                            (match x4695 with
                             | Some x4699 ->
                                 ignore
                                   (Ojs.call x4697 "push"
                                      [|(Ojs.string_to_js x4699)|])
                             | None -> ());
                            (match x4696 with
                             | Some x4698 ->
                                 ignore
                                   (Ojs.call x4697 "push"
                                      [|(Ojs.string_to_js x4698)|])
                             | None -> ());
                            x4697))
        include struct include Breakpoint end
      end
    module BreakpointsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4703 : Ojs.t) -> x4703
        and t_to_js : t -> Ojs.t = fun (x4702 : Ojs.t) -> x4702
        let (added : t -> Breakpoint.t list) =
          fun (x4704 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4704) "added")
        let (removed : t -> Breakpoint.t list) =
          fun (x4706 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4706) "removed")
        let (changed : t -> Breakpoint.t list) =
          fun (x4708 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4708) "changed")
      end
    module DebugProtocolBreakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4711 : Ojs.t) -> x4711
        and t_to_js : t -> Ojs.t = fun (x4710 : Ojs.t) -> x4710
      end
    module DebugConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4713 : Ojs.t) -> x4713
        and t_to_js : t -> Ojs.t = fun (x4712 : Ojs.t) -> x4712
        let (type_ : t -> string) =
          fun (x4714 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4714) "type")
        let (set_type : t -> string -> unit) =
          fun (x4715 : t) ->
            fun (x4716 : string) ->
              Ojs.set_prop_ascii (t_to_js x4715) "type"
                (Ojs.string_to_js x4716)
        let (name : t -> string) =
          fun (x4717 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4717) "name")
        let (set_name : t -> string -> unit) =
          fun (x4718 : t) ->
            fun (x4719 : string) ->
              Ojs.set_prop_ascii (t_to_js x4718) "name"
                (Ojs.string_to_js x4719)
        let (request : t -> string) =
          fun (x4720 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4720) "request")
        let (set_request : t -> string -> unit) =
          fun (x4721 : t) ->
            fun (x4722 : string) ->
              Ojs.set_prop_ascii (t_to_js x4721) "request"
                (Ojs.string_to_js x4722)
        let (get : t -> string -> any) =
          fun (x4723 : t) ->
            fun (x4724 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x4723) (Ojs.string_to_js x4724))
        let (set : t -> string -> any -> unit) =
          fun (x4725 : t) ->
            fun (x4726 : string) ->
              fun (x4727 : any) ->
                Ojs.set_prop (t_to_js x4725) (Ojs.string_to_js x4726)
                  (any_to_js x4727)
      end
    module DebugSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4729 : Ojs.t) -> x4729
        and t_to_js : t -> Ojs.t = fun (x4728 : Ojs.t) -> x4728
        let (id : t -> string) =
          fun (x4730 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4730) "id")
        let (type_ : t -> string) =
          fun (x4731 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4731) "type")
        let (name : t -> string) =
          fun (x4732 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4732) "name")
        let (set_name : t -> string -> unit) =
          fun (x4733 : t) ->
            fun (x4734 : string) ->
              Ojs.set_prop_ascii (t_to_js x4733) "name"
                (Ojs.string_to_js x4734)
        let (workspace_folder : t -> WorkspaceFolder.t or_undefined) =
          fun (x4735 : t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4735) "workspaceFolder")
        let (configuration : t -> DebugConfiguration.t) =
          fun (x4737 : t) ->
            DebugConfiguration.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4737) "configuration")
        let (custom_request :
          t -> command:string -> ?args:any -> unit -> any Promise.t) =
          fun (x4742 : t) ->
            fun ~command:(x4738 : string) ->
              fun ?args:(x4739 : any option) ->
                fun () ->
                  Promise.t_of_js any_of_js
                    (let x4743 = t_to_js x4742 in
                     Ojs.call (Ojs.get_prop_ascii x4743 "customRequest")
                       "apply"
                       [|x4743;((let x4740 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4740 "push"
                                      [|(Ojs.string_to_js x4738)|]);
                                 (match x4739 with
                                  | Some x4741 ->
                                      ignore
                                        (Ojs.call x4740 "push"
                                           [|(any_to_js x4741)|])
                                  | None -> ());
                                 x4740))|])
        let (get_debug_protocol_breakpoint :
          t ->
            breakpoint:Breakpoint.t ->
              DebugProtocolBreakpoint.t or_undefined Promise.t)
          =
          fun (x4746 : t) ->
            fun ~breakpoint:(x4745 : Breakpoint.t) ->
              Promise.t_of_js
                (fun (x4747 : Ojs.t) ->
                   or_undefined_of_js DebugProtocolBreakpoint.t_of_js x4747)
                (Ojs.call (t_to_js x4746) "getDebugProtocolBreakpoint"
                   [|(Breakpoint.t_to_js x4745)|])
      end
    module DebugSessionCustomEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4750 : Ojs.t) -> x4750
        and t_to_js : t -> Ojs.t = fun (x4749 : Ojs.t) -> x4749
        let (session : t -> DebugSession.t) =
          fun (x4751 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4751) "session")
        let (event : t -> string) =
          fun (x4752 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4752) "event")
        let (body : t -> any) =
          fun (x4753 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x4753) "body")
      end
    module DebugConfigurationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4755 : Ojs.t) -> x4755
        and t_to_js : t -> Ojs.t = fun (x4754 : Ojs.t) -> x4754
        let (provide_debug_configurations :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              ?token:CancellationToken.t ->
                unit -> DebugConfiguration.t list ProviderResult.t)
          =
          fun (x4761 : t) ->
            fun ~folder:(x4756 : WorkspaceFolder.t or_undefined) ->
              fun ?token:(x4757 : CancellationToken.t option) ->
                fun () ->
                  ProviderResult.t_of_js
                    (fun (x4763 : Ojs.t) ->
                       Ojs.list_of_js DebugConfiguration.t_of_js x4763)
                    (let x4762 = t_to_js x4761 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4762 "provideDebugConfigurations")
                       "apply"
                       [|x4762;((let x4758 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4758 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4756)|]);
                                 (match x4757 with
                                  | Some x4759 ->
                                      ignore
                                        (Ojs.call x4758 "push"
                                           [|(CancellationToken.t_to_js x4759)|])
                                  | None -> ());
                                 x4758))|])
        let (resolve_debug_configuration :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4771 : t) ->
            fun ~folder:(x4765 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4766 : DebugConfiguration.t) ->
                fun ?token:(x4767 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4772 = t_to_js x4771 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4772
                            "resolveDebugConfiguration") "apply"
                         [|x4772;((let x4768 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4768 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4765)|]);
                                   ignore
                                     (Ojs.call x4768 "push"
                                        [|(DebugConfiguration.t_to_js x4766)|]);
                                   (match x4767 with
                                    | Some x4769 ->
                                        ignore
                                          (Ojs.call x4768 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4769)|])
                                    | None -> ());
                                   x4768))|])
        let (resolve_debug_configuration_with_substituted_variables :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4780 : t) ->
            fun ~folder:(x4774 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4775 : DebugConfiguration.t) ->
                fun ?token:(x4776 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4781 = t_to_js x4780 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4781
                            "resolveDebugConfigurationWithSubstitutedVariables")
                         "apply"
                         [|x4781;((let x4777 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4777 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4774)|]);
                                   ignore
                                     (Ojs.call x4777 "push"
                                        [|(DebugConfiguration.t_to_js x4775)|]);
                                   (match x4776 with
                                    | Some x4778 ->
                                        ignore
                                          (Ojs.call x4777 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4778)|])
                                    | None -> ());
                                   x4777))|])
      end
    module DebugAdapterExecutableOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4784 : Ojs.t) -> x4784
        and t_to_js : t -> Ojs.t = fun (x4783 : Ojs.t) -> x4783
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4786 : Ojs.t) -> x4786
            and t_to_js : t -> Ojs.t = fun (x4785 : Ojs.t) -> x4785
            let (get : t -> string -> string) =
              fun (x4787 : t) ->
                fun (x4788 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x4787) (Ojs.string_to_js x4788))
            let (set : t -> string -> string -> unit) =
              fun (x4789 : t) ->
                fun (x4790 : string) ->
                  fun (x4791 : string) ->
                    Ojs.set_prop (t_to_js x4789) (Ojs.string_to_js x4790)
                      (Ojs.string_to_js x4791)
          end
        let (env : t -> Env.t) =
          fun (x4792 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x4792) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x4793 : t) ->
            fun (x4794 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x4793) "env" (Env.t_to_js x4794)
        let (cwd : t -> string) =
          fun (x4795 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4795) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x4796 : t) ->
            fun (x4797 : string) ->
              Ojs.set_prop_ascii (t_to_js x4796) "cwd"
                (Ojs.string_to_js x4797)
      end
    module DebugAdapterExecutable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4799 : Ojs.t) -> x4799
        and t_to_js : t -> Ojs.t = fun (x4798 : Ojs.t) -> x4798
        let (create :
          command:string ->
            ?args:string list ->
              ?options:DebugAdapterExecutableOptions.t -> unit -> t)
          =
          fun ~command:(x4800 : string) ->
            fun ?args:(x4801 : string list option) ->
              fun ?options:(x4802 : DebugAdapterExecutableOptions.t option)
                ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "DebugAdapterExecutable")
                       (let x4803 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x4803 "push" [|(Ojs.string_to_js x4800)|]);
                        (match x4801 with
                         | Some x4805 ->
                             ignore
                               (Ojs.call x4803 "push"
                                  [|(Ojs.list_to_js Ojs.string_to_js x4805)|])
                         | None -> ());
                        (match x4802 with
                         | Some x4804 ->
                             ignore
                               (Ojs.call x4803 "push"
                                  [|(DebugAdapterExecutableOptions.t_to_js
                                       x4804)|])
                         | None -> ());
                        x4803))
        let (command : t -> string) =
          fun (x4807 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4807) "command")
        let (args : t -> string list) =
          fun (x4808 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4808) "args")
        let (options : t -> DebugAdapterExecutableOptions.t) =
          fun (x4810 : t) ->
            DebugAdapterExecutableOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4810) "options")
      end
    module DebugAdapterServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4812 : Ojs.t) -> x4812
        and t_to_js : t -> Ojs.t = fun (x4811 : Ojs.t) -> x4811
        let (port : t -> int) =
          fun (x4813 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4813) "port")
        let (host : t -> string) =
          fun (x4814 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4814) "host")
        let (create : port:int -> ?host:string -> unit -> t) =
          fun ~port:(x4815 : int) ->
            fun ?host:(x4816 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DebugAdapterServer")
                     (let x4817 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4817 "push" [|(Ojs.int_to_js x4815)|]);
                      (match x4816 with
                       | Some x4818 ->
                           ignore
                             (Ojs.call x4817 "push"
                                [|(Ojs.string_to_js x4818)|])
                       | None -> ());
                      x4817))
      end
    module DebugAdapterNamedPipeServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4820 : Ojs.t) -> x4820
        and t_to_js : t -> Ojs.t = fun (x4819 : Ojs.t) -> x4819
        let (path : t -> string) =
          fun (x4821 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4821) "path")
        let (create : path:string -> t) =
          fun ~path:(x4822 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterNamedPipeServer")
                 [|(Ojs.string_to_js x4822)|])
      end
    module DebugAdapter =
      struct
        include struct include Disposable end
        let (on_did_send_message : t -> DebugProtocolMessage.t Event.t) =
          fun (x4823 : t) ->
            Event.t_of_js DebugProtocolMessage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4823) "onDidSendMessage")
        let (handle_message : t -> message:DebugProtocolMessage.t -> unit) =
          fun (x4826 : t) ->
            fun ~message:(x4825 : DebugProtocolMessage.t) ->
              ignore
                (Ojs.call (t_to_js x4826) "handleMessage"
                   [|(DebugProtocolMessage.t_to_js x4825)|])
      end
    module DebugAdapterInlineImplementation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4828 : Ojs.t) -> x4828
        and t_to_js : t -> Ojs.t = fun (x4827 : Ojs.t) -> x4827
        let (create : implementation:DebugAdapter.t -> t) =
          fun ~implementation:(x4829 : DebugAdapter.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterInlineImplementation")
                 [|(DebugAdapter.t_to_js x4829)|])
      end
    module DebugAdapterDescriptor =
      struct
        type t =
          (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
            DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4835 : Ojs.t) ->
            union4_of_js DebugAdapterExecutable.t_of_js
              DebugAdapterInlineImplementation.t_of_js
              DebugAdapterNamedPipeServer.t_of_js DebugAdapterServer.t_of_js
              x4835
        and t_to_js : t -> Ojs.t =
          fun
            (x4830 :
              (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
                DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4)
            ->
            union4_to_js DebugAdapterExecutable.t_to_js
              DebugAdapterInlineImplementation.t_to_js
              DebugAdapterNamedPipeServer.t_to_js DebugAdapterServer.t_to_js
              x4830
      end
    module DebugAdapterDescriptorFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4841 : Ojs.t) -> x4841
        and t_to_js : t -> Ojs.t = fun (x4840 : Ojs.t) -> x4840
        let (create_debug_adapter_descriptor :
          t ->
            session:DebugSession.t ->
              executable:DebugAdapterExecutable.t or_undefined ->
                DebugAdapterDescriptor.t ProviderResult.t)
          =
          fun (x4845 : t) ->
            fun ~session:(x4842 : DebugSession.t) ->
              fun ~executable:(x4843 : DebugAdapterExecutable.t or_undefined)
                ->
                ProviderResult.t_of_js DebugAdapterDescriptor.t_of_js
                  (Ojs.call (t_to_js x4845) "createDebugAdapterDescriptor"
                     [|(DebugSession.t_to_js x4842);(or_undefined_to_js
                                                       DebugAdapterExecutable.t_to_js
                                                       x4843)|])
      end
    module DebugAdapterTracker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4848 : Ojs.t) -> x4848
        and t_to_js : t -> Ojs.t = fun (x4847 : Ojs.t) -> x4847
        let (on_will_start_session : t -> unit) =
          fun (x4849 : t) ->
            ignore (Ojs.call (t_to_js x4849) "onWillStartSession" [||])
        let (on_will_receive_message : t -> message:any -> unit) =
          fun (x4851 : t) ->
            fun ~message:(x4850 : any) ->
              ignore
                (Ojs.call (t_to_js x4851) "onWillReceiveMessage"
                   [|(any_to_js x4850)|])
        let (on_did_send_message : t -> message:any -> unit) =
          fun (x4853 : t) ->
            fun ~message:(x4852 : any) ->
              ignore
                (Ojs.call (t_to_js x4853) "onDidSendMessage"
                   [|(any_to_js x4852)|])
        let (on_will_stop_session : t -> unit) =
          fun (x4854 : t) ->
            ignore (Ojs.call (t_to_js x4854) "onWillStopSession" [||])
        let (on_error : t -> error:Error.t -> unit) =
          fun (x4856 : t) ->
            fun ~error:(x4855 : Error.t) ->
              ignore
                (Ojs.call (t_to_js x4856) "onError" [|(Error.t_to_js x4855)|])
        let (on_exit :
          t -> code:int or_undefined -> signal:string or_undefined -> unit) =
          fun (x4861 : t) ->
            fun ~code:(x4857 : int or_undefined) ->
              fun ~signal:(x4859 : string or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x4861) "onExit"
                     [|(or_undefined_to_js Ojs.int_to_js x4857);(or_undefined_to_js
                                                                   Ojs.string_to_js
                                                                   x4859)|])
      end
    module DebugAdapterTrackerFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4863 : Ojs.t) -> x4863
        and t_to_js : t -> Ojs.t = fun (x4862 : Ojs.t) -> x4862
        let (create_debug_adapter_tracker :
          t ->
            session:DebugSession.t -> DebugAdapterTracker.t ProviderResult.t)
          =
          fun (x4865 : t) ->
            fun ~session:(x4864 : DebugSession.t) ->
              ProviderResult.t_of_js DebugAdapterTracker.t_of_js
                (Ojs.call (t_to_js x4865) "createDebugAdapterTracker"
                   [|(DebugSession.t_to_js x4864)|])
      end
    module DebugConsole =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4868 : Ojs.t) -> x4868
        and t_to_js : t -> Ojs.t = fun (x4867 : Ojs.t) -> x4867
        let (append : t -> value:string -> unit) =
          fun (x4870 : t) ->
            fun ~value:(x4869 : string) ->
              ignore
                (Ojs.call (t_to_js x4870) "append"
                   [|(Ojs.string_to_js x4869)|])
        let (append_line : t -> value:string -> unit) =
          fun (x4872 : t) ->
            fun ~value:(x4871 : string) ->
              ignore
                (Ojs.call (t_to_js x4872) "appendLine"
                   [|(Ojs.string_to_js x4871)|])
      end
    module DebugConsoleMode =
      struct
        type t = [ `MergeWithParent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4874 : Ojs.t) ->
            let x4875 = x4874 in
            match Ojs.int_of_js x4875 with
            | 1 -> `MergeWithParent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4873 : [ `MergeWithParent ]) ->
            match x4873 with | `MergeWithParent -> Ojs.int_to_js 1
      end
    module DebugSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4877 : Ojs.t) -> x4877
        and t_to_js : t -> Ojs.t = fun (x4876 : Ojs.t) -> x4876
        let (parent_session : t -> DebugSession.t) =
          fun (x4878 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4878) "parentSession")
        let (set_parent_session : t -> DebugSession.t -> unit) =
          fun (x4879 : t) ->
            fun (x4880 : DebugSession.t) ->
              Ojs.set_prop_ascii (t_to_js x4879) "parentSession"
                (DebugSession.t_to_js x4880)
        let (console_mode : t -> DebugConsoleMode.t) =
          fun (x4881 : t) ->
            DebugConsoleMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4881) "consoleMode")
        let (set_console_mode : t -> DebugConsoleMode.t -> unit) =
          fun (x4882 : t) ->
            fun (x4883 : DebugConsoleMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4882) "consoleMode"
                (DebugConsoleMode.t_to_js x4883)
        let (no_debug : t -> bool) =
          fun (x4884 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4884) "noDebug")
        let (set_no_debug : t -> bool -> unit) =
          fun (x4885 : t) ->
            fun (x4886 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4885) "noDebug"
                (Ojs.bool_to_js x4886)
        let (compact : t -> bool) =
          fun (x4887 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4887) "compact")
        let (set_compact : t -> bool -> unit) =
          fun (x4888 : t) ->
            fun (x4889 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4888) "compact"
                (Ojs.bool_to_js x4889)
      end
    module DebugConfigurationProviderTriggerKind =
      struct
        type t = [ `Dynamic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4891 : Ojs.t) ->
            let x4892 = x4891 in
            match Ojs.int_of_js x4892 with
            | 2 -> `Dynamic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4890 : [ `Dynamic ]) ->
            match x4890 with | `Dynamic -> Ojs.int_to_js 2
      end
    module Debug =
      struct
        let (active_debug_session : DebugSession.t or_undefined) =
          or_undefined_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugSession")
        let (active_debug_console : DebugConsole.t) =
          DebugConsole.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugConsole")
        let (breakpoints : Breakpoint.t list) =
          Ojs.list_of_js Breakpoint.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "breakpoints")
        let (on_did_change_active_debug_session :
          DebugSession.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x4895 : Ojs.t) ->
               or_undefined_of_js DebugSession.t_of_js x4895)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeActiveDebugSession")
        let (on_did_start_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidStartDebugSession")
        let (on_did_receive_debug_session_custom_event :
          DebugSessionCustomEvent.t Event.t) =
          Event.t_of_js DebugSessionCustomEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidReceiveDebugSessionCustomEvent")
        let (on_did_terminate_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidTerminateDebugSession")
        let (on_did_change_breakpoints : BreakpointsChangeEvent.t Event.t) =
          Event.t_of_js BreakpointsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeBreakpoints")
        let (register_debug_configuration_provider :
          debug_type_:string ->
            provider:DebugConfigurationProvider.t ->
              ?trigger_kind:DebugConfigurationProviderTriggerKind.t ->
                unit -> Disposable.t)
          =
          fun ~debug_type_:(x4901 : string) ->
            fun ~provider:(x4902 : DebugConfigurationProvider.t) ->
              fun
                ?trigger_kind:(x4903 :
                                DebugConfigurationProviderTriggerKind.t
                                  option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4906 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4906
                          "registerDebugConfigurationProvider") "apply"
                       [|x4906;((let x4904 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4904 "push"
                                      [|(Ojs.string_to_js x4901)|]);
                                 ignore
                                   (Ojs.call x4904 "push"
                                      [|(DebugConfigurationProvider.t_to_js
                                           x4902)|]);
                                 (match x4903 with
                                  | Some x4905 ->
                                      ignore
                                        (Ojs.call x4904 "push"
                                           [|(DebugConfigurationProviderTriggerKind.t_to_js
                                                x4905)|])
                                  | None -> ());
                                 x4904))|])
        let (register_debug_adapter_descriptor_factory :
          debug_type_:string ->
            factory:DebugAdapterDescriptorFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4907 : string) ->
            fun ~factory:(x4908 : DebugAdapterDescriptorFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterDescriptorFactory"
                   [|(Ojs.string_to_js x4907);(DebugAdapterDescriptorFactory.t_to_js
                                                 x4908)|])
        let (register_debug_adapter_tracker_factory :
          debug_type_:string ->
            factory:DebugAdapterTrackerFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4909 : string) ->
            fun ~factory:(x4910 : DebugAdapterTrackerFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterTrackerFactory"
                   [|(Ojs.string_to_js x4909);(DebugAdapterTrackerFactory.t_to_js
                                                 x4910)|])
        let (start_debugging :
          folder:WorkspaceFolder.t or_undefined ->
            name_or_configuration:DebugConfiguration.t or_string ->
              ?parent_session_or_options:(DebugSession.t,
                DebugSessionOptions.t) union2 -> unit -> bool Promise.t)
          =
          fun ~folder:(x4911 : WorkspaceFolder.t or_undefined) ->
            fun
              ~name_or_configuration:(x4912 : DebugConfiguration.t or_string)
              ->
              fun
                ?parent_session_or_options:(x4913 :
                                             (DebugSession.t,
                                               DebugSessionOptions.t) union2
                                               option)
                ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x4920 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call (Ojs.get_prop_ascii x4920 "startDebugging")
                       "apply"
                       [|x4920;((let x4914 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4914 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4911)|]);
                                 ignore
                                   (Ojs.call x4914 "push"
                                      [|(or_string_to_js
                                           DebugConfiguration.t_to_js x4912)|]);
                                 (match x4913 with
                                  | Some x4915 ->
                                      ignore
                                        (Ojs.call x4914 "push"
                                           [|(union2_to_js
                                                DebugSession.t_to_js
                                                DebugSessionOptions.t_to_js
                                                x4915)|])
                                  | None -> ());
                                 x4914))|])
        let (stop_debugging :
          ?session:DebugSession.t -> unit -> unit Promise.t) =
          fun ?session:(x4922 : DebugSession.t option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x4925 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                 Ojs.call (Ojs.get_prop_ascii x4925 "stopDebugging") "apply"
                   [|x4925;((let x4923 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4922 with
                              | Some x4924 ->
                                  ignore
                                    (Ojs.call x4923 "push"
                                       [|(DebugSession.t_to_js x4924)|])
                              | None -> ());
                             x4923))|])
        let (add_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4927 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "addBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4927)|])
        let (remove_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4929 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "removeBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4929)|])
        let (as_debug_source_uri :
          source:DebugProtocolSource.t ->
            ?session:DebugSession.t -> unit -> Uri.t)
          =
          fun ~source:(x4931 : DebugProtocolSource.t) ->
            fun ?session:(x4932 : DebugSession.t option) ->
              fun () ->
                Uri.t_of_js
                  (let x4935 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                   Ojs.call (Ojs.get_prop_ascii x4935 "asDebugSourceUri")
                     "apply"
                     [|x4935;((let x4933 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4933 "push"
                                    [|(DebugProtocolSource.t_to_js x4931)|]);
                               (match x4932 with
                                | Some x4934 ->
                                    ignore
                                      (Ojs.call x4933 "push"
                                         [|(DebugSession.t_to_js x4934)|])
                                | None -> ());
                               x4933))|])
      end
    module Extensions =
      struct
        let (get_extension :
          extension_id:string -> any Extension.t or_undefined) =
          fun ~extension_id:(x4936 : string) ->
            or_undefined_of_js
              (fun (x4937 : Ojs.t) -> Extension.t_of_js any_of_js x4937)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4936)|])
        let (get_extension :
          extension_id:string -> 'T Extension.t or_undefined) =
          fun ~extension_id:(x4939 : string) ->
            or_undefined_of_js
              (fun (x4940 : Ojs.t) -> Extension.t_of_js Obj.magic x4940)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4939)|])
        let (all : any Extension.t list) =
          Ojs.list_of_js
            (fun (x4942 : Ojs.t) -> Extension.t_of_js any_of_js x4942)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "all")
        let (on_did_change : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "onDidChange")
      end
    module CommentThreadCollapsibleState =
      struct
        type t = [ `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4946 : Ojs.t) ->
            let x4947 = x4946 in
            match Ojs.int_of_js x4947 with
            | 1 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4945 : [ `Expanded ]) ->
            match x4945 with | `Expanded -> Ojs.int_to_js 1
      end
    module CommentMode =
      struct
        type t = [ `Preview ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4949 : Ojs.t) ->
            let x4950 = x4949 in
            match Ojs.int_of_js x4950 with
            | 1 -> `Preview
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4948 : [ `Preview ]) ->
            match x4948 with | `Preview -> Ojs.int_to_js 1
      end
    module CommentAuthorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4952 : Ojs.t) -> x4952
        and t_to_js : t -> Ojs.t = fun (x4951 : Ojs.t) -> x4951
        let (name : t -> string) =
          fun (x4953 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4953) "name")
        let (set_name : t -> string -> unit) =
          fun (x4954 : t) ->
            fun (x4955 : string) ->
              Ojs.set_prop_ascii (t_to_js x4954) "name"
                (Ojs.string_to_js x4955)
        let (icon_path : t -> Uri.t) =
          fun (x4956 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4956) "iconPath")
        let (set_icon_path : t -> Uri.t -> unit) =
          fun (x4957 : t) ->
            fun (x4958 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4957) "iconPath"
                (Uri.t_to_js x4958)
      end
    module CommentReaction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4960 : Ojs.t) -> x4960
        and t_to_js : t -> Ojs.t = fun (x4959 : Ojs.t) -> x4959
        let (label : t -> string) =
          fun (x4961 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4961) "label")
        let (icon_path : t -> Uri.t or_string) =
          fun (x4962 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4962) "iconPath")
        let (count : t -> int) =
          fun (x4964 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4964) "count")
        let (author_has_reacted : t -> bool) =
          fun (x4965 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4965) "authorHasReacted")
      end
    module Comment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4967 : Ojs.t) -> x4967
        and t_to_js : t -> Ojs.t = fun (x4966 : Ojs.t) -> x4966
        let (body : t -> MarkdownString.t or_string) =
          fun (x4968 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4968) "body")
        let (set_body : t -> MarkdownString.t or_string -> unit) =
          fun (x4970 : t) ->
            fun (x4971 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x4970) "body"
                (or_string_to_js MarkdownString.t_to_js x4971)
        let (mode : t -> CommentMode.t) =
          fun (x4973 : t) ->
            CommentMode.t_of_js (Ojs.get_prop_ascii (t_to_js x4973) "mode")
        let (set_mode : t -> CommentMode.t -> unit) =
          fun (x4974 : t) ->
            fun (x4975 : CommentMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4974) "mode"
                (CommentMode.t_to_js x4975)
        let (author : t -> CommentAuthorInformation.t) =
          fun (x4976 : t) ->
            CommentAuthorInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4976) "author")
        let (set_author : t -> CommentAuthorInformation.t -> unit) =
          fun (x4977 : t) ->
            fun (x4978 : CommentAuthorInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x4977) "author"
                (CommentAuthorInformation.t_to_js x4978)
        let (context_value : t -> string) =
          fun (x4979 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4979) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x4980 : t) ->
            fun (x4981 : string) ->
              Ojs.set_prop_ascii (t_to_js x4980) "contextValue"
                (Ojs.string_to_js x4981)
        let (reactions : t -> CommentReaction.t list) =
          fun (x4982 : t) ->
            Ojs.list_of_js CommentReaction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4982) "reactions")
        let (set_reactions : t -> CommentReaction.t list -> unit) =
          fun (x4984 : t) ->
            fun (x4985 : CommentReaction.t list) ->
              Ojs.set_prop_ascii (t_to_js x4984) "reactions"
                (Ojs.list_to_js CommentReaction.t_to_js x4985)
        let (label : t -> string) =
          fun (x4987 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4987) "label")
        let (set_label : t -> string -> unit) =
          fun (x4988 : t) ->
            fun (x4989 : string) ->
              Ojs.set_prop_ascii (t_to_js x4988) "label"
                (Ojs.string_to_js x4989)
      end
    module CommentThread =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4991 : Ojs.t) -> x4991
        and t_to_js : t -> Ojs.t = fun (x4990 : Ojs.t) -> x4990
        let (uri : t -> Uri.t) =
          fun (x4992 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4992) "uri")
        let (range : t -> Range.t) =
          fun (x4993 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4993) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x4994 : t) ->
            fun (x4995 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x4994) "range"
                (Range.t_to_js x4995)
        let (comments : t -> Comment.t list) =
          fun (x4996 : t) ->
            Ojs.list_of_js Comment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4996) "comments")
        let (set_comments : t -> Comment.t list -> unit) =
          fun (x4998 : t) ->
            fun (x4999 : Comment.t list) ->
              Ojs.set_prop_ascii (t_to_js x4998) "comments"
                (Ojs.list_to_js Comment.t_to_js x4999)
        let (collapsible_state : t -> CommentThreadCollapsibleState.t) =
          fun (x5001 : t) ->
            CommentThreadCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5001) "collapsibleState")
        let (set_collapsible_state :
          t -> CommentThreadCollapsibleState.t -> unit) =
          fun (x5002 : t) ->
            fun (x5003 : CommentThreadCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x5002) "collapsibleState"
                (CommentThreadCollapsibleState.t_to_js x5003)
        let (can_reply : t -> bool) =
          fun (x5004 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x5004) "canReply")
        let (set_can_reply : t -> bool -> unit) =
          fun (x5005 : t) ->
            fun (x5006 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5005) "canReply"
                (Ojs.bool_to_js x5006)
        let (context_value : t -> string) =
          fun (x5007 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5007) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x5008 : t) ->
            fun (x5009 : string) ->
              Ojs.set_prop_ascii (t_to_js x5008) "contextValue"
                (Ojs.string_to_js x5009)
        let (label : t -> string) =
          fun (x5010 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5010) "label")
        let (set_label : t -> string -> unit) =
          fun (x5011 : t) ->
            fun (x5012 : string) ->
              Ojs.set_prop_ascii (t_to_js x5011) "label"
                (Ojs.string_to_js x5012)
        let (dispose : t -> unit) =
          fun (x5013 : t) -> ignore (Ojs.call (t_to_js x5013) "dispose" [||])
      end
    module CommentReply =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5015 : Ojs.t) -> x5015
        and t_to_js : t -> Ojs.t = fun (x5014 : Ojs.t) -> x5014
        let (thread : t -> CommentThread.t) =
          fun (x5016 : t) ->
            CommentThread.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5016) "thread")
        let (set_thread : t -> CommentThread.t -> unit) =
          fun (x5017 : t) ->
            fun (x5018 : CommentThread.t) ->
              Ojs.set_prop_ascii (t_to_js x5017) "thread"
                (CommentThread.t_to_js x5018)
        let (text : t -> string) =
          fun (x5019 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5019) "text")
        let (set_text : t -> string -> unit) =
          fun (x5020 : t) ->
            fun (x5021 : string) ->
              Ojs.set_prop_ascii (t_to_js x5020) "text"
                (Ojs.string_to_js x5021)
      end
    module CommentingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5023 : Ojs.t) -> x5023
        and t_to_js : t -> Ojs.t = fun (x5022 : Ojs.t) -> x5022
        let (provide_commenting_ranges :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> Range.t list ProviderResult.t)
          =
          fun (x5026 : t) ->
            fun ~document:(x5024 : TextDocument.t) ->
              fun ~token:(x5025 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x5027 : Ojs.t) -> Ojs.list_of_js Range.t_of_js x5027)
                  (Ojs.call (t_to_js x5026) "provideCommentingRanges"
                     [|(TextDocument.t_to_js x5024);(CancellationToken.t_to_js
                                                       x5025)|])
      end
    module CommentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5030 : Ojs.t) -> x5030
        and t_to_js : t -> Ojs.t = fun (x5029 : Ojs.t) -> x5029
        let (prompt : t -> string) =
          fun (x5031 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5031) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x5032 : t) ->
            fun (x5033 : string) ->
              Ojs.set_prop_ascii (t_to_js x5032) "prompt"
                (Ojs.string_to_js x5033)
        let (place_holder : t -> string) =
          fun (x5034 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5034) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x5035 : t) ->
            fun (x5036 : string) ->
              Ojs.set_prop_ascii (t_to_js x5035) "placeHolder"
                (Ojs.string_to_js x5036)
      end
    module CommentController =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5038 : Ojs.t) -> x5038
        and t_to_js : t -> Ojs.t = fun (x5037 : Ojs.t) -> x5037
        let (id : t -> string) =
          fun (x5039 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5039) "id")
        let (label : t -> string) =
          fun (x5040 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5040) "label")
        let (options : t -> CommentOptions.t) =
          fun (x5041 : t) ->
            CommentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5041) "options")
        let (set_options : t -> CommentOptions.t -> unit) =
          fun (x5042 : t) ->
            fun (x5043 : CommentOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x5042) "options"
                (CommentOptions.t_to_js x5043)
        let (commenting_range_provider : t -> CommentingRangeProvider.t) =
          fun (x5044 : t) ->
            CommentingRangeProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5044) "commentingRangeProvider")
        let (set_commenting_range_provider :
          t -> CommentingRangeProvider.t -> unit) =
          fun (x5045 : t) ->
            fun (x5046 : CommentingRangeProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x5045) "commentingRangeProvider"
                (CommentingRangeProvider.t_to_js x5046)
        let (create_comment_thread :
          t ->
            uri:Uri.t ->
              range:Range.t -> comments:Comment.t list -> CommentThread.t)
          =
          fun (x5051 : t) ->
            fun ~uri:(x5047 : Uri.t) ->
              fun ~range:(x5048 : Range.t) ->
                fun ~comments:(x5049 : Comment.t list) ->
                  CommentThread.t_of_js
                    (Ojs.call (t_to_js x5051) "createCommentThread"
                       [|(Uri.t_to_js x5047);(Range.t_to_js x5048);(Ojs.list_to_js
                                                                    Comment.t_to_js
                                                                    x5049)|])
        let (reaction_handler :
          t ->
            comment:Comment.t -> reaction:CommentReaction.t -> unit Promise.t)
          =
          fun (x5054 : t) ->
            fun ~comment:(x5052 : Comment.t) ->
              fun ~reaction:(x5053 : CommentReaction.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x5054) "reactionHandler"
                     [|(Comment.t_to_js x5052);(CommentReaction.t_to_js x5053)|])
        let (dispose : t -> unit) =
          fun (x5056 : t) -> ignore (Ojs.call (t_to_js x5056) "dispose" [||])
      end
    module Comments =
      struct
        let (create_comment_controller :
          id:string -> label:string -> CommentController.t) =
          fun ~id:(x5057 : string) ->
            fun ~label:(x5058 : string) ->
              CommentController.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "comments")
                   "createCommentController"
                   [|(Ojs.string_to_js x5057);(Ojs.string_to_js x5058)|])
      end
    module AuthenticationSessionAccountInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5060 : Ojs.t) -> x5060
        and t_to_js : t -> Ojs.t = fun (x5059 : Ojs.t) -> x5059
        let (id : t -> string) =
          fun (x5061 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5061) "id")
        let (label : t -> string) =
          fun (x5062 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5062) "label")
      end
    module AuthenticationSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5064 : Ojs.t) -> x5064
        and t_to_js : t -> Ojs.t = fun (x5063 : Ojs.t) -> x5063
        let (id : t -> string) =
          fun (x5065 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5065) "id")
        let (access_token : t -> string) =
          fun (x5066 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5066) "accessToken")
        let (account : t -> AuthenticationSessionAccountInformation.t) =
          fun (x5067 : t) ->
            AuthenticationSessionAccountInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5067) "account")
        let (scopes : t -> string list) =
          fun (x5068 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5068) "scopes")
      end
    module AuthenticationGetSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5071 : Ojs.t) -> x5071
        and t_to_js : t -> Ojs.t = fun (x5070 : Ojs.t) -> x5070
        let (create_if_none : t -> bool) =
          fun (x5072 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5072) "createIfNone")
        let (set_create_if_none : t -> bool -> unit) =
          fun (x5073 : t) ->
            fun (x5074 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5073) "createIfNone"
                (Ojs.bool_to_js x5074)
        let (clear_session_preference : t -> bool) =
          fun (x5075 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5075) "clearSessionPreference")
        let (set_clear_session_preference : t -> bool -> unit) =
          fun (x5076 : t) ->
            fun (x5077 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5076) "clearSessionPreference"
                (Ojs.bool_to_js x5077)
      end
    module AuthenticationProviderInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5079 : Ojs.t) -> x5079
        and t_to_js : t -> Ojs.t = fun (x5078 : Ojs.t) -> x5078
        let (id : t -> string) =
          fun (x5080 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5080) "id")
        let (label : t -> string) =
          fun (x5081 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5081) "label")
      end
    module AuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5083 : Ojs.t) -> x5083
        and t_to_js : t -> Ojs.t = fun (x5082 : Ojs.t) -> x5082
        let (provider : t -> AuthenticationProviderInformation.t) =
          fun (x5084 : t) ->
            AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5084) "provider")
      end
    module AuthenticationProviderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5086 : Ojs.t) -> x5086
        and t_to_js : t -> Ojs.t = fun (x5085 : Ojs.t) -> x5085
        let (supports_multiple_accounts : t -> bool) =
          fun (x5087 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5087) "supportsMultipleAccounts")
      end
    module AuthenticationProviderAuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5089 : Ojs.t) -> x5089
        and t_to_js : t -> Ojs.t = fun (x5088 : Ojs.t) -> x5088
        let (added : t -> AuthenticationSession.t list) =
          fun (x5090 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5090) "added")
        let (removed : t -> AuthenticationSession.t list) =
          fun (x5092 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5092) "removed")
        let (changed : t -> AuthenticationSession.t list) =
          fun (x5094 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5094) "changed")
      end
    module AuthenticationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5097 : Ojs.t) -> x5097
        and t_to_js : t -> Ojs.t = fun (x5096 : Ojs.t) -> x5096
        let (on_did_change_sessions :
          t ->
            AuthenticationProviderAuthenticationSessionsChangeEvent.t Event.t)
          =
          fun (x5098 : t) ->
            Event.t_of_js
              AuthenticationProviderAuthenticationSessionsChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5098) "onDidChangeSessions")
        let (get_sessions :
          t ->
            ?scopes:string list ->
              unit -> AuthenticationSession.t list Promise.t)
          =
          fun (x5104 : t) ->
            fun ?scopes:(x5100 : string list option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x5106 : Ojs.t) ->
                     Ojs.list_of_js AuthenticationSession.t_of_js x5106)
                  (let x5105 = t_to_js x5104 in
                   Ojs.call (Ojs.get_prop_ascii x5105 "getSessions") "apply"
                     [|x5105;((let x5101 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x5100 with
                                | Some x5102 ->
                                    ignore
                                      (Ojs.call x5101 "push"
                                         [|(Ojs.list_to_js Ojs.string_to_js
                                              x5102)|])
                                | None -> ());
                               x5101))|])
        let (create_session :
          t -> scopes:string list -> AuthenticationSession.t Promise.t) =
          fun (x5110 : t) ->
            fun ~scopes:(x5108 : string list) ->
              Promise.t_of_js AuthenticationSession.t_of_js
                (Ojs.call (t_to_js x5110) "createSession"
                   [|(Ojs.list_to_js Ojs.string_to_js x5108)|])
        let (remove_session : t -> session_id:string -> unit Promise.t) =
          fun (x5113 : t) ->
            fun ~session_id:(x5112 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x5113) "removeSession"
                   [|(Ojs.string_to_js x5112)|])
      end
    module Authentication =
      struct
        module AuthenticationGetSessionOptions2 =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x5116 : Ojs.t) -> x5116
            and t_to_js : t -> Ojs.t = fun (x5115 : Ojs.t) -> x5115
            let (create_if_none : t -> [ `L_b_true ]) =
              fun (x5117 : t) ->
                let x5118 = Ojs.get_prop_ascii (t_to_js x5117) "createIfNone" in
                match Ojs.bool_of_js x5118 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_create_if_none : t -> [ `L_b_true ] -> unit) =
              fun (x5119 : t) ->
                fun (x5120 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x5119) "createIfNone"
                    (match x5120 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              options:(AuthenticationGetSessionOptions.t,
                AuthenticationGetSessionOptions2.t) intersection2 ->
                AuthenticationSession.t Promise.t)
          =
          fun ~provider_id:(x5121 : string) ->
            fun ~scopes:(x5122 : string list) ->
              fun
                ~options:(x5124 :
                           (AuthenticationGetSessionOptions.t,
                             AuthenticationGetSessionOptions2.t)
                             intersection2)
                ->
                Promise.t_of_js AuthenticationSession.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "authentication") "getSession"
                     [|(Ojs.string_to_js x5121);(Ojs.list_to_js
                                                   Ojs.string_to_js x5122);(
                       intersection2_to_js
                         AuthenticationGetSessionOptions.t_to_js
                         AuthenticationGetSessionOptions2.t_to_js x5124)|])
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              ?options:AuthenticationGetSessionOptions.t ->
                unit -> AuthenticationSession.t or_undefined Promise.t)
          =
          fun ~provider_id:(x5128 : string) ->
            fun ~scopes:(x5129 : string list) ->
              fun ?options:(x5130 : AuthenticationGetSessionOptions.t option)
                ->
                fun () ->
                  Promise.t_of_js
                    (fun (x5135 : Ojs.t) ->
                       or_undefined_of_js AuthenticationSession.t_of_js x5135)
                    (let x5134 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "authentication" in
                     Ojs.call (Ojs.get_prop_ascii x5134 "getSession") "apply"
                       [|x5134;((let x5131 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x5131 "push"
                                      [|(Ojs.string_to_js x5128)|]);
                                 ignore
                                   (Ojs.call x5131 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js
                                           x5129)|]);
                                 (match x5130 with
                                  | Some x5132 ->
                                      ignore
                                        (Ojs.call x5131 "push"
                                           [|(AuthenticationGetSessionOptions.t_to_js
                                                x5132)|])
                                  | None -> ());
                                 x5131))|])
        let (on_did_change_sessions :
          AuthenticationSessionsChangeEvent.t Event.t) =
          Event.t_of_js AuthenticationSessionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "authentication") "onDidChangeSessions")
        let (register_authentication_provider :
          id:string ->
            label:string ->
              provider:AuthenticationProvider.t ->
                ?options:AuthenticationProviderOptions.t ->
                  unit -> Disposable.t)
          =
          fun ~id:(x5138 : string) ->
            fun ~label:(x5139 : string) ->
              fun ~provider:(x5140 : AuthenticationProvider.t) ->
                fun ?options:(x5141 : AuthenticationProviderOptions.t option)
                  ->
                  fun () ->
                    Disposable.t_of_js
                      (let x5144 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "authentication" in
                       Ojs.call
                         (Ojs.get_prop_ascii x5144
                            "registerAuthenticationProvider") "apply"
                         [|x5144;((let x5142 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x5142 "push"
                                        [|(Ojs.string_to_js x5138)|]);
                                   ignore
                                     (Ojs.call x5142 "push"
                                        [|(Ojs.string_to_js x5139)|]);
                                   ignore
                                     (Ojs.call x5142 "push"
                                        [|(AuthenticationProvider.t_to_js
                                             x5140)|]);
                                   (match x5141 with
                                    | Some x5143 ->
                                        ignore
                                          (Ojs.call x5142 "push"
                                             [|(AuthenticationProviderOptions.t_to_js
                                                  x5143)|])
                                    | None -> ());
                                   x5142))|])
      end
  end
include struct include Vscode end
