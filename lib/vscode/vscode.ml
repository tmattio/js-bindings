[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2015
module Vscode =
  struct
    let (version : string) =
      Ojs.string_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii
              (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
              "vscode") "version")
    module Command =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (title : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "title")
        let (set_title : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "title" (Ojs.string_to_js x5)
        let (command : t -> string) =
          fun (x6 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "command")
        let (set_command : t -> string -> unit) =
          fun (x7 : t) ->
            fun (x8 : string) ->
              Ojs.set_prop_ascii (t_to_js x7) "command" (Ojs.string_to_js x8)
        let (tooltip : t -> string) =
          fun (x9 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x9) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x10 : t) ->
            fun (x11 : string) ->
              Ojs.set_prop_ascii (t_to_js x10) "tooltip"
                (Ojs.string_to_js x11)
        let (arguments : t -> any list) =
          fun (x12 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x12) "arguments")
        let (set_arguments : t -> any list -> unit) =
          fun (x14 : t) ->
            fun (x15 : any list) ->
              Ojs.set_prop_ascii (t_to_js x14) "arguments"
                (Ojs.list_to_js any_to_js x15)
        let (create :
          title:string ->
            command:string ->
              ?tooltip:string -> ?arguments:any list -> unit -> t)
          =
          fun ~title:(x17 : string) ->
            fun ~command:(x18 : string) ->
              fun ?tooltip:(x19 : string option) ->
                fun ?arguments:(x20 : any list option) ->
                  fun () ->
                    let x21 = Ojs.empty_obj () in
                    Ojs.set_prop_ascii x21 "title" (Ojs.string_to_js x17);
                    Ojs.set_prop_ascii x21 "command" (Ojs.string_to_js x18);
                    (match x19 with
                     | Some x24 ->
                         Ojs.set_prop_ascii x21 "tooltip"
                           (Ojs.string_to_js x24)
                     | None -> ());
                    (match x20 with
                     | Some x22 ->
                         Ojs.set_prop_ascii x21 "arguments"
                           (Ojs.list_to_js any_to_js x22)
                     | None -> ());
                    t_of_js x21
      end
    module Position =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x26 : Ojs.t) -> x26
        and t_to_js : t -> Ojs.t = fun (x25 : Ojs.t) -> x25
        let (line : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "line")
        let (character : t -> int) =
          fun (x28 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x28) "character")
        let (create : line:int -> character:int -> t) =
          fun ~line:(x29 : int) ->
            fun ~character:(x30 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Position")
                   [|(Ojs.int_to_js x29);(Ojs.int_to_js x30)|])
        let (is_before : t -> other:t -> bool) =
          fun (x32 : t) ->
            fun ~other:(x31 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x32) "isBefore" [|(t_to_js x31)|])
        let (is_before_or_equal : t -> other:t -> bool) =
          fun (x34 : t) ->
            fun ~other:(x33 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x34) "isBeforeOrEqual" [|(t_to_js x33)|])
        let (is_after : t -> other:t -> bool) =
          fun (x36 : t) ->
            fun ~other:(x35 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x36) "isAfter" [|(t_to_js x35)|])
        let (is_after_or_equal : t -> other:t -> bool) =
          fun (x38 : t) ->
            fun ~other:(x37 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x38) "isAfterOrEqual" [|(t_to_js x37)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x40 : t) ->
            fun ~other:(x39 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x40) "isEqual" [|(t_to_js x39)|])
        let (compare_to : t -> other:t -> int) =
          fun (x42 : t) ->
            fun ~other:(x41 : t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x42) "compareTo" [|(t_to_js x41)|])
        let (translate :
          t -> ?line_delta:int -> ?character_delta:int -> unit -> t) =
          fun (x48 : t) ->
            fun ?line_delta:(x43 : int option) ->
              fun ?character_delta:(x44 : int option) ->
                fun () ->
                  t_of_js
                    (let x49 = t_to_js x48 in
                     Ojs.call (Ojs.get_prop_ascii x49 "translate") "apply"
                       [|x49;((let x45 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x43 with
                                | Some x47 ->
                                    ignore
                                      (Ojs.call x45 "push"
                                         [|(Ojs.int_to_js x47)|])
                                | None -> ());
                               (match x44 with
                                | Some x46 ->
                                    ignore
                                      (Ojs.call x45 "push"
                                         [|(Ojs.int_to_js x46)|])
                                | None -> ());
                               x45))|])
        module TranslateChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
            and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
            let (line_delta : t -> int) =
              fun (x52 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x52) "lineDelta")
            let (set_line_delta : t -> int -> unit) =
              fun (x53 : t) ->
                fun (x54 : int) ->
                  Ojs.set_prop_ascii (t_to_js x53) "lineDelta"
                    (Ojs.int_to_js x54)
            let (character_delta : t -> int) =
              fun (x55 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x55) "characterDelta")
            let (set_character_delta : t -> int -> unit) =
              fun (x56 : t) ->
                fun (x57 : int) ->
                  Ojs.set_prop_ascii (t_to_js x56) "characterDelta"
                    (Ojs.int_to_js x57)
          end
        let (translate' : t -> TranslateChange.t -> t) =
          fun (x59 : t) ->
            fun (x58 : TranslateChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x59) "translate"
                   [|(TranslateChange.t_to_js x58)|])
        let (with_ : t -> ?line:int -> ?character:int -> unit -> t) =
          fun (x65 : t) ->
            fun ?line:(x60 : int option) ->
              fun ?character:(x61 : int option) ->
                fun () ->
                  t_of_js
                    (let x66 = t_to_js x65 in
                     Ojs.call (Ojs.get_prop_ascii x66 "with") "apply"
                       [|x66;((let x62 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x60 with
                                | Some x64 ->
                                    ignore
                                      (Ojs.call x62 "push"
                                         [|(Ojs.int_to_js x64)|])
                                | None -> ());
                               (match x61 with
                                | Some x63 ->
                                    ignore
                                      (Ojs.call x62 "push"
                                         [|(Ojs.int_to_js x63)|])
                                | None -> ());
                               x62))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x68 : Ojs.t) -> x68
            and t_to_js : t -> Ojs.t = fun (x67 : Ojs.t) -> x67
            let (line : t -> int) =
              fun (x69 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x69) "line")
            let (set_line : t -> int -> unit) =
              fun (x70 : t) ->
                fun (x71 : int) ->
                  Ojs.set_prop_ascii (t_to_js x70) "line" (Ojs.int_to_js x71)
            let (character : t -> int) =
              fun (x72 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "character")
            let (set_character : t -> int -> unit) =
              fun (x73 : t) ->
                fun (x74 : int) ->
                  Ojs.set_prop_ascii (t_to_js x73) "character"
                    (Ojs.int_to_js x74)
          end
        let (with' : t -> WithChange.t -> t) =
          fun (x76 : t) ->
            fun (x75 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x76) "with" [|(WithChange.t_to_js x75)|])
      end
    module Range =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x78 : Ojs.t) -> x78
        and t_to_js : t -> Ojs.t = fun (x77 : Ojs.t) -> x77
        let (start : t -> Position.t) =
          fun (x79 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x79) "start")
        let (end_ : t -> Position.t) =
          fun (x80 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x80) "end")
        let (create : start:Position.t -> end_:Position.t -> t) =
          fun ~start:(x81 : Position.t) ->
            fun ~end_:(x82 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                   [|(Position.t_to_js x81);(Position.t_to_js x82)|])
        let (create' :
          start_line:int ->
            start_character:int -> end_line:int -> end_character:int -> t)
          =
          fun ~start_line:(x83 : int) ->
            fun ~start_character:(x84 : int) ->
              fun ~end_line:(x85 : int) ->
                fun ~end_character:(x86 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Range")
                       [|(Ojs.int_to_js x83);(Ojs.int_to_js x84);(Ojs.int_to_js
                                                                    x85);(
                         Ojs.int_to_js x86)|])
        let (is_empty : t -> bool) =
          fun (x87 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x87) "isEmpty")
        let (set_is_empty : t -> bool -> unit) =
          fun (x88 : t) ->
            fun (x89 : bool) ->
              Ojs.set_prop_ascii (t_to_js x88) "isEmpty" (Ojs.bool_to_js x89)
        let (is_single_line : t -> bool) =
          fun (x90 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x90) "isSingleLine")
        let (set_is_single_line : t -> bool -> unit) =
          fun (x91 : t) ->
            fun (x92 : bool) ->
              Ojs.set_prop_ascii (t_to_js x91) "isSingleLine"
                (Ojs.bool_to_js x92)
        let (contains : t -> (Position.t, t) union2 -> bool) =
          fun (x96 : t) ->
            fun (x93 : (Position.t, t) union2) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x96) "contains"
                   [|(union2_to_js Position.t_to_js t_to_js x93)|])
        let (is_equal : t -> other:t -> bool) =
          fun (x98 : t) ->
            fun ~other:(x97 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x98) "isEqual" [|(t_to_js x97)|])
        let (intersection : t -> range:t -> t or_undefined) =
          fun (x100 : t) ->
            fun ~range:(x99 : t) ->
              or_undefined_of_js t_of_js
                (Ojs.call (t_to_js x100) "intersection" [|(t_to_js x99)|])
        let (union : t -> other:t -> t) =
          fun (x103 : t) ->
            fun ~other:(x102 : t) ->
              t_of_js (Ojs.call (t_to_js x103) "union" [|(t_to_js x102)|])
        let (with_ : t -> ?start:Position.t -> ?end_:Position.t -> unit -> t)
          =
          fun (x109 : t) ->
            fun ?start:(x104 : Position.t option) ->
              fun ?end_:(x105 : Position.t option) ->
                fun () ->
                  t_of_js
                    (let x110 = t_to_js x109 in
                     Ojs.call (Ojs.get_prop_ascii x110 "with") "apply"
                       [|x110;((let x106 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x104 with
                                 | Some x108 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Position.t_to_js x108)|])
                                 | None -> ());
                                (match x105 with
                                 | Some x107 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Position.t_to_js x107)|])
                                 | None -> ());
                                x106))|])
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x112 : Ojs.t) -> x112
            and t_to_js : t -> Ojs.t = fun (x111 : Ojs.t) -> x111
            let (start : t -> Position.t) =
              fun (x113 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x113) "start")
            let (set_start : t -> Position.t -> unit) =
              fun (x114 : t) ->
                fun (x115 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x114) "start"
                    (Position.t_to_js x115)
            let (end_ : t -> Position.t) =
              fun (x116 : t) ->
                Position.t_of_js (Ojs.get_prop_ascii (t_to_js x116) "end")
            let (set_end : t -> Position.t -> unit) =
              fun (x117 : t) ->
                fun (x118 : Position.t) ->
                  Ojs.set_prop_ascii (t_to_js x117) "end"
                    (Position.t_to_js x118)
          end
        let (with' : t -> change:WithChange.t -> t) =
          fun (x120 : t) ->
            fun ~change:(x119 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x120) "with" [|(WithChange.t_to_js x119)|])
      end
    module Uri =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x122 : Ojs.t) -> x122
        and t_to_js : t -> Ojs.t = fun (x121 : Ojs.t) -> x121
        let (parse : string -> ?strict:bool -> unit -> t) =
          fun (x123 : string) ->
            fun ?strict:(x124 : bool option) ->
              fun () ->
                t_of_js
                  (let x127 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                   Ojs.call (Ojs.get_prop_ascii x127 "parse") "apply"
                     [|x127;((let x125 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x125 "push"
                                   [|(Ojs.string_to_js x123)|]);
                              (match x124 with
                               | Some x126 ->
                                   ignore
                                     (Ojs.call x125 "push"
                                        [|(Ojs.bool_to_js x126)|])
                               | None -> ());
                              x125))|])
        let (file : string -> t) =
          fun (x128 : string) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Uri") "file"
                 [|(Ojs.string_to_js x128)|])
        let (join_path : t -> string list -> t) =
          fun (x129 : t) ->
            fun (x130 : string list) ->
              t_of_js
                (let x133 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "Uri" in
                 Ojs.call (Ojs.get_prop_ascii x133 "joinPath") "apply"
                   [|x133;((let x131 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x131 "push" [|(t_to_js x129)|]);
                            List.iter
                              (fun (x132 : string) ->
                                 ignore
                                   (Ojs.call x131 "push"
                                      [|(Ojs.string_to_js x132)|])) x130;
                            x131))|])
        let (create :
          scheme:string ->
            authority:string ->
              path:string -> query:string -> fragment:string -> t)
          =
          fun ~scheme:(x134 : string) ->
            fun ~authority:(x135 : string) ->
              fun ~path:(x136 : string) ->
                fun ~query:(x137 : string) ->
                  fun ~fragment:(x138 : string) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode") "Uri")
                         [|(Ojs.string_to_js x134);(Ojs.string_to_js x135);(
                           Ojs.string_to_js x136);(Ojs.string_to_js x137);(
                           Ojs.string_to_js x138)|])
        let (scheme : t -> string) =
          fun (x139 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x139) "scheme")
        let (authority : t -> string) =
          fun (x140 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x140) "authority")
        let (path : t -> string) =
          fun (x141 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x141) "path")
        let (query : t -> string) =
          fun (x142 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x142) "query")
        let (fragment : t -> string) =
          fun (x143 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x143) "fragment")
        let (fs_path : t -> string) =
          fun (x144 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x144) "fsPath")
        module WithChange =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x146 : Ojs.t) -> x146
            and t_to_js : t -> Ojs.t = fun (x145 : Ojs.t) -> x145
            let (scheme : t -> string) =
              fun (x147 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x147) "scheme")
            let (set_scheme : t -> string -> unit) =
              fun (x148 : t) ->
                fun (x149 : string) ->
                  Ojs.set_prop_ascii (t_to_js x148) "scheme"
                    (Ojs.string_to_js x149)
            let (authority : t -> string) =
              fun (x150 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x150) "authority")
            let (set_authority : t -> string -> unit) =
              fun (x151 : t) ->
                fun (x152 : string) ->
                  Ojs.set_prop_ascii (t_to_js x151) "authority"
                    (Ojs.string_to_js x152)
            let (path : t -> string) =
              fun (x153 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x153) "path")
            let (set_path : t -> string -> unit) =
              fun (x154 : t) ->
                fun (x155 : string) ->
                  Ojs.set_prop_ascii (t_to_js x154) "path"
                    (Ojs.string_to_js x155)
            let (query : t -> string) =
              fun (x156 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x156) "query")
            let (set_query : t -> string -> unit) =
              fun (x157 : t) ->
                fun (x158 : string) ->
                  Ojs.set_prop_ascii (t_to_js x157) "query"
                    (Ojs.string_to_js x158)
            let (fragment : t -> string) =
              fun (x159 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x159) "fragment")
            let (set_fragment : t -> string -> unit) =
              fun (x160 : t) ->
                fun (x161 : string) ->
                  Ojs.set_prop_ascii (t_to_js x160) "fragment"
                    (Ojs.string_to_js x161)
          end
        let (with_ : t -> WithChange.t -> t) =
          fun (x163 : t) ->
            fun (x162 : WithChange.t) ->
              t_of_js
                (Ojs.call (t_to_js x163) "with" [|(WithChange.t_to_js x162)|])
        let (to_string : t -> ?skip_encoding:bool -> unit -> string) =
          fun (x167 : t) ->
            fun ?skip_encoding:(x164 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x168 = t_to_js x167 in
                   Ojs.call (Ojs.get_prop_ascii x168 "toString") "apply"
                     [|x168;((let x165 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x164 with
                               | Some x166 ->
                                   ignore
                                     (Ojs.call x165 "push"
                                        [|(Ojs.bool_to_js x166)|])
                               | None -> ());
                              x165))|])
        let (to_json : t -> any) =
          fun (x169 : t) -> any_of_js (Ojs.call (t_to_js x169) "toJSON" [||])
      end
    module TextLine =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x171 : Ojs.t) -> x171
        and t_to_js : t -> Ojs.t = fun (x170 : Ojs.t) -> x170
        let (line_number : t -> int) =
          fun (x172 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x172) "lineNumber")
        let (text : t -> string) =
          fun (x173 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x173) "text")
        let (range : t -> Range.t) =
          fun (x174 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x174) "range")
        let (range_including_line_break : t -> Range.t) =
          fun (x175 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x175) "rangeIncludingLineBreak")
        let (first_non_whitespace_character_index : t -> int) =
          fun (x176 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x176)
                 "firstNonWhitespaceCharacterIndex")
        let (is_empty_or_whitespace : t -> bool) =
          fun (x177 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x177) "isEmptyOrWhitespace")
      end
    module EndOfLine =
      struct
        type t = [ `CRLF ]
        let rec t_of_js : Ojs.t -> t =
          fun (x179 : Ojs.t) ->
            let x180 = x179 in
            match Ojs.int_of_js x180 with | 2 -> `CRLF | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x178 : [ `CRLF ]) ->
            match x178 with | `CRLF -> Ojs.int_to_js 2
      end
    module TextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x182 : Ojs.t) -> x182
        and t_to_js : t -> Ojs.t = fun (x181 : Ojs.t) -> x181
        let (uri : t -> Uri.t) =
          fun (x183 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x183) "uri")
        let (file_name : t -> string) =
          fun (x184 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x184) "fileName")
        let (is_untitled : t -> bool) =
          fun (x185 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x185) "isUntitled")
        let (language_id : t -> string) =
          fun (x186 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x186) "languageId")
        let (version : t -> int) =
          fun (x187 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x187) "version")
        let (is_dirty : t -> bool) =
          fun (x188 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x188) "isDirty")
        let (is_closed : t -> bool) =
          fun (x189 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x189) "isClosed")
        let (save : t -> bool Promise.t) =
          fun (x190 : t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (t_to_js x190) "save" [||])
        let (eol : t -> EndOfLine.t) =
          fun (x192 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x192) "eol")
        let (line_count : t -> int) =
          fun (x193 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x193) "lineCount")
        let (line_at : t -> int -> TextLine.t) =
          fun (x195 : t) ->
            fun (x194 : int) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x195) "lineAt" [|(Ojs.int_to_js x194)|])
        let (line_at' : t -> Position.t -> TextLine.t) =
          fun (x197 : t) ->
            fun (x196 : Position.t) ->
              TextLine.t_of_js
                (Ojs.call (t_to_js x197) "lineAt" [|(Position.t_to_js x196)|])
        let (offset_at : t -> Position.t -> int) =
          fun (x199 : t) ->
            fun (x198 : Position.t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x199) "offsetAt"
                   [|(Position.t_to_js x198)|])
        let (position_at : t -> int -> Position.t) =
          fun (x201 : t) ->
            fun (x200 : int) ->
              Position.t_of_js
                (Ojs.call (t_to_js x201) "positionAt"
                   [|(Ojs.int_to_js x200)|])
        let (get_text : t -> ?range:Range.t -> unit -> string) =
          fun (x205 : t) ->
            fun ?range:(x202 : Range.t option) ->
              fun () ->
                Ojs.string_of_js
                  (let x206 = t_to_js x205 in
                   Ojs.call (Ojs.get_prop_ascii x206 "getText") "apply"
                     [|x206;((let x203 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x202 with
                               | Some x204 ->
                                   ignore
                                     (Ojs.call x203 "push"
                                        [|(Range.t_to_js x204)|])
                               | None -> ());
                              x203))|])
        let (get_word_range_at_position :
          t -> Position.t -> ?regex:regexp -> unit -> Range.t or_undefined) =
          fun (x211 : t) ->
            fun (x207 : Position.t) ->
              fun ?regex:(x208 : regexp option) ->
                fun () ->
                  or_undefined_of_js Range.t_of_js
                    (let x212 = t_to_js x211 in
                     Ojs.call
                       (Ojs.get_prop_ascii x212 "getWordRangeAtPosition")
                       "apply"
                       [|x212;((let x209 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x209 "push"
                                     [|(Position.t_to_js x207)|]);
                                (match x208 with
                                 | Some x210 ->
                                     ignore
                                       (Ojs.call x209 "push"
                                          [|(regexp_to_js x210)|])
                                 | None -> ());
                                x209))|])
        let (validate_range : t -> Range.t -> Range.t) =
          fun (x215 : t) ->
            fun (x214 : Range.t) ->
              Range.t_of_js
                (Ojs.call (t_to_js x215) "validateRange"
                   [|(Range.t_to_js x214)|])
        let (validate_position : t -> Position.t -> Position.t) =
          fun (x217 : t) ->
            fun (x216 : Position.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x217) "validatePosition"
                   [|(Position.t_to_js x216)|])
      end
    module Selection =
      struct
        include struct include Range end
        let (anchor : t -> Position.t) =
          fun (x218 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x218) "anchor")
        let (set_anchor : t -> Position.t -> unit) =
          fun (x219 : t) ->
            fun (x220 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x219) "anchor"
                (Position.t_to_js x220)
        let (active : t -> Position.t) =
          fun (x221 : t) ->
            Position.t_of_js (Ojs.get_prop_ascii (t_to_js x221) "active")
        let (set_active : t -> Position.t -> unit) =
          fun (x222 : t) ->
            fun (x223 : Position.t) ->
              Ojs.set_prop_ascii (t_to_js x222) "active"
                (Position.t_to_js x223)
        let (create : anchor:Position.t -> active:Position.t -> t) =
          fun ~anchor:(x224 : Position.t) ->
            fun ~active:(x225 : Position.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Selection")
                   [|(Position.t_to_js x224);(Position.t_to_js x225)|])
        let (create' :
          anchor_line:int ->
            anchor_character:int ->
              active_line:int -> active_character:int -> t)
          =
          fun ~anchor_line:(x226 : int) ->
            fun ~anchor_character:(x227 : int) ->
              fun ~active_line:(x228 : int) ->
                fun ~active_character:(x229 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Selection")
                       [|(Ojs.int_to_js x226);(Ojs.int_to_js x227);(Ojs.int_to_js
                                                                    x228);(
                         Ojs.int_to_js x229)|])
        let (is_reversed : t -> bool) =
          fun (x230 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x230) "isReversed")
        let (set_is_reversed : t -> bool -> unit) =
          fun (x231 : t) ->
            fun (x232 : bool) ->
              Ojs.set_prop_ascii (t_to_js x231) "isReversed"
                (Ojs.bool_to_js x232)
      end
    module TextEditorCursorStyle =
      struct
        type t =
          [ `Block  | `Underline  | `LineThin  | `BlockOutline 
          | `UnderlineThin ]
        let rec t_of_js : Ojs.t -> t =
          fun (x234 : Ojs.t) ->
            let x235 = x234 in
            match Ojs.int_of_js x235 with
            | 2 -> `Block
            | 3 -> `Underline
            | 4 -> `LineThin
            | 5 -> `BlockOutline
            | 6 -> `UnderlineThin
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x233 :
              [ `Block  | `Underline  | `LineThin  | `BlockOutline 
              | `UnderlineThin ])
            ->
            match x233 with
            | `Block -> Ojs.int_to_js 2
            | `Underline -> Ojs.int_to_js 3
            | `LineThin -> Ojs.int_to_js 4
            | `BlockOutline -> Ojs.int_to_js 5
            | `UnderlineThin -> Ojs.int_to_js 6
      end
    module TextEditorLineNumbersStyle =
      struct
        type t = [ `On  | `Relative ]
        let rec t_of_js : Ojs.t -> t =
          fun (x237 : Ojs.t) ->
            let x238 = x237 in
            match Ojs.int_of_js x238 with
            | 1 -> `On
            | 2 -> `Relative
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x236 : [ `On  | `Relative ]) ->
            match x236 with
            | `On -> Ojs.int_to_js 1
            | `Relative -> Ojs.int_to_js 2
      end
    module TextEditorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x240 : Ojs.t) -> x240
        and t_to_js : t -> Ojs.t = fun (x239 : Ojs.t) -> x239
        let (tab_size : t -> string or_number) =
          fun (x241 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x241) "tabSize")
        let (set_tab_size : t -> string or_number -> unit) =
          fun (x243 : t) ->
            fun (x244 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x243) "tabSize"
                (or_number_to_js Ojs.string_to_js x244)
        let (insert_spaces : t -> bool or_string) =
          fun (x246 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x246) "insertSpaces")
        let (set_insert_spaces : t -> bool or_string -> unit) =
          fun (x248 : t) ->
            fun (x249 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x248) "insertSpaces"
                (or_string_to_js Ojs.bool_to_js x249)
        let (cursor_style : t -> TextEditorCursorStyle.t) =
          fun (x251 : t) ->
            TextEditorCursorStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x251) "cursorStyle")
        let (set_cursor_style : t -> TextEditorCursorStyle.t -> unit) =
          fun (x252 : t) ->
            fun (x253 : TextEditorCursorStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x252) "cursorStyle"
                (TextEditorCursorStyle.t_to_js x253)
        let (line_numbers : t -> TextEditorLineNumbersStyle.t) =
          fun (x254 : t) ->
            TextEditorLineNumbersStyle.t_of_js
              (Ojs.get_prop_ascii (t_to_js x254) "lineNumbers")
        let (set_line_numbers : t -> TextEditorLineNumbersStyle.t -> unit) =
          fun (x255 : t) ->
            fun (x256 : TextEditorLineNumbersStyle.t) ->
              Ojs.set_prop_ascii (t_to_js x255) "lineNumbers"
                (TextEditorLineNumbersStyle.t_to_js x256)
      end
    module TextEditorDecorationType =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x258 : Ojs.t) -> x258
        and t_to_js : t -> Ojs.t = fun (x257 : Ojs.t) -> x257
        let (key : t -> string) =
          fun (x259 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x259) "key")
        let (dispose : t -> unit) =
          fun (x260 : t) -> ignore (Ojs.call (t_to_js x260) "dispose" [||])
      end
    module TextEditorRevealType =
      struct
        type t = [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ]
        let rec t_of_js : Ojs.t -> t =
          fun (x262 : Ojs.t) ->
            let x263 = x262 in
            match Ojs.int_of_js x263 with
            | 1 -> `InCenter
            | 2 -> `InCenterIfOutsideViewport
            | 3 -> `AtTop
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x261 : [ `InCenter  | `InCenterIfOutsideViewport  | `AtTop ])
            ->
            match x261 with
            | `InCenter -> Ojs.int_to_js 1
            | `InCenterIfOutsideViewport -> Ojs.int_to_js 2
            | `AtTop -> Ojs.int_to_js 3
      end
    module TextEditorSelectionChangeKind =
      struct
        type t = [ `Mouse  | `Command ]
        let rec t_of_js : Ojs.t -> t =
          fun (x265 : Ojs.t) ->
            let x266 = x265 in
            match Ojs.int_of_js x266 with
            | 2 -> `Mouse
            | 3 -> `Command
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x264 : [ `Mouse  | `Command ]) ->
            match x264 with
            | `Mouse -> Ojs.int_to_js 2
            | `Command -> Ojs.int_to_js 3
      end
    module TextEditorEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x268 : Ojs.t) -> x268
        and t_to_js : t -> Ojs.t = fun (x267 : Ojs.t) -> x267
        let (replace :
          t ->
            location:(Position.t, Range.t, Selection.t) union3 ->
              value:string -> unit)
          =
          fun (x274 : t) ->
            fun ~location:(x269 : (Position.t, Range.t, Selection.t) union3)
              ->
              fun ~value:(x273 : string) ->
                ignore
                  (Ojs.call (t_to_js x274) "replace"
                     [|(union3_to_js Position.t_to_js Range.t_to_js
                          Selection.t_to_js x269);(Ojs.string_to_js x273)|])
        let (insert : t -> location:Position.t -> value:string -> unit) =
          fun (x277 : t) ->
            fun ~location:(x275 : Position.t) ->
              fun ~value:(x276 : string) ->
                ignore
                  (Ojs.call (t_to_js x277) "insert"
                     [|(Position.t_to_js x275);(Ojs.string_to_js x276)|])
        let (delete : t -> (Range.t, Selection.t) union2 -> unit) =
          fun (x281 : t) ->
            fun (x278 : (Range.t, Selection.t) union2) ->
              ignore
                (Ojs.call (t_to_js x281) "delete"
                   [|(union2_to_js Range.t_to_js Selection.t_to_js x278)|])
        let (set_end_of_line : t -> EndOfLine.t -> unit) =
          fun (x283 : t) ->
            fun (x282 : EndOfLine.t) ->
              ignore
                (Ojs.call (t_to_js x283) "setEndOfLine"
                   [|(EndOfLine.t_to_js x282)|])
      end
    module ViewColumn =
      struct
        type t =
          [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | `Six 
          | `Seven  | `Eight  | `Nine ]
        let rec t_of_js : Ojs.t -> t =
          fun (x285 : Ojs.t) ->
            let x286 = x285 in
            match Ojs.int_of_js x286 with
            | (-2) -> `Beside
            | 1 -> `One
            | 2 -> `Two
            | 3 -> `Three
            | 4 -> `Four
            | 5 -> `Five
            | 6 -> `Six
            | 7 -> `Seven
            | 8 -> `Eight
            | 9 -> `Nine
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x284 :
              [ `Beside  | `One  | `Two  | `Three  | `Four  | `Five  | 
                `Six 
              | `Seven  | `Eight  | `Nine ])
            ->
            match x284 with
            | `Beside -> Ojs.int_to_js (-2)
            | `One -> Ojs.int_to_js 1
            | `Two -> Ojs.int_to_js 2
            | `Three -> Ojs.int_to_js 3
            | `Four -> Ojs.int_to_js 4
            | `Five -> Ojs.int_to_js 5
            | `Six -> Ojs.int_to_js 6
            | `Seven -> Ojs.int_to_js 7
            | `Eight -> Ojs.int_to_js 8
            | `Nine -> Ojs.int_to_js 9
      end
    module SnippetString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x288 : Ojs.t) -> x288
        and t_to_js : t -> Ojs.t = fun (x287 : Ojs.t) -> x287
        let (value : t -> string) =
          fun (x289 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x289) "value")
        let (set_value : t -> string -> unit) =
          fun (x290 : t) ->
            fun (x291 : string) ->
              Ojs.set_prop_ascii (t_to_js x290) "value"
                (Ojs.string_to_js x291)
        let (create : ?value:string -> unit -> t) =
          fun ?value:(x292 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SnippetString")
                   (let x293 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x292 with
                     | Some x294 ->
                         ignore
                           (Ojs.call x293 "push" [|(Ojs.string_to_js x294)|])
                     | None -> ());
                    x293))
        let (append_text : t -> string -> t) =
          fun (x296 : t) ->
            fun (x295 : string) ->
              t_of_js
                (Ojs.call (t_to_js x296) "appendText"
                   [|(Ojs.string_to_js x295)|])
        let (append_tabstop : t -> ?number:int -> unit -> t) =
          fun (x300 : t) ->
            fun ?number:(x297 : int option) ->
              fun () ->
                t_of_js
                  (let x301 = t_to_js x300 in
                   Ojs.call (Ojs.get_prop_ascii x301 "appendTabstop") "apply"
                     [|x301;((let x298 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x297 with
                               | Some x299 ->
                                   ignore
                                     (Ojs.call x298 "push"
                                        [|(Ojs.int_to_js x299)|])
                               | None -> ());
                              x298))|])
        let (append_placeholder : t -> string -> ?number:int -> unit -> t) =
          fun (x306 : t) ->
            fun (x302 : string) ->
              fun ?number:(x303 : int option) ->
                fun () ->
                  t_of_js
                    (let x307 = t_to_js x306 in
                     Ojs.call (Ojs.get_prop_ascii x307 "appendPlaceholder")
                       "apply"
                       [|x307;((let x304 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x304 "push"
                                     [|(Ojs.string_to_js x302)|]);
                                (match x303 with
                                 | Some x305 ->
                                     ignore
                                       (Ojs.call x304 "push"
                                          [|(Ojs.int_to_js x305)|])
                                 | None -> ());
                                x304))|])
        let (append_choice : t -> string list -> ?number:int -> unit -> t) =
          fun (x313 : t) ->
            fun (x308 : string list) ->
              fun ?number:(x309 : int option) ->
                fun () ->
                  t_of_js
                    (let x314 = t_to_js x313 in
                     Ojs.call (Ojs.get_prop_ascii x314 "appendChoice")
                       "apply"
                       [|x314;((let x310 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x310 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x308)|]);
                                (match x309 with
                                 | Some x311 ->
                                     ignore
                                       (Ojs.call x310 "push"
                                          [|(Ojs.int_to_js x311)|])
                                 | None -> ());
                                x310))|])
        let (append_variable : t -> string -> default:string -> t) =
          fun (x317 : t) ->
            fun (x315 : string) ->
              fun ~default:(x316 : string) ->
                t_of_js
                  (Ojs.call (t_to_js x317) "appendVariable"
                     [|(Ojs.string_to_js x315);(Ojs.string_to_js x316)|])
      end
    module ThemeColor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x319 : Ojs.t) -> x319
        and t_to_js : t -> Ojs.t = fun (x318 : Ojs.t) -> x318
        let (create : string -> t) =
          fun (x320 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeColor")
                 [|(Ojs.string_to_js x320)|])
      end
    module ThemeIcon =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x322 : Ojs.t) -> x322
        and t_to_js : t -> Ojs.t = fun (x321 : Ojs.t) -> x321
        let (file : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "File")
        let (folder : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                 "Folder")
        let (id : t -> string) =
          fun (x323 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x323) "id")
        let (color : t -> ThemeColor.t) =
          fun (x324 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x324) "color")
        let (create : string -> ?color:ThemeColor.t -> unit -> t) =
          fun (x325 : string) ->
            fun ?color:(x326 : ThemeColor.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "ThemeIcon")
                     (let x327 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x327 "push" [|(Ojs.string_to_js x325)|]);
                      (match x326 with
                       | Some x328 ->
                           ignore
                             (Ojs.call x327 "push"
                                [|(ThemeColor.t_to_js x328)|])
                       | None -> ());
                      x327))
      end
    module ThemableDecorationAttachmentRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x330 : Ojs.t) -> x330
        and t_to_js : t -> Ojs.t = fun (x329 : Ojs.t) -> x329
        let (content_text : t -> string) =
          fun (x331 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x331) "contentText")
        let (set_content_text : t -> string -> unit) =
          fun (x332 : t) ->
            fun (x333 : string) ->
              Ojs.set_prop_ascii (t_to_js x332) "contentText"
                (Ojs.string_to_js x333)
        let (content_icon_path : t -> Uri.t or_string) =
          fun (x334 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x334) "contentIconPath")
        let (set_content_icon_path : t -> Uri.t or_string -> unit) =
          fun (x336 : t) ->
            fun (x337 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x336) "contentIconPath"
                (or_string_to_js Uri.t_to_js x337)
        let (border : t -> string) =
          fun (x339 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x339) "border")
        let (set_border : t -> string -> unit) =
          fun (x340 : t) ->
            fun (x341 : string) ->
              Ojs.set_prop_ascii (t_to_js x340) "border"
                (Ojs.string_to_js x341)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x342 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x342) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x344 : t) ->
            fun (x345 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x344) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x345)
        let (font_style : t -> string) =
          fun (x347 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x347) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x348 : t) ->
            fun (x349 : string) ->
              Ojs.set_prop_ascii (t_to_js x348) "fontStyle"
                (Ojs.string_to_js x349)
        let (font_weight : t -> string) =
          fun (x350 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x350) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x351 : t) ->
            fun (x352 : string) ->
              Ojs.set_prop_ascii (t_to_js x351) "fontWeight"
                (Ojs.string_to_js x352)
        let (text_decoration : t -> string) =
          fun (x353 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x353) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x354 : t) ->
            fun (x355 : string) ->
              Ojs.set_prop_ascii (t_to_js x354) "textDecoration"
                (Ojs.string_to_js x355)
        let (color : t -> ThemeColor.t or_string) =
          fun (x356 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x356) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x358 : t) ->
            fun (x359 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x358) "color"
                (or_string_to_js ThemeColor.t_to_js x359)
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x361 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x361) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x363 : t) ->
            fun (x364 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x363) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x364)
        let (margin : t -> string) =
          fun (x366 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x366) "margin")
        let (set_margin : t -> string -> unit) =
          fun (x367 : t) ->
            fun (x368 : string) ->
              Ojs.set_prop_ascii (t_to_js x367) "margin"
                (Ojs.string_to_js x368)
        let (width : t -> string) =
          fun (x369 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x369) "width")
        let (set_width : t -> string -> unit) =
          fun (x370 : t) ->
            fun (x371 : string) ->
              Ojs.set_prop_ascii (t_to_js x370) "width"
                (Ojs.string_to_js x371)
        let (height : t -> string) =
          fun (x372 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x372) "height")
        let (set_height : t -> string -> unit) =
          fun (x373 : t) ->
            fun (x374 : string) ->
              Ojs.set_prop_ascii (t_to_js x373) "height"
                (Ojs.string_to_js x374)
      end
    module ThemableDecorationRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x376 : Ojs.t) -> x376
        and t_to_js : t -> Ojs.t = fun (x375 : Ojs.t) -> x375
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x377 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x377) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x379 : t) ->
            fun (x380 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x379) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x380)
        let (outline : t -> string) =
          fun (x382 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x382) "outline")
        let (set_outline : t -> string -> unit) =
          fun (x383 : t) ->
            fun (x384 : string) ->
              Ojs.set_prop_ascii (t_to_js x383) "outline"
                (Ojs.string_to_js x384)
        let (outline_color : t -> ThemeColor.t or_string) =
          fun (x385 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x385) "outlineColor")
        let (set_outline_color : t -> ThemeColor.t or_string -> unit) =
          fun (x387 : t) ->
            fun (x388 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x387) "outlineColor"
                (or_string_to_js ThemeColor.t_to_js x388)
        let (outline_style : t -> string) =
          fun (x390 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x390) "outlineStyle")
        let (set_outline_style : t -> string -> unit) =
          fun (x391 : t) ->
            fun (x392 : string) ->
              Ojs.set_prop_ascii (t_to_js x391) "outlineStyle"
                (Ojs.string_to_js x392)
        let (outline_width : t -> string) =
          fun (x393 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x393) "outlineWidth")
        let (set_outline_width : t -> string -> unit) =
          fun (x394 : t) ->
            fun (x395 : string) ->
              Ojs.set_prop_ascii (t_to_js x394) "outlineWidth"
                (Ojs.string_to_js x395)
        let (border : t -> string) =
          fun (x396 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x396) "border")
        let (set_border : t -> string -> unit) =
          fun (x397 : t) ->
            fun (x398 : string) ->
              Ojs.set_prop_ascii (t_to_js x397) "border"
                (Ojs.string_to_js x398)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x399 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x399) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x401 : t) ->
            fun (x402 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x401) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x402)
        let (border_radius : t -> string) =
          fun (x404 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x404) "borderRadius")
        let (set_border_radius : t -> string -> unit) =
          fun (x405 : t) ->
            fun (x406 : string) ->
              Ojs.set_prop_ascii (t_to_js x405) "borderRadius"
                (Ojs.string_to_js x406)
        let (border_spacing : t -> string) =
          fun (x407 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x407) "borderSpacing")
        let (set_border_spacing : t -> string -> unit) =
          fun (x408 : t) ->
            fun (x409 : string) ->
              Ojs.set_prop_ascii (t_to_js x408) "borderSpacing"
                (Ojs.string_to_js x409)
        let (border_style : t -> string) =
          fun (x410 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x410) "borderStyle")
        let (set_border_style : t -> string -> unit) =
          fun (x411 : t) ->
            fun (x412 : string) ->
              Ojs.set_prop_ascii (t_to_js x411) "borderStyle"
                (Ojs.string_to_js x412)
        let (border_width : t -> string) =
          fun (x413 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x413) "borderWidth")
        let (set_border_width : t -> string -> unit) =
          fun (x414 : t) ->
            fun (x415 : string) ->
              Ojs.set_prop_ascii (t_to_js x414) "borderWidth"
                (Ojs.string_to_js x415)
        let (font_style : t -> string) =
          fun (x416 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x416) "fontStyle")
        let (set_font_style : t -> string -> unit) =
          fun (x417 : t) ->
            fun (x418 : string) ->
              Ojs.set_prop_ascii (t_to_js x417) "fontStyle"
                (Ojs.string_to_js x418)
        let (font_weight : t -> string) =
          fun (x419 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x419) "fontWeight")
        let (set_font_weight : t -> string -> unit) =
          fun (x420 : t) ->
            fun (x421 : string) ->
              Ojs.set_prop_ascii (t_to_js x420) "fontWeight"
                (Ojs.string_to_js x421)
        let (text_decoration : t -> string) =
          fun (x422 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x422) "textDecoration")
        let (set_text_decoration : t -> string -> unit) =
          fun (x423 : t) ->
            fun (x424 : string) ->
              Ojs.set_prop_ascii (t_to_js x423) "textDecoration"
                (Ojs.string_to_js x424)
        let (cursor : t -> string) =
          fun (x425 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x425) "cursor")
        let (set_cursor : t -> string -> unit) =
          fun (x426 : t) ->
            fun (x427 : string) ->
              Ojs.set_prop_ascii (t_to_js x426) "cursor"
                (Ojs.string_to_js x427)
        let (color : t -> ThemeColor.t or_string) =
          fun (x428 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x428) "color")
        let (set_color : t -> ThemeColor.t or_string -> unit) =
          fun (x430 : t) ->
            fun (x431 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x430) "color"
                (or_string_to_js ThemeColor.t_to_js x431)
        let (opacity : t -> string) =
          fun (x433 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x433) "opacity")
        let (set_opacity : t -> string -> unit) =
          fun (x434 : t) ->
            fun (x435 : string) ->
              Ojs.set_prop_ascii (t_to_js x434) "opacity"
                (Ojs.string_to_js x435)
        let (letter_spacing : t -> string) =
          fun (x436 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x436) "letterSpacing")
        let (set_letter_spacing : t -> string -> unit) =
          fun (x437 : t) ->
            fun (x438 : string) ->
              Ojs.set_prop_ascii (t_to_js x437) "letterSpacing"
                (Ojs.string_to_js x438)
        let (gutter_icon_path : t -> Uri.t or_string) =
          fun (x439 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x439) "gutterIconPath")
        let (set_gutter_icon_path : t -> Uri.t or_string -> unit) =
          fun (x441 : t) ->
            fun (x442 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x441) "gutterIconPath"
                (or_string_to_js Uri.t_to_js x442)
        let (gutter_icon_size : t -> string) =
          fun (x444 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x444) "gutterIconSize")
        let (set_gutter_icon_size : t -> string -> unit) =
          fun (x445 : t) ->
            fun (x446 : string) ->
              Ojs.set_prop_ascii (t_to_js x445) "gutterIconSize"
                (Ojs.string_to_js x446)
        let (overview_ruler_color : t -> ThemeColor.t or_string) =
          fun (x447 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x447) "overviewRulerColor")
        let (set_overview_ruler_color : t -> ThemeColor.t or_string -> unit)
          =
          fun (x449 : t) ->
            fun (x450 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x449) "overviewRulerColor"
                (or_string_to_js ThemeColor.t_to_js x450)
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x452 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x452) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x453 : t) ->
            fun (x454 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x453) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x454)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x455 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x455) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x456 : t) ->
            fun (x457 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x456) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x457)
      end
    module OverviewRulerLane =
      struct
        type t = [ `Center  | `Right  | `Full ]
        let rec t_of_js : Ojs.t -> t =
          fun (x459 : Ojs.t) ->
            let x460 = x459 in
            match Ojs.int_of_js x460 with
            | 2 -> `Center
            | 4 -> `Right
            | 7 -> `Full
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x458 : [ `Center  | `Right  | `Full ]) ->
            match x458 with
            | `Center -> Ojs.int_to_js 2
            | `Right -> Ojs.int_to_js 4
            | `Full -> Ojs.int_to_js 7
      end
    module DecorationRangeBehavior =
      struct
        type t = [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]
        let rec t_of_js : Ojs.t -> t =
          fun (x462 : Ojs.t) ->
            let x463 = x462 in
            match Ojs.int_of_js x463 with
            | 1 -> `ClosedClosed
            | 2 -> `OpenClosed
            | 3 -> `ClosedOpen
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x461 : [ `ClosedClosed  | `OpenClosed  | `ClosedOpen ]) ->
            match x461 with
            | `ClosedClosed -> Ojs.int_to_js 1
            | `OpenClosed -> Ojs.int_to_js 2
            | `ClosedOpen -> Ojs.int_to_js 3
      end
    module DecorationRenderOptions =
      struct
        include struct include ThemableDecorationRenderOptions end
        let (is_whole_line : t -> bool) =
          fun (x464 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x464) "isWholeLine")
        let (set_is_whole_line : t -> bool -> unit) =
          fun (x465 : t) ->
            fun (x466 : bool) ->
              Ojs.set_prop_ascii (t_to_js x465) "isWholeLine"
                (Ojs.bool_to_js x466)
        let (range_behavior : t -> DecorationRangeBehavior.t) =
          fun (x467 : t) ->
            DecorationRangeBehavior.t_of_js
              (Ojs.get_prop_ascii (t_to_js x467) "rangeBehavior")
        let (set_range_behavior : t -> DecorationRangeBehavior.t -> unit) =
          fun (x468 : t) ->
            fun (x469 : DecorationRangeBehavior.t) ->
              Ojs.set_prop_ascii (t_to_js x468) "rangeBehavior"
                (DecorationRangeBehavior.t_to_js x469)
        let (overview_ruler_lane : t -> OverviewRulerLane.t) =
          fun (x470 : t) ->
            OverviewRulerLane.t_of_js
              (Ojs.get_prop_ascii (t_to_js x470) "overviewRulerLane")
        let (set_overview_ruler_lane : t -> OverviewRulerLane.t -> unit) =
          fun (x471 : t) ->
            fun (x472 : OverviewRulerLane.t) ->
              Ojs.set_prop_ascii (t_to_js x471) "overviewRulerLane"
                (OverviewRulerLane.t_to_js x472)
        let (light : t -> ThemableDecorationRenderOptions.t) =
          fun (x473 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x473) "light")
        let (set_light : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x474 : t) ->
            fun (x475 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x474) "light"
                (ThemableDecorationRenderOptions.t_to_js x475)
        let (dark : t -> ThemableDecorationRenderOptions.t) =
          fun (x476 : t) ->
            ThemableDecorationRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x476) "dark")
        let (set_dark : t -> ThemableDecorationRenderOptions.t -> unit) =
          fun (x477 : t) ->
            fun (x478 : ThemableDecorationRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x477) "dark"
                (ThemableDecorationRenderOptions.t_to_js x478)
      end
    module ThemableDecorationInstanceRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x480 : Ojs.t) -> x480
        and t_to_js : t -> Ojs.t = fun (x479 : Ojs.t) -> x479
        let (before : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x481 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x481) "before")
        let (set_before :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x482 : t) ->
            fun (x483 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x482) "before"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x483)
        let (after : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x484 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x484) "after")
        let (set_after :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x485 : t) ->
            fun (x486 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x485) "after"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x486)
      end
    module DecorationInstanceRenderOptions =
      struct
        include struct include ThemableDecorationInstanceRenderOptions end
        let (light : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x487 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x487) "light")
        let (set_light :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x488 : t) ->
            fun (x489 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x488) "light"
                (ThemableDecorationInstanceRenderOptions.t_to_js x489)
        let (dark : t -> ThemableDecorationInstanceRenderOptions.t) =
          fun (x490 : t) ->
            ThemableDecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x490) "dark")
        let (set_dark :
          t -> ThemableDecorationInstanceRenderOptions.t -> unit) =
          fun (x491 : t) ->
            fun (x492 : ThemableDecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x491) "dark"
                (ThemableDecorationInstanceRenderOptions.t_to_js x492)
      end
    module MarkedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x494 : Ojs.t) -> x494
        and t_to_js : t -> Ojs.t = fun (x493 : Ojs.t) -> x493
      end
    module DecorationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x496 : Ojs.t) -> x496
        and t_to_js : t -> Ojs.t = fun (x495 : Ojs.t) -> x495
        let (range : t -> Range.t) =
          fun (x497 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x497) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x498 : t) ->
            fun (x499 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x498) "range" (Range.t_to_js x499)
        let (hover_message : t -> (MarkedString.t, MarkedString.t) or_array)
          =
          fun (x500 : t) ->
            or_array_of_js MarkedString.t_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x500) "hoverMessage")
        let (set_hover_message :
          t -> (MarkedString.t, MarkedString.t) or_array -> unit) =
          fun (x503 : t) ->
            fun (x504 : (MarkedString.t, MarkedString.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x503) "hoverMessage"
                (or_array_to_js MarkedString.t_to_js MarkedString.t_to_js
                   x504)
        let (render_options : t -> DecorationInstanceRenderOptions.t) =
          fun (x507 : t) ->
            DecorationInstanceRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x507) "renderOptions")
        let (set_render_options :
          t -> DecorationInstanceRenderOptions.t -> unit) =
          fun (x508 : t) ->
            fun (x509 : DecorationInstanceRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x508) "renderOptions"
                (DecorationInstanceRenderOptions.t_to_js x509)
      end
    module TextEditor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x511 : Ojs.t) -> x511
        and t_to_js : t -> Ojs.t = fun (x510 : Ojs.t) -> x510
        let (document : t -> TextDocument.t) =
          fun (x512 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x512) "document")
        let (selection : t -> Selection.t) =
          fun (x513 : t) ->
            Selection.t_of_js (Ojs.get_prop_ascii (t_to_js x513) "selection")
        let (set_selection : t -> Selection.t -> unit) =
          fun (x514 : t) ->
            fun (x515 : Selection.t) ->
              Ojs.set_prop_ascii (t_to_js x514) "selection"
                (Selection.t_to_js x515)
        let (selections : t -> Selection.t list) =
          fun (x516 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x516) "selections")
        let (set_selections : t -> Selection.t list -> unit) =
          fun (x518 : t) ->
            fun (x519 : Selection.t list) ->
              Ojs.set_prop_ascii (t_to_js x518) "selections"
                (Ojs.list_to_js Selection.t_to_js x519)
        let (visible_ranges : t -> Range.t list) =
          fun (x521 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x521) "visibleRanges")
        let (options : t -> TextEditorOptions.t) =
          fun (x523 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x523) "options")
        let (set_options : t -> TextEditorOptions.t -> unit) =
          fun (x524 : t) ->
            fun (x525 : TextEditorOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x524) "options"
                (TextEditorOptions.t_to_js x525)
        let (view_column : t -> ViewColumn.t) =
          fun (x526 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x526) "viewColumn")
        module EditOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x528 : Ojs.t) -> x528
            and t_to_js : t -> Ojs.t = fun (x527 : Ojs.t) -> x527
            let (undo_stop_before : t -> bool) =
              fun (x529 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x529) "undoStopBefore")
            let (set_undo_stop_before : t -> bool -> unit) =
              fun (x530 : t) ->
                fun (x531 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x530) "undoStopBefore"
                    (Ojs.bool_to_js x531)
            let (undo_stop_after : t -> bool) =
              fun (x532 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x532) "undoStopAfter")
            let (set_undo_stop_after : t -> bool -> unit) =
              fun (x533 : t) ->
                fun (x534 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x533) "undoStopAfter"
                    (Ojs.bool_to_js x534)
          end
        let (edit :
          t ->
            (TextEditorEdit.t -> unit) ->
              ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x540 : t) ->
            fun (x535 : TextEditorEdit.t -> unit) ->
              fun ?options:(x536 : EditOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x541 = t_to_js x540 in
                     Ojs.call (Ojs.get_prop_ascii x541 "edit") "apply"
                       [|x541;((let x537 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x537 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x539 : Ojs.t) ->
                                             x535
                                               (TextEditorEdit.t_of_js x539)))|]);
                                (match x536 with
                                 | Some x538 ->
                                     ignore
                                       (Ojs.call x537 "push"
                                          [|(EditOptions.t_to_js x538)|])
                                 | None -> ());
                                x537))|])
        let (insert_snippet :
          t ->
            SnippetString.t ->
              ?location:(Position.t, Range.t, Position.t list, Range.t list)
                union4 -> ?options:EditOptions.t -> unit -> bool Promise.t)
          =
          fun (x555 : t) ->
            fun (x543 : SnippetString.t) ->
              fun
                ?location:(x544 :
                            (Position.t, Range.t, Position.t list,
                              Range.t list) union4 option)
                ->
                fun ?options:(x545 : EditOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.bool_of_js
                      (let x556 = t_to_js x555 in
                       Ojs.call (Ojs.get_prop_ascii x556 "insertSnippet")
                         "apply"
                         [|x556;((let x546 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x546 "push"
                                       [|(SnippetString.t_to_js x543)|]);
                                  (match x544 with
                                   | Some x548 ->
                                       ignore
                                         (Ojs.call x546 "push"
                                            [|(union4_to_js Position.t_to_js
                                                 Range.t_to_js
                                                 (fun
                                                    (x551 : Position.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Position.t_to_js x551)
                                                 (fun (x553 : Range.t list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Range.t_to_js x553)
                                                 x548)|])
                                   | None -> ());
                                  (match x545 with
                                   | Some x547 ->
                                       ignore
                                         (Ojs.call x546 "push"
                                            [|(EditOptions.t_to_js x547)|])
                                   | None -> ());
                                  x546))|])
        let (set_decorations :
          t ->
            TextEditorDecorationType.t ->
              (DecorationOptions.t, Range.t) union2 list -> unit)
          =
          fun (x563 : t) ->
            fun (x558 : TextEditorDecorationType.t) ->
              fun (x559 : (DecorationOptions.t, Range.t) union2 list) ->
                ignore
                  (Ojs.call (t_to_js x563) "setDecorations"
                     [|(TextEditorDecorationType.t_to_js x558);(Ojs.list_to_js
                                                                  (fun
                                                                    (x560 :
                                                                    (DecorationOptions.t,
                                                                    Range.t)
                                                                    union2)
                                                                    ->
                                                                    union2_to_js
                                                                    DecorationOptions.t_to_js
                                                                    Range.t_to_js
                                                                    x560)
                                                                  x559)|])
        let (reveal_range :
          t ->
            Range.t -> ?reveal_type_:TextEditorRevealType.t -> unit -> unit)
          =
          fun (x568 : t) ->
            fun (x564 : Range.t) ->
              fun ?reveal_type_:(x565 : TextEditorRevealType.t option) ->
                fun () ->
                  ignore
                    (let x569 = t_to_js x568 in
                     Ojs.call (Ojs.get_prop_ascii x569 "revealRange") "apply"
                       [|x569;((let x566 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x566 "push"
                                     [|(Range.t_to_js x564)|]);
                                (match x565 with
                                 | Some x567 ->
                                     ignore
                                       (Ojs.call x566 "push"
                                          [|(TextEditorRevealType.t_to_js
                                               x567)|])
                                 | None -> ());
                                x566))|])
        let (show : t -> ?column:ViewColumn.t -> unit -> unit) =
          fun (x573 : t) ->
            fun ?column:(x570 : ViewColumn.t option) ->
              fun () ->
                ignore
                  (let x574 = t_to_js x573 in
                   Ojs.call (Ojs.get_prop_ascii x574 "show") "apply"
                     [|x574;((let x571 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x570 with
                               | Some x572 ->
                                   ignore
                                     (Ojs.call x571 "push"
                                        [|(ViewColumn.t_to_js x572)|])
                               | None -> ());
                              x571))|])
        let (hide : t -> unit) =
          fun (x575 : t) -> ignore (Ojs.call (t_to_js x575) "hide" [||])
      end
    module TextEditorSelectionChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x577 : Ojs.t) -> x577
        and t_to_js : t -> Ojs.t = fun (x576 : Ojs.t) -> x576
        let (text_editor : t -> TextEditor.t) =
          fun (x578 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x578) "textEditor")
        let (selections : t -> Selection.t list) =
          fun (x579 : t) ->
            Ojs.list_of_js Selection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x579) "selections")
        let (kind : t -> TextEditorSelectionChangeKind.t) =
          fun (x581 : t) ->
            TextEditorSelectionChangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x581) "kind")
      end
    module TextEditorVisibleRangesChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x583 : Ojs.t) -> x583
        and t_to_js : t -> Ojs.t = fun (x582 : Ojs.t) -> x582
        let (text_editor : t -> TextEditor.t) =
          fun (x584 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x584) "textEditor")
        let (visible_ranges : t -> Range.t list) =
          fun (x585 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x585) "visibleRanges")
      end
    module TextEditorOptionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x588 : Ojs.t) -> x588
        and t_to_js : t -> Ojs.t = fun (x587 : Ojs.t) -> x587
        let (text_editor : t -> TextEditor.t) =
          fun (x589 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x589) "textEditor")
        let (options : t -> TextEditorOptions.t) =
          fun (x590 : t) ->
            TextEditorOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x590) "options")
      end
    module TextEditorViewColumnChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x592 : Ojs.t) -> x592
        and t_to_js : t -> Ojs.t = fun (x591 : Ojs.t) -> x591
        let (text_editor : t -> TextEditor.t) =
          fun (x593 : t) ->
            TextEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x593) "textEditor")
        let (view_column : t -> ViewColumn.t) =
          fun (x594 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x594) "viewColumn")
      end
    module TextDocumentShowOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x596 : Ojs.t) -> x596
        and t_to_js : t -> Ojs.t = fun (x595 : Ojs.t) -> x595
        let (view_column : t -> ViewColumn.t) =
          fun (x597 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x597) "viewColumn")
        let (set_view_column : t -> ViewColumn.t -> unit) =
          fun (x598 : t) ->
            fun (x599 : ViewColumn.t) ->
              Ojs.set_prop_ascii (t_to_js x598) "viewColumn"
                (ViewColumn.t_to_js x599)
        let (preserve_focus : t -> bool) =
          fun (x600 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x600) "preserveFocus")
        let (set_preserve_focus : t -> bool -> unit) =
          fun (x601 : t) ->
            fun (x602 : bool) ->
              Ojs.set_prop_ascii (t_to_js x601) "preserveFocus"
                (Ojs.bool_to_js x602)
        let (preview : t -> bool) =
          fun (x603 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x603) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x604 : t) ->
            fun (x605 : bool) ->
              Ojs.set_prop_ascii (t_to_js x604) "preview"
                (Ojs.bool_to_js x605)
        let (selection : t -> Range.t) =
          fun (x606 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x606) "selection")
        let (set_selection : t -> Range.t -> unit) =
          fun (x607 : t) ->
            fun (x608 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x607) "selection"
                (Range.t_to_js x608)
      end
    module DisposableLike =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x610 : Ojs.t) -> x610
        and t_to_js : t -> Ojs.t = fun (x609 : Ojs.t) -> x609
        let (dispose : t -> any) =
          fun (x611 : t) ->
            any_of_js (Ojs.call (t_to_js x611) "dispose" [||])
      end
    module Disposable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x613 : Ojs.t) -> x613
        and t_to_js : t -> Ojs.t = fun (x612 : Ojs.t) -> x612
        let (from : DisposableLike.t list -> t) =
          fun (x614 : DisposableLike.t list) ->
            t_of_js
              (let x617 =
                 Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                      "vscode") "Disposable" in
               Ojs.call (Ojs.get_prop_ascii x617 "from") "apply"
                 [|x617;((let x615 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x616 : DisposableLike.t) ->
                               ignore
                                 (Ojs.call x615 "push"
                                    [|(DisposableLike.t_to_js x616)|])) x614;
                          x615))|])
        let (create : untyped_function -> t) =
          fun (x618 : untyped_function) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "Disposable")
                 [|(untyped_function_to_js x618)|])
        let (dispose : t -> any) =
          fun (x619 : t) ->
            any_of_js (Ojs.call (t_to_js x619) "dispose" [||])
      end
    module Event =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x621 : Ojs.t) -> x621
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x620 : Ojs.t) -> x620
        let (apply :
          'T t ->
            ('T -> any) ->
              ?this_args:any ->
                ?disposables:Disposable.t list -> unit -> Disposable.t)
          =
          fun (x630 : 'T t) ->
            fun (x622 : 'T -> any) ->
              fun ?this_args:(x623 : any option) ->
                fun ?disposables:(x624 : Disposable.t list option) ->
                  fun () ->
                    Disposable.t_of_js
                      (Ojs.call (t_to_js Obj.magic x630) "apply"
                         [|Ojs.null;((let x625 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x625 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x629 : Ojs.t) ->
                                                   any_to_js
                                                     (x622 (Obj.magic x629))))|]);
                                      (match x623 with
                                       | Some x628 ->
                                           ignore
                                             (Ojs.call x625 "push"
                                                [|(any_to_js x628)|])
                                       | None -> ());
                                      (match x624 with
                                       | Some x626 ->
                                           ignore
                                             (Ojs.call x625 "push"
                                                [|(Ojs.list_to_js
                                                     Disposable.t_to_js x626)|])
                                       | None -> ());
                                      x625))|])
      end
    module CancellationToken =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x633 : Ojs.t) -> x633
        and t_to_js : t -> Ojs.t = fun (x632 : Ojs.t) -> x632
        let (is_cancellation_requested : t -> bool) =
          fun (x634 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x634) "isCancellationRequested")
        let (set_is_cancellation_requested : t -> bool -> unit) =
          fun (x635 : t) ->
            fun (x636 : bool) ->
              Ojs.set_prop_ascii (t_to_js x635) "isCancellationRequested"
                (Ojs.bool_to_js x636)
        let (on_cancellation_requested : t -> any Event.t) =
          fun (x637 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x637) "onCancellationRequested")
        let (set_on_cancellation_requested : t -> any Event.t -> unit) =
          fun (x639 : t) ->
            fun (x640 : any Event.t) ->
              Ojs.set_prop_ascii (t_to_js x639) "onCancellationRequested"
                (Event.t_to_js any_to_js x640)
      end
    module CancellationTokenSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x643 : Ojs.t) -> x643
        and t_to_js : t -> Ojs.t = fun (x642 : Ojs.t) -> x642
        let (token : t -> CancellationToken.t) =
          fun (x644 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x644) "token")
        let (set_token : t -> CancellationToken.t -> unit) =
          fun (x645 : t) ->
            fun (x646 : CancellationToken.t) ->
              Ojs.set_prop_ascii (t_to_js x645) "token"
                (CancellationToken.t_to_js x646)
        let (cancel : t -> unit) =
          fun (x647 : t) -> ignore (Ojs.call (t_to_js x647) "cancel" [||])
        let (dispose : t -> unit) =
          fun (x648 : t) -> ignore (Ojs.call (t_to_js x648) "dispose" [||])
      end
    module CancellationError =
      struct
        include struct include Error end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CancellationError") [||])
      end
    module EventEmitter =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x650 : Ojs.t) -> x650
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x649 : Ojs.t) -> x649
        let (event : 'T t -> 'T Event.t) =
          fun (x651 : 'T t) ->
            Event.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x651) "event")
        let (set_event : 'T t -> 'T Event.t -> unit) =
          fun (x654 : 'T t) ->
            fun (x655 : 'T Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x654) "event"
                (Event.t_to_js Obj.magic x655)
        let (fire : 'T t -> 'T -> unit) =
          fun (x659 : 'T t) ->
            fun (x658 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x659) "fire"
                   [|(Obj.magic x658)|])
        let (dispose : 'T t -> unit) =
          fun (x661 : 'T t) ->
            ignore (Ojs.call (t_to_js Obj.magic x661) "dispose" [||])
        let (create : unit -> 'T t) =
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "EventEmitter")
                 [||])
      end
    module FileSystemWatcher =
      struct
        include struct include Disposable end
        let (ignore_create_events : t -> bool) =
          fun (x664 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x664) "ignoreCreateEvents")
        let (set_ignore_create_events : t -> bool -> unit) =
          fun (x665 : t) ->
            fun (x666 : bool) ->
              Ojs.set_prop_ascii (t_to_js x665) "ignoreCreateEvents"
                (Ojs.bool_to_js x666)
        let (ignore_change_events : t -> bool) =
          fun (x667 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x667) "ignoreChangeEvents")
        let (set_ignore_change_events : t -> bool -> unit) =
          fun (x668 : t) ->
            fun (x669 : bool) ->
              Ojs.set_prop_ascii (t_to_js x668) "ignoreChangeEvents"
                (Ojs.bool_to_js x669)
        let (ignore_delete_events : t -> bool) =
          fun (x670 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x670) "ignoreDeleteEvents")
        let (set_ignore_delete_events : t -> bool -> unit) =
          fun (x671 : t) ->
            fun (x672 : bool) ->
              Ojs.set_prop_ascii (t_to_js x671) "ignoreDeleteEvents"
                (Ojs.bool_to_js x672)
        let (on_did_create : t -> Uri.t Event.t) =
          fun (x673 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x673) "onDidCreate")
        let (set_on_did_create : t -> Uri.t Event.t -> unit) =
          fun (x675 : t) ->
            fun (x676 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x675) "onDidCreate"
                (Event.t_to_js Uri.t_to_js x676)
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x678 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x678) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x680 : t) ->
            fun (x681 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x680) "onDidChange"
                (Event.t_to_js Uri.t_to_js x681)
        let (on_did_delete : t -> Uri.t Event.t) =
          fun (x683 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x683) "onDidDelete")
        let (set_on_did_delete : t -> Uri.t Event.t -> unit) =
          fun (x685 : t) ->
            fun (x686 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x685) "onDidDelete"
                (Event.t_to_js Uri.t_to_js x686)
      end
    module ProviderResult =
      struct
        type 'T t =
          [ `Value of 'T or_null_or_undefined 
          | `Promise of 'T or_null_or_undefined Promise.t ]
        let rec t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun
              (x688 :
                [ `Value of __T or_null_or_undefined 
                | `Promise of __T or_null_or_undefined Promise.t ])
              ->
              match x688 with
              | `Value x689 -> or_null_or_undefined_to_js __T_to_js x689
              | `Promise x691 ->
                  Promise.t_to_js
                    (fun (x692 : __T or_null_or_undefined) ->
                       or_null_or_undefined_to_js __T_to_js x692) x691
        let t_to_js ml_to_js =
          function
          | `Value v -> or_undefined_to_js ml_to_js v
          | `Promise p -> Promise.t_to_js (or_undefined_to_js ml_to_js) p
        let t_of_js ml_of_js js_val =
          if Ojs.has_property js_val "then"
          then
            `Promise (Promise.t_of_js (or_undefined_of_js ml_of_js) js_val)
          else `Value (or_undefined_of_js ml_of_js js_val)
      end
    module TextDocumentContentProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x700 : Ojs.t) -> x700
        and t_to_js : t -> Ojs.t = fun (x699 : Ojs.t) -> x699
        let (on_did_change : t -> Uri.t Event.t) =
          fun (x701 : t) ->
            Event.t_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x701) "onDidChange")
        let (set_on_did_change : t -> Uri.t Event.t -> unit) =
          fun (x703 : t) ->
            fun (x704 : Uri.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x703) "onDidChange"
                (Event.t_to_js Uri.t_to_js x704)
        let (provide_text_document_content :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> string ProviderResult.t)
          =
          fun (x708 : t) ->
            fun ~uri:(x706 : Uri.t) ->
              fun ~token:(x707 : CancellationToken.t) ->
                ProviderResult.t_of_js Ojs.string_of_js
                  (Ojs.call (t_to_js x708) "provideTextDocumentContent"
                     [|(Uri.t_to_js x706);(CancellationToken.t_to_js x707)|])
      end
    module QuickPickItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x711 : Ojs.t) -> x711
        and t_to_js : t -> Ojs.t = fun (x710 : Ojs.t) -> x710
        let (label : t -> string) =
          fun (x712 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x712) "label")
        let (set_label : t -> string -> unit) =
          fun (x713 : t) ->
            fun (x714 : string) ->
              Ojs.set_prop_ascii (t_to_js x713) "label"
                (Ojs.string_to_js x714)
        let (description : t -> string) =
          fun (x715 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x715) "description")
        let (set_description : t -> string -> unit) =
          fun (x716 : t) ->
            fun (x717 : string) ->
              Ojs.set_prop_ascii (t_to_js x716) "description"
                (Ojs.string_to_js x717)
        let (detail : t -> string) =
          fun (x718 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x718) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x719 : t) ->
            fun (x720 : string) ->
              Ojs.set_prop_ascii (t_to_js x719) "detail"
                (Ojs.string_to_js x720)
        let (picked : t -> bool) =
          fun (x721 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x721) "picked")
        let (set_picked : t -> bool -> unit) =
          fun (x722 : t) ->
            fun (x723 : bool) ->
              Ojs.set_prop_ascii (t_to_js x722) "picked"
                (Ojs.bool_to_js x723)
        let (always_show : t -> bool) =
          fun (x724 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x724) "alwaysShow")
        let (set_always_show : t -> bool -> unit) =
          fun (x725 : t) ->
            fun (x726 : bool) ->
              Ojs.set_prop_ascii (t_to_js x725) "alwaysShow"
                (Ojs.bool_to_js x726)
      end
    module QuickPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x728 : Ojs.t) -> x728
        and t_to_js : t -> Ojs.t = fun (x727 : Ojs.t) -> x727
        let (match_on_description : t -> bool) =
          fun (x729 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x729) "matchOnDescription")
        let (set_match_on_description : t -> bool -> unit) =
          fun (x730 : t) ->
            fun (x731 : bool) ->
              Ojs.set_prop_ascii (t_to_js x730) "matchOnDescription"
                (Ojs.bool_to_js x731)
        let (match_on_detail : t -> bool) =
          fun (x732 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x732) "matchOnDetail")
        let (set_match_on_detail : t -> bool -> unit) =
          fun (x733 : t) ->
            fun (x734 : bool) ->
              Ojs.set_prop_ascii (t_to_js x733) "matchOnDetail"
                (Ojs.bool_to_js x734)
        let (place_holder : t -> string) =
          fun (x735 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x735) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x736 : t) ->
            fun (x737 : string) ->
              Ojs.set_prop_ascii (t_to_js x736) "placeHolder"
                (Ojs.string_to_js x737)
        let (ignore_focus_out : t -> bool) =
          fun (x738 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x738) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x739 : t) ->
            fun (x740 : bool) ->
              Ojs.set_prop_ascii (t_to_js x739) "ignoreFocusOut"
                (Ojs.bool_to_js x740)
        let (can_pick_many : t -> bool) =
          fun (x741 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x741) "canPickMany")
        let (set_can_pick_many : t -> bool -> unit) =
          fun (x742 : t) ->
            fun (x743 : bool) ->
              Ojs.set_prop_ascii (t_to_js x742) "canPickMany"
                (Ojs.bool_to_js x743)
        let (on_did_select_item : t -> item:QuickPickItem.t or_string -> any)
          =
          fun (x746 : t) ->
            fun ~item:(x744 : QuickPickItem.t or_string) ->
              any_of_js
                (Ojs.call (t_to_js x746) "onDidSelectItem"
                   [|(or_string_to_js QuickPickItem.t_to_js x744)|])
      end
    module WorkspaceFolderPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x748 : Ojs.t) -> x748
        and t_to_js : t -> Ojs.t = fun (x747 : Ojs.t) -> x747
        let (place_holder : t -> string) =
          fun (x749 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x749) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x750 : t) ->
            fun (x751 : string) ->
              Ojs.set_prop_ascii (t_to_js x750) "placeHolder"
                (Ojs.string_to_js x751)
        let (ignore_focus_out : t -> bool) =
          fun (x752 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x752) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x753 : t) ->
            fun (x754 : bool) ->
              Ojs.set_prop_ascii (t_to_js x753) "ignoreFocusOut"
                (Ojs.bool_to_js x754)
      end
    module OpenDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x756 : Ojs.t) -> x756
        and t_to_js : t -> Ojs.t = fun (x755 : Ojs.t) -> x755
        let (default_uri : t -> Uri.t) =
          fun (x757 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x757) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x758 : t) ->
            fun (x759 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x758) "defaultUri"
                (Uri.t_to_js x759)
        let (open_label : t -> string) =
          fun (x760 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x760) "openLabel")
        let (set_open_label : t -> string -> unit) =
          fun (x761 : t) ->
            fun (x762 : string) ->
              Ojs.set_prop_ascii (t_to_js x761) "openLabel"
                (Ojs.string_to_js x762)
        let (can_select_files : t -> bool) =
          fun (x763 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x763) "canSelectFiles")
        let (set_can_select_files : t -> bool -> unit) =
          fun (x764 : t) ->
            fun (x765 : bool) ->
              Ojs.set_prop_ascii (t_to_js x764) "canSelectFiles"
                (Ojs.bool_to_js x765)
        let (can_select_folders : t -> bool) =
          fun (x766 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x766) "canSelectFolders")
        let (set_can_select_folders : t -> bool -> unit) =
          fun (x767 : t) ->
            fun (x768 : bool) ->
              Ojs.set_prop_ascii (t_to_js x767) "canSelectFolders"
                (Ojs.bool_to_js x768)
        let (can_select_many : t -> bool) =
          fun (x769 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x769) "canSelectMany")
        let (set_can_select_many : t -> bool -> unit) =
          fun (x770 : t) ->
            fun (x771 : bool) ->
              Ojs.set_prop_ascii (t_to_js x770) "canSelectMany"
                (Ojs.bool_to_js x771)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x773 : Ojs.t) -> x773
            and t_to_js : t -> Ojs.t = fun (x772 : Ojs.t) -> x772
            let (get : t -> string -> string list) =
              fun (x774 : t) ->
                fun (x775 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x774) (Ojs.string_to_js x775))
            let (set : t -> string -> string list -> unit) =
              fun (x777 : t) ->
                fun (x778 : string) ->
                  fun (x779 : string list) ->
                    Ojs.set_prop (t_to_js x777) (Ojs.string_to_js x778)
                      (Ojs.list_to_js Ojs.string_to_js x779)
          end
        let (filters : t -> Filters.t) =
          fun (x781 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x781) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x782 : t) ->
            fun (x783 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x782) "filters"
                (Filters.t_to_js x783)
        let (title : t -> string) =
          fun (x784 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x784) "title")
        let (set_title : t -> string -> unit) =
          fun (x785 : t) ->
            fun (x786 : string) ->
              Ojs.set_prop_ascii (t_to_js x785) "title"
                (Ojs.string_to_js x786)
      end
    module SaveDialogOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x788 : Ojs.t) -> x788
        and t_to_js : t -> Ojs.t = fun (x787 : Ojs.t) -> x787
        let (default_uri : t -> Uri.t) =
          fun (x789 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x789) "defaultUri")
        let (set_default_uri : t -> Uri.t -> unit) =
          fun (x790 : t) ->
            fun (x791 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x790) "defaultUri"
                (Uri.t_to_js x791)
        let (save_label : t -> string) =
          fun (x792 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x792) "saveLabel")
        let (set_save_label : t -> string -> unit) =
          fun (x793 : t) ->
            fun (x794 : string) ->
              Ojs.set_prop_ascii (t_to_js x793) "saveLabel"
                (Ojs.string_to_js x794)
        module Filters =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x796 : Ojs.t) -> x796
            and t_to_js : t -> Ojs.t = fun (x795 : Ojs.t) -> x795
            let (get : t -> string -> string list) =
              fun (x797 : t) ->
                fun (x798 : string) ->
                  Ojs.list_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x797) (Ojs.string_to_js x798))
            let (set : t -> string -> string list -> unit) =
              fun (x800 : t) ->
                fun (x801 : string) ->
                  fun (x802 : string list) ->
                    Ojs.set_prop (t_to_js x800) (Ojs.string_to_js x801)
                      (Ojs.list_to_js Ojs.string_to_js x802)
          end
        let (filters : t -> Filters.t) =
          fun (x804 : t) ->
            Filters.t_of_js (Ojs.get_prop_ascii (t_to_js x804) "filters")
        let (set_filters : t -> Filters.t -> unit) =
          fun (x805 : t) ->
            fun (x806 : Filters.t) ->
              Ojs.set_prop_ascii (t_to_js x805) "filters"
                (Filters.t_to_js x806)
        let (title : t -> string) =
          fun (x807 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x807) "title")
        let (set_title : t -> string -> unit) =
          fun (x808 : t) ->
            fun (x809 : string) ->
              Ojs.set_prop_ascii (t_to_js x808) "title"
                (Ojs.string_to_js x809)
      end
    module MessageItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x811 : Ojs.t) -> x811
        and t_to_js : t -> Ojs.t = fun (x810 : Ojs.t) -> x810
        let (title : t -> string) =
          fun (x812 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x812) "title")
        let (set_title : t -> string -> unit) =
          fun (x813 : t) ->
            fun (x814 : string) ->
              Ojs.set_prop_ascii (t_to_js x813) "title"
                (Ojs.string_to_js x814)
        let (is_close_affordance : t -> bool) =
          fun (x815 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x815) "isCloseAffordance")
        let (set_is_close_affordance : t -> bool -> unit) =
          fun (x816 : t) ->
            fun (x817 : bool) ->
              Ojs.set_prop_ascii (t_to_js x816) "isCloseAffordance"
                (Ojs.bool_to_js x817)
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x819 : Ojs.t) -> x819
        and t_to_js : t -> Ojs.t = fun (x818 : Ojs.t) -> x818
        let (modal : t -> bool) =
          fun (x820 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x820) "modal")
        let (set_modal : t -> bool -> unit) =
          fun (x821 : t) ->
            fun (x822 : bool) ->
              Ojs.set_prop_ascii (t_to_js x821) "modal" (Ojs.bool_to_js x822)
      end
    module InputBoxOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x824 : Ojs.t) -> x824
        and t_to_js : t -> Ojs.t = fun (x823 : Ojs.t) -> x823
        let (value : t -> string) =
          fun (x825 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x825) "value")
        let (set_value : t -> string -> unit) =
          fun (x826 : t) ->
            fun (x827 : string) ->
              Ojs.set_prop_ascii (t_to_js x826) "value"
                (Ojs.string_to_js x827)
        let (value_selection : t -> (int * int)) =
          fun (x828 : t) ->
            let x829 = Ojs.get_prop_ascii (t_to_js x828) "valueSelection" in
            ((Ojs.int_of_js (Ojs.array_get x829 0)),
              (Ojs.int_of_js (Ojs.array_get x829 1)))
        let (set_value_selection : t -> (int * int) -> unit) =
          fun (x830 : t) ->
            fun (x831 : (int * int)) ->
              Ojs.set_prop_ascii (t_to_js x830) "valueSelection"
                (let (x832, x833) = x831 in
                 let x834 = Ojs.array_make 2 in
                 Ojs.array_set x834 0 (Ojs.int_to_js x832);
                 Ojs.array_set x834 1 (Ojs.int_to_js x833);
                 x834)
        let (prompt : t -> string) =
          fun (x835 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x835) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x836 : t) ->
            fun (x837 : string) ->
              Ojs.set_prop_ascii (t_to_js x836) "prompt"
                (Ojs.string_to_js x837)
        let (place_holder : t -> string) =
          fun (x838 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x838) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x839 : t) ->
            fun (x840 : string) ->
              Ojs.set_prop_ascii (t_to_js x839) "placeHolder"
                (Ojs.string_to_js x840)
        let (password : t -> bool) =
          fun (x841 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x841) "password")
        let (set_password : t -> bool -> unit) =
          fun (x842 : t) ->
            fun (x843 : bool) ->
              Ojs.set_prop_ascii (t_to_js x842) "password"
                (Ojs.bool_to_js x843)
        let (ignore_focus_out : t -> bool) =
          fun (x844 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x844) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x845 : t) ->
            fun (x846 : bool) ->
              Ojs.set_prop_ascii (t_to_js x845) "ignoreFocusOut"
                (Ojs.bool_to_js x846)
        let (validate_input :
          t ->
            value:string ->
              string or_null_or_undefined Promise.t or_string
                or_null_or_undefined)
          =
          fun (x848 : t) ->
            fun ~value:(x847 : string) ->
              or_null_or_undefined_of_js
                (fun (x849 : Ojs.t) ->
                   or_string_of_js
                     (fun (x850 : Ojs.t) ->
                        Promise.t_of_js
                          (fun (x851 : Ojs.t) ->
                             or_null_or_undefined_of_js Ojs.string_of_js x851)
                          x850) x849)
                (Ojs.call (t_to_js x848) "validateInput"
                   [|(Ojs.string_to_js x847)|])
      end
    module WorkspaceFolder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x854 : Ojs.t) -> x854
        and t_to_js : t -> Ojs.t = fun (x853 : Ojs.t) -> x853
        let (uri : t -> Uri.t) =
          fun (x855 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x855) "uri")
        let (name : t -> string) =
          fun (x856 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x856) "name")
        let (index : t -> int) =
          fun (x857 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x857) "index")
      end
    module RelativePattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x859 : Ojs.t) -> x859
        and t_to_js : t -> Ojs.t = fun (x858 : Ojs.t) -> x858
        let (base : t -> string) =
          fun (x860 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x860) "base")
        let (set_base : t -> string -> unit) =
          fun (x861 : t) ->
            fun (x862 : string) ->
              Ojs.set_prop_ascii (t_to_js x861) "base"
                (Ojs.string_to_js x862)
        let (pattern : t -> string) =
          fun (x863 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x863) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x864 : t) ->
            fun (x865 : string) ->
              Ojs.set_prop_ascii (t_to_js x864) "pattern"
                (Ojs.string_to_js x865)
        let (create :
          base:(Uri.t, WorkspaceFolder.t) union2 or_string ->
            pattern:string -> t)
          =
          fun ~base:(x866 : (Uri.t, WorkspaceFolder.t) union2 or_string) ->
            fun ~pattern:(x870 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "RelativePattern")
                   [|(or_string_to_js
                        (fun (x867 : (Uri.t, WorkspaceFolder.t) union2) ->
                           union2_to_js Uri.t_to_js WorkspaceFolder.t_to_js
                             x867) x866);(Ojs.string_to_js x870)|])
      end
    module GlobPattern =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x872 : Ojs.t) -> x872
        and t_to_js : t -> Ojs.t = fun (x871 : Ojs.t) -> x871
      end
    module DocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x874 : Ojs.t) -> x874
        and t_to_js : t -> Ojs.t = fun (x873 : Ojs.t) -> x873
        let (language : t -> string) =
          fun (x875 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x875) "language")
        let (scheme : t -> string) =
          fun (x876 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x876) "scheme")
        let (pattern : t -> GlobPattern.t) =
          fun (x877 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x877) "pattern")
      end
    module DocumentSelector =
      struct
        type t =
          (DocumentFilter.t, DocumentFilter.t or_string list) union2
            or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x884 : Ojs.t) ->
            or_string_of_js
              (fun (x885 : Ojs.t) ->
                 union2_of_js DocumentFilter.t_of_js
                   (fun (x887 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x888 : Ojs.t) ->
                           or_string_of_js DocumentFilter.t_of_js x888) x887)
                   x885) x884
        and t_to_js : t -> Ojs.t =
          fun
            (x878 :
              (DocumentFilter.t, DocumentFilter.t or_string list) union2
                or_string)
            ->
            or_string_to_js
              (fun
                 (x879 :
                   (DocumentFilter.t, DocumentFilter.t or_string list) union2)
                 ->
                 union2_to_js DocumentFilter.t_to_js
                   (fun (x881 : DocumentFilter.t or_string list) ->
                      Ojs.list_to_js
                        (fun (x882 : DocumentFilter.t or_string) ->
                           or_string_to_js DocumentFilter.t_to_js x882) x881)
                   x879) x878
      end
    module Location =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x891 : Ojs.t) -> x891
        and t_to_js : t -> Ojs.t = fun (x890 : Ojs.t) -> x890
        let (uri : t -> Uri.t) =
          fun (x892 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x892) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x893 : t) ->
            fun (x894 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x893) "uri" (Uri.t_to_js x894)
        let (range : t -> Range.t) =
          fun (x895 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x895) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x896 : t) ->
            fun (x897 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x896) "range" (Range.t_to_js x897)
        let (create :
          uri:Uri.t -> range_or_position:(Position.t, Range.t) union2 -> t) =
          fun ~uri:(x898 : Uri.t) ->
            fun ~range_or_position:(x899 : (Position.t, Range.t) union2) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "Location")
                   [|(Uri.t_to_js x898);(union2_to_js Position.t_to_js
                                           Range.t_to_js x899)|])
      end
    module DiagnosticChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x903 : Ojs.t) -> x903
        and t_to_js : t -> Ojs.t = fun (x902 : Ojs.t) -> x902
        let (uris : t -> Uri.t list) =
          fun (x904 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x904) "uris")
      end
    module DiagnosticSeverity =
      struct
        type t = [ `Warning  | `Information  | `Hint ]
        let rec t_of_js : Ojs.t -> t =
          fun (x907 : Ojs.t) ->
            let x908 = x907 in
            match Ojs.int_of_js x908 with
            | 1 -> `Warning
            | 2 -> `Information
            | 3 -> `Hint
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x906 : [ `Warning  | `Information  | `Hint ]) ->
            match x906 with
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
            | `Hint -> Ojs.int_to_js 3
      end
    module DiagnosticRelatedInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x910 : Ojs.t) -> x910
        and t_to_js : t -> Ojs.t = fun (x909 : Ojs.t) -> x909
        let (location : t -> Location.t) =
          fun (x911 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x911) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x912 : t) ->
            fun (x913 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x912) "location"
                (Location.t_to_js x913)
        let (message : t -> string) =
          fun (x914 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x914) "message")
        let (set_message : t -> string -> unit) =
          fun (x915 : t) ->
            fun (x916 : string) ->
              Ojs.set_prop_ascii (t_to_js x915) "message"
                (Ojs.string_to_js x916)
        let (create : location:Location.t -> message:string -> t) =
          fun ~location:(x917 : Location.t) ->
            fun ~message:(x918 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "DiagnosticRelatedInformation")
                   [|(Location.t_to_js x917);(Ojs.string_to_js x918)|])
      end
    module DiagnosticTag =
      struct
        type t = [ `Deprecated ]
        let rec t_of_js : Ojs.t -> t =
          fun (x920 : Ojs.t) ->
            let x921 = x920 in
            match Ojs.int_of_js x921 with
            | 2 -> `Deprecated
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x919 : [ `Deprecated ]) ->
            match x919 with | `Deprecated -> Ojs.int_to_js 2
      end
    module Diagnostic =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x923 : Ojs.t) -> x923
        and t_to_js : t -> Ojs.t = fun (x922 : Ojs.t) -> x922
        let (range : t -> Range.t) =
          fun (x924 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x924) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x925 : t) ->
            fun (x926 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x925) "range" (Range.t_to_js x926)
        let (message : t -> string) =
          fun (x927 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x927) "message")
        let (set_message : t -> string -> unit) =
          fun (x928 : t) ->
            fun (x929 : string) ->
              Ojs.set_prop_ascii (t_to_js x928) "message"
                (Ojs.string_to_js x929)
        let (severity : t -> DiagnosticSeverity.t) =
          fun (x930 : t) ->
            DiagnosticSeverity.t_of_js
              (Ojs.get_prop_ascii (t_to_js x930) "severity")
        let (set_severity : t -> DiagnosticSeverity.t -> unit) =
          fun (x931 : t) ->
            fun (x932 : DiagnosticSeverity.t) ->
              Ojs.set_prop_ascii (t_to_js x931) "severity"
                (DiagnosticSeverity.t_to_js x932)
        let (source : t -> string) =
          fun (x933 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x933) "source")
        let (set_source : t -> string -> unit) =
          fun (x934 : t) ->
            fun (x935 : string) ->
              Ojs.set_prop_ascii (t_to_js x934) "source"
                (Ojs.string_to_js x935)
        module Code =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x937 : Ojs.t) -> x937
            and t_to_js : t -> Ojs.t = fun (x936 : Ojs.t) -> x936
            let (value : t -> string or_number) =
              fun (x938 : t) ->
                or_number_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x938) "value")
            let (set_value : t -> string or_number -> unit) =
              fun (x940 : t) ->
                fun (x941 : string or_number) ->
                  Ojs.set_prop_ascii (t_to_js x940) "value"
                    (or_number_to_js Ojs.string_to_js x941)
            let (target : t -> Uri.t) =
              fun (x943 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x943) "target")
            let (set_target : t -> Uri.t -> unit) =
              fun (x944 : t) ->
                fun (x945 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x944) "target"
                    (Uri.t_to_js x945)
          end
        let (code : t -> Code.t or_string or_number) =
          fun (x946 : t) ->
            or_number_of_js
              (fun (x947 : Ojs.t) -> or_string_of_js Code.t_of_js x947)
              (Ojs.get_prop_ascii (t_to_js x946) "code")
        let (set_code : t -> Code.t or_string or_number -> unit) =
          fun (x949 : t) ->
            fun (x950 : Code.t or_string or_number) ->
              Ojs.set_prop_ascii (t_to_js x949) "code"
                (or_number_to_js
                   (fun (x951 : Code.t or_string) ->
                      or_string_to_js Code.t_to_js x951) x950)
        let (related_information : t -> DiagnosticRelatedInformation.t list)
          =
          fun (x953 : t) ->
            Ojs.list_of_js DiagnosticRelatedInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x953) "relatedInformation")
        let (set_related_information :
          t -> DiagnosticRelatedInformation.t list -> unit) =
          fun (x955 : t) ->
            fun (x956 : DiagnosticRelatedInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x955) "relatedInformation"
                (Ojs.list_to_js DiagnosticRelatedInformation.t_to_js x956)
        let (tags : t -> DiagnosticTag.t list) =
          fun (x958 : t) ->
            Ojs.list_of_js DiagnosticTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x958) "tags")
        let (set_tags : t -> DiagnosticTag.t list -> unit) =
          fun (x960 : t) ->
            fun (x961 : DiagnosticTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x960) "tags"
                (Ojs.list_to_js DiagnosticTag.t_to_js x961)
        let (create :
          range:Range.t ->
            message:string -> ?severity:DiagnosticSeverity.t -> unit -> t)
          =
          fun ~range:(x963 : Range.t) ->
            fun ~message:(x964 : string) ->
              fun ?severity:(x965 : DiagnosticSeverity.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "Diagnostic")
                       (let x966 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x966 "push" [|(Range.t_to_js x963)|]);
                        ignore
                          (Ojs.call x966 "push" [|(Ojs.string_to_js x964)|]);
                        (match x965 with
                         | Some x967 ->
                             ignore
                               (Ojs.call x966 "push"
                                  [|(DiagnosticSeverity.t_to_js x967)|])
                         | None -> ());
                        x966))
      end
    module DiagnosticCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x969 : Ojs.t) -> x969
        and t_to_js : t -> Ojs.t = fun (x968 : Ojs.t) -> x968
        let (name : t -> string) =
          fun (x970 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x970) "name")
        let (set :
          t ->
            uri:Uri.t -> diagnostics:Diagnostic.t list or_undefined -> unit)
          =
          fun (x975 : t) ->
            fun ~uri:(x971 : Uri.t) ->
              fun ~diagnostics:(x972 : Diagnostic.t list or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x975) "set"
                     [|(Uri.t_to_js x971);(or_undefined_to_js
                                             (fun (x973 : Diagnostic.t list)
                                                ->
                                                Ojs.list_to_js
                                                  Diagnostic.t_to_js x973)
                                             x972)|])
        let (set' :
          t -> entries:(Uri.t * Diagnostic.t list or_undefined) list -> unit)
          =
          fun (x983 : t) ->
            fun
              ~entries:(x976 : (Uri.t * Diagnostic.t list or_undefined) list)
              ->
              ignore
                (Ojs.call (t_to_js x983) "set"
                   [|(Ojs.list_to_js
                        (fun
                           (x977 : (Uri.t * Diagnostic.t list or_undefined))
                           ->
                           let (x978, x979) = x977 in
                           let x980 = Ojs.array_make 2 in
                           Ojs.array_set x980 0 (Uri.t_to_js x978);
                           Ojs.array_set x980 1
                             (or_undefined_to_js
                                (fun (x981 : Diagnostic.t list) ->
                                   Ojs.list_to_js Diagnostic.t_to_js x981)
                                x979);
                           x980) x976)|])
        let (delete : t -> uri:Uri.t -> unit) =
          fun (x985 : t) ->
            fun ~uri:(x984 : Uri.t) ->
              ignore
                (Ojs.call (t_to_js x985) "delete" [|(Uri.t_to_js x984)|])
        let (clear : t -> unit) =
          fun (x986 : t) -> ignore (Ojs.call (t_to_js x986) "clear" [||])
        let (for_each :
          t ->
            callback:(uri:Uri.t ->
                        diagnostics:Diagnostic.t list -> collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x995 : t) ->
            fun
              ~callback:(x987 :
                          uri:Uri.t ->
                            diagnostics:Diagnostic.t list ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x988 : any option) ->
                fun () ->
                  ignore
                    (let x996 = t_to_js x995 in
                     Ojs.call (Ojs.get_prop_ascii x996 "forEach") "apply"
                       [|x996;((let x989 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x989 "push"
                                     [|(Ojs.fun_to_js 3
                                          (fun (x991 : Ojs.t) ->
                                             fun (x992 : Ojs.t) ->
                                               fun (x994 : Ojs.t) ->
                                                 any_to_js
                                                   (x987
                                                      ~uri:(Uri.t_of_js x991)
                                                      ~diagnostics:(Ojs.list_of_js
                                                                    Diagnostic.t_of_js
                                                                    x992)
                                                      ~collection:(t_of_js
                                                                    x994))))|]);
                                (match x988 with
                                 | Some x990 ->
                                     ignore
                                       (Ojs.call x989 "push"
                                          [|(any_to_js x990)|])
                                 | None -> ());
                                x989))|])
        let (get : t -> uri:Uri.t -> Diagnostic.t list or_undefined) =
          fun (x998 : t) ->
            fun ~uri:(x997 : Uri.t) ->
              or_undefined_of_js
                (fun (x999 : Ojs.t) -> Ojs.list_of_js Diagnostic.t_of_js x999)
                (Ojs.call (t_to_js x998) "get" [|(Uri.t_to_js x997)|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x1002 : t) ->
            fun ~uri:(x1001 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1002) "has" [|(Uri.t_to_js x1001)|])
        let (dispose : t -> unit) =
          fun (x1003 : t) -> ignore (Ojs.call (t_to_js x1003) "dispose" [||])
      end
    module CodeActionKind =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1005 : Ojs.t) -> x1005
        and t_to_js : t -> Ojs.t = fun (x1004 : Ojs.t) -> x1004
        let (empty : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Empty")
        let (quick_fix : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "QuickFix")
        let (refactor : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Refactor")
        let (refactor_extract : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorExtract")
        let (refactor_inline : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorInline")
        let (refactor_rewrite : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "RefactorRewrite")
        let (source : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "Source")
        let (source_organize_imports : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceOrganizeImports")
        let (source_fix_all : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") "SourceFixAll")
        let (create : value:string -> t) =
          fun ~value:(x1006 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CodeActionKind") [|(Ojs.string_to_js x1006)|])
        let (value : t -> string) =
          fun (x1007 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1007) "value")
        let (append : t -> parts:string -> t) =
          fun (x1009 : t) ->
            fun ~parts:(x1008 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1009) "append"
                   [|(Ojs.string_to_js x1008)|])
        let (intersects : t -> other:t -> bool) =
          fun (x1011 : t) ->
            fun ~other:(x1010 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1011) "intersects" [|(t_to_js x1010)|])
        let (contains : t -> other:t -> bool) =
          fun (x1013 : t) ->
            fun ~other:(x1012 : t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1013) "contains" [|(t_to_js x1012)|])
      end
    module CodeActionTriggerKind =
      struct
        type t = [ `Automatic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1015 : Ojs.t) ->
            let x1016 = x1015 in
            match Ojs.int_of_js x1016 with
            | 2 -> `Automatic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1014 : [ `Automatic ]) ->
            match x1014 with | `Automatic -> Ojs.int_to_js 2
      end
    module CodeActionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1018 : Ojs.t) -> x1018
        and t_to_js : t -> Ojs.t = fun (x1017 : Ojs.t) -> x1017
        let (trigger_kind : t -> CodeActionTriggerKind.t) =
          fun (x1019 : t) ->
            CodeActionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1019) "triggerKind")
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1020 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1020) "diagnostics")
        let (only : t -> CodeActionKind.t) =
          fun (x1022 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1022) "only")
      end
    module CodeLens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1024 : Ojs.t) -> x1024
        and t_to_js : t -> Ojs.t = fun (x1023 : Ojs.t) -> x1023
        let (range : t -> Range.t) =
          fun (x1025 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1025) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1026 : t) ->
            fun (x1027 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1026) "range"
                (Range.t_to_js x1027)
        let (command : t -> Command.t) =
          fun (x1028 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1028) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1029 : t) ->
            fun (x1030 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1029) "command"
                (Command.t_to_js x1030)
        let (is_resolved : t -> bool) =
          fun (x1031 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1031) "isResolved")
        let (create : range:Range.t -> ?command:Command.t -> unit -> t) =
          fun ~range:(x1032 : Range.t) ->
            fun ?command:(x1033 : Command.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "CodeLens")
                     (let x1034 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1034 "push" [|(Range.t_to_js x1032)|]);
                      (match x1033 with
                       | Some x1035 ->
                           ignore
                             (Ojs.call x1034 "push"
                                [|(Command.t_to_js x1035)|])
                       | None -> ());
                      x1034))
      end
    module CodeLensProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1037 : Ojs.t) -> x1037
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1036 : Ojs.t) -> x1036
        let (on_did_change_code_lenses : 'T t -> unit Event.t) =
          fun (x1038 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1038)
                 "onDidChangeCodeLenses")
        let (set_on_did_change_code_lenses : 'T t -> unit Event.t -> unit) =
          fun (x1041 : 'T t) ->
            fun (x1042 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1041)
                "onDidChangeCodeLenses" (Event.t_to_js Ojs.unit_to_js x1042)
        let (provide_code_lenses :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1047 : 'T t) ->
            fun ~document:(x1045 : TextDocument.t) ->
              fun ~token:(x1046 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1049 : Ojs.t) -> Ojs.list_of_js Obj.magic x1049)
                  (Ojs.call (t_to_js Obj.magic x1047) "provideCodeLenses"
                     [|(TextDocument.t_to_js x1045);(CancellationToken.t_to_js
                                                       x1046)|])
        let (resolve_code_lens :
          'T t ->
            code_lens:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1053 : 'T t) ->
            fun ~code_lens:(x1051 : 'T) ->
              fun ~token:(x1052 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1053) "resolveCodeLens"
                     [|(Obj.magic x1051);(CancellationToken.t_to_js x1052)|])
      end
    module DefinitionLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1057 : Ojs.t) -> x1057
        and t_to_js : t -> Ojs.t = fun (x1056 : Ojs.t) -> x1056
      end
    module Definition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1059 : Ojs.t) -> x1059
        and t_to_js : t -> Ojs.t = fun (x1058 : Ojs.t) -> x1058
      end
    module DefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1061 : Ojs.t) -> x1061
        and t_to_js : t -> Ojs.t = fun (x1060 : Ojs.t) -> x1060
        let (provide_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1065 : t) ->
            fun ~document:(x1062 : TextDocument.t) ->
              fun ~position:(x1063 : Position.t) ->
                fun ~token:(x1064 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1066 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1066)
                    (Ojs.call (t_to_js x1065) "provideDefinition"
                       [|(TextDocument.t_to_js x1062);(Position.t_to_js x1063);(
                         CancellationToken.t_to_js x1064)|])
      end
    module ImplementationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1070 : Ojs.t) -> x1070
        and t_to_js : t -> Ojs.t = fun (x1069 : Ojs.t) -> x1069
        let (provide_implementation :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1074 : t) ->
            fun ~document:(x1071 : TextDocument.t) ->
              fun ~position:(x1072 : Position.t) ->
                fun ~token:(x1073 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1075 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1075)
                    (Ojs.call (t_to_js x1074) "provideImplementation"
                       [|(TextDocument.t_to_js x1071);(Position.t_to_js x1072);(
                         CancellationToken.t_to_js x1073)|])
      end
    module TypeDefinitionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1079 : Ojs.t) -> x1079
        and t_to_js : t -> Ojs.t = fun (x1078 : Ojs.t) -> x1078
        let (provide_type_definition :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Definition.t, DefinitionLink.t) or_array ProviderResult.t)
          =
          fun (x1083 : t) ->
            fun ~document:(x1080 : TextDocument.t) ->
              fun ~position:(x1081 : Position.t) ->
                fun ~token:(x1082 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1084 : Ojs.t) ->
                       or_array_of_js Definition.t_of_js
                         DefinitionLink.t_of_js x1084)
                    (Ojs.call (t_to_js x1083) "provideTypeDefinition"
                       [|(TextDocument.t_to_js x1080);(Position.t_to_js x1081);(
                         CancellationToken.t_to_js x1082)|])
      end
    module Declaration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1088 : Ojs.t) -> x1088
        and t_to_js : t -> Ojs.t = fun (x1087 : Ojs.t) -> x1087
      end
    module DeclarationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1090 : Ojs.t) -> x1090
        and t_to_js : t -> Ojs.t = fun (x1089 : Ojs.t) -> x1089
        let (provide_declaration :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Declaration.t ProviderResult.t)
          =
          fun (x1094 : t) ->
            fun ~document:(x1091 : TextDocument.t) ->
              fun ~position:(x1092 : Position.t) ->
                fun ~token:(x1093 : CancellationToken.t) ->
                  ProviderResult.t_of_js Declaration.t_of_js
                    (Ojs.call (t_to_js x1094) "provideDeclaration"
                       [|(TextDocument.t_to_js x1091);(Position.t_to_js x1092);(
                         CancellationToken.t_to_js x1093)|])
      end
    module MarkdownString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1097 : Ojs.t) -> x1097
        and t_to_js : t -> Ojs.t = fun (x1096 : Ojs.t) -> x1096
        let (value : t -> string) =
          fun (x1098 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1098) "value")
        let (set_value : t -> string -> unit) =
          fun (x1099 : t) ->
            fun (x1100 : string) ->
              Ojs.set_prop_ascii (t_to_js x1099) "value"
                (Ojs.string_to_js x1100)
        let (is_trusted : t -> bool) =
          fun (x1101 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1101) "isTrusted")
        let (set_is_trusted : t -> bool -> unit) =
          fun (x1102 : t) ->
            fun (x1103 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1102) "isTrusted"
                (Ojs.bool_to_js x1103)
        let (support_theme_icons : t -> bool) =
          fun (x1104 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1104) "supportThemeIcons")
        let (create :
          ?value:string -> ?support_theme_icons:bool -> unit -> t) =
          fun ?value:(x1105 : string option) ->
            fun ?support_theme_icons:(x1106 : bool option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "MarkdownString")
                     (let x1107 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1105 with
                       | Some x1109 ->
                           ignore
                             (Ojs.call x1107 "push"
                                [|(Ojs.string_to_js x1109)|])
                       | None -> ());
                      (match x1106 with
                       | Some x1108 ->
                           ignore
                             (Ojs.call x1107 "push"
                                [|(Ojs.bool_to_js x1108)|])
                       | None -> ());
                      x1107))
        let (append_text : t -> value:string -> t) =
          fun (x1111 : t) ->
            fun ~value:(x1110 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1111) "appendText"
                   [|(Ojs.string_to_js x1110)|])
        let (append_markdown : t -> value:string -> t) =
          fun (x1113 : t) ->
            fun ~value:(x1112 : string) ->
              t_of_js
                (Ojs.call (t_to_js x1113) "appendMarkdown"
                   [|(Ojs.string_to_js x1112)|])
        let (append_codeblock :
          t -> value:string -> ?language:string -> unit -> t) =
          fun (x1118 : t) ->
            fun ~value:(x1114 : string) ->
              fun ?language:(x1115 : string option) ->
                fun () ->
                  t_of_js
                    (let x1119 = t_to_js x1118 in
                     Ojs.call (Ojs.get_prop_ascii x1119 "appendCodeblock")
                       "apply"
                       [|x1119;((let x1116 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1116 "push"
                                      [|(Ojs.string_to_js x1114)|]);
                                 (match x1115 with
                                  | Some x1117 ->
                                      ignore
                                        (Ojs.call x1116 "push"
                                           [|(Ojs.string_to_js x1117)|])
                                  | None -> ());
                                 x1116))|])
      end
    module Hover =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1121 : Ojs.t) -> x1121
        and t_to_js : t -> Ojs.t = fun (x1120 : Ojs.t) -> x1120
        let (contents : t -> MarkedString.t list) =
          fun (x1122 : t) ->
            Ojs.list_of_js MarkedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1122) "contents")
        let (set_contents : t -> MarkedString.t list -> unit) =
          fun (x1124 : t) ->
            fun (x1125 : MarkedString.t list) ->
              Ojs.set_prop_ascii (t_to_js x1124) "contents"
                (Ojs.list_to_js MarkedString.t_to_js x1125)
        let (range : t -> Range.t) =
          fun (x1127 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1127) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1128 : t) ->
            fun (x1129 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1128) "range"
                (Range.t_to_js x1129)
        let (create :
          contents:(MarkedString.t, MarkedString.t) or_array ->
            ?range:Range.t -> unit -> t)
          =
          fun ~contents:(x1130 : (MarkedString.t, MarkedString.t) or_array)
            ->
            fun ?range:(x1131 : Range.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "Hover")
                     (let x1132 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1132 "push"
                           [|(or_array_to_js MarkedString.t_to_js
                                MarkedString.t_to_js x1130)|]);
                      (match x1131 with
                       | Some x1133 ->
                           ignore
                             (Ojs.call x1132 "push" [|(Range.t_to_js x1133)|])
                       | None -> ());
                      x1132))
      end
    module HoverProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1137 : Ojs.t) -> x1137
        and t_to_js : t -> Ojs.t = fun (x1136 : Ojs.t) -> x1136
        let (provide_hover :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t -> Hover.t ProviderResult.t)
          =
          fun (x1141 : t) ->
            fun ~document:(x1138 : TextDocument.t) ->
              fun ~position:(x1139 : Position.t) ->
                fun ~token:(x1140 : CancellationToken.t) ->
                  ProviderResult.t_of_js Hover.t_of_js
                    (Ojs.call (t_to_js x1141) "provideHover"
                       [|(TextDocument.t_to_js x1138);(Position.t_to_js x1139);(
                         CancellationToken.t_to_js x1140)|])
      end
    module EvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1144 : Ojs.t) -> x1144
        and t_to_js : t -> Ojs.t = fun (x1143 : Ojs.t) -> x1143
        let (range : t -> Range.t) =
          fun (x1145 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1145) "range")
        let (expression : t -> string) =
          fun (x1146 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1146) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1147 : Range.t) ->
            fun ?expression:(x1148 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "EvaluatableExpression")
                     (let x1149 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1149 "push" [|(Range.t_to_js x1147)|]);
                      (match x1148 with
                       | Some x1150 ->
                           ignore
                             (Ojs.call x1149 "push"
                                [|(Ojs.string_to_js x1150)|])
                       | None -> ());
                      x1149))
      end
    module EvaluatableExpressionProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1152 : Ojs.t) -> x1152
        and t_to_js : t -> Ojs.t = fun (x1151 : Ojs.t) -> x1151
        let (provide_evaluatable_expression :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  EvaluatableExpression.t ProviderResult.t)
          =
          fun (x1156 : t) ->
            fun ~document:(x1153 : TextDocument.t) ->
              fun ~position:(x1154 : Position.t) ->
                fun ~token:(x1155 : CancellationToken.t) ->
                  ProviderResult.t_of_js EvaluatableExpression.t_of_js
                    (Ojs.call (t_to_js x1156) "provideEvaluatableExpression"
                       [|(TextDocument.t_to_js x1153);(Position.t_to_js x1154);(
                         CancellationToken.t_to_js x1155)|])
      end
    module InlineValueText =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1159 : Ojs.t) -> x1159
        and t_to_js : t -> Ojs.t = fun (x1158 : Ojs.t) -> x1158
        let (range : t -> Range.t) =
          fun (x1160 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1160) "range")
        let (text : t -> string) =
          fun (x1161 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1161) "text")
        let (create : range:Range.t -> text:string -> t) =
          fun ~range:(x1162 : Range.t) ->
            fun ~text:(x1163 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "InlineValueText")
                   [|(Range.t_to_js x1162);(Ojs.string_to_js x1163)|])
      end
    module InlineValueVariableLookup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1165 : Ojs.t) -> x1165
        and t_to_js : t -> Ojs.t = fun (x1164 : Ojs.t) -> x1164
        let (range : t -> Range.t) =
          fun (x1166 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1166) "range")
        let (variable_name : t -> string) =
          fun (x1167 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1167) "variableName")
        let (case_sensitive_lookup : t -> bool) =
          fun (x1168 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1168) "caseSensitiveLookup")
        let (create :
          range:Range.t ->
            ?variable_name:string -> ?case_sensitive_lookup:bool -> unit -> t)
          =
          fun ~range:(x1169 : Range.t) ->
            fun ?variable_name:(x1170 : string option) ->
              fun ?case_sensitive_lookup:(x1171 : bool option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "InlineValueVariableLookup")
                       (let x1172 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1172 "push" [|(Range.t_to_js x1169)|]);
                        (match x1170 with
                         | Some x1174 ->
                             ignore
                               (Ojs.call x1172 "push"
                                  [|(Ojs.string_to_js x1174)|])
                         | None -> ());
                        (match x1171 with
                         | Some x1173 ->
                             ignore
                               (Ojs.call x1172 "push"
                                  [|(Ojs.bool_to_js x1173)|])
                         | None -> ());
                        x1172))
      end
    module InlineValueEvaluatableExpression =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1176 : Ojs.t) -> x1176
        and t_to_js : t -> Ojs.t = fun (x1175 : Ojs.t) -> x1175
        let (range : t -> Range.t) =
          fun (x1177 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1177) "range")
        let (expression : t -> string) =
          fun (x1178 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1178) "expression")
        let (create : range:Range.t -> ?expression:string -> unit -> t) =
          fun ~range:(x1179 : Range.t) ->
            fun ?expression:(x1180 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "InlineValueEvaluatableExpression")
                     (let x1181 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1181 "push" [|(Range.t_to_js x1179)|]);
                      (match x1180 with
                       | Some x1182 ->
                           ignore
                             (Ojs.call x1181 "push"
                                [|(Ojs.string_to_js x1182)|])
                       | None -> ());
                      x1181))
      end
    module InlineValue =
      struct
        type t =
          (InlineValueEvaluatableExpression.t, InlineValueText.t,
            InlineValueVariableLookup.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x1187 : Ojs.t) ->
            union3_of_js InlineValueEvaluatableExpression.t_of_js
              InlineValueText.t_of_js InlineValueVariableLookup.t_of_js x1187
        and t_to_js : t -> Ojs.t =
          fun
            (x1183 :
              (InlineValueEvaluatableExpression.t, InlineValueText.t,
                InlineValueVariableLookup.t) union3)
            ->
            union3_to_js InlineValueEvaluatableExpression.t_to_js
              InlineValueText.t_to_js InlineValueVariableLookup.t_to_js x1183
      end
    module InlineValueContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1192 : Ojs.t) -> x1192
        and t_to_js : t -> Ojs.t = fun (x1191 : Ojs.t) -> x1191
        let (frame_id : t -> int) =
          fun (x1193 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1193) "frameId")
        let (stopped_location : t -> Range.t) =
          fun (x1194 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1194) "stoppedLocation")
      end
    module InlineValuesProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1196 : Ojs.t) -> x1196
        and t_to_js : t -> Ojs.t = fun (x1195 : Ojs.t) -> x1195
        let (on_did_change_inline_values : t -> unit Event.t or_undefined) =
          fun (x1197 : t) ->
            or_undefined_of_js
              (fun (x1198 : Ojs.t) -> Event.t_of_js Ojs.unit_of_js x1198)
              (Ojs.get_prop_ascii (t_to_js x1197) "onDidChangeInlineValues")
        let (set_on_did_change_inline_values :
          t -> unit Event.t or_undefined -> unit) =
          fun (x1200 : t) ->
            fun (x1201 : unit Event.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1200) "onDidChangeInlineValues"
                (or_undefined_to_js
                   (fun (x1202 : unit Event.t) ->
                      Event.t_to_js Ojs.unit_to_js x1202) x1201)
        let (provide_inline_values :
          t ->
            document:TextDocument.t ->
              view_port:Range.t ->
                context:InlineValueContext.t ->
                  token:CancellationToken.t ->
                    InlineValue.t list ProviderResult.t)
          =
          fun (x1208 : t) ->
            fun ~document:(x1204 : TextDocument.t) ->
              fun ~view_port:(x1205 : Range.t) ->
                fun ~context:(x1206 : InlineValueContext.t) ->
                  fun ~token:(x1207 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1209 : Ojs.t) ->
                         Ojs.list_of_js InlineValue.t_of_js x1209)
                      (Ojs.call (t_to_js x1208) "provideInlineValues"
                         [|(TextDocument.t_to_js x1204);(Range.t_to_js x1205);(
                           InlineValueContext.t_to_js x1206);(CancellationToken.t_to_js
                                                                x1207)|])
      end
    module DocumentHighlightKind =
      struct
        type t = [ `Read  | `Write ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1212 : Ojs.t) ->
            let x1213 = x1212 in
            match Ojs.int_of_js x1213 with
            | 1 -> `Read
            | 2 -> `Write
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1211 : [ `Read  | `Write ]) ->
            match x1211 with
            | `Read -> Ojs.int_to_js 1
            | `Write -> Ojs.int_to_js 2
      end
    module DocumentHighlight =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1215 : Ojs.t) -> x1215
        and t_to_js : t -> Ojs.t = fun (x1214 : Ojs.t) -> x1214
        let (range : t -> Range.t) =
          fun (x1216 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1216) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1217 : t) ->
            fun (x1218 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1217) "range"
                (Range.t_to_js x1218)
        let (kind : t -> DocumentHighlightKind.t) =
          fun (x1219 : t) ->
            DocumentHighlightKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1219) "kind")
        let (set_kind : t -> DocumentHighlightKind.t -> unit) =
          fun (x1220 : t) ->
            fun (x1221 : DocumentHighlightKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1220) "kind"
                (DocumentHighlightKind.t_to_js x1221)
        let (create :
          range:Range.t -> ?kind:DocumentHighlightKind.t -> unit -> t) =
          fun ~range:(x1222 : Range.t) ->
            fun ?kind:(x1223 : DocumentHighlightKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentHighlight")
                     (let x1224 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1224 "push" [|(Range.t_to_js x1222)|]);
                      (match x1223 with
                       | Some x1225 ->
                           ignore
                             (Ojs.call x1224 "push"
                                [|(DocumentHighlightKind.t_to_js x1225)|])
                       | None -> ());
                      x1224))
      end
    module DocumentHighlightProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1227 : Ojs.t) -> x1227
        and t_to_js : t -> Ojs.t = fun (x1226 : Ojs.t) -> x1226
        let (provide_document_highlights :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  DocumentHighlight.t list ProviderResult.t)
          =
          fun (x1231 : t) ->
            fun ~document:(x1228 : TextDocument.t) ->
              fun ~position:(x1229 : Position.t) ->
                fun ~token:(x1230 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1232 : Ojs.t) ->
                       Ojs.list_of_js DocumentHighlight.t_of_js x1232)
                    (Ojs.call (t_to_js x1231) "provideDocumentHighlights"
                       [|(TextDocument.t_to_js x1228);(Position.t_to_js x1229);(
                         CancellationToken.t_to_js x1230)|])
      end
    module SymbolKind =
      struct
        type t =
          [ `Module  | `Namespace  | `Package  | `Class  | `Method 
          | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
          | `Function  | `Variable  | `Constant  | `String  | `Number 
          | `Boolean  | `Array  | `Object  | `Key  | `Null  | `EnumMember 
          | `Struct  | `Event  | `Operator  | `TypeParameter ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1235 : Ojs.t) ->
            let x1236 = x1235 in
            match Ojs.int_of_js x1236 with
            | 1 -> `Module
            | 2 -> `Namespace
            | 3 -> `Package
            | 4 -> `Class
            | 5 -> `Method
            | 6 -> `Property
            | 7 -> `Field
            | 8 -> `Constructor
            | 9 -> `Enum
            | 10 -> `Interface
            | 11 -> `Function
            | 12 -> `Variable
            | 13 -> `Constant
            | 14 -> `String
            | 15 -> `Number
            | 16 -> `Boolean
            | 17 -> `Array
            | 18 -> `Object
            | 19 -> `Key
            | 20 -> `Null
            | 21 -> `EnumMember
            | 22 -> `Struct
            | 23 -> `Event
            | 24 -> `Operator
            | 25 -> `TypeParameter
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1234 :
              [ `Module  | `Namespace  | `Package  | `Class  | `Method 
              | `Property  | `Field  | `Constructor  | `Enum  | `Interface 
              | `Function  | `Variable  | `Constant  | `String  | `Number 
              | `Boolean  | `Array  | `Object  | `Key  | `Null 
              | `EnumMember  | `Struct  | `Event  | `Operator 
              | `TypeParameter ])
            ->
            match x1234 with
            | `Module -> Ojs.int_to_js 1
            | `Namespace -> Ojs.int_to_js 2
            | `Package -> Ojs.int_to_js 3
            | `Class -> Ojs.int_to_js 4
            | `Method -> Ojs.int_to_js 5
            | `Property -> Ojs.int_to_js 6
            | `Field -> Ojs.int_to_js 7
            | `Constructor -> Ojs.int_to_js 8
            | `Enum -> Ojs.int_to_js 9
            | `Interface -> Ojs.int_to_js 10
            | `Function -> Ojs.int_to_js 11
            | `Variable -> Ojs.int_to_js 12
            | `Constant -> Ojs.int_to_js 13
            | `String -> Ojs.int_to_js 14
            | `Number -> Ojs.int_to_js 15
            | `Boolean -> Ojs.int_to_js 16
            | `Array -> Ojs.int_to_js 17
            | `Object -> Ojs.int_to_js 18
            | `Key -> Ojs.int_to_js 19
            | `Null -> Ojs.int_to_js 20
            | `EnumMember -> Ojs.int_to_js 21
            | `Struct -> Ojs.int_to_js 22
            | `Event -> Ojs.int_to_js 23
            | `Operator -> Ojs.int_to_js 24
            | `TypeParameter -> Ojs.int_to_js 25
      end
    module SymbolTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1238 : Ojs.t) -> x1238
        and t_to_js : t -> Ojs.t = fun (x1237 : Ojs.t) -> x1237
      end
    module SymbolInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1240 : Ojs.t) -> x1240
        and t_to_js : t -> Ojs.t = fun (x1239 : Ojs.t) -> x1239
        let (name : t -> string) =
          fun (x1241 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1241) "name")
        let (set_name : t -> string -> unit) =
          fun (x1242 : t) ->
            fun (x1243 : string) ->
              Ojs.set_prop_ascii (t_to_js x1242) "name"
                (Ojs.string_to_js x1243)
        let (container_name : t -> string) =
          fun (x1244 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1244) "containerName")
        let (set_container_name : t -> string -> unit) =
          fun (x1245 : t) ->
            fun (x1246 : string) ->
              Ojs.set_prop_ascii (t_to_js x1245) "containerName"
                (Ojs.string_to_js x1246)
        let (kind : t -> SymbolKind.t) =
          fun (x1247 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1247) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1248 : t) ->
            fun (x1249 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1248) "kind"
                (SymbolKind.t_to_js x1249)
        let (tags : t -> SymbolTag.t list) =
          fun (x1250 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1250) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1252 : t) ->
            fun (x1253 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1252) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1253)
        let (location : t -> Location.t) =
          fun (x1255 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x1255) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x1256 : t) ->
            fun (x1257 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x1256) "location"
                (Location.t_to_js x1257)
        let (create :
          name:string ->
            kind:SymbolKind.t ->
              container_name:string -> location:Location.t -> t)
          =
          fun ~name:(x1258 : string) ->
            fun ~kind:(x1259 : SymbolKind.t) ->
              fun ~container_name:(x1260 : string) ->
                fun ~location:(x1261 : Location.t) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SymbolInformation")
                       [|(Ojs.string_to_js x1258);(SymbolKind.t_to_js x1259);(
                         Ojs.string_to_js x1260);(Location.t_to_js x1261)|])
        let (create' :
          name:string ->
            kind:SymbolKind.t ->
              range:Range.t ->
                ?uri:Uri.t -> ?container_name:string -> unit -> t)
          =
          fun ~name:(x1262 : string) ->
            fun ~kind:(x1263 : SymbolKind.t) ->
              fun ~range:(x1264 : Range.t) ->
                fun ?uri:(x1265 : Uri.t option) ->
                  fun ?container_name:(x1266 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SymbolInformation")
                           (let x1267 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x1267 "push"
                                 [|(Ojs.string_to_js x1262)|]);
                            ignore
                              (Ojs.call x1267 "push"
                                 [|(SymbolKind.t_to_js x1263)|]);
                            ignore
                              (Ojs.call x1267 "push"
                                 [|(Range.t_to_js x1264)|]);
                            (match x1265 with
                             | Some x1269 ->
                                 ignore
                                   (Ojs.call x1267 "push"
                                      [|(Uri.t_to_js x1269)|])
                             | None -> ());
                            (match x1266 with
                             | Some x1268 ->
                                 ignore
                                   (Ojs.call x1267 "push"
                                      [|(Ojs.string_to_js x1268)|])
                             | None -> ());
                            x1267))
      end
    module DocumentSymbol =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1271 : Ojs.t) -> x1271
        and t_to_js : t -> Ojs.t = fun (x1270 : Ojs.t) -> x1270
        let (name : t -> string) =
          fun (x1272 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1272) "name")
        let (set_name : t -> string -> unit) =
          fun (x1273 : t) ->
            fun (x1274 : string) ->
              Ojs.set_prop_ascii (t_to_js x1273) "name"
                (Ojs.string_to_js x1274)
        let (detail : t -> string) =
          fun (x1275 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1275) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1276 : t) ->
            fun (x1277 : string) ->
              Ojs.set_prop_ascii (t_to_js x1276) "detail"
                (Ojs.string_to_js x1277)
        let (kind : t -> SymbolKind.t) =
          fun (x1278 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x1278) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x1279 : t) ->
            fun (x1280 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1279) "kind"
                (SymbolKind.t_to_js x1280)
        let (tags : t -> SymbolTag.t list) =
          fun (x1281 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1281) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x1283 : t) ->
            fun (x1284 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1283) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x1284)
        let (range : t -> Range.t) =
          fun (x1286 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1286) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1287 : t) ->
            fun (x1288 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1287) "range"
                (Range.t_to_js x1288)
        let (selection_range : t -> Range.t) =
          fun (x1289 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1289) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x1290 : t) ->
            fun (x1291 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1290) "selectionRange"
                (Range.t_to_js x1291)
        let (children : t -> t list) =
          fun (x1292 : t) ->
            Ojs.list_of_js t_of_js
              (Ojs.get_prop_ascii (t_to_js x1292) "children")
        let (set_children : t -> t list -> unit) =
          fun (x1294 : t) ->
            fun (x1295 : t list) ->
              Ojs.set_prop_ascii (t_to_js x1294) "children"
                (Ojs.list_to_js t_to_js x1295)
        let (create :
          name:string ->
            detail:string ->
              kind:SymbolKind.t ->
                range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~name:(x1297 : string) ->
            fun ~detail:(x1298 : string) ->
              fun ~kind:(x1299 : SymbolKind.t) ->
                fun ~range:(x1300 : Range.t) ->
                  fun ~selection_range:(x1301 : Range.t) ->
                    t_of_js
                      (Ojs.new_obj
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "DocumentSymbol")
                         [|(Ojs.string_to_js x1297);(Ojs.string_to_js x1298);(
                           SymbolKind.t_to_js x1299);(Range.t_to_js x1300);(
                           Range.t_to_js x1301)|])
      end
    module DocumentSymbolProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1303 : Ojs.t) -> x1303
        and t_to_js : t -> Ojs.t = fun (x1302 : Ojs.t) -> x1302
        let (provide_document_symbols :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                [ `U_n_0 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_1 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_2 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_3 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_4 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_5 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_6 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_7 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_8 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_9 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_10 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_11 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_12 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_13 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_14 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_15 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_16 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_17 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_18 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_19 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_20 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_21 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_22 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_23 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_24 of (DocumentSymbol.t, SymbolInformation.t) union2 
                | `U_n_25 of (DocumentSymbol.t, SymbolInformation.t) union2 ]
                  list ProviderResult.t)
          =
          fun (x1306 : t) ->
            fun ~document:(x1304 : TextDocument.t) ->
              fun ~token:(x1305 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1307 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x1308 : Ojs.t) ->
                          let x1309 = x1308 in
                          match Ojs.int_of_js
                                  (Ojs.get_prop_ascii x1309 "kind")
                          with
                          | 0 ->
                              `U_n_0
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 1 ->
                              `U_n_1
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 2 ->
                              `U_n_2
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 3 ->
                              `U_n_3
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 4 ->
                              `U_n_4
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 5 ->
                              `U_n_5
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 6 ->
                              `U_n_6
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 7 ->
                              `U_n_7
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 8 ->
                              `U_n_8
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 9 ->
                              `U_n_9
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 10 ->
                              `U_n_10
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 11 ->
                              `U_n_11
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 12 ->
                              `U_n_12
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 13 ->
                              `U_n_13
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 14 ->
                              `U_n_14
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 15 ->
                              `U_n_15
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 16 ->
                              `U_n_16
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 17 ->
                              `U_n_17
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 18 ->
                              `U_n_18
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 19 ->
                              `U_n_19
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 20 ->
                              `U_n_20
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 21 ->
                              `U_n_21
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 22 ->
                              `U_n_22
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 23 ->
                              `U_n_23
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 24 ->
                              `U_n_24
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | 25 ->
                              `U_n_25
                                (union2_of_js DocumentSymbol.t_of_js
                                   SymbolInformation.t_of_js x1309)
                          | _ -> assert false) x1307)
                  (Ojs.call (t_to_js x1306) "provideDocumentSymbols"
                     [|(TextDocument.t_to_js x1304);(CancellationToken.t_to_js
                                                       x1305)|])
      end
    module DocumentSymbolProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1363 : Ojs.t) -> x1363
        and t_to_js : t -> Ojs.t = fun (x1362 : Ojs.t) -> x1362
        let (label : t -> string) =
          fun (x1364 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1364) "label")
        let (set_label : t -> string -> unit) =
          fun (x1365 : t) ->
            fun (x1366 : string) ->
              Ojs.set_prop_ascii (t_to_js x1365) "label"
                (Ojs.string_to_js x1366)
      end
    module WorkspaceSymbolProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1368 : Ojs.t) -> x1368
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1367 : Ojs.t) -> x1367
        let (provide_workspace_symbols :
          'T t ->
            query:string ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1371 : 'T t) ->
            fun ~query:(x1369 : string) ->
              fun ~token:(x1370 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1373 : Ojs.t) -> Ojs.list_of_js Obj.magic x1373)
                  (Ojs.call (t_to_js Obj.magic x1371)
                     "provideWorkspaceSymbols"
                     [|(Ojs.string_to_js x1369);(CancellationToken.t_to_js
                                                   x1370)|])
        let (resolve_workspace_symbol :
          'T t ->
            symbol:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1377 : 'T t) ->
            fun ~symbol:(x1375 : 'T) ->
              fun ~token:(x1376 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1377)
                     "resolveWorkspaceSymbol"
                     [|(Obj.magic x1375);(CancellationToken.t_to_js x1376)|])
      end
    module ReferenceContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1381 : Ojs.t) -> x1381
        and t_to_js : t -> Ojs.t = fun (x1380 : Ojs.t) -> x1380
        let (include_declaration : t -> bool) =
          fun (x1382 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1382) "includeDeclaration")
        let (set_include_declaration : t -> bool -> unit) =
          fun (x1383 : t) ->
            fun (x1384 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1383) "includeDeclaration"
                (Ojs.bool_to_js x1384)
      end
    module ReferenceProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1386 : Ojs.t) -> x1386
        and t_to_js : t -> Ojs.t = fun (x1385 : Ojs.t) -> x1385
        let (provide_references :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                context:ReferenceContext.t ->
                  token:CancellationToken.t ->
                    Location.t list ProviderResult.t)
          =
          fun (x1391 : t) ->
            fun ~document:(x1387 : TextDocument.t) ->
              fun ~position:(x1388 : Position.t) ->
                fun ~context:(x1389 : ReferenceContext.t) ->
                  fun ~token:(x1390 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1392 : Ojs.t) ->
                         Ojs.list_of_js Location.t_of_js x1392)
                      (Ojs.call (t_to_js x1391) "provideReferences"
                         [|(TextDocument.t_to_js x1387);(Position.t_to_js
                                                           x1388);(ReferenceContext.t_to_js
                                                                    x1389);(
                           CancellationToken.t_to_js x1390)|])
      end
    module TextEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1395 : Ojs.t) -> x1395
        and t_to_js : t -> Ojs.t = fun (x1394 : Ojs.t) -> x1394
        let (replace : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1396 : Range.t) ->
            fun ~new_text:(x1397 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "replace"
                   [|(Range.t_to_js x1396);(Ojs.string_to_js x1397)|])
        let (insert : position:Position.t -> new_text:string -> t) =
          fun ~position:(x1398 : Position.t) ->
            fun ~new_text:(x1399 : string) ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   "insert"
                   [|(Position.t_to_js x1398);(Ojs.string_to_js x1399)|])
        let (delete : range:Range.t -> t) =
          fun ~range:(x1400 : Range.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "delete" [|(Range.t_to_js x1400)|])
        let (set_end_of_line : eol:EndOfLine.t -> t) =
          fun ~eol:(x1401 : EndOfLine.t) ->
            t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                 "setEndOfLine" [|(EndOfLine.t_to_js x1401)|])
        let (range : t -> Range.t) =
          fun (x1402 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1402) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1403 : t) ->
            fun (x1404 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1403) "range"
                (Range.t_to_js x1404)
        let (new_text : t -> string) =
          fun (x1405 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1405) "newText")
        let (set_new_text : t -> string -> unit) =
          fun (x1406 : t) ->
            fun (x1407 : string) ->
              Ojs.set_prop_ascii (t_to_js x1406) "newText"
                (Ojs.string_to_js x1407)
        let (new_eol : t -> EndOfLine.t) =
          fun (x1408 : t) ->
            EndOfLine.t_of_js (Ojs.get_prop_ascii (t_to_js x1408) "newEol")
        let (set_new_eol : t -> EndOfLine.t -> unit) =
          fun (x1409 : t) ->
            fun (x1410 : EndOfLine.t) ->
              Ojs.set_prop_ascii (t_to_js x1409) "newEol"
                (EndOfLine.t_to_js x1410)
        let (create : range:Range.t -> new_text:string -> t) =
          fun ~range:(x1411 : Range.t) ->
            fun ~new_text:(x1412 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TextEdit")
                   [|(Range.t_to_js x1411);(Ojs.string_to_js x1412)|])
      end
    module IconPath =
      struct
        type t =
          {
          light: [ `String of string  | `Uri of Uri.t ] ;
          dark: [ `String of string  | `Uri of Uri.t ] }
        let rec t_to_js : t -> Ojs.t =
          fun (x1413 : t) ->
            Ojs.obj
              [|("light",
                  ((match x1413.light with
                    | `String x1414 -> Ojs.string_to_js x1414
                    | `Uri x1415 -> Uri.t_to_js x1415)));("dark",
                                                           ((match x1413.dark
                                                             with
                                                             | `String x1416
                                                                 ->
                                                                 Ojs.string_to_js
                                                                   x1416
                                                             | `Uri x1417 ->
                                                                 Uri.t_to_js
                                                                   x1417)))|]
        let t_of_js js_val =
          let light_js = Ojs.get js_val "light" in
          let dark_js = Ojs.get js_val "dark" in
          let light =
            if Ojs.has_property light_js "parse"
            then `Uri (Uri.t_of_js light_js)
            else `String (Ojs.string_of_js light_js) in
          let dark =
            if Ojs.has_property dark_js "parse"
            then `Uri (Uri.t_of_js dark_js)
            else `String (Ojs.string_of_js dark_js) in
          { light; dark }
      end
    module WorkspaceEditEntryMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1425 : Ojs.t) -> x1425
        and t_to_js : t -> Ojs.t = fun (x1424 : Ojs.t) -> x1424
        let (needs_confirmation : t -> bool) =
          fun (x1426 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1426) "needsConfirmation")
        let (set_needs_confirmation : t -> bool -> unit) =
          fun (x1427 : t) ->
            fun (x1428 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1427) "needsConfirmation"
                (Ojs.bool_to_js x1428)
        let (label : t -> string) =
          fun (x1429 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1429) "label")
        let (set_label : t -> string -> unit) =
          fun (x1430 : t) ->
            fun (x1431 : string) ->
              Ojs.set_prop_ascii (t_to_js x1430) "label"
                (Ojs.string_to_js x1431)
        let (description : t -> string) =
          fun (x1432 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1432) "description")
        let (set_description : t -> string -> unit) =
          fun (x1433 : t) ->
            fun (x1434 : string) ->
              Ojs.set_prop_ascii (t_to_js x1433) "description"
                (Ojs.string_to_js x1434)
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x1435 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1435) "iconPath")
        let (set_icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 -> unit) =
          fun (x1439 : t) ->
            fun (x1440 : (ThemeIcon.t, Uri.t, IconPath.t) union3) ->
              Ojs.set_prop_ascii (t_to_js x1439) "iconPath"
                (union3_to_js ThemeIcon.t_to_js Uri.t_to_js IconPath.t_to_js
                   x1440)
      end
    module WorkspaceEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1445 : Ojs.t) -> x1445
        and t_to_js : t -> Ojs.t = fun (x1444 : Ojs.t) -> x1444
        let (size : t -> int) =
          fun (x1446 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1446) "size")
        let (replace :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1453 : t) ->
            fun ~uri:(x1447 : Uri.t) ->
              fun ~range:(x1448 : Range.t) ->
                fun ~new_text:(x1449 : string) ->
                  fun ?metadata:(x1450 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1454 = t_to_js x1453 in
                         Ojs.call (Ojs.get_prop_ascii x1454 "replace")
                           "apply"
                           [|x1454;((let x1451 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1451 "push"
                                          [|(Uri.t_to_js x1447)|]);
                                     ignore
                                       (Ojs.call x1451 "push"
                                          [|(Range.t_to_js x1448)|]);
                                     ignore
                                       (Ojs.call x1451 "push"
                                          [|(Ojs.string_to_js x1449)|]);
                                     (match x1450 with
                                      | Some x1452 ->
                                          ignore
                                            (Ojs.call x1451 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1452)|])
                                      | None -> ());
                                     x1451))|])
        let (insert :
          t ->
            uri:Uri.t ->
              position:Position.t ->
                new_text:string ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1461 : t) ->
            fun ~uri:(x1455 : Uri.t) ->
              fun ~position:(x1456 : Position.t) ->
                fun ~new_text:(x1457 : string) ->
                  fun ?metadata:(x1458 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1462 = t_to_js x1461 in
                         Ojs.call (Ojs.get_prop_ascii x1462 "insert") "apply"
                           [|x1462;((let x1459 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1459 "push"
                                          [|(Uri.t_to_js x1455)|]);
                                     ignore
                                       (Ojs.call x1459 "push"
                                          [|(Position.t_to_js x1456)|]);
                                     ignore
                                       (Ojs.call x1459 "push"
                                          [|(Ojs.string_to_js x1457)|]);
                                     (match x1458 with
                                      | Some x1460 ->
                                          ignore
                                            (Ojs.call x1459 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1460)|])
                                      | None -> ());
                                     x1459))|])
        let (delete :
          t ->
            uri:Uri.t ->
              range:Range.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1468 : t) ->
            fun ~uri:(x1463 : Uri.t) ->
              fun ~range:(x1464 : Range.t) ->
                fun ?metadata:(x1465 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1469 = t_to_js x1468 in
                       Ojs.call (Ojs.get_prop_ascii x1469 "delete") "apply"
                         [|x1469;((let x1466 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1466 "push"
                                        [|(Uri.t_to_js x1463)|]);
                                   ignore
                                     (Ojs.call x1466 "push"
                                        [|(Range.t_to_js x1464)|]);
                                   (match x1465 with
                                    | Some x1467 ->
                                        ignore
                                          (Ojs.call x1466 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1467)|])
                                    | None -> ());
                                   x1466))|])
        let (has : t -> uri:Uri.t -> bool) =
          fun (x1471 : t) ->
            fun ~uri:(x1470 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1471) "has" [|(Uri.t_to_js x1470)|])
        let (set_ : t -> uri:Uri.t -> edits:TextEdit.t list -> unit) =
          fun (x1475 : t) ->
            fun ~uri:(x1472 : Uri.t) ->
              fun ~edits:(x1473 : TextEdit.t list) ->
                ignore
                  (Ojs.call (t_to_js x1475) "set"
                     [|(Uri.t_to_js x1472);(Ojs.list_to_js TextEdit.t_to_js
                                              x1473)|])
        let (get : t -> uri:Uri.t -> TextEdit.t list) =
          fun (x1477 : t) ->
            fun ~uri:(x1476 : Uri.t) ->
              Ojs.list_of_js TextEdit.t_of_js
                (Ojs.call (t_to_js x1477) "get" [|(Uri.t_to_js x1476)|])
        module CreateFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1480 : Ojs.t) -> x1480
            and t_to_js : t -> Ojs.t = fun (x1479 : Ojs.t) -> x1479
            let (overwrite : t -> bool) =
              fun (x1481 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1481) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x1482 : t) ->
                fun (x1483 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1482) "overwrite"
                    (Ojs.bool_to_js x1483)
            let (ignore_if_exists : t -> bool) =
              fun (x1484 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1484) "ignoreIfExists")
            let (set_ignore_if_exists : t -> bool -> unit) =
              fun (x1485 : t) ->
                fun (x1486 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1485) "ignoreIfExists"
                    (Ojs.bool_to_js x1486)
          end
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1488 : Ojs.t) -> x1488
            and t_to_js : t -> Ojs.t = fun (x1487 : Ojs.t) -> x1487
            let (recursive : t -> bool) =
              fun (x1489 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1489) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x1490 : t) ->
                fun (x1491 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1490) "recursive"
                    (Ojs.bool_to_js x1491)
            let (ignore_if_not_exists : t -> bool) =
              fun (x1492 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x1492) "ignoreIfNotExists")
            let (set_ignore_if_not_exists : t -> bool -> unit) =
              fun (x1493 : t) ->
                fun (x1494 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x1493) "ignoreIfNotExists"
                    (Ojs.bool_to_js x1494)
          end
        let (create_file :
          t ->
            uri:Uri.t ->
              ?options:CreateFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1501 : t) ->
            fun ~uri:(x1495 : Uri.t) ->
              fun ?options:(x1496 : CreateFileOptions.t option) ->
                fun ?metadata:(x1497 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1502 = t_to_js x1501 in
                       Ojs.call (Ojs.get_prop_ascii x1502 "createFile")
                         "apply"
                         [|x1502;((let x1498 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1498 "push"
                                        [|(Uri.t_to_js x1495)|]);
                                   (match x1496 with
                                    | Some x1500 ->
                                        ignore
                                          (Ojs.call x1498 "push"
                                             [|(CreateFileOptions.t_to_js
                                                  x1500)|])
                                    | None -> ());
                                   (match x1497 with
                                    | Some x1499 ->
                                        ignore
                                          (Ojs.call x1498 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1499)|])
                                    | None -> ());
                                   x1498))|])
        let (delete_file :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t ->
                ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1509 : t) ->
            fun ~uri:(x1503 : Uri.t) ->
              fun ?options:(x1504 : DeleteFileOptions.t option) ->
                fun ?metadata:(x1505 : WorkspaceEditEntryMetadata.t option)
                  ->
                  fun () ->
                    ignore
                      (let x1510 = t_to_js x1509 in
                       Ojs.call (Ojs.get_prop_ascii x1510 "deleteFile")
                         "apply"
                         [|x1510;((let x1506 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1506 "push"
                                        [|(Uri.t_to_js x1503)|]);
                                   (match x1504 with
                                    | Some x1508 ->
                                        ignore
                                          (Ojs.call x1506 "push"
                                             [|(DeleteFileOptions.t_to_js
                                                  x1508)|])
                                    | None -> ());
                                   (match x1505 with
                                    | Some x1507 ->
                                        ignore
                                          (Ojs.call x1506 "push"
                                             [|(WorkspaceEditEntryMetadata.t_to_js
                                                  x1507)|])
                                    | None -> ());
                                   x1506))|])
        let (rename_file :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                ?options:CreateFileOptions.t ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1518 : t) ->
            fun ~old_uri:(x1511 : Uri.t) ->
              fun ~new_uri:(x1512 : Uri.t) ->
                fun ?options:(x1513 : CreateFileOptions.t option) ->
                  fun ?metadata:(x1514 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1519 = t_to_js x1518 in
                         Ojs.call (Ojs.get_prop_ascii x1519 "renameFile")
                           "apply"
                           [|x1519;((let x1515 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1515 "push"
                                          [|(Uri.t_to_js x1511)|]);
                                     ignore
                                       (Ojs.call x1515 "push"
                                          [|(Uri.t_to_js x1512)|]);
                                     (match x1513 with
                                      | Some x1517 ->
                                          ignore
                                            (Ojs.call x1515 "push"
                                               [|(CreateFileOptions.t_to_js
                                                    x1517)|])
                                      | None -> ());
                                     (match x1514 with
                                      | Some x1516 ->
                                          ignore
                                            (Ojs.call x1515 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1516)|])
                                      | None -> ());
                                     x1515))|])
        let (entries : t -> (Uri.t * TextEdit.t list) list) =
          fun (x1520 : t) ->
            Ojs.list_of_js
              (fun (x1521 : Ojs.t) ->
                 let x1522 = x1521 in
                 ((Uri.t_of_js (Ojs.array_get x1522 0)),
                   (Ojs.list_of_js TextEdit.t_of_js (Ojs.array_get x1522 1))))
              (Ojs.call (t_to_js x1520) "entries" [||])
      end
    module CodeAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1525 : Ojs.t) -> x1525
        and t_to_js : t -> Ojs.t = fun (x1524 : Ojs.t) -> x1524
        module Disabled =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1527 : Ojs.t) -> x1527
            and t_to_js : t -> Ojs.t = fun (x1526 : Ojs.t) -> x1526
            let (reason : t -> string) =
              fun (x1528 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1528) "reason")
          end
        let (title : t -> string) =
          fun (x1529 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1529) "title")
        let (set_title : t -> string -> unit) =
          fun (x1530 : t) ->
            fun (x1531 : string) ->
              Ojs.set_prop_ascii (t_to_js x1530) "title"
                (Ojs.string_to_js x1531)
        let (edit : t -> WorkspaceEdit.t) =
          fun (x1532 : t) ->
            WorkspaceEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1532) "edit")
        let (set_edit : t -> WorkspaceEdit.t -> unit) =
          fun (x1533 : t) ->
            fun (x1534 : WorkspaceEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1533) "edit"
                (WorkspaceEdit.t_to_js x1534)
        let (diagnostics : t -> Diagnostic.t list) =
          fun (x1535 : t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1535) "diagnostics")
        let (set_diagnostics : t -> Diagnostic.t list -> unit) =
          fun (x1537 : t) ->
            fun (x1538 : Diagnostic.t list) ->
              Ojs.set_prop_ascii (t_to_js x1537) "diagnostics"
                (Ojs.list_to_js Diagnostic.t_to_js x1538)
        let (command : t -> Command.t) =
          fun (x1540 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1540) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1541 : t) ->
            fun (x1542 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1541) "command"
                (Command.t_to_js x1542)
        let (kind : t -> CodeActionKind.t) =
          fun (x1543 : t) ->
            CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1543) "kind")
        let (set_kind : t -> CodeActionKind.t -> unit) =
          fun (x1544 : t) ->
            fun (x1545 : CodeActionKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1544) "kind"
                (CodeActionKind.t_to_js x1545)
        let (is_preferred : t -> bool) =
          fun (x1546 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1546) "isPreferred")
        let (set_is_preferred : t -> bool -> unit) =
          fun (x1547 : t) ->
            fun (x1548 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1547) "isPreferred"
                (Ojs.bool_to_js x1548)
        let (disabled : t -> Disabled.t) =
          fun (x1549 : t) ->
            Disabled.t_of_js (Ojs.get_prop_ascii (t_to_js x1549) "disabled")
        let (set_disabled : t -> Disabled.t -> unit) =
          fun (x1550 : t) ->
            fun (x1551 : Disabled.t) ->
              Ojs.set_prop_ascii (t_to_js x1550) "disabled"
                (Disabled.t_to_js x1551)
        let (create : title:string -> ?kind:CodeActionKind.t -> unit -> t) =
          fun ~title:(x1552 : string) ->
            fun ?kind:(x1553 : CodeActionKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CodeAction")
                     (let x1554 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1554 "push" [|(Ojs.string_to_js x1552)|]);
                      (match x1553 with
                       | Some x1555 ->
                           ignore
                             (Ojs.call x1554 "push"
                                [|(CodeActionKind.t_to_js x1555)|])
                       | None -> ());
                      x1554))
      end
    module CodeActionProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1557 : Ojs.t) -> x1557
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1556 : Ojs.t) -> x1556
        let (provide_code_actions :
          'T t ->
            document:TextDocument.t ->
              range:(Range.t, Selection.t) union2 ->
                context:CodeActionContext.t ->
                  token:CancellationToken.t ->
                    (Command.t, 'T) union2 list ProviderResult.t)
          =
          fun (x1564 : 'T t) ->
            fun ~document:(x1558 : TextDocument.t) ->
              fun ~range:(x1559 : (Range.t, Selection.t) union2) ->
                fun ~context:(x1562 : CodeActionContext.t) ->
                  fun ~token:(x1563 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1566 : Ojs.t) ->
                         Ojs.list_of_js
                           (fun (x1567 : Ojs.t) ->
                              union2_of_js Command.t_of_js Obj.magic x1567)
                           x1566)
                      (Ojs.call (t_to_js Obj.magic x1564)
                         "provideCodeActions"
                         [|(TextDocument.t_to_js x1558);(union2_to_js
                                                           Range.t_to_js
                                                           Selection.t_to_js
                                                           x1559);(CodeActionContext.t_to_js
                                                                    x1562);(
                           CancellationToken.t_to_js x1563)|])
        let (resolve_code_action :
          'T t ->
            code_action:'T ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1572 : 'T t) ->
            fun ~code_action:(x1570 : 'T) ->
              fun ~token:(x1571 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1572) "resolveCodeAction"
                     [|(Obj.magic x1570);(CancellationToken.t_to_js x1571)|])
      end
    module CodeActionProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1576 : Ojs.t) -> x1576
        and t_to_js : t -> Ojs.t = fun (x1575 : Ojs.t) -> x1575
        let (provided_code_action_kinds : t -> CodeActionKind.t list) =
          fun (x1577 : t) ->
            Ojs.list_of_js CodeActionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1577) "providedCodeActionKinds")
        module Documentation =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1580 : Ojs.t) -> x1580
            and t_to_js : t -> Ojs.t = fun (x1579 : Ojs.t) -> x1579
            let (kind : t -> CodeActionKind.t) =
              fun (x1581 : t) ->
                CodeActionKind.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1581) "kind")
            let (command : t -> Command.t) =
              fun (x1582 : t) ->
                Command.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1582) "command")
          end
        let (documentation : t -> Documentation.t list) =
          fun (x1583 : t) ->
            Ojs.list_of_js Documentation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1583) "documentation")
      end
    module RenameProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1586 : Ojs.t) -> x1586
        and t_to_js : t -> Ojs.t = fun (x1585 : Ojs.t) -> x1585
        let (provide_rename_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                new_name:string ->
                  token:CancellationToken.t ->
                    WorkspaceEdit.t ProviderResult.t)
          =
          fun (x1591 : t) ->
            fun ~document:(x1587 : TextDocument.t) ->
              fun ~position:(x1588 : Position.t) ->
                fun ~new_name:(x1589 : string) ->
                  fun ~token:(x1590 : CancellationToken.t) ->
                    ProviderResult.t_of_js WorkspaceEdit.t_of_js
                      (Ojs.call (t_to_js x1591) "provideRenameEdits"
                         [|(TextDocument.t_to_js x1587);(Position.t_to_js
                                                           x1588);(Ojs.string_to_js
                                                                    x1589);(
                           CancellationToken.t_to_js x1590)|])
        module RangeWithPlaceHolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1594 : Ojs.t) -> x1594
            and t_to_js : t -> Ojs.t = fun (x1593 : Ojs.t) -> x1593
            let (range : t -> Range.t) =
              fun (x1595 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1595) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x1596 : t) ->
                fun (x1597 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1596) "range"
                    (Range.t_to_js x1597)
            let (placeholder : t -> string) =
              fun (x1598 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x1598) "placeholder")
            let (set_placeholder : t -> string -> unit) =
              fun (x1599 : t) ->
                fun (x1600 : string) ->
                  Ojs.set_prop_ascii (t_to_js x1599) "placeholder"
                    (Ojs.string_to_js x1600)
          end
        let (prepare_rename :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (Range.t, RangeWithPlaceHolder.t) union2 ProviderResult.t)
          =
          fun (x1604 : t) ->
            fun ~document:(x1601 : TextDocument.t) ->
              fun ~position:(x1602 : Position.t) ->
                fun ~token:(x1603 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1605 : Ojs.t) ->
                       union2_of_js Range.t_of_js
                         RangeWithPlaceHolder.t_of_js x1605)
                    (Ojs.call (t_to_js x1604) "prepareRename"
                       [|(TextDocument.t_to_js x1601);(Position.t_to_js x1602);(
                         CancellationToken.t_to_js x1603)|])
      end
    module SemanticTokensLegend =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1609 : Ojs.t) -> x1609
        and t_to_js : t -> Ojs.t = fun (x1608 : Ojs.t) -> x1608
        let (token_types : t -> string list) =
          fun (x1610 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1610) "tokenTypes")
        let (token_modifiers : t -> string list) =
          fun (x1612 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1612) "tokenModifiers")
        let (create :
          token_types:string list ->
            ?token_modifiers:string list -> unit -> t)
          =
          fun ~token_types:(x1614 : string list) ->
            fun ?token_modifiers:(x1615 : string list option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensLegend")
                     (let x1616 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1616 "push"
                           [|(Ojs.list_to_js Ojs.string_to_js x1614)|]);
                      (match x1615 with
                       | Some x1617 ->
                           ignore
                             (Ojs.call x1616 "push"
                                [|(Ojs.list_to_js Ojs.string_to_js x1617)|])
                       | None -> ());
                      x1616))
      end
    module SemanticTokens =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1621 : Ojs.t) -> x1621
        and t_to_js : t -> Ojs.t = fun (x1620 : Ojs.t) -> x1620
        let (result_id : t -> string) =
          fun (x1622 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1622) "resultId")
        let (data : t -> Uint32Array.t) =
          fun (x1623 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1623) "data")
        let (create : data:Uint32Array.t -> ?result_id:string -> unit -> t) =
          fun ~data:(x1624 : Uint32Array.t) ->
            fun ?result_id:(x1625 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokens")
                     (let x1626 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1626 "push"
                           [|(Uint32Array.t_to_js x1624)|]);
                      (match x1625 with
                       | Some x1627 ->
                           ignore
                             (Ojs.call x1626 "push"
                                [|(Ojs.string_to_js x1627)|])
                       | None -> ());
                      x1626))
      end
    module SemanticTokensEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1629 : Ojs.t) -> x1629
        and t_to_js : t -> Ojs.t = fun (x1628 : Ojs.t) -> x1628
        let (start : t -> int) =
          fun (x1630 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1630) "start")
        let (delete_count : t -> int) =
          fun (x1631 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1631) "deleteCount")
        let (data : t -> Uint32Array.t) =
          fun (x1632 : t) ->
            Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x1632) "data")
        let (create :
          start:int -> delete_count:int -> ?data:Uint32Array.t -> unit -> t)
          =
          fun ~start:(x1633 : int) ->
            fun ~delete_count:(x1634 : int) ->
              fun ?data:(x1635 : Uint32Array.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "SemanticTokensEdit")
                       (let x1636 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1636 "push" [|(Ojs.int_to_js x1633)|]);
                        ignore
                          (Ojs.call x1636 "push" [|(Ojs.int_to_js x1634)|]);
                        (match x1635 with
                         | Some x1637 ->
                             ignore
                               (Ojs.call x1636 "push"
                                  [|(Uint32Array.t_to_js x1637)|])
                         | None -> ());
                        x1636))
      end
    module SemanticTokensEdits =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1639 : Ojs.t) -> x1639
        and t_to_js : t -> Ojs.t = fun (x1638 : Ojs.t) -> x1638
        let (result_id : t -> string) =
          fun (x1640 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1640) "resultId")
        let (edits : t -> SemanticTokensEdit.t list) =
          fun (x1641 : t) ->
            Ojs.list_of_js SemanticTokensEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1641) "edits")
        let (create :
          edits:SemanticTokensEdit.t list -> ?result_id:string -> unit -> t)
          =
          fun ~edits:(x1643 : SemanticTokensEdit.t list) ->
            fun ?result_id:(x1644 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SemanticTokensEdits")
                     (let x1645 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1645 "push"
                           [|(Ojs.list_to_js SemanticTokensEdit.t_to_js x1643)|]);
                      (match x1644 with
                       | Some x1646 ->
                           ignore
                             (Ojs.call x1645 "push"
                                [|(Ojs.string_to_js x1646)|])
                       | None -> ());
                      x1645))
      end
    module SemanticTokensBuilder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1649 : Ojs.t) -> x1649
        and t_to_js : t -> Ojs.t = fun (x1648 : Ojs.t) -> x1648
        let (create : ?legend:SemanticTokensLegend.t -> unit -> t) =
          fun ?legend:(x1650 : SemanticTokensLegend.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "SemanticTokensBuilder")
                   (let x1651 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x1650 with
                     | Some x1652 ->
                         ignore
                           (Ojs.call x1651 "push"
                              [|(SemanticTokensLegend.t_to_js x1652)|])
                     | None -> ());
                    x1651))
        let (push :
          t ->
            line:int ->
              char:int ->
                length:int ->
                  token_type_:int -> ?token_modifiers:int -> unit -> unit)
          =
          fun (x1660 : t) ->
            fun ~line:(x1653 : int) ->
              fun ~char:(x1654 : int) ->
                fun ~length:(x1655 : int) ->
                  fun ~token_type_:(x1656 : int) ->
                    fun ?token_modifiers:(x1657 : int option) ->
                      fun () ->
                        ignore
                          (let x1661 = t_to_js x1660 in
                           Ojs.call (Ojs.get_prop_ascii x1661 "push") "apply"
                             [|x1661;((let x1658 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1658 "push"
                                            [|(Ojs.int_to_js x1653)|]);
                                       ignore
                                         (Ojs.call x1658 "push"
                                            [|(Ojs.int_to_js x1654)|]);
                                       ignore
                                         (Ojs.call x1658 "push"
                                            [|(Ojs.int_to_js x1655)|]);
                                       ignore
                                         (Ojs.call x1658 "push"
                                            [|(Ojs.int_to_js x1656)|]);
                                       (match x1657 with
                                        | Some x1659 ->
                                            ignore
                                              (Ojs.call x1658 "push"
                                                 [|(Ojs.int_to_js x1659)|])
                                        | None -> ());
                                       x1658))|])
        let (push' :
          t ->
            range:Range.t ->
              token_type_:string ->
                ?token_modifiers:string list -> unit -> unit)
          =
          fun (x1668 : t) ->
            fun ~range:(x1662 : Range.t) ->
              fun ~token_type_:(x1663 : string) ->
                fun ?token_modifiers:(x1664 : string list option) ->
                  fun () ->
                    ignore
                      (let x1669 = t_to_js x1668 in
                       Ojs.call (Ojs.get_prop_ascii x1669 "push") "apply"
                         [|x1669;((let x1665 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1665 "push"
                                        [|(Range.t_to_js x1662)|]);
                                   ignore
                                     (Ojs.call x1665 "push"
                                        [|(Ojs.string_to_js x1663)|]);
                                   (match x1664 with
                                    | Some x1666 ->
                                        ignore
                                          (Ojs.call x1665 "push"
                                             [|(Ojs.list_to_js
                                                  Ojs.string_to_js x1666)|])
                                    | None -> ());
                                   x1665))|])
        let (build : t -> ?result_id:string -> unit -> SemanticTokens.t) =
          fun (x1673 : t) ->
            fun ?result_id:(x1670 : string option) ->
              fun () ->
                SemanticTokens.t_of_js
                  (let x1674 = t_to_js x1673 in
                   Ojs.call (Ojs.get_prop_ascii x1674 "build") "apply"
                     [|x1674;((let x1671 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1670 with
                                | Some x1672 ->
                                    ignore
                                      (Ojs.call x1671 "push"
                                         [|(Ojs.string_to_js x1672)|])
                                | None -> ());
                               x1671))|])
      end
    module DocumentSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1676 : Ojs.t) -> x1676
        and t_to_js : t -> Ojs.t = fun (x1675 : Ojs.t) -> x1675
        let (on_did_change_semantic_tokens : t -> unit Event.t) =
          fun (x1677 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1677) "onDidChangeSemanticTokens")
        let (set_on_did_change_semantic_tokens : t -> unit Event.t -> unit) =
          fun (x1679 : t) ->
            fun (x1680 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1679) "onDidChangeSemanticTokens"
                (Event.t_to_js Ojs.unit_to_js x1680)
        let (provide_document_semantic_tokens :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> SemanticTokens.t ProviderResult.t)
          =
          fun (x1684 : t) ->
            fun ~document:(x1682 : TextDocument.t) ->
              fun ~token:(x1683 : CancellationToken.t) ->
                ProviderResult.t_of_js SemanticTokens.t_of_js
                  (Ojs.call (t_to_js x1684) "provideDocumentSemanticTokens"
                     [|(TextDocument.t_to_js x1682);(CancellationToken.t_to_js
                                                       x1683)|])
        let (provide_document_semantic_tokens_edits :
          t ->
            document:TextDocument.t ->
              previous_result_id:string ->
                token:CancellationToken.t ->
                  (SemanticTokens.t, SemanticTokensEdits.t) union2
                    ProviderResult.t)
          =
          fun (x1689 : t) ->
            fun ~document:(x1686 : TextDocument.t) ->
              fun ~previous_result_id:(x1687 : string) ->
                fun ~token:(x1688 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1690 : Ojs.t) ->
                       union2_of_js SemanticTokens.t_of_js
                         SemanticTokensEdits.t_of_js x1690)
                    (Ojs.call (t_to_js x1689)
                       "provideDocumentSemanticTokensEdits"
                       [|(TextDocument.t_to_js x1686);(Ojs.string_to_js x1687);(
                         CancellationToken.t_to_js x1688)|])
      end
    module DocumentRangeSemanticTokensProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1694 : Ojs.t) -> x1694
        and t_to_js : t -> Ojs.t = fun (x1693 : Ojs.t) -> x1693
        let (provide_document_range_semantic_tokens :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                token:CancellationToken.t ->
                  SemanticTokens.t ProviderResult.t)
          =
          fun (x1698 : t) ->
            fun ~document:(x1695 : TextDocument.t) ->
              fun ~range:(x1696 : Range.t) ->
                fun ~token:(x1697 : CancellationToken.t) ->
                  ProviderResult.t_of_js SemanticTokens.t_of_js
                    (Ojs.call (t_to_js x1698)
                       "provideDocumentRangeSemanticTokens"
                       [|(TextDocument.t_to_js x1695);(Range.t_to_js x1696);(
                         CancellationToken.t_to_js x1697)|])
      end
    module FormattingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1701 : Ojs.t) -> x1701
        and t_to_js : t -> Ojs.t = fun (x1700 : Ojs.t) -> x1700
        let (tab_size : t -> int) =
          fun (x1702 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1702) "tabSize")
        let (set_tab_size : t -> int -> unit) =
          fun (x1703 : t) ->
            fun (x1704 : int) ->
              Ojs.set_prop_ascii (t_to_js x1703) "tabSize"
                (Ojs.int_to_js x1704)
        let (insert_spaces : t -> bool) =
          fun (x1705 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1705) "insertSpaces")
        let (set_insert_spaces : t -> bool -> unit) =
          fun (x1706 : t) ->
            fun (x1707 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1706) "insertSpaces"
                (Ojs.bool_to_js x1707)
        let (get : t -> string -> bool or_string or_number) =
          fun (x1708 : t) ->
            fun (x1709 : string) ->
              or_number_of_js
                (fun (x1710 : Ojs.t) -> or_string_of_js Ojs.bool_of_js x1710)
                (Ojs.get_prop (t_to_js x1708) (Ojs.string_to_js x1709))
        let (set : t -> string -> bool or_string or_number -> unit) =
          fun (x1712 : t) ->
            fun (x1713 : string) ->
              fun (x1714 : bool or_string or_number) ->
                Ojs.set_prop (t_to_js x1712) (Ojs.string_to_js x1713)
                  (or_number_to_js
                     (fun (x1715 : bool or_string) ->
                        or_string_to_js Ojs.bool_to_js x1715) x1714)
      end
    module DocumentFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1718 : Ojs.t) -> x1718
        and t_to_js : t -> Ojs.t = fun (x1717 : Ojs.t) -> x1717
        let (provide_document_formatting_edits :
          t ->
            document:TextDocument.t ->
              options:FormattingOptions.t ->
                token:CancellationToken.t -> TextEdit.t list ProviderResult.t)
          =
          fun (x1722 : t) ->
            fun ~document:(x1719 : TextDocument.t) ->
              fun ~options:(x1720 : FormattingOptions.t) ->
                fun ~token:(x1721 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1723 : Ojs.t) ->
                       Ojs.list_of_js TextEdit.t_of_js x1723)
                    (Ojs.call (t_to_js x1722)
                       "provideDocumentFormattingEdits"
                       [|(TextDocument.t_to_js x1719);(FormattingOptions.t_to_js
                                                         x1720);(CancellationToken.t_to_js
                                                                   x1721)|])
      end
    module DocumentRangeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1726 : Ojs.t) -> x1726
        and t_to_js : t -> Ojs.t = fun (x1725 : Ojs.t) -> x1725
        let (provide_document_range_formatting_edits :
          t ->
            document:TextDocument.t ->
              range:Range.t ->
                options:FormattingOptions.t ->
                  token:CancellationToken.t ->
                    TextEdit.t list ProviderResult.t)
          =
          fun (x1731 : t) ->
            fun ~document:(x1727 : TextDocument.t) ->
              fun ~range:(x1728 : Range.t) ->
                fun ~options:(x1729 : FormattingOptions.t) ->
                  fun ~token:(x1730 : CancellationToken.t) ->
                    ProviderResult.t_of_js
                      (fun (x1732 : Ojs.t) ->
                         Ojs.list_of_js TextEdit.t_of_js x1732)
                      (Ojs.call (t_to_js x1731)
                         "provideDocumentRangeFormattingEdits"
                         [|(TextDocument.t_to_js x1727);(Range.t_to_js x1728);(
                           FormattingOptions.t_to_js x1729);(CancellationToken.t_to_js
                                                               x1730)|])
      end
    module OnTypeFormattingEditProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1735 : Ojs.t) -> x1735
        and t_to_js : t -> Ojs.t = fun (x1734 : Ojs.t) -> x1734
        let (provide_on_type_formatting_edits :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                ch:string ->
                  options:FormattingOptions.t ->
                    token:CancellationToken.t ->
                      TextEdit.t list ProviderResult.t)
          =
          fun (x1741 : t) ->
            fun ~document:(x1736 : TextDocument.t) ->
              fun ~position:(x1737 : Position.t) ->
                fun ~ch:(x1738 : string) ->
                  fun ~options:(x1739 : FormattingOptions.t) ->
                    fun ~token:(x1740 : CancellationToken.t) ->
                      ProviderResult.t_of_js
                        (fun (x1742 : Ojs.t) ->
                           Ojs.list_of_js TextEdit.t_of_js x1742)
                        (Ojs.call (t_to_js x1741)
                           "provideOnTypeFormattingEdits"
                           [|(TextDocument.t_to_js x1736);(Position.t_to_js
                                                             x1737);(
                             Ojs.string_to_js x1738);(FormattingOptions.t_to_js
                                                        x1739);(CancellationToken.t_to_js
                                                                  x1740)|])
      end
    module ParameterInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1745 : Ojs.t) -> x1745
        and t_to_js : t -> Ojs.t = fun (x1744 : Ojs.t) -> x1744
        let (label : t -> (int * int) or_string) =
          fun (x1746 : t) ->
            or_string_of_js
              (fun (x1747 : Ojs.t) ->
                 let x1748 = x1747 in
                 ((Ojs.int_of_js (Ojs.array_get x1748 0)),
                   (Ojs.int_of_js (Ojs.array_get x1748 1))))
              (Ojs.get_prop_ascii (t_to_js x1746) "label")
        let (set_label : t -> (int * int) or_string -> unit) =
          fun (x1749 : t) ->
            fun (x1750 : (int * int) or_string) ->
              Ojs.set_prop_ascii (t_to_js x1749) "label"
                (or_string_to_js
                   (fun (x1751 : (int * int)) ->
                      let (x1752, x1753) = x1751 in
                      let x1754 = Ojs.array_make 2 in
                      Ojs.array_set x1754 0 (Ojs.int_to_js x1752);
                      Ojs.array_set x1754 1 (Ojs.int_to_js x1753);
                      x1754) x1750)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1755 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1755) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1757 : t) ->
            fun (x1758 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1757) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1758)
        let (create :
          label:(int * int) or_string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1760 : (int * int) or_string) ->
            fun ?documentation:(x1761 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ParameterInformation")
                     (let x1762 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1762 "push"
                           [|(or_string_to_js
                                (fun (x1765 : (int * int)) ->
                                   let (x1766, x1767) = x1765 in
                                   let x1768 = Ojs.array_make 2 in
                                   Ojs.array_set x1768 0
                                     (Ojs.int_to_js x1766);
                                   Ojs.array_set x1768 1
                                     (Ojs.int_to_js x1767);
                                   x1768) x1760)|]);
                      (match x1761 with
                       | Some x1763 ->
                           ignore
                             (Ojs.call x1762 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1763)|])
                       | None -> ());
                      x1762))
      end
    module SignatureInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1770 : Ojs.t) -> x1770
        and t_to_js : t -> Ojs.t = fun (x1769 : Ojs.t) -> x1769
        let (label : t -> string) =
          fun (x1771 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1771) "label")
        let (set_label : t -> string -> unit) =
          fun (x1772 : t) ->
            fun (x1773 : string) ->
              Ojs.set_prop_ascii (t_to_js x1772) "label"
                (Ojs.string_to_js x1773)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1774 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1774) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1776 : t) ->
            fun (x1777 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1776) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1777)
        let (parameters : t -> ParameterInformation.t list) =
          fun (x1779 : t) ->
            Ojs.list_of_js ParameterInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1779) "parameters")
        let (set_parameters : t -> ParameterInformation.t list -> unit) =
          fun (x1781 : t) ->
            fun (x1782 : ParameterInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1781) "parameters"
                (Ojs.list_to_js ParameterInformation.t_to_js x1782)
        let (active_parameter : t -> int) =
          fun (x1784 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1784) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1785 : t) ->
            fun (x1786 : int) ->
              Ojs.set_prop_ascii (t_to_js x1785) "activeParameter"
                (Ojs.int_to_js x1786)
        let (create :
          label:string ->
            ?documentation:MarkdownString.t or_string -> unit -> t)
          =
          fun ~label:(x1787 : string) ->
            fun ?documentation:(x1788 : MarkdownString.t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SignatureInformation")
                     (let x1789 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1789 "push" [|(Ojs.string_to_js x1787)|]);
                      (match x1788 with
                       | Some x1790 ->
                           ignore
                             (Ojs.call x1789 "push"
                                [|(or_string_to_js MarkdownString.t_to_js
                                     x1790)|])
                       | None -> ());
                      x1789))
      end
    module SignatureHelp =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1793 : Ojs.t) -> x1793
        and t_to_js : t -> Ojs.t = fun (x1792 : Ojs.t) -> x1792
        let (signatures : t -> SignatureInformation.t list) =
          fun (x1794 : t) ->
            Ojs.list_of_js SignatureInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1794) "signatures")
        let (set_signatures : t -> SignatureInformation.t list -> unit) =
          fun (x1796 : t) ->
            fun (x1797 : SignatureInformation.t list) ->
              Ojs.set_prop_ascii (t_to_js x1796) "signatures"
                (Ojs.list_to_js SignatureInformation.t_to_js x1797)
        let (active_signature : t -> int) =
          fun (x1799 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1799) "activeSignature")
        let (set_active_signature : t -> int -> unit) =
          fun (x1800 : t) ->
            fun (x1801 : int) ->
              Ojs.set_prop_ascii (t_to_js x1800) "activeSignature"
                (Ojs.int_to_js x1801)
        let (active_parameter : t -> int) =
          fun (x1802 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1802) "activeParameter")
        let (set_active_parameter : t -> int -> unit) =
          fun (x1803 : t) ->
            fun (x1804 : int) ->
              Ojs.set_prop_ascii (t_to_js x1803) "activeParameter"
                (Ojs.int_to_js x1804)
      end
    module SignatureHelpTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `ContentChange ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1806 : Ojs.t) ->
            let x1807 = x1806 in
            match Ojs.int_of_js x1807 with
            | 2 -> `TriggerCharacter
            | 3 -> `ContentChange
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1805 : [ `TriggerCharacter  | `ContentChange ]) ->
            match x1805 with
            | `TriggerCharacter -> Ojs.int_to_js 2
            | `ContentChange -> Ojs.int_to_js 3
      end
    module SignatureHelpContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1809 : Ojs.t) -> x1809
        and t_to_js : t -> Ojs.t = fun (x1808 : Ojs.t) -> x1808
        let (trigger_kind : t -> SignatureHelpTriggerKind.t) =
          fun (x1810 : t) ->
            SignatureHelpTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1810) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1811 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1811) "triggerCharacter")
        let (is_retrigger : t -> bool) =
          fun (x1812 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1812) "isRetrigger")
        let (active_signature_help : t -> SignatureHelp.t) =
          fun (x1813 : t) ->
            SignatureHelp.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1813) "activeSignatureHelp")
      end
    module SignatureHelpProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1815 : Ojs.t) -> x1815
        and t_to_js : t -> Ojs.t = fun (x1814 : Ojs.t) -> x1814
        let (provide_signature_help :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:SignatureHelpContext.t ->
                    SignatureHelp.t ProviderResult.t)
          =
          fun (x1820 : t) ->
            fun ~document:(x1816 : TextDocument.t) ->
              fun ~position:(x1817 : Position.t) ->
                fun ~token:(x1818 : CancellationToken.t) ->
                  fun ~context:(x1819 : SignatureHelpContext.t) ->
                    ProviderResult.t_of_js SignatureHelp.t_of_js
                      (Ojs.call (t_to_js x1820) "provideSignatureHelp"
                         [|(TextDocument.t_to_js x1816);(Position.t_to_js
                                                           x1817);(CancellationToken.t_to_js
                                                                    x1818);(
                           SignatureHelpContext.t_to_js x1819)|])
      end
    module SignatureHelpProviderMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1823 : Ojs.t) -> x1823
        and t_to_js : t -> Ojs.t = fun (x1822 : Ojs.t) -> x1822
        let (trigger_characters : t -> string list) =
          fun (x1824 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1824) "triggerCharacters")
        let (retrigger_characters : t -> string list) =
          fun (x1826 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1826) "retriggerCharacters")
      end
    module CompletionItemKind =
      struct
        type t =
          [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
          | `Class  | `Interface  | `Module  | `Property  | `Unit  | 
            `Value 
          | `Enum  | `Keyword  | `Snippet  | `Color  | `Reference  | 
            `File 
          | `Folder  | `EnumMember  | `Constant  | `Struct  | `Event 
          | `Operator  | `TypeParameter  | `User  | `Issue ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1829 : Ojs.t) ->
            let x1830 = x1829 in
            match Ojs.int_of_js x1830 with
            | 1 -> `Method
            | 2 -> `Function
            | 3 -> `Constructor
            | 4 -> `Field
            | 5 -> `Variable
            | 6 -> `Class
            | 7 -> `Interface
            | 8 -> `Module
            | 9 -> `Property
            | 10 -> `Unit
            | 11 -> `Value
            | 12 -> `Enum
            | 13 -> `Keyword
            | 14 -> `Snippet
            | 15 -> `Color
            | 17 -> `Reference
            | 16 -> `File
            | 18 -> `Folder
            | 19 -> `EnumMember
            | 20 -> `Constant
            | 21 -> `Struct
            | 22 -> `Event
            | 23 -> `Operator
            | 24 -> `TypeParameter
            | 25 -> `User
            | 26 -> `Issue
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1828 :
              [ `Method  | `Function  | `Constructor  | `Field  | `Variable 
              | `Class  | `Interface  | `Module  | `Property  | `Unit 
              | `Value  | `Enum  | `Keyword  | `Snippet  | `Color 
              | `Reference  | `File  | `Folder  | `EnumMember  | `Constant 
              | `Struct  | `Event  | `Operator  | `TypeParameter  | `User 
              | `Issue ])
            ->
            match x1828 with
            | `Method -> Ojs.int_to_js 1
            | `Function -> Ojs.int_to_js 2
            | `Constructor -> Ojs.int_to_js 3
            | `Field -> Ojs.int_to_js 4
            | `Variable -> Ojs.int_to_js 5
            | `Class -> Ojs.int_to_js 6
            | `Interface -> Ojs.int_to_js 7
            | `Module -> Ojs.int_to_js 8
            | `Property -> Ojs.int_to_js 9
            | `Unit -> Ojs.int_to_js 10
            | `Value -> Ojs.int_to_js 11
            | `Enum -> Ojs.int_to_js 12
            | `Keyword -> Ojs.int_to_js 13
            | `Snippet -> Ojs.int_to_js 14
            | `Color -> Ojs.int_to_js 15
            | `Reference -> Ojs.int_to_js 17
            | `File -> Ojs.int_to_js 16
            | `Folder -> Ojs.int_to_js 18
            | `EnumMember -> Ojs.int_to_js 19
            | `Constant -> Ojs.int_to_js 20
            | `Struct -> Ojs.int_to_js 21
            | `Event -> Ojs.int_to_js 22
            | `Operator -> Ojs.int_to_js 23
            | `TypeParameter -> Ojs.int_to_js 24
            | `User -> Ojs.int_to_js 25
            | `Issue -> Ojs.int_to_js 26
      end
    module CompletionItemTag =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1832 : Ojs.t) -> x1832
        and t_to_js : t -> Ojs.t = fun (x1831 : Ojs.t) -> x1831
      end
    module CompletionItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1834 : Ojs.t) -> x1834
        and t_to_js : t -> Ojs.t = fun (x1833 : Ojs.t) -> x1833
        let (label : t -> string) =
          fun (x1835 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1835) "label")
        let (set_label : t -> string -> unit) =
          fun (x1836 : t) ->
            fun (x1837 : string) ->
              Ojs.set_prop_ascii (t_to_js x1836) "label"
                (Ojs.string_to_js x1837)
        let (kind : t -> CompletionItemKind.t) =
          fun (x1838 : t) ->
            CompletionItemKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1838) "kind")
        let (set_kind : t -> CompletionItemKind.t -> unit) =
          fun (x1839 : t) ->
            fun (x1840 : CompletionItemKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1839) "kind"
                (CompletionItemKind.t_to_js x1840)
        let (tags : t -> CompletionItemTag.t list) =
          fun (x1841 : t) ->
            Ojs.list_of_js CompletionItemTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1841) "tags")
        let (set_tags : t -> CompletionItemTag.t list -> unit) =
          fun (x1843 : t) ->
            fun (x1844 : CompletionItemTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x1843) "tags"
                (Ojs.list_to_js CompletionItemTag.t_to_js x1844)
        let (detail : t -> string) =
          fun (x1846 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1846) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1847 : t) ->
            fun (x1848 : string) ->
              Ojs.set_prop_ascii (t_to_js x1847) "detail"
                (Ojs.string_to_js x1848)
        let (documentation : t -> MarkdownString.t or_string) =
          fun (x1849 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1849) "documentation")
        let (set_documentation : t -> MarkdownString.t or_string -> unit) =
          fun (x1851 : t) ->
            fun (x1852 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1851) "documentation"
                (or_string_to_js MarkdownString.t_to_js x1852)
        let (sort_text : t -> string) =
          fun (x1854 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1854) "sortText")
        let (set_sort_text : t -> string -> unit) =
          fun (x1855 : t) ->
            fun (x1856 : string) ->
              Ojs.set_prop_ascii (t_to_js x1855) "sortText"
                (Ojs.string_to_js x1856)
        let (filter_text : t -> string) =
          fun (x1857 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1857) "filterText")
        let (set_filter_text : t -> string -> unit) =
          fun (x1858 : t) ->
            fun (x1859 : string) ->
              Ojs.set_prop_ascii (t_to_js x1858) "filterText"
                (Ojs.string_to_js x1859)
        let (preselect : t -> bool) =
          fun (x1860 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1860) "preselect")
        let (set_preselect : t -> bool -> unit) =
          fun (x1861 : t) ->
            fun (x1862 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1861) "preselect"
                (Ojs.bool_to_js x1862)
        let (insert_text : t -> SnippetString.t or_string) =
          fun (x1863 : t) ->
            or_string_of_js SnippetString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1863) "insertText")
        let (set_insert_text : t -> SnippetString.t or_string -> unit) =
          fun (x1865 : t) ->
            fun (x1866 : SnippetString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1865) "insertText"
                (or_string_to_js SnippetString.t_to_js x1866)
        module RangeWithEdit =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x1869 : Ojs.t) -> x1869
            and t_to_js : t -> Ojs.t = fun (x1868 : Ojs.t) -> x1868
            let (inserting : t -> Range.t) =
              fun (x1870 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1870) "inserting")
            let (set_inserting : t -> Range.t -> unit) =
              fun (x1871 : t) ->
                fun (x1872 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1871) "inserting"
                    (Range.t_to_js x1872)
            let (replacing : t -> Range.t) =
              fun (x1873 : t) ->
                Range.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x1873) "replacing")
            let (set_replacing : t -> Range.t -> unit) =
              fun (x1874 : t) ->
                fun (x1875 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x1874) "replacing"
                    (Range.t_to_js x1875)
          end
        let (range : t -> (Range.t, RangeWithEdit.t) union2) =
          fun (x1876 : t) ->
            union2_of_js Range.t_of_js RangeWithEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1876) "range")
        let (set_range : t -> (Range.t, RangeWithEdit.t) union2 -> unit) =
          fun (x1879 : t) ->
            fun (x1880 : (Range.t, RangeWithEdit.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x1879) "range"
                (union2_to_js Range.t_to_js RangeWithEdit.t_to_js x1880)
        let (commit_characters : t -> string list) =
          fun (x1883 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1883) "commitCharacters")
        let (set_commit_characters : t -> string list -> unit) =
          fun (x1885 : t) ->
            fun (x1886 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1885) "commitCharacters"
                (Ojs.list_to_js Ojs.string_to_js x1886)
        let (keep_whitespace : t -> bool) =
          fun (x1888 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1888) "keepWhitespace")
        let (set_keep_whitespace : t -> bool -> unit) =
          fun (x1889 : t) ->
            fun (x1890 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1889) "keepWhitespace"
                (Ojs.bool_to_js x1890)
        let (text_edit : t -> TextEdit.t) =
          fun (x1891 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x1891) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x1892 : t) ->
            fun (x1893 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x1892) "textEdit"
                (TextEdit.t_to_js x1893)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x1894 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1894) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x1896 : t) ->
            fun (x1897 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x1896) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x1897)
        let (command : t -> Command.t) =
          fun (x1899 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1899) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1900 : t) ->
            fun (x1901 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1900) "command"
                (Command.t_to_js x1901)
        let (create :
          label:string -> ?kind:CompletionItemKind.t -> unit -> t) =
          fun ~label:(x1902 : string) ->
            fun ?kind:(x1903 : CompletionItemKind.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionItem")
                     (let x1904 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1904 "push" [|(Ojs.string_to_js x1902)|]);
                      (match x1903 with
                       | Some x1905 ->
                           ignore
                             (Ojs.call x1904 "push"
                                [|(CompletionItemKind.t_to_js x1905)|])
                       | None -> ());
                      x1904))
      end
    module CompletionList =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1907 : Ojs.t) -> x1907
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1906 : Ojs.t) -> x1906
        let (is_incomplete : 'T t -> bool) =
          fun (x1908 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1908) "isIncomplete")
        let (set_is_incomplete : 'T t -> bool -> unit) =
          fun (x1910 : 'T t) ->
            fun (x1911 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1910) "isIncomplete"
                (Ojs.bool_to_js x1911)
        let (items : 'T t -> 'T list) =
          fun (x1913 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1913) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x1916 : 'T t) ->
            fun (x1917 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1916) "items"
                (Ojs.list_to_js Obj.magic x1917)
        let (create : ?items:'T list -> ?is_incomplete:bool -> unit -> 'T t)
          =
          fun ?items:(x1920 : 'T list option) ->
            fun ?is_incomplete:(x1921 : bool option) ->
              fun () ->
                t_of_js Obj.magic
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "CompletionList")
                     (let x1922 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x1920 with
                       | Some x1924 ->
                           ignore
                             (Ojs.call x1922 "push"
                                [|(Ojs.list_to_js Obj.magic x1924)|])
                       | None -> ());
                      (match x1921 with
                       | Some x1923 ->
                           ignore
                             (Ojs.call x1922 "push"
                                [|(Ojs.bool_to_js x1923)|])
                       | None -> ());
                      x1922))
      end
    module CompletionTriggerKind =
      struct
        type t = [ `TriggerCharacter  | `TriggerForIncompleteCompletions ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1928 : Ojs.t) ->
            let x1929 = x1928 in
            match Ojs.int_of_js x1929 with
            | 1 -> `TriggerCharacter
            | 2 -> `TriggerForIncompleteCompletions
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1927 :
              [ `TriggerCharacter  | `TriggerForIncompleteCompletions ])
            ->
            match x1927 with
            | `TriggerCharacter -> Ojs.int_to_js 1
            | `TriggerForIncompleteCompletions -> Ojs.int_to_js 2
      end
    module CompletionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1931 : Ojs.t) -> x1931
        and t_to_js : t -> Ojs.t = fun (x1930 : Ojs.t) -> x1930
        let (trigger_kind : t -> CompletionTriggerKind.t) =
          fun (x1932 : t) ->
            CompletionTriggerKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1932) "triggerKind")
        let (trigger_character : t -> string) =
          fun (x1933 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1933) "triggerCharacter")
      end
    module CompletionItemProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1935 : Ojs.t) -> x1935
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1934 : Ojs.t) -> x1934
        let (provide_completion_items :
          'T t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  context:CompletionContext.t ->
                    ('T CompletionList.t, 'T) or_array ProviderResult.t)
          =
          fun (x1940 : 'T t) ->
            fun ~document:(x1936 : TextDocument.t) ->
              fun ~position:(x1937 : Position.t) ->
                fun ~token:(x1938 : CancellationToken.t) ->
                  fun ~context:(x1939 : CompletionContext.t) ->
                    ProviderResult.t_of_js
                      (fun (x1942 : Ojs.t) ->
                         or_array_of_js
                           (fun (x1943 : Ojs.t) ->
                              CompletionList.t_of_js Obj.magic x1943)
                           Obj.magic x1942)
                      (Ojs.call (t_to_js Obj.magic x1940)
                         "provideCompletionItems"
                         [|(TextDocument.t_to_js x1936);(Position.t_to_js
                                                           x1937);(CancellationToken.t_to_js
                                                                    x1938);(
                           CompletionContext.t_to_js x1939)|])
        let (resolve_completion_item :
          'T t -> item:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1948 : 'T t) ->
            fun ~item:(x1946 : 'T) ->
              fun ~token:(x1947 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1948) "resolveCompletionItem"
                     [|(Obj.magic x1946);(CancellationToken.t_to_js x1947)|])
      end
    module DocumentLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1952 : Ojs.t) -> x1952
        and t_to_js : t -> Ojs.t = fun (x1951 : Ojs.t) -> x1951
        let (range : t -> Range.t) =
          fun (x1953 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1953) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1954 : t) ->
            fun (x1955 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1954) "range"
                (Range.t_to_js x1955)
        let (target : t -> Uri.t) =
          fun (x1956 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1956) "target")
        let (set_target : t -> Uri.t -> unit) =
          fun (x1957 : t) ->
            fun (x1958 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1957) "target" (Uri.t_to_js x1958)
        let (tooltip : t -> string) =
          fun (x1959 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1959) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x1960 : t) ->
            fun (x1961 : string) ->
              Ojs.set_prop_ascii (t_to_js x1960) "tooltip"
                (Ojs.string_to_js x1961)
        let (create : range:Range.t -> ?target:Uri.t -> unit -> t) =
          fun ~range:(x1962 : Range.t) ->
            fun ?target:(x1963 : Uri.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DocumentLink")
                     (let x1964 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1964 "push" [|(Range.t_to_js x1962)|]);
                      (match x1963 with
                       | Some x1965 ->
                           ignore
                             (Ojs.call x1964 "push" [|(Uri.t_to_js x1965)|])
                       | None -> ());
                      x1964))
      end
    module DocumentLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1967 : Ojs.t) -> x1967
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1966 : Ojs.t) -> x1966
        let (provide_document_links :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1970 : 'T t) ->
            fun ~document:(x1968 : TextDocument.t) ->
              fun ~token:(x1969 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1972 : Ojs.t) -> Ojs.list_of_js Obj.magic x1972)
                  (Ojs.call (t_to_js Obj.magic x1970) "provideDocumentLinks"
                     [|(TextDocument.t_to_js x1968);(CancellationToken.t_to_js
                                                       x1969)|])
        let (resolve_document_link :
          'T t -> link:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1976 : 'T t) ->
            fun ~link:(x1974 : 'T) ->
              fun ~token:(x1975 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1976) "resolveDocumentLink"
                     [|(Obj.magic x1974);(CancellationToken.t_to_js x1975)|])
      end
    module Color =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1980 : Ojs.t) -> x1980
        and t_to_js : t -> Ojs.t = fun (x1979 : Ojs.t) -> x1979
        let (red : t -> int) =
          fun (x1981 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1981) "red")
        let (green : t -> int) =
          fun (x1982 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1982) "green")
        let (blue : t -> int) =
          fun (x1983 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1983) "blue")
        let (alpha : t -> int) =
          fun (x1984 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1984) "alpha")
        let (create : red:int -> green:int -> blue:int -> alpha:int -> t) =
          fun ~red:(x1985 : int) ->
            fun ~green:(x1986 : int) ->
              fun ~blue:(x1987 : int) ->
                fun ~alpha:(x1988 : int) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode") "Color")
                       [|(Ojs.int_to_js x1985);(Ojs.int_to_js x1986);(
                         Ojs.int_to_js x1987);(Ojs.int_to_js x1988)|])
      end
    module ColorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1990 : Ojs.t) -> x1990
        and t_to_js : t -> Ojs.t = fun (x1989 : Ojs.t) -> x1989
        let (range : t -> Range.t) =
          fun (x1991 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1991) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1992 : t) ->
            fun (x1993 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1992) "range"
                (Range.t_to_js x1993)
        let (color : t -> Color.t) =
          fun (x1994 : t) ->
            Color.t_of_js (Ojs.get_prop_ascii (t_to_js x1994) "color")
        let (set_color : t -> Color.t -> unit) =
          fun (x1995 : t) ->
            fun (x1996 : Color.t) ->
              Ojs.set_prop_ascii (t_to_js x1995) "color"
                (Color.t_to_js x1996)
        let (create : range:Range.t -> color:Color.t -> t) =
          fun ~range:(x1997 : Range.t) ->
            fun ~color:(x1998 : Color.t) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "ColorInformation")
                   [|(Range.t_to_js x1997);(Color.t_to_js x1998)|])
      end
    module ColorPresentation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2000 : Ojs.t) -> x2000
        and t_to_js : t -> Ojs.t = fun (x1999 : Ojs.t) -> x1999
        let (label : t -> string) =
          fun (x2001 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2001) "label")
        let (set_label : t -> string -> unit) =
          fun (x2002 : t) ->
            fun (x2003 : string) ->
              Ojs.set_prop_ascii (t_to_js x2002) "label"
                (Ojs.string_to_js x2003)
        let (text_edit : t -> TextEdit.t) =
          fun (x2004 : t) ->
            TextEdit.t_of_js (Ojs.get_prop_ascii (t_to_js x2004) "textEdit")
        let (set_text_edit : t -> TextEdit.t -> unit) =
          fun (x2005 : t) ->
            fun (x2006 : TextEdit.t) ->
              Ojs.set_prop_ascii (t_to_js x2005) "textEdit"
                (TextEdit.t_to_js x2006)
        let (additional_text_edits : t -> TextEdit.t list) =
          fun (x2007 : t) ->
            Ojs.list_of_js TextEdit.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2007) "additionalTextEdits")
        let (set_additional_text_edits : t -> TextEdit.t list -> unit) =
          fun (x2009 : t) ->
            fun (x2010 : TextEdit.t list) ->
              Ojs.set_prop_ascii (t_to_js x2009) "additionalTextEdits"
                (Ojs.list_to_js TextEdit.t_to_js x2010)
        let (create : label:string -> t) =
          fun ~label:(x2012 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "ColorPresentation") [|(Ojs.string_to_js x2012)|])
      end
    module DocumentColorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2014 : Ojs.t) -> x2014
        and t_to_js : t -> Ojs.t = fun (x2013 : Ojs.t) -> x2013
        let (provide_document_colors :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t ->
                ColorInformation.t list ProviderResult.t)
          =
          fun (x2017 : t) ->
            fun ~document:(x2015 : TextDocument.t) ->
              fun ~token:(x2016 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2018 : Ojs.t) ->
                     Ojs.list_of_js ColorInformation.t_of_js x2018)
                  (Ojs.call (t_to_js x2017) "provideDocumentColors"
                     [|(TextDocument.t_to_js x2015);(CancellationToken.t_to_js
                                                       x2016)|])
        module Context =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2021 : Ojs.t) -> x2021
            and t_to_js : t -> Ojs.t = fun (x2020 : Ojs.t) -> x2020
            let (document : t -> TextDocument.t) =
              fun (x2022 : t) ->
                TextDocument.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x2022) "document")
            let (set_document : t -> TextDocument.t -> unit) =
              fun (x2023 : t) ->
                fun (x2024 : TextDocument.t) ->
                  Ojs.set_prop_ascii (t_to_js x2023) "document"
                    (TextDocument.t_to_js x2024)
            let (range : t -> Range.t) =
              fun (x2025 : t) ->
                Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2025) "range")
            let (set_range : t -> Range.t -> unit) =
              fun (x2026 : t) ->
                fun (x2027 : Range.t) ->
                  Ojs.set_prop_ascii (t_to_js x2026) "range"
                    (Range.t_to_js x2027)
          end
        let (provide_color_presentations :
          t ->
            color:Color.t ->
              context:Context.t ->
                token:CancellationToken.t ->
                  ColorPresentation.t list ProviderResult.t)
          =
          fun (x2031 : t) ->
            fun ~color:(x2028 : Color.t) ->
              fun ~context:(x2029 : Context.t) ->
                fun ~token:(x2030 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2032 : Ojs.t) ->
                       Ojs.list_of_js ColorPresentation.t_of_js x2032)
                    (Ojs.call (t_to_js x2031) "provideColorPresentations"
                       [|(Color.t_to_js x2028);(Context.t_to_js x2029);(
                         CancellationToken.t_to_js x2030)|])
      end
    module FoldingRangeKind =
      struct
        type t = [ `Imports  | `Region ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2035 : Ojs.t) ->
            let x2036 = x2035 in
            match Ojs.int_of_js x2036 with
            | 2 -> `Imports
            | 3 -> `Region
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2034 : [ `Imports  | `Region ]) ->
            match x2034 with
            | `Imports -> Ojs.int_to_js 2
            | `Region -> Ojs.int_to_js 3
      end
    module FoldingRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2038 : Ojs.t) -> x2038
        and t_to_js : t -> Ojs.t = fun (x2037 : Ojs.t) -> x2037
        let (start : t -> int) =
          fun (x2039 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2039) "start")
        let (set_start : t -> int -> unit) =
          fun (x2040 : t) ->
            fun (x2041 : int) ->
              Ojs.set_prop_ascii (t_to_js x2040) "start"
                (Ojs.int_to_js x2041)
        let (end_ : t -> int) =
          fun (x2042 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2042) "end")
        let (set_end : t -> int -> unit) =
          fun (x2043 : t) ->
            fun (x2044 : int) ->
              Ojs.set_prop_ascii (t_to_js x2043) "end" (Ojs.int_to_js x2044)
        let (kind : t -> FoldingRangeKind.t) =
          fun (x2045 : t) ->
            FoldingRangeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2045) "kind")
        let (set_kind : t -> FoldingRangeKind.t -> unit) =
          fun (x2046 : t) ->
            fun (x2047 : FoldingRangeKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2046) "kind"
                (FoldingRangeKind.t_to_js x2047)
        let (create :
          start:int -> end_:int -> ?kind:FoldingRangeKind.t -> unit -> t) =
          fun ~start:(x2048 : int) ->
            fun ~end_:(x2049 : int) ->
              fun ?kind:(x2050 : FoldingRangeKind.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FoldingRange")
                       (let x2051 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2051 "push" [|(Ojs.int_to_js x2048)|]);
                        ignore
                          (Ojs.call x2051 "push" [|(Ojs.int_to_js x2049)|]);
                        (match x2050 with
                         | Some x2052 ->
                             ignore
                               (Ojs.call x2051 "push"
                                  [|(FoldingRangeKind.t_to_js x2052)|])
                         | None -> ());
                        x2051))
      end
    module FoldingContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2054 : Ojs.t) -> x2054
        and t_to_js : t -> Ojs.t = fun (x2053 : Ojs.t) -> x2053
      end
    module FoldingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2056 : Ojs.t) -> x2056
        and t_to_js : t -> Ojs.t = fun (x2055 : Ojs.t) -> x2055
        let (on_did_change_folding_ranges : t -> unit Event.t) =
          fun (x2057 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x2057) "onDidChangeFoldingRanges")
        let (set_on_did_change_folding_ranges : t -> unit Event.t -> unit) =
          fun (x2059 : t) ->
            fun (x2060 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2059) "onDidChangeFoldingRanges"
                (Event.t_to_js Ojs.unit_to_js x2060)
        let (provide_folding_ranges :
          t ->
            document:TextDocument.t ->
              context:FoldingContext.t ->
                token:CancellationToken.t ->
                  FoldingRange.t list ProviderResult.t)
          =
          fun (x2065 : t) ->
            fun ~document:(x2062 : TextDocument.t) ->
              fun ~context:(x2063 : FoldingContext.t) ->
                fun ~token:(x2064 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2066 : Ojs.t) ->
                       Ojs.list_of_js FoldingRange.t_of_js x2066)
                    (Ojs.call (t_to_js x2065) "provideFoldingRanges"
                       [|(TextDocument.t_to_js x2062);(FoldingContext.t_to_js
                                                         x2063);(CancellationToken.t_to_js
                                                                   x2064)|])
      end
    module SelectionRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2069 : Ojs.t) -> x2069
        and t_to_js : t -> Ojs.t = fun (x2068 : Ojs.t) -> x2068
        let (range : t -> Range.t) =
          fun (x2070 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2070) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2071 : t) ->
            fun (x2072 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2071) "range"
                (Range.t_to_js x2072)
        let (parent : t -> t) =
          fun (x2073 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x2073) "parent")
        let (set_parent : t -> t -> unit) =
          fun (x2074 : t) ->
            fun (x2075 : t) ->
              Ojs.set_prop_ascii (t_to_js x2074) "parent" (t_to_js x2075)
        let (create : range:Range.t -> ?parent:t -> unit -> t) =
          fun ~range:(x2076 : Range.t) ->
            fun ?parent:(x2077 : t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "SelectionRange")
                     (let x2078 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2078 "push" [|(Range.t_to_js x2076)|]);
                      (match x2077 with
                       | Some x2079 ->
                           ignore (Ojs.call x2078 "push" [|(t_to_js x2079)|])
                       | None -> ());
                      x2078))
      end
    module SelectionRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2081 : Ojs.t) -> x2081
        and t_to_js : t -> Ojs.t = fun (x2080 : Ojs.t) -> x2080
        let (provide_selection_ranges :
          t ->
            document:TextDocument.t ->
              positions:Position.t list ->
                token:CancellationToken.t ->
                  SelectionRange.t list ProviderResult.t)
          =
          fun (x2086 : t) ->
            fun ~document:(x2082 : TextDocument.t) ->
              fun ~positions:(x2083 : Position.t list) ->
                fun ~token:(x2085 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2087 : Ojs.t) ->
                       Ojs.list_of_js SelectionRange.t_of_js x2087)
                    (Ojs.call (t_to_js x2086) "provideSelectionRanges"
                       [|(TextDocument.t_to_js x2082);(Ojs.list_to_js
                                                         Position.t_to_js
                                                         x2083);(CancellationToken.t_to_js
                                                                   x2085)|])
      end
    module CallHierarchyItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2090 : Ojs.t) -> x2090
        and t_to_js : t -> Ojs.t = fun (x2089 : Ojs.t) -> x2089
        let (name : t -> string) =
          fun (x2091 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2091) "name")
        let (set_name : t -> string -> unit) =
          fun (x2092 : t) ->
            fun (x2093 : string) ->
              Ojs.set_prop_ascii (t_to_js x2092) "name"
                (Ojs.string_to_js x2093)
        let (kind : t -> SymbolKind.t) =
          fun (x2094 : t) ->
            SymbolKind.t_of_js (Ojs.get_prop_ascii (t_to_js x2094) "kind")
        let (set_kind : t -> SymbolKind.t -> unit) =
          fun (x2095 : t) ->
            fun (x2096 : SymbolKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2095) "kind"
                (SymbolKind.t_to_js x2096)
        let (tags : t -> SymbolTag.t list) =
          fun (x2097 : t) ->
            Ojs.list_of_js SymbolTag.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2097) "tags")
        let (set_tags : t -> SymbolTag.t list -> unit) =
          fun (x2099 : t) ->
            fun (x2100 : SymbolTag.t list) ->
              Ojs.set_prop_ascii (t_to_js x2099) "tags"
                (Ojs.list_to_js SymbolTag.t_to_js x2100)
        let (detail : t -> string) =
          fun (x2102 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2102) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x2103 : t) ->
            fun (x2104 : string) ->
              Ojs.set_prop_ascii (t_to_js x2103) "detail"
                (Ojs.string_to_js x2104)
        let (uri : t -> Uri.t) =
          fun (x2105 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2105) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x2106 : t) ->
            fun (x2107 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2106) "uri" (Uri.t_to_js x2107)
        let (range : t -> Range.t) =
          fun (x2108 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2108) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x2109 : t) ->
            fun (x2110 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2109) "range"
                (Range.t_to_js x2110)
        let (selection_range : t -> Range.t) =
          fun (x2111 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2111) "selectionRange")
        let (set_selection_range : t -> Range.t -> unit) =
          fun (x2112 : t) ->
            fun (x2113 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2112) "selectionRange"
                (Range.t_to_js x2113)
        let (create :
          kind:SymbolKind.t ->
            name:string ->
              detail:string ->
                uri:Uri.t -> range:Range.t -> selection_range:Range.t -> t)
          =
          fun ~kind:(x2114 : SymbolKind.t) ->
            fun ~name:(x2115 : string) ->
              fun ~detail:(x2116 : string) ->
                fun ~uri:(x2117 : Uri.t) ->
                  fun ~range:(x2118 : Range.t) ->
                    fun ~selection_range:(x2119 : Range.t) ->
                      t_of_js
                        (Ojs.new_obj
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "CallHierarchyItem")
                           [|(SymbolKind.t_to_js x2114);(Ojs.string_to_js
                                                           x2115);(Ojs.string_to_js
                                                                    x2116);(
                             Uri.t_to_js x2117);(Range.t_to_js x2118);(
                             Range.t_to_js x2119)|])
      end
    module CallHierarchyIncomingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2121 : Ojs.t) -> x2121
        and t_to_js : t -> Ojs.t = fun (x2120 : Ojs.t) -> x2120
        let (from : t -> CallHierarchyItem.t) =
          fun (x2122 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2122) "from")
        let (set_from : t -> CallHierarchyItem.t -> unit) =
          fun (x2123 : t) ->
            fun (x2124 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2123) "from"
                (CallHierarchyItem.t_to_js x2124)
        let (from_ranges : t -> Range.t list) =
          fun (x2125 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2125) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2127 : t) ->
            fun (x2128 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2127) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2128)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2130 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2131 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyIncomingCall")
                   [|(CallHierarchyItem.t_to_js x2130);(Ojs.list_to_js
                                                          Range.t_to_js x2131)|])
      end
    module CallHierarchyOutgoingCall =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2134 : Ojs.t) -> x2134
        and t_to_js : t -> Ojs.t = fun (x2133 : Ojs.t) -> x2133
        let (to_ : t -> CallHierarchyItem.t) =
          fun (x2135 : t) ->
            CallHierarchyItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2135) "to")
        let (set_to : t -> CallHierarchyItem.t -> unit) =
          fun (x2136 : t) ->
            fun (x2137 : CallHierarchyItem.t) ->
              Ojs.set_prop_ascii (t_to_js x2136) "to"
                (CallHierarchyItem.t_to_js x2137)
        let (from_ranges : t -> Range.t list) =
          fun (x2138 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2138) "fromRanges")
        let (set_from_ranges : t -> Range.t list -> unit) =
          fun (x2140 : t) ->
            fun (x2141 : Range.t list) ->
              Ojs.set_prop_ascii (t_to_js x2140) "fromRanges"
                (Ojs.list_to_js Range.t_to_js x2141)
        let (create :
          item:CallHierarchyItem.t -> from_ranges:Range.t list -> t) =
          fun ~item:(x2143 : CallHierarchyItem.t) ->
            fun ~from_ranges:(x2144 : Range.t list) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "CallHierarchyOutgoingCall")
                   [|(CallHierarchyItem.t_to_js x2143);(Ojs.list_to_js
                                                          Range.t_to_js x2144)|])
      end
    module CallHierarchyProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2147 : Ojs.t) -> x2147
        and t_to_js : t -> Ojs.t = fun (x2146 : Ojs.t) -> x2146
        let (prepare_call_hierarchy :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  (CallHierarchyItem.t, CallHierarchyItem.t) or_array
                    ProviderResult.t)
          =
          fun (x2151 : t) ->
            fun ~document:(x2148 : TextDocument.t) ->
              fun ~position:(x2149 : Position.t) ->
                fun ~token:(x2150 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x2152 : Ojs.t) ->
                       or_array_of_js CallHierarchyItem.t_of_js
                         CallHierarchyItem.t_of_js x2152)
                    (Ojs.call (t_to_js x2151) "prepareCallHierarchy"
                       [|(TextDocument.t_to_js x2148);(Position.t_to_js x2149);(
                         CancellationToken.t_to_js x2150)|])
        let (provide_call_hierarchy_incoming_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyIncomingCall.t list ProviderResult.t)
          =
          fun (x2157 : t) ->
            fun ~item:(x2155 : CallHierarchyItem.t) ->
              fun ~token:(x2156 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2158 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyIncomingCall.t_of_js x2158)
                  (Ojs.call (t_to_js x2157)
                     "provideCallHierarchyIncomingCalls"
                     [|(CallHierarchyItem.t_to_js x2155);(CancellationToken.t_to_js
                                                            x2156)|])
        let (provide_call_hierarchy_outgoing_calls :
          t ->
            item:CallHierarchyItem.t ->
              token:CancellationToken.t ->
                CallHierarchyOutgoingCall.t list ProviderResult.t)
          =
          fun (x2162 : t) ->
            fun ~item:(x2160 : CallHierarchyItem.t) ->
              fun ~token:(x2161 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2163 : Ojs.t) ->
                     Ojs.list_of_js CallHierarchyOutgoingCall.t_of_js x2163)
                  (Ojs.call (t_to_js x2162)
                     "provideCallHierarchyOutgoingCalls"
                     [|(CallHierarchyItem.t_to_js x2160);(CancellationToken.t_to_js
                                                            x2161)|])
      end
    module LinkedEditingRanges =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2166 : Ojs.t) -> x2166
        and t_to_js : t -> Ojs.t = fun (x2165 : Ojs.t) -> x2165
        let (create :
          ranges:Range.t list -> ?word_pattern:regexp -> unit -> t) =
          fun ~ranges:(x2167 : Range.t list) ->
            fun ?word_pattern:(x2168 : regexp option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "LinkedEditingRanges")
                     (let x2169 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2169 "push"
                           [|(Ojs.list_to_js Range.t_to_js x2167)|]);
                      (match x2168 with
                       | Some x2170 ->
                           ignore
                             (Ojs.call x2169 "push" [|(regexp_to_js x2170)|])
                       | None -> ());
                      x2169))
        let (ranges : t -> Range.t list) =
          fun (x2172 : t) ->
            Ojs.list_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2172) "ranges")
        let (word_pattern : t -> regexp) =
          fun (x2174 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2174) "wordPattern")
      end
    module LinkedEditingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2176 : Ojs.t) -> x2176
        and t_to_js : t -> Ojs.t = fun (x2175 : Ojs.t) -> x2175
        let (provide_linked_editing_ranges :
          t ->
            document:TextDocument.t ->
              position:Position.t ->
                token:CancellationToken.t ->
                  LinkedEditingRanges.t ProviderResult.t)
          =
          fun (x2180 : t) ->
            fun ~document:(x2177 : TextDocument.t) ->
              fun ~position:(x2178 : Position.t) ->
                fun ~token:(x2179 : CancellationToken.t) ->
                  ProviderResult.t_of_js LinkedEditingRanges.t_of_js
                    (Ojs.call (t_to_js x2180) "provideLinkedEditingRanges"
                       [|(TextDocument.t_to_js x2177);(Position.t_to_js x2178);(
                         CancellationToken.t_to_js x2179)|])
      end
    module CharacterPair =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2183 : Ojs.t) -> x2183
        and t_to_js : t -> Ojs.t = fun (x2182 : Ojs.t) -> x2182
      end
    module CommentRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2185 : Ojs.t) -> x2185
        and t_to_js : t -> Ojs.t = fun (x2184 : Ojs.t) -> x2184
        let (line_comment : t -> string) =
          fun (x2186 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2186) "lineComment")
        let (set_line_comment : t -> string -> unit) =
          fun (x2187 : t) ->
            fun (x2188 : string) ->
              Ojs.set_prop_ascii (t_to_js x2187) "lineComment"
                (Ojs.string_to_js x2188)
        let (block_comment : t -> CharacterPair.t) =
          fun (x2189 : t) ->
            CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2189) "blockComment")
        let (set_block_comment : t -> CharacterPair.t -> unit) =
          fun (x2190 : t) ->
            fun (x2191 : CharacterPair.t) ->
              Ojs.set_prop_ascii (t_to_js x2190) "blockComment"
                (CharacterPair.t_to_js x2191)
      end
    module IndentationRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2193 : Ojs.t) -> x2193
        and t_to_js : t -> Ojs.t = fun (x2192 : Ojs.t) -> x2192
        let (decrease_indent_pattern : t -> regexp) =
          fun (x2194 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2194) "decreaseIndentPattern")
        let (set_decrease_indent_pattern : t -> regexp -> unit) =
          fun (x2195 : t) ->
            fun (x2196 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2195) "decreaseIndentPattern"
                (regexp_to_js x2196)
        let (increase_indent_pattern : t -> regexp) =
          fun (x2197 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2197) "increaseIndentPattern")
        let (set_increase_indent_pattern : t -> regexp -> unit) =
          fun (x2198 : t) ->
            fun (x2199 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2198) "increaseIndentPattern"
                (regexp_to_js x2199)
        let (indent_next_line_pattern : t -> regexp) =
          fun (x2200 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2200) "indentNextLinePattern")
        let (set_indent_next_line_pattern : t -> regexp -> unit) =
          fun (x2201 : t) ->
            fun (x2202 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2201) "indentNextLinePattern"
                (regexp_to_js x2202)
        let (un_indented_line_pattern : t -> regexp) =
          fun (x2203 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2203) "unIndentedLinePattern")
        let (set_un_indented_line_pattern : t -> regexp -> unit) =
          fun (x2204 : t) ->
            fun (x2205 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2204) "unIndentedLinePattern"
                (regexp_to_js x2205)
      end
    module IndentAction =
      struct
        type t = [ `Indent  | `IndentOutdent  | `Outdent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2207 : Ojs.t) ->
            let x2208 = x2207 in
            match Ojs.int_of_js x2208 with
            | 1 -> `Indent
            | 2 -> `IndentOutdent
            | 3 -> `Outdent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2206 : [ `Indent  | `IndentOutdent  | `Outdent ]) ->
            match x2206 with
            | `Indent -> Ojs.int_to_js 1
            | `IndentOutdent -> Ojs.int_to_js 2
            | `Outdent -> Ojs.int_to_js 3
      end
    module EnterAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2210 : Ojs.t) -> x2210
        and t_to_js : t -> Ojs.t = fun (x2209 : Ojs.t) -> x2209
        let (indent_action : t -> IndentAction.t) =
          fun (x2211 : t) ->
            IndentAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2211) "indentAction")
        let (set_indent_action : t -> IndentAction.t -> unit) =
          fun (x2212 : t) ->
            fun (x2213 : IndentAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2212) "indentAction"
                (IndentAction.t_to_js x2213)
        let (append_text : t -> string) =
          fun (x2214 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2214) "appendText")
        let (set_append_text : t -> string -> unit) =
          fun (x2215 : t) ->
            fun (x2216 : string) ->
              Ojs.set_prop_ascii (t_to_js x2215) "appendText"
                (Ojs.string_to_js x2216)
        let (remove_text : t -> int) =
          fun (x2217 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2217) "removeText")
        let (set_remove_text : t -> int -> unit) =
          fun (x2218 : t) ->
            fun (x2219 : int) ->
              Ojs.set_prop_ascii (t_to_js x2218) "removeText"
                (Ojs.int_to_js x2219)
      end
    module OnEnterRule =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2221 : Ojs.t) -> x2221
        and t_to_js : t -> Ojs.t = fun (x2220 : Ojs.t) -> x2220
        let (before_text : t -> regexp) =
          fun (x2222 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2222) "beforeText")
        let (set_before_text : t -> regexp -> unit) =
          fun (x2223 : t) ->
            fun (x2224 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2223) "beforeText"
                (regexp_to_js x2224)
        let (after_text : t -> regexp) =
          fun (x2225 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2225) "afterText")
        let (set_after_text : t -> regexp -> unit) =
          fun (x2226 : t) ->
            fun (x2227 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2226) "afterText"
                (regexp_to_js x2227)
        let (previous_line_text : t -> regexp) =
          fun (x2228 : t) ->
            regexp_of_js
              (Ojs.get_prop_ascii (t_to_js x2228) "previousLineText")
        let (set_previous_line_text : t -> regexp -> unit) =
          fun (x2229 : t) ->
            fun (x2230 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2229) "previousLineText"
                (regexp_to_js x2230)
        let (action : t -> EnterAction.t) =
          fun (x2231 : t) ->
            EnterAction.t_of_js (Ojs.get_prop_ascii (t_to_js x2231) "action")
        let (set_action : t -> EnterAction.t -> unit) =
          fun (x2232 : t) ->
            fun (x2233 : EnterAction.t) ->
              Ojs.set_prop_ascii (t_to_js x2232) "action"
                (EnterAction.t_to_js x2233)
      end
    module AutoClosingPairs =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2235 : Ojs.t) -> x2235
        and t_to_js : t -> Ojs.t = fun (x2234 : Ojs.t) -> x2234
        let (open_ : t -> string) =
          fun (x2236 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2236) "open")
        let (set_open : t -> string -> unit) =
          fun (x2237 : t) ->
            fun (x2238 : string) ->
              Ojs.set_prop_ascii (t_to_js x2237) "open"
                (Ojs.string_to_js x2238)
        let (close : t -> string) =
          fun (x2239 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2239) "close")
        let (set_close : t -> string -> unit) =
          fun (x2240 : t) ->
            fun (x2241 : string) ->
              Ojs.set_prop_ascii (t_to_js x2240) "close"
                (Ojs.string_to_js x2241)
        let (not_in : t -> string list) =
          fun (x2242 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2242) "notIn")
        let (set_not_in : t -> string list -> unit) =
          fun (x2244 : t) ->
            fun (x2245 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2244) "notIn"
                (Ojs.list_to_js Ojs.string_to_js x2245)
      end
    module CharacterPairSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2248 : Ojs.t) -> x2248
        and t_to_js : t -> Ojs.t = fun (x2247 : Ojs.t) -> x2247
        let (auto_closing_pairs : t -> AutoClosingPairs.t list) =
          fun (x2249 : t) ->
            Ojs.list_of_js AutoClosingPairs.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2249) "autoClosingPairs")
        let (set_auto_closing_pairs : t -> AutoClosingPairs.t list -> unit) =
          fun (x2251 : t) ->
            fun (x2252 : AutoClosingPairs.t list) ->
              Ojs.set_prop_ascii (t_to_js x2251) "autoClosingPairs"
                (Ojs.list_to_js AutoClosingPairs.t_to_js x2252)
      end
    module DocComment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2255 : Ojs.t) -> x2255
        and t_to_js : t -> Ojs.t = fun (x2254 : Ojs.t) -> x2254
        let (scope : t -> string) =
          fun (x2256 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2256) "scope")
        let (set_scope : t -> string -> unit) =
          fun (x2257 : t) ->
            fun (x2258 : string) ->
              Ojs.set_prop_ascii (t_to_js x2257) "scope"
                (Ojs.string_to_js x2258)
        let (open_ : t -> string) =
          fun (x2259 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2259) "open")
        let (set_open : t -> string -> unit) =
          fun (x2260 : t) ->
            fun (x2261 : string) ->
              Ojs.set_prop_ascii (t_to_js x2260) "open"
                (Ojs.string_to_js x2261)
        let (line_start : t -> string) =
          fun (x2262 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2262) "lineStart")
        let (set_line_start : t -> string -> unit) =
          fun (x2263 : t) ->
            fun (x2264 : string) ->
              Ojs.set_prop_ascii (t_to_js x2263) "lineStart"
                (Ojs.string_to_js x2264)
        let (close : t -> string) =
          fun (x2265 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2265) "close")
        let (set_close : t -> string -> unit) =
          fun (x2266 : t) ->
            fun (x2267 : string) ->
              Ojs.set_prop_ascii (t_to_js x2266) "close"
                (Ojs.string_to_js x2267)
      end
    module ElectricCharacterSupport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2269 : Ojs.t) -> x2269
        and t_to_js : t -> Ojs.t = fun (x2268 : Ojs.t) -> x2268
        let (brackets : t -> any) =
          fun (x2270 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x2270) "brackets")
        let (set_brackets : t -> any -> unit) =
          fun (x2271 : t) ->
            fun (x2272 : any) ->
              Ojs.set_prop_ascii (t_to_js x2271) "brackets" (any_to_js x2272)
        let (doc_comment : t -> DocComment.t) =
          fun (x2273 : t) ->
            DocComment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2273) "docComment")
        let (set_doc_comment : t -> DocComment.t -> unit) =
          fun (x2274 : t) ->
            fun (x2275 : DocComment.t) ->
              Ojs.set_prop_ascii (t_to_js x2274) "docComment"
                (DocComment.t_to_js x2275)
      end
    module LanguageConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2277 : Ojs.t) -> x2277
        and t_to_js : t -> Ojs.t = fun (x2276 : Ojs.t) -> x2276
        let (comments : t -> CommentRule.t) =
          fun (x2278 : t) ->
            CommentRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2278) "comments")
        let (set_comments : t -> CommentRule.t -> unit) =
          fun (x2279 : t) ->
            fun (x2280 : CommentRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2279) "comments"
                (CommentRule.t_to_js x2280)
        let (brackets : t -> CharacterPair.t list) =
          fun (x2281 : t) ->
            Ojs.list_of_js CharacterPair.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2281) "brackets")
        let (set_brackets : t -> CharacterPair.t list -> unit) =
          fun (x2283 : t) ->
            fun (x2284 : CharacterPair.t list) ->
              Ojs.set_prop_ascii (t_to_js x2283) "brackets"
                (Ojs.list_to_js CharacterPair.t_to_js x2284)
        let (word_pattern : t -> regexp) =
          fun (x2286 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x2286) "wordPattern")
        let (set_word_pattern : t -> regexp -> unit) =
          fun (x2287 : t) ->
            fun (x2288 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x2287) "wordPattern"
                (regexp_to_js x2288)
        let (indentation_rules : t -> IndentationRule.t) =
          fun (x2289 : t) ->
            IndentationRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2289) "indentationRules")
        let (set_indentation_rules : t -> IndentationRule.t -> unit) =
          fun (x2290 : t) ->
            fun (x2291 : IndentationRule.t) ->
              Ojs.set_prop_ascii (t_to_js x2290) "indentationRules"
                (IndentationRule.t_to_js x2291)
        let (on_enter_rules : t -> OnEnterRule.t list) =
          fun (x2292 : t) ->
            Ojs.list_of_js OnEnterRule.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2292) "onEnterRules")
        let (set_on_enter_rules : t -> OnEnterRule.t list -> unit) =
          fun (x2294 : t) ->
            fun (x2295 : OnEnterRule.t list) ->
              Ojs.set_prop_ascii (t_to_js x2294) "onEnterRules"
                (Ojs.list_to_js OnEnterRule.t_to_js x2295)
        let (electric_character_support : t -> ElectricCharacterSupport.t) =
          fun (x2297 : t) ->
            ElectricCharacterSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2297)
                 "__electricCharacterSupport")
        let (set_electric_character_support :
          t -> ElectricCharacterSupport.t -> unit) =
          fun (x2298 : t) ->
            fun (x2299 : ElectricCharacterSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2298) "__electricCharacterSupport"
                (ElectricCharacterSupport.t_to_js x2299)
        let (character_pair_support : t -> CharacterPairSupport.t) =
          fun (x2300 : t) ->
            CharacterPairSupport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2300) "__characterPairSupport")
        let (set_character_pair_support :
          t -> CharacterPairSupport.t -> unit) =
          fun (x2301 : t) ->
            fun (x2302 : CharacterPairSupport.t) ->
              Ojs.set_prop_ascii (t_to_js x2301) "__characterPairSupport"
                (CharacterPairSupport.t_to_js x2302)
      end
    module ConfigurationTarget =
      struct
        type t = [ `Workspace  | `WorkspaceFolder ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2304 : Ojs.t) ->
            let x2305 = x2304 in
            match Ojs.int_of_js x2305 with
            | 2 -> `Workspace
            | 3 -> `WorkspaceFolder
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2303 : [ `Workspace  | `WorkspaceFolder ]) ->
            match x2303 with
            | `Workspace -> Ojs.int_to_js 2
            | `WorkspaceFolder -> Ojs.int_to_js 3
      end
    module InspectionResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2307 : Ojs.t) -> x2307
        and t_to_js : t -> Ojs.t = fun (x2306 : Ojs.t) -> x2306
        let (key : t -> string) =
          fun (x2308 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2308) "key")
        let (set_key : t -> string -> unit) =
          fun (x2309 : t) ->
            fun (x2310 : string) ->
              Ojs.set_prop_ascii (t_to_js x2309) "key"
                (Ojs.string_to_js x2310)
        let (default : t -> 'T) =
          fun (x2311 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2311) "defaultValue")
        let (set_default : t -> 'T -> unit) =
          fun (x2312 : t) ->
            fun (x2313 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2312) "defaultValue"
                (Obj.magic x2313)
        let (global_value : t -> 'T) =
          fun (x2314 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2314) "globalValue")
        let (set_global_value : t -> 'T -> unit) =
          fun (x2315 : t) ->
            fun (x2316 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2315) "globalValue"
                (Obj.magic x2316)
        let (workspace_value : t -> 'T) =
          fun (x2317 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x2317) "workspaceValue")
        let (set_workspace_value : t -> 'T -> unit) =
          fun (x2318 : t) ->
            fun (x2319 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2318) "workspaceValue"
                (Obj.magic x2319)
        let (workspace_folder_value : t -> 'T) =
          fun (x2320 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2320) "workspaceFolderValue")
        let (set_workspace_folder_value : t -> 'T -> unit) =
          fun (x2321 : t) ->
            fun (x2322 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2321) "workspaceFolderValue"
                (Obj.magic x2322)
        let (default_language_value : t -> 'T) =
          fun (x2323 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2323) "defaultLanguageValue")
        let (set_default_language_value : t -> 'T -> unit) =
          fun (x2324 : t) ->
            fun (x2325 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2324) "defaultLanguageValue"
                (Obj.magic x2325)
        let (global_language_value : t -> 'T) =
          fun (x2326 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2326) "globalLanguageValue")
        let (set_global_language_value : t -> 'T -> unit) =
          fun (x2327 : t) ->
            fun (x2328 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2327) "globalLanguageValue"
                (Obj.magic x2328)
        let (workspace_language_value : t -> 'T) =
          fun (x2329 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2329) "workspaceLanguageValue")
        let (set_workspace_language_value : t -> 'T -> unit) =
          fun (x2330 : t) ->
            fun (x2331 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2330) "workspaceLanguageValue"
                (Obj.magic x2331)
        let (workspace_folder_language_value : t -> 'T) =
          fun (x2332 : t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js x2332)
                 "workspaceFolderLanguageValue")
        let (set_workspace_folder_language_value : t -> 'T -> unit) =
          fun (x2333 : t) ->
            fun (x2334 : 'T) ->
              Ojs.set_prop_ascii (t_to_js x2333)
                "workspaceFolderLanguageValue" (Obj.magic x2334)
        let (language_ids : t -> string list) =
          fun (x2335 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2335) "languageIds")
        let (set_language_ids : t -> string list -> unit) =
          fun (x2337 : t) ->
            fun (x2338 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2337) "languageIds"
                (Ojs.list_to_js Ojs.string_to_js x2338)
      end
    module WorkspaceConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2341 : Ojs.t) -> x2341
        and t_to_js : t -> Ojs.t = fun (x2340 : Ojs.t) -> x2340
        let (get : t -> string -> 'T or_undefined) =
          fun (x2343 : t) ->
            fun (x2342 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2343) "get" [|(Ojs.string_to_js x2342)|])
        let (get' : t -> string -> default:'T -> 'T) =
          fun (x2347 : t) ->
            fun (x2345 : string) ->
              fun ~default:(x2346 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2347) "get"
                     [|(Ojs.string_to_js x2345);(Obj.magic x2346)|])
        let (has : t -> string -> bool) =
          fun (x2349 : t) ->
            fun (x2348 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2349) "has" [|(Ojs.string_to_js x2348)|])
        let (inspect : t -> string -> InspectionResult.t or_undefined) =
          fun (x2351 : t) ->
            fun (x2350 : string) ->
              or_undefined_of_js InspectionResult.t_of_js
                (Ojs.call (t_to_js x2351) "inspect"
                   [|(Ojs.string_to_js x2350)|])
        let (update :
          t ->
            string ->
              any ->
                ?configuration_target:ConfigurationTarget.t or_boolean ->
                  ?override_in_language:bool -> unit -> unit Promise.t)
          =
          fun (x2361 : t) ->
            fun (x2353 : string) ->
              fun (x2354 : any) ->
                fun
                  ?configuration_target:(x2355 :
                                          ConfigurationTarget.t or_boolean
                                            option)
                  ->
                  fun ?override_in_language:(x2356 : bool option) ->
                    fun () ->
                      Promise.t_of_js Ojs.unit_of_js
                        (let x2362 = t_to_js x2361 in
                         Ojs.call (Ojs.get_prop_ascii x2362 "update") "apply"
                           [|x2362;((let x2357 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x2357 "push"
                                          [|(Ojs.string_to_js x2353)|]);
                                     ignore
                                       (Ojs.call x2357 "push"
                                          [|(any_to_js x2354)|]);
                                     (match x2355 with
                                      | Some x2359 ->
                                          ignore
                                            (Ojs.call x2357 "push"
                                               [|(or_boolean_to_js
                                                    ConfigurationTarget.t_to_js
                                                    x2359)|])
                                      | None -> ());
                                     (match x2356 with
                                      | Some x2358 ->
                                          ignore
                                            (Ojs.call x2357 "push"
                                               [|(Ojs.bool_to_js x2358)|])
                                      | None -> ());
                                     x2357))|])
        let (get : t -> string -> any) =
          fun (x2364 : t) ->
            fun (x2365 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2364) (Ojs.string_to_js x2365))
      end
    module LocationLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2367 : Ojs.t) -> x2367
        and t_to_js : t -> Ojs.t = fun (x2366 : Ojs.t) -> x2366
        let (origin_selection_range : t -> Range.t) =
          fun (x2368 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2368) "originSelectionRange")
        let (set_origin_selection_range : t -> Range.t -> unit) =
          fun (x2369 : t) ->
            fun (x2370 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2369) "originSelectionRange"
                (Range.t_to_js x2370)
        let (target_uri : t -> Uri.t) =
          fun (x2371 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2371) "targetUri")
        let (set_target_uri : t -> Uri.t -> unit) =
          fun (x2372 : t) ->
            fun (x2373 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x2372) "targetUri"
                (Uri.t_to_js x2373)
        let (target_range : t -> Range.t) =
          fun (x2374 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x2374) "targetRange")
        let (set_target_range : t -> Range.t -> unit) =
          fun (x2375 : t) ->
            fun (x2376 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2375) "targetRange"
                (Range.t_to_js x2376)
        let (target_selection_range : t -> Range.t) =
          fun (x2377 : t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2377) "targetSelectionRange")
        let (set_target_selection_range : t -> Range.t -> unit) =
          fun (x2378 : t) ->
            fun (x2379 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x2378) "targetSelectionRange"
                (Range.t_to_js x2379)
      end
    module OutputChannel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2381 : Ojs.t) -> x2381
        and t_to_js : t -> Ojs.t = fun (x2380 : Ojs.t) -> x2380
        let (name : t -> string) =
          fun (x2382 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2382) "name")
        let (append : t -> value:string -> unit) =
          fun (x2384 : t) ->
            fun ~value:(x2383 : string) ->
              ignore
                (Ojs.call (t_to_js x2384) "append"
                   [|(Ojs.string_to_js x2383)|])
        let (append_line : t -> value:string -> unit) =
          fun (x2386 : t) ->
            fun ~value:(x2385 : string) ->
              ignore
                (Ojs.call (t_to_js x2386) "appendLine"
                   [|(Ojs.string_to_js x2385)|])
        let (clear : t -> unit) =
          fun (x2387 : t) -> ignore (Ojs.call (t_to_js x2387) "clear" [||])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2391 : t) ->
            fun ?preserve_focus:(x2388 : bool option) ->
              fun () ->
                ignore
                  (let x2392 = t_to_js x2391 in
                   Ojs.call (Ojs.get_prop_ascii x2392 "show") "apply"
                     [|x2392;((let x2389 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2388 with
                                | Some x2390 ->
                                    ignore
                                      (Ojs.call x2389 "push"
                                         [|(Ojs.bool_to_js x2390)|])
                                | None -> ());
                               x2389))|])
        let (show' :
          t -> ?column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x2398 : t) ->
            fun ?column:(x2393 : ViewColumn.t option) ->
              fun ?preserve_focus:(x2394 : bool option) ->
                fun () ->
                  ignore
                    (let x2399 = t_to_js x2398 in
                     Ojs.call (Ojs.get_prop_ascii x2399 "show") "apply"
                       [|x2399;((let x2395 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x2393 with
                                  | Some x2397 ->
                                      ignore
                                        (Ojs.call x2395 "push"
                                           [|(ViewColumn.t_to_js x2397)|])
                                  | None -> ());
                                 (match x2394 with
                                  | Some x2396 ->
                                      ignore
                                        (Ojs.call x2395 "push"
                                           [|(Ojs.bool_to_js x2396)|])
                                  | None -> ());
                                 x2395))|])
        let (hide : t -> unit) =
          fun (x2400 : t) -> ignore (Ojs.call (t_to_js x2400) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2401 : t) -> ignore (Ojs.call (t_to_js x2401) "dispose" [||])
      end
    module AccessibilityInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2403 : Ojs.t) -> x2403
        and t_to_js : t -> Ojs.t = fun (x2402 : Ojs.t) -> x2402
        let (label : t -> string) =
          fun (x2404 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2404) "label")
        let (set_label : t -> string -> unit) =
          fun (x2405 : t) ->
            fun (x2406 : string) ->
              Ojs.set_prop_ascii (t_to_js x2405) "label"
                (Ojs.string_to_js x2406)
        let (role : t -> string) =
          fun (x2407 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2407) "role")
        let (set_role : t -> string -> unit) =
          fun (x2408 : t) ->
            fun (x2409 : string) ->
              Ojs.set_prop_ascii (t_to_js x2408) "role"
                (Ojs.string_to_js x2409)
      end
    module StatusBarAlignment =
      struct
        type t = [ `Right ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2411 : Ojs.t) ->
            let x2412 = x2411 in
            match Ojs.int_of_js x2412 with | 2 -> `Right | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2410 : [ `Right ]) ->
            match x2410 with | `Right -> Ojs.int_to_js 2
      end
    module StatusBarItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2414 : Ojs.t) -> x2414
        and t_to_js : t -> Ojs.t = fun (x2413 : Ojs.t) -> x2413
        let (alignment : t -> StatusBarAlignment.t) =
          fun (x2415 : t) ->
            StatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2415) "alignment")
        let (priority : t -> int) =
          fun (x2416 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2416) "priority")
        let (text : t -> string) =
          fun (x2417 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2417) "text")
        let (set_text : t -> string -> unit) =
          fun (x2418 : t) ->
            fun (x2419 : string) ->
              Ojs.set_prop_ascii (t_to_js x2418) "text"
                (Ojs.string_to_js x2419)
        let (tooltip : t -> string or_undefined) =
          fun (x2420 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2420) "tooltip")
        let (set_tooltip : t -> string or_undefined -> unit) =
          fun (x2422 : t) ->
            fun (x2423 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2422) "tooltip"
                (or_undefined_to_js Ojs.string_to_js x2423)
        let (color : t -> ThemeColor.t or_string or_undefined) =
          fun (x2425 : t) ->
            or_undefined_of_js
              (fun (x2426 : Ojs.t) ->
                 or_string_of_js ThemeColor.t_of_js x2426)
              (Ojs.get_prop_ascii (t_to_js x2425) "color")
        let (set_color : t -> ThemeColor.t or_string or_undefined -> unit) =
          fun (x2428 : t) ->
            fun (x2429 : ThemeColor.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2428) "color"
                (or_undefined_to_js
                   (fun (x2430 : ThemeColor.t or_string) ->
                      or_string_to_js ThemeColor.t_to_js x2430) x2429)
        let (background_color : t -> ThemeColor.t or_undefined) =
          fun (x2432 : t) ->
            or_undefined_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2432) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_undefined -> unit) =
          fun (x2434 : t) ->
            fun (x2435 : ThemeColor.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2434) "backgroundColor"
                (or_undefined_to_js ThemeColor.t_to_js x2435)
        let (command : t -> Command.t or_string or_undefined) =
          fun (x2437 : t) ->
            or_undefined_of_js
              (fun (x2438 : Ojs.t) -> or_string_of_js Command.t_of_js x2438)
              (Ojs.get_prop_ascii (t_to_js x2437) "command")
        let (set_command : t -> Command.t or_string or_undefined -> unit) =
          fun (x2440 : t) ->
            fun (x2441 : Command.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2440) "command"
                (or_undefined_to_js
                   (fun (x2442 : Command.t or_string) ->
                      or_string_to_js Command.t_to_js x2442) x2441)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x2444 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2444) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x2445 : t) ->
            fun (x2446 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x2445) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x2446)
        let (show : t -> unit) =
          fun (x2447 : t) -> ignore (Ojs.call (t_to_js x2447) "show" [||])
        let (hide : t -> unit) =
          fun (x2448 : t) -> ignore (Ojs.call (t_to_js x2448) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2449 : t) -> ignore (Ojs.call (t_to_js x2449) "dispose" [||])
      end
    module Progress =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2451 : Ojs.t) -> x2451
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2450 : Ojs.t) -> x2450
        let (report : 'T t -> value:'T -> unit) =
          fun (x2453 : 'T t) ->
            fun ~value:(x2452 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x2453) "report"
                   [|(Obj.magic x2452)|])
      end
    module TerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2456 : Ojs.t) -> x2456
        and t_to_js : t -> Ojs.t = fun (x2455 : Ojs.t) -> x2455
        let (name : t -> string) =
          fun (x2457 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2457) "name")
        let (set_name : t -> string -> unit) =
          fun (x2458 : t) ->
            fun (x2459 : string) ->
              Ojs.set_prop_ascii (t_to_js x2458) "name"
                (Ojs.string_to_js x2459)
        let (shell_path : t -> string) =
          fun (x2460 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2460) "shellPath")
        let (set_shell_path : t -> string -> unit) =
          fun (x2461 : t) ->
            fun (x2462 : string) ->
              Ojs.set_prop_ascii (t_to_js x2461) "shellPath"
                (Ojs.string_to_js x2462)
        let (shell_args : t -> string list or_string) =
          fun (x2463 : t) ->
            or_string_of_js
              (fun (x2464 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x2464)
              (Ojs.get_prop_ascii (t_to_js x2463) "shellArgs")
        let (set_shell_args : t -> string list or_string -> unit) =
          fun (x2466 : t) ->
            fun (x2467 : string list or_string) ->
              Ojs.set_prop_ascii (t_to_js x2466) "shellArgs"
                (or_string_to_js
                   (fun (x2468 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x2468) x2467)
        let (cwd : t -> Uri.t or_string) =
          fun (x2470 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2470) "cwd")
        let (set_cwd : t -> Uri.t or_string -> unit) =
          fun (x2472 : t) ->
            fun (x2473 : Uri.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2472) "cwd"
                (or_string_to_js Uri.t_to_js x2473)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2476 : Ojs.t) -> x2476
            and t_to_js : t -> Ojs.t = fun (x2475 : Ojs.t) -> x2475
            let (get : t -> string -> string or_null_or_undefined) =
              fun (x2477 : t) ->
                fun (x2478 : string) ->
                  or_null_or_undefined_of_js Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2477) (Ojs.string_to_js x2478))
            let (set : t -> string -> string or_null_or_undefined -> unit) =
              fun (x2480 : t) ->
                fun (x2481 : string) ->
                  fun (x2482 : string or_null_or_undefined) ->
                    Ojs.set_prop (t_to_js x2480) (Ojs.string_to_js x2481)
                      (or_null_or_undefined_to_js Ojs.string_to_js x2482)
          end
        let (env : t -> Env.t) =
          fun (x2484 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2484) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2485 : t) ->
            fun (x2486 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2485) "env" (Env.t_to_js x2486)
        let (strict_env : t -> bool) =
          fun (x2487 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2487) "strictEnv")
        let (set_strict_env : t -> bool -> unit) =
          fun (x2488 : t) ->
            fun (x2489 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2488) "strictEnv"
                (Ojs.bool_to_js x2489)
        let (hide_from_user : t -> bool) =
          fun (x2490 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2490) "hideFromUser")
        let (set_hide_from_user : t -> bool -> unit) =
          fun (x2491 : t) ->
            fun (x2492 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2491) "hideFromUser"
                (Ojs.bool_to_js x2492)
      end
    module TerminalDimensions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2494 : Ojs.t) -> x2494
        and t_to_js : t -> Ojs.t = fun (x2493 : Ojs.t) -> x2493
        let (columns : t -> int) =
          fun (x2495 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2495) "columns")
        let (rows : t -> int) =
          fun (x2496 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2496) "rows")
      end
    module TerminalExitStatus =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2498 : Ojs.t) -> x2498
        and t_to_js : t -> Ojs.t = fun (x2497 : Ojs.t) -> x2497
        let (code : t -> int or_undefined) =
          fun (x2499 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x2499) "code")
      end
    module Pseudoterminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2502 : Ojs.t) -> x2502
        and t_to_js : t -> Ojs.t = fun (x2501 : Ojs.t) -> x2501
        let (on_did_write : t -> string Event.t) =
          fun (x2503 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2503) "onDidWrite")
        let (set_on_did_write : t -> string Event.t -> unit) =
          fun (x2505 : t) ->
            fun (x2506 : string Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2505) "onDidWrite"
                (Event.t_to_js Ojs.string_to_js x2506)
        let (on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t) =
          fun (x2508 : t) ->
            Event.t_of_js
              (fun (x2509 : Ojs.t) ->
                 or_undefined_of_js TerminalDimensions.t_of_js x2509)
              (Ojs.get_prop_ascii (t_to_js x2508) "onDidOverrideDimensions")
        let (set_on_did_override_dimensions :
          t -> TerminalDimensions.t or_undefined Event.t -> unit) =
          fun (x2511 : t) ->
            fun (x2512 : TerminalDimensions.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2511) "onDidOverrideDimensions"
                (Event.t_to_js
                   (fun (x2513 : TerminalDimensions.t or_undefined) ->
                      or_undefined_to_js TerminalDimensions.t_to_js x2513)
                   x2512)
        let (on_did_close : t -> unit or_number Event.t) =
          fun (x2515 : t) ->
            Event.t_of_js
              (fun (x2516 : Ojs.t) -> or_number_of_js Ojs.unit_of_js x2516)
              (Ojs.get_prop_ascii (t_to_js x2515) "onDidClose")
        let (set_on_did_close : t -> unit or_number Event.t -> unit) =
          fun (x2518 : t) ->
            fun (x2519 : unit or_number Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2518) "onDidClose"
                (Event.t_to_js
                   (fun (x2520 : unit or_number) ->
                      or_number_to_js Ojs.unit_to_js x2520) x2519)
        let (open_ :
          t -> initial_dimensions:TerminalDimensions.t or_undefined -> unit)
          =
          fun (x2524 : t) ->
            fun
              ~initial_dimensions:(x2522 : TerminalDimensions.t or_undefined)
              ->
              ignore
                (Ojs.call (t_to_js x2524) "open"
                   [|(or_undefined_to_js TerminalDimensions.t_to_js x2522)|])
        let (close : t -> unit) =
          fun (x2525 : t) -> ignore (Ojs.call (t_to_js x2525) "close" [||])
        let (handle_input : t -> data:string -> unit) =
          fun (x2527 : t) ->
            fun ~data:(x2526 : string) ->
              ignore
                (Ojs.call (t_to_js x2527) "handleInput"
                   [|(Ojs.string_to_js x2526)|])
        let (set_dimensions : t -> dimensions:TerminalDimensions.t -> unit) =
          fun (x2529 : t) ->
            fun ~dimensions:(x2528 : TerminalDimensions.t) ->
              ignore
                (Ojs.call (t_to_js x2529) "setDimensions"
                   [|(TerminalDimensions.t_to_js x2528)|])
      end
    module ExtensionTerminalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2531 : Ojs.t) -> x2531
        and t_to_js : t -> Ojs.t = fun (x2530 : Ojs.t) -> x2530
        let (name : t -> string) =
          fun (x2532 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2532) "name")
        let (set_name : t -> string -> unit) =
          fun (x2533 : t) ->
            fun (x2534 : string) ->
              Ojs.set_prop_ascii (t_to_js x2533) "name"
                (Ojs.string_to_js x2534)
        let (pty : t -> Pseudoterminal.t) =
          fun (x2535 : t) ->
            Pseudoterminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2535) "pty")
        let (set_pty : t -> Pseudoterminal.t -> unit) =
          fun (x2536 : t) ->
            fun (x2537 : Pseudoterminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2536) "pty"
                (Pseudoterminal.t_to_js x2537)
      end
    module Terminal =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2539 : Ojs.t) -> x2539
        and t_to_js : t -> Ojs.t = fun (x2538 : Ojs.t) -> x2538
        let (name : t -> string) =
          fun (x2540 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2540) "name")
        let (process_id : t -> int or_undefined Promise.t) =
          fun (x2541 : t) ->
            Promise.t_of_js
              (fun (x2542 : Ojs.t) -> or_undefined_of_js Ojs.int_of_js x2542)
              (Ojs.get_prop_ascii (t_to_js x2541) "processId")
        let (creation_options :
          t ->
            (ExtensionTerminalOptions.t, TerminalOptions.t) union2 Readonly.t)
          =
          fun (x2544 : t) ->
            Readonly.t_of_js
              (fun (x2545 : Ojs.t) ->
                 union2_of_js ExtensionTerminalOptions.t_of_js
                   TerminalOptions.t_of_js x2545)
              (Ojs.get_prop_ascii (t_to_js x2544) "creationOptions")
        let (exit_status : t -> TerminalExitStatus.t or_undefined) =
          fun (x2548 : t) ->
            or_undefined_of_js TerminalExitStatus.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2548) "exitStatus")
        let (send_text :
          t -> text:string -> ?add_new_line:bool -> unit -> unit) =
          fun (x2554 : t) ->
            fun ~text:(x2550 : string) ->
              fun ?add_new_line:(x2551 : bool option) ->
                fun () ->
                  ignore
                    (let x2555 = t_to_js x2554 in
                     Ojs.call (Ojs.get_prop_ascii x2555 "sendText") "apply"
                       [|x2555;((let x2552 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2552 "push"
                                      [|(Ojs.string_to_js x2550)|]);
                                 (match x2551 with
                                  | Some x2553 ->
                                      ignore
                                        (Ojs.call x2552 "push"
                                           [|(Ojs.bool_to_js x2553)|])
                                  | None -> ());
                                 x2552))|])
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x2559 : t) ->
            fun ?preserve_focus:(x2556 : bool option) ->
              fun () ->
                ignore
                  (let x2560 = t_to_js x2559 in
                   Ojs.call (Ojs.get_prop_ascii x2560 "show") "apply"
                     [|x2560;((let x2557 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2556 with
                                | Some x2558 ->
                                    ignore
                                      (Ojs.call x2557 "push"
                                         [|(Ojs.bool_to_js x2558)|])
                                | None -> ());
                               x2557))|])
        let (hide : t -> unit) =
          fun (x2561 : t) -> ignore (Ojs.call (t_to_js x2561) "hide" [||])
        let (dispose : t -> unit) =
          fun (x2562 : t) -> ignore (Ojs.call (t_to_js x2562) "dispose" [||])
      end
    module TerminalLinkContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2564 : Ojs.t) -> x2564
        and t_to_js : t -> Ojs.t = fun (x2563 : Ojs.t) -> x2563
        let (line : t -> string) =
          fun (x2565 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2565) "line")
        let (set_line : t -> string -> unit) =
          fun (x2566 : t) ->
            fun (x2567 : string) ->
              Ojs.set_prop_ascii (t_to_js x2566) "line"
                (Ojs.string_to_js x2567)
        let (terminal : t -> Terminal.t) =
          fun (x2568 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x2568) "terminal")
        let (set_terminal : t -> Terminal.t -> unit) =
          fun (x2569 : t) ->
            fun (x2570 : Terminal.t) ->
              Ojs.set_prop_ascii (t_to_js x2569) "terminal"
                (Terminal.t_to_js x2570)
      end
    module TerminalLinkProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2572 : Ojs.t) -> x2572
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2571 : Ojs.t) -> x2571
        let (provide_terminal_links :
          'T t ->
            context:TerminalLinkContext.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x2575 : 'T t) ->
            fun ~context:(x2573 : TerminalLinkContext.t) ->
              fun ~token:(x2574 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x2577 : Ojs.t) -> Ojs.list_of_js Obj.magic x2577)
                  (Ojs.call (t_to_js Obj.magic x2575) "provideTerminalLinks"
                     [|(TerminalLinkContext.t_to_js x2573);(CancellationToken.t_to_js
                                                              x2574)|])
        let (handle_terminal_link : 'T t -> link:'T -> unit ProviderResult.t)
          =
          fun (x2580 : 'T t) ->
            fun ~link:(x2579 : 'T) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js Obj.magic x2580) "handleTerminalLink"
                   [|(Obj.magic x2579)|])
      end
    module TerminalLink =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2584 : Ojs.t) -> x2584
        and t_to_js : t -> Ojs.t = fun (x2583 : Ojs.t) -> x2583
        let (start_index : t -> int) =
          fun (x2585 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2585) "startIndex")
        let (set_start_index : t -> int -> unit) =
          fun (x2586 : t) ->
            fun (x2587 : int) ->
              Ojs.set_prop_ascii (t_to_js x2586) "startIndex"
                (Ojs.int_to_js x2587)
        let (length : t -> int) =
          fun (x2588 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2588) "length")
        let (set_length : t -> int -> unit) =
          fun (x2589 : t) ->
            fun (x2590 : int) ->
              Ojs.set_prop_ascii (t_to_js x2589) "length"
                (Ojs.int_to_js x2590)
        let (tooltip : t -> string) =
          fun (x2591 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2591) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2592 : t) ->
            fun (x2593 : string) ->
              Ojs.set_prop_ascii (t_to_js x2592) "tooltip"
                (Ojs.string_to_js x2593)
      end
    module FileDecoration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2595 : Ojs.t) -> x2595
        and t_to_js : t -> Ojs.t = fun (x2594 : Ojs.t) -> x2594
        let (badge : t -> string) =
          fun (x2596 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2596) "badge")
        let (set_badge : t -> string -> unit) =
          fun (x2597 : t) ->
            fun (x2598 : string) ->
              Ojs.set_prop_ascii (t_to_js x2597) "badge"
                (Ojs.string_to_js x2598)
        let (tooltip : t -> string) =
          fun (x2599 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2599) "tooltip")
        let (set_tooltip : t -> string -> unit) =
          fun (x2600 : t) ->
            fun (x2601 : string) ->
              Ojs.set_prop_ascii (t_to_js x2600) "tooltip"
                (Ojs.string_to_js x2601)
        let (color : t -> ThemeColor.t) =
          fun (x2602 : t) ->
            ThemeColor.t_of_js (Ojs.get_prop_ascii (t_to_js x2602) "color")
        let (set_color : t -> ThemeColor.t -> unit) =
          fun (x2603 : t) ->
            fun (x2604 : ThemeColor.t) ->
              Ojs.set_prop_ascii (t_to_js x2603) "color"
                (ThemeColor.t_to_js x2604)
        let (propagate : t -> bool) =
          fun (x2605 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2605) "propagate")
        let (set_propagate : t -> bool -> unit) =
          fun (x2606 : t) ->
            fun (x2607 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2606) "propagate"
                (Ojs.bool_to_js x2607)
        let (create :
          ?badge:string ->
            ?tooltip:string -> ?color:ThemeColor.t -> unit -> t)
          =
          fun ?badge:(x2608 : string option) ->
            fun ?tooltip:(x2609 : string option) ->
              fun ?color:(x2610 : ThemeColor.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "FileDecoration")
                       (let x2611 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x2608 with
                         | Some x2614 ->
                             ignore
                               (Ojs.call x2611 "push"
                                  [|(Ojs.string_to_js x2614)|])
                         | None -> ());
                        (match x2609 with
                         | Some x2613 ->
                             ignore
                               (Ojs.call x2611 "push"
                                  [|(Ojs.string_to_js x2613)|])
                         | None -> ());
                        (match x2610 with
                         | Some x2612 ->
                             ignore
                               (Ojs.call x2611 "push"
                                  [|(ThemeColor.t_to_js x2612)|])
                         | None -> ());
                        x2611))
      end
    module FileDecorationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2616 : Ojs.t) -> x2616
        and t_to_js : t -> Ojs.t = fun (x2615 : Ojs.t) -> x2615
        let (on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t) =
          fun (x2617 : t) ->
            Event.t_of_js
              (fun (x2618 : Ojs.t) ->
                 or_undefined_of_js
                   (fun (x2619 : Ojs.t) ->
                      or_array_of_js Uri.t_of_js Uri.t_of_js x2619) x2618)
              (Ojs.get_prop_ascii (t_to_js x2617)
                 "onDidChangeFileDecorations")
        let (set_on_did_change_file_decorations :
          t -> (Uri.t, Uri.t) or_array or_undefined Event.t -> unit) =
          fun (x2622 : t) ->
            fun (x2623 : (Uri.t, Uri.t) or_array or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2622) "onDidChangeFileDecorations"
                (Event.t_to_js
                   (fun (x2624 : (Uri.t, Uri.t) or_array or_undefined) ->
                      or_undefined_to_js
                        (fun (x2625 : (Uri.t, Uri.t) or_array) ->
                           or_array_to_js Uri.t_to_js Uri.t_to_js x2625)
                        x2624) x2623)
        let (provide_file_decoration :
          t ->
            uri:Uri.t ->
              token:CancellationToken.t -> FileDecoration.t ProviderResult.t)
          =
          fun (x2630 : t) ->
            fun ~uri:(x2628 : Uri.t) ->
              fun ~token:(x2629 : CancellationToken.t) ->
                ProviderResult.t_of_js FileDecoration.t_of_js
                  (Ojs.call (t_to_js x2630) "provideFileDecoration"
                     [|(Uri.t_to_js x2628);(CancellationToken.t_to_js x2629)|])
      end
    module ExtensionKind =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2633 : Ojs.t) ->
            let x2634 = x2633 in
            match Ojs.int_of_js x2634 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2632 : [ `Workspace ]) ->
            match x2632 with | `Workspace -> Ojs.int_to_js 2
      end
    module Extension =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x2636 : Ojs.t) -> x2636
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x2635 : Ojs.t) -> x2635
        let (id : 'T t -> string) =
          fun (x2637 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2637) "id")
        let (extension_uri : 'T t -> Uri.t) =
          fun (x2639 : 'T t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2639) "extensionUri")
        let (extension_path : 'T t -> string) =
          fun (x2641 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2641) "extensionPath")
        let (is_active : 'T t -> bool) =
          fun (x2643 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2643) "isActive")
        let (package_json : 'T t -> any) =
          fun (x2645 : 'T t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2645) "packageJSON")
        let (extension_kind : 'T t -> ExtensionKind.t) =
          fun (x2647 : 'T t) ->
            ExtensionKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2647) "extensionKind")
        let (set_extension_kind : 'T t -> ExtensionKind.t -> unit) =
          fun (x2649 : 'T t) ->
            fun (x2650 : ExtensionKind.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x2649) "extensionKind"
                (ExtensionKind.t_to_js x2650)
        let (exports : 'T t -> 'T) =
          fun (x2652 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x2652) "exports")
        let (activate : 'T t -> 'T Promise.t) =
          fun (x2654 : 'T t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call (t_to_js Obj.magic x2654) "activate" [||])
      end
    module ExtensionMode =
      struct
        type t = [ `Development  | `Test ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2658 : Ojs.t) ->
            let x2659 = x2658 in
            match Ojs.int_of_js x2659 with
            | 2 -> `Development
            | 3 -> `Test
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2657 : [ `Development  | `Test ]) ->
            match x2657 with
            | `Development -> Ojs.int_to_js 2
            | `Test -> Ojs.int_to_js 3
      end
    module Memento =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2661 : Ojs.t) -> x2661
        and t_to_js : t -> Ojs.t = fun (x2660 : Ojs.t) -> x2660
        let (get : t -> key:string -> 'T or_undefined) =
          fun (x2663 : t) ->
            fun ~key:(x2662 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js x2663) "get" [|(Ojs.string_to_js x2662)|])
        let (get' : t -> key:string -> default:'T -> 'T) =
          fun (x2667 : t) ->
            fun ~key:(x2665 : string) ->
              fun ~default:(x2666 : 'T) ->
                Obj.magic
                  (Ojs.call (t_to_js x2667) "get"
                     [|(Ojs.string_to_js x2665);(Obj.magic x2666)|])
        let (update : t -> key:string -> value:any -> unit Promise.t) =
          fun (x2670 : t) ->
            fun ~key:(x2668 : string) ->
              fun ~value:(x2669 : any) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2670) "update"
                     [|(Ojs.string_to_js x2668);(any_to_js x2669)|])
      end
    module SecretStorageChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2673 : Ojs.t) -> x2673
        and t_to_js : t -> Ojs.t = fun (x2672 : Ojs.t) -> x2672
        let (key : t -> string) =
          fun (x2674 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2674) "key")
      end
    module SecretStorage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2676 : Ojs.t) -> x2676
        and t_to_js : t -> Ojs.t = fun (x2675 : Ojs.t) -> x2675
        let (get : t -> key:string -> string or_undefined Promise.t) =
          fun (x2678 : t) ->
            fun ~key:(x2677 : string) ->
              Promise.t_of_js
                (fun (x2679 : Ojs.t) ->
                   or_undefined_of_js Ojs.string_of_js x2679)
                (Ojs.call (t_to_js x2678) "get" [|(Ojs.string_to_js x2677)|])
        let (store : t -> key:string -> value:string -> unit Promise.t) =
          fun (x2683 : t) ->
            fun ~key:(x2681 : string) ->
              fun ~value:(x2682 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x2683) "store"
                     [|(Ojs.string_to_js x2681);(Ojs.string_to_js x2682)|])
        let (delete : t -> key:string -> unit Promise.t) =
          fun (x2686 : t) ->
            fun ~key:(x2685 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x2686) "delete"
                   [|(Ojs.string_to_js x2685)|])
        let (on_did_change : t -> SecretStorageChangeEvent.t Event.t) =
          fun (x2688 : t) ->
            Event.t_of_js SecretStorageChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2688) "onDidChange")
        let (set_on_did_change :
          t -> SecretStorageChangeEvent.t Event.t -> unit) =
          fun (x2690 : t) ->
            fun (x2691 : SecretStorageChangeEvent.t Event.t) ->
              Ojs.set_prop_ascii (t_to_js x2690) "onDidChange"
                (Event.t_to_js SecretStorageChangeEvent.t_to_js x2691)
      end
    module EnvironmentVariableMutatorType =
      struct
        type t = [ `Append  | `Prepend ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2694 : Ojs.t) ->
            let x2695 = x2694 in
            match Ojs.int_of_js x2695 with
            | 2 -> `Append
            | 3 -> `Prepend
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2693 : [ `Append  | `Prepend ]) ->
            match x2693 with
            | `Append -> Ojs.int_to_js 2
            | `Prepend -> Ojs.int_to_js 3
      end
    module EnvironmentVariableMutator =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2697 : Ojs.t) -> x2697
        and t_to_js : t -> Ojs.t = fun (x2696 : Ojs.t) -> x2696
        let (type_ : t -> EnvironmentVariableMutatorType.t) =
          fun (x2698 : t) ->
            EnvironmentVariableMutatorType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2698) "type")
        let (value : t -> string) =
          fun (x2699 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2699) "value")
      end
    module EnvironmentVariableCollection =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2701 : Ojs.t) -> x2701
        and t_to_js : t -> Ojs.t = fun (x2700 : Ojs.t) -> x2700
        let (persistent : t -> bool) =
          fun (x2702 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2702) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x2703 : t) ->
            fun (x2704 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2703) "persistent"
                (Ojs.bool_to_js x2704)
        let (replace : t -> variable:string -> value:string -> unit) =
          fun (x2707 : t) ->
            fun ~variable:(x2705 : string) ->
              fun ~value:(x2706 : string) ->
                ignore
                  (Ojs.call (t_to_js x2707) "replace"
                     [|(Ojs.string_to_js x2705);(Ojs.string_to_js x2706)|])
        let (append : t -> variable:string -> value:string -> unit) =
          fun (x2710 : t) ->
            fun ~variable:(x2708 : string) ->
              fun ~value:(x2709 : string) ->
                ignore
                  (Ojs.call (t_to_js x2710) "append"
                     [|(Ojs.string_to_js x2708);(Ojs.string_to_js x2709)|])
        let (prepend : t -> variable:string -> value:string -> unit) =
          fun (x2713 : t) ->
            fun ~variable:(x2711 : string) ->
              fun ~value:(x2712 : string) ->
                ignore
                  (Ojs.call (t_to_js x2713) "prepend"
                     [|(Ojs.string_to_js x2711);(Ojs.string_to_js x2712)|])
        let (get :
          t -> variable:string -> EnvironmentVariableMutator.t or_undefined)
          =
          fun (x2715 : t) ->
            fun ~variable:(x2714 : string) ->
              or_undefined_of_js EnvironmentVariableMutator.t_of_js
                (Ojs.call (t_to_js x2715) "get" [|(Ojs.string_to_js x2714)|])
        let (for_each :
          t ->
            callback:(variable:string ->
                        mutator:EnvironmentVariableMutator.t ->
                          collection:t -> any)
              -> ?this_arg:any -> unit -> unit)
          =
          fun (x2724 : t) ->
            fun
              ~callback:(x2717 :
                          variable:string ->
                            mutator:EnvironmentVariableMutator.t ->
                              collection:t -> any)
              ->
              fun ?this_arg:(x2718 : any option) ->
                fun () ->
                  ignore
                    (let x2725 = t_to_js x2724 in
                     Ojs.call (Ojs.get_prop_ascii x2725 "forEach") "apply"
                       [|x2725;((let x2719 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2719 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x2721 : Ojs.t) ->
                                              fun (x2722 : Ojs.t) ->
                                                fun (x2723 : Ojs.t) ->
                                                  any_to_js
                                                    (x2717
                                                       ~variable:(Ojs.string_of_js
                                                                    x2721)
                                                       ~mutator:(EnvironmentVariableMutator.t_of_js
                                                                   x2722)
                                                       ~collection:(t_of_js
                                                                    x2723))))|]);
                                 (match x2718 with
                                  | Some x2720 ->
                                      ignore
                                        (Ojs.call x2719 "push"
                                           [|(any_to_js x2720)|])
                                  | None -> ());
                                 x2719))|])
        let (delete : t -> variable:string -> unit) =
          fun (x2727 : t) ->
            fun ~variable:(x2726 : string) ->
              ignore
                (Ojs.call (t_to_js x2727) "delete"
                   [|(Ojs.string_to_js x2726)|])
        let (clear : t -> unit) =
          fun (x2728 : t) -> ignore (Ojs.call (t_to_js x2728) "clear" [||])
      end
    module ExtensionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2730 : Ojs.t) -> x2730
        and t_to_js : t -> Ojs.t = fun (x2729 : Ojs.t) -> x2729
        module Subscription =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2732 : Ojs.t) -> x2732
            and t_to_js : t -> Ojs.t = fun (x2731 : Ojs.t) -> x2731
            let (dispose : t -> any) =
              fun (x2733 : t) ->
                any_of_js (Ojs.call (t_to_js x2733) "dispose" [||])
          end
        module GlobalState =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2735 : Ojs.t) -> x2735
            and t_to_js : t -> Ojs.t = fun (x2734 : Ojs.t) -> x2734
            let (set_keys_for_sync : t -> keys:string list -> unit) =
              fun (x2738 : t) ->
                fun ~keys:(x2736 : string list) ->
                  ignore
                    (Ojs.call (t_to_js x2738) "setKeysForSync"
                       [|(Ojs.list_to_js Ojs.string_to_js x2736)|])
          end
        let (subscriptions : t -> Subscription.t list) =
          fun (x2739 : t) ->
            Ojs.list_of_js Subscription.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2739) "subscriptions")
        let (workspace_state : t -> Memento.t) =
          fun (x2741 : t) ->
            Memento.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2741) "workspaceState")
        let (global_state : t -> (Memento.t, GlobalState.t) intersection2) =
          fun (x2742 : t) ->
            intersection2_of_js Memento.t_of_js GlobalState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2742) "globalState")
        let (secrets : t -> SecretStorage.t) =
          fun (x2745 : t) ->
            SecretStorage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2745) "secrets")
        let (extension_uri : t -> Uri.t) =
          fun (x2746 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2746) "extensionUri")
        let (extension_path : t -> string) =
          fun (x2747 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2747) "extensionPath")
        let (environment_variable_collection :
          t -> EnvironmentVariableCollection.t) =
          fun (x2748 : t) ->
            EnvironmentVariableCollection.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2748)
                 "environmentVariableCollection")
        let (as_absolute_path : t -> relative_path:string -> string) =
          fun (x2750 : t) ->
            fun ~relative_path:(x2749 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x2750) "asAbsolutePath"
                   [|(Ojs.string_to_js x2749)|])
        let (storage_uri : t -> Uri.t or_undefined) =
          fun (x2751 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2751) "storageUri")
        let (storage_path : t -> string or_undefined) =
          fun (x2753 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2753) "storagePath")
        let (global_storage_uri : t -> Uri.t) =
          fun (x2755 : t) ->
            Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2755) "globalStorageUri")
        let (global_storage_path : t -> string) =
          fun (x2756 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2756) "globalStoragePath")
        let (log_uri : t -> Uri.t) =
          fun (x2757 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x2757) "logUri")
        let (log_path : t -> string) =
          fun (x2758 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2758) "logPath")
        let (extension_mode : t -> ExtensionMode.t) =
          fun (x2759 : t) ->
            ExtensionMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2759) "extensionMode")
        let (extension : t -> any Extension.t) =
          fun (x2760 : t) ->
            Extension.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x2760) "extension")
        let subscribe t disposable =
          let subscriptions = Ojs.get (t_to_js t) "subscriptions" in
          let (_ : Ojs.t) =
            Ojs.call subscriptions "push" [|(Disposable.t_to_js disposable)|] in
          ()
      end
    module ColorThemeKind =
      struct
        type t = [ `Dark  | `HighContrast ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2765 : Ojs.t) ->
            let x2766 = x2765 in
            match Ojs.int_of_js x2766 with
            | 2 -> `Dark
            | 3 -> `HighContrast
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2764 : [ `Dark  | `HighContrast ]) ->
            match x2764 with
            | `Dark -> Ojs.int_to_js 2
            | `HighContrast -> Ojs.int_to_js 3
      end
    module ColorTheme =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2768 : Ojs.t) -> x2768
        and t_to_js : t -> Ojs.t = fun (x2767 : Ojs.t) -> x2767
        let (kind : t -> ColorThemeKind.t) =
          fun (x2769 : t) ->
            ColorThemeKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2769) "kind")
      end
    module TaskRevealKind =
      struct
        type t = [ `Silent  | `Never ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2771 : Ojs.t) ->
            let x2772 = x2771 in
            match Ojs.int_of_js x2772 with
            | 2 -> `Silent
            | 3 -> `Never
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2770 : [ `Silent  | `Never ]) ->
            match x2770 with
            | `Silent -> Ojs.int_to_js 2
            | `Never -> Ojs.int_to_js 3
      end
    module TaskPanelKind =
      struct
        type t = [ `Dedicated  | `New ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2774 : Ojs.t) ->
            let x2775 = x2774 in
            match Ojs.int_of_js x2775 with
            | 2 -> `Dedicated
            | 3 -> `New
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2773 : [ `Dedicated  | `New ]) ->
            match x2773 with
            | `Dedicated -> Ojs.int_to_js 2
            | `New -> Ojs.int_to_js 3
      end
    module TaskPresentationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2777 : Ojs.t) -> x2777
        and t_to_js : t -> Ojs.t = fun (x2776 : Ojs.t) -> x2776
        let (reveal : t -> TaskRevealKind.t) =
          fun (x2778 : t) ->
            TaskRevealKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2778) "reveal")
        let (set_reveal : t -> TaskRevealKind.t -> unit) =
          fun (x2779 : t) ->
            fun (x2780 : TaskRevealKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2779) "reveal"
                (TaskRevealKind.t_to_js x2780)
        let (echo : t -> bool) =
          fun (x2781 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2781) "echo")
        let (set_echo : t -> bool -> unit) =
          fun (x2782 : t) ->
            fun (x2783 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2782) "echo"
                (Ojs.bool_to_js x2783)
        let (focus : t -> bool) =
          fun (x2784 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2784) "focus")
        let (set_focus : t -> bool -> unit) =
          fun (x2785 : t) ->
            fun (x2786 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2785) "focus"
                (Ojs.bool_to_js x2786)
        let (panel : t -> TaskPanelKind.t) =
          fun (x2787 : t) ->
            TaskPanelKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2787) "panel")
        let (set_panel : t -> TaskPanelKind.t -> unit) =
          fun (x2788 : t) ->
            fun (x2789 : TaskPanelKind.t) ->
              Ojs.set_prop_ascii (t_to_js x2788) "panel"
                (TaskPanelKind.t_to_js x2789)
        let (show_reuse_message : t -> bool) =
          fun (x2790 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2790) "showReuseMessage")
        let (set_show_reuse_message : t -> bool -> unit) =
          fun (x2791 : t) ->
            fun (x2792 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2791) "showReuseMessage"
                (Ojs.bool_to_js x2792)
        let (clear : t -> bool) =
          fun (x2793 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2793) "clear")
        let (set_clear : t -> bool -> unit) =
          fun (x2794 : t) ->
            fun (x2795 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2794) "clear"
                (Ojs.bool_to_js x2795)
      end
    module TaskGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2797 : Ojs.t) -> x2797
        and t_to_js : t -> Ojs.t = fun (x2796 : Ojs.t) -> x2796
        let (clean : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Clean")
        let (set_clean : t -> unit) =
          fun (x2798 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Clean" (t_to_js x2798)
        let (build : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Build")
        let (set_build : t -> unit) =
          fun (x2799 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Build" (t_to_js x2799)
        let (rebuild : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Rebuild")
        let (set_rebuild : t -> unit) =
          fun (x2800 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Rebuild" (t_to_js x2800)
        let (test : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                 "Test")
        let (set_test : t -> unit) =
          fun (x2801 : t) ->
            Ojs.set_prop_ascii
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                    "vscode") "TaskGroup") "Test" (t_to_js x2801)
        let (create : id:string -> label:string -> t) =
          fun ~id:(x2802 : string) ->
            fun ~label:(x2803 : string) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "TaskGroup")
                   [|(Ojs.string_to_js x2802);(Ojs.string_to_js x2803)|])
      end
    module TaskDefinition =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2805 : Ojs.t) -> x2805
        and t_to_js : t -> Ojs.t = fun (x2804 : Ojs.t) -> x2804
        let (type_ : t -> string) =
          fun (x2806 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2806) "type")
        let (get : t -> string -> any) =
          fun (x2807 : t) ->
            fun (x2808 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x2807) (Ojs.string_to_js x2808))
        let (set : t -> string -> any -> unit) =
          fun (x2809 : t) ->
            fun (x2810 : string) ->
              fun (x2811 : any) ->
                Ojs.set_prop (t_to_js x2809) (Ojs.string_to_js x2810)
                  (any_to_js x2811)
      end
    module ProcessExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2813 : Ojs.t) -> x2813
        and t_to_js : t -> Ojs.t = fun (x2812 : Ojs.t) -> x2812
        let (cwd : t -> string) =
          fun (x2814 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2814) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2815 : t) ->
            fun (x2816 : string) ->
              Ojs.set_prop_ascii (t_to_js x2815) "cwd"
                (Ojs.string_to_js x2816)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2818 : Ojs.t) -> x2818
            and t_to_js : t -> Ojs.t = fun (x2817 : Ojs.t) -> x2817
            let (get : t -> string -> string) =
              fun (x2819 : t) ->
                fun (x2820 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2819) (Ojs.string_to_js x2820))
            let (set : t -> string -> string -> unit) =
              fun (x2821 : t) ->
                fun (x2822 : string) ->
                  fun (x2823 : string) ->
                    Ojs.set_prop (t_to_js x2821) (Ojs.string_to_js x2822)
                      (Ojs.string_to_js x2823)
          end
        let (env : t -> Env.t) =
          fun (x2824 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2824) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2825 : t) ->
            fun (x2826 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2825) "env" (Env.t_to_js x2826)
      end
    module ProcessExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2828 : Ojs.t) -> x2828
        and t_to_js : t -> Ojs.t = fun (x2827 : Ojs.t) -> x2827
        let (create :
          process:string -> ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2829 : string) ->
            fun ?options:(x2830 : ProcessExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ProcessExecution")
                     (let x2831 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2831 "push" [|(Ojs.string_to_js x2829)|]);
                      (match x2830 with
                       | Some x2832 ->
                           ignore
                             (Ojs.call x2831 "push"
                                [|(ProcessExecutionOptions.t_to_js x2832)|])
                       | None -> ());
                      x2831))
        let (create' :
          process:string ->
            args:string list ->
              ?options:ProcessExecutionOptions.t -> unit -> t)
          =
          fun ~process:(x2833 : string) ->
            fun ~args:(x2834 : string list) ->
              fun ?options:(x2835 : ProcessExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ProcessExecution")
                       (let x2836 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2836 "push" [|(Ojs.string_to_js x2833)|]);
                        ignore
                          (Ojs.call x2836 "push"
                             [|(Ojs.list_to_js Ojs.string_to_js x2834)|]);
                        (match x2835 with
                         | Some x2837 ->
                             ignore
                               (Ojs.call x2836 "push"
                                  [|(ProcessExecutionOptions.t_to_js x2837)|])
                         | None -> ());
                        x2836))
        let (process : t -> string) =
          fun (x2839 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2839) "process")
        let (set_process : t -> string -> unit) =
          fun (x2840 : t) ->
            fun (x2841 : string) ->
              Ojs.set_prop_ascii (t_to_js x2840) "process"
                (Ojs.string_to_js x2841)
        let (args : t -> string list) =
          fun (x2842 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2842) "args")
        let (set_args : t -> string list -> unit) =
          fun (x2844 : t) ->
            fun (x2845 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2844) "args"
                (Ojs.list_to_js Ojs.string_to_js x2845)
        let (options : t -> ProcessExecutionOptions.t) =
          fun (x2847 : t) ->
            ProcessExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2847) "options")
        let (set_options : t -> ProcessExecutionOptions.t -> unit) =
          fun (x2848 : t) ->
            fun (x2849 : ProcessExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2848) "options"
                (ProcessExecutionOptions.t_to_js x2849)
      end
    module ShellQuotingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2851 : Ojs.t) -> x2851
        and t_to_js : t -> Ojs.t = fun (x2850 : Ojs.t) -> x2850
        module Escape =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2853 : Ojs.t) -> x2853
            and t_to_js : t -> Ojs.t = fun (x2852 : Ojs.t) -> x2852
            let (escape_char : t -> string) =
              fun (x2854 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2854) "escapeChar")
            let (set_escape_char : t -> string -> unit) =
              fun (x2855 : t) ->
                fun (x2856 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2855) "escapeChar"
                    (Ojs.string_to_js x2856)
            let (chars_to_escape : t -> string) =
              fun (x2857 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x2857) "charsToEscape")
            let (set_chars_to_escape : t -> string -> unit) =
              fun (x2858 : t) ->
                fun (x2859 : string) ->
                  Ojs.set_prop_ascii (t_to_js x2858) "charsToEscape"
                    (Ojs.string_to_js x2859)
          end
        let (escape : t -> Escape.t or_string) =
          fun (x2860 : t) ->
            or_string_of_js Escape.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2860) "escape")
        let (set_escape : t -> Escape.t or_string -> unit) =
          fun (x2862 : t) ->
            fun (x2863 : Escape.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2862) "escape"
                (or_string_to_js Escape.t_to_js x2863)
        let (strong : t -> string) =
          fun (x2865 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2865) "strong")
        let (set_strong : t -> string -> unit) =
          fun (x2866 : t) ->
            fun (x2867 : string) ->
              Ojs.set_prop_ascii (t_to_js x2866) "strong"
                (Ojs.string_to_js x2867)
        let (weak : t -> string) =
          fun (x2868 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2868) "weak")
        let (set_weak : t -> string -> unit) =
          fun (x2869 : t) ->
            fun (x2870 : string) ->
              Ojs.set_prop_ascii (t_to_js x2869) "weak"
                (Ojs.string_to_js x2870)
      end
    module ShellExecutionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2872 : Ojs.t) -> x2872
        and t_to_js : t -> Ojs.t = fun (x2871 : Ojs.t) -> x2871
        let (executable : t -> string) =
          fun (x2873 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2873) "executable")
        let (set_executable : t -> string -> unit) =
          fun (x2874 : t) ->
            fun (x2875 : string) ->
              Ojs.set_prop_ascii (t_to_js x2874) "executable"
                (Ojs.string_to_js x2875)
        let (shell_args : t -> string list) =
          fun (x2876 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2876) "shellArgs")
        let (set_shell_args : t -> string list -> unit) =
          fun (x2878 : t) ->
            fun (x2879 : string list) ->
              Ojs.set_prop_ascii (t_to_js x2878) "shellArgs"
                (Ojs.list_to_js Ojs.string_to_js x2879)
        let (shell_quoting : t -> ShellQuotingOptions.t) =
          fun (x2881 : t) ->
            ShellQuotingOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2881) "shellQuoting")
        let (set_shell_quoting : t -> ShellQuotingOptions.t -> unit) =
          fun (x2882 : t) ->
            fun (x2883 : ShellQuotingOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2882) "shellQuoting"
                (ShellQuotingOptions.t_to_js x2883)
        let (cwd : t -> string) =
          fun (x2884 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2884) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x2885 : t) ->
            fun (x2886 : string) ->
              Ojs.set_prop_ascii (t_to_js x2885) "cwd"
                (Ojs.string_to_js x2886)
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x2888 : Ojs.t) -> x2888
            and t_to_js : t -> Ojs.t = fun (x2887 : Ojs.t) -> x2887
            let (get : t -> string -> string) =
              fun (x2889 : t) ->
                fun (x2890 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x2889) (Ojs.string_to_js x2890))
            let (set : t -> string -> string -> unit) =
              fun (x2891 : t) ->
                fun (x2892 : string) ->
                  fun (x2893 : string) ->
                    Ojs.set_prop (t_to_js x2891) (Ojs.string_to_js x2892)
                      (Ojs.string_to_js x2893)
          end
        let (env : t -> Env.t) =
          fun (x2894 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x2894) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x2895 : t) ->
            fun (x2896 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x2895) "env" (Env.t_to_js x2896)
      end
    module ShellQuoting =
      struct
        type t = [ `Strong  | `Weak ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2898 : Ojs.t) ->
            let x2899 = x2898 in
            match Ojs.int_of_js x2899 with
            | 2 -> `Strong
            | 3 -> `Weak
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2897 : [ `Strong  | `Weak ]) ->
            match x2897 with
            | `Strong -> Ojs.int_to_js 2
            | `Weak -> Ojs.int_to_js 3
      end
    module ShellQuotedString =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2901 : Ojs.t) -> x2901
        and t_to_js : t -> Ojs.t = fun (x2900 : Ojs.t) -> x2900
        let (value : t -> string) =
          fun (x2902 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2902) "value")
        let (set_value : t -> string -> unit) =
          fun (x2903 : t) ->
            fun (x2904 : string) ->
              Ojs.set_prop_ascii (t_to_js x2903) "value"
                (Ojs.string_to_js x2904)
        let (quoting : t -> ShellQuoting.t) =
          fun (x2905 : t) ->
            ShellQuoting.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2905) "quoting")
        let (set_quoting : t -> ShellQuoting.t -> unit) =
          fun (x2906 : t) ->
            fun (x2907 : ShellQuoting.t) ->
              Ojs.set_prop_ascii (t_to_js x2906) "quoting"
                (ShellQuoting.t_to_js x2907)
      end
    module ShellExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2909 : Ojs.t) -> x2909
        and t_to_js : t -> Ojs.t = fun (x2908 : Ojs.t) -> x2908
        let (create :
          command_line:string ->
            ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command_line:(x2910 : string) ->
            fun ?options:(x2911 : ShellExecutionOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "ShellExecution")
                     (let x2912 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2912 "push" [|(Ojs.string_to_js x2910)|]);
                      (match x2911 with
                       | Some x2913 ->
                           ignore
                             (Ojs.call x2912 "push"
                                [|(ShellExecutionOptions.t_to_js x2913)|])
                       | None -> ());
                      x2912))
        let (create' :
          command:ShellQuotedString.t or_string ->
            args:ShellQuotedString.t or_string list ->
              ?options:ShellExecutionOptions.t -> unit -> t)
          =
          fun ~command:(x2914 : ShellQuotedString.t or_string) ->
            fun ~args:(x2915 : ShellQuotedString.t or_string list) ->
              fun ?options:(x2916 : ShellExecutionOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ShellExecution")
                       (let x2917 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x2917 "push"
                             [|(or_string_to_js ShellQuotedString.t_to_js
                                  x2914)|]);
                        ignore
                          (Ojs.call x2917 "push"
                             [|(Ojs.list_to_js
                                  (fun
                                     (x2919 : ShellQuotedString.t or_string)
                                     ->
                                     or_string_to_js
                                       ShellQuotedString.t_to_js x2919) x2915)|]);
                        (match x2916 with
                         | Some x2918 ->
                             ignore
                               (Ojs.call x2917 "push"
                                  [|(ShellExecutionOptions.t_to_js x2918)|])
                         | None -> ());
                        x2917))
        let (command_line : t -> string or_undefined) =
          fun (x2922 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x2922) "commandLine")
        let (set_command_line : t -> string or_undefined -> unit) =
          fun (x2924 : t) ->
            fun (x2925 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x2924) "commandLine"
                (or_undefined_to_js Ojs.string_to_js x2925)
        let (command : t -> ShellQuotedString.t or_string) =
          fun (x2927 : t) ->
            or_string_of_js ShellQuotedString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2927) "command")
        let (set_command : t -> ShellQuotedString.t or_string -> unit) =
          fun (x2929 : t) ->
            fun (x2930 : ShellQuotedString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x2929) "command"
                (or_string_to_js ShellQuotedString.t_to_js x2930)
        let (args : t -> ShellQuotedString.t or_string list) =
          fun (x2932 : t) ->
            Ojs.list_of_js
              (fun (x2933 : Ojs.t) ->
                 or_string_of_js ShellQuotedString.t_of_js x2933)
              (Ojs.get_prop_ascii (t_to_js x2932) "args")
        let (set_args : t -> ShellQuotedString.t or_string list -> unit) =
          fun (x2935 : t) ->
            fun (x2936 : ShellQuotedString.t or_string list) ->
              Ojs.set_prop_ascii (t_to_js x2935) "args"
                (Ojs.list_to_js
                   (fun (x2937 : ShellQuotedString.t or_string) ->
                      or_string_to_js ShellQuotedString.t_to_js x2937) x2936)
        let (options : t -> ShellExecutionOptions.t) =
          fun (x2939 : t) ->
            ShellExecutionOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2939) "options")
        let (set_options : t -> ShellExecutionOptions.t -> unit) =
          fun (x2940 : t) ->
            fun (x2941 : ShellExecutionOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x2940) "options"
                (ShellExecutionOptions.t_to_js x2941)
      end
    module CustomExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2943 : Ojs.t) -> x2943
        and t_to_js : t -> Ojs.t = fun (x2942 : Ojs.t) -> x2942
        let (create :
          callback:(resolvedDefinition:TaskDefinition.t ->
                      Pseudoterminal.t Promise.t)
            -> t)
          =
          fun
            ~callback:(x2944 :
                        resolvedDefinition:TaskDefinition.t ->
                          Pseudoterminal.t Promise.t)
            ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "CustomExecution")
                 [|(Ojs.fun_to_js 1
                      (fun (x2945 : Ojs.t) ->
                         Promise.t_to_js Pseudoterminal.t_to_js
                           (x2944
                              ~resolvedDefinition:(TaskDefinition.t_of_js
                                                     x2945))))|])
      end
    module TaskScope =
      struct
        type t = [ `Workspace ]
        let rec t_of_js : Ojs.t -> t =
          fun (x2948 : Ojs.t) ->
            let x2949 = x2948 in
            match Ojs.int_of_js x2949 with
            | 2 -> `Workspace
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x2947 : [ `Workspace ]) ->
            match x2947 with | `Workspace -> Ojs.int_to_js 2
      end
    module RunOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2951 : Ojs.t) -> x2951
        and t_to_js : t -> Ojs.t = fun (x2950 : Ojs.t) -> x2950
        let (reevaluate_on_rerun : t -> bool) =
          fun (x2952 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x2952) "reevaluateOnRerun")
        let (set_reevaluate_on_rerun : t -> bool -> unit) =
          fun (x2953 : t) ->
            fun (x2954 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2953) "reevaluateOnRerun"
                (Ojs.bool_to_js x2954)
      end
    module Task =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2956 : Ojs.t) -> x2956
        and t_to_js : t -> Ojs.t = fun (x2955 : Ojs.t) -> x2955
        let (create :
          task_definition:TaskDefinition.t ->
            scope:(WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum ->
              name:string ->
                source:string ->
                  ?execution:(CustomExecution.t, ProcessExecution.t,
                    ShellExecution.t) union3 ->
                    ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x2957 : TaskDefinition.t) ->
            fun
              ~scope:(x2958 :
                       (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum)
              ->
              fun ~name:(x2959 : string) ->
                fun ~source:(x2960 : string) ->
                  fun
                    ?execution:(x2961 :
                                 (CustomExecution.t, ProcessExecution.t,
                                   ShellExecution.t) union3 option)
                    ->
                    fun
                      ?problem_matchers:(x2962 :
                                          string list or_string option)
                      ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii
                                   (Ojs.get_prop_ascii Ojs.global
                                      "__LIB__VSCODE__IMPORTS") "vscode")
                                "Task")
                             (let x2963 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x2963 "push"
                                   [|(TaskDefinition.t_to_js x2957)|]);
                              ignore
                                (Ojs.call x2963 "push"
                                   [|(or_enum_to_js WorkspaceFolder.t_to_js
                                        (fun
                                           (x2972 :
                                             [ `Global  | `Workspace ])
                                           ->
                                           match x2972 with
                                           | `Global ->
                                               Ojs.string_to_js "Global"
                                           | `Workspace ->
                                               Ojs.string_to_js "Workspace")
                                        x2958)|]);
                              ignore
                                (Ojs.call x2963 "push"
                                   [|(Ojs.string_to_js x2959)|]);
                              ignore
                                (Ojs.call x2963 "push"
                                   [|(Ojs.string_to_js x2960)|]);
                              (match x2961 with
                               | Some x2967 ->
                                   ignore
                                     (Ojs.call x2963 "push"
                                        [|(union3_to_js
                                             CustomExecution.t_to_js
                                             ProcessExecution.t_to_js
                                             ShellExecution.t_to_js x2967)|])
                               | None -> ());
                              (match x2962 with
                               | Some x2964 ->
                                   ignore
                                     (Ojs.call x2963 "push"
                                        [|(or_string_to_js
                                             (fun (x2965 : string list) ->
                                                Ojs.list_to_js
                                                  Ojs.string_to_js x2965)
                                             x2964)|])
                               | None -> ());
                              x2963))
        let (create' :
          task_definition:TaskDefinition.t ->
            name:string ->
              source:string ->
                ?execution:(ProcessExecution.t, ShellExecution.t) union2 ->
                  ?problem_matchers:string list or_string -> unit -> t)
          =
          fun ~task_definition:(x2973 : TaskDefinition.t) ->
            fun ~name:(x2974 : string) ->
              fun ~source:(x2975 : string) ->
                fun
                  ?execution:(x2976 :
                               (ProcessExecution.t, ShellExecution.t) union2
                                 option)
                  ->
                  fun
                    ?problem_matchers:(x2977 : string list or_string option)
                    ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "Task")
                           (let x2978 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x2978 "push"
                                 [|(TaskDefinition.t_to_js x2973)|]);
                            ignore
                              (Ojs.call x2978 "push"
                                 [|(Ojs.string_to_js x2974)|]);
                            ignore
                              (Ojs.call x2978 "push"
                                 [|(Ojs.string_to_js x2975)|]);
                            (match x2976 with
                             | Some x2982 ->
                                 ignore
                                   (Ojs.call x2978 "push"
                                      [|(union2_to_js
                                           ProcessExecution.t_to_js
                                           ShellExecution.t_to_js x2982)|])
                             | None -> ());
                            (match x2977 with
                             | Some x2979 ->
                                 ignore
                                   (Ojs.call x2978 "push"
                                      [|(or_string_to_js
                                           (fun (x2980 : string list) ->
                                              Ojs.list_to_js Ojs.string_to_js
                                                x2980) x2979)|])
                             | None -> ());
                            x2978))
        let (definition : t -> TaskDefinition.t) =
          fun (x2985 : t) ->
            TaskDefinition.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2985) "definition")
        let (set_definition : t -> TaskDefinition.t -> unit) =
          fun (x2986 : t) ->
            fun (x2987 : TaskDefinition.t) ->
              Ojs.set_prop_ascii (t_to_js x2986) "definition"
                (TaskDefinition.t_to_js x2987)
        let (scope :
          t -> (WorkspaceFolder.t, [ `Global  | `Workspace ]) or_enum) =
          fun (x2988 : t) ->
            or_enum_of_js WorkspaceFolder.t_of_js
              (fun (x2990 : Ojs.t) ->
                 let x2991 = x2990 in
                 match Ojs.int_of_js x2991 with
                 | 1 -> `Global
                 | 2 -> `Workspace
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x2988) "scope")
        let (name : t -> string) =
          fun (x2992 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2992) "name")
        let (set_name : t -> string -> unit) =
          fun (x2993 : t) ->
            fun (x2994 : string) ->
              Ojs.set_prop_ascii (t_to_js x2993) "name"
                (Ojs.string_to_js x2994)
        let (detail : t -> string) =
          fun (x2995 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x2995) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x2996 : t) ->
            fun (x2997 : string) ->
              Ojs.set_prop_ascii (t_to_js x2996) "detail"
                (Ojs.string_to_js x2997)
        let (execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3)
          =
          fun (x2998 : t) ->
            union3_of_js CustomExecution.t_of_js ProcessExecution.t_of_js
              ShellExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2998) "execution")
        let (set_execution :
          t ->
            (CustomExecution.t, ProcessExecution.t, ShellExecution.t) union3
              -> unit)
          =
          fun (x3002 : t) ->
            fun
              (x3003 :
                (CustomExecution.t, ProcessExecution.t, ShellExecution.t)
                  union3)
              ->
              Ojs.set_prop_ascii (t_to_js x3002) "execution"
                (union3_to_js CustomExecution.t_to_js
                   ProcessExecution.t_to_js ShellExecution.t_to_js x3003)
        let (is_background : t -> bool) =
          fun (x3007 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3007) "isBackground")
        let (set_is_background : t -> bool -> unit) =
          fun (x3008 : t) ->
            fun (x3009 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3008) "isBackground"
                (Ojs.bool_to_js x3009)
        let (source : t -> string) =
          fun (x3010 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3010) "source")
        let (set_source : t -> string -> unit) =
          fun (x3011 : t) ->
            fun (x3012 : string) ->
              Ojs.set_prop_ascii (t_to_js x3011) "source"
                (Ojs.string_to_js x3012)
        let (group : t -> TaskGroup.t) =
          fun (x3013 : t) ->
            TaskGroup.t_of_js (Ojs.get_prop_ascii (t_to_js x3013) "group")
        let (set_group : t -> TaskGroup.t -> unit) =
          fun (x3014 : t) ->
            fun (x3015 : TaskGroup.t) ->
              Ojs.set_prop_ascii (t_to_js x3014) "group"
                (TaskGroup.t_to_js x3015)
        let (presentation_options : t -> TaskPresentationOptions.t) =
          fun (x3016 : t) ->
            TaskPresentationOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3016) "presentationOptions")
        let (set_presentation_options :
          t -> TaskPresentationOptions.t -> unit) =
          fun (x3017 : t) ->
            fun (x3018 : TaskPresentationOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3017) "presentationOptions"
                (TaskPresentationOptions.t_to_js x3018)
        let (problem_matchers : t -> string list) =
          fun (x3019 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3019) "problemMatchers")
        let (set_problem_matchers : t -> string list -> unit) =
          fun (x3021 : t) ->
            fun (x3022 : string list) ->
              Ojs.set_prop_ascii (t_to_js x3021) "problemMatchers"
                (Ojs.list_to_js Ojs.string_to_js x3022)
        let (run_options : t -> RunOptions.t) =
          fun (x3024 : t) ->
            RunOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3024) "runOptions")
        let (set_run_options : t -> RunOptions.t -> unit) =
          fun (x3025 : t) ->
            fun (x3026 : RunOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3025) "runOptions"
                (RunOptions.t_to_js x3026)
      end
    module TaskProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3028 : Ojs.t) -> x3028
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3027 : Ojs.t) -> x3027
        let (provide_tasks :
          'T t -> token:CancellationToken.t -> 'T list ProviderResult.t) =
          fun (x3030 : 'T t) ->
            fun ~token:(x3029 : CancellationToken.t) ->
              ProviderResult.t_of_js
                (fun (x3032 : Ojs.t) -> Ojs.list_of_js Obj.magic x3032)
                (Ojs.call (t_to_js Obj.magic x3030) "provideTasks"
                   [|(CancellationToken.t_to_js x3029)|])
        let (resolve_task :
          'T t -> task:'T -> token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x3036 : 'T t) ->
            fun ~task:(x3034 : 'T) ->
              fun ~token:(x3035 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x3036) "resolveTask"
                     [|(Obj.magic x3034);(CancellationToken.t_to_js x3035)|])
      end
    module TaskExecution =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3040 : Ojs.t) -> x3040
        and t_to_js : t -> Ojs.t = fun (x3039 : Ojs.t) -> x3039
        let (task : t -> Task.t) =
          fun (x3041 : t) ->
            Task.t_of_js (Ojs.get_prop_ascii (t_to_js x3041) "task")
        let (set_task : t -> Task.t -> unit) =
          fun (x3042 : t) ->
            fun (x3043 : Task.t) ->
              Ojs.set_prop_ascii (t_to_js x3042) "task" (Task.t_to_js x3043)
        let (terminate : t -> unit) =
          fun (x3044 : t) ->
            ignore (Ojs.call (t_to_js x3044) "terminate" [||])
      end
    module TaskStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3046 : Ojs.t) -> x3046
        and t_to_js : t -> Ojs.t = fun (x3045 : Ojs.t) -> x3045
        let (execution : t -> TaskExecution.t) =
          fun (x3047 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3047) "execution")
      end
    module TaskEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3049 : Ojs.t) -> x3049
        and t_to_js : t -> Ojs.t = fun (x3048 : Ojs.t) -> x3048
        let (execution : t -> TaskExecution.t) =
          fun (x3050 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3050) "execution")
      end
    module TaskProcessStartEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3052 : Ojs.t) -> x3052
        and t_to_js : t -> Ojs.t = fun (x3051 : Ojs.t) -> x3051
        let (execution : t -> TaskExecution.t) =
          fun (x3053 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3053) "execution")
        let (process_id : t -> int) =
          fun (x3054 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3054) "processId")
      end
    module TaskProcessEndEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3056 : Ojs.t) -> x3056
        and t_to_js : t -> Ojs.t = fun (x3055 : Ojs.t) -> x3055
        let (execution : t -> TaskExecution.t) =
          fun (x3057 : t) ->
            TaskExecution.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3057) "execution")
        let (exit_code : t -> int or_undefined) =
          fun (x3058 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3058) "exitCode")
      end
    module TaskFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3061 : Ojs.t) -> x3061
        and t_to_js : t -> Ojs.t = fun (x3060 : Ojs.t) -> x3060
        let (version : t -> string) =
          fun (x3062 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3062) "version")
        let (set_version : t -> string -> unit) =
          fun (x3063 : t) ->
            fun (x3064 : string) ->
              Ojs.set_prop_ascii (t_to_js x3063) "version"
                (Ojs.string_to_js x3064)
        let (type_ : t -> string) =
          fun (x3065 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3065) "type")
        let (set_type : t -> string -> unit) =
          fun (x3066 : t) ->
            fun (x3067 : string) ->
              Ojs.set_prop_ascii (t_to_js x3066) "type"
                (Ojs.string_to_js x3067)
      end
    module Tasks =
      struct
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x3068 : string) ->
            fun ~provider:(x3069 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x3068);(TaskProvider.t_to_js
                                                 Task.t_to_js x3069)|])
        let (fetch_tasks :
          ?filter:TaskFilter.t -> unit -> Task.t list Promise.t) =
          fun ?filter:(x3071 : TaskFilter.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3075 : Ojs.t) -> Ojs.list_of_js Task.t_of_js x3075)
                (let x3074 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "tasks" in
                 Ojs.call (Ojs.get_prop_ascii x3074 "fetchTasks") "apply"
                   [|x3074;((let x3072 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3071 with
                              | Some x3073 ->
                                  ignore
                                    (Ojs.call x3072 "push"
                                       [|(TaskFilter.t_to_js x3073)|])
                              | None -> ());
                             x3072))|])
        let (execute_task : task:Task.t -> TaskExecution.t Promise.t) =
          fun ~task:(x3077 : Task.t) ->
            Promise.t_of_js TaskExecution.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "tasks")
                 "executeTask" [|(Task.t_to_js x3077)|])
        let (task_executions : TaskExecution.t list) =
          Ojs.list_of_js TaskExecution.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "taskExecutions")
        let (on_did_start_task : TaskStartEvent.t Event.t) =
          Event.t_of_js TaskStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTask")
        let (on_did_end_task : TaskEndEvent.t Event.t) =
          Event.t_of_js TaskEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTask")
        let (on_did_start_task_process : TaskProcessStartEvent.t Event.t) =
          Event.t_of_js TaskProcessStartEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidStartTaskProcess")
        let (on_did_end_task_process : TaskProcessEndEvent.t Event.t) =
          Event.t_of_js TaskProcessEndEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "tasks") "onDidEndTaskProcess")
      end
    module FileType =
      struct
        type t = [ `File  | `Directory  | `SymbolicLink ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3085 : Ojs.t) ->
            let x3086 = x3085 in
            match Ojs.int_of_js x3086 with
            | 1 -> `File
            | 2 -> `Directory
            | 64 -> `SymbolicLink
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3084 : [ `File  | `Directory  | `SymbolicLink ]) ->
            match x3084 with
            | `File -> Ojs.int_to_js 1
            | `Directory -> Ojs.int_to_js 2
            | `SymbolicLink -> Ojs.int_to_js 64
      end
    module FileStat =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3088 : Ojs.t) -> x3088
        and t_to_js : t -> Ojs.t = fun (x3087 : Ojs.t) -> x3087
        let (type_ : t -> FileType.t) =
          fun (x3089 : t) ->
            FileType.t_of_js (Ojs.get_prop_ascii (t_to_js x3089) "type")
        let (set_type : t -> FileType.t -> unit) =
          fun (x3090 : t) ->
            fun (x3091 : FileType.t) ->
              Ojs.set_prop_ascii (t_to_js x3090) "type"
                (FileType.t_to_js x3091)
        let (ctime : t -> int) =
          fun (x3092 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3092) "ctime")
        let (set_ctime : t -> int -> unit) =
          fun (x3093 : t) ->
            fun (x3094 : int) ->
              Ojs.set_prop_ascii (t_to_js x3093) "ctime"
                (Ojs.int_to_js x3094)
        let (mtime : t -> int) =
          fun (x3095 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3095) "mtime")
        let (set_mtime : t -> int -> unit) =
          fun (x3096 : t) ->
            fun (x3097 : int) ->
              Ojs.set_prop_ascii (t_to_js x3096) "mtime"
                (Ojs.int_to_js x3097)
        let (size : t -> int) =
          fun (x3098 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3098) "size")
        let (set_size : t -> int -> unit) =
          fun (x3099 : t) ->
            fun (x3100 : int) ->
              Ojs.set_prop_ascii (t_to_js x3099) "size" (Ojs.int_to_js x3100)
      end
    module FileSystemError =
      struct
        include struct include Error end
        let (file_not_found : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3101 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3105 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3105 "FileNotFound") "apply"
                   [|x3105;((let x3102 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3101 with
                              | Some x3103 ->
                                  ignore
                                    (Ojs.call x3102 "push"
                                       [|(or_string_to_js Uri.t_to_js x3103)|])
                              | None -> ());
                             x3102))|])
        let (file_exists : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3106 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3110 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3110 "FileExists") "apply"
                   [|x3110;((let x3107 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3106 with
                              | Some x3108 ->
                                  ignore
                                    (Ojs.call x3107 "push"
                                       [|(or_string_to_js Uri.t_to_js x3108)|])
                              | None -> ());
                             x3107))|])
        let (file_not_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3111 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3115 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3115 "FileNotADirectory")
                   "apply"
                   [|x3115;((let x3112 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3111 with
                              | Some x3113 ->
                                  ignore
                                    (Ojs.call x3112 "push"
                                       [|(or_string_to_js Uri.t_to_js x3113)|])
                              | None -> ());
                             x3112))|])
        let (file_is_a_directory :
          ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3116 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3120 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3120 "FileIsADirectory")
                   "apply"
                   [|x3120;((let x3117 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3116 with
                              | Some x3118 ->
                                  ignore
                                    (Ojs.call x3117 "push"
                                       [|(or_string_to_js Uri.t_to_js x3118)|])
                              | None -> ());
                             x3117))|])
        let (no_permissions : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3121 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3125 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3125 "NoPermissions") "apply"
                   [|x3125;((let x3122 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3121 with
                              | Some x3123 ->
                                  ignore
                                    (Ojs.call x3122 "push"
                                       [|(or_string_to_js Uri.t_to_js x3123)|])
                              | None -> ());
                             x3122))|])
        let (unavailable : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3126 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (let x3130 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "FileSystemError" in
                 Ojs.call (Ojs.get_prop_ascii x3130 "Unavailable") "apply"
                   [|x3130;((let x3127 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3126 with
                              | Some x3128 ->
                                  ignore
                                    (Ojs.call x3127 "push"
                                       [|(or_string_to_js Uri.t_to_js x3128)|])
                              | None -> ());
                             x3127))|])
        let (create : ?message_or_uri:Uri.t or_string -> unit -> t) =
          fun ?message_or_uri:(x3131 : Uri.t or_string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "FileSystemError")
                   (let x3132 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x3131 with
                     | Some x3133 ->
                         ignore
                           (Ojs.call x3132 "push"
                              [|(or_string_to_js Uri.t_to_js x3133)|])
                     | None -> ());
                    x3132))
        let (code : t -> string) =
          fun (x3135 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3135) "code")
      end
    module FileChangeType =
      struct
        type t = [ `Created  | `Deleted ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3137 : Ojs.t) ->
            let x3138 = x3137 in
            match Ojs.int_of_js x3138 with
            | 2 -> `Created
            | 3 -> `Deleted
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3136 : [ `Created  | `Deleted ]) ->
            match x3136 with
            | `Created -> Ojs.int_to_js 2
            | `Deleted -> Ojs.int_to_js 3
      end
    module FileChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3140 : Ojs.t) -> x3140
        and t_to_js : t -> Ojs.t = fun (x3139 : Ojs.t) -> x3139
        let (type_ : t -> FileChangeType.t) =
          fun (x3141 : t) ->
            FileChangeType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3141) "type")
        let (uri : t -> Uri.t) =
          fun (x3142 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3142) "uri")
      end
    module FileSystemProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3144 : Ojs.t) -> x3144
        and t_to_js : t -> Ojs.t = fun (x3143 : Ojs.t) -> x3143
        let (on_did_change_file : t -> FileChangeEvent.t list Event.t) =
          fun (x3145 : t) ->
            Event.t_of_js
              (fun (x3146 : Ojs.t) ->
                 Ojs.list_of_js FileChangeEvent.t_of_js x3146)
              (Ojs.get_prop_ascii (t_to_js x3145) "onDidChangeFile")
        module WatchOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3149 : Ojs.t) -> x3149
            and t_to_js : t -> Ojs.t = fun (x3148 : Ojs.t) -> x3148
            let (recursive : t -> bool) =
              fun (x3150 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3150) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3151 : t) ->
                fun (x3152 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3151) "recursive"
                    (Ojs.bool_to_js x3152)
            let (excludes : t -> string list) =
              fun (x3153 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3153) "excludes")
            let (set_excludes : t -> string list -> unit) =
              fun (x3155 : t) ->
                fun (x3156 : string list) ->
                  Ojs.set_prop_ascii (t_to_js x3155) "excludes"
                    (Ojs.list_to_js Ojs.string_to_js x3156)
          end
        let (watch :
          t -> uri:Uri.t -> options:WatchOptions.t -> Disposable.t) =
          fun (x3160 : t) ->
            fun ~uri:(x3158 : Uri.t) ->
              fun ~options:(x3159 : WatchOptions.t) ->
                Disposable.t_of_js
                  (Ojs.call (t_to_js x3160) "watch"
                     [|(Uri.t_to_js x3158);(WatchOptions.t_to_js x3159)|])
        let (stat :
          t -> uri:Uri.t -> (FileStat.t, FileStat.t Promise.t) union2) =
          fun (x3162 : t) ->
            fun ~uri:(x3161 : Uri.t) ->
              union2_of_js FileStat.t_of_js
                (fun (x3164 : Ojs.t) ->
                   Promise.t_of_js FileStat.t_of_js x3164)
                (Ojs.call (t_to_js x3162) "stat" [|(Uri.t_to_js x3161)|])
        let (read_directory :
          t ->
            uri:Uri.t ->
              ((string * FileType.t) list Promise.t, (string * FileType.t))
                or_array)
          =
          fun (x3167 : t) ->
            fun ~uri:(x3166 : Uri.t) ->
              or_array_of_js
                (fun (x3168 : Ojs.t) ->
                   Promise.t_of_js
                     (fun (x3169 : Ojs.t) ->
                        Ojs.list_of_js
                          (fun (x3170 : Ojs.t) ->
                             let x3171 = x3170 in
                             ((Ojs.string_of_js (Ojs.array_get x3171 0)),
                               (FileType.t_of_js (Ojs.array_get x3171 1))))
                          x3169) x3168)
                (fun (x3172 : Ojs.t) ->
                   let x3173 = x3172 in
                   ((Ojs.string_of_js (Ojs.array_get x3173 0)),
                     (FileType.t_of_js (Ojs.array_get x3173 1))))
                (Ojs.call (t_to_js x3167) "readDirectory"
                   [|(Uri.t_to_js x3166)|])
        let (create_directory :
          t -> uri:Uri.t -> (unit, unit Promise.t) union2) =
          fun (x3175 : t) ->
            fun ~uri:(x3174 : Uri.t) ->
              union2_of_js Ojs.unit_of_js
                (fun (x3177 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3177)
                (Ojs.call (t_to_js x3175) "createDirectory"
                   [|(Uri.t_to_js x3174)|])
        let (read_file :
          t -> uri:Uri.t -> (Uint8Array.t, Uint8Array.t Promise.t) union2) =
          fun (x3180 : t) ->
            fun ~uri:(x3179 : Uri.t) ->
              union2_of_js Uint8Array.t_of_js
                (fun (x3182 : Ojs.t) ->
                   Promise.t_of_js Uint8Array.t_of_js x3182)
                (Ojs.call (t_to_js x3180) "readFile" [|(Uri.t_to_js x3179)|])
        module WriteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3185 : Ojs.t) -> x3185
            and t_to_js : t -> Ojs.t = fun (x3184 : Ojs.t) -> x3184
            let (create : t -> bool) =
              fun (x3186 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3186) "create")
            let (set_create : t -> bool -> unit) =
              fun (x3187 : t) ->
                fun (x3188 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3187) "create"
                    (Ojs.bool_to_js x3188)
            let (overwrite : t -> bool) =
              fun (x3189 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3189) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3190 : t) ->
                fun (x3191 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3190) "overwrite"
                    (Ojs.bool_to_js x3191)
          end
        let (write_file :
          t ->
            uri:Uri.t ->
              content:Uint8Array.t ->
                options:WriteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3195 : t) ->
            fun ~uri:(x3192 : Uri.t) ->
              fun ~content:(x3193 : Uint8Array.t) ->
                fun ~options:(x3194 : WriteFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3197 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3197)
                    (Ojs.call (t_to_js x3195) "writeFile"
                       [|(Uri.t_to_js x3192);(Uint8Array.t_to_js x3193);(
                         WriteFileOptions.t_to_js x3194)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3200 : Ojs.t) -> x3200
            and t_to_js : t -> Ojs.t = fun (x3199 : Ojs.t) -> x3199
            let (recursive : t -> bool) =
              fun (x3201 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3201) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3202 : t) ->
                fun (x3203 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3202) "recursive"
                    (Ojs.bool_to_js x3203)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              options:DeleteFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3206 : t) ->
            fun ~uri:(x3204 : Uri.t) ->
              fun ~options:(x3205 : DeleteFileOptions.t) ->
                union2_of_js Ojs.unit_of_js
                  (fun (x3208 : Ojs.t) ->
                     Promise.t_of_js Ojs.unit_of_js x3208)
                  (Ojs.call (t_to_js x3206) "delete"
                     [|(Uri.t_to_js x3204);(DeleteFileOptions.t_to_js x3205)|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3211 : Ojs.t) -> x3211
            and t_to_js : t -> Ojs.t = fun (x3210 : Ojs.t) -> x3210
            let (overwrite : t -> bool) =
              fun (x3212 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3212) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3213 : t) ->
                fun (x3214 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3213) "overwrite"
                    (Ojs.bool_to_js x3214)
          end
        let (rename :
          t ->
            old_uri:Uri.t ->
              new_uri:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3218 : t) ->
            fun ~old_uri:(x3215 : Uri.t) ->
              fun ~new_uri:(x3216 : Uri.t) ->
                fun ~options:(x3217 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3220 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3220)
                    (Ojs.call (t_to_js x3218) "rename"
                       [|(Uri.t_to_js x3215);(Uri.t_to_js x3216);(RenameFileOptions.t_to_js
                                                                    x3217)|])
        let (copy :
          t ->
            source:Uri.t ->
              destination:Uri.t ->
                options:RenameFileOptions.t -> (unit, unit Promise.t) union2)
          =
          fun (x3225 : t) ->
            fun ~source:(x3222 : Uri.t) ->
              fun ~destination:(x3223 : Uri.t) ->
                fun ~options:(x3224 : RenameFileOptions.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3227 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3227)
                    (Ojs.call (t_to_js x3225) "copy"
                       [|(Uri.t_to_js x3222);(Uri.t_to_js x3223);(RenameFileOptions.t_to_js
                                                                    x3224)|])
      end
    module FileSystem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3230 : Ojs.t) -> x3230
        and t_to_js : t -> Ojs.t = fun (x3229 : Ojs.t) -> x3229
        let (stat : t -> uri:Uri.t -> FileStat.t Promise.t) =
          fun (x3232 : t) ->
            fun ~uri:(x3231 : Uri.t) ->
              Promise.t_of_js FileStat.t_of_js
                (Ojs.call (t_to_js x3232) "stat" [|(Uri.t_to_js x3231)|])
        let (read_directory :
          t -> uri:Uri.t -> (string * FileType.t) list Promise.t) =
          fun (x3235 : t) ->
            fun ~uri:(x3234 : Uri.t) ->
              Promise.t_of_js
                (fun (x3236 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x3237 : Ojs.t) ->
                        let x3238 = x3237 in
                        ((Ojs.string_of_js (Ojs.array_get x3238 0)),
                          (FileType.t_of_js (Ojs.array_get x3238 1)))) x3236)
                (Ojs.call (t_to_js x3235) "readDirectory"
                   [|(Uri.t_to_js x3234)|])
        let (create_directory : t -> uri:Uri.t -> unit Promise.t) =
          fun (x3240 : t) ->
            fun ~uri:(x3239 : Uri.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3240) "createDirectory"
                   [|(Uri.t_to_js x3239)|])
        let (read_file : t -> uri:Uri.t -> Uint8Array.t Promise.t) =
          fun (x3243 : t) ->
            fun ~uri:(x3242 : Uri.t) ->
              Promise.t_of_js Uint8Array.t_of_js
                (Ojs.call (t_to_js x3243) "readFile" [|(Uri.t_to_js x3242)|])
        let (write_file :
          t -> uri:Uri.t -> content:Uint8Array.t -> unit Promise.t) =
          fun (x3247 : t) ->
            fun ~uri:(x3245 : Uri.t) ->
              fun ~content:(x3246 : Uint8Array.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x3247) "writeFile"
                     [|(Uri.t_to_js x3245);(Uint8Array.t_to_js x3246)|])
        module DeleteFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3250 : Ojs.t) -> x3250
            and t_to_js : t -> Ojs.t = fun (x3249 : Ojs.t) -> x3249
            let (recursive : t -> bool) =
              fun (x3251 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3251) "recursive")
            let (set_recursive : t -> bool -> unit) =
              fun (x3252 : t) ->
                fun (x3253 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3252) "recursive"
                    (Ojs.bool_to_js x3253)
            let (use_trash : t -> bool) =
              fun (x3254 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3254) "useTrash")
            let (set_use_trash : t -> bool -> unit) =
              fun (x3255 : t) ->
                fun (x3256 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3255) "useTrash"
                    (Ojs.bool_to_js x3256)
          end
        let (delete :
          t ->
            uri:Uri.t ->
              ?options:DeleteFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3261 : t) ->
            fun ~uri:(x3257 : Uri.t) ->
              fun ?options:(x3258 : DeleteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x3262 = t_to_js x3261 in
                     Ojs.call (Ojs.get_prop_ascii x3262 "delete") "apply"
                       [|x3262;((let x3259 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3259 "push"
                                      [|(Uri.t_to_js x3257)|]);
                                 (match x3258 with
                                  | Some x3260 ->
                                      ignore
                                        (Ojs.call x3259 "push"
                                           [|(DeleteFileOptions.t_to_js x3260)|])
                                  | None -> ());
                                 x3259))|])
        module RenameFileOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3265 : Ojs.t) -> x3265
            and t_to_js : t -> Ojs.t = fun (x3264 : Ojs.t) -> x3264
            let (overwrite : t -> bool) =
              fun (x3266 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3266) "overwrite")
            let (set_overwrite : t -> bool -> unit) =
              fun (x3267 : t) ->
                fun (x3268 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3267) "overwrite"
                    (Ojs.bool_to_js x3268)
          end
        let (rename :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3274 : t) ->
            fun ~source:(x3269 : Uri.t) ->
              fun ~target:(x3270 : Uri.t) ->
                fun ?options:(x3271 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3275 = t_to_js x3274 in
                       Ojs.call (Ojs.get_prop_ascii x3275 "rename") "apply"
                         [|x3275;((let x3272 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3272 "push"
                                        [|(Uri.t_to_js x3269)|]);
                                   ignore
                                     (Ojs.call x3272 "push"
                                        [|(Uri.t_to_js x3270)|]);
                                   (match x3271 with
                                    | Some x3273 ->
                                        ignore
                                          (Ojs.call x3272 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3273)|])
                                    | None -> ());
                                   x3272))|])
        let (copy :
          t ->
            source:Uri.t ->
              target:Uri.t ->
                ?options:RenameFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x3282 : t) ->
            fun ~source:(x3277 : Uri.t) ->
              fun ~target:(x3278 : Uri.t) ->
                fun ?options:(x3279 : RenameFileOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x3283 = t_to_js x3282 in
                       Ojs.call (Ojs.get_prop_ascii x3283 "copy") "apply"
                         [|x3283;((let x3280 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x3280 "push"
                                        [|(Uri.t_to_js x3277)|]);
                                   ignore
                                     (Ojs.call x3280 "push"
                                        [|(Uri.t_to_js x3278)|]);
                                   (match x3279 with
                                    | Some x3281 ->
                                        ignore
                                          (Ojs.call x3280 "push"
                                             [|(RenameFileOptions.t_to_js
                                                  x3281)|])
                                    | None -> ());
                                   x3280))|])
        let (is_writable_file_system :
          t -> scheme:string -> bool or_undefined) =
          fun (x3286 : t) ->
            fun ~scheme:(x3285 : string) ->
              or_undefined_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3286) "isWritableFileSystem"
                   [|(Ojs.string_to_js x3285)|])
      end
    module WebviewPortMapping =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3289 : Ojs.t) -> x3289
        and t_to_js : t -> Ojs.t = fun (x3288 : Ojs.t) -> x3288
        let (webview_port : t -> int) =
          fun (x3290 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3290) "webviewPort")
        let (extension_host_port : t -> int) =
          fun (x3291 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3291) "extensionHostPort")
      end
    module WebviewOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3293 : Ojs.t) -> x3293
        and t_to_js : t -> Ojs.t = fun (x3292 : Ojs.t) -> x3292
        let (enable_scripts : t -> bool) =
          fun (x3294 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3294) "enableScripts")
        let (enable_command_uris : t -> bool) =
          fun (x3295 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3295) "enableCommandUris")
        let (local_resource_roots : t -> Uri.t list) =
          fun (x3296 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3296) "localResourceRoots")
        let (port_mapping : t -> WebviewPortMapping.t list) =
          fun (x3298 : t) ->
            Ojs.list_of_js WebviewPortMapping.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3298) "portMapping")
      end
    module Webview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3301 : Ojs.t) -> x3301
        and t_to_js : t -> Ojs.t = fun (x3300 : Ojs.t) -> x3300
        let (options : t -> WebviewOptions.t) =
          fun (x3302 : t) ->
            WebviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3302) "options")
        let (set_options : t -> WebviewOptions.t -> unit) =
          fun (x3303 : t) ->
            fun (x3304 : WebviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x3303) "options"
                (WebviewOptions.t_to_js x3304)
        let (html : t -> string) =
          fun (x3305 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3305) "html")
        let (set_html : t -> string -> unit) =
          fun (x3306 : t) ->
            fun (x3307 : string) ->
              Ojs.set_prop_ascii (t_to_js x3306) "html"
                (Ojs.string_to_js x3307)
        let (on_did_receive_message : t -> any Event.t) =
          fun (x3308 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x3308) "onDidReceiveMessage")
        let (post_message : t -> message:any -> bool Promise.t) =
          fun (x3311 : t) ->
            fun ~message:(x3310 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x3311) "postMessage" [|(any_to_js x3310)|])
        let (as_webview_uri : t -> local_resource:Uri.t -> Uri.t) =
          fun (x3314 : t) ->
            fun ~local_resource:(x3313 : Uri.t) ->
              Uri.t_of_js
                (Ojs.call (t_to_js x3314) "asWebviewUri"
                   [|(Uri.t_to_js x3313)|])
        let (csp_source : t -> string) =
          fun (x3315 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3315) "cspSource")
      end
    module WebviewPanelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3317 : Ojs.t) -> x3317
        and t_to_js : t -> Ojs.t = fun (x3316 : Ojs.t) -> x3316
        let (enable_find_widget : t -> bool) =
          fun (x3318 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3318) "enableFindWidget")
        let (retain_context_when_hidden : t -> bool) =
          fun (x3319 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3319) "retainContextWhenHidden")
      end
    module WebviewPanel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3321 : Ojs.t) -> x3321
        and t_to_js : t -> Ojs.t = fun (x3320 : Ojs.t) -> x3320
        let (view_type : t -> string) =
          fun (x3322 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3322) "viewType")
        let (title : t -> string) =
          fun (x3323 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3323) "title")
        let (set_title : t -> string -> unit) =
          fun (x3324 : t) ->
            fun (x3325 : string) ->
              Ojs.set_prop_ascii (t_to_js x3324) "title"
                (Ojs.string_to_js x3325)
        let (icon_path : t -> (Uri.t, IconPath.t) union2) =
          fun (x3326 : t) ->
            union2_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3326) "iconPath")
        let (set_icon_path : t -> (Uri.t, IconPath.t) union2 -> unit) =
          fun (x3329 : t) ->
            fun (x3330 : (Uri.t, IconPath.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x3329) "iconPath"
                (union2_to_js Uri.t_to_js IconPath.t_to_js x3330)
        let (webview : t -> Webview.t) =
          fun (x3333 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3333) "webview")
        let (options : t -> WebviewPanelOptions.t) =
          fun (x3334 : t) ->
            WebviewPanelOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3334) "options")
        let (view_column : t -> ViewColumn.t) =
          fun (x3335 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3335) "viewColumn")
        let (active : t -> bool) =
          fun (x3336 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3336) "active")
        let (visible : t -> bool) =
          fun (x3337 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3337) "visible")
        module OnDidChangeViewStateEvent =
          struct
            type webview_panel = t
            let rec webview_panel_of_js : Ojs.t -> webview_panel =
              fun (x3339 : Ojs.t) -> t_of_js x3339
            and webview_panel_to_js : webview_panel -> Ojs.t =
              fun (x3338 : t) -> t_to_js x3338
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3341 : Ojs.t) -> x3341
            and t_to_js : t -> Ojs.t = fun (x3340 : Ojs.t) -> x3340
            let (webview_panel : t -> webview_panel) =
              fun (x3342 : t) ->
                webview_panel_of_js
                  (Ojs.get_prop_ascii (t_to_js x3342) "webviewPanel")
          end
        let (on_did_change_view_state :
          t -> OnDidChangeViewStateEvent.t Event.t) =
          fun (x3343 : t) ->
            Event.t_of_js OnDidChangeViewStateEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3343) "onDidChangeViewState")
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3345 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3345) "onDidDispose")
        let (reveal :
          t ->
            ?view_column:ViewColumn.t -> ?preserve_focus:bool -> unit -> unit)
          =
          fun (x3352 : t) ->
            fun ?view_column:(x3347 : ViewColumn.t option) ->
              fun ?preserve_focus:(x3348 : bool option) ->
                fun () ->
                  ignore
                    (let x3353 = t_to_js x3352 in
                     Ojs.call (Ojs.get_prop_ascii x3353 "reveal") "apply"
                       [|x3353;((let x3349 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x3347 with
                                  | Some x3351 ->
                                      ignore
                                        (Ojs.call x3349 "push"
                                           [|(ViewColumn.t_to_js x3351)|])
                                  | None -> ());
                                 (match x3348 with
                                  | Some x3350 ->
                                      ignore
                                        (Ojs.call x3349 "push"
                                           [|(Ojs.bool_to_js x3350)|])
                                  | None -> ());
                                 x3349))|])
        let (dispose : t -> any) =
          fun (x3354 : t) ->
            any_of_js (Ojs.call (t_to_js x3354) "dispose" [||])
      end
    module WebviewPanelSerializer =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3356 : Ojs.t) -> x3356
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3355 : Ojs.t) -> x3355
        let (deserialize_webview_panel :
          'T t -> webview_panel:WebviewPanel.t -> state:'T -> unit Promise.t)
          =
          fun (x3359 : 'T t) ->
            fun ~webview_panel:(x3357 : WebviewPanel.t) ->
              fun ~state:(x3358 : 'T) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3359)
                     "deserializeWebviewPanel"
                     [|(WebviewPanel.t_to_js x3357);(Obj.magic x3358)|])
      end
    module WebviewView =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3363 : Ojs.t) -> x3363
        and t_to_js : t -> Ojs.t = fun (x3362 : Ojs.t) -> x3362
        let (view_type : t -> string) =
          fun (x3364 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3364) "viewType")
        let (webview : t -> Webview.t) =
          fun (x3365 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x3365) "webview")
        let (title : t -> string) =
          fun (x3366 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3366) "title")
        let (set_title : t -> string -> unit) =
          fun (x3367 : t) ->
            fun (x3368 : string) ->
              Ojs.set_prop_ascii (t_to_js x3367) "title"
                (Ojs.string_to_js x3368)
        let (description : t -> string) =
          fun (x3369 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3369) "description")
        let (set_description : t -> string -> unit) =
          fun (x3370 : t) ->
            fun (x3371 : string) ->
              Ojs.set_prop_ascii (t_to_js x3370) "description"
                (Ojs.string_to_js x3371)
        let (on_did_dispose : t -> unit Event.t) =
          fun (x3372 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3372) "onDidDispose")
        let (visible : t -> bool) =
          fun (x3374 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3374) "visible")
        let (on_did_change_visibility : t -> unit Event.t) =
          fun (x3375 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3375) "onDidChangeVisibility")
        let (show : t -> ?preserve_focus:bool -> unit -> unit) =
          fun (x3380 : t) ->
            fun ?preserve_focus:(x3377 : bool option) ->
              fun () ->
                ignore
                  (let x3381 = t_to_js x3380 in
                   Ojs.call (Ojs.get_prop_ascii x3381 "show") "apply"
                     [|x3381;((let x3378 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3377 with
                                | Some x3379 ->
                                    ignore
                                      (Ojs.call x3378 "push"
                                         [|(Ojs.bool_to_js x3379)|])
                                | None -> ());
                               x3378))|])
      end
    module WebviewViewResolveContext =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3383 : Ojs.t) -> x3383
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3382 : Ojs.t) -> x3382
        let (state : 'T t -> 'T or_undefined) =
          fun (x3384 : 'T t) ->
            or_undefined_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3384) "state")
      end
    module WebviewViewProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3388 : Ojs.t) -> x3388
        and t_to_js : t -> Ojs.t = fun (x3387 : Ojs.t) -> x3387
        let (resolve_webview_view :
          t ->
            webview_view:WebviewView.t ->
              context:unknown WebviewViewResolveContext.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3393 : t) ->
            fun ~webview_view:(x3389 : WebviewView.t) ->
              fun ~context:(x3390 : unknown WebviewViewResolveContext.t) ->
                fun ~token:(x3392 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3395 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3395)
                    (Ojs.call (t_to_js x3393) "resolveWebviewView"
                       [|(WebviewView.t_to_js x3389);(WebviewViewResolveContext.t_to_js
                                                        unknown_to_js x3390);(
                         CancellationToken.t_to_js x3392)|])
      end
    module CustomTextEditorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3398 : Ojs.t) -> x3398
        and t_to_js : t -> Ojs.t = fun (x3397 : Ojs.t) -> x3397
        let (resolve_custom_text_editor :
          t ->
            document:TextDocument.t ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3402 : t) ->
            fun ~document:(x3399 : TextDocument.t) ->
              fun ~webview_panel:(x3400 : WebviewPanel.t) ->
                fun ~token:(x3401 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3404 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3404)
                    (Ojs.call (t_to_js x3402) "resolveCustomTextEditor"
                       [|(TextDocument.t_to_js x3399);(WebviewPanel.t_to_js
                                                         x3400);(CancellationToken.t_to_js
                                                                   x3401)|])
      end
    module CustomDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3407 : Ojs.t) -> x3407
        and t_to_js : t -> Ojs.t = fun (x3406 : Ojs.t) -> x3406
        let (uri : t -> Uri.t) =
          fun (x3408 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3408) "uri")
        let (dispose : t -> unit) =
          fun (x3409 : t) -> ignore (Ojs.call (t_to_js x3409) "dispose" [||])
      end
    module CustomDocumentEditEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3411 : Ojs.t) -> x3411
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3410 : Ojs.t) -> x3410
        let (document : 'T t -> 'T) =
          fun (x3412 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3412) "document")
        let (undo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3414 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3417 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3417)
              (Ojs.call (t_to_js Obj.magic x3414) "undo" [||])
        let (redo : 'T t -> (unit, unit Promise.t) union2) =
          fun (x3419 : 'T t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x3422 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x3422)
              (Ojs.call (t_to_js Obj.magic x3419) "redo" [||])
        let (label : 'T t -> string) =
          fun (x3424 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3424) "label")
      end
    module CustomDocumentContentChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3427 : Ojs.t) -> x3427
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3426 : Ojs.t) -> x3426
        let (document : 'T t -> 'T) =
          fun (x3428 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3428) "document")
      end
    module CustomDocumentBackup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3431 : Ojs.t) -> x3431
        and t_to_js : t -> Ojs.t = fun (x3430 : Ojs.t) -> x3430
        let (id : t -> string) =
          fun (x3432 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3432) "id")
        let (delete : t -> unit) =
          fun (x3433 : t) -> ignore (Ojs.call (t_to_js x3433) "delete" [||])
      end
    module CustomDocumentBackupContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3435 : Ojs.t) -> x3435
        and t_to_js : t -> Ojs.t = fun (x3434 : Ojs.t) -> x3434
        let (destination : t -> Uri.t) =
          fun (x3436 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3436) "destination")
      end
    module CustomDocumentOpenContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3438 : Ojs.t) -> x3438
        and t_to_js : t -> Ojs.t = fun (x3437 : Ojs.t) -> x3437
        let (backup_id : t -> string) =
          fun (x3439 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3439) "backupId")
        let (untitled_document_data : t -> Uint8Array.t) =
          fun (x3440 : t) ->
            Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3440) "untitledDocumentData")
      end
    module CustomReadonlyEditorProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3442 : Ojs.t) -> x3442
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3441 : Ojs.t) -> x3441
        let (open_custom_document :
          'T t ->
            uri:Uri.t ->
              open_context:CustomDocumentOpenContext.t ->
                token:CancellationToken.t -> ('T, 'T Promise.t) union2)
          =
          fun (x3446 : 'T t) ->
            fun ~uri:(x3443 : Uri.t) ->
              fun ~open_context:(x3444 : CustomDocumentOpenContext.t) ->
                fun ~token:(x3445 : CancellationToken.t) ->
                  union2_of_js Obj.magic
                    (fun (x3449 : Ojs.t) -> Promise.t_of_js Obj.magic x3449)
                    (Ojs.call (t_to_js Obj.magic x3446) "openCustomDocument"
                       [|(Uri.t_to_js x3443);(CustomDocumentOpenContext.t_to_js
                                                x3444);(CancellationToken.t_to_js
                                                          x3445)|])
        let (resolve_custom_editor :
          'T t ->
            document:'T ->
              webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x3454 : 'T t) ->
            fun ~document:(x3451 : 'T) ->
              fun ~webview_panel:(x3452 : WebviewPanel.t) ->
                fun ~token:(x3453 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x3457 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x3457)
                    (Ojs.call (t_to_js Obj.magic x3454) "resolveCustomEditor"
                       [|(Obj.magic x3451);(WebviewPanel.t_to_js x3452);(
                         CancellationToken.t_to_js x3453)|])
      end
    module CustomEditorProvider =
      struct
        include struct include CustomReadonlyEditorProvider end
        let (on_did_change_custom_document :
          'T t ->
            ('T CustomDocumentContentChangeEvent.t Event.t,
              'T CustomDocumentEditEvent.t Event.t) union2)
          =
          fun (x3459 : 'T t) ->
            union2_of_js
              (fun (x3461 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3462 : Ojs.t) ->
                      CustomDocumentContentChangeEvent.t_of_js Obj.magic
                        x3462) x3461)
              (fun (x3464 : Ojs.t) ->
                 Event.t_of_js
                   (fun (x3465 : Ojs.t) ->
                      CustomDocumentEditEvent.t_of_js Obj.magic x3465) x3464)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3459)
                 "onDidChangeCustomDocument")
        let (save_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3469 : 'T t) ->
            fun ~document:(x3467 : 'T) ->
              fun ~cancellation:(x3468 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3469) "saveCustomDocument"
                     [|(Obj.magic x3467);(CancellationToken.t_to_js x3468)|])
        let (save_custom_document_as :
          'T t ->
            document:'T ->
              destination:Uri.t ->
                cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3475 : 'T t) ->
            fun ~document:(x3472 : 'T) ->
              fun ~destination:(x3473 : Uri.t) ->
                fun ~cancellation:(x3474 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js Obj.magic x3475)
                       "saveCustomDocumentAs"
                       [|(Obj.magic x3472);(Uri.t_to_js x3473);(CancellationToken.t_to_js
                                                                  x3474)|])
        let (revert_custom_document :
          'T t ->
            document:'T -> cancellation:CancellationToken.t -> unit Promise.t)
          =
          fun (x3480 : 'T t) ->
            fun ~document:(x3478 : 'T) ->
              fun ~cancellation:(x3479 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x3480) "revertCustomDocument"
                     [|(Obj.magic x3478);(CancellationToken.t_to_js x3479)|])
        let (backup_custom_document :
          'T t ->
            document:'T ->
              context:CustomDocumentBackupContext.t ->
                cancellation:CancellationToken.t ->
                  CustomDocumentBackup.t Promise.t)
          =
          fun (x3486 : 'T t) ->
            fun ~document:(x3483 : 'T) ->
              fun ~context:(x3484 : CustomDocumentBackupContext.t) ->
                fun ~cancellation:(x3485 : CancellationToken.t) ->
                  Promise.t_of_js CustomDocumentBackup.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3486)
                       "backupCustomDocument"
                       [|(Obj.magic x3483);(CustomDocumentBackupContext.t_to_js
                                              x3484);(CancellationToken.t_to_js
                                                        x3485)|])
        include struct include CustomReadonlyEditorProvider end
      end
    module Clipboard =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3490 : Ojs.t) -> x3490
        and t_to_js : t -> Ojs.t = fun (x3489 : Ojs.t) -> x3489
        let (read_text : t -> string Promise.t) =
          fun (x3491 : t) ->
            Promise.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x3491) "readText" [||])
        let (write_text : t -> value:string -> unit Promise.t) =
          fun (x3494 : t) ->
            fun ~value:(x3493 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3494) "writeText"
                   [|(Ojs.string_to_js x3493)|])
      end
    module UIKind =
      struct
        type t = [ `Desktop  | `Web ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3497 : Ojs.t) ->
            let x3498 = x3497 in
            match Ojs.int_of_js x3498 with
            | 1 -> `Desktop
            | 2 -> `Web
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3496 : [ `Desktop  | `Web ]) ->
            match x3496 with
            | `Desktop -> Ojs.int_to_js 1
            | `Web -> Ojs.int_to_js 2
      end
    module Env =
      struct
        let (app_name : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appName")
        let (app_root : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "appRoot")
        let (uri_scheme : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uriScheme")
        let (language : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "language")
        let (clipboard : Clipboard.t) =
          Clipboard.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "clipboard")
        let (machine_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "machineId")
        let (session_id : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "sessionId")
        let (is_new_app_install : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isNewAppInstall")
        let (is_telemetry_enabled : bool) =
          Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "isTelemetryEnabled")
        let (on_did_change_telemetry_enabled : bool Event.t) =
          Event.t_of_js Ojs.bool_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "onDidChangeTelemetryEnabled")
        let (remote_name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "remoteName")
        let (shell : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "shell")
        let (ui_kind : UIKind.t) =
          UIKind.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "env") "uiKind")
        let (open_external : target:Uri.t -> bool Promise.t) =
          fun ~target:(x3501 : Uri.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "openExternal" [|(Uri.t_to_js x3501)|])
        let (as_external_uri : target:Uri.t -> Uri.t Promise.t) =
          fun ~target:(x3503 : Uri.t) ->
            Promise.t_of_js Uri.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "env")
                 "asExternalUri" [|(Uri.t_to_js x3503)|])
      end
    module Commands =
      struct
        let (register_command : string -> (any list -> 'a) -> Disposable.t) =
          fun (x3505 : string) ->
            fun (x3506 : any list -> 'a) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerCommand"
                   [|(Ojs.string_to_js x3505);(Ojs.fun_to_js_args
                                                 (fun (x3507 : _) ->
                                                    Obj.magic
                                                      (x3506
                                                         (Ojs.list_of_js_from
                                                            any_of_js x3507 0))))|])
        let (register_text_editor_command :
          string ->
            (textEditor:TextEditor.t ->
               edit:TextEditorEdit.t -> args:any list -> unit)
              -> Disposable.t)
          =
          fun (x3509 : string) ->
            fun
              (x3510 :
                textEditor:TextEditor.t ->
                  edit:TextEditorEdit.t -> args:any list -> unit)
              ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "commands")
                   "registerTextEditorCommand"
                   [|(Ojs.string_to_js x3509);(Ojs.fun_to_js_args
                                                 (fun (x3511 : _) ->
                                                    x3510
                                                      ~textEditor:(TextEditor.t_of_js
                                                                    (Ojs.array_get
                                                                    x3511 0))
                                                      ~edit:(TextEditorEdit.t_of_js
                                                               (Ojs.array_get
                                                                  x3511 1))
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js
                                                               x3511 2)))|])
        let (execute_command :
          string -> any list -> 'T or_undefined Promise.t) =
          fun (x3513 : string) ->
            fun (x3514 : any list) ->
              Promise.t_of_js
                (fun (x3518 : Ojs.t) -> or_undefined_of_js Obj.magic x3518)
                (let x3517 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3517 "executeCommand") "apply"
                   [|x3517;((let x3515 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3515 "push"
                                  [|(Ojs.string_to_js x3513)|]);
                             List.iter
                               (fun (x3516 : any) ->
                                  ignore
                                    (Ojs.call x3515 "push"
                                       [|(any_to_js x3516)|])) x3514;
                             x3515))|])
        let (get_commands :
          ?filter_internal:bool -> unit -> string list Promise.t) =
          fun ?filter_internal:(x3520 : bool option) ->
            fun () ->
              Promise.t_of_js
                (fun (x3524 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3524)
                (let x3523 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                 Ojs.call (Ojs.get_prop_ascii x3523 "getCommands") "apply"
                   [|x3523;((let x3521 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3520 with
                              | Some x3522 ->
                                  ignore
                                    (Ojs.call x3521 "push"
                                       [|(Ojs.bool_to_js x3522)|])
                              | None -> ());
                             x3521))|])
      end
    module WindowState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3527 : Ojs.t) -> x3527
        and t_to_js : t -> Ojs.t = fun (x3526 : Ojs.t) -> x3526
        let (focused : t -> bool) =
          fun (x3528 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3528) "focused")
      end
    module UriHandler =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3530 : Ojs.t) -> x3530
        and t_to_js : t -> Ojs.t = fun (x3529 : Ojs.t) -> x3529
        let (handle_uri : t -> uri:Uri.t -> unit ProviderResult.t) =
          fun (x3532 : t) ->
            fun ~uri:(x3531 : Uri.t) ->
              ProviderResult.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x3532) "handleUri" [|(Uri.t_to_js x3531)|])
      end
    module QuickInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3535 : Ojs.t) -> x3535
        and t_to_js : t -> Ojs.t = fun (x3534 : Ojs.t) -> x3534
        let (title : t -> string or_undefined) =
          fun (x3536 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3536) "title")
        let (set_title : t -> string or_undefined -> unit) =
          fun (x3538 : t) ->
            fun (x3539 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3538) "title"
                (or_undefined_to_js Ojs.string_to_js x3539)
        let (step : t -> int or_undefined) =
          fun (x3541 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3541) "step")
        let (set_step : t -> int or_undefined -> unit) =
          fun (x3543 : t) ->
            fun (x3544 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3543) "step"
                (or_undefined_to_js Ojs.int_to_js x3544)
        let (total_steps : t -> int or_undefined) =
          fun (x3546 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x3546) "totalSteps")
        let (set_total_steps : t -> int or_undefined -> unit) =
          fun (x3548 : t) ->
            fun (x3549 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3548) "totalSteps"
                (or_undefined_to_js Ojs.int_to_js x3549)
        let (enabled : t -> bool) =
          fun (x3551 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3551) "enabled")
        let (set_enabled : t -> bool -> unit) =
          fun (x3552 : t) ->
            fun (x3553 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3552) "enabled"
                (Ojs.bool_to_js x3553)
        let (busy : t -> bool) =
          fun (x3554 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3554) "busy")
        let (set_busy : t -> bool -> unit) =
          fun (x3555 : t) ->
            fun (x3556 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3555) "busy"
                (Ojs.bool_to_js x3556)
        let (ignore_focus_out : t -> bool) =
          fun (x3557 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3557) "ignoreFocusOut")
        let (set_ignore_focus_out : t -> bool -> unit) =
          fun (x3558 : t) ->
            fun (x3559 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3558) "ignoreFocusOut"
                (Ojs.bool_to_js x3559)
        let (show : t -> unit) =
          fun (x3560 : t) -> ignore (Ojs.call (t_to_js x3560) "show" [||])
        let (hide : t -> unit) =
          fun (x3561 : t) -> ignore (Ojs.call (t_to_js x3561) "hide" [||])
        let (on_did_hide : t -> unit Event.t) =
          fun (x3562 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3562) "onDidHide")
        let (set_on_did_hide : t -> unit Event.t -> unit) =
          fun (x3564 : t) ->
            fun (x3565 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x3564) "onDidHide"
                (Event.t_to_js Ojs.unit_to_js x3565)
        let (dispose : t -> unit) =
          fun (x3567 : t) -> ignore (Ojs.call (t_to_js x3567) "dispose" [||])
      end
    module QuickInputButton =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3569 : Ojs.t) -> x3569
        and t_to_js : t -> Ojs.t = fun (x3568 : Ojs.t) -> x3568
        let (icon_path : t -> (ThemeIcon.t, Uri.t, IconPath.t) union3) =
          fun (x3570 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3570) "iconPath")
        let (tooltip : t -> string or_undefined) =
          fun (x3574 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3574) "tooltip")
      end
    module QuickInputButtons =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3577 : Ojs.t) -> x3577
        and t_to_js : t -> Ojs.t = fun (x3576 : Ojs.t) -> x3576
        let (back : unit -> QuickInputButton.t) =
          fun () ->
            QuickInputButton.t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") "Back")
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "QuickInputButtons") [||])
      end
    module QuickPick =
      struct
        include struct include QuickInput end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3579 : Ojs.t) -> x3579
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3578 : Ojs.t) -> x3578
        let (value : 'T t -> string) =
          fun (x3580 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3580) "value")
        let (set_value : 'T t -> string -> unit) =
          fun (x3582 : 'T t) ->
            fun (x3583 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3582) "value"
                (Ojs.string_to_js x3583)
        let (placeholder : 'T t -> string or_undefined) =
          fun (x3585 : 'T t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3585) "placeholder")
        let (set_placeholder : 'T t -> string or_undefined -> unit) =
          fun (x3588 : 'T t) ->
            fun (x3589 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3588) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3589)
        let (on_did_change_value : 'T t -> string Event.t) =
          fun (x3592 : 'T t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3592)
                 "onDidChangeValue")
        let (on_did_accept : 'T t -> unit Event.t) =
          fun (x3595 : 'T t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3595) "onDidAccept")
        let (buttons : 'T t -> QuickInputButton.t list) =
          fun (x3598 : 'T t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3598) "buttons")
        let (set_buttons : 'T t -> QuickInputButton.t list -> unit) =
          fun (x3601 : 'T t) ->
            fun (x3602 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3601) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3602)
        let (on_did_trigger_button : 'T t -> QuickInputButton.t Event.t) =
          fun (x3605 : 'T t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3605)
                 "onDidTriggerButton")
        let (items : 'T t -> 'T list) =
          fun (x3608 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3608) "items")
        let (set_items : 'T t -> 'T list -> unit) =
          fun (x3611 : 'T t) ->
            fun (x3612 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3611) "items"
                (Ojs.list_to_js Obj.magic x3612)
        let (can_select_many : 'T t -> bool) =
          fun (x3615 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3615) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3617 : 'T t) ->
            fun (x3618 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3617) "canSelectMany"
                (Ojs.bool_to_js x3618)
        let (match_on_description : 'T t -> bool) =
          fun (x3620 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3620)
                 "matchOnDescription")
        let (set_match_on_description : 'T t -> bool -> unit) =
          fun (x3622 : 'T t) ->
            fun (x3623 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3622)
                "matchOnDescription" (Ojs.bool_to_js x3623)
        let (match_on_detail : 'T t -> bool) =
          fun (x3625 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3625) "matchOnDetail")
        let (set_match_on_detail : 'T t -> bool -> unit) =
          fun (x3627 : 'T t) ->
            fun (x3628 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3627) "matchOnDetail"
                (Ojs.bool_to_js x3628)
        let (active_items : 'T t -> 'T list) =
          fun (x3630 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3630) "activeItems")
        let (set_active_items : 'T t -> 'T list -> unit) =
          fun (x3633 : 'T t) ->
            fun (x3634 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3633) "activeItems"
                (Ojs.list_to_js Obj.magic x3634)
        let (on_did_change_active : 'T t -> 'T list Event.t) =
          fun (x3637 : 'T t) ->
            Event.t_of_js
              (fun (x3639 : Ojs.t) -> Ojs.list_of_js Obj.magic x3639)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3637)
                 "onDidChangeActive")
        let (selected_items : 'T t -> 'T list) =
          fun (x3641 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3641) "selectedItems")
        let (set_selected_items : 'T t -> 'T list -> unit) =
          fun (x3644 : 'T t) ->
            fun (x3645 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3644) "selectedItems"
                (Ojs.list_to_js Obj.magic x3645)
        let (on_did_change_selection : 'T t -> 'T list Event.t) =
          fun (x3648 : 'T t) ->
            Event.t_of_js
              (fun (x3650 : Ojs.t) -> Ojs.list_of_js Obj.magic x3650)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3648)
                 "onDidChangeSelection")
      end
    module InputBox =
      struct
        include struct include QuickInput end
        let (value : t -> string) =
          fun (x3652 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3652) "value")
        let (set_value : t -> string -> unit) =
          fun (x3653 : t) ->
            fun (x3654 : string) ->
              Ojs.set_prop_ascii (t_to_js x3653) "value"
                (Ojs.string_to_js x3654)
        let (placeholder : t -> string or_undefined) =
          fun (x3655 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3655) "placeholder")
        let (set_placeholder : t -> string or_undefined -> unit) =
          fun (x3657 : t) ->
            fun (x3658 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3657) "placeholder"
                (or_undefined_to_js Ojs.string_to_js x3658)
        let (password : t -> bool) =
          fun (x3660 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3660) "password")
        let (set_password : t -> bool -> unit) =
          fun (x3661 : t) ->
            fun (x3662 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3661) "password"
                (Ojs.bool_to_js x3662)
        let (on_did_change_value : t -> string Event.t) =
          fun (x3663 : t) ->
            Event.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3663) "onDidChangeValue")
        let (on_did_accept : t -> unit Event.t) =
          fun (x3665 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x3665) "onDidAccept")
        let (buttons : t -> QuickInputButton.t list) =
          fun (x3667 : t) ->
            Ojs.list_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3667) "buttons")
        let (set_buttons : t -> QuickInputButton.t list -> unit) =
          fun (x3669 : t) ->
            fun (x3670 : QuickInputButton.t list) ->
              Ojs.set_prop_ascii (t_to_js x3669) "buttons"
                (Ojs.list_to_js QuickInputButton.t_to_js x3670)
        let (on_did_trigger_button : t -> QuickInputButton.t Event.t) =
          fun (x3672 : t) ->
            Event.t_of_js QuickInputButton.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3672) "onDidTriggerButton")
        let (prompt : t -> string or_undefined) =
          fun (x3674 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3674) "prompt")
        let (set_prompt : t -> string or_undefined -> unit) =
          fun (x3676 : t) ->
            fun (x3677 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3676) "prompt"
                (or_undefined_to_js Ojs.string_to_js x3677)
        let (validation_message : t -> string or_undefined) =
          fun (x3679 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3679) "validationMessage")
        let (set_validation_message : t -> string or_undefined -> unit) =
          fun (x3681 : t) ->
            fun (x3682 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3681) "validationMessage"
                (or_undefined_to_js Ojs.string_to_js x3682)
      end
    module ProgressLocation =
      struct
        type t = [ `Window  | `Notification ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3685 : Ojs.t) ->
            let x3686 = x3685 in
            match Ojs.int_of_js x3686 with
            | 10 -> `Window
            | 15 -> `Notification
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3684 : [ `Window  | `Notification ]) ->
            match x3684 with
            | `Window -> Ojs.int_to_js 10
            | `Notification -> Ojs.int_to_js 15
      end
    module ProgressOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3688 : Ojs.t) -> x3688
        and t_to_js : t -> Ojs.t = fun (x3687 : Ojs.t) -> x3687
        module ViewId =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3690 : Ojs.t) -> x3690
            and t_to_js : t -> Ojs.t = fun (x3689 : Ojs.t) -> x3689
            let (view_id : t -> string) =
              fun (x3691 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x3691) "viewId")
            let (set_view_id : t -> string -> unit) =
              fun (x3692 : t) ->
                fun (x3693 : string) ->
                  Ojs.set_prop_ascii (t_to_js x3692) "viewId"
                    (Ojs.string_to_js x3693)
          end
        let (location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum)
          =
          fun (x3694 : t) ->
            or_enum_of_js
              (fun (x3695 : Ojs.t) ->
                 union2_of_js ProgressLocation.t_of_js ViewId.t_of_js x3695)
              (fun (x3698 : Ojs.t) ->
                 let x3699 = x3698 in
                 match Ojs.int_of_js x3699 with
                 | 15 -> `Notification
                 | 1 -> `SourceControl
                 | 10 -> `Window
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x3694) "location")
        let (set_location :
          t ->
            ((ProgressLocation.t, ViewId.t) union2,
              [ `Notification  | `SourceControl  | `Window ]) or_enum -> 
              unit)
          =
          fun (x3700 : t) ->
            fun
              (x3701 :
                ((ProgressLocation.t, ViewId.t) union2,
                  [ `Notification  | `SourceControl  | `Window ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x3700) "location"
                (or_enum_to_js
                   (fun (x3702 : (ProgressLocation.t, ViewId.t) union2) ->
                      union2_to_js ProgressLocation.t_to_js ViewId.t_to_js
                        x3702)
                   (fun
                      (x3705 :
                        [ `Notification  | `SourceControl  | `Window ])
                      ->
                      match x3705 with
                      | `Notification -> Ojs.string_to_js "Notification"
                      | `SourceControl -> Ojs.string_to_js "SourceControl"
                      | `Window -> Ojs.string_to_js "Window") x3701)
        let (title : t -> string) =
          fun (x3706 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3706) "title")
        let (set_title : t -> string -> unit) =
          fun (x3707 : t) ->
            fun (x3708 : string) ->
              Ojs.set_prop_ascii (t_to_js x3707) "title"
                (Ojs.string_to_js x3708)
        let (cancellable : t -> bool) =
          fun (x3709 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3709) "cancellable")
        let (set_cancellable : t -> bool -> unit) =
          fun (x3710 : t) ->
            fun (x3711 : bool) ->
              Ojs.set_prop_ascii (t_to_js x3710) "cancellable"
                (Ojs.bool_to_js x3711)
      end
    module TreeItemCollapsibleState =
      struct
        type t = [ `None  | `Collapsed  | `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x3713 : Ojs.t) ->
            let x3714 = x3713 in
            match Ojs.int_of_js x3714 with
            | 0 -> `None
            | 1 -> `Collapsed
            | 2 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3712 : [ `None  | `Collapsed  | `Expanded ]) ->
            match x3712 with
            | `None -> Ojs.int_to_js 0
            | `Collapsed -> Ojs.int_to_js 1
            | `Expanded -> Ojs.int_to_js 2
      end
    module TreeItemLabel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3716 : Ojs.t) -> x3716
        and t_to_js : t -> Ojs.t = fun (x3715 : Ojs.t) -> x3715
        let (label : t -> string) =
          fun (x3717 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3717) "label")
        let (set_label : t -> string -> unit) =
          fun (x3718 : t) ->
            fun (x3719 : string) ->
              Ojs.set_prop_ascii (t_to_js x3718) "label"
                (Ojs.string_to_js x3719)
        let (highlights : t -> (int * int) list) =
          fun (x3720 : t) ->
            Ojs.list_of_js
              (fun (x3721 : Ojs.t) ->
                 let x3722 = x3721 in
                 ((Ojs.int_of_js (Ojs.array_get x3722 0)),
                   (Ojs.int_of_js (Ojs.array_get x3722 1))))
              (Ojs.get_prop_ascii (t_to_js x3720) "highlights")
        let (set_highlights : t -> (int * int) list -> unit) =
          fun (x3723 : t) ->
            fun (x3724 : (int * int) list) ->
              Ojs.set_prop_ascii (t_to_js x3723) "highlights"
                (Ojs.list_to_js
                   (fun (x3725 : (int * int)) ->
                      let (x3726, x3727) = x3725 in
                      let x3728 = Ojs.array_make 2 in
                      Ojs.array_set x3728 0 (Ojs.int_to_js x3726);
                      Ojs.array_set x3728 1 (Ojs.int_to_js x3727);
                      x3728) x3724)
      end
    module TreeItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3730 : Ojs.t) -> x3730
        and t_to_js : t -> Ojs.t = fun (x3729 : Ojs.t) -> x3729
        let (label : t -> TreeItemLabel.t or_string) =
          fun (x3731 : t) ->
            or_string_of_js TreeItemLabel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3731) "label")
        let (set_label : t -> TreeItemLabel.t or_string -> unit) =
          fun (x3733 : t) ->
            fun (x3734 : TreeItemLabel.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x3733) "label"
                (or_string_to_js TreeItemLabel.t_to_js x3734)
        let (id : t -> string) =
          fun (x3736 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3736) "id")
        let (set_id : t -> string -> unit) =
          fun (x3737 : t) ->
            fun (x3738 : string) ->
              Ojs.set_prop_ascii (t_to_js x3737) "id"
                (Ojs.string_to_js x3738)
        let (icon_path :
          t -> (ThemeIcon.t, Uri.t, IconPath.t) union3 or_string) =
          fun (x3739 : t) ->
            or_string_of_js
              (fun (x3740 : Ojs.t) ->
                 union3_of_js ThemeIcon.t_of_js Uri.t_of_js IconPath.t_of_js
                   x3740) (Ojs.get_prop_ascii (t_to_js x3739) "iconPath")
        let (set_icon_path :
          t ->
            [ `ThemeIcon of ThemeIcon.t  | `Uri of Uri.t 
            | `IconPath of IconPath.t  | `String of string ] -> unit)
          =
          fun (x3744 : t) ->
            fun
              (x3745 :
                [ `ThemeIcon of ThemeIcon.t  | `Uri of Uri.t 
                | `IconPath of IconPath.t  | `String of string ])
              ->
              Ojs.set_prop_ascii (t_to_js x3744) "iconPath"
                (match x3745 with
                 | `ThemeIcon x3746 -> ThemeIcon.t_to_js x3746
                 | `Uri x3747 -> Uri.t_to_js x3747
                 | `IconPath x3748 -> IconPath.t_to_js x3748
                 | `String x3749 -> Ojs.string_to_js x3749)
        let (description : t -> bool or_string) =
          fun (x3750 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x3750) "description")
        let (set_description : t -> bool or_string -> unit) =
          fun (x3752 : t) ->
            fun (x3753 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x3752) "description"
                (or_string_to_js Ojs.bool_to_js x3753)
        let (resource_uri : t -> Uri.t) =
          fun (x3755 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x3755) "resourceUri")
        let (set_resource_uri : t -> Uri.t -> unit) =
          fun (x3756 : t) ->
            fun (x3757 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x3756) "resourceUri"
                (Uri.t_to_js x3757)
        let (tooltip : t -> MarkdownString.t or_string or_undefined) =
          fun (x3758 : t) ->
            or_undefined_of_js
              (fun (x3759 : Ojs.t) ->
                 or_string_of_js MarkdownString.t_of_js x3759)
              (Ojs.get_prop_ascii (t_to_js x3758) "tooltip")
        let (set_tooltip :
          t -> MarkdownString.t or_string or_undefined -> unit) =
          fun (x3761 : t) ->
            fun (x3762 : MarkdownString.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x3761) "tooltip"
                (or_undefined_to_js
                   (fun (x3763 : MarkdownString.t or_string) ->
                      or_string_to_js MarkdownString.t_to_js x3763) x3762)
        let (command : t -> Command.t) =
          fun (x3765 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x3765) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x3766 : t) ->
            fun (x3767 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x3766) "command"
                (Command.t_to_js x3767)
        let (collapsible_state : t -> TreeItemCollapsibleState.t) =
          fun (x3768 : t) ->
            TreeItemCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3768) "collapsibleState")
        let (set_collapsible_state : t -> TreeItemCollapsibleState.t -> unit)
          =
          fun (x3769 : t) ->
            fun (x3770 : TreeItemCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x3769) "collapsibleState"
                (TreeItemCollapsibleState.t_to_js x3770)
        let (context_value : t -> string) =
          fun (x3771 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3771) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x3772 : t) ->
            fun (x3773 : string) ->
              Ojs.set_prop_ascii (t_to_js x3772) "contextValue"
                (Ojs.string_to_js x3773)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x3774 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x3774) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x3775 : t) ->
            fun (x3776 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x3775) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x3776)
        let (create :
          [ `String of string  | `TreeItemLabel of TreeItemLabel.t 
          | `Uri of Uri.t ] ->
            ?collapsible_state:TreeItemCollapsibleState.t -> unit -> t)
          =
          fun
            (x3777 :
              [ `String of string  | `TreeItemLabel of TreeItemLabel.t 
              | `Uri of Uri.t ])
            ->
            fun
              ?collapsible_state:(x3778 : TreeItemCollapsibleState.t option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "TreeItem")
                     (let x3779 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3779 "push"
                           [|((match x3777 with
                               | `String x3781 -> Ojs.string_to_js x3781
                               | `TreeItemLabel x3782 ->
                                   TreeItemLabel.t_to_js x3782
                               | `Uri x3783 -> Uri.t_to_js x3783))|]);
                      (match x3778 with
                       | Some x3780 ->
                           ignore
                             (Ojs.call x3779 "push"
                                [|(TreeItemCollapsibleState.t_to_js x3780)|])
                       | None -> ());
                      x3779))
      end
    module TreeDataProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3785 : Ojs.t) -> x3785
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3784 : Ojs.t) -> x3784
        module OnDidChangeTreeData =
          struct
            type 'T t = 'T or_null_or_undefined Event.t
            let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
              __T) ->
              fun (__T_of_js : Ojs.t -> __T) ->
                fun (x3789 : Ojs.t) ->
                  Event.t_of_js
                    (fun (x3790 : Ojs.t) ->
                       or_null_or_undefined_of_js __T_of_js x3790) x3789
            and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type
              __T) ->
              fun (__T_to_js : __T -> Ojs.t) ->
                fun (x3786 : __T or_null_or_undefined Event.t) ->
                  Event.t_to_js
                    (fun (x3787 : __T or_null_or_undefined) ->
                       or_null_or_undefined_to_js __T_to_js x3787) x3786
          end
        let (on_did_change_tree_data : 'T t -> 'T OnDidChangeTreeData.t) =
          fun (x3792 : 'T t) ->
            OnDidChangeTreeData.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3792)
                 "onDidChangeTreeData")
        let (set_on_did_change_tree_data :
          'T t -> 'T OnDidChangeTreeData.t -> unit) =
          fun (x3795 : 'T t) ->
            fun (x3796 : 'T OnDidChangeTreeData.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3795)
                "onDidChangeTreeData"
                (OnDidChangeTreeData.t_to_js Obj.magic x3796)
        let (get_tree_item :
          'T t -> 'T -> (TreeItem.t, TreeItem.t Promise.t) union2) =
          fun (x3800 : 'T t) ->
            fun (x3799 : 'T) ->
              union2_of_js TreeItem.t_of_js
                (fun (x3803 : Ojs.t) ->
                   Promise.t_of_js TreeItem.t_of_js x3803)
                (Ojs.call (t_to_js Obj.magic x3800) "getTreeItem"
                   [|(Obj.magic x3799)|])
        let (get_children :
          'T t -> ?element:'T -> unit -> 'T list ProviderResult.t) =
          fun (x3808 : 'T t) ->
            fun ?element:(x3805 : 'T option) ->
              fun () ->
                ProviderResult.t_of_js
                  (fun (x3811 : Ojs.t) -> Ojs.list_of_js Obj.magic x3811)
                  (let x3810 = t_to_js Obj.magic x3808 in
                   Ojs.call (Ojs.get_prop_ascii x3810 "getChildren") "apply"
                     [|x3810;((let x3806 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3805 with
                                | Some x3807 ->
                                    ignore
                                      (Ojs.call x3806 "push"
                                         [|(Obj.magic x3807)|])
                                | None -> ());
                               x3806))|])
        let (get_parent : 'T t -> 'T -> 'T ProviderResult.t) =
          fun (x3814 : 'T t) ->
            fun (x3813 : 'T) ->
              ProviderResult.t_of_js Obj.magic
                (Ojs.call (t_to_js Obj.magic x3814) "getParent"
                   [|(Obj.magic x3813)|])
        let (resolve_tree_item :
          'T t ->
            item:TreeItem.t ->
              element:'T ->
                token:CancellationToken.t -> TreeItem.t ProviderResult.t)
          =
          fun (x3820 : 'T t) ->
            fun ~item:(x3817 : TreeItem.t) ->
              fun ~element:(x3818 : 'T) ->
                fun ~token:(x3819 : CancellationToken.t) ->
                  ProviderResult.t_of_js TreeItem.t_of_js
                    (Ojs.call (t_to_js Obj.magic x3820) "resolveTreeItem"
                       [|(TreeItem.t_to_js x3817);(Obj.magic x3818);(
                         CancellationToken.t_to_js x3819)|])
        let (create :
          ?on_did_change_tree_data:'T OnDidChangeTreeData.t ->
            get_tree_item:('T ->
                             [ `Value of TreeItem.t 
                             | `Promise of TreeItem.t Promise.t ])
              ->
              get_children:(?element:'T -> unit -> 'T list ProviderResult.t)
                ->
                ?get_parent:('T -> 'T ProviderResult.t) ->
                  ?resolve_tree_item:(item:TreeItem.t ->
                                        element:'T ->
                                          token:CancellationToken.t ->
                                            TreeItem.t ProviderResult.t)
                    -> unit -> 'T t)
          =
          fun
            ?on_did_change_tree_data:(x3823 :
                                       'T OnDidChangeTreeData.t option)
            ->
            fun
              ~get_tree_item:(x3824 :
                               'T ->
                                 [ `Value of TreeItem.t 
                                 | `Promise of TreeItem.t Promise.t ])
              ->
              fun
                ~get_children:(x3825 :
                                ?element:'T ->
                                  unit -> 'T list ProviderResult.t)
                ->
                fun ?get_parent:(x3826 : ('T -> 'T ProviderResult.t) option)
                  ->
                  fun
                    ?resolve_tree_item:(x3827 :
                                         (item:TreeItem.t ->
                                            element:'T ->
                                              token:CancellationToken.t ->
                                                TreeItem.t ProviderResult.t)
                                           option)
                    ->
                    fun () ->
                      let x3828 = Ojs.empty_obj () in
                      (match x3823 with
                       | Some x3846 ->
                           Ojs.set_prop_ascii x3828 "onDidChangeTreeData"
                             (OnDidChangeTreeData.t_to_js Obj.magic x3846)
                       | None -> ());
                      Ojs.set_prop_ascii x3828 "getTreeItem"
                        (Ojs.fun_to_js 1
                           (fun (x3842 : Ojs.t) ->
                              match x3824 (Obj.magic x3842) with
                              | `Value x3843 -> TreeItem.t_to_js x3843
                              | `Promise x3844 ->
                                  Promise.t_to_js TreeItem.t_to_js x3844));
                      Ojs.set_prop_ascii x3828 "getChildren"
                        (Ojs.fun_to_js 1
                           (fun (x3838 : Ojs.t) ->
                              ProviderResult.t_to_js
                                (fun (x3840 : 'T list) ->
                                   Ojs.list_to_js Obj.magic x3840)
                                (x3825
                                   ?element:(Ojs.option_of_js Obj.magic x3838)
                                   ())));
                      (match x3826 with
                       | Some x3835 ->
                           Ojs.set_prop_ascii x3828 "getParent"
                             (Ojs.fun_to_js 1
                                (fun (x3836 : Ojs.t) ->
                                   ProviderResult.t_to_js Obj.magic
                                     (x3835 (Obj.magic x3836))))
                       | None -> ());
                      (match x3827 with
                       | Some x3830 ->
                           Ojs.set_prop_ascii x3828 "resolveTreeItem"
                             (Ojs.fun_to_js 3
                                (fun (x3831 : Ojs.t) ->
                                   fun (x3832 : Ojs.t) ->
                                     fun (x3833 : Ojs.t) ->
                                       ProviderResult.t_to_js
                                         TreeItem.t_to_js
                                         (x3830
                                            ~item:(TreeItem.t_of_js x3831)
                                            ~element:(Obj.magic x3832)
                                            ~token:(CancellationToken.t_of_js
                                                      x3833))))
                       | None -> ());
                      t_of_js Obj.magic x3828
      end
    module TreeViewOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3849 : Ojs.t) -> x3849
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3848 : Ojs.t) -> x3848
        let (tree_data_provider : 'T t -> 'T TreeDataProvider.t) =
          fun (x3850 : 'T t) ->
            TreeDataProvider.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3850)
                 "treeDataProvider")
        let (set_tree_data_provider : 'T t -> 'T TreeDataProvider.t -> unit)
          =
          fun (x3853 : 'T t) ->
            fun (x3854 : 'T TreeDataProvider.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3853) "treeDataProvider"
                (TreeDataProvider.t_to_js Obj.magic x3854)
        let (show_collapse_all : 'T t -> bool) =
          fun (x3857 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3857) "showCollapseAll")
        let (set_show_collapse_all : 'T t -> bool -> unit) =
          fun (x3859 : 'T t) ->
            fun (x3860 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3859) "showCollapseAll"
                (Ojs.bool_to_js x3860)
        let (can_select_many : 'T t -> bool) =
          fun (x3862 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3862) "canSelectMany")
        let (set_can_select_many : 'T t -> bool -> unit) =
          fun (x3864 : 'T t) ->
            fun (x3865 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3864) "canSelectMany"
                (Ojs.bool_to_js x3865)
      end
    module TreeViewExpansionEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3868 : Ojs.t) -> x3868
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3867 : Ojs.t) -> x3867
        let (element : 'T t -> 'T) =
          fun (x3869 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3869) "element")
      end
    module TreeViewSelectionChangeEvent =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3872 : Ojs.t) -> x3872
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3871 : Ojs.t) -> x3871
        let (selection : 'T t -> 'T list) =
          fun (x3873 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3873) "selection")
      end
    module TreeViewVisibilityChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x3877 : Ojs.t) -> x3877
        and t_to_js : t -> Ojs.t = fun (x3876 : Ojs.t) -> x3876
        let (visible : t -> bool) =
          fun (x3878 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3878) "visible")
      end
    module TreeView =
      struct
        include struct include Disposable end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x3880 : Ojs.t) -> x3880
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x3879 : Ojs.t) -> x3879
        let (on_did_expand_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3881 : 'T t) ->
            Event.t_of_js
              (fun (x3883 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3883)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3881)
                 "onDidExpandElement")
        let (on_did_collapse_element :
          'T t -> 'T TreeViewExpansionEvent.t Event.t) =
          fun (x3885 : 'T t) ->
            Event.t_of_js
              (fun (x3887 : Ojs.t) ->
                 TreeViewExpansionEvent.t_of_js Obj.magic x3887)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3885)
                 "onDidCollapseElement")
        let (selection : 'T t -> 'T list) =
          fun (x3889 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3889) "selection")
        let (on_did_change_selection :
          'T t -> 'T TreeViewSelectionChangeEvent.t Event.t) =
          fun (x3892 : 'T t) ->
            Event.t_of_js
              (fun (x3894 : Ojs.t) ->
                 TreeViewSelectionChangeEvent.t_of_js Obj.magic x3894)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3892)
                 "onDidChangeSelection")
        let (visible : 'T t -> bool) =
          fun (x3896 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3896) "visible")
        let (on_did_change_visibility :
          'T t -> TreeViewVisibilityChangeEvent.t Event.t) =
          fun (x3898 : 'T t) ->
            Event.t_of_js TreeViewVisibilityChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3898)
                 "onDidChangeVisibility")
        let (message : 'T t -> string) =
          fun (x3901 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3901) "message")
        let (set_message : 'T t -> string -> unit) =
          fun (x3903 : 'T t) ->
            fun (x3904 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3903) "message"
                (Ojs.string_to_js x3904)
        let (title : 'T t -> string) =
          fun (x3906 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3906) "title")
        let (set_title : 'T t -> string -> unit) =
          fun (x3908 : 'T t) ->
            fun (x3909 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3908) "title"
                (Ojs.string_to_js x3909)
        let (description : 'T t -> string) =
          fun (x3911 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x3911) "description")
        let (set_description : 'T t -> string -> unit) =
          fun (x3913 : 'T t) ->
            fun (x3914 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x3913) "description"
                (Ojs.string_to_js x3914)
        module RevealOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x3917 : Ojs.t) -> x3917
            and t_to_js : t -> Ojs.t = fun (x3916 : Ojs.t) -> x3916
            let (select : t -> bool) =
              fun (x3918 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3918) "select")
            let (set_select : t -> bool -> unit) =
              fun (x3919 : t) ->
                fun (x3920 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3919) "select"
                    (Ojs.bool_to_js x3920)
            let (focus : t -> bool) =
              fun (x3921 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3921) "focus")
            let (set_focus : t -> bool -> unit) =
              fun (x3922 : t) ->
                fun (x3923 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x3922) "focus"
                    (Ojs.bool_to_js x3923)
            let (expand : t -> bool or_number) =
              fun (x3924 : t) ->
                or_number_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x3924) "expand")
            let (set_expand : t -> bool or_number -> unit) =
              fun (x3926 : t) ->
                fun (x3927 : bool or_number) ->
                  Ojs.set_prop_ascii (t_to_js x3926) "expand"
                    (or_number_to_js Ojs.bool_to_js x3927)
          end
        let (reveal :
          'T t -> 'T -> ?options:RevealOptions.t -> unit -> unit Promise.t) =
          fun (x3933 : 'T t) ->
            fun (x3929 : 'T) ->
              fun ?options:(x3930 : RevealOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x3935 = t_to_js Obj.magic x3933 in
                     Ojs.call (Ojs.get_prop_ascii x3935 "reveal") "apply"
                       [|x3935;((let x3931 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3931 "push"
                                      [|(Obj.magic x3929)|]);
                                 (match x3930 with
                                  | Some x3932 ->
                                      ignore
                                        (Ojs.call x3931 "push"
                                           [|(RevealOptions.t_to_js x3932)|])
                                  | None -> ());
                                 x3931))|])
      end
    module Window =
      struct
        let (active_text_editor : TextEditor.t or_undefined) =
          or_undefined_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTextEditor")
        let (visible_text_editors : TextEditor.t list) =
          Ojs.list_of_js TextEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "visibleTextEditors")
        let (on_did_change_active_text_editor :
          TextEditor.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x3939 : Ojs.t) ->
               or_undefined_of_js TextEditor.t_of_js x3939)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTextEditor")
        let (on_did_change_visible_text_editors : TextEditor.t list Event.t)
          =
          Event.t_of_js
            (fun (x3941 : Ojs.t) -> Ojs.list_of_js TextEditor.t_of_js x3941)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeVisibleTextEditors")
        let (on_did_change_text_editor_selection :
          TextEditorSelectionChangeEvent.t Event.t) =
          Event.t_of_js TextEditorSelectionChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorSelection")
        let (on_did_change_text_editor_visible_ranges :
          TextEditorVisibleRangesChangeEvent.t Event.t) =
          Event.t_of_js TextEditorVisibleRangesChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorVisibleRanges")
        let (on_did_change_text_editor_options :
          TextEditorOptionsChangeEvent.t Event.t) =
          Event.t_of_js TextEditorOptionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorOptions")
        let (on_did_change_text_editor_view_column :
          TextEditorViewColumnChangeEvent.t Event.t) =
          Event.t_of_js TextEditorViewColumnChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTextEditorViewColumn")
        let (terminals : Terminal.t list) =
          Ojs.list_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "terminals")
        let (active_terminal : Terminal.t or_undefined) =
          or_undefined_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeTerminal")
        let (on_did_change_active_terminal : Terminal.t or_undefined Event.t)
          =
          Event.t_of_js
            (fun (x3949 : Ojs.t) -> or_undefined_of_js Terminal.t_of_js x3949)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveTerminal")
        let (on_did_open_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidOpenTerminal")
        let (on_did_close_terminal : Terminal.t Event.t) =
          Event.t_of_js Terminal.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidCloseTerminal")
        let (state : WindowState.t) =
          WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "state")
        let (on_did_change_window_state : WindowState.t Event.t) =
          Event.t_of_js WindowState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeWindowState")
        let (show_text_document :
          TextDocument.t ->
            ?column:ViewColumn.t ->
              ?preserve_focus:bool -> unit -> TextEditor.t Promise.t)
          =
          fun (x3954 : TextDocument.t) ->
            fun ?column:(x3955 : ViewColumn.t option) ->
              fun ?preserve_focus:(x3956 : bool option) ->
                fun () ->
                  Promise.t_of_js TextEditor.t_of_js
                    (let x3960 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x3960 "showTextDocument")
                       "apply"
                       [|x3960;((let x3957 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3957 "push"
                                      [|(TextDocument.t_to_js x3954)|]);
                                 (match x3955 with
                                  | Some x3959 ->
                                      ignore
                                        (Ojs.call x3957 "push"
                                           [|(ViewColumn.t_to_js x3959)|])
                                  | None -> ());
                                 (match x3956 with
                                  | Some x3958 ->
                                      ignore
                                        (Ojs.call x3957 "push"
                                           [|(Ojs.bool_to_js x3958)|])
                                  | None -> ());
                                 x3957))|])
        let (show_text_document :
          TextDocument.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x3962 : TextDocument.t) ->
            fun ?options:(x3963 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x3966 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x3966 "showTextDocument")
                     "apply"
                     [|x3966;((let x3964 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3964 "push"
                                    [|(TextDocument.t_to_js x3962)|]);
                               (match x3963 with
                                | Some x3965 ->
                                    ignore
                                      (Ojs.call x3964 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x3965)|])
                                | None -> ());
                               x3964))|])
        let (show_text_document :
          Uri.t ->
            ?options:TextDocumentShowOptions.t ->
              unit -> TextEditor.t Promise.t)
          =
          fun (x3968 : Uri.t) ->
            fun ?options:(x3969 : TextDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js TextEditor.t_of_js
                  (let x3972 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x3972 "showTextDocument")
                     "apply"
                     [|x3972;((let x3970 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3970 "push"
                                    [|(Uri.t_to_js x3968)|]);
                               (match x3969 with
                                | Some x3971 ->
                                    ignore
                                      (Ojs.call x3970 "push"
                                         [|(TextDocumentShowOptions.t_to_js
                                              x3971)|])
                                | None -> ());
                               x3970))|])
        let (create_text_editor_decoration_type :
          DecorationRenderOptions.t -> TextEditorDecorationType.t) =
          fun (x3974 : DecorationRenderOptions.t) ->
            TextEditorDecorationType.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTextEditorDecorationType"
                 [|(DecorationRenderOptions.t_to_js x3974)|])
        let (show_information_message :
          string ->
            ?options:MessageOptions.t ->
              unit -> string or_undefined Promise.t)
          =
          fun (x3975 : string) ->
            fun ?options:(x3976 : MessageOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x3980 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x3980)
                  (let x3979 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call
                     (Ojs.get_prop_ascii x3979 "showInformationMessage")
                     "apply"
                     [|x3979;((let x3977 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3977 "push"
                                    [|(Ojs.string_to_js x3975)|]);
                               (match x3976 with
                                | Some x3978 ->
                                    ignore
                                      (Ojs.call x3977 "push"
                                         [|(MessageOptions.t_to_js x3978)|])
                                | None -> ());
                               x3977))|])
        let (show_information_message' :
          string ->
            ?options:MessageOptions.t ->
              items:'T list -> unit -> 'T or_undefined Promise.t)
          =
          fun (x3982 : string) ->
            fun ?options:(x3983 : MessageOptions.t option) ->
              fun ~items:(x3984 : 'T list) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x3989 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x3989)
                    (let x3988 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x3988 "showInformationMessage")
                       "apply"
                       [|x3988;((let x3985 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x3985 "push"
                                      [|(Ojs.string_to_js x3982)|]);
                                 (match x3983 with
                                  | Some x3987 ->
                                      ignore
                                        (Ojs.call x3985 "push"
                                           [|(MessageOptions.t_to_js x3987)|])
                                  | None -> ());
                                 List.iter
                                   (fun (x3986 : 'T) ->
                                      ignore
                                        (Ojs.call x3985 "push"
                                           [|(Obj.magic x3986)|])) x3984;
                                 x3985))|])
        let (show_warning_message :
          string ->
            ?options:MessageOptions.t ->
              unit -> string or_undefined Promise.t)
          =
          fun (x3991 : string) ->
            fun ?options:(x3992 : MessageOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x3996 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x3996)
                  (let x3995 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x3995 "showWarningMessage")
                     "apply"
                     [|x3995;((let x3993 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3993 "push"
                                    [|(Ojs.string_to_js x3991)|]);
                               (match x3992 with
                                | Some x3994 ->
                                    ignore
                                      (Ojs.call x3993 "push"
                                         [|(MessageOptions.t_to_js x3994)|])
                                | None -> ());
                               x3993))|])
        let (show_warning_message' :
          string ->
            ?options:MessageOptions.t ->
              items:'T list -> unit -> 'T or_undefined Promise.t)
          =
          fun (x3998 : string) ->
            fun ?options:(x3999 : MessageOptions.t option) ->
              fun ~items:(x4000 : 'T list) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4005 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4005)
                    (let x4004 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4004 "showWarningMessage")
                       "apply"
                       [|x4004;((let x4001 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4001 "push"
                                      [|(Ojs.string_to_js x3998)|]);
                                 (match x3999 with
                                  | Some x4003 ->
                                      ignore
                                        (Ojs.call x4001 "push"
                                           [|(MessageOptions.t_to_js x4003)|])
                                  | None -> ());
                                 List.iter
                                   (fun (x4002 : 'T) ->
                                      ignore
                                        (Ojs.call x4001 "push"
                                           [|(Obj.magic x4002)|])) x4000;
                                 x4001))|])
        let (show_error_message :
          string ->
            ?options:MessageOptions.t ->
              unit -> string or_undefined Promise.t)
          =
          fun (x4007 : string) ->
            fun ?options:(x4008 : MessageOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x4012 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x4012)
                  (let x4011 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4011 "showErrorMessage")
                     "apply"
                     [|x4011;((let x4009 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4009 "push"
                                    [|(Ojs.string_to_js x4007)|]);
                               (match x4008 with
                                | Some x4010 ->
                                    ignore
                                      (Ojs.call x4009 "push"
                                         [|(MessageOptions.t_to_js x4010)|])
                                | None -> ());
                               x4009))|])
        let (show_error_message' :
          string ->
            ?options:MessageOptions.t ->
              items:'T list -> unit -> 'T or_undefined Promise.t)
          =
          fun (x4014 : string) ->
            fun ?options:(x4015 : MessageOptions.t option) ->
              fun ~items:(x4016 : 'T list) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4021 : Ojs.t) ->
                       or_undefined_of_js Obj.magic x4021)
                    (let x4020 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4020 "showErrorMessage")
                       "apply"
                       [|x4020;((let x4017 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4017 "push"
                                      [|(Ojs.string_to_js x4014)|]);
                                 (match x4015 with
                                  | Some x4019 ->
                                      ignore
                                        (Ojs.call x4017 "push"
                                           [|(MessageOptions.t_to_js x4019)|])
                                  | None -> ());
                                 List.iter
                                   (fun (x4018 : 'T) ->
                                      ignore
                                        (Ojs.call x4017 "push"
                                           [|(Obj.magic x4018)|])) x4016;
                                 x4017))|])
        module ShowQuickPickOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4024 : Ojs.t) -> x4024
            and t_to_js : t -> Ojs.t = fun (x4023 : Ojs.t) -> x4023
            let (can_pick_many : t -> [ `L_b_true ]) =
              fun (x4025 : t) ->
                let x4026 = Ojs.get_prop_ascii (t_to_js x4025) "canPickMany" in
                match Ojs.bool_of_js x4026 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_can_pick_many : t -> [ `L_b_true ] -> unit) =
              fun (x4027 : t) ->
                fun (x4028 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x4027) "canPickMany"
                    (match x4028 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (show_quick_pick :
          (string list Promise.t, string) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> string list or_undefined Promise.t)
          =
          fun (x4029 : (string list Promise.t, string) or_array) ->
            fun
              ?options:(x4030 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4031 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4042 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4043 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x4043) x4042)
                    (let x4041 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4041 "showQuickPick")
                       "apply"
                       [|x4041;((let x4032 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4032 "push"
                                      [|(or_array_to_js
                                           (fun
                                              (x4037 : string list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4038 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4038)
                                                x4037) Ojs.string_to_js x4029)|]);
                                 (match x4030 with
                                  | Some x4034 ->
                                      ignore
                                        (Ojs.call x4032 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4034)|])
                                  | None -> ());
                                 (match x4031 with
                                  | Some x4033 ->
                                      ignore
                                        (Ojs.call x4032 "push"
                                           [|(CancellationToken.t_to_js x4033)|])
                                  | None -> ());
                                 x4032))|])
        let (show_quick_pick' :
          ('T list Promise.t, 'T) or_array ->
            ?options:(QuickPickOptions.t, ShowQuickPickOptions.t)
              intersection2 ->
              ?token:CancellationToken.t ->
                unit -> 'T list or_undefined Promise.t)
          =
          fun (x4045 : ('T list Promise.t, 'T) or_array) ->
            fun
              ?options:(x4046 :
                         (QuickPickOptions.t, ShowQuickPickOptions.t)
                           intersection2 option)
              ->
              fun ?token:(x4047 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js
                    (fun (x4058 : Ojs.t) ->
                       or_undefined_of_js
                         (fun (x4059 : Ojs.t) ->
                            Ojs.list_of_js Obj.magic x4059) x4058)
                    (let x4057 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4057 "showQuickPick")
                       "apply"
                       [|x4057;((let x4048 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4048 "push"
                                      [|(or_array_to_js
                                           (fun (x4053 : 'T list Promise.t)
                                              ->
                                              Promise.t_to_js
                                                (fun (x4054 : 'T list) ->
                                                   Ojs.list_to_js Obj.magic
                                                     x4054) x4053) Obj.magic
                                           x4045)|]);
                                 (match x4046 with
                                  | Some x4050 ->
                                      ignore
                                        (Ojs.call x4048 "push"
                                           [|(intersection2_to_js
                                                QuickPickOptions.t_to_js
                                                ShowQuickPickOptions.t_to_js
                                                x4050)|])
                                  | None -> ());
                                 (match x4047 with
                                  | Some x4049 ->
                                      ignore
                                        (Ojs.call x4048 "push"
                                           [|(CancellationToken.t_to_js x4049)|])
                                  | None -> ());
                                 x4048))|])
        let (show_workspace_folder_pick :
          ?options:WorkspaceFolderPickOptions.t ->
            unit -> WorkspaceFolder.t or_undefined Promise.t)
          =
          fun ?options:(x4061 : WorkspaceFolderPickOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4065 : Ojs.t) ->
                   or_undefined_of_js WorkspaceFolder.t_of_js x4065)
                (let x4064 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4064 "showWorkspaceFolderPick")
                   "apply"
                   [|x4064;((let x4062 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4061 with
                              | Some x4063 ->
                                  ignore
                                    (Ojs.call x4062 "push"
                                       [|(WorkspaceFolderPickOptions.t_to_js
                                            x4063)|])
                              | None -> ());
                             x4062))|])
        let (show_open_dialog :
          ?options:OpenDialogOptions.t ->
            unit -> Uri.t list or_undefined Promise.t)
          =
          fun ?options:(x4067 : OpenDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4071 : Ojs.t) ->
                   or_undefined_of_js
                     (fun (x4072 : Ojs.t) -> Ojs.list_of_js Uri.t_of_js x4072)
                     x4071)
                (let x4070 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4070 "showOpenDialog") "apply"
                   [|x4070;((let x4068 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4067 with
                              | Some x4069 ->
                                  ignore
                                    (Ojs.call x4068 "push"
                                       [|(OpenDialogOptions.t_to_js x4069)|])
                              | None -> ());
                             x4068))|])
        let (show_save_dialog :
          ?options:SaveDialogOptions.t ->
            unit -> Uri.t or_undefined Promise.t)
          =
          fun ?options:(x4074 : SaveDialogOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x4078 : Ojs.t) -> or_undefined_of_js Uri.t_of_js x4078)
                (let x4077 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x4077 "showSaveDialog") "apply"
                   [|x4077;((let x4075 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4074 with
                              | Some x4076 ->
                                  ignore
                                    (Ojs.call x4075 "push"
                                       [|(SaveDialogOptions.t_to_js x4076)|])
                              | None -> ());
                             x4075))|])
        let (show_input_box :
          ?options:InputBoxOptions.t ->
            ?token:CancellationToken.t ->
              unit -> string or_undefined Promise.t)
          =
          fun ?options:(x4080 : InputBoxOptions.t option) ->
            fun ?token:(x4081 : CancellationToken.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x4086 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x4086)
                  (let x4085 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4085 "showInputBox") "apply"
                     [|x4085;((let x4082 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4080 with
                                | Some x4084 ->
                                    ignore
                                      (Ojs.call x4082 "push"
                                         [|(InputBoxOptions.t_to_js x4084)|])
                                | None -> ());
                               (match x4081 with
                                | Some x4083 ->
                                    ignore
                                      (Ojs.call x4082 "push"
                                         [|(CancellationToken.t_to_js x4083)|])
                                | None -> ());
                               x4082))|])
        let (create_quick_pick : unit -> 'T QuickPick.t) =
          fun () ->
            QuickPick.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createQuickPick" [||])
        let (create_input_box : unit -> InputBox.t) =
          fun () ->
            InputBox.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createInputBox" [||])
        let (create_output_channel : name:string -> OutputChannel.t) =
          fun ~name:(x4089 : string) ->
            OutputChannel.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createOutputChannel" [|(Ojs.string_to_js x4089)|])
        module ProgressInfo =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4091 : Ojs.t) -> x4091
            and t_to_js : t -> Ojs.t = fun (x4090 : Ojs.t) -> x4090
            let (message : t -> string) =
              fun (x4092 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4092) "message")
            let (set_message : t -> string -> unit) =
              fun (x4093 : t) ->
                fun (x4094 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4093) "message"
                    (Ojs.string_to_js x4094)
            let (increment : t -> int) =
              fun (x4095 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x4095) "increment")
            let (set_increment : t -> int -> unit) =
              fun (x4096 : t) ->
                fun (x4097 : int) ->
                  Ojs.set_prop_ascii (t_to_js x4096) "increment"
                    (Ojs.int_to_js x4097)
          end
        module ViewColumnLike =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4099 : Ojs.t) -> x4099
            and t_to_js : t -> Ojs.t = fun (x4098 : Ojs.t) -> x4098
            let (view_column : t -> ViewColumn.t) =
              fun (x4100 : t) ->
                ViewColumn.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4100) "viewColumn")
            let (set_view_column : t -> ViewColumn.t -> unit) =
              fun (x4101 : t) ->
                fun (x4102 : ViewColumn.t) ->
                  Ojs.set_prop_ascii (t_to_js x4101) "viewColumn"
                    (ViewColumn.t_to_js x4102)
            let (preserve_focus : t -> bool) =
              fun (x4103 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4103) "preserveFocus")
            let (set_preserve_focus : t -> bool -> unit) =
              fun (x4104 : t) ->
                fun (x4105 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x4104) "preserveFocus"
                    (Ojs.bool_to_js x4105)
          end
        module RegisterCustomEditorProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4107 : Ojs.t) -> x4107
            and t_to_js : t -> Ojs.t = fun (x4106 : Ojs.t) -> x4106
            let (webview_options : t -> WebviewPanelOptions.t) =
              fun (x4108 : t) ->
                WebviewPanelOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4108) "webviewOptions")
            let (supports_multiple_editors_per_document : t -> bool) =
              fun (x4109 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4109)
                     "supportsMultipleEditorsPerDocument")
          end
        module WebviewOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4111 : Ojs.t) -> x4111
            and t_to_js : t -> Ojs.t = fun (x4110 : Ojs.t) -> x4110
            let (retain_context_when_hidden : t -> bool) =
              fun (x4112 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4112)
                     "retainContextWhenHidden")
          end
        module RegisterWebviewViewProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4114 : Ojs.t) -> x4114
            and t_to_js : t -> Ojs.t = fun (x4113 : Ojs.t) -> x4113
            let (webview_options : t -> WebviewOptions.t) =
              fun (x4115 : t) ->
                WebviewOptions.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x4115) "webviewOptions")
          end
        let (create_webview_panel :
          view_type_:string ->
            title:string ->
              show_options:((ViewColumn.t, ViewColumnLike.t) union2,
                [ `Active  | `Beside  | `Eight  | `Five  | `Four  | `Nine 
                | `One  | `Seven  | `Six  | `Three  | `Two ]) or_enum ->
                ?options:(WebviewPanelOptions.t, WebviewOptions.t)
                  intersection2 -> unit -> WebviewPanel.t)
          =
          fun ~view_type_:(x4116 : string) ->
            fun ~title:(x4117 : string) ->
              fun
                ~show_options:(x4118 :
                                ((ViewColumn.t, ViewColumnLike.t) union2,
                                  [ `Active  | `Beside  | `Eight  | `Five 
                                  | `Four  | `Nine  | `One  | `Seven  | 
                                    `Six 
                                  | `Three  | `Two ]) or_enum)
                ->
                fun
                  ?options:(x4119 :
                             (WebviewPanelOptions.t, WebviewOptions.t)
                               intersection2 option)
                  ->
                  fun () ->
                    WebviewPanel.t_of_js
                      (let x4128 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4128 "createWebviewPanel")
                         "apply"
                         [|x4128;((let x4120 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4120 "push"
                                        [|(Ojs.string_to_js x4116)|]);
                                   ignore
                                     (Ojs.call x4120 "push"
                                        [|(Ojs.string_to_js x4117)|]);
                                   ignore
                                     (Ojs.call x4120 "push"
                                        [|(or_enum_to_js
                                             (fun
                                                (x4124 :
                                                  (ViewColumn.t,
                                                    ViewColumnLike.t) union2)
                                                ->
                                                union2_to_js
                                                  ViewColumn.t_to_js
                                                  ViewColumnLike.t_to_js
                                                  x4124)
                                             (fun
                                                (x4127 :
                                                  [ `Active  | `Beside 
                                                  | `Eight  | `Five  | 
                                                    `Four 
                                                  | `Nine  | `One  | 
                                                    `Seven 
                                                  | `Six  | `Three  | 
                                                    `Two ])
                                                ->
                                                match x4127 with
                                                | `Active ->
                                                    Ojs.string_to_js "Active"
                                                | `Beside ->
                                                    Ojs.string_to_js "Beside"
                                                | `Eight ->
                                                    Ojs.string_to_js "Eight"
                                                | `Five ->
                                                    Ojs.string_to_js "Five"
                                                | `Four ->
                                                    Ojs.string_to_js "Four"
                                                | `Nine ->
                                                    Ojs.string_to_js "Nine"
                                                | `One ->
                                                    Ojs.string_to_js "One"
                                                | `Seven ->
                                                    Ojs.string_to_js "Seven"
                                                | `Six ->
                                                    Ojs.string_to_js "Six"
                                                | `Three ->
                                                    Ojs.string_to_js "Three"
                                                | `Two ->
                                                    Ojs.string_to_js "Two")
                                             x4118)|]);
                                   (match x4119 with
                                    | Some x4121 ->
                                        ignore
                                          (Ojs.call x4120 "push"
                                             [|(intersection2_to_js
                                                  WebviewPanelOptions.t_to_js
                                                  WebviewOptions.t_to_js
                                                  x4121)|])
                                    | None -> ());
                                   x4120))|])
        let (set_status_bar_message :
          text:string -> hide_after_timeout:int -> Disposable.t) =
          fun ~text:(x4129 : string) ->
            fun ~hide_after_timeout:(x4130 : int) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4129);(Ojs.int_to_js x4130)|])
        let (set_status_bar_message :
          text:string -> hide_when_done:any Promise.t -> Disposable.t) =
          fun ~text:(x4131 : string) ->
            fun ~hide_when_done:(x4132 : any Promise.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "setStatusBarMessage"
                   [|(Ojs.string_to_js x4131);(Promise.t_to_js any_to_js
                                                 x4132)|])
        let (set_status_bar_message : text:string -> Disposable.t) =
          fun ~text:(x4134 : string) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "setStatusBarMessage" [|(Ojs.string_to_js x4134)|])
        let (with_scm_progress :
          task:(progress:int Progress.t -> 'R Promise.t) -> 'R Promise.t) =
          fun ~task:(x4135 : progress:int Progress.t -> 'R Promise.t) ->
            Promise.t_of_js Obj.magic
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "withScmProgress"
                 [|(Ojs.fun_to_js 1
                      (fun (x4136 : Ojs.t) ->
                         Promise.t_to_js Obj.magic
                           (x4135
                              ~progress:(Progress.t_of_js Ojs.int_of_js x4136))))|])
        let (with_progress :
          options:ProgressOptions.t ->
            task:(progress:ProgressInfo.t Progress.t ->
                    token:CancellationToken.t -> 'R Promise.t)
              -> 'R Promise.t)
          =
          fun ~options:(x4140 : ProgressOptions.t) ->
            fun
              ~task:(x4141 :
                      progress:ProgressInfo.t Progress.t ->
                        token:CancellationToken.t -> 'R Promise.t)
              ->
              Promise.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "withProgress"
                   [|(ProgressOptions.t_to_js x4140);(Ojs.fun_to_js 2
                                                        (fun (x4142 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x4144 : Ojs.t)
                                                             ->
                                                             Promise.t_to_js
                                                               Obj.magic
                                                               (x4141
                                                                  ~progress:(
                                                                  Progress.t_of_js
                                                                    ProgressInfo.t_of_js
                                                                    x4142)
                                                                  ~token:(
                                                                  CancellationToken.t_of_js
                                                                    x4144))))|])
        let (create_status_bar_item :
          ?alignment:StatusBarAlignment.t ->
            ?priority:int -> unit -> StatusBarItem.t)
          =
          fun ?alignment:(x4147 : StatusBarAlignment.t option) ->
            fun ?priority:(x4148 : int option) ->
              fun () ->
                StatusBarItem.t_of_js
                  (let x4152 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x4152 "createStatusBarItem")
                     "apply"
                     [|x4152;((let x4149 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4147 with
                                | Some x4151 ->
                                    ignore
                                      (Ojs.call x4149 "push"
                                         [|(StatusBarAlignment.t_to_js x4151)|])
                                | None -> ());
                               (match x4148 with
                                | Some x4150 ->
                                    ignore
                                      (Ojs.call x4149 "push"
                                         [|(Ojs.int_to_js x4150)|])
                                | None -> ());
                               x4149))|])
        let (create_terminal :
          ?name:string ->
            ?shell_path:string ->
              ?shell_args:string list or_string -> unit -> Terminal.t)
          =
          fun ?name:(x4153 : string option) ->
            fun ?shell_path:(x4154 : string option) ->
              fun ?shell_args:(x4155 : string list or_string option) ->
                fun () ->
                  Terminal.t_of_js
                    (let x4162 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call (Ojs.get_prop_ascii x4162 "createTerminal")
                       "apply"
                       [|x4162;((let x4156 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x4153 with
                                  | Some x4161 ->
                                      ignore
                                        (Ojs.call x4156 "push"
                                           [|(Ojs.string_to_js x4161)|])
                                  | None -> ());
                                 (match x4154 with
                                  | Some x4160 ->
                                      ignore
                                        (Ojs.call x4156 "push"
                                           [|(Ojs.string_to_js x4160)|])
                                  | None -> ());
                                 (match x4155 with
                                  | Some x4157 ->
                                      ignore
                                        (Ojs.call x4156 "push"
                                           [|(or_string_to_js
                                                (fun (x4158 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x4158)
                                                x4157)|])
                                  | None -> ());
                                 x4156))|])
        let (create_terminal : options:TerminalOptions.t -> Terminal.t) =
          fun ~options:(x4163 : TerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal" [|(TerminalOptions.t_to_js x4163)|])
        let (create_terminal :
          options:ExtensionTerminalOptions.t -> Terminal.t) =
          fun ~options:(x4164 : ExtensionTerminalOptions.t) ->
            Terminal.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "createTerminal"
                 [|(ExtensionTerminalOptions.t_to_js x4164)|])
        let (register_tree_data_provider :
          string -> 'T TreeDataProvider.t -> Disposable.t) =
          fun (x4165 : string) ->
            fun (x4166 : 'T TreeDataProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerTreeDataProvider"
                   [|(Ojs.string_to_js x4165);(TreeDataProvider.t_to_js
                                                 Obj.magic x4166)|])
        let (create_tree_view :
          string -> options:'T TreeViewOptions.t -> 'T TreeView.t) =
          fun (x4168 : string) ->
            fun ~options:(x4169 : 'T TreeViewOptions.t) ->
              TreeView.t_of_js Obj.magic
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "createTreeView"
                   [|(Ojs.string_to_js x4168);(TreeViewOptions.t_to_js
                                                 Obj.magic x4169)|])
        let (register_uri_handler : handler:UriHandler.t -> Disposable.t) =
          fun ~handler:(x4172 : UriHandler.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerUriHandler" [|(UriHandler.t_to_js x4172)|])
        let (register_webview_panel_serializer :
          string -> unknown WebviewPanelSerializer.t -> Disposable.t) =
          fun (x4173 : string) ->
            fun (x4174 : unknown WebviewPanelSerializer.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "window")
                   "registerWebviewPanelSerializer"
                   [|(Ojs.string_to_js x4173);(WebviewPanelSerializer.t_to_js
                                                 unknown_to_js x4174)|])
        let (register_webview_view_provider :
          string ->
            WebviewViewProvider.t ->
              ?options:RegisterWebviewViewProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4176 : string) ->
            fun (x4177 : WebviewViewProvider.t) ->
              fun
                ?options:(x4178 :
                           RegisterWebviewViewProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4181 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4181
                          "registerWebviewViewProvider") "apply"
                       [|x4181;((let x4179 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4179 "push"
                                      [|(Ojs.string_to_js x4176)|]);
                                 ignore
                                   (Ojs.call x4179 "push"
                                      [|(WebviewViewProvider.t_to_js x4177)|]);
                                 (match x4178 with
                                  | Some x4180 ->
                                      ignore
                                        (Ojs.call x4179 "push"
                                           [|(RegisterWebviewViewProviderOptions.t_to_js
                                                x4180)|])
                                  | None -> ());
                                 x4179))|])
        let (register_custom_editor_provider :
          string ->
            (CustomDocument.t CustomEditorProvider.t,
              CustomDocument.t CustomReadonlyEditorProvider.t,
              CustomTextEditorProvider.t) union3 ->
              ?options:RegisterCustomEditorProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun (x4182 : string) ->
            fun
              (x4183 :
                (CustomDocument.t CustomEditorProvider.t,
                  CustomDocument.t CustomReadonlyEditorProvider.t,
                  CustomTextEditorProvider.t) union3)
              ->
              fun
                ?options:(x4184 :
                           RegisterCustomEditorProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4192 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4192
                          "registerCustomEditorProvider") "apply"
                       [|x4192;((let x4185 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4185 "push"
                                      [|(Ojs.string_to_js x4182)|]);
                                 ignore
                                   (Ojs.call x4185 "push"
                                      [|(union3_to_js
                                           (fun
                                              (x4187 :
                                                CustomDocument.t
                                                  CustomEditorProvider.t)
                                              ->
                                              CustomEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4187)
                                           (fun
                                              (x4189 :
                                                CustomDocument.t
                                                  CustomReadonlyEditorProvider.t)
                                              ->
                                              CustomReadonlyEditorProvider.t_to_js
                                                CustomDocument.t_to_js x4189)
                                           CustomTextEditorProvider.t_to_js
                                           x4183)|]);
                                 (match x4184 with
                                  | Some x4186 ->
                                      ignore
                                        (Ojs.call x4185 "push"
                                           [|(RegisterCustomEditorProviderOptions.t_to_js
                                                x4186)|])
                                  | None -> ());
                                 x4185))|])
        let (register_terminal_link_provider :
          TerminalLink.t TerminalLinkProvider.t -> Disposable.t) =
          fun (x4193 : TerminalLink.t TerminalLinkProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerTerminalLinkProvider"
                 [|(TerminalLinkProvider.t_to_js TerminalLink.t_to_js x4193)|])
        let (register_file_decoration_provider :
          FileDecorationProvider.t -> Disposable.t) =
          fun (x4195 : FileDecorationProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "window")
                 "registerFileDecorationProvider"
                 [|(FileDecorationProvider.t_to_js x4195)|])
        let (active_color_theme : ColorTheme.t) =
          ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeColorTheme")
        let (on_did_change_active_color_theme : ColorTheme.t Event.t) =
          Event.t_of_js ColorTheme.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveColorTheme")
      end
    module TextDocumentContentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4198 : Ojs.t) -> x4198
        and t_to_js : t -> Ojs.t = fun (x4197 : Ojs.t) -> x4197
        let (range : t -> Range.t) =
          fun (x4199 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4199) "range")
        let (range_offset : t -> int) =
          fun (x4200 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4200) "rangeOffset")
        let (range_length : t -> int) =
          fun (x4201 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4201) "rangeLength")
        let (text : t -> string) =
          fun (x4202 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4202) "text")
      end
    module TextDocumentChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4204 : Ojs.t) -> x4204
        and t_to_js : t -> Ojs.t = fun (x4203 : Ojs.t) -> x4203
        let (document : t -> TextDocument.t) =
          fun (x4205 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4205) "document")
        let (content_changes : t -> TextDocumentContentChangeEvent.t list) =
          fun (x4206 : t) ->
            Ojs.list_of_js TextDocumentContentChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4206) "contentChanges")
      end
    module TextDocumentSaveReason =
      struct
        type t = [ `AfterDelay  | `FocusOut ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4209 : Ojs.t) ->
            let x4210 = x4209 in
            match Ojs.int_of_js x4210 with
            | 2 -> `AfterDelay
            | 3 -> `FocusOut
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4208 : [ `AfterDelay  | `FocusOut ]) ->
            match x4208 with
            | `AfterDelay -> Ojs.int_to_js 2
            | `FocusOut -> Ojs.int_to_js 3
      end
    module TextDocumentWillSaveEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4212 : Ojs.t) -> x4212
        and t_to_js : t -> Ojs.t = fun (x4211 : Ojs.t) -> x4211
        let (document : t -> TextDocument.t) =
          fun (x4213 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4213) "document")
        let (reason : t -> TextDocumentSaveReason.t) =
          fun (x4214 : t) ->
            TextDocumentSaveReason.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4214) "reason")
        let (wait_until : t -> TextEdit.t list Promise.t -> unit) =
          fun (x4218 : t) ->
            fun (x4215 : TextEdit.t list Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4218) "waitUntil"
                   [|(Promise.t_to_js
                        (fun (x4216 : TextEdit.t list) ->
                           Ojs.list_to_js TextEdit.t_to_js x4216) x4215)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4221 : t) ->
            fun (x4219 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4221) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4219)|])
      end
    module FileWillCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4223 : Ojs.t) -> x4223
        and t_to_js : t -> Ojs.t = fun (x4222 : Ojs.t) -> x4222
        let (files : t -> Uri.t list) =
          fun (x4224 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4224) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4228 : t) ->
            fun (x4226 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4228) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4226)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4231 : t) ->
            fun (x4229 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4231) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4229)|])
      end
    module FileCreateEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4233 : Ojs.t) -> x4233
        and t_to_js : t -> Ojs.t = fun (x4232 : Ojs.t) -> x4232
        let (files : t -> Uri.t list) =
          fun (x4234 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4234) "files")
      end
    module FileWillDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4237 : Ojs.t) -> x4237
        and t_to_js : t -> Ojs.t = fun (x4236 : Ojs.t) -> x4236
        let (files : t -> Uri.t list) =
          fun (x4238 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4238) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4242 : t) ->
            fun (x4240 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4242) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4240)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4245 : t) ->
            fun (x4243 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4245) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4243)|])
      end
    module FileDeleteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4247 : Ojs.t) -> x4247
        and t_to_js : t -> Ojs.t = fun (x4246 : Ojs.t) -> x4246
        let (files : t -> Uri.t list) =
          fun (x4248 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4248) "files")
      end
    module FileWillRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4251 : Ojs.t) -> x4251
        and t_to_js : t -> Ojs.t = fun (x4250 : Ojs.t) -> x4250
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4253 : Ojs.t) -> x4253
            and t_to_js : t -> Ojs.t = fun (x4252 : Ojs.t) -> x4252
            let (old_uri : t -> Uri.t) =
              fun (x4254 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4254) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4255 : t) ->
                fun (x4256 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4255) "oldUri"
                    (Uri.t_to_js x4256)
            let (new_uri : t -> Uri.t) =
              fun (x4257 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4257) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4258 : t) ->
                fun (x4259 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4258) "newUri"
                    (Uri.t_to_js x4259)
          end
        let (files : t -> File.t list) =
          fun (x4260 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4260) "files")
        let (wait_until : t -> WorkspaceEdit.t Promise.t -> unit) =
          fun (x4264 : t) ->
            fun (x4262 : WorkspaceEdit.t Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4264) "waitUntil"
                   [|(Promise.t_to_js WorkspaceEdit.t_to_js x4262)|])
        let (wait_until' : t -> any Promise.t -> unit) =
          fun (x4267 : t) ->
            fun (x4265 : any Promise.t) ->
              ignore
                (Ojs.call (t_to_js x4267) "waitUntil"
                   [|(Promise.t_to_js any_to_js x4265)|])
      end
    module FileRenameEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4269 : Ojs.t) -> x4269
        and t_to_js : t -> Ojs.t = fun (x4268 : Ojs.t) -> x4268
        module File =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4271 : Ojs.t) -> x4271
            and t_to_js : t -> Ojs.t = fun (x4270 : Ojs.t) -> x4270
            let (old_uri : t -> Uri.t) =
              fun (x4272 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4272) "oldUri")
            let (set_old_uri : t -> Uri.t -> unit) =
              fun (x4273 : t) ->
                fun (x4274 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4273) "oldUri"
                    (Uri.t_to_js x4274)
            let (new_uri : t -> Uri.t) =
              fun (x4275 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4275) "newUri")
            let (set_new_uri : t -> Uri.t -> unit) =
              fun (x4276 : t) ->
                fun (x4277 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4276) "newUri"
                    (Uri.t_to_js x4277)
          end
        let (files : t -> File.t list) =
          fun (x4278 : t) ->
            Ojs.list_of_js File.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4278) "files")
      end
    module WorkspaceFoldersChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4281 : Ojs.t) -> x4281
        and t_to_js : t -> Ojs.t = fun (x4280 : Ojs.t) -> x4280
        let (added : t -> WorkspaceFolder.t list) =
          fun (x4282 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4282) "added")
        let (removed : t -> WorkspaceFolder.t list) =
          fun (x4284 : t) ->
            Ojs.list_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4284) "removed")
      end
    module UriWithLanguageId =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4287 : Ojs.t) -> x4287
        and t_to_js : t -> Ojs.t = fun (x4286 : Ojs.t) -> x4286
        let (uri : t -> Uri.t) =
          fun (x4288 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4288) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x4289 : t) ->
            fun (x4290 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4289) "uri" (Uri.t_to_js x4290)
        let (language_id : t -> string) =
          fun (x4291 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4291) "languageId")
        let (set_language_id : t -> string -> unit) =
          fun (x4292 : t) ->
            fun (x4293 : string) ->
              Ojs.set_prop_ascii (t_to_js x4292) "languageId"
                (Ojs.string_to_js x4293)
      end
    module ConfigurationScope =
      struct
        type t =
          (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
            union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4299 : Ojs.t) ->
            union4_of_js TextDocument.t_of_js Uri.t_of_js
              WorkspaceFolder.t_of_js UriWithLanguageId.t_of_js x4299
        and t_to_js : t -> Ojs.t =
          fun
            (x4294 :
              (TextDocument.t, Uri.t, WorkspaceFolder.t, UriWithLanguageId.t)
                union4)
            ->
            union4_to_js TextDocument.t_to_js Uri.t_to_js
              WorkspaceFolder.t_to_js UriWithLanguageId.t_to_js x4294
      end
    module ConfigurationChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4305 : Ojs.t) -> x4305
        and t_to_js : t -> Ojs.t = fun (x4304 : Ojs.t) -> x4304
        let (affects_configuration :
          t -> string -> ?scope:ConfigurationScope.t -> unit -> bool) =
          fun (x4310 : t) ->
            fun (x4306 : string) ->
              fun ?scope:(x4307 : ConfigurationScope.t option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x4311 = t_to_js x4310 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4311 "affectsConfiguration")
                       "apply"
                       [|x4311;((let x4308 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4308 "push"
                                      [|(Ojs.string_to_js x4306)|]);
                                 (match x4307 with
                                  | Some x4309 ->
                                      ignore
                                        (Ojs.call x4308 "push"
                                           [|(ConfigurationScope.t_to_js
                                                x4309)|])
                                  | None -> ());
                                 x4308))|])
      end
    module Workspace =
      struct
        module RegisterFileSystemProviderOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4313 : Ojs.t) -> x4313
            and t_to_js : t -> Ojs.t = fun (x4312 : Ojs.t) -> x4312
            let (is_case_sensitive : t -> bool) =
              fun (x4314 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4314) "isCaseSensitive")
            let (is_readonly : t -> bool) =
              fun (x4315 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x4315) "isReadonly")
          end
        module OpenTextDocumentOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4317 : Ojs.t) -> x4317
            and t_to_js : t -> Ojs.t = fun (x4316 : Ojs.t) -> x4316
            let (language : t -> string) =
              fun (x4318 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4318) "language")
            let (set_language : t -> string -> unit) =
              fun (x4319 : t) ->
                fun (x4320 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4319) "language"
                    (Ojs.string_to_js x4320)
            let (content : t -> string) =
              fun (x4321 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x4321) "content")
            let (set_content : t -> string -> unit) =
              fun (x4322 : t) ->
                fun (x4323 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4322) "content"
                    (Ojs.string_to_js x4323)
          end
        module WorkspaceFolder =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4325 : Ojs.t) -> x4325
            and t_to_js : t -> Ojs.t = fun (x4324 : Ojs.t) -> x4324
            let (uri : t -> Uri.t) =
              fun (x4326 : t) ->
                Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4326) "uri")
            let (set_uri : t -> Uri.t -> unit) =
              fun (x4327 : t) ->
                fun (x4328 : Uri.t) ->
                  Ojs.set_prop_ascii (t_to_js x4327) "uri"
                    (Uri.t_to_js x4328)
            let (name : t -> string) =
              fun (x4329 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4329) "name")
            let (set_name : t -> string -> unit) =
              fun (x4330 : t) ->
                fun (x4331 : string) ->
                  Ojs.set_prop_ascii (t_to_js x4330) "name"
                    (Ojs.string_to_js x4331)
          end
        let (fs : FileSystem.t) =
          FileSystem.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "fs")
        let (root_path : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "rootPath")
        let (workspace_folders : WorkspaceFolder.t list or_undefined) =
          or_undefined_of_js
            (fun (x4333 : Ojs.t) ->
               Ojs.list_of_js WorkspaceFolder.t_of_js x4333)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFolders")
        let (name : string or_undefined) =
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "name")
        let (workspace_file : Uri.t or_undefined) =
          or_undefined_of_js Uri.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "workspaceFile")
        let (on_did_change_workspace_folders :
          WorkspaceFoldersChangeEvent.t Event.t) =
          Event.t_of_js WorkspaceFoldersChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeWorkspaceFolders")
        let (get_workspace_folder :
          uri:Uri.t -> WorkspaceFolder.t or_undefined) =
          fun ~uri:(x4338 : Uri.t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "getWorkspaceFolder" [|(Uri.t_to_js x4338)|])
        let (as_relative_path :
          Uri.t or_string -> ?include_workspace_folder:bool -> unit -> string)
          =
          fun (x4340 : Uri.t or_string) ->
            fun ?include_workspace_folder:(x4341 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x4345 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4345 "asRelativePath")
                     "apply"
                     [|x4345;((let x4342 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4342 "push"
                                    [|(or_string_to_js Uri.t_to_js x4340)|]);
                               (match x4341 with
                                | Some x4343 ->
                                    ignore
                                      (Ojs.call x4342 "push"
                                         [|(Ojs.bool_to_js x4343)|])
                                | None -> ());
                               x4342))|])
        let (update_workspace_folders :
          start:int ->
            delete_count:int or_null_or_undefined ->
              workspace_folders_to_add:WorkspaceFolder.t list -> bool)
          =
          fun ~start:(x4346 : int) ->
            fun ~delete_count:(x4347 : int or_null_or_undefined) ->
              fun ~workspace_folders_to_add:(x4348 : WorkspaceFolder.t list)
                ->
                Ojs.bool_of_js
                  (let x4352 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4352 "updateWorkspaceFolders")
                     "apply"
                     [|x4352;((let x4349 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4349 "push"
                                    [|(Ojs.int_to_js x4346)|]);
                               ignore
                                 (Ojs.call x4349 "push"
                                    [|(or_null_or_undefined_to_js
                                         Ojs.int_to_js x4347)|]);
                               List.iter
                                 (fun (x4350 : WorkspaceFolder.t) ->
                                    ignore
                                      (Ojs.call x4349 "push"
                                         [|(WorkspaceFolder.t_to_js x4350)|]))
                                 x4348;
                               x4349))|])
        let (create_file_system_watcher :
          GlobPattern.t ->
            ?ignore_create_events:bool ->
              ?ignore_change_events:bool ->
                ?ignore_delete_events:bool -> unit -> FileSystemWatcher.t)
          =
          fun (x4353 : GlobPattern.t) ->
            fun ?ignore_create_events:(x4354 : bool option) ->
              fun ?ignore_change_events:(x4355 : bool option) ->
                fun ?ignore_delete_events:(x4356 : bool option) ->
                  fun () ->
                    FileSystemWatcher.t_of_js
                      (let x4361 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call
                         (Ojs.get_prop_ascii x4361 "createFileSystemWatcher")
                         "apply"
                         [|x4361;((let x4357 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4357 "push"
                                        [|(GlobPattern.t_to_js x4353)|]);
                                   (match x4354 with
                                    | Some x4360 ->
                                        ignore
                                          (Ojs.call x4357 "push"
                                             [|(Ojs.bool_to_js x4360)|])
                                    | None -> ());
                                   (match x4355 with
                                    | Some x4359 ->
                                        ignore
                                          (Ojs.call x4357 "push"
                                             [|(Ojs.bool_to_js x4359)|])
                                    | None -> ());
                                   (match x4356 with
                                    | Some x4358 ->
                                        ignore
                                          (Ojs.call x4357 "push"
                                             [|(Ojs.bool_to_js x4358)|])
                                    | None -> ());
                                   x4357))|])
        let (find_files :
          GlobPattern.t ->
            ?exclude:GlobPattern.t or_null ->
              ?max_results:int ->
                ?token:CancellationToken.t -> unit -> Uri.t list Promise.t)
          =
          fun (x4362 : GlobPattern.t) ->
            fun ?exclude:(x4363 : GlobPattern.t or_null option) ->
              fun ?max_results:(x4364 : int option) ->
                fun ?token:(x4365 : CancellationToken.t option) ->
                  fun () ->
                    Promise.t_of_js
                      (fun (x4372 : Ojs.t) ->
                         Ojs.list_of_js Uri.t_of_js x4372)
                      (let x4371 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call (Ojs.get_prop_ascii x4371 "findFiles")
                         "apply"
                         [|x4371;((let x4366 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4366 "push"
                                        [|(GlobPattern.t_to_js x4362)|]);
                                   (match x4363 with
                                    | Some x4369 ->
                                        ignore
                                          (Ojs.call x4366 "push"
                                             [|(or_null_to_js
                                                  GlobPattern.t_to_js x4369)|])
                                    | None -> ());
                                   (match x4364 with
                                    | Some x4368 ->
                                        ignore
                                          (Ojs.call x4366 "push"
                                             [|(Ojs.int_to_js x4368)|])
                                    | None -> ());
                                   (match x4365 with
                                    | Some x4367 ->
                                        ignore
                                          (Ojs.call x4366 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4367)|])
                                    | None -> ());
                                   x4366))|])
        let (save_all : ?include_untitled:bool -> unit -> bool Promise.t) =
          fun ?include_untitled:(x4374 : bool option) ->
            fun () ->
              Promise.t_of_js Ojs.bool_of_js
                (let x4377 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x4377 "saveAll") "apply"
                   [|x4377;((let x4375 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4374 with
                              | Some x4376 ->
                                  ignore
                                    (Ojs.call x4375 "push"
                                       [|(Ojs.bool_to_js x4376)|])
                              | None -> ());
                             x4375))|])
        let (apply_edit : WorkspaceEdit.t -> bool Promise.t) =
          fun (x4379 : WorkspaceEdit.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "applyEdit" [|(WorkspaceEdit.t_to_js x4379)|])
        let (text_documents : TextDocument.t list) =
          Ojs.list_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "textDocuments")
        let (open_text_document : Uri.t -> TextDocument.t Promise.t) =
          fun (x4382 : Uri.t) ->
            Promise.t_of_js TextDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "openTextDocument" [|(Uri.t_to_js x4382)|])
        let (open_text_document : string -> TextDocument.t Promise.t) =
          fun (x4384 : string) ->
            Promise.t_of_js TextDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "openTextDocument" [|(Ojs.string_to_js x4384)|])
        let (open_text_document :
          ?options:OpenTextDocumentOptions.t ->
            unit -> TextDocument.t Promise.t)
          =
          fun ?options:(x4386 : OpenTextDocumentOptions.t option) ->
            fun () ->
              Promise.t_of_js TextDocument.t_of_js
                (let x4389 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x4389 "openTextDocument")
                   "apply"
                   [|x4389;((let x4387 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4386 with
                              | Some x4388 ->
                                  ignore
                                    (Ojs.call x4387 "push"
                                       [|(OpenTextDocumentOptions.t_to_js
                                            x4388)|])
                              | None -> ());
                             x4387))|])
        let (register_text_document_content_provider :
          scheme:string ->
            provider:TextDocumentContentProvider.t -> Disposable.t)
          =
          fun ~scheme:(x4391 : string) ->
            fun ~provider:(x4392 : TextDocumentContentProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTextDocumentContentProvider"
                   [|(Ojs.string_to_js x4391);(TextDocumentContentProvider.t_to_js
                                                 x4392)|])
        let (on_did_open_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidOpenTextDocument")
        let (on_did_close_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCloseTextDocument")
        let (on_did_change_text_document : TextDocumentChangeEvent.t Event.t)
          =
          Event.t_of_js TextDocumentChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeTextDocument")
        let (on_will_save_text_document :
          TextDocumentWillSaveEvent.t Event.t) =
          Event.t_of_js TextDocumentWillSaveEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillSaveTextDocument")
        let (on_did_save_text_document : TextDocument.t Event.t) =
          Event.t_of_js TextDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidSaveTextDocument")
        let (on_will_create_files : FileWillCreateEvent.t Event.t) =
          Event.t_of_js FileWillCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillCreateFiles")
        let (on_did_create_files : FileCreateEvent.t Event.t) =
          Event.t_of_js FileCreateEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidCreateFiles")
        let (on_will_delete_files : FileWillDeleteEvent.t Event.t) =
          Event.t_of_js FileWillDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillDeleteFiles")
        let (on_did_delete_files : FileDeleteEvent.t Event.t) =
          Event.t_of_js FileDeleteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidDeleteFiles")
        let (on_will_rename_files : FileWillRenameEvent.t Event.t) =
          Event.t_of_js FileWillRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onWillRenameFiles")
        let (on_did_rename_files : FileRenameEvent.t Event.t) =
          Event.t_of_js FileRenameEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidRenameFiles")
        let (get_configuration :
          ?section:string or_undefined ->
            ?scope:ConfigurationScope.t or_null ->
              unit -> WorkspaceConfiguration.t)
          =
          fun ?section:(x4404 : string or_undefined option) ->
            fun ?scope:(x4405 : ConfigurationScope.t or_null option) ->
              fun () ->
                WorkspaceConfiguration.t_of_js
                  (let x4411 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                   Ojs.call (Ojs.get_prop_ascii x4411 "getConfiguration")
                     "apply"
                     [|x4411;((let x4406 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x4404 with
                                | Some x4409 ->
                                    ignore
                                      (Ojs.call x4406 "push"
                                         [|(or_undefined_to_js
                                              Ojs.string_to_js x4409)|])
                                | None -> ());
                               (match x4405 with
                                | Some x4407 ->
                                    ignore
                                      (Ojs.call x4406 "push"
                                         [|(or_null_to_js
                                              ConfigurationScope.t_to_js
                                              x4407)|])
                                | None -> ());
                               x4406))|])
        let (on_did_change_configuration :
          ConfigurationChangeEvent.t Event.t) =
          Event.t_of_js ConfigurationChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeConfiguration")
        let (register_task_provider :
          type_:string -> provider:Task.t TaskProvider.t -> Disposable.t) =
          fun ~type_:(x4413 : string) ->
            fun ~provider:(x4414 : Task.t TaskProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTaskProvider"
                   [|(Ojs.string_to_js x4413);(TaskProvider.t_to_js
                                                 Task.t_to_js x4414)|])
        let (register_file_system_provider :
          scheme:string ->
            provider:FileSystemProvider.t ->
              ?options:RegisterFileSystemProviderOptions.t ->
                unit -> Disposable.t)
          =
          fun ~scheme:(x4416 : string) ->
            fun ~provider:(x4417 : FileSystemProvider.t) ->
              fun
                ?options:(x4418 : RegisterFileSystemProviderOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4421 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "workspace" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4421 "registerFileSystemProvider")
                       "apply"
                       [|x4421;((let x4419 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4419 "push"
                                      [|(Ojs.string_to_js x4416)|]);
                                 ignore
                                   (Ojs.call x4419 "push"
                                      [|(FileSystemProvider.t_to_js x4417)|]);
                                 (match x4418 with
                                  | Some x4420 ->
                                      ignore
                                        (Ojs.call x4419 "push"
                                           [|(RegisterFileSystemProviderOptions.t_to_js
                                                x4420)|])
                                  | None -> ());
                                 x4419))|])
      end
    module Languages =
      struct
        let (get_languages : unit -> string list Promise.t) =
          fun () ->
            Promise.t_of_js
              (fun (x4422 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4422)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getLanguages" [||])
        let (set_text_document_language :
          document:TextDocument.t ->
            language_id:string -> TextDocument.t Promise.t)
          =
          fun ~document:(x4424 : TextDocument.t) ->
            fun ~language_id:(x4425 : string) ->
              Promise.t_of_js TextDocument.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setTextDocumentLanguage"
                   [|(TextDocument.t_to_js x4424);(Ojs.string_to_js x4425)|])
        let (match_ :
          selector:DocumentSelector.t -> document:TextDocument.t -> int) =
          fun ~selector:(x4427 : DocumentSelector.t) ->
            fun ~document:(x4428 : TextDocument.t) ->
              Ojs.int_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "match"
                   [|(DocumentSelector.t_to_js x4427);(TextDocument.t_to_js
                                                         x4428)|])
        let (on_did_change_diagnostics : DiagnosticChangeEvent.t Event.t) =
          Event.t_of_js DiagnosticChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "languages") "onDidChangeDiagnostics")
        let (get_diagnostics : resource:Uri.t -> Diagnostic.t list) =
          fun ~resource:(x4430 : Uri.t) ->
            Ojs.list_of_js Diagnostic.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [|(Uri.t_to_js x4430)|])
        let (get_diagnostics : unit -> (Uri.t * Diagnostic.t list) list) =
          fun () ->
            Ojs.list_of_js
              (fun (x4432 : Ojs.t) ->
                 let x4433 = x4432 in
                 ((Uri.t_of_js (Ojs.array_get x4433 0)),
                   (Ojs.list_of_js Diagnostic.t_of_js (Ojs.array_get x4433 1))))
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "getDiagnostics" [||])
        let (create_diagnostic_collection :
          ?name:string -> unit -> DiagnosticCollection.t) =
          fun ?name:(x4435 : string option) ->
            fun () ->
              DiagnosticCollection.t_of_js
                (let x4438 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                 Ojs.call
                   (Ojs.get_prop_ascii x4438 "createDiagnosticCollection")
                   "apply"
                   [|x4438;((let x4436 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4435 with
                              | Some x4437 ->
                                  ignore
                                    (Ojs.call x4436 "push"
                                       [|(Ojs.string_to_js x4437)|])
                              | None -> ());
                             x4436))|])
        let (register_completion_item_provider :
          selector:DocumentSelector.t ->
            provider:CompletionItem.t CompletionItemProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4439 : DocumentSelector.t) ->
            fun ~provider:(x4440 : CompletionItem.t CompletionItemProvider.t)
              ->
              fun ~trigger_characters:(x4441 : string list) ->
                Disposable.t_of_js
                  (let x4445 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4445
                        "registerCompletionItemProvider") "apply"
                     [|x4445;((let x4442 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4442 "push"
                                    [|(DocumentSelector.t_to_js x4439)|]);
                               ignore
                                 (Ojs.call x4442 "push"
                                    [|(CompletionItemProvider.t_to_js
                                         CompletionItem.t_to_js x4440)|]);
                               List.iter
                                 (fun (x4443 : string) ->
                                    ignore
                                      (Ojs.call x4442 "push"
                                         [|(Ojs.string_to_js x4443)|])) x4441;
                               x4442))|])
        let (register_code_actions_provider :
          selector:DocumentSelector.t ->
            provider:CodeAction.t CodeActionProvider.t ->
              ?metadata:CodeActionProviderMetadata.t -> unit -> Disposable.t)
          =
          fun ~selector:(x4446 : DocumentSelector.t) ->
            fun ~provider:(x4447 : CodeAction.t CodeActionProvider.t) ->
              fun ?metadata:(x4448 : CodeActionProviderMetadata.t option) ->
                fun () ->
                  Disposable.t_of_js
                    (let x4452 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4452
                          "registerCodeActionsProvider") "apply"
                       [|x4452;((let x4449 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4449 "push"
                                      [|(DocumentSelector.t_to_js x4446)|]);
                                 ignore
                                   (Ojs.call x4449 "push"
                                      [|(CodeActionProvider.t_to_js
                                           CodeAction.t_to_js x4447)|]);
                                 (match x4448 with
                                  | Some x4450 ->
                                      ignore
                                        (Ojs.call x4449 "push"
                                           [|(CodeActionProviderMetadata.t_to_js
                                                x4450)|])
                                  | None -> ());
                                 x4449))|])
        let (register_code_lens_provider :
          selector:DocumentSelector.t ->
            provider:CodeLens.t CodeLensProvider.t -> Disposable.t)
          =
          fun ~selector:(x4453 : DocumentSelector.t) ->
            fun ~provider:(x4454 : CodeLens.t CodeLensProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCodeLensProvider"
                   [|(DocumentSelector.t_to_js x4453);(CodeLensProvider.t_to_js
                                                         CodeLens.t_to_js
                                                         x4454)|])
        let (register_definition_provider :
          selector:DocumentSelector.t ->
            provider:DefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4456 : DocumentSelector.t) ->
            fun ~provider:(x4457 : DefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4456);(DefinitionProvider.t_to_js
                                                         x4457)|])
        let (register_implementation_provider :
          selector:DocumentSelector.t ->
            provider:ImplementationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4458 : DocumentSelector.t) ->
            fun ~provider:(x4459 : ImplementationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerImplementationProvider"
                   [|(DocumentSelector.t_to_js x4458);(ImplementationProvider.t_to_js
                                                         x4459)|])
        let (register_type_definition_provider :
          selector:DocumentSelector.t ->
            provider:TypeDefinitionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4460 : DocumentSelector.t) ->
            fun ~provider:(x4461 : TypeDefinitionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerTypeDefinitionProvider"
                   [|(DocumentSelector.t_to_js x4460);(TypeDefinitionProvider.t_to_js
                                                         x4461)|])
        let (register_declaration_provider :
          selector:DocumentSelector.t ->
            provider:DeclarationProvider.t -> Disposable.t)
          =
          fun ~selector:(x4462 : DocumentSelector.t) ->
            fun ~provider:(x4463 : DeclarationProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDeclarationProvider"
                   [|(DocumentSelector.t_to_js x4462);(DeclarationProvider.t_to_js
                                                         x4463)|])
        let (register_hover_provider :
          selector:DocumentSelector.t ->
            provider:HoverProvider.t -> Disposable.t)
          =
          fun ~selector:(x4464 : DocumentSelector.t) ->
            fun ~provider:(x4465 : HoverProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerHoverProvider"
                   [|(DocumentSelector.t_to_js x4464);(HoverProvider.t_to_js
                                                         x4465)|])
        let (register_evaluatable_expression_provider :
          selector:DocumentSelector.t ->
            provider:EvaluatableExpressionProvider.t -> Disposable.t)
          =
          fun ~selector:(x4466 : DocumentSelector.t) ->
            fun ~provider:(x4467 : EvaluatableExpressionProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerEvaluatableExpressionProvider"
                   [|(DocumentSelector.t_to_js x4466);(EvaluatableExpressionProvider.t_to_js
                                                         x4467)|])
        let (register_inline_values_provider :
          selector:DocumentSelector.t ->
            provider:InlineValuesProvider.t -> Disposable.t)
          =
          fun ~selector:(x4468 : DocumentSelector.t) ->
            fun ~provider:(x4469 : InlineValuesProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerInlineValuesProvider"
                   [|(DocumentSelector.t_to_js x4468);(InlineValuesProvider.t_to_js
                                                         x4469)|])
        let (register_document_highlight_provider :
          selector:DocumentSelector.t ->
            provider:DocumentHighlightProvider.t -> Disposable.t)
          =
          fun ~selector:(x4470 : DocumentSelector.t) ->
            fun ~provider:(x4471 : DocumentHighlightProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentHighlightProvider"
                   [|(DocumentSelector.t_to_js x4470);(DocumentHighlightProvider.t_to_js
                                                         x4471)|])
        let (register_document_symbol_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSymbolProvider.t ->
              ?meta_data:DocumentSymbolProviderMetadata.t ->
                unit -> Disposable.t)
          =
          fun ~selector:(x4472 : DocumentSelector.t) ->
            fun ~provider:(x4473 : DocumentSymbolProvider.t) ->
              fun
                ?meta_data:(x4474 : DocumentSymbolProviderMetadata.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4477 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4477
                          "registerDocumentSymbolProvider") "apply"
                       [|x4477;((let x4475 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4475 "push"
                                      [|(DocumentSelector.t_to_js x4472)|]);
                                 ignore
                                   (Ojs.call x4475 "push"
                                      [|(DocumentSymbolProvider.t_to_js x4473)|]);
                                 (match x4474 with
                                  | Some x4476 ->
                                      ignore
                                        (Ojs.call x4475 "push"
                                           [|(DocumentSymbolProviderMetadata.t_to_js
                                                x4476)|])
                                  | None -> ());
                                 x4475))|])
        let (register_workspace_symbol_provider :
          provider:SymbolInformation.t WorkspaceSymbolProvider.t ->
            Disposable.t)
          =
          fun
            ~provider:(x4478 : SymbolInformation.t WorkspaceSymbolProvider.t)
            ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                 "registerWorkspaceSymbolProvider"
                 [|(WorkspaceSymbolProvider.t_to_js SymbolInformation.t_to_js
                      x4478)|])
        let (register_reference_provider :
          selector:DocumentSelector.t ->
            provider:ReferenceProvider.t -> Disposable.t)
          =
          fun ~selector:(x4480 : DocumentSelector.t) ->
            fun ~provider:(x4481 : ReferenceProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerReferenceProvider"
                   [|(DocumentSelector.t_to_js x4480);(ReferenceProvider.t_to_js
                                                         x4481)|])
        let (register_rename_provider :
          selector:DocumentSelector.t ->
            provider:RenameProvider.t -> Disposable.t)
          =
          fun ~selector:(x4482 : DocumentSelector.t) ->
            fun ~provider:(x4483 : RenameProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerRenameProvider"
                   [|(DocumentSelector.t_to_js x4482);(RenameProvider.t_to_js
                                                         x4483)|])
        let (register_document_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4484 : DocumentSelector.t) ->
            fun ~provider:(x4485 : DocumentSemanticTokensProvider.t) ->
              fun ~legend:(x4486 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4484);(DocumentSemanticTokensProvider.t_to_js
                                                           x4485);(SemanticTokensLegend.t_to_js
                                                                    x4486)|])
        let (register_document_range_semantic_tokens_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeSemanticTokensProvider.t ->
              legend:SemanticTokensLegend.t -> Disposable.t)
          =
          fun ~selector:(x4487 : DocumentSelector.t) ->
            fun ~provider:(x4488 : DocumentRangeSemanticTokensProvider.t) ->
              fun ~legend:(x4489 : SemanticTokensLegend.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerDocumentRangeSemanticTokensProvider"
                     [|(DocumentSelector.t_to_js x4487);(DocumentRangeSemanticTokensProvider.t_to_js
                                                           x4488);(SemanticTokensLegend.t_to_js
                                                                    x4489)|])
        let (register_document_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4490 : DocumentSelector.t) ->
            fun ~provider:(x4491 : DocumentFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4490);(DocumentFormattingEditProvider.t_to_js
                                                         x4491)|])
        let (register_document_range_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:DocumentRangeFormattingEditProvider.t -> Disposable.t)
          =
          fun ~selector:(x4492 : DocumentSelector.t) ->
            fun ~provider:(x4493 : DocumentRangeFormattingEditProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentRangeFormattingEditProvider"
                   [|(DocumentSelector.t_to_js x4492);(DocumentRangeFormattingEditProvider.t_to_js
                                                         x4493)|])
        let (register_on_type_formatting_edit_provider :
          selector:DocumentSelector.t ->
            provider:OnTypeFormattingEditProvider.t ->
              first_trigger_character:string ->
                more_trigger_character:string list -> Disposable.t)
          =
          fun ~selector:(x4494 : DocumentSelector.t) ->
            fun ~provider:(x4495 : OnTypeFormattingEditProvider.t) ->
              fun ~first_trigger_character:(x4496 : string) ->
                fun ~more_trigger_character:(x4497 : string list) ->
                  Disposable.t_of_js
                    (let x4500 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "languages" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4500
                          "registerOnTypeFormattingEditProvider") "apply"
                       [|x4500;((let x4498 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4498 "push"
                                      [|(DocumentSelector.t_to_js x4494)|]);
                                 ignore
                                   (Ojs.call x4498 "push"
                                      [|(OnTypeFormattingEditProvider.t_to_js
                                           x4495)|]);
                                 ignore
                                   (Ojs.call x4498 "push"
                                      [|(Ojs.string_to_js x4496)|]);
                                 List.iter
                                   (fun (x4499 : string) ->
                                      ignore
                                        (Ojs.call x4498 "push"
                                           [|(Ojs.string_to_js x4499)|]))
                                   x4497;
                                 x4498))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              trigger_characters:string list -> Disposable.t)
          =
          fun ~selector:(x4501 : DocumentSelector.t) ->
            fun ~provider:(x4502 : SignatureHelpProvider.t) ->
              fun ~trigger_characters:(x4503 : string list) ->
                Disposable.t_of_js
                  (let x4506 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "languages" in
                   Ojs.call
                     (Ojs.get_prop_ascii x4506
                        "registerSignatureHelpProvider") "apply"
                     [|x4506;((let x4504 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4504 "push"
                                    [|(DocumentSelector.t_to_js x4501)|]);
                               ignore
                                 (Ojs.call x4504 "push"
                                    [|(SignatureHelpProvider.t_to_js x4502)|]);
                               List.iter
                                 (fun (x4505 : string) ->
                                    ignore
                                      (Ojs.call x4504 "push"
                                         [|(Ojs.string_to_js x4505)|])) x4503;
                               x4504))|])
        let (register_signature_help_provider :
          selector:DocumentSelector.t ->
            provider:SignatureHelpProvider.t ->
              metadata:SignatureHelpProviderMetadata.t -> Disposable.t)
          =
          fun ~selector:(x4507 : DocumentSelector.t) ->
            fun ~provider:(x4508 : SignatureHelpProvider.t) ->
              fun ~metadata:(x4509 : SignatureHelpProviderMetadata.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                     "registerSignatureHelpProvider"
                     [|(DocumentSelector.t_to_js x4507);(SignatureHelpProvider.t_to_js
                                                           x4508);(SignatureHelpProviderMetadata.t_to_js
                                                                    x4509)|])
        let (register_document_link_provider :
          selector:DocumentSelector.t ->
            provider:DocumentLink.t DocumentLinkProvider.t -> Disposable.t)
          =
          fun ~selector:(x4510 : DocumentSelector.t) ->
            fun ~provider:(x4511 : DocumentLink.t DocumentLinkProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerDocumentLinkProvider"
                   [|(DocumentSelector.t_to_js x4510);(DocumentLinkProvider.t_to_js
                                                         DocumentLink.t_to_js
                                                         x4511)|])
        let (register_color_provider :
          selector:DocumentSelector.t ->
            provider:DocumentColorProvider.t -> Disposable.t)
          =
          fun ~selector:(x4513 : DocumentSelector.t) ->
            fun ~provider:(x4514 : DocumentColorProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerColorProvider"
                   [|(DocumentSelector.t_to_js x4513);(DocumentColorProvider.t_to_js
                                                         x4514)|])
        let (register_folding_range_provider :
          selector:DocumentSelector.t ->
            provider:FoldingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4515 : DocumentSelector.t) ->
            fun ~provider:(x4516 : FoldingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerFoldingRangeProvider"
                   [|(DocumentSelector.t_to_js x4515);(FoldingRangeProvider.t_to_js
                                                         x4516)|])
        let (register_selection_range_provider :
          selector:DocumentSelector.t ->
            provider:SelectionRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4517 : DocumentSelector.t) ->
            fun ~provider:(x4518 : SelectionRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerSelectionRangeProvider"
                   [|(DocumentSelector.t_to_js x4517);(SelectionRangeProvider.t_to_js
                                                         x4518)|])
        let (register_call_hierarchy_provider :
          selector:DocumentSelector.t ->
            provider:CallHierarchyProvider.t -> Disposable.t)
          =
          fun ~selector:(x4519 : DocumentSelector.t) ->
            fun ~provider:(x4520 : CallHierarchyProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerCallHierarchyProvider"
                   [|(DocumentSelector.t_to_js x4519);(CallHierarchyProvider.t_to_js
                                                         x4520)|])
        let (register_linked_editing_range_provider :
          selector:DocumentSelector.t ->
            provider:LinkedEditingRangeProvider.t -> Disposable.t)
          =
          fun ~selector:(x4521 : DocumentSelector.t) ->
            fun ~provider:(x4522 : LinkedEditingRangeProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerLinkedEditingRangeProvider"
                   [|(DocumentSelector.t_to_js x4521);(LinkedEditingRangeProvider.t_to_js
                                                         x4522)|])
        let (set_language_configuration :
          language:string ->
            configuration:LanguageConfiguration.t -> Disposable.t)
          =
          fun ~language:(x4523 : string) ->
            fun ~configuration:(x4524 : LanguageConfiguration.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "setLanguageConfiguration"
                   [|(Ojs.string_to_js x4523);(LanguageConfiguration.t_to_js
                                                 x4524)|])
      end
    module SourceControlInputBox =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4526 : Ojs.t) -> x4526
        and t_to_js : t -> Ojs.t = fun (x4525 : Ojs.t) -> x4525
        let (value : t -> string) =
          fun (x4527 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4527) "value")
        let (set_value : t -> string -> unit) =
          fun (x4528 : t) ->
            fun (x4529 : string) ->
              Ojs.set_prop_ascii (t_to_js x4528) "value"
                (Ojs.string_to_js x4529)
        let (placeholder : t -> string) =
          fun (x4530 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4530) "placeholder")
        let (set_placeholder : t -> string -> unit) =
          fun (x4531 : t) ->
            fun (x4532 : string) ->
              Ojs.set_prop_ascii (t_to_js x4531) "placeholder"
                (Ojs.string_to_js x4532)
        let (visible : t -> bool) =
          fun (x4533 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4533) "visible")
        let (set_visible : t -> bool -> unit) =
          fun (x4534 : t) ->
            fun (x4535 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4534) "visible"
                (Ojs.bool_to_js x4535)
      end
    module QuickDiffProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4537 : Ojs.t) -> x4537
        and t_to_js : t -> Ojs.t = fun (x4536 : Ojs.t) -> x4536
        let (provide_original_resource :
          t ->
            uri:Uri.t -> token:CancellationToken.t -> Uri.t ProviderResult.t)
          =
          fun (x4540 : t) ->
            fun ~uri:(x4538 : Uri.t) ->
              fun ~token:(x4539 : CancellationToken.t) ->
                ProviderResult.t_of_js Uri.t_of_js
                  (Ojs.call (t_to_js x4540) "provideOriginalResource"
                     [|(Uri.t_to_js x4538);(CancellationToken.t_to_js x4539)|])
      end
    module SourceControlResourceThemableDecorations =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4543 : Ojs.t) -> x4543
        and t_to_js : t -> Ojs.t = fun (x4542 : Ojs.t) -> x4542
        let (icon_path : t -> Uri.t or_string) =
          fun (x4544 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4544) "iconPath")
      end
    module SourceControlResourceDecorations =
      struct
        include struct include SourceControlResourceThemableDecorations end
        let (strike_through : t -> bool) =
          fun (x4546 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4546) "strikeThrough")
        let (faded : t -> bool) =
          fun (x4547 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4547) "faded")
        let (tooltip : t -> string) =
          fun (x4548 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4548) "tooltip")
        let (light : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4549 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4549) "light")
        let (dark : t -> SourceControlResourceThemableDecorations.t) =
          fun (x4550 : t) ->
            SourceControlResourceThemableDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4550) "dark")
      end
    module SourceControlResourceState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4552 : Ojs.t) -> x4552
        and t_to_js : t -> Ojs.t = fun (x4551 : Ojs.t) -> x4551
        let (resource_uri : t -> Uri.t) =
          fun (x4553 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4553) "resourceUri")
        let (command : t -> Command.t) =
          fun (x4554 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x4554) "command")
        let (decorations : t -> SourceControlResourceDecorations.t) =
          fun (x4555 : t) ->
            SourceControlResourceDecorations.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4555) "decorations")
        let (context_value : t -> string) =
          fun (x4556 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4556) "contextValue")
      end
    module SourceControlResourceGroup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4558 : Ojs.t) -> x4558
        and t_to_js : t -> Ojs.t = fun (x4557 : Ojs.t) -> x4557
        let (id : t -> string) =
          fun (x4559 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4559) "id")
        let (label : t -> string) =
          fun (x4560 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4560) "label")
        let (set_label : t -> string -> unit) =
          fun (x4561 : t) ->
            fun (x4562 : string) ->
              Ojs.set_prop_ascii (t_to_js x4561) "label"
                (Ojs.string_to_js x4562)
        let (hide_when_empty : t -> bool) =
          fun (x4563 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4563) "hideWhenEmpty")
        let (set_hide_when_empty : t -> bool -> unit) =
          fun (x4564 : t) ->
            fun (x4565 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4564) "hideWhenEmpty"
                (Ojs.bool_to_js x4565)
        let (resource_states : t -> SourceControlResourceState.t list) =
          fun (x4566 : t) ->
            Ojs.list_of_js SourceControlResourceState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4566) "resourceStates")
        let (set_resource_states :
          t -> SourceControlResourceState.t list -> unit) =
          fun (x4568 : t) ->
            fun (x4569 : SourceControlResourceState.t list) ->
              Ojs.set_prop_ascii (t_to_js x4568) "resourceStates"
                (Ojs.list_to_js SourceControlResourceState.t_to_js x4569)
        let (dispose : t -> unit) =
          fun (x4571 : t) -> ignore (Ojs.call (t_to_js x4571) "dispose" [||])
      end
    module SourceControl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4573 : Ojs.t) -> x4573
        and t_to_js : t -> Ojs.t = fun (x4572 : Ojs.t) -> x4572
        let (id : t -> string) =
          fun (x4574 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4574) "id")
        let (label : t -> string) =
          fun (x4575 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4575) "label")
        let (root_uri : t -> Uri.t or_undefined) =
          fun (x4576 : t) ->
            or_undefined_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4576) "rootUri")
        let (input_box : t -> SourceControlInputBox.t) =
          fun (x4578 : t) ->
            SourceControlInputBox.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4578) "inputBox")
        let (count : t -> int) =
          fun (x4579 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4579) "count")
        let (set_count : t -> int -> unit) =
          fun (x4580 : t) ->
            fun (x4581 : int) ->
              Ojs.set_prop_ascii (t_to_js x4580) "count"
                (Ojs.int_to_js x4581)
        let (quick_diff_provider : t -> QuickDiffProvider.t) =
          fun (x4582 : t) ->
            QuickDiffProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4582) "quickDiffProvider")
        let (set_quick_diff_provider : t -> QuickDiffProvider.t -> unit) =
          fun (x4583 : t) ->
            fun (x4584 : QuickDiffProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x4583) "quickDiffProvider"
                (QuickDiffProvider.t_to_js x4584)
        let (commit_template : t -> string) =
          fun (x4585 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4585) "commitTemplate")
        let (set_commit_template : t -> string -> unit) =
          fun (x4586 : t) ->
            fun (x4587 : string) ->
              Ojs.set_prop_ascii (t_to_js x4586) "commitTemplate"
                (Ojs.string_to_js x4587)
        let (accept_input_command : t -> Command.t) =
          fun (x4588 : t) ->
            Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4588) "acceptInputCommand")
        let (set_accept_input_command : t -> Command.t -> unit) =
          fun (x4589 : t) ->
            fun (x4590 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x4589) "acceptInputCommand"
                (Command.t_to_js x4590)
        let (status_bar_commands : t -> Command.t list) =
          fun (x4591 : t) ->
            Ojs.list_of_js Command.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4591) "statusBarCommands")
        let (set_status_bar_commands : t -> Command.t list -> unit) =
          fun (x4593 : t) ->
            fun (x4594 : Command.t list) ->
              Ojs.set_prop_ascii (t_to_js x4593) "statusBarCommands"
                (Ojs.list_to_js Command.t_to_js x4594)
        let (create_resource_group :
          t -> id:string -> label:string -> SourceControlResourceGroup.t) =
          fun (x4598 : t) ->
            fun ~id:(x4596 : string) ->
              fun ~label:(x4597 : string) ->
                SourceControlResourceGroup.t_of_js
                  (Ojs.call (t_to_js x4598) "createResourceGroup"
                     [|(Ojs.string_to_js x4596);(Ojs.string_to_js x4597)|])
        let (dispose : t -> unit) =
          fun (x4599 : t) -> ignore (Ojs.call (t_to_js x4599) "dispose" [||])
      end
    module Scm =
      struct
        let (input_box : SourceControlInputBox.t) =
          SourceControlInputBox.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "scm") "inputBox")
        let (create_source_control :
          id:string ->
            label:string -> ?root_uri:Uri.t -> unit -> SourceControl.t)
          =
          fun ~id:(x4600 : string) ->
            fun ~label:(x4601 : string) ->
              fun ?root_uri:(x4602 : Uri.t option) ->
                fun () ->
                  SourceControl.t_of_js
                    (let x4605 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "scm" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4605 "createSourceControl")
                       "apply"
                       [|x4605;((let x4603 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4603 "push"
                                      [|(Ojs.string_to_js x4600)|]);
                                 ignore
                                   (Ojs.call x4603 "push"
                                      [|(Ojs.string_to_js x4601)|]);
                                 (match x4602 with
                                  | Some x4604 ->
                                      ignore
                                        (Ojs.call x4603 "push"
                                           [|(Uri.t_to_js x4604)|])
                                  | None -> ());
                                 x4603))|])
      end
    module DebugProtocolMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4607 : Ojs.t) -> x4607
        and t_to_js : t -> Ojs.t = fun (x4606 : Ojs.t) -> x4606
      end
    module DebugProtocolSource =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4609 : Ojs.t) -> x4609
        and t_to_js : t -> Ojs.t = fun (x4608 : Ojs.t) -> x4608
      end
    module Breakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4611 : Ojs.t) -> x4611
        and t_to_js : t -> Ojs.t = fun (x4610 : Ojs.t) -> x4610
        let (id : t -> string) =
          fun (x4612 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4612) "id")
        let (enabled : t -> bool) =
          fun (x4613 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4613) "enabled")
        let (condition : t -> string) =
          fun (x4614 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4614) "condition")
        let (hit_condition : t -> string) =
          fun (x4615 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4615) "hitCondition")
        let (log_message : t -> string) =
          fun (x4616 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4616) "logMessage")
        let (create :
          ?enabled:bool ->
            ?condition:string ->
              ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ?enabled:(x4617 : bool option) ->
            fun ?condition:(x4618 : string option) ->
              fun ?hit_condition:(x4619 : string option) ->
                fun ?log_message:(x4620 : string option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "Breakpoint")
                         (let x4621 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x4617 with
                           | Some x4625 ->
                               ignore
                                 (Ojs.call x4621 "push"
                                    [|(Ojs.bool_to_js x4625)|])
                           | None -> ());
                          (match x4618 with
                           | Some x4624 ->
                               ignore
                                 (Ojs.call x4621 "push"
                                    [|(Ojs.string_to_js x4624)|])
                           | None -> ());
                          (match x4619 with
                           | Some x4623 ->
                               ignore
                                 (Ojs.call x4621 "push"
                                    [|(Ojs.string_to_js x4623)|])
                           | None -> ());
                          (match x4620 with
                           | Some x4622 ->
                               ignore
                                 (Ojs.call x4621 "push"
                                    [|(Ojs.string_to_js x4622)|])
                           | None -> ());
                          x4621))
      end
    module SourceBreakpoint =
      struct
        include struct include Breakpoint end
        let (location : t -> Location.t) =
          fun (x4626 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x4626) "location")
        let (create :
          location:Location.t ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~location:(x4627 : Location.t) ->
            fun ?enabled:(x4628 : bool option) ->
              fun ?condition:(x4629 : string option) ->
                fun ?hit_condition:(x4630 : string option) ->
                  fun ?log_message:(x4631 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "SourceBreakpoint")
                           (let x4632 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4632 "push"
                                 [|(Location.t_to_js x4627)|]);
                            (match x4628 with
                             | Some x4636 ->
                                 ignore
                                   (Ojs.call x4632 "push"
                                      [|(Ojs.bool_to_js x4636)|])
                             | None -> ());
                            (match x4629 with
                             | Some x4635 ->
                                 ignore
                                   (Ojs.call x4632 "push"
                                      [|(Ojs.string_to_js x4635)|])
                             | None -> ());
                            (match x4630 with
                             | Some x4634 ->
                                 ignore
                                   (Ojs.call x4632 "push"
                                      [|(Ojs.string_to_js x4634)|])
                             | None -> ());
                            (match x4631 with
                             | Some x4633 ->
                                 ignore
                                   (Ojs.call x4632 "push"
                                      [|(Ojs.string_to_js x4633)|])
                             | None -> ());
                            x4632))
      end
    module FunctionBreakpoint =
      struct
        include struct include Breakpoint end
        let (function_name : t -> string) =
          fun (x4637 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4637) "functionName")
        let (create :
          function_name:string ->
            ?enabled:bool ->
              ?condition:string ->
                ?hit_condition:string -> ?log_message:string -> unit -> t)
          =
          fun ~function_name:(x4638 : string) ->
            fun ?enabled:(x4639 : bool option) ->
              fun ?condition:(x4640 : string option) ->
                fun ?hit_condition:(x4641 : string option) ->
                  fun ?log_message:(x4642 : string option) ->
                    fun () ->
                      t_of_js
                        (Ojs.new_obj_arr
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global
                                    "__LIB__VSCODE__IMPORTS") "vscode")
                              "FunctionBreakpoint")
                           (let x4643 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x4643 "push"
                                 [|(Ojs.string_to_js x4638)|]);
                            (match x4639 with
                             | Some x4647 ->
                                 ignore
                                   (Ojs.call x4643 "push"
                                      [|(Ojs.bool_to_js x4647)|])
                             | None -> ());
                            (match x4640 with
                             | Some x4646 ->
                                 ignore
                                   (Ojs.call x4643 "push"
                                      [|(Ojs.string_to_js x4646)|])
                             | None -> ());
                            (match x4641 with
                             | Some x4645 ->
                                 ignore
                                   (Ojs.call x4643 "push"
                                      [|(Ojs.string_to_js x4645)|])
                             | None -> ());
                            (match x4642 with
                             | Some x4644 ->
                                 ignore
                                   (Ojs.call x4643 "push"
                                      [|(Ojs.string_to_js x4644)|])
                             | None -> ());
                            x4643))
        include struct include Breakpoint end
      end
    module BreakpointsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4649 : Ojs.t) -> x4649
        and t_to_js : t -> Ojs.t = fun (x4648 : Ojs.t) -> x4648
        let (added : t -> Breakpoint.t list) =
          fun (x4650 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4650) "added")
        let (removed : t -> Breakpoint.t list) =
          fun (x4652 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4652) "removed")
        let (changed : t -> Breakpoint.t list) =
          fun (x4654 : t) ->
            Ojs.list_of_js Breakpoint.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4654) "changed")
      end
    module DebugProtocolBreakpoint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4657 : Ojs.t) -> x4657
        and t_to_js : t -> Ojs.t = fun (x4656 : Ojs.t) -> x4656
      end
    module DebugConfiguration =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4659 : Ojs.t) -> x4659
        and t_to_js : t -> Ojs.t = fun (x4658 : Ojs.t) -> x4658
        let (type_ : t -> string) =
          fun (x4660 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4660) "type")
        let (set_type : t -> string -> unit) =
          fun (x4661 : t) ->
            fun (x4662 : string) ->
              Ojs.set_prop_ascii (t_to_js x4661) "type"
                (Ojs.string_to_js x4662)
        let (name : t -> string) =
          fun (x4663 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4663) "name")
        let (set_name : t -> string -> unit) =
          fun (x4664 : t) ->
            fun (x4665 : string) ->
              Ojs.set_prop_ascii (t_to_js x4664) "name"
                (Ojs.string_to_js x4665)
        let (request : t -> string) =
          fun (x4666 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4666) "request")
        let (set_request : t -> string -> unit) =
          fun (x4667 : t) ->
            fun (x4668 : string) ->
              Ojs.set_prop_ascii (t_to_js x4667) "request"
                (Ojs.string_to_js x4668)
        let (get : t -> string -> any) =
          fun (x4669 : t) ->
            fun (x4670 : string) ->
              any_of_js
                (Ojs.get_prop (t_to_js x4669) (Ojs.string_to_js x4670))
        let (set : t -> string -> any -> unit) =
          fun (x4671 : t) ->
            fun (x4672 : string) ->
              fun (x4673 : any) ->
                Ojs.set_prop (t_to_js x4671) (Ojs.string_to_js x4672)
                  (any_to_js x4673)
      end
    module DebugSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4675 : Ojs.t) -> x4675
        and t_to_js : t -> Ojs.t = fun (x4674 : Ojs.t) -> x4674
        let (id : t -> string) =
          fun (x4676 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4676) "id")
        let (type_ : t -> string) =
          fun (x4677 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4677) "type")
        let (name : t -> string) =
          fun (x4678 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4678) "name")
        let (set_name : t -> string -> unit) =
          fun (x4679 : t) ->
            fun (x4680 : string) ->
              Ojs.set_prop_ascii (t_to_js x4679) "name"
                (Ojs.string_to_js x4680)
        let (workspace_folder : t -> WorkspaceFolder.t or_undefined) =
          fun (x4681 : t) ->
            or_undefined_of_js WorkspaceFolder.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4681) "workspaceFolder")
        let (configuration : t -> DebugConfiguration.t) =
          fun (x4683 : t) ->
            DebugConfiguration.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4683) "configuration")
        let (custom_request :
          t -> command:string -> ?args:any -> unit -> any Promise.t) =
          fun (x4688 : t) ->
            fun ~command:(x4684 : string) ->
              fun ?args:(x4685 : any option) ->
                fun () ->
                  Promise.t_of_js any_of_js
                    (let x4689 = t_to_js x4688 in
                     Ojs.call (Ojs.get_prop_ascii x4689 "customRequest")
                       "apply"
                       [|x4689;((let x4686 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4686 "push"
                                      [|(Ojs.string_to_js x4684)|]);
                                 (match x4685 with
                                  | Some x4687 ->
                                      ignore
                                        (Ojs.call x4686 "push"
                                           [|(any_to_js x4687)|])
                                  | None -> ());
                                 x4686))|])
        let (get_debug_protocol_breakpoint :
          t ->
            breakpoint:Breakpoint.t ->
              DebugProtocolBreakpoint.t or_undefined Promise.t)
          =
          fun (x4692 : t) ->
            fun ~breakpoint:(x4691 : Breakpoint.t) ->
              Promise.t_of_js
                (fun (x4693 : Ojs.t) ->
                   or_undefined_of_js DebugProtocolBreakpoint.t_of_js x4693)
                (Ojs.call (t_to_js x4692) "getDebugProtocolBreakpoint"
                   [|(Breakpoint.t_to_js x4691)|])
      end
    module DebugSessionCustomEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4696 : Ojs.t) -> x4696
        and t_to_js : t -> Ojs.t = fun (x4695 : Ojs.t) -> x4695
        let (session : t -> DebugSession.t) =
          fun (x4697 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4697) "session")
        let (event : t -> string) =
          fun (x4698 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4698) "event")
        let (body : t -> any) =
          fun (x4699 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x4699) "body")
      end
    module DebugConfigurationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4701 : Ojs.t) -> x4701
        and t_to_js : t -> Ojs.t = fun (x4700 : Ojs.t) -> x4700
        let (provide_debug_configurations :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              ?token:CancellationToken.t ->
                unit -> DebugConfiguration.t list ProviderResult.t)
          =
          fun (x4707 : t) ->
            fun ~folder:(x4702 : WorkspaceFolder.t or_undefined) ->
              fun ?token:(x4703 : CancellationToken.t option) ->
                fun () ->
                  ProviderResult.t_of_js
                    (fun (x4709 : Ojs.t) ->
                       Ojs.list_of_js DebugConfiguration.t_of_js x4709)
                    (let x4708 = t_to_js x4707 in
                     Ojs.call
                       (Ojs.get_prop_ascii x4708 "provideDebugConfigurations")
                       "apply"
                       [|x4708;((let x4704 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4704 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4702)|]);
                                 (match x4703 with
                                  | Some x4705 ->
                                      ignore
                                        (Ojs.call x4704 "push"
                                           [|(CancellationToken.t_to_js x4705)|])
                                  | None -> ());
                                 x4704))|])
        let (resolve_debug_configuration :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4717 : t) ->
            fun ~folder:(x4711 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4712 : DebugConfiguration.t) ->
                fun ?token:(x4713 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4718 = t_to_js x4717 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4718
                            "resolveDebugConfiguration") "apply"
                         [|x4718;((let x4714 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4714 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4711)|]);
                                   ignore
                                     (Ojs.call x4714 "push"
                                        [|(DebugConfiguration.t_to_js x4712)|]);
                                   (match x4713 with
                                    | Some x4715 ->
                                        ignore
                                          (Ojs.call x4714 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4715)|])
                                    | None -> ());
                                   x4714))|])
        let (resolve_debug_configuration_with_substituted_variables :
          t ->
            folder:WorkspaceFolder.t or_undefined ->
              debug_configuration:DebugConfiguration.t ->
                ?token:CancellationToken.t ->
                  unit -> DebugConfiguration.t ProviderResult.t)
          =
          fun (x4726 : t) ->
            fun ~folder:(x4720 : WorkspaceFolder.t or_undefined) ->
              fun ~debug_configuration:(x4721 : DebugConfiguration.t) ->
                fun ?token:(x4722 : CancellationToken.t option) ->
                  fun () ->
                    ProviderResult.t_of_js DebugConfiguration.t_of_js
                      (let x4727 = t_to_js x4726 in
                       Ojs.call
                         (Ojs.get_prop_ascii x4727
                            "resolveDebugConfigurationWithSubstitutedVariables")
                         "apply"
                         [|x4727;((let x4723 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4723 "push"
                                        [|(or_undefined_to_js
                                             WorkspaceFolder.t_to_js x4720)|]);
                                   ignore
                                     (Ojs.call x4723 "push"
                                        [|(DebugConfiguration.t_to_js x4721)|]);
                                   (match x4722 with
                                    | Some x4724 ->
                                        ignore
                                          (Ojs.call x4723 "push"
                                             [|(CancellationToken.t_to_js
                                                  x4724)|])
                                    | None -> ());
                                   x4723))|])
      end
    module DebugAdapterExecutableOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4730 : Ojs.t) -> x4730
        and t_to_js : t -> Ojs.t = fun (x4729 : Ojs.t) -> x4729
        module Env =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x4732 : Ojs.t) -> x4732
            and t_to_js : t -> Ojs.t = fun (x4731 : Ojs.t) -> x4731
            let (get : t -> string -> string) =
              fun (x4733 : t) ->
                fun (x4734 : string) ->
                  Ojs.string_of_js
                    (Ojs.get_prop (t_to_js x4733) (Ojs.string_to_js x4734))
            let (set : t -> string -> string -> unit) =
              fun (x4735 : t) ->
                fun (x4736 : string) ->
                  fun (x4737 : string) ->
                    Ojs.set_prop (t_to_js x4735) (Ojs.string_to_js x4736)
                      (Ojs.string_to_js x4737)
          end
        let (env : t -> Env.t) =
          fun (x4738 : t) ->
            Env.t_of_js (Ojs.get_prop_ascii (t_to_js x4738) "env")
        let (set_env : t -> Env.t -> unit) =
          fun (x4739 : t) ->
            fun (x4740 : Env.t) ->
              Ojs.set_prop_ascii (t_to_js x4739) "env" (Env.t_to_js x4740)
        let (cwd : t -> string) =
          fun (x4741 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4741) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x4742 : t) ->
            fun (x4743 : string) ->
              Ojs.set_prop_ascii (t_to_js x4742) "cwd"
                (Ojs.string_to_js x4743)
      end
    module DebugAdapterExecutable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4745 : Ojs.t) -> x4745
        and t_to_js : t -> Ojs.t = fun (x4744 : Ojs.t) -> x4744
        let (create :
          command:string ->
            ?args:string list ->
              ?options:DebugAdapterExecutableOptions.t -> unit -> t)
          =
          fun ~command:(x4746 : string) ->
            fun ?args:(x4747 : string list option) ->
              fun ?options:(x4748 : DebugAdapterExecutableOptions.t option)
                ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "DebugAdapterExecutable")
                       (let x4749 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x4749 "push" [|(Ojs.string_to_js x4746)|]);
                        (match x4747 with
                         | Some x4751 ->
                             ignore
                               (Ojs.call x4749 "push"
                                  [|(Ojs.list_to_js Ojs.string_to_js x4751)|])
                         | None -> ());
                        (match x4748 with
                         | Some x4750 ->
                             ignore
                               (Ojs.call x4749 "push"
                                  [|(DebugAdapterExecutableOptions.t_to_js
                                       x4750)|])
                         | None -> ());
                        x4749))
        let (command : t -> string) =
          fun (x4753 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4753) "command")
        let (args : t -> string list) =
          fun (x4754 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4754) "args")
        let (options : t -> DebugAdapterExecutableOptions.t) =
          fun (x4756 : t) ->
            DebugAdapterExecutableOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4756) "options")
      end
    module DebugAdapterServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4758 : Ojs.t) -> x4758
        and t_to_js : t -> Ojs.t = fun (x4757 : Ojs.t) -> x4757
        let (port : t -> int) =
          fun (x4759 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4759) "port")
        let (host : t -> string) =
          fun (x4760 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4760) "host")
        let (create : port:int -> ?host:string -> unit -> t) =
          fun ~port:(x4761 : int) ->
            fun ?host:(x4762 : string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "DebugAdapterServer")
                     (let x4763 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4763 "push" [|(Ojs.int_to_js x4761)|]);
                      (match x4762 with
                       | Some x4764 ->
                           ignore
                             (Ojs.call x4763 "push"
                                [|(Ojs.string_to_js x4764)|])
                       | None -> ());
                      x4763))
      end
    module DebugAdapterNamedPipeServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4766 : Ojs.t) -> x4766
        and t_to_js : t -> Ojs.t = fun (x4765 : Ojs.t) -> x4765
        let (path : t -> string) =
          fun (x4767 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4767) "path")
        let (create : path:string -> t) =
          fun ~path:(x4768 : string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterNamedPipeServer")
                 [|(Ojs.string_to_js x4768)|])
      end
    module DebugAdapter =
      struct
        include struct include Disposable end
        let (on_did_send_message : t -> DebugProtocolMessage.t Event.t) =
          fun (x4769 : t) ->
            Event.t_of_js DebugProtocolMessage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4769) "onDidSendMessage")
        let (handle_message : t -> message:DebugProtocolMessage.t -> unit) =
          fun (x4772 : t) ->
            fun ~message:(x4771 : DebugProtocolMessage.t) ->
              ignore
                (Ojs.call (t_to_js x4772) "handleMessage"
                   [|(DebugProtocolMessage.t_to_js x4771)|])
      end
    module DebugAdapterInlineImplementation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4774 : Ojs.t) -> x4774
        and t_to_js : t -> Ojs.t = fun (x4773 : Ojs.t) -> x4773
        let (create : implementation:DebugAdapter.t -> t) =
          fun ~implementation:(x4775 : DebugAdapter.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode")
                    "DebugAdapterInlineImplementation")
                 [|(DebugAdapter.t_to_js x4775)|])
      end
    module DebugAdapterDescriptor =
      struct
        type t =
          (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
            DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4
        let rec t_of_js : Ojs.t -> t =
          fun (x4781 : Ojs.t) ->
            union4_of_js DebugAdapterExecutable.t_of_js
              DebugAdapterInlineImplementation.t_of_js
              DebugAdapterNamedPipeServer.t_of_js DebugAdapterServer.t_of_js
              x4781
        and t_to_js : t -> Ojs.t =
          fun
            (x4776 :
              (DebugAdapterExecutable.t, DebugAdapterInlineImplementation.t,
                DebugAdapterNamedPipeServer.t, DebugAdapterServer.t) union4)
            ->
            union4_to_js DebugAdapterExecutable.t_to_js
              DebugAdapterInlineImplementation.t_to_js
              DebugAdapterNamedPipeServer.t_to_js DebugAdapterServer.t_to_js
              x4776
      end
    module DebugAdapterDescriptorFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4787 : Ojs.t) -> x4787
        and t_to_js : t -> Ojs.t = fun (x4786 : Ojs.t) -> x4786
        let (create_debug_adapter_descriptor :
          t ->
            session:DebugSession.t ->
              executable:DebugAdapterExecutable.t or_undefined ->
                DebugAdapterDescriptor.t ProviderResult.t)
          =
          fun (x4791 : t) ->
            fun ~session:(x4788 : DebugSession.t) ->
              fun ~executable:(x4789 : DebugAdapterExecutable.t or_undefined)
                ->
                ProviderResult.t_of_js DebugAdapterDescriptor.t_of_js
                  (Ojs.call (t_to_js x4791) "createDebugAdapterDescriptor"
                     [|(DebugSession.t_to_js x4788);(or_undefined_to_js
                                                       DebugAdapterExecutable.t_to_js
                                                       x4789)|])
      end
    module DebugAdapterTracker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4794 : Ojs.t) -> x4794
        and t_to_js : t -> Ojs.t = fun (x4793 : Ojs.t) -> x4793
        let (on_will_start_session : t -> unit) =
          fun (x4795 : t) ->
            ignore (Ojs.call (t_to_js x4795) "onWillStartSession" [||])
        let (on_will_receive_message : t -> message:any -> unit) =
          fun (x4797 : t) ->
            fun ~message:(x4796 : any) ->
              ignore
                (Ojs.call (t_to_js x4797) "onWillReceiveMessage"
                   [|(any_to_js x4796)|])
        let (on_did_send_message : t -> message:any -> unit) =
          fun (x4799 : t) ->
            fun ~message:(x4798 : any) ->
              ignore
                (Ojs.call (t_to_js x4799) "onDidSendMessage"
                   [|(any_to_js x4798)|])
        let (on_will_stop_session : t -> unit) =
          fun (x4800 : t) ->
            ignore (Ojs.call (t_to_js x4800) "onWillStopSession" [||])
        let (on_error : t -> error:Error.t -> unit) =
          fun (x4802 : t) ->
            fun ~error:(x4801 : Error.t) ->
              ignore
                (Ojs.call (t_to_js x4802) "onError" [|(Error.t_to_js x4801)|])
        let (on_exit :
          t -> code:int or_undefined -> signal:string or_undefined -> unit) =
          fun (x4807 : t) ->
            fun ~code:(x4803 : int or_undefined) ->
              fun ~signal:(x4805 : string or_undefined) ->
                ignore
                  (Ojs.call (t_to_js x4807) "onExit"
                     [|(or_undefined_to_js Ojs.int_to_js x4803);(or_undefined_to_js
                                                                   Ojs.string_to_js
                                                                   x4805)|])
      end
    module DebugAdapterTrackerFactory =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4809 : Ojs.t) -> x4809
        and t_to_js : t -> Ojs.t = fun (x4808 : Ojs.t) -> x4808
        let (create_debug_adapter_tracker :
          t ->
            session:DebugSession.t -> DebugAdapterTracker.t ProviderResult.t)
          =
          fun (x4811 : t) ->
            fun ~session:(x4810 : DebugSession.t) ->
              ProviderResult.t_of_js DebugAdapterTracker.t_of_js
                (Ojs.call (t_to_js x4811) "createDebugAdapterTracker"
                   [|(DebugSession.t_to_js x4810)|])
      end
    module DebugConsole =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4814 : Ojs.t) -> x4814
        and t_to_js : t -> Ojs.t = fun (x4813 : Ojs.t) -> x4813
        let (append : t -> value:string -> unit) =
          fun (x4816 : t) ->
            fun ~value:(x4815 : string) ->
              ignore
                (Ojs.call (t_to_js x4816) "append"
                   [|(Ojs.string_to_js x4815)|])
        let (append_line : t -> value:string -> unit) =
          fun (x4818 : t) ->
            fun ~value:(x4817 : string) ->
              ignore
                (Ojs.call (t_to_js x4818) "appendLine"
                   [|(Ojs.string_to_js x4817)|])
      end
    module DebugConsoleMode =
      struct
        type t = [ `MergeWithParent ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4820 : Ojs.t) ->
            let x4821 = x4820 in
            match Ojs.int_of_js x4821 with
            | 1 -> `MergeWithParent
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4819 : [ `MergeWithParent ]) ->
            match x4819 with | `MergeWithParent -> Ojs.int_to_js 1
      end
    module DebugSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4823 : Ojs.t) -> x4823
        and t_to_js : t -> Ojs.t = fun (x4822 : Ojs.t) -> x4822
        let (parent_session : t -> DebugSession.t) =
          fun (x4824 : t) ->
            DebugSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4824) "parentSession")
        let (set_parent_session : t -> DebugSession.t -> unit) =
          fun (x4825 : t) ->
            fun (x4826 : DebugSession.t) ->
              Ojs.set_prop_ascii (t_to_js x4825) "parentSession"
                (DebugSession.t_to_js x4826)
        let (console_mode : t -> DebugConsoleMode.t) =
          fun (x4827 : t) ->
            DebugConsoleMode.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4827) "consoleMode")
        let (set_console_mode : t -> DebugConsoleMode.t -> unit) =
          fun (x4828 : t) ->
            fun (x4829 : DebugConsoleMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4828) "consoleMode"
                (DebugConsoleMode.t_to_js x4829)
        let (no_debug : t -> bool) =
          fun (x4830 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4830) "noDebug")
        let (set_no_debug : t -> bool -> unit) =
          fun (x4831 : t) ->
            fun (x4832 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4831) "noDebug"
                (Ojs.bool_to_js x4832)
        let (compact : t -> bool) =
          fun (x4833 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4833) "compact")
        let (set_compact : t -> bool -> unit) =
          fun (x4834 : t) ->
            fun (x4835 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4834) "compact"
                (Ojs.bool_to_js x4835)
      end
    module DebugConfigurationProviderTriggerKind =
      struct
        type t = [ `Dynamic ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4837 : Ojs.t) ->
            let x4838 = x4837 in
            match Ojs.int_of_js x4838 with
            | 2 -> `Dynamic
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4836 : [ `Dynamic ]) ->
            match x4836 with | `Dynamic -> Ojs.int_to_js 2
      end
    module Debug =
      struct
        let (active_debug_session : DebugSession.t or_undefined) =
          or_undefined_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugSession")
        let (active_debug_console : DebugConsole.t) =
          DebugConsole.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "activeDebugConsole")
        let (breakpoints : Breakpoint.t list) =
          Ojs.list_of_js Breakpoint.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "breakpoints")
        let (on_did_change_active_debug_session :
          DebugSession.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x4841 : Ojs.t) ->
               or_undefined_of_js DebugSession.t_of_js x4841)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeActiveDebugSession")
        let (on_did_start_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidStartDebugSession")
        let (on_did_receive_debug_session_custom_event :
          DebugSessionCustomEvent.t Event.t) =
          Event.t_of_js DebugSessionCustomEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidReceiveDebugSessionCustomEvent")
        let (on_did_terminate_debug_session : DebugSession.t Event.t) =
          Event.t_of_js DebugSession.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidTerminateDebugSession")
        let (on_did_change_breakpoints : BreakpointsChangeEvent.t Event.t) =
          Event.t_of_js BreakpointsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "debug") "onDidChangeBreakpoints")
        let (register_debug_configuration_provider :
          debug_type_:string ->
            provider:DebugConfigurationProvider.t ->
              ?trigger_kind:DebugConfigurationProviderTriggerKind.t ->
                unit -> Disposable.t)
          =
          fun ~debug_type_:(x4847 : string) ->
            fun ~provider:(x4848 : DebugConfigurationProvider.t) ->
              fun
                ?trigger_kind:(x4849 :
                                DebugConfigurationProviderTriggerKind.t
                                  option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x4852 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call
                       (Ojs.get_prop_ascii x4852
                          "registerDebugConfigurationProvider") "apply"
                       [|x4852;((let x4850 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4850 "push"
                                      [|(Ojs.string_to_js x4847)|]);
                                 ignore
                                   (Ojs.call x4850 "push"
                                      [|(DebugConfigurationProvider.t_to_js
                                           x4848)|]);
                                 (match x4849 with
                                  | Some x4851 ->
                                      ignore
                                        (Ojs.call x4850 "push"
                                           [|(DebugConfigurationProviderTriggerKind.t_to_js
                                                x4851)|])
                                  | None -> ());
                                 x4850))|])
        let (register_debug_adapter_descriptor_factory :
          debug_type_:string ->
            factory:DebugAdapterDescriptorFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4853 : string) ->
            fun ~factory:(x4854 : DebugAdapterDescriptorFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterDescriptorFactory"
                   [|(Ojs.string_to_js x4853);(DebugAdapterDescriptorFactory.t_to_js
                                                 x4854)|])
        let (register_debug_adapter_tracker_factory :
          debug_type_:string ->
            factory:DebugAdapterTrackerFactory.t -> Disposable.t)
          =
          fun ~debug_type_:(x4855 : string) ->
            fun ~factory:(x4856 : DebugAdapterTrackerFactory.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                   "registerDebugAdapterTrackerFactory"
                   [|(Ojs.string_to_js x4855);(DebugAdapterTrackerFactory.t_to_js
                                                 x4856)|])
        let (start_debugging :
          folder:WorkspaceFolder.t or_undefined ->
            name_or_configuration:DebugConfiguration.t or_string ->
              ?parent_session_or_options:(DebugSession.t,
                DebugSessionOptions.t) union2 -> unit -> bool Promise.t)
          =
          fun ~folder:(x4857 : WorkspaceFolder.t or_undefined) ->
            fun
              ~name_or_configuration:(x4858 : DebugConfiguration.t or_string)
              ->
              fun
                ?parent_session_or_options:(x4859 :
                                             (DebugSession.t,
                                               DebugSessionOptions.t) union2
                                               option)
                ->
                fun () ->
                  Promise.t_of_js Ojs.bool_of_js
                    (let x4866 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                     Ojs.call (Ojs.get_prop_ascii x4866 "startDebugging")
                       "apply"
                       [|x4866;((let x4860 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x4860 "push"
                                      [|(or_undefined_to_js
                                           WorkspaceFolder.t_to_js x4857)|]);
                                 ignore
                                   (Ojs.call x4860 "push"
                                      [|(or_string_to_js
                                           DebugConfiguration.t_to_js x4858)|]);
                                 (match x4859 with
                                  | Some x4861 ->
                                      ignore
                                        (Ojs.call x4860 "push"
                                           [|(union2_to_js
                                                DebugSession.t_to_js
                                                DebugSessionOptions.t_to_js
                                                x4861)|])
                                  | None -> ());
                                 x4860))|])
        let (stop_debugging :
          ?session:DebugSession.t -> unit -> unit Promise.t) =
          fun ?session:(x4868 : DebugSession.t option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x4871 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                 Ojs.call (Ojs.get_prop_ascii x4871 "stopDebugging") "apply"
                   [|x4871;((let x4869 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4868 with
                              | Some x4870 ->
                                  ignore
                                    (Ojs.call x4869 "push"
                                       [|(DebugSession.t_to_js x4870)|])
                              | None -> ());
                             x4869))|])
        let (add_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4873 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "addBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4873)|])
        let (remove_breakpoints : breakpoints:Breakpoint.t list -> unit) =
          fun ~breakpoints:(x4875 : Breakpoint.t list) ->
            ignore
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "debug")
                 "removeBreakpoints"
                 [|(Ojs.list_to_js Breakpoint.t_to_js x4875)|])
        let (as_debug_source_uri :
          source:DebugProtocolSource.t ->
            ?session:DebugSession.t -> unit -> Uri.t)
          =
          fun ~source:(x4877 : DebugProtocolSource.t) ->
            fun ?session:(x4878 : DebugSession.t option) ->
              fun () ->
                Uri.t_of_js
                  (let x4881 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "debug" in
                   Ojs.call (Ojs.get_prop_ascii x4881 "asDebugSourceUri")
                     "apply"
                     [|x4881;((let x4879 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4879 "push"
                                    [|(DebugProtocolSource.t_to_js x4877)|]);
                               (match x4878 with
                                | Some x4880 ->
                                    ignore
                                      (Ojs.call x4879 "push"
                                         [|(DebugSession.t_to_js x4880)|])
                                | None -> ());
                               x4879))|])
      end
    module Extensions =
      struct
        let (get_extension :
          extension_id:string -> any Extension.t or_undefined) =
          fun ~extension_id:(x4882 : string) ->
            or_undefined_of_js
              (fun (x4883 : Ojs.t) -> Extension.t_of_js any_of_js x4883)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4882)|])
        let (get_extension :
          extension_id:string -> 'T Extension.t or_undefined) =
          fun ~extension_id:(x4885 : string) ->
            or_undefined_of_js
              (fun (x4886 : Ojs.t) -> Extension.t_of_js Obj.magic x4886)
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "extensions")
                 "getExtension" [|(Ojs.string_to_js x4885)|])
        let (all : any Extension.t list) =
          Ojs.list_of_js
            (fun (x4888 : Ojs.t) -> Extension.t_of_js any_of_js x4888)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "all")
        let (on_did_change : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "extensions") "onDidChange")
      end
    module CommentThreadCollapsibleState =
      struct
        type t = [ `Expanded ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4892 : Ojs.t) ->
            let x4893 = x4892 in
            match Ojs.int_of_js x4893 with
            | 1 -> `Expanded
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4891 : [ `Expanded ]) ->
            match x4891 with | `Expanded -> Ojs.int_to_js 1
      end
    module CommentMode =
      struct
        type t = [ `Preview ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4895 : Ojs.t) ->
            let x4896 = x4895 in
            match Ojs.int_of_js x4896 with
            | 1 -> `Preview
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x4894 : [ `Preview ]) ->
            match x4894 with | `Preview -> Ojs.int_to_js 1
      end
    module CommentAuthorInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4898 : Ojs.t) -> x4898
        and t_to_js : t -> Ojs.t = fun (x4897 : Ojs.t) -> x4897
        let (name : t -> string) =
          fun (x4899 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4899) "name")
        let (set_name : t -> string -> unit) =
          fun (x4900 : t) ->
            fun (x4901 : string) ->
              Ojs.set_prop_ascii (t_to_js x4900) "name"
                (Ojs.string_to_js x4901)
        let (icon_path : t -> Uri.t) =
          fun (x4902 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4902) "iconPath")
        let (set_icon_path : t -> Uri.t -> unit) =
          fun (x4903 : t) ->
            fun (x4904 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x4903) "iconPath"
                (Uri.t_to_js x4904)
      end
    module CommentReaction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4906 : Ojs.t) -> x4906
        and t_to_js : t -> Ojs.t = fun (x4905 : Ojs.t) -> x4905
        let (label : t -> string) =
          fun (x4907 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4907) "label")
        let (icon_path : t -> Uri.t or_string) =
          fun (x4908 : t) ->
            or_string_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4908) "iconPath")
        let (count : t -> int) =
          fun (x4910 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4910) "count")
        let (author_has_reacted : t -> bool) =
          fun (x4911 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x4911) "authorHasReacted")
      end
    module Comment =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4913 : Ojs.t) -> x4913
        and t_to_js : t -> Ojs.t = fun (x4912 : Ojs.t) -> x4912
        let (body : t -> MarkdownString.t or_string) =
          fun (x4914 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4914) "body")
        let (set_body : t -> MarkdownString.t or_string -> unit) =
          fun (x4916 : t) ->
            fun (x4917 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x4916) "body"
                (or_string_to_js MarkdownString.t_to_js x4917)
        let (mode : t -> CommentMode.t) =
          fun (x4919 : t) ->
            CommentMode.t_of_js (Ojs.get_prop_ascii (t_to_js x4919) "mode")
        let (set_mode : t -> CommentMode.t -> unit) =
          fun (x4920 : t) ->
            fun (x4921 : CommentMode.t) ->
              Ojs.set_prop_ascii (t_to_js x4920) "mode"
                (CommentMode.t_to_js x4921)
        let (author : t -> CommentAuthorInformation.t) =
          fun (x4922 : t) ->
            CommentAuthorInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4922) "author")
        let (set_author : t -> CommentAuthorInformation.t -> unit) =
          fun (x4923 : t) ->
            fun (x4924 : CommentAuthorInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x4923) "author"
                (CommentAuthorInformation.t_to_js x4924)
        let (context_value : t -> string) =
          fun (x4925 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4925) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x4926 : t) ->
            fun (x4927 : string) ->
              Ojs.set_prop_ascii (t_to_js x4926) "contextValue"
                (Ojs.string_to_js x4927)
        let (reactions : t -> CommentReaction.t list) =
          fun (x4928 : t) ->
            Ojs.list_of_js CommentReaction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4928) "reactions")
        let (set_reactions : t -> CommentReaction.t list -> unit) =
          fun (x4930 : t) ->
            fun (x4931 : CommentReaction.t list) ->
              Ojs.set_prop_ascii (t_to_js x4930) "reactions"
                (Ojs.list_to_js CommentReaction.t_to_js x4931)
        let (label : t -> string) =
          fun (x4933 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4933) "label")
        let (set_label : t -> string -> unit) =
          fun (x4934 : t) ->
            fun (x4935 : string) ->
              Ojs.set_prop_ascii (t_to_js x4934) "label"
                (Ojs.string_to_js x4935)
      end
    module CommentThread =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4937 : Ojs.t) -> x4937
        and t_to_js : t -> Ojs.t = fun (x4936 : Ojs.t) -> x4936
        let (uri : t -> Uri.t) =
          fun (x4938 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x4938) "uri")
        let (range : t -> Range.t) =
          fun (x4939 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x4939) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x4940 : t) ->
            fun (x4941 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x4940) "range"
                (Range.t_to_js x4941)
        let (comments : t -> Comment.t list) =
          fun (x4942 : t) ->
            Ojs.list_of_js Comment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4942) "comments")
        let (set_comments : t -> Comment.t list -> unit) =
          fun (x4944 : t) ->
            fun (x4945 : Comment.t list) ->
              Ojs.set_prop_ascii (t_to_js x4944) "comments"
                (Ojs.list_to_js Comment.t_to_js x4945)
        let (collapsible_state : t -> CommentThreadCollapsibleState.t) =
          fun (x4947 : t) ->
            CommentThreadCollapsibleState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4947) "collapsibleState")
        let (set_collapsible_state :
          t -> CommentThreadCollapsibleState.t -> unit) =
          fun (x4948 : t) ->
            fun (x4949 : CommentThreadCollapsibleState.t) ->
              Ojs.set_prop_ascii (t_to_js x4948) "collapsibleState"
                (CommentThreadCollapsibleState.t_to_js x4949)
        let (can_reply : t -> bool) =
          fun (x4950 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x4950) "canReply")
        let (set_can_reply : t -> bool -> unit) =
          fun (x4951 : t) ->
            fun (x4952 : bool) ->
              Ojs.set_prop_ascii (t_to_js x4951) "canReply"
                (Ojs.bool_to_js x4952)
        let (context_value : t -> string) =
          fun (x4953 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4953) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x4954 : t) ->
            fun (x4955 : string) ->
              Ojs.set_prop_ascii (t_to_js x4954) "contextValue"
                (Ojs.string_to_js x4955)
        let (label : t -> string) =
          fun (x4956 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4956) "label")
        let (set_label : t -> string -> unit) =
          fun (x4957 : t) ->
            fun (x4958 : string) ->
              Ojs.set_prop_ascii (t_to_js x4957) "label"
                (Ojs.string_to_js x4958)
        let (dispose : t -> unit) =
          fun (x4959 : t) -> ignore (Ojs.call (t_to_js x4959) "dispose" [||])
      end
    module CommentReply =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4961 : Ojs.t) -> x4961
        and t_to_js : t -> Ojs.t = fun (x4960 : Ojs.t) -> x4960
        let (thread : t -> CommentThread.t) =
          fun (x4962 : t) ->
            CommentThread.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4962) "thread")
        let (set_thread : t -> CommentThread.t -> unit) =
          fun (x4963 : t) ->
            fun (x4964 : CommentThread.t) ->
              Ojs.set_prop_ascii (t_to_js x4963) "thread"
                (CommentThread.t_to_js x4964)
        let (text : t -> string) =
          fun (x4965 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4965) "text")
        let (set_text : t -> string -> unit) =
          fun (x4966 : t) ->
            fun (x4967 : string) ->
              Ojs.set_prop_ascii (t_to_js x4966) "text"
                (Ojs.string_to_js x4967)
      end
    module CommentingRangeProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4969 : Ojs.t) -> x4969
        and t_to_js : t -> Ojs.t = fun (x4968 : Ojs.t) -> x4968
        let (provide_commenting_ranges :
          t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> Range.t list ProviderResult.t)
          =
          fun (x4972 : t) ->
            fun ~document:(x4970 : TextDocument.t) ->
              fun ~token:(x4971 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x4973 : Ojs.t) -> Ojs.list_of_js Range.t_of_js x4973)
                  (Ojs.call (t_to_js x4972) "provideCommentingRanges"
                     [|(TextDocument.t_to_js x4970);(CancellationToken.t_to_js
                                                       x4971)|])
      end
    module CommentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4976 : Ojs.t) -> x4976
        and t_to_js : t -> Ojs.t = fun (x4975 : Ojs.t) -> x4975
        let (prompt : t -> string) =
          fun (x4977 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4977) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x4978 : t) ->
            fun (x4979 : string) ->
              Ojs.set_prop_ascii (t_to_js x4978) "prompt"
                (Ojs.string_to_js x4979)
        let (place_holder : t -> string) =
          fun (x4980 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x4980) "placeHolder")
        let (set_place_holder : t -> string -> unit) =
          fun (x4981 : t) ->
            fun (x4982 : string) ->
              Ojs.set_prop_ascii (t_to_js x4981) "placeHolder"
                (Ojs.string_to_js x4982)
      end
    module CommentController =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4984 : Ojs.t) -> x4984
        and t_to_js : t -> Ojs.t = fun (x4983 : Ojs.t) -> x4983
        let (id : t -> string) =
          fun (x4985 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4985) "id")
        let (label : t -> string) =
          fun (x4986 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x4986) "label")
        let (options : t -> CommentOptions.t) =
          fun (x4987 : t) ->
            CommentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4987) "options")
        let (set_options : t -> CommentOptions.t -> unit) =
          fun (x4988 : t) ->
            fun (x4989 : CommentOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x4988) "options"
                (CommentOptions.t_to_js x4989)
        let (commenting_range_provider : t -> CommentingRangeProvider.t) =
          fun (x4990 : t) ->
            CommentingRangeProvider.t_of_js
              (Ojs.get_prop_ascii (t_to_js x4990) "commentingRangeProvider")
        let (set_commenting_range_provider :
          t -> CommentingRangeProvider.t -> unit) =
          fun (x4991 : t) ->
            fun (x4992 : CommentingRangeProvider.t) ->
              Ojs.set_prop_ascii (t_to_js x4991) "commentingRangeProvider"
                (CommentingRangeProvider.t_to_js x4992)
        let (create_comment_thread :
          t ->
            uri:Uri.t ->
              range:Range.t -> comments:Comment.t list -> CommentThread.t)
          =
          fun (x4997 : t) ->
            fun ~uri:(x4993 : Uri.t) ->
              fun ~range:(x4994 : Range.t) ->
                fun ~comments:(x4995 : Comment.t list) ->
                  CommentThread.t_of_js
                    (Ojs.call (t_to_js x4997) "createCommentThread"
                       [|(Uri.t_to_js x4993);(Range.t_to_js x4994);(Ojs.list_to_js
                                                                    Comment.t_to_js
                                                                    x4995)|])
        let (reaction_handler :
          t ->
            comment:Comment.t -> reaction:CommentReaction.t -> unit Promise.t)
          =
          fun (x5000 : t) ->
            fun ~comment:(x4998 : Comment.t) ->
              fun ~reaction:(x4999 : CommentReaction.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x5000) "reactionHandler"
                     [|(Comment.t_to_js x4998);(CommentReaction.t_to_js x4999)|])
        let (dispose : t -> unit) =
          fun (x5002 : t) -> ignore (Ojs.call (t_to_js x5002) "dispose" [||])
      end
    module Comments =
      struct
        let (create_comment_controller :
          id:string -> label:string -> CommentController.t) =
          fun ~id:(x5003 : string) ->
            fun ~label:(x5004 : string) ->
              CommentController.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "comments")
                   "createCommentController"
                   [|(Ojs.string_to_js x5003);(Ojs.string_to_js x5004)|])
      end
    module AuthenticationSessionAccountInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5006 : Ojs.t) -> x5006
        and t_to_js : t -> Ojs.t = fun (x5005 : Ojs.t) -> x5005
        let (id : t -> string) =
          fun (x5007 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5007) "id")
        let (label : t -> string) =
          fun (x5008 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5008) "label")
      end
    module AuthenticationSession =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5010 : Ojs.t) -> x5010
        and t_to_js : t -> Ojs.t = fun (x5009 : Ojs.t) -> x5009
        let (id : t -> string) =
          fun (x5011 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5011) "id")
        let (access_token : t -> string) =
          fun (x5012 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5012) "accessToken")
        let (account : t -> AuthenticationSessionAccountInformation.t) =
          fun (x5013 : t) ->
            AuthenticationSessionAccountInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5013) "account")
        let (scopes : t -> string list) =
          fun (x5014 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x5014) "scopes")
      end
    module AuthenticationGetSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5017 : Ojs.t) -> x5017
        and t_to_js : t -> Ojs.t = fun (x5016 : Ojs.t) -> x5016
        let (create_if_none : t -> bool) =
          fun (x5018 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5018) "createIfNone")
        let (set_create_if_none : t -> bool -> unit) =
          fun (x5019 : t) ->
            fun (x5020 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5019) "createIfNone"
                (Ojs.bool_to_js x5020)
        let (clear_session_preference : t -> bool) =
          fun (x5021 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5021) "clearSessionPreference")
        let (set_clear_session_preference : t -> bool -> unit) =
          fun (x5022 : t) ->
            fun (x5023 : bool) ->
              Ojs.set_prop_ascii (t_to_js x5022) "clearSessionPreference"
                (Ojs.bool_to_js x5023)
      end
    module AuthenticationProviderInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5025 : Ojs.t) -> x5025
        and t_to_js : t -> Ojs.t = fun (x5024 : Ojs.t) -> x5024
        let (id : t -> string) =
          fun (x5026 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5026) "id")
        let (label : t -> string) =
          fun (x5027 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5027) "label")
      end
    module AuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5029 : Ojs.t) -> x5029
        and t_to_js : t -> Ojs.t = fun (x5028 : Ojs.t) -> x5028
        let (provider : t -> AuthenticationProviderInformation.t) =
          fun (x5030 : t) ->
            AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5030) "provider")
      end
    module AuthenticationProviderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5032 : Ojs.t) -> x5032
        and t_to_js : t -> Ojs.t = fun (x5031 : Ojs.t) -> x5031
        let (supports_multiple_accounts : t -> bool) =
          fun (x5033 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x5033) "supportsMultipleAccounts")
      end
    module AuthenticationProviderAuthenticationSessionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5035 : Ojs.t) -> x5035
        and t_to_js : t -> Ojs.t = fun (x5034 : Ojs.t) -> x5034
        let (added : t -> AuthenticationSession.t list) =
          fun (x5036 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5036) "added")
        let (removed : t -> AuthenticationSession.t list) =
          fun (x5038 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5038) "removed")
        let (changed : t -> AuthenticationSession.t list) =
          fun (x5040 : t) ->
            Ojs.list_of_js AuthenticationSession.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5040) "changed")
      end
    module AuthenticationProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x5043 : Ojs.t) -> x5043
        and t_to_js : t -> Ojs.t = fun (x5042 : Ojs.t) -> x5042
        let (on_did_change_sessions :
          t ->
            AuthenticationProviderAuthenticationSessionsChangeEvent.t Event.t)
          =
          fun (x5044 : t) ->
            Event.t_of_js
              AuthenticationProviderAuthenticationSessionsChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x5044) "onDidChangeSessions")
        let (get_sessions :
          t ->
            ?scopes:string list ->
              unit -> AuthenticationSession.t list Promise.t)
          =
          fun (x5050 : t) ->
            fun ?scopes:(x5046 : string list option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x5052 : Ojs.t) ->
                     Ojs.list_of_js AuthenticationSession.t_of_js x5052)
                  (let x5051 = t_to_js x5050 in
                   Ojs.call (Ojs.get_prop_ascii x5051 "getSessions") "apply"
                     [|x5051;((let x5047 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x5046 with
                                | Some x5048 ->
                                    ignore
                                      (Ojs.call x5047 "push"
                                         [|(Ojs.list_to_js Ojs.string_to_js
                                              x5048)|])
                                | None -> ());
                               x5047))|])
        let (create_session :
          t -> scopes:string list -> AuthenticationSession.t Promise.t) =
          fun (x5056 : t) ->
            fun ~scopes:(x5054 : string list) ->
              Promise.t_of_js AuthenticationSession.t_of_js
                (Ojs.call (t_to_js x5056) "createSession"
                   [|(Ojs.list_to_js Ojs.string_to_js x5054)|])
        let (remove_session : t -> session_id:string -> unit Promise.t) =
          fun (x5059 : t) ->
            fun ~session_id:(x5058 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x5059) "removeSession"
                   [|(Ojs.string_to_js x5058)|])
      end
    module Authentication =
      struct
        module AuthenticationGetSessionOptions2 =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x5062 : Ojs.t) -> x5062
            and t_to_js : t -> Ojs.t = fun (x5061 : Ojs.t) -> x5061
            let (create_if_none : t -> [ `L_b_true ]) =
              fun (x5063 : t) ->
                let x5064 = Ojs.get_prop_ascii (t_to_js x5063) "createIfNone" in
                match Ojs.bool_of_js x5064 with
                | true -> `L_b_true
                | _ -> assert false
            let (set_create_if_none : t -> [ `L_b_true ] -> unit) =
              fun (x5065 : t) ->
                fun (x5066 : [ `L_b_true ]) ->
                  Ojs.set_prop_ascii (t_to_js x5065) "createIfNone"
                    (match x5066 with
                     | `L_b_true -> Ojs.string_to_js "LBTrue")
          end
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              options:(AuthenticationGetSessionOptions.t,
                AuthenticationGetSessionOptions2.t) intersection2 ->
                AuthenticationSession.t Promise.t)
          =
          fun ~provider_id:(x5067 : string) ->
            fun ~scopes:(x5068 : string list) ->
              fun
                ~options:(x5070 :
                           (AuthenticationGetSessionOptions.t,
                             AuthenticationGetSessionOptions2.t)
                             intersection2)
                ->
                Promise.t_of_js AuthenticationSession.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "authentication") "getSession"
                     [|(Ojs.string_to_js x5067);(Ojs.list_to_js
                                                   Ojs.string_to_js x5068);(
                       intersection2_to_js
                         AuthenticationGetSessionOptions.t_to_js
                         AuthenticationGetSessionOptions2.t_to_js x5070)|])
        let (get_session :
          provider_id:string ->
            scopes:string list ->
              ?options:AuthenticationGetSessionOptions.t ->
                unit -> AuthenticationSession.t or_undefined Promise.t)
          =
          fun ~provider_id:(x5074 : string) ->
            fun ~scopes:(x5075 : string list) ->
              fun ?options:(x5076 : AuthenticationGetSessionOptions.t option)
                ->
                fun () ->
                  Promise.t_of_js
                    (fun (x5081 : Ojs.t) ->
                       or_undefined_of_js AuthenticationSession.t_of_js x5081)
                    (let x5080 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "authentication" in
                     Ojs.call (Ojs.get_prop_ascii x5080 "getSession") "apply"
                       [|x5080;((let x5077 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x5077 "push"
                                      [|(Ojs.string_to_js x5074)|]);
                                 ignore
                                   (Ojs.call x5077 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js
                                           x5075)|]);
                                 (match x5076 with
                                  | Some x5078 ->
                                      ignore
                                        (Ojs.call x5077 "push"
                                           [|(AuthenticationGetSessionOptions.t_to_js
                                                x5078)|])
                                  | None -> ());
                                 x5077))|])
        let (on_did_change_sessions :
          AuthenticationSessionsChangeEvent.t Event.t) =
          Event.t_of_js AuthenticationSessionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "authentication") "onDidChangeSessions")
        let (register_authentication_provider :
          id:string ->
            label:string ->
              provider:AuthenticationProvider.t ->
                ?options:AuthenticationProviderOptions.t ->
                  unit -> Disposable.t)
          =
          fun ~id:(x5084 : string) ->
            fun ~label:(x5085 : string) ->
              fun ~provider:(x5086 : AuthenticationProvider.t) ->
                fun ?options:(x5087 : AuthenticationProviderOptions.t option)
                  ->
                  fun () ->
                    Disposable.t_of_js
                      (let x5090 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "authentication" in
                       Ojs.call
                         (Ojs.get_prop_ascii x5090
                            "registerAuthenticationProvider") "apply"
                         [|x5090;((let x5088 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x5088 "push"
                                        [|(Ojs.string_to_js x5084)|]);
                                   ignore
                                     (Ojs.call x5088 "push"
                                        [|(Ojs.string_to_js x5085)|]);
                                   ignore
                                     (Ojs.call x5088 "push"
                                        [|(AuthenticationProvider.t_to_js
                                             x5086)|]);
                                   (match x5087 with
                                    | Some x5089 ->
                                        ignore
                                          (Ojs.call x5088 "push"
                                             [|(AuthenticationProviderOptions.t_to_js
                                                  x5089)|])
                                    | None -> ());
                                   x5088))|])
      end
  end
include struct include Vscode end
