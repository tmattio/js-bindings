[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2015
open Vscode
module Vscode =
  struct
    module AnonymousInterface16 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get : t -> string -> any) =
          fun (x3 : t) ->
            fun (x4 : string) ->
              any_of_js (Ojs.get_prop (t_to_js x3) (Ojs.string_to_js x4))
        let (set : t -> string -> any -> unit) =
          fun (x5 : t) ->
            fun (x6 : string) ->
              fun (x7 : any) ->
                Ojs.set_prop (t_to_js x5) (Ojs.string_to_js x6)
                  (any_to_js x7)
      end
    module AnonymousInterface8 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x9 : Ojs.t) -> x9
        and t_to_js : t -> Ojs.t = fun (x8 : Ojs.t) -> x8
        let (include_ : t -> GlobPattern.t) =
          fun (x10 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x10) "include")
        let (set_include : t -> GlobPattern.t -> unit) =
          fun (x11 : t) ->
            fun (x12 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x11) "include"
                (GlobPattern.t_to_js x12)
        let (exclude : t -> GlobPattern.t) =
          fun (x13 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x13) "exclude")
        let (set_exclude : t -> GlobPattern.t -> unit) =
          fun (x14 : t) ->
            fun (x15 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x14) "exclude"
                (GlobPattern.t_to_js x15)
      end
    module NotebookFilenamePattern =
      struct
        type t = (GlobPattern.t, AnonymousInterface8.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x19 : Ojs.t) ->
            union2_of_js GlobPattern.t_of_js AnonymousInterface8.t_of_js x19
        and t_to_js : t -> Ojs.t =
          fun (x16 : (GlobPattern.t, AnonymousInterface8.t) union2) ->
            union2_to_js GlobPattern.t_to_js AnonymousInterface8.t_to_js x16
      end
    module AnonymousInterface6 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
        and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
        let (editable : t -> bool or_null) =
          fun (x24 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x24) "editable")
        let (set_editable : t -> bool or_null -> unit) =
          fun (x26 : t) ->
            fun (x27 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x26) "editable"
                (or_null_to_js Ojs.bool_to_js x27)
        let (cell_editable : t -> bool or_null) =
          fun (x29 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x29) "cellEditable")
        let (set_cell_editable : t -> bool or_null -> unit) =
          fun (x31 : t) ->
            fun (x32 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x31) "cellEditable"
                (or_null_to_js Ojs.bool_to_js x32)
        let (custom : t -> AnonymousInterface16.t or_null) =
          fun (x34 : t) ->
            or_null_of_js AnonymousInterface16.t_of_js
              (Ojs.get_prop_ascii (t_to_js x34) "custom")
        let (set_custom : t -> AnonymousInterface16.t or_null -> unit) =
          fun (x36 : t) ->
            fun (x37 : AnonymousInterface16.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x36) "custom"
                (or_null_to_js AnonymousInterface16.t_to_js x37)
        let (trusted : t -> bool or_null) =
          fun (x39 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x39) "trusted")
        let (set_trusted : t -> bool or_null -> unit) =
          fun (x41 : t) ->
            fun (x42 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x41) "trusted"
                (or_null_to_js Ojs.bool_to_js x42)
      end
    module NotebookDocumentMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x45 : Ojs.t) -> x45
        and t_to_js : t -> Ojs.t = fun (x44 : Ojs.t) -> x44
        let (editable : t -> bool) =
          fun (x46 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x46) "editable")
        let (cell_editable : t -> bool) =
          fun (x47 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x47) "cellEditable")
        let (custom : t -> AnonymousInterface16.t) =
          fun (x48 : t) ->
            AnonymousInterface16.t_of_js
              (Ojs.get_prop_ascii (t_to_js x48) "custom")
        let (trusted : t -> bool) =
          fun (x49 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x49) "trusted")
        let (create :
          ?editable:bool ->
            ?cell_editable:bool ->
              ?custom:AnonymousInterface16.t -> ?trusted:bool -> unit -> t)
          =
          fun ?editable:(x50 : bool option) ->
            fun ?cell_editable:(x51 : bool option) ->
              fun ?custom:(x52 : AnonymousInterface16.t option) ->
                fun ?trusted:(x53 : bool option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii
                               (Ojs.get_prop_ascii Ojs.global
                                  "__LIB__VSCODE__IMPORTS") "vscode")
                            "NotebookDocumentMetadata")
                         (let x54 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x50 with
                           | Some x58 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(Ojs.bool_to_js x58)|])
                           | None -> ());
                          (match x51 with
                           | Some x57 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(Ojs.bool_to_js x57)|])
                           | None -> ());
                          (match x52 with
                           | Some x56 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(AnonymousInterface16.t_to_js x56)|])
                           | None -> ());
                          (match x53 with
                           | Some x55 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(Ojs.bool_to_js x55)|])
                           | None -> ());
                          x54))
        let (with_ : t -> change:AnonymousInterface6.t -> t) =
          fun (x60 : t) ->
            fun ~change:(x59 : AnonymousInterface6.t) ->
              t_of_js
                (Ojs.call (t_to_js x60) "with"
                   [|(AnonymousInterface6.t_to_js x59)|])
      end
    module AnonymousInterface13 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x62 : Ojs.t) -> x62
        and t_to_js : t -> Ojs.t = fun (x61 : Ojs.t) -> x61
        let (start : t -> int) =
          fun (x63 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x63) "start")
        let (set_start : t -> int -> unit) =
          fun (x64 : t) ->
            fun (x65 : int) ->
              Ojs.set_prop_ascii (t_to_js x64) "start" (Ojs.int_to_js x65)
        let (end_ : t -> int) =
          fun (x66 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x66) "end")
        let (set_end : t -> int -> unit) =
          fun (x67 : t) ->
            fun (x68 : int) ->
              Ojs.set_prop_ascii (t_to_js x67) "end" (Ojs.int_to_js x68)
      end
    module NotebookCellRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x70 : Ojs.t) -> x70
        and t_to_js : t -> Ojs.t = fun (x69 : Ojs.t) -> x69
        let (start : t -> int) =
          fun (x71 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x71) "start")
        let (end_ : t -> int) =
          fun (x72 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "end")
        let (is_empty : t -> bool) =
          fun (x73 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x73) "isEmpty")
        let (create : start:int -> end_:int -> t) =
          fun ~start:(x74 : int) ->
            fun ~end_:(x75 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "NotebookCellRange")
                   [|(Ojs.int_to_js x74);(Ojs.int_to_js x75)|])
        let (with_ : t -> change:AnonymousInterface13.t -> t) =
          fun (x77 : t) ->
            fun ~change:(x76 : AnonymousInterface13.t) ->
              t_of_js
                (Ojs.call (t_to_js x77) "with"
                   [|(AnonymousInterface13.t_to_js x76)|])
      end
    module NotebookCellOutputItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x79 : Ojs.t) -> x79
        and t_to_js : t -> Ojs.t = fun (x78 : Ojs.t) -> x78
        let (mime : t -> string) =
          fun (x80 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x80) "mime")
        let (value : t -> unknown) =
          fun (x81 : t) ->
            unknown_of_js (Ojs.get_prop_ascii (t_to_js x81) "value")
        let (metadata : t -> (string, any) Record.t) =
          fun (x82 : t) ->
            Record.t_of_js Ojs.string_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x82) "metadata")
        let (create :
          mime:string ->
            value:unknown -> ?metadata:(string, any) Record.t -> unit -> t)
          =
          fun ~mime:(x85 : string) ->
            fun ~value:(x86 : unknown) ->
              fun ?metadata:(x87 : (string, any) Record.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "NotebookCellOutputItem")
                       (let x88 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x88 "push" [|(Ojs.string_to_js x85)|]);
                        ignore (Ojs.call x88 "push" [|(unknown_to_js x86)|]);
                        (match x87 with
                         | Some x89 ->
                             ignore
                               (Ojs.call x88 "push"
                                  [|(Record.t_to_js Ojs.string_to_js
                                       any_to_js x89)|])
                         | None -> ());
                        x88))
      end
    module NotebookCellOutput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x93 : Ojs.t) -> x93
        and t_to_js : t -> Ojs.t = fun (x92 : Ojs.t) -> x92
        let (id : t -> string) =
          fun (x94 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x94) "id")
        let (outputs : t -> NotebookCellOutputItem.t list) =
          fun (x95 : t) ->
            Ojs.list_of_js NotebookCellOutputItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x95) "outputs")
        let (metadata : t -> (string, any) Record.t) =
          fun (x97 : t) ->
            Record.t_of_js Ojs.string_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x97) "metadata")
        let (create :
          outputs:NotebookCellOutputItem.t list ->
            ?metadata:(string, any) Record.t -> unit -> t)
          =
          fun ~outputs:(x100 : NotebookCellOutputItem.t list) ->
            fun ?metadata:(x101 : (string, any) Record.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "NotebookCellOutput")
                     (let x102 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x102 "push"
                           [|(Ojs.list_to_js NotebookCellOutputItem.t_to_js
                                x100)|]);
                      (match x101 with
                       | Some x103 ->
                           ignore
                             (Ojs.call x102 "push"
                                [|(Record.t_to_js Ojs.string_to_js any_to_js
                                     x103)|])
                       | None -> ());
                      x102))
        let (create' :
          outputs:NotebookCellOutputItem.t list ->
            id:string -> ?metadata:(string, any) Record.t -> unit -> t)
          =
          fun ~outputs:(x107 : NotebookCellOutputItem.t list) ->
            fun ~id:(x108 : string) ->
              fun ?metadata:(x109 : (string, any) Record.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "NotebookCellOutput")
                       (let x110 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x110 "push"
                             [|(Ojs.list_to_js NotebookCellOutputItem.t_to_js
                                  x107)|]);
                        ignore
                          (Ojs.call x110 "push" [|(Ojs.string_to_js x108)|]);
                        (match x109 with
                         | Some x111 ->
                             ignore
                               (Ojs.call x110 "push"
                                  [|(Record.t_to_js Ojs.string_to_js
                                       any_to_js x111)|])
                         | None -> ());
                        x110))
      end
    module NotebookCellKind =
      struct
        type t = [ `Markdown  | `Code ]
        let rec t_of_js : Ojs.t -> t =
          fun (x116 : Ojs.t) ->
            let x117 = x116 in
            match Ojs.int_of_js x117 with
            | 1 -> `Markdown
            | 2 -> `Code
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x115 : [ `Markdown  | `Code ]) ->
            match x115 with
            | `Markdown -> Ojs.int_to_js 1
            | `Code -> Ojs.int_to_js 2
      end
    module AnonymousInterface5 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x119 : Ojs.t) -> x119
        and t_to_js : t -> Ojs.t = fun (x118 : Ojs.t) -> x118
        let (editable : t -> bool or_null) =
          fun (x120 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x120) "editable")
        let (set_editable : t -> bool or_null -> unit) =
          fun (x122 : t) ->
            fun (x123 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x122) "editable"
                (or_null_to_js Ojs.bool_to_js x123)
        let (breakpoint_margin : t -> bool or_null) =
          fun (x125 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x125) "breakpointMargin")
        let (set_breakpoint_margin : t -> bool or_null -> unit) =
          fun (x127 : t) ->
            fun (x128 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x127) "breakpointMargin"
                (or_null_to_js Ojs.bool_to_js x128)
        let (status_message : t -> string or_null) =
          fun (x130 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x130) "statusMessage")
        let (set_status_message : t -> string or_null -> unit) =
          fun (x132 : t) ->
            fun (x133 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x132) "statusMessage"
                (or_null_to_js Ojs.string_to_js x133)
        let (last_run_duration : t -> int or_null) =
          fun (x135 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x135) "lastRunDuration")
        let (set_last_run_duration : t -> int or_null -> unit) =
          fun (x137 : t) ->
            fun (x138 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js x137) "lastRunDuration"
                (or_null_to_js Ojs.int_to_js x138)
        let (input_collapsed : t -> bool or_null) =
          fun (x140 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x140) "inputCollapsed")
        let (set_input_collapsed : t -> bool or_null -> unit) =
          fun (x142 : t) ->
            fun (x143 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x142) "inputCollapsed"
                (or_null_to_js Ojs.bool_to_js x143)
        let (output_collapsed : t -> bool or_null) =
          fun (x145 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x145) "outputCollapsed")
        let (set_output_collapsed : t -> bool or_null -> unit) =
          fun (x147 : t) ->
            fun (x148 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x147) "outputCollapsed"
                (or_null_to_js Ojs.bool_to_js x148)
        let (custom : t -> (string, any) Record.t or_null) =
          fun (x150 : t) ->
            or_null_of_js
              (fun (x151 : Ojs.t) ->
                 Record.t_of_js Ojs.string_of_js any_of_js x151)
              (Ojs.get_prop_ascii (t_to_js x150) "custom")
        let (set_custom : t -> (string, any) Record.t or_null -> unit) =
          fun (x154 : t) ->
            fun (x155 : (string, any) Record.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x154) "custom"
                (or_null_to_js
                   (fun (x156 : (string, any) Record.t) ->
                      Record.t_to_js Ojs.string_to_js any_to_js x156) x155)
      end
    module NotebookCellMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x160 : Ojs.t) -> x160
        and t_to_js : t -> Ojs.t = fun (x159 : Ojs.t) -> x159
        let (editable : t -> bool) =
          fun (x161 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x161) "editable")
        let (breakpoint_margin : t -> bool) =
          fun (x162 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x162) "breakpointMargin")
        let (output_collapsed : t -> bool) =
          fun (x163 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x163) "outputCollapsed")
        let (input_collapsed : t -> bool) =
          fun (x164 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x164) "inputCollapsed")
        let (custom : t -> (string, any) Record.t) =
          fun (x165 : t) ->
            Record.t_of_js Ojs.string_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x165) "custom")
        let (status_message : t -> string) =
          fun (x168 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x168) "statusMessage")
        let (create :
          ?editable:bool ->
            ?breakpoint_margin:bool ->
              ?status_message:string ->
                ?last_run_duration:int ->
                  ?input_collapsed:bool ->
                    ?output_collapsed:bool ->
                      ?custom:(string, any) Record.t -> unit -> t)
          =
          fun ?editable:(x169 : bool option) ->
            fun ?breakpoint_margin:(x170 : bool option) ->
              fun ?status_message:(x171 : string option) ->
                fun ?last_run_duration:(x172 : int option) ->
                  fun ?input_collapsed:(x173 : bool option) ->
                    fun ?output_collapsed:(x174 : bool option) ->
                      fun ?custom:(x175 : (string, any) Record.t option) ->
                        fun () ->
                          t_of_js
                            (Ojs.new_obj_arr
                               (Ojs.get_prop_ascii
                                  (Ojs.get_prop_ascii
                                     (Ojs.get_prop_ascii Ojs.global
                                        "__LIB__VSCODE__IMPORTS") "vscode")
                                  "NotebookCellMetadata")
                               (let x176 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x169 with
                                 | Some x185 ->
                                     ignore
                                       (Ojs.call x176 "push"
                                          [|(Ojs.bool_to_js x185)|])
                                 | None -> ());
                                (match x170 with
                                 | Some x184 ->
                                     ignore
                                       (Ojs.call x176 "push"
                                          [|(Ojs.bool_to_js x184)|])
                                 | None -> ());
                                (match x171 with
                                 | Some x183 ->
                                     ignore
                                       (Ojs.call x176 "push"
                                          [|(Ojs.string_to_js x183)|])
                                 | None -> ());
                                (match x172 with
                                 | Some x182 ->
                                     ignore
                                       (Ojs.call x176 "push"
                                          [|(Ojs.int_to_js x182)|])
                                 | None -> ());
                                (match x173 with
                                 | Some x181 ->
                                     ignore
                                       (Ojs.call x176 "push"
                                          [|(Ojs.bool_to_js x181)|])
                                 | None -> ());
                                (match x174 with
                                 | Some x180 ->
                                     ignore
                                       (Ojs.call x176 "push"
                                          [|(Ojs.bool_to_js x180)|])
                                 | None -> ());
                                (match x175 with
                                 | Some x177 ->
                                     ignore
                                       (Ojs.call x176 "push"
                                          [|(Record.t_to_js Ojs.string_to_js
                                               any_to_js x177)|])
                                 | None -> ());
                                x176))
        let (with_ : t -> change:AnonymousInterface5.t -> t) =
          fun (x187 : t) ->
            fun ~change:(x186 : AnonymousInterface5.t) ->
              t_of_js
                (Ojs.call (t_to_js x187) "with"
                   [|(AnonymousInterface5.t_to_js x186)|])
      end
    module NotebookCellExecutionSummary =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x189 : Ojs.t) -> x189
        and t_to_js : t -> Ojs.t = fun (x188 : Ojs.t) -> x188
        let (execution_order : t -> int) =
          fun (x190 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x190) "executionOrder")
        let (set_execution_order : t -> int -> unit) =
          fun (x191 : t) ->
            fun (x192 : int) ->
              Ojs.set_prop_ascii (t_to_js x191) "executionOrder"
                (Ojs.int_to_js x192)
        let (success : t -> bool) =
          fun (x193 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x193) "success")
        let (set_success : t -> bool -> unit) =
          fun (x194 : t) ->
            fun (x195 : bool) ->
              Ojs.set_prop_ascii (t_to_js x194) "success"
                (Ojs.bool_to_js x195)
        let (duration : t -> int) =
          fun (x196 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x196) "duration")
        let (set_duration : t -> int -> unit) =
          fun (x197 : t) ->
            fun (x198 : int) ->
              Ojs.set_prop_ascii (t_to_js x197) "duration"
                (Ojs.int_to_js x198)
      end
    module NotebookCell =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x200 : Ojs.t) -> x200
        and t_to_js : t -> Ojs.t = fun (x199 : Ojs.t) -> x199
        let (index : t -> int) =
          fun (x201 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x201) "index")
        let (kind : t -> NotebookCellKind.t) =
          fun (x202 : t) ->
            NotebookCellKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x202) "kind")
        let (document : t -> TextDocument.t) =
          fun (x203 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x203) "document")
        let (metadata : t -> NotebookCellMetadata.t) =
          fun (x204 : t) ->
            NotebookCellMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x204) "metadata")
        let (outputs : t -> NotebookCellOutput.t list) =
          fun (x205 : t) ->
            Ojs.list_of_js NotebookCellOutput.t_of_js
              (Ojs.get_prop_ascii (t_to_js x205) "outputs")
        let (latest_execution_summary :
          t -> NotebookCellExecutionSummary.t or_undefined) =
          fun (x207 : t) ->
            or_undefined_of_js NotebookCellExecutionSummary.t_of_js
              (Ojs.get_prop_ascii (t_to_js x207) "latestExecutionSummary")
      end
    module NotebookDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x210 : Ojs.t) -> x210
        and t_to_js : t -> Ojs.t = fun (x209 : Ojs.t) -> x209
        let (uri : t -> Uri.t) =
          fun (x211 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x211) "uri")
        let (version : t -> int) =
          fun (x212 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x212) "version")
        let (file_name : t -> string) =
          fun (x213 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x213) "fileName")
        let (is_dirty : t -> bool) =
          fun (x214 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x214) "isDirty")
        let (is_untitled : t -> bool) =
          fun (x215 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x215) "isUntitled")
        let (is_closed : t -> bool) =
          fun (x216 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x216) "isClosed")
        let (metadata : t -> NotebookDocumentMetadata.t) =
          fun (x217 : t) ->
            NotebookDocumentMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x217) "metadata")
        let (view_type : t -> string) =
          fun (x218 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x218) "viewType")
        let (cell_count : t -> int) =
          fun (x219 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x219) "cellCount")
        let (cell_at : t -> index:int -> NotebookCell.t) =
          fun (x221 : t) ->
            fun ~index:(x220 : int) ->
              NotebookCell.t_of_js
                (Ojs.call (t_to_js x221) "cellAt" [|(Ojs.int_to_js x220)|])
        let (get_cells :
          t -> ?range:NotebookCellRange.t -> unit -> NotebookCell.t list) =
          fun (x225 : t) ->
            fun ?range:(x222 : NotebookCellRange.t option) ->
              fun () ->
                Ojs.list_of_js NotebookCell.t_of_js
                  (let x226 = t_to_js x225 in
                   Ojs.call (Ojs.get_prop_ascii x226 "getCells") "apply"
                     [|x226;((let x223 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x222 with
                               | Some x224 ->
                                   ignore
                                     (Ojs.call x223 "push"
                                        [|(NotebookCellRange.t_to_js x224)|])
                               | None -> ());
                              x223))|])
        let (save : t -> bool Promise.t) =
          fun (x228 : t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (t_to_js x228) "save" [||])
      end
    module NotebookDocumentContentOptions =
      struct
        module TransientMetadata =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x231 : Ojs.t) -> x231
            and t_to_js : t -> Ojs.t = fun (x230 : Ojs.t) -> x230
            let (create :
              ?editable:bool ->
                ?cell_editable:bool ->
                  ?custom:bool ->
                    ?trusted:bool -> ?runnable:bool -> unit -> t)
              =
              fun ?editable:(x232 : bool option) ->
                fun ?cell_editable:(x233 : bool option) ->
                  fun ?custom:(x234 : bool option) ->
                    fun ?trusted:(x235 : bool option) ->
                      fun ?runnable:(x236 : bool option) ->
                        fun () ->
                          let x237 = Ojs.empty_obj () in
                          (match x232 with
                           | Some x242 ->
                               Ojs.set_prop_ascii x237 "editable"
                                 (Ojs.bool_to_js x242)
                           | None -> ());
                          (match x233 with
                           | Some x241 ->
                               Ojs.set_prop_ascii x237 "cellEditable"
                                 (Ojs.bool_to_js x241)
                           | None -> ());
                          (match x234 with
                           | Some x240 ->
                               Ojs.set_prop_ascii x237 "custom"
                                 (Ojs.bool_to_js x240)
                           | None -> ());
                          (match x235 with
                           | Some x239 ->
                               Ojs.set_prop_ascii x237 "trusted"
                                 (Ojs.bool_to_js x239)
                           | None -> ());
                          (match x236 with
                           | Some x238 ->
                               Ojs.set_prop_ascii x237 "runnable"
                                 (Ojs.bool_to_js x238)
                           | None -> ());
                          t_of_js x237
          end
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x244 : Ojs.t) -> x244
        and t_to_js : t -> Ojs.t = fun (x243 : Ojs.t) -> x243
        let (transient_outputs : t -> bool) =
          fun (x245 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x245) "transientOutputs")
        let (set_transient_outputs : t -> bool -> unit) =
          fun (x246 : t) ->
            fun (x247 : bool) ->
              Ojs.set_prop_ascii (t_to_js x246) "transientOutputs"
                (Ojs.bool_to_js x247)
        let (transient_metadata : t -> TransientMetadata.t) =
          fun (x248 : t) ->
            TransientMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x248) "transientMetadata")
        let (set_transient_metadata : t -> TransientMetadata.t -> unit) =
          fun (x249 : t) ->
            fun (x250 : TransientMetadata.t) ->
              Ojs.set_prop_ascii (t_to_js x249) "transientMetadata"
                (TransientMetadata.t_to_js x250)
        let (create :
          ?transient_outputs:bool ->
            ?transient_metadata:TransientMetadata.t -> unit -> t)
          =
          fun ?transient_outputs:(x251 : bool option) ->
            fun ?transient_metadata:(x252 : TransientMetadata.t option) ->
              fun () ->
                let x253 = Ojs.empty_obj () in
                (match x251 with
                 | Some x255 ->
                     Ojs.set_prop_ascii x253 "transientOutputs"
                       (Ojs.bool_to_js x255)
                 | None -> ());
                (match x252 with
                 | Some x254 ->
                     Ojs.set_prop_ascii x253 "transientMetadata"
                       (TransientMetadata.t_to_js x254)
                 | None -> ());
                t_of_js x253
      end
    module NotebookKernel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x257 : Ojs.t) -> x257
        and t_to_js : t -> Ojs.t = fun (x256 : Ojs.t) -> x256
        let (id : t -> string) =
          fun (x258 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x258) "id")
        let (label : t -> string) =
          fun (x259 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x259) "label")
        let (set_label : t -> string -> unit) =
          fun (x260 : t) ->
            fun (x261 : string) ->
              Ojs.set_prop_ascii (t_to_js x260) "label"
                (Ojs.string_to_js x261)
        let (description : t -> string) =
          fun (x262 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x262) "description")
        let (set_description : t -> string -> unit) =
          fun (x263 : t) ->
            fun (x264 : string) ->
              Ojs.set_prop_ascii (t_to_js x263) "description"
                (Ojs.string_to_js x264)
        let (detail : t -> string) =
          fun (x265 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x265) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x266 : t) ->
            fun (x267 : string) ->
              Ojs.set_prop_ascii (t_to_js x266) "detail"
                (Ojs.string_to_js x267)
        let (is_preferred : t -> bool) =
          fun (x268 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x268) "isPreferred")
        let (set_is_preferred : t -> bool -> unit) =
          fun (x269 : t) ->
            fun (x270 : bool) ->
              Ojs.set_prop_ascii (t_to_js x269) "isPreferred"
                (Ojs.bool_to_js x270)
        let (preloads : t -> Uri.t list) =
          fun (x271 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x271) "preloads")
        let (set_preloads : t -> Uri.t list -> unit) =
          fun (x273 : t) ->
            fun (x274 : Uri.t list) ->
              Ojs.set_prop_ascii (t_to_js x273) "preloads"
                (Ojs.list_to_js Uri.t_to_js x274)
        let (supported_languages : t -> string list) =
          fun (x276 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x276) "supportedLanguages")
        let (set_supported_languages : t -> string list -> unit) =
          fun (x278 : t) ->
            fun (x279 : string list) ->
              Ojs.set_prop_ascii (t_to_js x278) "supportedLanguages"
                (Ojs.list_to_js Ojs.string_to_js x279)
        let (interrupt : t -> document:NotebookDocument.t -> unit) =
          fun (x282 : t) ->
            fun ~document:(x281 : NotebookDocument.t) ->
              ignore
                (Ojs.call (t_to_js x282) "interrupt"
                   [|(NotebookDocument.t_to_js x281)|])
        let (execute_cells_request :
          t ->
            document:NotebookDocument.t ->
              ranges:NotebookCellRange.t list -> unit Promise.t)
          =
          fun (x286 : t) ->
            fun ~document:(x283 : NotebookDocument.t) ->
              fun ~ranges:(x284 : NotebookCellRange.t list) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x286) "executeCellsRequest"
                     [|(NotebookDocument.t_to_js x283);(Ojs.list_to_js
                                                          NotebookCellRange.t_to_js
                                                          x284)|])
      end
    module AnonymousInterface3 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x289 : Ojs.t) -> x289
        and t_to_js : t -> Ojs.t = fun (x288 : Ojs.t) -> x288
        let (display_name : t -> string) =
          fun (x290 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x290) "displayName")
        let (set_display_name : t -> string -> unit) =
          fun (x291 : t) ->
            fun (x292 : string) ->
              Ojs.set_prop_ascii (t_to_js x291) "displayName"
                (Ojs.string_to_js x292)
        let (filename_pattern : t -> NotebookFilenamePattern.t list) =
          fun (x293 : t) ->
            Ojs.list_of_js NotebookFilenamePattern.t_of_js
              (Ojs.get_prop_ascii (t_to_js x293) "filenamePattern")
        let (set_filename_pattern :
          t -> NotebookFilenamePattern.t list -> unit) =
          fun (x295 : t) ->
            fun (x296 : NotebookFilenamePattern.t list) ->
              Ojs.set_prop_ascii (t_to_js x295) "filenamePattern"
                (Ojs.list_to_js NotebookFilenamePattern.t_to_js x296)
        let (exclusive : t -> bool) =
          fun (x298 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x298) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x299 : t) ->
            fun (x300 : bool) ->
              Ojs.set_prop_ascii (t_to_js x299) "exclusive"
                (Ojs.bool_to_js x300)
      end
    module AnonymousInterface4 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x302 : Ojs.t) -> x302
        and t_to_js : t -> Ojs.t = fun (x301 : Ojs.t) -> x301
        let (document : t -> NotebookDocument.t) =
          fun (x303 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x303) "document")
        let (set_document : t -> NotebookDocument.t -> unit) =
          fun (x304 : t) ->
            fun (x305 : NotebookDocument.t) ->
              Ojs.set_prop_ascii (t_to_js x304) "document"
                (NotebookDocument.t_to_js x305)
        let (kernel : t -> NotebookKernel.t or_undefined) =
          fun (x306 : t) ->
            or_undefined_of_js NotebookKernel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x306) "kernel")
        let (set_kernel : t -> NotebookKernel.t or_undefined -> unit) =
          fun (x308 : t) ->
            fun (x309 : NotebookKernel.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x308) "kernel"
                (or_undefined_to_js NotebookKernel.t_to_js x309)
      end
    module AnonymousInterface7 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x312 : Ojs.t) -> x312
        and t_to_js : t -> Ojs.t = fun (x311 : Ojs.t) -> x311
        let (elevation : t -> bool) =
          fun (x313 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x313) "elevation")
        let (set_elevation : t -> bool -> unit) =
          fun (x314 : t) ->
            fun (x315 : bool) ->
              Ojs.set_prop_ascii (t_to_js x314) "elevation"
                (Ojs.bool_to_js x315)
        let (public : t -> bool) =
          fun (x316 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x316) "public")
        let (set_public : t -> bool -> unit) =
          fun (x317 : t) ->
            fun (x318 : bool) ->
              Ojs.set_prop_ascii (t_to_js x317) "public"
                (Ojs.bool_to_js x318)
      end
    module AnonymousInterface9 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x320 : Ojs.t) -> x320
        and t_to_js : t -> Ojs.t = fun (x319 : Ojs.t) -> x319
        let (light : t -> Uri.t) =
          fun (x321 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x321) "light")
        let (set_light : t -> Uri.t -> unit) =
          fun (x322 : t) ->
            fun (x323 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x322) "light" (Uri.t_to_js x323)
        let (dark : t -> Uri.t) =
          fun (x324 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x324) "dark")
        let (set_dark : t -> Uri.t -> unit) =
          fun (x325 : t) ->
            fun (x326 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x325) "dark" (Uri.t_to_js x326)
      end
    module AnonymousInterface10 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x328 : Ojs.t) -> x328
        and t_to_js : t -> Ojs.t = fun (x327 : Ojs.t) -> x327
        let (pid : t -> int) =
          fun (x329 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x329) "pid")
        let (set_pid : t -> int -> unit) =
          fun (x330 : t) ->
            fun (x331 : int) ->
              Ojs.set_prop_ascii (t_to_js x330) "pid" (Ojs.int_to_js x331)
        let (port_range : t -> (int * int)) =
          fun (x332 : t) ->
            let x333 = Ojs.get_prop_ascii (t_to_js x332) "portRange" in
            ((Ojs.int_of_js (Ojs.array_get x333 0)),
              (Ojs.int_of_js (Ojs.array_get x333 1)))
        let (set_port_range : t -> (int * int) -> unit) =
          fun (x334 : t) ->
            fun (x335 : (int * int)) ->
              Ojs.set_prop_ascii (t_to_js x334) "portRange"
                (let (x336, x337) = x335 in
                 let x338 = Ojs.array_make 2 in
                 Ojs.array_set x338 0 (Ojs.int_to_js x336);
                 Ojs.array_set x338 1 (Ojs.int_to_js x337);
                 x338)
        let (command_matcher : t -> regexp) =
          fun (x339 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x339) "commandMatcher")
        let (set_command_matcher : t -> regexp -> unit) =
          fun (x340 : t) ->
            fun (x341 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x340) "commandMatcher"
                (regexp_to_js x341)
      end
    module AnonymousInterface11 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x343 : Ojs.t) -> x343
        and t_to_js : t -> Ojs.t = fun (x342 : Ojs.t) -> x342
        let (port : t -> int) =
          fun (x344 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x344) "port")
        let (set_port : t -> int -> unit) =
          fun (x345 : t) ->
            fun (x346 : int) ->
              Ojs.set_prop_ascii (t_to_js x345) "port" (Ojs.int_to_js x346)
        let (host : t -> string) =
          fun (x347 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x347) "host")
        let (set_host : t -> string -> unit) =
          fun (x348 : t) ->
            fun (x349 : string) ->
              Ojs.set_prop_ascii (t_to_js x348) "host"
                (Ojs.string_to_js x349)
      end
    module AnonymousInterface12 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x351 : Ojs.t) -> x351
        and t_to_js : t -> Ojs.t = fun (x350 : Ojs.t) -> x350
        let (select : t -> bool) =
          fun (x352 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x352) "select")
        let (set_select : t -> bool -> unit) =
          fun (x353 : t) ->
            fun (x354 : bool) ->
              Ojs.set_prop_ascii (t_to_js x353) "select"
                (Ojs.bool_to_js x354)
        let (focus : t -> bool) =
          fun (x355 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x355) "focus")
        let (set_focus : t -> bool -> unit) =
          fun (x356 : t) ->
            fun (x357 : bool) ->
              Ojs.set_prop_ascii (t_to_js x356) "focus" (Ojs.bool_to_js x357)
        let (expand : t -> bool or_number) =
          fun (x358 : t) ->
            or_number_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x358) "expand")
        let (set_expand : t -> bool or_number -> unit) =
          fun (x360 : t) ->
            fun (x361 : bool or_number) ->
              Ojs.set_prop_ascii (t_to_js x360) "expand"
                (or_number_to_js Ojs.bool_to_js x361)
      end
    module AnonymousInterface14 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x364 : Ojs.t) -> x364
        and t_to_js : t -> Ojs.t = fun (x363 : Ojs.t) -> x363
        let (timestamp : t -> int) =
          fun (x365 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x365) "timestamp")
        let (set_timestamp : t -> int -> unit) =
          fun (x366 : t) ->
            fun (x367 : int) ->
              Ojs.set_prop_ascii (t_to_js x366) "timestamp"
                (Ojs.int_to_js x367)
        let (id : t -> string) =
          fun (x368 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x368) "id")
        let (set_id : t -> string -> unit) =
          fun (x369 : t) ->
            fun (x370 : string) ->
              Ojs.set_prop_ascii (t_to_js x369) "id" (Ojs.string_to_js x370)
      end
    module AnonymousInterface15 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x372 : Ojs.t) -> x372
        and t_to_js : t -> Ojs.t = fun (x371 : Ojs.t) -> x371
        let (view_options : t -> AnonymousInterface3.t) =
          fun (x373 : t) ->
            AnonymousInterface3.t_of_js
              (Ojs.get_prop_ascii (t_to_js x373) "viewOptions")
        let (set_view_options : t -> AnonymousInterface3.t -> unit) =
          fun (x374 : t) ->
            fun (x375 : AnonymousInterface3.t) ->
              Ojs.set_prop_ascii (t_to_js x374) "viewOptions"
                (AnonymousInterface3.t_to_js x375)
      end
    module AnonymousInterface17 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x377 : Ojs.t) -> x377
        and t_to_js : t -> Ojs.t = fun (x376 : Ojs.t) -> x376
        let (get : t -> string -> string or_null) =
          fun (x378 : t) ->
            fun (x379 : string) ->
              or_null_of_js Ojs.string_of_js
                (Ojs.get_prop (t_to_js x378) (Ojs.string_to_js x379))
        let (set : t -> string -> string or_null -> unit) =
          fun (x381 : t) ->
            fun (x382 : string) ->
              fun (x383 : string or_null) ->
                Ojs.set_prop (t_to_js x381) (Ojs.string_to_js x382)
                  (or_null_to_js Ojs.string_to_js x383)
      end
    module AuthenticationProvidersChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x386 : Ojs.t) -> x386
        and t_to_js : t -> Ojs.t = fun (x385 : Ojs.t) -> x385
        let (added : t -> AuthenticationProviderInformation.t list) =
          fun (x387 : t) ->
            Ojs.list_of_js AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x387) "added")
        let (removed : t -> AuthenticationProviderInformation.t list) =
          fun (x389 : t) ->
            Ojs.list_of_js AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x389) "removed")
      end
    module Authentication =
      struct
        let (on_did_change_authentication_providers :
          AuthenticationProvidersChangeEvent.t Event.t) =
          Event.t_of_js AuthenticationProvidersChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "authentication")
               "onDidChangeAuthenticationProviders")
        let (providers : AuthenticationProviderInformation.t list) =
          Ojs.list_of_js AuthenticationProviderInformation.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "authentication") "providers")
        let (logout :
          provider_id:string -> session_id:string -> unit Promise.t) =
          fun ~provider_id:(x393 : string) ->
            fun ~session_id:(x394 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "authentication") "logout"
                   [|(Ojs.string_to_js x393);(Ojs.string_to_js x394)|])
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x397 : Ojs.t) -> x397
        and t_to_js : t -> Ojs.t = fun (x396 : Ojs.t) -> x396
        let (use_custom : t -> bool) =
          fun (x398 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x398) "useCustom")
        let (set_use_custom : t -> bool -> unit) =
          fun (x399 : t) ->
            fun (x400 : bool) ->
              Ojs.set_prop_ascii (t_to_js x399) "useCustom"
                (Ojs.bool_to_js x400)
      end
    module RemoteAuthorityResolverContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x402 : Ojs.t) -> x402
        and t_to_js : t -> Ojs.t = fun (x401 : Ojs.t) -> x401
        let (resolve_attempt : t -> int) =
          fun (x403 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x403) "resolveAttempt")
        let (set_resolve_attempt : t -> int -> unit) =
          fun (x404 : t) ->
            fun (x405 : int) ->
              Ojs.set_prop_ascii (t_to_js x404) "resolveAttempt"
                (Ojs.int_to_js x405)
      end
    module ResolvedAuthority =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x407 : Ojs.t) -> x407
        and t_to_js : t -> Ojs.t = fun (x406 : Ojs.t) -> x406
        let (host : t -> string) =
          fun (x408 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x408) "host")
        let (port : t -> int) =
          fun (x409 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x409) "port")
        let (connection_token : t -> string or_undefined) =
          fun (x410 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x410) "connectionToken")
        let (create :
          host:string -> port:int -> ?connection_token:string -> unit -> t) =
          fun ~host:(x412 : string) ->
            fun ~port:(x413 : int) ->
              fun ?connection_token:(x414 : string option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "ResolvedAuthority")
                       (let x415 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x415 "push" [|(Ojs.string_to_js x412)|]);
                        ignore
                          (Ojs.call x415 "push" [|(Ojs.int_to_js x413)|]);
                        (match x414 with
                         | Some x416 ->
                             ignore
                               (Ojs.call x415 "push"
                                  [|(Ojs.string_to_js x416)|])
                         | None -> ());
                        x415))
      end
    module ResolvedOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x418 : Ojs.t) -> x418
        and t_to_js : t -> Ojs.t = fun (x417 : Ojs.t) -> x417
        let (extension_host_env : t -> AnonymousInterface17.t) =
          fun (x419 : t) ->
            AnonymousInterface17.t_of_js
              (Ojs.get_prop_ascii (t_to_js x419) "extensionHostEnv")
        let (set_extension_host_env : t -> AnonymousInterface17.t -> unit) =
          fun (x420 : t) ->
            fun (x421 : AnonymousInterface17.t) ->
              Ojs.set_prop_ascii (t_to_js x420) "extensionHostEnv"
                (AnonymousInterface17.t_to_js x421)
      end
    module TunnelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x423 : Ojs.t) -> x423
        and t_to_js : t -> Ojs.t = fun (x422 : Ojs.t) -> x422
        let (remote_address : t -> AnonymousInterface11.t) =
          fun (x424 : t) ->
            AnonymousInterface11.t_of_js
              (Ojs.get_prop_ascii (t_to_js x424) "remoteAddress")
        let (set_remote_address : t -> AnonymousInterface11.t -> unit) =
          fun (x425 : t) ->
            fun (x426 : AnonymousInterface11.t) ->
              Ojs.set_prop_ascii (t_to_js x425) "remoteAddress"
                (AnonymousInterface11.t_to_js x426)
        let (local_address_port : t -> int) =
          fun (x427 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x427) "localAddressPort")
        let (set_local_address_port : t -> int -> unit) =
          fun (x428 : t) ->
            fun (x429 : int) ->
              Ojs.set_prop_ascii (t_to_js x428) "localAddressPort"
                (Ojs.int_to_js x429)
        let (label : t -> string) =
          fun (x430 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x430) "label")
        let (set_label : t -> string -> unit) =
          fun (x431 : t) ->
            fun (x432 : string) ->
              Ojs.set_prop_ascii (t_to_js x431) "label"
                (Ojs.string_to_js x432)
        let (public : t -> bool) =
          fun (x433 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x433) "public")
        let (set_public : t -> bool -> unit) =
          fun (x434 : t) ->
            fun (x435 : bool) ->
              Ojs.set_prop_ascii (t_to_js x434) "public"
                (Ojs.bool_to_js x435)
      end
    module TunnelDescription =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x437 : Ojs.t) -> x437
        and t_to_js : t -> Ojs.t = fun (x436 : Ojs.t) -> x436
        let (remote_address : t -> AnonymousInterface11.t) =
          fun (x438 : t) ->
            AnonymousInterface11.t_of_js
              (Ojs.get_prop_ascii (t_to_js x438) "remoteAddress")
        let (set_remote_address : t -> AnonymousInterface11.t -> unit) =
          fun (x439 : t) ->
            fun (x440 : AnonymousInterface11.t) ->
              Ojs.set_prop_ascii (t_to_js x439) "remoteAddress"
                (AnonymousInterface11.t_to_js x440)
        let (local_address : t -> AnonymousInterface11.t or_string) =
          fun (x441 : t) ->
            or_string_of_js AnonymousInterface11.t_of_js
              (Ojs.get_prop_ascii (t_to_js x441) "localAddress")
        let (set_local_address :
          t -> AnonymousInterface11.t or_string -> unit) =
          fun (x443 : t) ->
            fun (x444 : AnonymousInterface11.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x443) "localAddress"
                (or_string_to_js AnonymousInterface11.t_to_js x444)
        let (public : t -> bool) =
          fun (x446 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x446) "public")
        let (set_public : t -> bool -> unit) =
          fun (x447 : t) ->
            fun (x448 : bool) ->
              Ojs.set_prop_ascii (t_to_js x447) "public"
                (Ojs.bool_to_js x448)
      end
    module Tunnel =
      struct
        include struct include TunnelDescription end
        let (on_did_dispose : t -> unit Event.t) =
          fun (x449 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x449) "onDidDispose")
        let (set_on_did_dispose : t -> unit Event.t -> unit) =
          fun (x451 : t) ->
            fun (x452 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x451) "onDidDispose"
                (Event.t_to_js Ojs.unit_to_js x452)
        let (dispose : t -> (unit, unit Promise.t) union2) =
          fun (x454 : t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x456 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x456)
              (Ojs.call (t_to_js x454) "dispose" [||])
      end
    module TunnelInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x459 : Ojs.t) -> x459
        and t_to_js : t -> Ojs.t = fun (x458 : Ojs.t) -> x458
        let (environment_tunnels : t -> TunnelDescription.t list) =
          fun (x460 : t) ->
            Ojs.list_of_js TunnelDescription.t_of_js
              (Ojs.get_prop_ascii (t_to_js x460) "environmentTunnels")
        let (set_environment_tunnels : t -> TunnelDescription.t list -> unit)
          =
          fun (x462 : t) ->
            fun (x463 : TunnelDescription.t list) ->
              Ojs.set_prop_ascii (t_to_js x462) "environmentTunnels"
                (Ojs.list_to_js TunnelDescription.t_to_js x463)
      end
    module TunnelCreationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x466 : Ojs.t) -> x466
        and t_to_js : t -> Ojs.t = fun (x465 : Ojs.t) -> x465
        let (elevation_required : t -> bool) =
          fun (x467 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x467) "elevationRequired")
        let (set_elevation_required : t -> bool -> unit) =
          fun (x468 : t) ->
            fun (x469 : bool) ->
              Ojs.set_prop_ascii (t_to_js x468) "elevationRequired"
                (Ojs.bool_to_js x469)
      end
    module CandidatePortSource =
      struct
        type t = [ `None  | `Process  | `Output ]
        let rec t_of_js : Ojs.t -> t =
          fun (x471 : Ojs.t) ->
            let x472 = x471 in
            match Ojs.int_of_js x472 with
            | 0 -> `None
            | 1 -> `Process
            | 2 -> `Output
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x470 : [ `None  | `Process  | `Output ]) ->
            match x470 with
            | `None -> Ojs.int_to_js 0
            | `Process -> Ojs.int_to_js 1
            | `Output -> Ojs.int_to_js 2
      end
    module ResolverResult =
      struct
        type t =
          (ResolvedAuthority.t, ResolvedOptions.t, TunnelInformation.t)
            intersection3
        let rec t_of_js : Ojs.t -> t =
          fun (x477 : Ojs.t) ->
            intersection3_of_js ResolvedAuthority.t_of_js
              ResolvedOptions.t_of_js TunnelInformation.t_of_js x477
        and t_to_js : t -> Ojs.t =
          fun
            (x473 :
              (ResolvedAuthority.t, ResolvedOptions.t, TunnelInformation.t)
                intersection3)
            ->
            intersection3_to_js ResolvedAuthority.t_to_js
              ResolvedOptions.t_to_js TunnelInformation.t_to_js x473
      end
    module RemoteAuthorityResolverError =
      struct
        include struct include Error end
        let (not_available : ?message:string -> ?handled:bool -> unit -> t) =
          fun ?message:(x481 : string option) ->
            fun ?handled:(x482 : bool option) ->
              fun () ->
                t_of_js
                  (let x486 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode")
                       "RemoteAuthorityResolverError" in
                   Ojs.call (Ojs.get_prop_ascii x486 "NotAvailable") "apply"
                     [|x486;((let x483 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x481 with
                               | Some x485 ->
                                   ignore
                                     (Ojs.call x483 "push"
                                        [|(Ojs.string_to_js x485)|])
                               | None -> ());
                              (match x482 with
                               | Some x484 ->
                                   ignore
                                     (Ojs.call x483 "push"
                                        [|(Ojs.bool_to_js x484)|])
                               | None -> ());
                              x483))|])
        let (temporarily_not_available : ?message:string -> unit -> t) =
          fun ?message:(x487 : string option) ->
            fun () ->
              t_of_js
                (let x490 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode")
                     "RemoteAuthorityResolverError" in
                 Ojs.call (Ojs.get_prop_ascii x490 "TemporarilyNotAvailable")
                   "apply"
                   [|x490;((let x488 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x487 with
                             | Some x489 ->
                                 ignore
                                   (Ojs.call x488 "push"
                                      [|(Ojs.string_to_js x489)|])
                             | None -> ());
                            x488))|])
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x491 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "RemoteAuthorityResolverError")
                   (let x492 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x491 with
                     | Some x493 ->
                         ignore
                           (Ojs.call x492 "push" [|(Ojs.string_to_js x493)|])
                     | None -> ());
                    x492))
      end
    module RemoteAuthorityResolver =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x495 : Ojs.t) -> x495
        and t_to_js : t -> Ojs.t = fun (x494 : Ojs.t) -> x494
        let (resolve :
          t ->
            authority:string ->
              context:RemoteAuthorityResolverContext.t ->
                (ResolverResult.t, ResolverResult.t Promise.t) union2)
          =
          fun (x498 : t) ->
            fun ~authority:(x496 : string) ->
              fun ~context:(x497 : RemoteAuthorityResolverContext.t) ->
                union2_of_js ResolverResult.t_of_js
                  (fun (x500 : Ojs.t) ->
                     Promise.t_of_js ResolverResult.t_of_js x500)
                  (Ojs.call (t_to_js x498) "resolve"
                     [|(Ojs.string_to_js x496);(RemoteAuthorityResolverContext.t_to_js
                                                  x497)|])
        let (tunnel_factory :
          t ->
            tunnel_options:TunnelOptions.t ->
              tunnel_creation_options:TunnelCreationOptions.t ->
                Tunnel.t Promise.t or_undefined)
          =
          fun (x504 : t) ->
            fun ~tunnel_options:(x502 : TunnelOptions.t) ->
              fun ~tunnel_creation_options:(x503 : TunnelCreationOptions.t)
                ->
                or_undefined_of_js
                  (fun (x505 : Ojs.t) -> Promise.t_of_js Tunnel.t_of_js x505)
                  (Ojs.call (t_to_js x504) "tunnelFactory"
                     [|(TunnelOptions.t_to_js x502);(TunnelCreationOptions.t_to_js
                                                       x503)|])
        let (show_candidate_port :
          t -> host:string -> port:int -> detail:string -> bool Promise.t) =
          fun (x510 : t) ->
            fun ~host:(x507 : string) ->
              fun ~port:(x508 : int) ->
                fun ~detail:(x509 : string) ->
                  Promise.t_of_js Ojs.bool_of_js
                    (Ojs.call (t_to_js x510) "showCandidatePort"
                       [|(Ojs.string_to_js x507);(Ojs.int_to_js x508);(
                         Ojs.string_to_js x509)|])
        let (tunnel_features : t -> AnonymousInterface7.t) =
          fun (x512 : t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js x512) "tunnelFeatures")
        let (set_tunnel_features : t -> AnonymousInterface7.t -> unit) =
          fun (x513 : t) ->
            fun (x514 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js x513) "tunnelFeatures"
                (AnonymousInterface7.t_to_js x514)
        let (candidate_port_source : t -> CandidatePortSource.t) =
          fun (x515 : t) ->
            CandidatePortSource.t_of_js
              (Ojs.get_prop_ascii (t_to_js x515) "candidatePortSource")
        let (set_candidate_port_source : t -> CandidatePortSource.t -> unit)
          =
          fun (x516 : t) ->
            fun (x517 : CandidatePortSource.t) ->
              Ojs.set_prop_ascii (t_to_js x516) "candidatePortSource"
                (CandidatePortSource.t_to_js x517)
      end
    module ResourceLabelFormatting =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x519 : Ojs.t) -> x519
        and t_to_js : t -> Ojs.t = fun (x518 : Ojs.t) -> x518
        let (label : t -> string) =
          fun (x520 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x520) "label")
        let (set_label : t -> string -> unit) =
          fun (x521 : t) ->
            fun (x522 : string) ->
              Ojs.set_prop_ascii (t_to_js x521) "label"
                (Ojs.string_to_js x522)
        let (separator : t -> [ `L_s0  | `L_s1  | `L_s2 ]) =
          fun (x523 : t) ->
            let x524 = Ojs.get_prop_ascii (t_to_js x523) "separator" in
            match Ojs.string_of_js x524 with
            | "" -> `L_s0
            | "/" -> `L_s1
            | "\\" -> `L_s2
            | _ -> assert false
        let (set_separator : t -> [ `L_s0  | `L_s1  | `L_s2 ] -> unit) =
          fun (x525 : t) ->
            fun (x526 : [ `L_s0  | `L_s1  | `L_s2 ]) ->
              Ojs.set_prop_ascii (t_to_js x525) "separator"
                (match x526 with
                 | `L_s0 -> Ojs.string_to_js "LS0"
                 | `L_s1 -> Ojs.string_to_js "LS1"
                 | `L_s2 -> Ojs.string_to_js "LS2")
        let (tildify : t -> bool) =
          fun (x527 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x527) "tildify")
        let (set_tildify : t -> bool -> unit) =
          fun (x528 : t) ->
            fun (x529 : bool) ->
              Ojs.set_prop_ascii (t_to_js x528) "tildify"
                (Ojs.bool_to_js x529)
        let (normalize_drive_letter : t -> bool) =
          fun (x530 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x530) "normalizeDriveLetter")
        let (set_normalize_drive_letter : t -> bool -> unit) =
          fun (x531 : t) ->
            fun (x532 : bool) ->
              Ojs.set_prop_ascii (t_to_js x531) "normalizeDriveLetter"
                (Ojs.bool_to_js x532)
        let (workspace_suffix : t -> string) =
          fun (x533 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x533) "workspaceSuffix")
        let (set_workspace_suffix : t -> string -> unit) =
          fun (x534 : t) ->
            fun (x535 : string) ->
              Ojs.set_prop_ascii (t_to_js x534) "workspaceSuffix"
                (Ojs.string_to_js x535)
        let (authority_prefix : t -> string) =
          fun (x536 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x536) "authorityPrefix")
        let (set_authority_prefix : t -> string -> unit) =
          fun (x537 : t) ->
            fun (x538 : string) ->
              Ojs.set_prop_ascii (t_to_js x537) "authorityPrefix"
                (Ojs.string_to_js x538)
        let (strip_path_starting_separator : t -> bool) =
          fun (x539 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x539) "stripPathStartingSeparator")
        let (set_strip_path_starting_separator : t -> bool -> unit) =
          fun (x540 : t) ->
            fun (x541 : bool) ->
              Ojs.set_prop_ascii (t_to_js x540) "stripPathStartingSeparator"
                (Ojs.bool_to_js x541)
      end
    module ResourceLabelFormatter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x543 : Ojs.t) -> x543
        and t_to_js : t -> Ojs.t = fun (x542 : Ojs.t) -> x542
        let (scheme : t -> string) =
          fun (x544 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x544) "scheme")
        let (set_scheme : t -> string -> unit) =
          fun (x545 : t) ->
            fun (x546 : string) ->
              Ojs.set_prop_ascii (t_to_js x545) "scheme"
                (Ojs.string_to_js x546)
        let (authority : t -> string) =
          fun (x547 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x547) "authority")
        let (set_authority : t -> string -> unit) =
          fun (x548 : t) ->
            fun (x549 : string) ->
              Ojs.set_prop_ascii (t_to_js x548) "authority"
                (Ojs.string_to_js x549)
        let (formatting : t -> ResourceLabelFormatting.t) =
          fun (x550 : t) ->
            ResourceLabelFormatting.t_of_js
              (Ojs.get_prop_ascii (t_to_js x550) "formatting")
        let (set_formatting : t -> ResourceLabelFormatting.t -> unit) =
          fun (x551 : t) ->
            fun (x552 : ResourceLabelFormatting.t) ->
              Ojs.set_prop_ascii (t_to_js x551) "formatting"
                (ResourceLabelFormatting.t_to_js x552)
      end
    module AnonymousInterface1 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x554 : Ojs.t) -> x554
        and t_to_js : t -> Ojs.t = fun (x553 : Ojs.t) -> x553
        let (create : t -> bool) =
          fun (x555 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x555) "create")
        let (set_create : t -> bool -> unit) =
          fun (x556 : t) ->
            fun (x557 : bool) ->
              Ojs.set_prop_ascii (t_to_js x556) "create"
                (Ojs.bool_to_js x557)
      end
    module FileSystemProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x559 : Ojs.t) -> x559
        and t_to_js : t -> Ojs.t = fun (x558 : Ojs.t) -> x558
        let (open_ :
          t ->
            resource:Uri.t ->
              options:AnonymousInterface1.t -> int Promise.t or_number)
          =
          fun (x562 : t) ->
            fun ~resource:(x560 : Uri.t) ->
              fun ~options:(x561 : AnonymousInterface1.t) ->
                or_number_of_js
                  (fun (x563 : Ojs.t) -> Promise.t_of_js Ojs.int_of_js x563)
                  (Ojs.call (t_to_js x562) "open"
                     [|(Uri.t_to_js x560);(AnonymousInterface1.t_to_js x561)|])
        let (close : t -> fd:int -> (unit, unit Promise.t) union2) =
          fun (x566 : t) ->
            fun ~fd:(x565 : int) ->
              union2_of_js Ojs.unit_of_js
                (fun (x568 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x568)
                (Ojs.call (t_to_js x566) "close" [|(Ojs.int_to_js x565)|])
        let (read :
          t ->
            fd:int ->
              pos:int ->
                data:Uint8Array.t ->
                  offset:int -> length:int -> int Promise.t or_number)
          =
          fun (x575 : t) ->
            fun ~fd:(x570 : int) ->
              fun ~pos:(x571 : int) ->
                fun ~data:(x572 : Uint8Array.t) ->
                  fun ~offset:(x573 : int) ->
                    fun ~length:(x574 : int) ->
                      or_number_of_js
                        (fun (x576 : Ojs.t) ->
                           Promise.t_of_js Ojs.int_of_js x576)
                        (Ojs.call (t_to_js x575) "read"
                           [|(Ojs.int_to_js x570);(Ojs.int_to_js x571);(
                             Uint8Array.t_to_js x572);(Ojs.int_to_js x573);(
                             Ojs.int_to_js x574)|])
        let (write :
          t ->
            fd:int ->
              pos:int ->
                data:Uint8Array.t ->
                  offset:int -> length:int -> int Promise.t or_number)
          =
          fun (x583 : t) ->
            fun ~fd:(x578 : int) ->
              fun ~pos:(x579 : int) ->
                fun ~data:(x580 : Uint8Array.t) ->
                  fun ~offset:(x581 : int) ->
                    fun ~length:(x582 : int) ->
                      or_number_of_js
                        (fun (x584 : Ojs.t) ->
                           Promise.t_of_js Ojs.int_of_js x584)
                        (Ojs.call (t_to_js x583) "write"
                           [|(Ojs.int_to_js x578);(Ojs.int_to_js x579);(
                             Uint8Array.t_to_js x580);(Ojs.int_to_js x581);(
                             Ojs.int_to_js x582)|])
      end
    module TextSearchQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x587 : Ojs.t) -> x587
        and t_to_js : t -> Ojs.t = fun (x586 : Ojs.t) -> x586
        let (pattern : t -> string) =
          fun (x588 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x588) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x589 : t) ->
            fun (x590 : string) ->
              Ojs.set_prop_ascii (t_to_js x589) "pattern"
                (Ojs.string_to_js x590)
        let (is_multiline : t -> bool) =
          fun (x591 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x591) "isMultiline")
        let (set_is_multiline : t -> bool -> unit) =
          fun (x592 : t) ->
            fun (x593 : bool) ->
              Ojs.set_prop_ascii (t_to_js x592) "isMultiline"
                (Ojs.bool_to_js x593)
        let (is_reg_exp : t -> bool) =
          fun (x594 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x594) "isRegExp")
        let (set_is_reg_exp : t -> bool -> unit) =
          fun (x595 : t) ->
            fun (x596 : bool) ->
              Ojs.set_prop_ascii (t_to_js x595) "isRegExp"
                (Ojs.bool_to_js x596)
        let (is_case_sensitive : t -> bool) =
          fun (x597 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x597) "isCaseSensitive")
        let (set_is_case_sensitive : t -> bool -> unit) =
          fun (x598 : t) ->
            fun (x599 : bool) ->
              Ojs.set_prop_ascii (t_to_js x598) "isCaseSensitive"
                (Ojs.bool_to_js x599)
        let (is_word_match : t -> bool) =
          fun (x600 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x600) "isWordMatch")
        let (set_is_word_match : t -> bool -> unit) =
          fun (x601 : t) ->
            fun (x602 : bool) ->
              Ojs.set_prop_ascii (t_to_js x601) "isWordMatch"
                (Ojs.bool_to_js x602)
      end
    module GlobString =
      struct
        type t = string
        let rec t_of_js : Ojs.t -> t =
          fun (x604 : Ojs.t) -> Ojs.string_of_js x604
        and t_to_js : t -> Ojs.t =
          fun (x603 : string) -> Ojs.string_to_js x603
      end
    module SearchOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x606 : Ojs.t) -> x606
        and t_to_js : t -> Ojs.t = fun (x605 : Ojs.t) -> x605
        let (folder : t -> Uri.t) =
          fun (x607 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x607) "folder")
        let (set_folder : t -> Uri.t -> unit) =
          fun (x608 : t) ->
            fun (x609 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x608) "folder" (Uri.t_to_js x609)
        let (includes : t -> GlobString.t list) =
          fun (x610 : t) ->
            Ojs.list_of_js GlobString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x610) "includes")
        let (set_includes : t -> GlobString.t list -> unit) =
          fun (x612 : t) ->
            fun (x613 : GlobString.t list) ->
              Ojs.set_prop_ascii (t_to_js x612) "includes"
                (Ojs.list_to_js GlobString.t_to_js x613)
        let (excludes : t -> GlobString.t list) =
          fun (x615 : t) ->
            Ojs.list_of_js GlobString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x615) "excludes")
        let (set_excludes : t -> GlobString.t list -> unit) =
          fun (x617 : t) ->
            fun (x618 : GlobString.t list) ->
              Ojs.set_prop_ascii (t_to_js x617) "excludes"
                (Ojs.list_to_js GlobString.t_to_js x618)
        let (use_ignore_files : t -> bool) =
          fun (x620 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x620) "useIgnoreFiles")
        let (set_use_ignore_files : t -> bool -> unit) =
          fun (x621 : t) ->
            fun (x622 : bool) ->
              Ojs.set_prop_ascii (t_to_js x621) "useIgnoreFiles"
                (Ojs.bool_to_js x622)
        let (follow_symlinks : t -> bool) =
          fun (x623 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x623) "followSymlinks")
        let (set_follow_symlinks : t -> bool -> unit) =
          fun (x624 : t) ->
            fun (x625 : bool) ->
              Ojs.set_prop_ascii (t_to_js x624) "followSymlinks"
                (Ojs.bool_to_js x625)
        let (use_global_ignore_files : t -> bool) =
          fun (x626 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x626) "useGlobalIgnoreFiles")
        let (set_use_global_ignore_files : t -> bool -> unit) =
          fun (x627 : t) ->
            fun (x628 : bool) ->
              Ojs.set_prop_ascii (t_to_js x627) "useGlobalIgnoreFiles"
                (Ojs.bool_to_js x628)
      end
    module TextSearchPreviewOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x630 : Ojs.t) -> x630
        and t_to_js : t -> Ojs.t = fun (x629 : Ojs.t) -> x629
        let (match_lines : t -> int) =
          fun (x631 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x631) "matchLines")
        let (set_match_lines : t -> int -> unit) =
          fun (x632 : t) ->
            fun (x633 : int) ->
              Ojs.set_prop_ascii (t_to_js x632) "matchLines"
                (Ojs.int_to_js x633)
        let (chars_per_line : t -> int) =
          fun (x634 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x634) "charsPerLine")
        let (set_chars_per_line : t -> int -> unit) =
          fun (x635 : t) ->
            fun (x636 : int) ->
              Ojs.set_prop_ascii (t_to_js x635) "charsPerLine"
                (Ojs.int_to_js x636)
      end
    module TextSearchOptions =
      struct
        include struct include SearchOptions end
        let (max_results : t -> int) =
          fun (x637 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x637) "maxResults")
        let (set_max_results : t -> int -> unit) =
          fun (x638 : t) ->
            fun (x639 : int) ->
              Ojs.set_prop_ascii (t_to_js x638) "maxResults"
                (Ojs.int_to_js x639)
        let (preview_options : t -> TextSearchPreviewOptions.t) =
          fun (x640 : t) ->
            TextSearchPreviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x640) "previewOptions")
        let (set_preview_options : t -> TextSearchPreviewOptions.t -> unit) =
          fun (x641 : t) ->
            fun (x642 : TextSearchPreviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x641) "previewOptions"
                (TextSearchPreviewOptions.t_to_js x642)
        let (max_file_size : t -> int) =
          fun (x643 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x643) "maxFileSize")
        let (set_max_file_size : t -> int -> unit) =
          fun (x644 : t) ->
            fun (x645 : int) ->
              Ojs.set_prop_ascii (t_to_js x644) "maxFileSize"
                (Ojs.int_to_js x645)
        let (encoding : t -> string) =
          fun (x646 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x646) "encoding")
        let (set_encoding : t -> string -> unit) =
          fun (x647 : t) ->
            fun (x648 : string) ->
              Ojs.set_prop_ascii (t_to_js x647) "encoding"
                (Ojs.string_to_js x648)
        let (before_context : t -> int) =
          fun (x649 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x649) "beforeContext")
        let (set_before_context : t -> int -> unit) =
          fun (x650 : t) ->
            fun (x651 : int) ->
              Ojs.set_prop_ascii (t_to_js x650) "beforeContext"
                (Ojs.int_to_js x651)
        let (after_context : t -> int) =
          fun (x652 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x652) "afterContext")
        let (set_after_context : t -> int -> unit) =
          fun (x653 : t) ->
            fun (x654 : int) ->
              Ojs.set_prop_ascii (t_to_js x653) "afterContext"
                (Ojs.int_to_js x654)
      end
    module TextSearchComplete =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x656 : Ojs.t) -> x656
        and t_to_js : t -> Ojs.t = fun (x655 : Ojs.t) -> x655
        let (limit_hit : t -> bool) =
          fun (x657 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x657) "limitHit")
        let (set_limit_hit : t -> bool -> unit) =
          fun (x658 : t) ->
            fun (x659 : bool) ->
              Ojs.set_prop_ascii (t_to_js x658) "limitHit"
                (Ojs.bool_to_js x659)
      end
    module TextSearchMatchPreview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x661 : Ojs.t) -> x661
        and t_to_js : t -> Ojs.t = fun (x660 : Ojs.t) -> x660
        let (text : t -> string) =
          fun (x662 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x662) "text")
        let (set_text : t -> string -> unit) =
          fun (x663 : t) ->
            fun (x664 : string) ->
              Ojs.set_prop_ascii (t_to_js x663) "text"
                (Ojs.string_to_js x664)
        let (matches : t -> (Range.t, Range.t) or_array) =
          fun (x665 : t) ->
            or_array_of_js Range.t_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x665) "matches")
        let (set_matches : t -> (Range.t, Range.t) or_array -> unit) =
          fun (x668 : t) ->
            fun (x669 : (Range.t, Range.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x668) "matches"
                (or_array_to_js Range.t_to_js Range.t_to_js x669)
      end
    module TextSearchMatch =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x673 : Ojs.t) -> x673
        and t_to_js : t -> Ojs.t = fun (x672 : Ojs.t) -> x672
        let (uri : t -> Uri.t) =
          fun (x674 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x674) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x675 : t) ->
            fun (x676 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x675) "uri" (Uri.t_to_js x676)
        let (ranges : t -> (Range.t, Range.t) or_array) =
          fun (x677 : t) ->
            or_array_of_js Range.t_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x677) "ranges")
        let (set_ranges : t -> (Range.t, Range.t) or_array -> unit) =
          fun (x680 : t) ->
            fun (x681 : (Range.t, Range.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x680) "ranges"
                (or_array_to_js Range.t_to_js Range.t_to_js x681)
        let (preview : t -> TextSearchMatchPreview.t) =
          fun (x684 : t) ->
            TextSearchMatchPreview.t_of_js
              (Ojs.get_prop_ascii (t_to_js x684) "preview")
        let (set_preview : t -> TextSearchMatchPreview.t -> unit) =
          fun (x685 : t) ->
            fun (x686 : TextSearchMatchPreview.t) ->
              Ojs.set_prop_ascii (t_to_js x685) "preview"
                (TextSearchMatchPreview.t_to_js x686)
      end
    module TextSearchContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x688 : Ojs.t) -> x688
        and t_to_js : t -> Ojs.t = fun (x687 : Ojs.t) -> x687
        let (uri : t -> Uri.t) =
          fun (x689 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x689) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x690 : t) ->
            fun (x691 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x690) "uri" (Uri.t_to_js x691)
        let (text : t -> string) =
          fun (x692 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x692) "text")
        let (set_text : t -> string -> unit) =
          fun (x693 : t) ->
            fun (x694 : string) ->
              Ojs.set_prop_ascii (t_to_js x693) "text"
                (Ojs.string_to_js x694)
        let (line_number : t -> int) =
          fun (x695 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x695) "lineNumber")
        let (set_line_number : t -> int -> unit) =
          fun (x696 : t) ->
            fun (x697 : int) ->
              Ojs.set_prop_ascii (t_to_js x696) "lineNumber"
                (Ojs.int_to_js x697)
      end
    module TextSearchResult =
      struct
        type t = (TextSearchContext.t, TextSearchMatch.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x701 : Ojs.t) ->
            union2_of_js TextSearchContext.t_of_js TextSearchMatch.t_of_js
              x701
        and t_to_js : t -> Ojs.t =
          fun (x698 : (TextSearchContext.t, TextSearchMatch.t) union2) ->
            union2_to_js TextSearchContext.t_to_js TextSearchMatch.t_to_js
              x698
      end
    module TextSearchProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x705 : Ojs.t) -> x705
        and t_to_js : t -> Ojs.t = fun (x704 : Ojs.t) -> x704
        let (provide_text_search_results :
          t ->
            query:TextSearchQuery.t ->
              options:TextSearchOptions.t ->
                progress:TextSearchResult.t Progress.t ->
                  token:CancellationToken.t ->
                    TextSearchComplete.t ProviderResult.t)
          =
          fun (x711 : t) ->
            fun ~query:(x706 : TextSearchQuery.t) ->
              fun ~options:(x707 : TextSearchOptions.t) ->
                fun ~progress:(x708 : TextSearchResult.t Progress.t) ->
                  fun ~token:(x710 : CancellationToken.t) ->
                    ProviderResult.t_of_js TextSearchComplete.t_of_js
                      (Ojs.call (t_to_js x711) "provideTextSearchResults"
                         [|(TextSearchQuery.t_to_js x706);(TextSearchOptions.t_to_js
                                                             x707);(Progress.t_to_js
                                                                    TextSearchResult.t_to_js
                                                                    x708);(
                           CancellationToken.t_to_js x710)|])
      end
    module FileSearchQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x714 : Ojs.t) -> x714
        and t_to_js : t -> Ojs.t = fun (x713 : Ojs.t) -> x713
        let (pattern : t -> string) =
          fun (x715 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x715) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x716 : t) ->
            fun (x717 : string) ->
              Ojs.set_prop_ascii (t_to_js x716) "pattern"
                (Ojs.string_to_js x717)
      end
    module FileSearchOptions =
      struct
        include struct include SearchOptions end
        let (max_results : t -> int) =
          fun (x718 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x718) "maxResults")
        let (set_max_results : t -> int -> unit) =
          fun (x719 : t) ->
            fun (x720 : int) ->
              Ojs.set_prop_ascii (t_to_js x719) "maxResults"
                (Ojs.int_to_js x720)
        let (session : t -> CancellationToken.t) =
          fun (x721 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x721) "session")
        let (set_session : t -> CancellationToken.t -> unit) =
          fun (x722 : t) ->
            fun (x723 : CancellationToken.t) ->
              Ojs.set_prop_ascii (t_to_js x722) "session"
                (CancellationToken.t_to_js x723)
      end
    module FileSearchProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x725 : Ojs.t) -> x725
        and t_to_js : t -> Ojs.t = fun (x724 : Ojs.t) -> x724
        let (provide_file_search_results :
          t ->
            query:FileSearchQuery.t ->
              options:FileSearchOptions.t ->
                token:CancellationToken.t -> Uri.t list ProviderResult.t)
          =
          fun (x729 : t) ->
            fun ~query:(x726 : FileSearchQuery.t) ->
              fun ~options:(x727 : FileSearchOptions.t) ->
                fun ~token:(x728 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x730 : Ojs.t) -> Ojs.list_of_js Uri.t_of_js x730)
                    (Ojs.call (t_to_js x729) "provideFileSearchResults"
                       [|(FileSearchQuery.t_to_js x726);(FileSearchOptions.t_to_js
                                                           x727);(CancellationToken.t_to_js
                                                                    x728)|])
      end
    module WebviewEditorInset =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x733 : Ojs.t) -> x733
        and t_to_js : t -> Ojs.t = fun (x732 : Ojs.t) -> x732
        let (editor : t -> TextEditor.t) =
          fun (x734 : t) ->
            TextEditor.t_of_js (Ojs.get_prop_ascii (t_to_js x734) "editor")
        let (line : t -> int) =
          fun (x735 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x735) "line")
        let (height : t -> int) =
          fun (x736 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x736) "height")
        let (webview : t -> Webview.t) =
          fun (x737 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x737) "webview")
        let (on_did_dispose : t -> unit Event.t) =
          fun (x738 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x738) "onDidDispose")
        let (dispose : t -> unit) =
          fun (x740 : t) -> ignore (Ojs.call (t_to_js x740) "dispose" [||])
      end
    module TerminalDataWriteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x742 : Ojs.t) -> x742
        and t_to_js : t -> Ojs.t = fun (x741 : Ojs.t) -> x741
        let (terminal : t -> Terminal.t) =
          fun (x743 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x743) "terminal")
        let (data : t -> string) =
          fun (x744 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x744) "data")
      end
    module TerminalDimensionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x746 : Ojs.t) -> x746
        and t_to_js : t -> Ojs.t = fun (x745 : Ojs.t) -> x745
        let (terminal : t -> Terminal.t) =
          fun (x747 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x747) "terminal")
        let (dimensions : t -> TerminalDimensions.t) =
          fun (x748 : t) ->
            TerminalDimensions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x748) "dimensions")
      end
    module Terminal =
      struct
        type t = Terminal.t
        let rec t_of_js : Ojs.t -> t =
          fun (x750 : Ojs.t) -> Terminal.t_of_js x750
        and t_to_js : t -> Ojs.t =
          fun (x749 : Terminal.t) -> Terminal.t_to_js x749
        let (dimensions : t -> TerminalDimensions.t or_undefined) =
          fun (x751 : t) ->
            or_undefined_of_js TerminalDimensions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x751) "dimensions")
      end
    module TerminalOptions =
      struct
        type t = TerminalOptions.t
        let rec t_of_js : Ojs.t -> t =
          fun (x754 : Ojs.t) -> TerminalOptions.t_of_js x754
        and t_to_js : t -> Ojs.t =
          fun (x753 : TerminalOptions.t) -> TerminalOptions.t_to_js x753
        let (icon : t -> string) =
          fun (x755 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x755) "icon")
        let (message : t -> string) =
          fun (x756 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x756) "message")
      end
    module FindTextInFilesOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x758 : Ojs.t) -> x758
        and t_to_js : t -> Ojs.t = fun (x757 : Ojs.t) -> x757
        let (include_ : t -> GlobPattern.t) =
          fun (x759 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x759) "include")
        let (set_include : t -> GlobPattern.t -> unit) =
          fun (x760 : t) ->
            fun (x761 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x760) "include"
                (GlobPattern.t_to_js x761)
        let (exclude : t -> GlobPattern.t) =
          fun (x762 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x762) "exclude")
        let (set_exclude : t -> GlobPattern.t -> unit) =
          fun (x763 : t) ->
            fun (x764 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x763) "exclude"
                (GlobPattern.t_to_js x764)
        let (use_default_excludes : t -> bool) =
          fun (x765 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x765) "useDefaultExcludes")
        let (set_use_default_excludes : t -> bool -> unit) =
          fun (x766 : t) ->
            fun (x767 : bool) ->
              Ojs.set_prop_ascii (t_to_js x766) "useDefaultExcludes"
                (Ojs.bool_to_js x767)
        let (max_results : t -> int) =
          fun (x768 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x768) "maxResults")
        let (set_max_results : t -> int -> unit) =
          fun (x769 : t) ->
            fun (x770 : int) ->
              Ojs.set_prop_ascii (t_to_js x769) "maxResults"
                (Ojs.int_to_js x770)
        let (use_ignore_files : t -> bool) =
          fun (x771 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x771) "useIgnoreFiles")
        let (set_use_ignore_files : t -> bool -> unit) =
          fun (x772 : t) ->
            fun (x773 : bool) ->
              Ojs.set_prop_ascii (t_to_js x772) "useIgnoreFiles"
                (Ojs.bool_to_js x773)
        let (use_global_ignore_files : t -> bool) =
          fun (x774 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x774) "useGlobalIgnoreFiles")
        let (set_use_global_ignore_files : t -> bool -> unit) =
          fun (x775 : t) ->
            fun (x776 : bool) ->
              Ojs.set_prop_ascii (t_to_js x775) "useGlobalIgnoreFiles"
                (Ojs.bool_to_js x776)
        let (follow_symlinks : t -> bool) =
          fun (x777 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x777) "followSymlinks")
        let (set_follow_symlinks : t -> bool -> unit) =
          fun (x778 : t) ->
            fun (x779 : bool) ->
              Ojs.set_prop_ascii (t_to_js x778) "followSymlinks"
                (Ojs.bool_to_js x779)
        let (encoding : t -> string) =
          fun (x780 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x780) "encoding")
        let (set_encoding : t -> string -> unit) =
          fun (x781 : t) ->
            fun (x782 : string) ->
              Ojs.set_prop_ascii (t_to_js x781) "encoding"
                (Ojs.string_to_js x782)
        let (preview_options : t -> TextSearchPreviewOptions.t) =
          fun (x783 : t) ->
            TextSearchPreviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x783) "previewOptions")
        let (set_preview_options : t -> TextSearchPreviewOptions.t -> unit) =
          fun (x784 : t) ->
            fun (x785 : TextSearchPreviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x784) "previewOptions"
                (TextSearchPreviewOptions.t_to_js x785)
        let (before_context : t -> int) =
          fun (x786 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x786) "beforeContext")
        let (set_before_context : t -> int -> unit) =
          fun (x787 : t) ->
            fun (x788 : int) ->
              Ojs.set_prop_ascii (t_to_js x787) "beforeContext"
                (Ojs.int_to_js x788)
        let (after_context : t -> int) =
          fun (x789 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x789) "afterContext")
        let (set_after_context : t -> int -> unit) =
          fun (x790 : t) ->
            fun (x791 : int) ->
              Ojs.set_prop_ascii (t_to_js x790) "afterContext"
                (Ojs.int_to_js x791)
      end
    module LineChange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x793 : Ojs.t) -> x793
        and t_to_js : t -> Ojs.t = fun (x792 : Ojs.t) -> x792
        let (original_start_line_number : t -> int) =
          fun (x794 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x794) "originalStartLineNumber")
        let (original_end_line_number : t -> int) =
          fun (x795 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x795) "originalEndLineNumber")
        let (modified_start_line_number : t -> int) =
          fun (x796 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x796) "modifiedStartLineNumber")
        let (modified_end_line_number : t -> int) =
          fun (x797 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x797) "modifiedEndLineNumber")
      end
    module Commands =
      struct
        let (register_diff_information_command :
          command:string ->
            callback:(diff:LineChange.t list -> args:any list -> any) ->
              ?this_arg:any -> unit -> Disposable.t)
          =
          fun ~command:(x798 : string) ->
            fun
              ~callback:(x799 :
                          diff:LineChange.t list -> args:any list -> any)
              ->
              fun ?this_arg:(x800 : any option) ->
                fun () ->
                  Disposable.t_of_js
                    (let x806 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "commands" in
                     Ojs.call
                       (Ojs.get_prop_ascii x806
                          "registerDiffInformationCommand") "apply"
                       [|x806;((let x801 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x801 "push"
                                     [|(Ojs.string_to_js x798)|]);
                                ignore
                                  (Ojs.call x801 "push"
                                     [|(Ojs.fun_to_js_args
                                          (fun (x803 : _) ->
                                             any_to_js
                                               (x799
                                                  ~diff:(Ojs.list_of_js
                                                           LineChange.t_of_js
                                                           (Ojs.array_get
                                                              x803 0))
                                                  ~args:(Ojs.list_of_js_from
                                                           any_of_js x803 1))))|]);
                                (match x800 with
                                 | Some x802 ->
                                     ignore
                                       (Ojs.call x801 "push"
                                          [|(any_to_js x802)|])
                                 | None -> ());
                                x801))|])
      end
    module DebugProtocolVariableContainer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x808 : Ojs.t) -> x808
        and t_to_js : t -> Ojs.t = fun (x807 : Ojs.t) -> x807
      end
    module DebugProtocolVariable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x810 : Ojs.t) -> x810
        and t_to_js : t -> Ojs.t = fun (x809 : Ojs.t) -> x809
      end
    module SourceControlInputBoxValidationType =
      struct
        type t = [ `Error  | `Warning  | `Information ]
        let rec t_of_js : Ojs.t -> t =
          fun (x812 : Ojs.t) ->
            let x813 = x812 in
            match Ojs.int_of_js x813 with
            | 0 -> `Error
            | 1 -> `Warning
            | 2 -> `Information
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x811 : [ `Error  | `Warning  | `Information ]) ->
            match x811 with
            | `Error -> Ojs.int_to_js 0
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
      end
    module SourceControlInputBoxValidation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x815 : Ojs.t) -> x815
        and t_to_js : t -> Ojs.t = fun (x814 : Ojs.t) -> x814
        let (message : t -> string) =
          fun (x816 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x816) "message")
        let (type_ : t -> SourceControlInputBoxValidationType.t) =
          fun (x817 : t) ->
            SourceControlInputBoxValidationType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x817) "type")
      end
    module SourceControlInputBox =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x819 : Ojs.t) -> x819
        and t_to_js : t -> Ojs.t = fun (x818 : Ojs.t) -> x818
        let (focus : t -> unit) =
          fun (x820 : t) -> ignore (Ojs.call (t_to_js x820) "focus" [||])
        let (show_validation_message :
          t ->
            message:string ->
              type_:SourceControlInputBoxValidationType.t -> unit)
          =
          fun (x823 : t) ->
            fun ~message:(x821 : string) ->
              fun ~type_:(x822 : SourceControlInputBoxValidationType.t) ->
                ignore
                  (Ojs.call (t_to_js x823) "showValidationMessage"
                     [|(Ojs.string_to_js x821);(SourceControlInputBoxValidationType.t_to_js
                                                  x822)|])
        let (validate_input :
          t ->
            value:string ->
              cursor_position:int ->
                SourceControlInputBoxValidation.t ProviderResult.t)
          =
          fun (x826 : t) ->
            fun ~value:(x824 : string) ->
              fun ~cursor_position:(x825 : int) ->
                ProviderResult.t_of_js
                  SourceControlInputBoxValidation.t_of_js
                  (Ojs.call (t_to_js x826) "validateInput"
                     [|(Ojs.string_to_js x824);(Ojs.int_to_js x825)|])
      end
    module SourceControl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x829 : Ojs.t) -> x829
        and t_to_js : t -> Ojs.t = fun (x828 : Ojs.t) -> x828
        let (selected : t -> bool) =
          fun (x830 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x830) "selected")
        let (on_did_change_selection : t -> bool Event.t) =
          fun (x831 : t) ->
            Event.t_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x831) "onDidChangeSelection")
      end
    module DocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x834 : Ojs.t) -> x834
        and t_to_js : t -> Ojs.t = fun (x833 : Ojs.t) -> x833
        let (exclusive : t -> bool) =
          fun (x835 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x835) "exclusive")
      end
    module TreeView =
      struct
        include struct include Disposable end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x837 : Ojs.t) -> x837
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x836 : Ojs.t) -> x836
        let (reveal :
          'T t ->
            element:'T or_undefined ->
              ?options:AnonymousInterface12.t -> unit -> unit Promise.t)
          =
          fun (x843 : 'T t) ->
            fun ~element:(x838 : 'T or_undefined) ->
              fun ?options:(x839 : AnonymousInterface12.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x845 = t_to_js Obj.magic x843 in
                     Ojs.call (Ojs.get_prop_ascii x845 "reveal") "apply"
                       [|x845;((let x840 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x840 "push"
                                     [|(or_undefined_to_js Obj.magic x838)|]);
                                (match x839 with
                                 | Some x841 ->
                                     ignore
                                       (Ojs.call x840 "push"
                                          [|(AnonymousInterface12.t_to_js
                                               x841)|])
                                 | None -> ());
                                x840))|])
      end
    module TaskPresentationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x848 : Ojs.t) -> x848
        and t_to_js : t -> Ojs.t = fun (x847 : Ojs.t) -> x847
        let (group : t -> string) =
          fun (x849 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x849) "group")
        let (set_group : t -> string -> unit) =
          fun (x850 : t) ->
            fun (x851 : string) ->
              Ojs.set_prop_ascii (t_to_js x850) "group"
                (Ojs.string_to_js x851)
      end
    module StatusBarItemOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x853 : Ojs.t) -> x853
        and t_to_js : t -> Ojs.t = fun (x852 : Ojs.t) -> x852
        let (id : t -> string) =
          fun (x854 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x854) "id")
        let (set_id : t -> string -> unit) =
          fun (x855 : t) ->
            fun (x856 : string) ->
              Ojs.set_prop_ascii (t_to_js x855) "id" (Ojs.string_to_js x856)
        let (name : t -> string) =
          fun (x857 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x857) "name")
        let (set_name : t -> string -> unit) =
          fun (x858 : t) ->
            fun (x859 : string) ->
              Ojs.set_prop_ascii (t_to_js x858) "name"
                (Ojs.string_to_js x859)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x860 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x860) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x861 : t) ->
            fun (x862 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x861) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x862)
        let (alignment : t -> StatusBarAlignment.t) =
          fun (x863 : t) ->
            StatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x863) "alignment")
        let (set_alignment : t -> StatusBarAlignment.t -> unit) =
          fun (x864 : t) ->
            fun (x865 : StatusBarAlignment.t) ->
              Ojs.set_prop_ascii (t_to_js x864) "alignment"
                (StatusBarAlignment.t_to_js x865)
        let (priority : t -> int) =
          fun (x866 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x866) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x867 : t) ->
            fun (x868 : int) ->
              Ojs.set_prop_ascii (t_to_js x867) "priority"
                (Ojs.int_to_js x868)
      end
    module CustomTextEditorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x870 : Ojs.t) -> x870
        and t_to_js : t -> Ojs.t = fun (x869 : Ojs.t) -> x869
        let (move_custom_text_editor :
          t ->
            new_document:TextDocument.t ->
              existing_webview_panel:WebviewPanel.t ->
                token:CancellationToken.t -> unit Promise.t)
          =
          fun (x874 : t) ->
            fun ~new_document:(x871 : TextDocument.t) ->
              fun ~existing_webview_panel:(x872 : WebviewPanel.t) ->
                fun ~token:(x873 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js x874) "moveCustomTextEditor"
                       [|(TextDocument.t_to_js x871);(WebviewPanel.t_to_js
                                                        x872);(CancellationToken.t_to_js
                                                                 x873)|])
      end
    module QuickPick =
      struct
        include struct include QuickInput end
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x877 : Ojs.t) -> x877
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x876 : Ojs.t) -> x876
        let (sort_by_label : 'T t -> bool) =
          fun (x878 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x878) "sortByLabel")
        let (set_sort_by_label : 'T t -> bool -> unit) =
          fun (x880 : 'T t) ->
            fun (x881 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x880) "sortByLabel"
                (Ojs.bool_to_js x881)
      end
    module QuickPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x884 : Ojs.t) -> x884
        and t_to_js : t -> Ojs.t = fun (x883 : Ojs.t) -> x883
        let (title : t -> string) =
          fun (x885 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x885) "title")
        let (set_title : t -> string -> unit) =
          fun (x886 : t) ->
            fun (x887 : string) ->
              Ojs.set_prop_ascii (t_to_js x886) "title"
                (Ojs.string_to_js x887)
      end
    module InputBoxOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x889 : Ojs.t) -> x889
        and t_to_js : t -> Ojs.t = fun (x888 : Ojs.t) -> x888
        let (title : t -> string) =
          fun (x890 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x890) "title")
        let (set_title : t -> string -> unit) =
          fun (x891 : t) ->
            fun (x892 : string) ->
              Ojs.set_prop_ascii (t_to_js x891) "title"
                (Ojs.string_to_js x892)
      end
    module NotebookEditorRevealType =
      struct
        type t =
          [ `Default  | `InCenter  | `InCenterIfOutsideViewport  | `AtTop ]
        let rec t_of_js : Ojs.t -> t =
          fun (x894 : Ojs.t) ->
            let x895 = x894 in
            match Ojs.int_of_js x895 with
            | 0 -> `Default
            | 1 -> `InCenter
            | 2 -> `InCenterIfOutsideViewport
            | 3 -> `AtTop
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x893 :
              [ `Default  | `InCenter  | `InCenterIfOutsideViewport 
              | `AtTop ])
            ->
            match x893 with
            | `Default -> Ojs.int_to_js 0
            | `InCenter -> Ojs.int_to_js 1
            | `InCenterIfOutsideViewport -> Ojs.int_to_js 2
            | `AtTop -> Ojs.int_to_js 3
      end
    module NotebookCellData =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x897 : Ojs.t) -> x897
        and t_to_js : t -> Ojs.t = fun (x896 : Ojs.t) -> x896
        let (kind : t -> NotebookCellKind.t) =
          fun (x898 : t) ->
            NotebookCellKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x898) "kind")
        let (set_kind : t -> NotebookCellKind.t -> unit) =
          fun (x899 : t) ->
            fun (x900 : NotebookCellKind.t) ->
              Ojs.set_prop_ascii (t_to_js x899) "kind"
                (NotebookCellKind.t_to_js x900)
        let (source : t -> string) =
          fun (x901 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x901) "source")
        let (set_source : t -> string -> unit) =
          fun (x902 : t) ->
            fun (x903 : string) ->
              Ojs.set_prop_ascii (t_to_js x902) "source"
                (Ojs.string_to_js x903)
        let (language : t -> string) =
          fun (x904 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x904) "language")
        let (set_language : t -> string -> unit) =
          fun (x905 : t) ->
            fun (x906 : string) ->
              Ojs.set_prop_ascii (t_to_js x905) "language"
                (Ojs.string_to_js x906)
        let (outputs : t -> NotebookCellOutput.t list) =
          fun (x907 : t) ->
            Ojs.list_of_js NotebookCellOutput.t_of_js
              (Ojs.get_prop_ascii (t_to_js x907) "outputs")
        let (set_outputs : t -> NotebookCellOutput.t list -> unit) =
          fun (x909 : t) ->
            fun (x910 : NotebookCellOutput.t list) ->
              Ojs.set_prop_ascii (t_to_js x909) "outputs"
                (Ojs.list_to_js NotebookCellOutput.t_to_js x910)
        let (metadata : t -> NotebookCellMetadata.t) =
          fun (x912 : t) ->
            NotebookCellMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x912) "metadata")
        let (set_metadata : t -> NotebookCellMetadata.t -> unit) =
          fun (x913 : t) ->
            fun (x914 : NotebookCellMetadata.t) ->
              Ojs.set_prop_ascii (t_to_js x913) "metadata"
                (NotebookCellMetadata.t_to_js x914)
        let (latest_execution_summary : t -> NotebookCellExecutionSummary.t)
          =
          fun (x915 : t) ->
            NotebookCellExecutionSummary.t_of_js
              (Ojs.get_prop_ascii (t_to_js x915) "latestExecutionSummary")
        let (set_latest_execution_summary :
          t -> NotebookCellExecutionSummary.t -> unit) =
          fun (x916 : t) ->
            fun (x917 : NotebookCellExecutionSummary.t) ->
              Ojs.set_prop_ascii (t_to_js x916) "latestExecutionSummary"
                (NotebookCellExecutionSummary.t_to_js x917)
        let (create :
          kind:NotebookCellKind.t ->
            source:string ->
              language:string ->
                ?outputs:NotebookCellOutput.t list ->
                  ?metadata:NotebookCellMetadata.t ->
                    ?latest_execution_summary:NotebookCellExecutionSummary.t
                      -> unit -> t)
          =
          fun ~kind:(x918 : NotebookCellKind.t) ->
            fun ~source:(x919 : string) ->
              fun ~language:(x920 : string) ->
                fun ?outputs:(x921 : NotebookCellOutput.t list option) ->
                  fun ?metadata:(x922 : NotebookCellMetadata.t option) ->
                    fun
                      ?latest_execution_summary:(x923 :
                                                  NotebookCellExecutionSummary.t
                                                    option)
                      ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii
                                   (Ojs.get_prop_ascii Ojs.global
                                      "__LIB__VSCODE__IMPORTS") "vscode")
                                "NotebookCellData")
                             (let x924 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x924 "push"
                                   [|(NotebookCellKind.t_to_js x918)|]);
                              ignore
                                (Ojs.call x924 "push"
                                   [|(Ojs.string_to_js x919)|]);
                              ignore
                                (Ojs.call x924 "push"
                                   [|(Ojs.string_to_js x920)|]);
                              (match x921 with
                               | Some x927 ->
                                   ignore
                                     (Ojs.call x924 "push"
                                        [|(Ojs.list_to_js
                                             NotebookCellOutput.t_to_js x927)|])
                               | None -> ());
                              (match x922 with
                               | Some x926 ->
                                   ignore
                                     (Ojs.call x924 "push"
                                        [|(NotebookCellMetadata.t_to_js x926)|])
                               | None -> ());
                              (match x923 with
                               | Some x925 ->
                                   ignore
                                     (Ojs.call x924 "push"
                                        [|(NotebookCellExecutionSummary.t_to_js
                                             x925)|])
                               | None -> ());
                              x924))
      end
    module NotebookEditorEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x930 : Ojs.t) -> x930
        and t_to_js : t -> Ojs.t = fun (x929 : Ojs.t) -> x929
        let (replace_metadata :
          t -> value:NotebookDocumentMetadata.t -> unit) =
          fun (x932 : t) ->
            fun ~value:(x931 : NotebookDocumentMetadata.t) ->
              ignore
                (Ojs.call (t_to_js x932) "replaceMetadata"
                   [|(NotebookDocumentMetadata.t_to_js x931)|])
        let (replace_cells :
          t -> start:int -> end_:int -> cells:NotebookCellData.t list -> unit)
          =
          fun (x937 : t) ->
            fun ~start:(x933 : int) ->
              fun ~end_:(x934 : int) ->
                fun ~cells:(x935 : NotebookCellData.t list) ->
                  ignore
                    (Ojs.call (t_to_js x937) "replaceCells"
                       [|(Ojs.int_to_js x933);(Ojs.int_to_js x934);(Ojs.list_to_js
                                                                    NotebookCellData.t_to_js
                                                                    x935)|])
        let (replace_cell_output :
          t -> index:int -> outputs:NotebookCellOutput.t list -> unit) =
          fun (x941 : t) ->
            fun ~index:(x938 : int) ->
              fun ~outputs:(x939 : NotebookCellOutput.t list) ->
                ignore
                  (Ojs.call (t_to_js x941) "replaceCellOutput"
                     [|(Ojs.int_to_js x938);(Ojs.list_to_js
                                               NotebookCellOutput.t_to_js
                                               x939)|])
        let (replace_cell_metadata :
          t -> index:int -> metadata:NotebookCellMetadata.t -> unit) =
          fun (x944 : t) ->
            fun ~index:(x942 : int) ->
              fun ~metadata:(x943 : NotebookCellMetadata.t) ->
                ignore
                  (Ojs.call (t_to_js x944) "replaceCellMetadata"
                     [|(Ojs.int_to_js x942);(NotebookCellMetadata.t_to_js
                                               x943)|])
      end
    module NotebookEditorDecorationType =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x946 : Ojs.t) -> x946
        and t_to_js : t -> Ojs.t = fun (x945 : Ojs.t) -> x945
        let (key : t -> string) =
          fun (x947 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x947) "key")
        let (dispose : t -> unit) =
          fun (x948 : t) -> ignore (Ojs.call (t_to_js x948) "dispose" [||])
      end
    module NotebookEditor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x950 : Ojs.t) -> x950
        and t_to_js : t -> Ojs.t = fun (x949 : Ojs.t) -> x949
        let (set_decorations :
          t ->
            decoration_type:NotebookEditorDecorationType.t ->
              range:NotebookCellRange.t -> unit)
          =
          fun (x953 : t) ->
            fun ~decoration_type:(x951 : NotebookEditorDecorationType.t) ->
              fun ~range:(x952 : NotebookCellRange.t) ->
                ignore
                  (Ojs.call (t_to_js x953) "setDecorations"
                     [|(NotebookEditorDecorationType.t_to_js x951);(NotebookCellRange.t_to_js
                                                                    x952)|])
        let (kernel : t -> NotebookKernel.t) =
          fun (x954 : t) ->
            NotebookKernel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x954) "kernel")
        let (edit :
          t ->
            callback:(editBuilder:NotebookEditorEdit.t -> unit) ->
              bool Promise.t)
          =
          fun (x957 : t) ->
            fun ~callback:(x955 : editBuilder:NotebookEditorEdit.t -> unit)
              ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x957) "edit"
                   [|(Ojs.fun_to_js 1
                        (fun (x956 : Ojs.t) ->
                           x955
                             ~editBuilder:(NotebookEditorEdit.t_of_js x956)))|])
        let (document : t -> NotebookDocument.t) =
          fun (x959 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x959) "document")
        let (selection : t -> NotebookCell.t) =
          fun (x960 : t) ->
            NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x960) "selection")
        let (selections : t -> NotebookCellRange.t list) =
          fun (x961 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x961) "selections")
        let (visible_ranges : t -> NotebookCellRange.t list) =
          fun (x963 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x963) "visibleRanges")
        let (reveal_range :
          t ->
            range:NotebookCellRange.t ->
              ?reveal_type:NotebookEditorRevealType.t -> unit -> unit)
          =
          fun (x969 : t) ->
            fun ~range:(x965 : NotebookCellRange.t) ->
              fun ?reveal_type:(x966 : NotebookEditorRevealType.t option) ->
                fun () ->
                  ignore
                    (let x970 = t_to_js x969 in
                     Ojs.call (Ojs.get_prop_ascii x970 "revealRange") "apply"
                       [|x970;((let x967 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x967 "push"
                                     [|(NotebookCellRange.t_to_js x965)|]);
                                (match x966 with
                                 | Some x968 ->
                                     ignore
                                       (Ojs.call x967 "push"
                                          [|(NotebookEditorRevealType.t_to_js
                                               x968)|])
                                 | None -> ());
                                x967))|])
        let (view_column : t -> ViewColumn.t) =
          fun (x971 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x971) "viewColumn")
      end
    module NotebookDocumentMetadataChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x973 : Ojs.t) -> x973
        and t_to_js : t -> Ojs.t = fun (x972 : Ojs.t) -> x972
        let (document : t -> NotebookDocument.t) =
          fun (x974 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x974) "document")
      end
    module NotebookCellsChangeData =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x976 : Ojs.t) -> x976
        and t_to_js : t -> Ojs.t = fun (x975 : Ojs.t) -> x975
        let (start : t -> int) =
          fun (x977 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x977) "start")
        let (deleted_count : t -> int) =
          fun (x978 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x978) "deletedCount")
        let (deleted_items : t -> NotebookCell.t list) =
          fun (x979 : t) ->
            Ojs.list_of_js NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x979) "deletedItems")
        let (items : t -> NotebookCell.t list) =
          fun (x981 : t) ->
            Ojs.list_of_js NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x981) "items")
      end
    module NotebookCellsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x984 : Ojs.t) -> x984
        and t_to_js : t -> Ojs.t = fun (x983 : Ojs.t) -> x983
        let (document : t -> NotebookDocument.t) =
          fun (x985 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x985) "document")
        let (changes : t -> NotebookCellsChangeData.t list) =
          fun (x986 : t) ->
            Ojs.list_of_js NotebookCellsChangeData.t_of_js
              (Ojs.get_prop_ascii (t_to_js x986) "changes")
      end
    module NotebookCellOutputsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x989 : Ojs.t) -> x989
        and t_to_js : t -> Ojs.t = fun (x988 : Ojs.t) -> x988
        let (document : t -> NotebookDocument.t) =
          fun (x990 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x990) "document")
        let (cells : t -> NotebookCell.t list) =
          fun (x991 : t) ->
            Ojs.list_of_js NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x991) "cells")
      end
    module NotebookCellMetadataChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x994 : Ojs.t) -> x994
        and t_to_js : t -> Ojs.t = fun (x993 : Ojs.t) -> x993
        let (document : t -> NotebookDocument.t) =
          fun (x995 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x995) "document")
        let (cell : t -> NotebookCell.t) =
          fun (x996 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x996) "cell")
      end
    module NotebookEditorSelectionChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x998 : Ojs.t) -> x998
        and t_to_js : t -> Ojs.t = fun (x997 : Ojs.t) -> x997
        let (notebook_editor : t -> NotebookEditor.t) =
          fun (x999 : t) ->
            NotebookEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x999) "notebookEditor")
        let (selections : t -> NotebookCellRange.t list) =
          fun (x1000 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1000) "selections")
      end
    module NotebookEditorVisibleRangesChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1003 : Ojs.t) -> x1003
        and t_to_js : t -> Ojs.t = fun (x1002 : Ojs.t) -> x1002
        let (notebook_editor : t -> NotebookEditor.t) =
          fun (x1004 : t) ->
            NotebookEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1004) "notebookEditor")
        let (visible_ranges : t -> NotebookCellRange.t list) =
          fun (x1005 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1005) "visibleRanges")
      end
    module NotebookCellExecutionState =
      struct
        type t = [ `Idle  | `Pending  | `Executing ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1008 : Ojs.t) ->
            let x1009 = x1008 in
            match Ojs.int_of_js x1009 with
            | 1 -> `Idle
            | 2 -> `Pending
            | 3 -> `Executing
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1007 : [ `Idle  | `Pending  | `Executing ]) ->
            match x1007 with
            | `Idle -> Ojs.int_to_js 1
            | `Pending -> Ojs.int_to_js 2
            | `Executing -> Ojs.int_to_js 3
      end
    module NotebookCellExecutionStateChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1011 : Ojs.t) -> x1011
        and t_to_js : t -> Ojs.t = fun (x1010 : Ojs.t) -> x1010
        let (document : t -> NotebookDocument.t) =
          fun (x1012 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1012) "document")
        let (cell : t -> NotebookCell.t) =
          fun (x1013 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x1013) "cell")
        let (execution_state : t -> NotebookCellExecutionState.t) =
          fun (x1014 : t) ->
            NotebookCellExecutionState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1014) "executionState")
      end
    module NotebookData =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1016 : Ojs.t) -> x1016
        and t_to_js : t -> Ojs.t = fun (x1015 : Ojs.t) -> x1015
        let (cells : t -> NotebookCellData.t list) =
          fun (x1017 : t) ->
            Ojs.list_of_js NotebookCellData.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1017) "cells")
        let (set_cells : t -> NotebookCellData.t list -> unit) =
          fun (x1019 : t) ->
            fun (x1020 : NotebookCellData.t list) ->
              Ojs.set_prop_ascii (t_to_js x1019) "cells"
                (Ojs.list_to_js NotebookCellData.t_to_js x1020)
        let (metadata : t -> NotebookDocumentMetadata.t) =
          fun (x1022 : t) ->
            NotebookDocumentMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1022) "metadata")
        let (set_metadata : t -> NotebookDocumentMetadata.t -> unit) =
          fun (x1023 : t) ->
            fun (x1024 : NotebookDocumentMetadata.t) ->
              Ojs.set_prop_ascii (t_to_js x1023) "metadata"
                (NotebookDocumentMetadata.t_to_js x1024)
        let (create :
          cells:NotebookCellData.t list ->
            ?metadata:NotebookDocumentMetadata.t -> unit -> t)
          =
          fun ~cells:(x1025 : NotebookCellData.t list) ->
            fun ?metadata:(x1026 : NotebookDocumentMetadata.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "NotebookData")
                     (let x1027 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1027 "push"
                           [|(Ojs.list_to_js NotebookCellData.t_to_js x1025)|]);
                      (match x1026 with
                       | Some x1028 ->
                           ignore
                             (Ojs.call x1027 "push"
                                [|(NotebookDocumentMetadata.t_to_js x1028)|])
                       | None -> ());
                      x1027))
      end
    module NotebookCommunication =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1031 : Ojs.t) -> x1031
        and t_to_js : t -> Ojs.t = fun (x1030 : Ojs.t) -> x1030
        let (editor_id : t -> string) =
          fun (x1032 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1032) "editorId")
        let (on_did_receive_message : t -> any Event.t) =
          fun (x1033 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x1033) "onDidReceiveMessage")
        let (post_message : t -> message:any -> bool Promise.t) =
          fun (x1036 : t) ->
            fun ~message:(x1035 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x1036) "postMessage" [|(any_to_js x1035)|])
        let (as_webview_uri : t -> local_resource:Uri.t -> Uri.t) =
          fun (x1039 : t) ->
            fun ~local_resource:(x1038 : Uri.t) ->
              Uri.t_of_js
                (Ojs.call (t_to_js x1039) "asWebviewUri"
                   [|(Uri.t_to_js x1038)|])
      end
    module NotebookDocumentShowOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1041 : Ojs.t) -> x1041
        and t_to_js : t -> Ojs.t = fun (x1040 : Ojs.t) -> x1040
        let (view_column : t -> ViewColumn.t) =
          fun (x1042 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1042) "viewColumn")
        let (set_view_column : t -> ViewColumn.t -> unit) =
          fun (x1043 : t) ->
            fun (x1044 : ViewColumn.t) ->
              Ojs.set_prop_ascii (t_to_js x1043) "viewColumn"
                (ViewColumn.t_to_js x1044)
        let (preserve_focus : t -> bool) =
          fun (x1045 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1045) "preserveFocus")
        let (set_preserve_focus : t -> bool -> unit) =
          fun (x1046 : t) ->
            fun (x1047 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1046) "preserveFocus"
                (Ojs.bool_to_js x1047)
        let (preview : t -> bool) =
          fun (x1048 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1048) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x1049 : t) ->
            fun (x1050 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1049) "preview"
                (Ojs.bool_to_js x1050)
        let (selection : t -> NotebookCellRange.t) =
          fun (x1051 : t) ->
            NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1051) "selection")
        let (set_selection : t -> NotebookCellRange.t -> unit) =
          fun (x1052 : t) ->
            fun (x1053 : NotebookCellRange.t) ->
              Ojs.set_prop_ascii (t_to_js x1052) "selection"
                (NotebookCellRange.t_to_js x1053)
      end
    module NotebookSerializer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1055 : Ojs.t) -> x1055
        and t_to_js : t -> Ojs.t = fun (x1054 : Ojs.t) -> x1054
        let (data_to_notebook :
          t ->
            data:Uint8Array.t ->
              (NotebookData.t, NotebookData.t Promise.t) union2)
          =
          fun (x1057 : t) ->
            fun ~data:(x1056 : Uint8Array.t) ->
              union2_of_js NotebookData.t_of_js
                (fun (x1059 : Ojs.t) ->
                   Promise.t_of_js NotebookData.t_of_js x1059)
                (Ojs.call (t_to_js x1057) "dataToNotebook"
                   [|(Uint8Array.t_to_js x1056)|])
        let (notebook_to_data :
          t ->
            data:NotebookData.t ->
              (Uint8Array.t, Uint8Array.t Promise.t) union2)
          =
          fun (x1062 : t) ->
            fun ~data:(x1061 : NotebookData.t) ->
              union2_of_js Uint8Array.t_of_js
                (fun (x1064 : Ojs.t) ->
                   Promise.t_of_js Uint8Array.t_of_js x1064)
                (Ojs.call (t_to_js x1062) "notebookToData"
                   [|(NotebookData.t_to_js x1061)|])
        let (create :
          deserialize_notebook:(content:Uint8Array.t ->
                                  token:CancellationToken.t ->
                                    NotebookData.t Promise.t)
            ->
            serialize_notebook:(data:NotebookData.t ->
                                  token:CancellationToken.t ->
                                    Uint8Array.t Promise.t)
              -> t)
          =
          fun
            ~deserialize_notebook:(x1066 :
                                    content:Uint8Array.t ->
                                      token:CancellationToken.t ->
                                        NotebookData.t Promise.t)
            ->
            fun
              ~serialize_notebook:(x1067 :
                                    data:NotebookData.t ->
                                      token:CancellationToken.t ->
                                        Uint8Array.t Promise.t)
              ->
              let x1068 = Ojs.empty_obj () in
              Ojs.set_prop_ascii x1068 "deserializeNotebook"
                (Ojs.fun_to_js 2
                   (fun (x1072 : Ojs.t) ->
                      fun (x1073 : Ojs.t) ->
                        Promise.t_to_js NotebookData.t_to_js
                          (x1066 ~content:(Uint8Array.t_of_js x1072)
                             ~token:(CancellationToken.t_of_js x1073))));
              Ojs.set_prop_ascii x1068 "serializeNotebook"
                (Ojs.fun_to_js 2
                   (fun (x1069 : Ojs.t) ->
                      fun (x1070 : Ojs.t) ->
                        Promise.t_to_js Uint8Array.t_to_js
                          (x1067 ~data:(NotebookData.t_of_js x1069)
                             ~token:(CancellationToken.t_of_js x1070))));
              t_of_js x1068
      end
    module NotebookFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1076 : Ojs.t) -> x1076
        and t_to_js : t -> Ojs.t = fun (x1075 : Ojs.t) -> x1075
        let (view_type : t -> string) =
          fun (x1077 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1077) "viewType")
        let (scheme : t -> string) =
          fun (x1078 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1078) "scheme")
        let (pattern : t -> GlobPattern.t) =
          fun (x1079 : t) ->
            GlobPattern.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1079) "pattern")
      end
    module NotebookSelector =
      struct
        type t =
          (NotebookFilter.t, NotebookFilter.t or_string list) union2
            or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x1086 : Ojs.t) ->
            or_string_of_js
              (fun (x1087 : Ojs.t) ->
                 union2_of_js NotebookFilter.t_of_js
                   (fun (x1089 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x1090 : Ojs.t) ->
                           or_string_of_js NotebookFilter.t_of_js x1090)
                        x1089) x1087) x1086
        and t_to_js : t -> Ojs.t =
          fun
            (x1080 :
              (NotebookFilter.t, NotebookFilter.t or_string list) union2
                or_string)
            ->
            or_string_to_js
              (fun
                 (x1081 :
                   (NotebookFilter.t, NotebookFilter.t or_string list) union2)
                 ->
                 union2_to_js NotebookFilter.t_to_js
                   (fun (x1083 : NotebookFilter.t or_string list) ->
                      Ojs.list_to_js
                        (fun (x1084 : NotebookFilter.t or_string) ->
                           or_string_to_js NotebookFilter.t_to_js x1084)
                        x1083) x1081) x1080
      end
    module NotebookCellExecuteStartContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1093 : Ojs.t) -> x1093
        and t_to_js : t -> Ojs.t = fun (x1092 : Ojs.t) -> x1092
        let (start_time : t -> int) =
          fun (x1094 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1094) "startTime")
        let (set_start_time : t -> int -> unit) =
          fun (x1095 : t) ->
            fun (x1096 : int) ->
              Ojs.set_prop_ascii (t_to_js x1095) "startTime"
                (Ojs.int_to_js x1096)
      end
    module NotebookCellExecuteEndContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1098 : Ojs.t) -> x1098
        and t_to_js : t -> Ojs.t = fun (x1097 : Ojs.t) -> x1097
        let (success : t -> bool) =
          fun (x1099 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1099) "success")
        let (set_success : t -> bool -> unit) =
          fun (x1100 : t) ->
            fun (x1101 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1100) "success"
                (Ojs.bool_to_js x1101)
        let (duration : t -> int) =
          fun (x1102 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1102) "duration")
        let (set_duration : t -> int -> unit) =
          fun (x1103 : t) ->
            fun (x1104 : int) ->
              Ojs.set_prop_ascii (t_to_js x1103) "duration"
                (Ojs.int_to_js x1104)
      end
    module NotebookCellExecutionTask =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1106 : Ojs.t) -> x1106
        and t_to_js : t -> Ojs.t = fun (x1105 : Ojs.t) -> x1105
        let (document : t -> NotebookDocument.t) =
          fun (x1107 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1107) "document")
        let (cell : t -> NotebookCell.t) =
          fun (x1108 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x1108) "cell")
        let (start :
          t -> ?context:NotebookCellExecuteStartContext.t -> unit -> unit) =
          fun (x1112 : t) ->
            fun ?context:(x1109 : NotebookCellExecuteStartContext.t option)
              ->
              fun () ->
                ignore
                  (let x1113 = t_to_js x1112 in
                   Ojs.call (Ojs.get_prop_ascii x1113 "start") "apply"
                     [|x1113;((let x1110 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1109 with
                                | Some x1111 ->
                                    ignore
                                      (Ojs.call x1110 "push"
                                         [|(NotebookCellExecuteStartContext.t_to_js
                                              x1111)|])
                                | None -> ());
                               x1110))|])
        let (execution_order : t -> int or_undefined) =
          fun (x1114 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1114) "executionOrder")
        let (set_execution_order : t -> int or_undefined -> unit) =
          fun (x1116 : t) ->
            fun (x1117 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1116) "executionOrder"
                (or_undefined_to_js Ojs.int_to_js x1117)
        let (end_ :
          t -> ?result:NotebookCellExecuteEndContext.t -> unit -> unit) =
          fun (x1122 : t) ->
            fun ?result:(x1119 : NotebookCellExecuteEndContext.t option) ->
              fun () ->
                ignore
                  (let x1123 = t_to_js x1122 in
                   Ojs.call (Ojs.get_prop_ascii x1123 "end") "apply"
                     [|x1123;((let x1120 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1119 with
                                | Some x1121 ->
                                    ignore
                                      (Ojs.call x1120 "push"
                                         [|(NotebookCellExecuteEndContext.t_to_js
                                              x1121)|])
                                | None -> ());
                               x1120))|])
        let (token : t -> CancellationToken.t) =
          fun (x1124 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1124) "token")
        let (clear_output : t -> ?cell_index:int -> unit -> unit Promise.t) =
          fun (x1128 : t) ->
            fun ?cell_index:(x1125 : int option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1129 = t_to_js x1128 in
                   Ojs.call (Ojs.get_prop_ascii x1129 "clearOutput") "apply"
                     [|x1129;((let x1126 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1125 with
                                | Some x1127 ->
                                    ignore
                                      (Ojs.call x1126 "push"
                                         [|(Ojs.int_to_js x1127)|])
                                | None -> ());
                               x1126))|])
        let (append_output :
          t ->
            out:(NotebookCellOutput.t, NotebookCellOutput.t) or_array ->
              ?cell_index:int -> unit -> unit Promise.t)
          =
          fun (x1137 : t) ->
            fun
              ~out:(x1131 :
                     (NotebookCellOutput.t, NotebookCellOutput.t) or_array)
              ->
              fun ?cell_index:(x1132 : int option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1138 = t_to_js x1137 in
                     Ojs.call (Ojs.get_prop_ascii x1138 "appendOutput")
                       "apply"
                       [|x1138;((let x1133 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1133 "push"
                                      [|(or_array_to_js
                                           NotebookCellOutput.t_to_js
                                           NotebookCellOutput.t_to_js x1131)|]);
                                 (match x1132 with
                                  | Some x1134 ->
                                      ignore
                                        (Ojs.call x1133 "push"
                                           [|(Ojs.int_to_js x1134)|])
                                  | None -> ());
                                 x1133))|])
        let (replace_output :
          t ->
            out:(NotebookCellOutput.t, NotebookCellOutput.t) or_array ->
              ?cell_index:int -> unit -> unit Promise.t)
          =
          fun (x1146 : t) ->
            fun
              ~out:(x1140 :
                     (NotebookCellOutput.t, NotebookCellOutput.t) or_array)
              ->
              fun ?cell_index:(x1141 : int option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1147 = t_to_js x1146 in
                     Ojs.call (Ojs.get_prop_ascii x1147 "replaceOutput")
                       "apply"
                       [|x1147;((let x1142 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1142 "push"
                                      [|(or_array_to_js
                                           NotebookCellOutput.t_to_js
                                           NotebookCellOutput.t_to_js x1140)|]);
                                 (match x1141 with
                                  | Some x1143 ->
                                      ignore
                                        (Ojs.call x1142 "push"
                                           [|(Ojs.int_to_js x1143)|])
                                  | None -> ());
                                 x1142))|])
        let (append_output_items :
          t ->
            items:(NotebookCellOutputItem.t, NotebookCellOutputItem.t)
              or_array -> output_id:string -> unit Promise.t)
          =
          fun (x1153 : t) ->
            fun
              ~items:(x1149 :
                       (NotebookCellOutputItem.t, NotebookCellOutputItem.t)
                         or_array)
              ->
              fun ~output_id:(x1152 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x1153) "appendOutputItems"
                     [|(or_array_to_js NotebookCellOutputItem.t_to_js
                          NotebookCellOutputItem.t_to_js x1149);(Ojs.string_to_js
                                                                   x1152)|])
        let (replace_output_items :
          t ->
            items:(NotebookCellOutputItem.t, NotebookCellOutputItem.t)
              or_array -> output_id:string -> unit Promise.t)
          =
          fun (x1159 : t) ->
            fun
              ~items:(x1155 :
                       (NotebookCellOutputItem.t, NotebookCellOutputItem.t)
                         or_array)
              ->
              fun ~output_id:(x1158 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x1159) "replaceOutputItems"
                     [|(or_array_to_js NotebookCellOutputItem.t_to_js
                          NotebookCellOutputItem.t_to_js x1155);(Ojs.string_to_js
                                                                   x1158)|])
      end
    module NotebookDecorationRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1162 : Ojs.t) -> x1162
        and t_to_js : t -> Ojs.t = fun (x1161 : Ojs.t) -> x1161
        let (background_color : t -> ThemeColor.t or_string) =
          fun (x1163 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1163) "backgroundColor")
        let (set_background_color : t -> ThemeColor.t or_string -> unit) =
          fun (x1165 : t) ->
            fun (x1166 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1165) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x1166)
        let (border_color : t -> ThemeColor.t or_string) =
          fun (x1168 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1168) "borderColor")
        let (set_border_color : t -> ThemeColor.t or_string -> unit) =
          fun (x1170 : t) ->
            fun (x1171 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1170) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x1171)
        let (top : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x1173 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1173) "top")
        let (set_top :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x1174 : t) ->
            fun (x1175 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1174) "top"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x1175)
      end
    module NotebookKernelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1177 : Ojs.t) -> x1177
        and t_to_js : t -> Ojs.t = fun (x1176 : Ojs.t) -> x1176
        let (id : t -> string) =
          fun (x1178 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1178) "id")
        let (set_id : t -> string -> unit) =
          fun (x1179 : t) ->
            fun (x1180 : string) ->
              Ojs.set_prop_ascii (t_to_js x1179) "id"
                (Ojs.string_to_js x1180)
        let (label : t -> string) =
          fun (x1181 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1181) "label")
        let (set_label : t -> string -> unit) =
          fun (x1182 : t) ->
            fun (x1183 : string) ->
              Ojs.set_prop_ascii (t_to_js x1182) "label"
                (Ojs.string_to_js x1183)
        let (description : t -> string) =
          fun (x1184 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1184) "description")
        let (set_description : t -> string -> unit) =
          fun (x1185 : t) ->
            fun (x1186 : string) ->
              Ojs.set_prop_ascii (t_to_js x1185) "description"
                (Ojs.string_to_js x1186)
        let (selector : t -> NotebookSelector.t) =
          fun (x1187 : t) ->
            NotebookSelector.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1187) "selector")
        let (set_selector : t -> NotebookSelector.t -> unit) =
          fun (x1188 : t) ->
            fun (x1189 : NotebookSelector.t) ->
              Ojs.set_prop_ascii (t_to_js x1188) "selector"
                (NotebookSelector.t_to_js x1189)
        let (supported_languages : t -> string list) =
          fun (x1190 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1190) "supportedLanguages")
        let (set_supported_languages : t -> string list -> unit) =
          fun (x1192 : t) ->
            fun (x1193 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1192) "supportedLanguages"
                (Ojs.list_to_js Ojs.string_to_js x1193)
        let (has_execution_order : t -> bool) =
          fun (x1195 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1195) "hasExecutionOrder")
        let (set_has_execution_order : t -> bool -> unit) =
          fun (x1196 : t) ->
            fun (x1197 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1196) "hasExecutionOrder"
                (Ojs.bool_to_js x1197)
        let (execute_handler :
          t -> executions:NotebookCellExecutionTask.t list -> unit) =
          fun (x1200 : t) ->
            fun ~executions:(x1198 : NotebookCellExecutionTask.t list) ->
              ignore
                (Ojs.call (t_to_js x1200) "executeHandler"
                   [|(Ojs.list_to_js NotebookCellExecutionTask.t_to_js x1198)|])
        let (interrupt_handler : t -> notebook:NotebookDocument.t -> unit) =
          fun (x1202 : t) ->
            fun ~notebook:(x1201 : NotebookDocument.t) ->
              ignore
                (Ojs.call (t_to_js x1202) "interruptHandler"
                   [|(NotebookDocument.t_to_js x1201)|])
      end
    module NotebookKernel2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1204 : Ojs.t) -> x1204
        and t_to_js : t -> Ojs.t = fun (x1203 : Ojs.t) -> x1203
        let (id : t -> string) =
          fun (x1205 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1205) "id")
        let (selector : t -> NotebookSelector.t) =
          fun (x1206 : t) ->
            NotebookSelector.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1206) "selector")
        let (label : t -> string) =
          fun (x1207 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1207) "label")
        let (set_label : t -> string -> unit) =
          fun (x1208 : t) ->
            fun (x1209 : string) ->
              Ojs.set_prop_ascii (t_to_js x1208) "label"
                (Ojs.string_to_js x1209)
        let (description : t -> string) =
          fun (x1210 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1210) "description")
        let (set_description : t -> string -> unit) =
          fun (x1211 : t) ->
            fun (x1212 : string) ->
              Ojs.set_prop_ascii (t_to_js x1211) "description"
                (Ojs.string_to_js x1212)
        let (supported_languages : t -> string list) =
          fun (x1213 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1213) "supportedLanguages")
        let (set_supported_languages : t -> string list -> unit) =
          fun (x1215 : t) ->
            fun (x1216 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1215) "supportedLanguages"
                (Ojs.list_to_js Ojs.string_to_js x1216)
        let (has_execution_order : t -> bool) =
          fun (x1218 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1218) "hasExecutionOrder")
        let (set_has_execution_order : t -> bool -> unit) =
          fun (x1219 : t) ->
            fun (x1220 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1219) "hasExecutionOrder"
                (Ojs.bool_to_js x1220)
        let (execute_handler :
          t -> executions:NotebookCellExecutionTask.t list -> unit) =
          fun (x1223 : t) ->
            fun ~executions:(x1221 : NotebookCellExecutionTask.t list) ->
              ignore
                (Ojs.call (t_to_js x1223) "executeHandler"
                   [|(Ojs.list_to_js NotebookCellExecutionTask.t_to_js x1221)|])
        let (interrupt_handler : t -> notebook:NotebookDocument.t -> unit) =
          fun (x1225 : t) ->
            fun ~notebook:(x1224 : NotebookDocument.t) ->
              ignore
                (Ojs.call (t_to_js x1225) "interruptHandler"
                   [|(NotebookDocument.t_to_js x1224)|])
        let (dispose : t -> unit) =
          fun (x1226 : t) -> ignore (Ojs.call (t_to_js x1226) "dispose" [||])
        let (create_notebook_cell_execution_task :
          t -> cell:NotebookCell.t -> NotebookCellExecutionTask.t) =
          fun (x1228 : t) ->
            fun ~cell:(x1227 : NotebookCell.t) ->
              NotebookCellExecutionTask.t_of_js
                (Ojs.call (t_to_js x1228) "createNotebookCellExecutionTask"
                   [|(NotebookCell.t_to_js x1227)|])
      end
    module NotebookDocumentBackup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1230 : Ojs.t) -> x1230
        and t_to_js : t -> Ojs.t = fun (x1229 : Ojs.t) -> x1229
        let (id : t -> string) =
          fun (x1231 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1231) "id")
        let (delete : t -> unit) =
          fun (x1232 : t) -> ignore (Ojs.call (t_to_js x1232) "delete" [||])
      end
    module NotebookDocumentBackupContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1234 : Ojs.t) -> x1234
        and t_to_js : t -> Ojs.t = fun (x1233 : Ojs.t) -> x1233
        let (destination : t -> Uri.t) =
          fun (x1235 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1235) "destination")
      end
    module NotebookDocumentOpenContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1237 : Ojs.t) -> x1237
        and t_to_js : t -> Ojs.t = fun (x1236 : Ojs.t) -> x1236
        let (backup_id : t -> string) =
          fun (x1238 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1238) "backupId")
        let (untitled_document_data : t -> Uint8Array.t) =
          fun (x1239 : t) ->
            Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1239) "untitledDocumentData")
      end
    module NotebookContentProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1241 : Ojs.t) -> x1241
        and t_to_js : t -> Ojs.t = fun (x1240 : Ojs.t) -> x1240
        let (options : t -> NotebookDocumentContentOptions.t) =
          fun (x1242 : t) ->
            NotebookDocumentContentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1242) "options")
        let (on_did_change_notebook_content_options :
          t -> NotebookDocumentContentOptions.t Event.t) =
          fun (x1243 : t) ->
            Event.t_of_js NotebookDocumentContentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1243)
                 "onDidChangeNotebookContentOptions")
        let (open_notebook :
          t ->
            uri:Uri.t ->
              open_context:NotebookDocumentOpenContext.t ->
                token:CancellationToken.t ->
                  (NotebookData.t, NotebookData.t Promise.t) union2)
          =
          fun (x1248 : t) ->
            fun ~uri:(x1245 : Uri.t) ->
              fun ~open_context:(x1246 : NotebookDocumentOpenContext.t) ->
                fun ~token:(x1247 : CancellationToken.t) ->
                  union2_of_js NotebookData.t_of_js
                    (fun (x1250 : Ojs.t) ->
                       Promise.t_of_js NotebookData.t_of_js x1250)
                    (Ojs.call (t_to_js x1248) "openNotebook"
                       [|(Uri.t_to_js x1245);(NotebookDocumentOpenContext.t_to_js
                                                x1246);(CancellationToken.t_to_js
                                                          x1247)|])
        let (save_notebook :
          t ->
            document:NotebookDocument.t ->
              token:CancellationToken.t -> unit Promise.t)
          =
          fun (x1254 : t) ->
            fun ~document:(x1252 : NotebookDocument.t) ->
              fun ~token:(x1253 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x1254) "saveNotebook"
                     [|(NotebookDocument.t_to_js x1252);(CancellationToken.t_to_js
                                                           x1253)|])
        let (save_notebook_as :
          t ->
            target_resource:Uri.t ->
              document:NotebookDocument.t ->
                token:CancellationToken.t -> unit Promise.t)
          =
          fun (x1259 : t) ->
            fun ~target_resource:(x1256 : Uri.t) ->
              fun ~document:(x1257 : NotebookDocument.t) ->
                fun ~token:(x1258 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js x1259) "saveNotebookAs"
                       [|(Uri.t_to_js x1256);(NotebookDocument.t_to_js x1257);(
                         CancellationToken.t_to_js x1258)|])
        let (backup_notebook :
          t ->
            document:NotebookDocument.t ->
              context:NotebookDocumentBackupContext.t ->
                token:CancellationToken.t ->
                  NotebookDocumentBackup.t Promise.t)
          =
          fun (x1264 : t) ->
            fun ~document:(x1261 : NotebookDocument.t) ->
              fun ~context:(x1262 : NotebookDocumentBackupContext.t) ->
                fun ~token:(x1263 : CancellationToken.t) ->
                  Promise.t_of_js NotebookDocumentBackup.t_of_js
                    (Ojs.call (t_to_js x1264) "backupNotebook"
                       [|(NotebookDocument.t_to_js x1261);(NotebookDocumentBackupContext.t_to_js
                                                             x1262);(
                         CancellationToken.t_to_js x1263)|])
      end
    module NotebookDocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1267 : Ojs.t) -> x1267
        and t_to_js : t -> Ojs.t = fun (x1266 : Ojs.t) -> x1266
        let (view_type : t -> string list or_string) =
          fun (x1268 : t) ->
            or_string_of_js
              (fun (x1269 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x1269)
              (Ojs.get_prop_ascii (t_to_js x1268) "viewType")
        let (set_view_type : t -> string list or_string -> unit) =
          fun (x1271 : t) ->
            fun (x1272 : string list or_string) ->
              Ojs.set_prop_ascii (t_to_js x1271) "viewType"
                (or_string_to_js
                   (fun (x1273 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x1273) x1272)
        let (filename_pattern : t -> NotebookFilenamePattern.t) =
          fun (x1275 : t) ->
            NotebookFilenamePattern.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1275) "filenamePattern")
        let (set_filename_pattern : t -> NotebookFilenamePattern.t -> unit) =
          fun (x1276 : t) ->
            fun (x1277 : NotebookFilenamePattern.t) ->
              Ojs.set_prop_ascii (t_to_js x1276) "filenamePattern"
                (NotebookFilenamePattern.t_to_js x1277)
      end
    module NotebookKernelProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1279 : Ojs.t) -> x1279
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1278 : Ojs.t) -> x1278
        type t_0 = NotebookKernel.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1282 : Ojs.t) -> t_of_js NotebookKernel.t_of_js x1282
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1280 : NotebookKernel.t t) ->
            t_to_js NotebookKernel.t_to_js x1280
        let (on_did_change_kernels :
          'T t -> NotebookDocument.t or_undefined Event.t) =
          fun (x1284 : 'T t) ->
            Event.t_of_js
              (fun (x1286 : Ojs.t) ->
                 or_undefined_of_js NotebookDocument.t_of_js x1286)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1284)
                 "onDidChangeKernels")
        let (set_on_did_change_kernels :
          'T t -> NotebookDocument.t or_undefined Event.t -> unit) =
          fun (x1288 : 'T t) ->
            fun (x1289 : NotebookDocument.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1288)
                "onDidChangeKernels"
                (Event.t_to_js
                   (fun (x1290 : NotebookDocument.t or_undefined) ->
                      or_undefined_to_js NotebookDocument.t_to_js x1290)
                   x1289)
        let (provide_kernels :
          'T t ->
            document:NotebookDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1295 : 'T t) ->
            fun ~document:(x1293 : NotebookDocument.t) ->
              fun ~token:(x1294 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1297 : Ojs.t) -> Ojs.list_of_js Obj.magic x1297)
                  (Ojs.call (t_to_js Obj.magic x1295) "provideKernels"
                     [|(NotebookDocument.t_to_js x1293);(CancellationToken.t_to_js
                                                           x1294)|])
        let (resolve_kernel :
          'T t ->
            kernel:'T ->
              document:NotebookDocument.t ->
                webview:NotebookCommunication.t ->
                  token:CancellationToken.t -> unit ProviderResult.t)
          =
          fun (x1303 : 'T t) ->
            fun ~kernel:(x1299 : 'T) ->
              fun ~document:(x1300 : NotebookDocument.t) ->
                fun ~webview:(x1301 : NotebookCommunication.t) ->
                  fun ~token:(x1302 : CancellationToken.t) ->
                    ProviderResult.t_of_js Ojs.unit_of_js
                      (Ojs.call (t_to_js Obj.magic x1303) "resolveKernel"
                         [|(Obj.magic x1299);(NotebookDocument.t_to_js x1300);(
                           NotebookCommunication.t_to_js x1301);(CancellationToken.t_to_js
                                                                   x1302)|])
      end
    module NotebookCellStatusBarAlignment =
      struct
        type t = [ `Left  | `Right ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1307 : Ojs.t) ->
            let x1308 = x1307 in
            match Ojs.int_of_js x1308 with
            | 1 -> `Left
            | 2 -> `Right
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1306 : [ `Left  | `Right ]) ->
            match x1306 with
            | `Left -> Ojs.int_to_js 1
            | `Right -> Ojs.int_to_js 2
      end
    module NotebookCellStatusBarItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1310 : Ojs.t) -> x1310
        and t_to_js : t -> Ojs.t = fun (x1309 : Ojs.t) -> x1309
        let (cell : t -> NotebookCell.t) =
          fun (x1311 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x1311) "cell")
        let (alignment : t -> NotebookCellStatusBarAlignment.t) =
          fun (x1312 : t) ->
            NotebookCellStatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1312) "alignment")
        let (priority : t -> int) =
          fun (x1313 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1313) "priority")
        let (text : t -> string) =
          fun (x1314 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1314) "text")
        let (set_text : t -> string -> unit) =
          fun (x1315 : t) ->
            fun (x1316 : string) ->
              Ojs.set_prop_ascii (t_to_js x1315) "text"
                (Ojs.string_to_js x1316)
        let (tooltip : t -> string or_undefined) =
          fun (x1317 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1317) "tooltip")
        let (set_tooltip : t -> string or_undefined -> unit) =
          fun (x1319 : t) ->
            fun (x1320 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1319) "tooltip"
                (or_undefined_to_js Ojs.string_to_js x1320)
        let (command : t -> Command.t or_string or_undefined) =
          fun (x1322 : t) ->
            or_undefined_of_js
              (fun (x1323 : Ojs.t) -> or_string_of_js Command.t_of_js x1323)
              (Ojs.get_prop_ascii (t_to_js x1322) "command")
        let (set_command : t -> Command.t or_string or_undefined -> unit) =
          fun (x1325 : t) ->
            fun (x1326 : Command.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1325) "command"
                (or_undefined_to_js
                   (fun (x1327 : Command.t or_string) ->
                      or_string_to_js Command.t_to_js x1327) x1326)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x1329 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1329) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x1330 : t) ->
            fun (x1331 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x1330) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x1331)
        let (show : t -> unit) =
          fun (x1332 : t) -> ignore (Ojs.call (t_to_js x1332) "show" [||])
        let (hide : t -> unit) =
          fun (x1333 : t) -> ignore (Ojs.call (t_to_js x1333) "hide" [||])
        let (dispose : t -> unit) =
          fun (x1334 : t) -> ignore (Ojs.call (t_to_js x1334) "dispose" [||])
      end
    module NotebookConcatTextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1336 : Ojs.t) -> x1336
        and t_to_js : t -> Ojs.t = fun (x1335 : Ojs.t) -> x1335
        let (uri : t -> Uri.t) =
          fun (x1337 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1337) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x1338 : t) ->
            fun (x1339 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1338) "uri" (Uri.t_to_js x1339)
        let (is_closed : t -> bool) =
          fun (x1340 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1340) "isClosed")
        let (set_is_closed : t -> bool -> unit) =
          fun (x1341 : t) ->
            fun (x1342 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1341) "isClosed"
                (Ojs.bool_to_js x1342)
        let (dispose : t -> unit) =
          fun (x1343 : t) -> ignore (Ojs.call (t_to_js x1343) "dispose" [||])
        let (on_did_change : t -> unit Event.t) =
          fun (x1344 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1344) "onDidChange")
        let (set_on_did_change : t -> unit Event.t -> unit) =
          fun (x1346 : t) ->
            fun (x1347 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1346) "onDidChange"
                (Event.t_to_js Ojs.unit_to_js x1347)
        let (version : t -> int) =
          fun (x1349 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1349) "version")
        let (set_version : t -> int -> unit) =
          fun (x1350 : t) ->
            fun (x1351 : int) ->
              Ojs.set_prop_ascii (t_to_js x1350) "version"
                (Ojs.int_to_js x1351)
        let (get_text : t -> string) =
          fun (x1352 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x1352) "getText" [||])
        let (get_text' : t -> range:Range.t -> string) =
          fun (x1354 : t) ->
            fun ~range:(x1353 : Range.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x1354) "getText" [|(Range.t_to_js x1353)|])
        let (offset_at : t -> position:Position.t -> int) =
          fun (x1356 : t) ->
            fun ~position:(x1355 : Position.t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x1356) "offsetAt"
                   [|(Position.t_to_js x1355)|])
        let (position_at : t -> offset:int -> Position.t) =
          fun (x1358 : t) ->
            fun ~offset:(x1357 : int) ->
              Position.t_of_js
                (Ojs.call (t_to_js x1358) "positionAt"
                   [|(Ojs.int_to_js x1357)|])
        let (validate_range : t -> range:Range.t -> Range.t) =
          fun (x1360 : t) ->
            fun ~range:(x1359 : Range.t) ->
              Range.t_of_js
                (Ojs.call (t_to_js x1360) "validateRange"
                   [|(Range.t_to_js x1359)|])
        let (validate_position : t -> position:Position.t -> Position.t) =
          fun (x1362 : t) ->
            fun ~position:(x1361 : Position.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x1362) "validatePosition"
                   [|(Position.t_to_js x1361)|])
        let (location_at :
          t -> position_or_range:(Position.t, Range.t) union2 -> Location.t)
          =
          fun (x1366 : t) ->
            fun ~position_or_range:(x1363 : (Position.t, Range.t) union2) ->
              Location.t_of_js
                (Ojs.call (t_to_js x1366) "locationAt"
                   [|(union2_to_js Position.t_to_js Range.t_to_js x1363)|])
        let (position_at' : t -> location:Location.t -> Position.t) =
          fun (x1368 : t) ->
            fun ~location:(x1367 : Location.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x1368) "positionAt"
                   [|(Location.t_to_js x1367)|])
        let (contains : t -> uri:Uri.t -> bool) =
          fun (x1370 : t) ->
            fun ~uri:(x1369 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1370) "contains" [|(Uri.t_to_js x1369)|])
      end
    module Notebook =
      struct
        let (open_notebook_document :
          uri:Uri.t -> NotebookDocument.t Promise.t) =
          fun ~uri:(x1371 : Uri.t) ->
            Promise.t_of_js NotebookDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "notebook")
                 "openNotebookDocument" [|(Uri.t_to_js x1371)|])
        let (on_did_open_notebook_document : NotebookDocument.t Event.t) =
          Event.t_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidOpenNotebookDocument")
        let (on_did_close_notebook_document : NotebookDocument.t Event.t) =
          Event.t_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidCloseNotebookDocument")
        let (on_did_save_notebook_document : NotebookDocument.t Event.t) =
          Event.t_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidSaveNotebookDocument")
        let (notebook_documents : NotebookDocument.t list) =
          Ojs.list_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "notebookDocuments")
        let (on_did_change_notebook_document_metadata :
          NotebookDocumentMetadataChangeEvent.t Event.t) =
          Event.t_of_js NotebookDocumentMetadataChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook")
               "onDidChangeNotebookDocumentMetadata")
        let (on_did_change_notebook_cells :
          NotebookCellsChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidChangeNotebookCells")
        let (on_did_change_cell_outputs :
          NotebookCellOutputsChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellOutputsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidChangeCellOutputs")
        let (on_did_change_cell_metadata :
          NotebookCellMetadataChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellMetadataChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidChangeCellMetadata")
        let (register_notebook_serializer :
          notebook_type:string ->
            provider:NotebookSerializer.t ->
              ?options:NotebookDocumentContentOptions.t ->
                unit -> Disposable.t)
          =
          fun ~notebook_type:(x1381 : string) ->
            fun ~provider:(x1382 : NotebookSerializer.t) ->
              fun ?options:(x1383 : NotebookDocumentContentOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x1386 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "notebook" in
                     Ojs.call
                       (Ojs.get_prop_ascii x1386 "registerNotebookSerializer")
                       "apply"
                       [|x1386;((let x1384 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1384 "push"
                                      [|(Ojs.string_to_js x1381)|]);
                                 ignore
                                   (Ojs.call x1384 "push"
                                      [|(NotebookSerializer.t_to_js x1382)|]);
                                 (match x1383 with
                                  | Some x1385 ->
                                      ignore
                                        (Ojs.call x1384 "push"
                                           [|(NotebookDocumentContentOptions.t_to_js
                                                x1385)|])
                                  | None -> ());
                                 x1384))|])
        let (create_notebook_kernel :
          options:NotebookKernelOptions.t -> NotebookKernel2.t) =
          fun ~options:(x1387 : NotebookKernelOptions.t) ->
            NotebookKernel2.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "notebook")
                 "createNotebookKernel"
                 [|(NotebookKernelOptions.t_to_js x1387)|])
        let (register_notebook_content_provider :
          notebook_type:string ->
            provider:NotebookContentProvider.t ->
              ?options:(NotebookDocumentContentOptions.t,
                AnonymousInterface15.t) intersection2 -> unit -> Disposable.t)
          =
          fun ~notebook_type:(x1388 : string) ->
            fun ~provider:(x1389 : NotebookContentProvider.t) ->
              fun
                ?options:(x1390 :
                           (NotebookDocumentContentOptions.t,
                             AnonymousInterface15.t) intersection2 option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x1395 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "notebook" in
                     Ojs.call
                       (Ojs.get_prop_ascii x1395
                          "registerNotebookContentProvider") "apply"
                       [|x1395;((let x1391 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1391 "push"
                                      [|(Ojs.string_to_js x1388)|]);
                                 ignore
                                   (Ojs.call x1391 "push"
                                      [|(NotebookContentProvider.t_to_js
                                           x1389)|]);
                                 (match x1390 with
                                  | Some x1392 ->
                                      ignore
                                        (Ojs.call x1391 "push"
                                           [|(intersection2_to_js
                                                NotebookDocumentContentOptions.t_to_js
                                                AnonymousInterface15.t_to_js
                                                x1392)|])
                                  | None -> ());
                                 x1391))|])
        let (create_notebook_cell_execution_task :
          uri:Uri.t ->
            index:int ->
              kernel_id:string -> NotebookCellExecutionTask.t or_undefined)
          =
          fun ~uri:(x1396 : Uri.t) ->
            fun ~index:(x1397 : int) ->
              fun ~kernel_id:(x1398 : string) ->
                or_undefined_of_js NotebookCellExecutionTask.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "notebook")
                     "createNotebookCellExecutionTask"
                     [|(Uri.t_to_js x1396);(Ojs.int_to_js x1397);(Ojs.string_to_js
                                                                    x1398)|])
        let (on_did_change_cell_execution_state :
          NotebookCellExecutionStateChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellExecutionStateChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidChangeCellExecutionState")
        let (on_did_change_active_notebook_kernel :
          AnonymousInterface4.t Event.t) =
          Event.t_of_js AnonymousInterface4.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "notebook") "onDidChangeActiveNotebookKernel")
        let (register_notebook_kernel_provider :
          selector:NotebookDocumentFilter.t ->
            provider:NotebookKernel.t NotebookKernelProvider.t ->
              Disposable.t)
          =
          fun ~selector:(x1402 : NotebookDocumentFilter.t) ->
            fun ~provider:(x1403 : NotebookKernel.t NotebookKernelProvider.t)
              ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "notebook")
                   "registerNotebookKernelProvider"
                   [|(NotebookDocumentFilter.t_to_js x1402);(NotebookKernelProvider.t_to_js
                                                               NotebookKernel.t_to_js
                                                               x1403)|])
        let (create_notebook_editor_decoration_type :
          options:NotebookDecorationRenderOptions.t ->
            NotebookEditorDecorationType.t)
          =
          fun ~options:(x1405 : NotebookDecorationRenderOptions.t) ->
            NotebookEditorDecorationType.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "notebook")
                 "createNotebookEditorDecorationType"
                 [|(NotebookDecorationRenderOptions.t_to_js x1405)|])
        let (create_cell_status_bar_item :
          cell:NotebookCell.t ->
            ?alignment:NotebookCellStatusBarAlignment.t ->
              ?priority:int -> unit -> NotebookCellStatusBarItem.t)
          =
          fun ~cell:(x1406 : NotebookCell.t) ->
            fun ?alignment:(x1407 : NotebookCellStatusBarAlignment.t option)
              ->
              fun ?priority:(x1408 : int option) ->
                fun () ->
                  NotebookCellStatusBarItem.t_of_js
                    (let x1412 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode") "notebook" in
                     Ojs.call
                       (Ojs.get_prop_ascii x1412 "createCellStatusBarItem")
                       "apply"
                       [|x1412;((let x1409 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1409 "push"
                                      [|(NotebookCell.t_to_js x1406)|]);
                                 (match x1407 with
                                  | Some x1411 ->
                                      ignore
                                        (Ojs.call x1409 "push"
                                           [|(NotebookCellStatusBarAlignment.t_to_js
                                                x1411)|])
                                  | None -> ());
                                 (match x1408 with
                                  | Some x1410 ->
                                      ignore
                                        (Ojs.call x1409 "push"
                                           [|(Ojs.int_to_js x1410)|])
                                  | None -> ());
                                 x1409))|])
        let (create_concat_text_document :
          notebook:NotebookDocument.t ->
            ?selector:DocumentSelector.t ->
              unit -> NotebookConcatTextDocument.t)
          =
          fun ~notebook:(x1413 : NotebookDocument.t) ->
            fun ?selector:(x1414 : DocumentSelector.t option) ->
              fun () ->
                NotebookConcatTextDocument.t_of_js
                  (let x1417 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "notebook" in
                   Ojs.call
                     (Ojs.get_prop_ascii x1417 "createConcatTextDocument")
                     "apply"
                     [|x1417;((let x1415 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1415 "push"
                                    [|(NotebookDocument.t_to_js x1413)|]);
                               (match x1414 with
                                | Some x1416 ->
                                    ignore
                                      (Ojs.call x1415 "push"
                                         [|(DocumentSelector.t_to_js x1416)|])
                                | None -> ());
                               x1415))|])
      end
    module WorkspaceEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1419 : Ojs.t) -> x1419
        and t_to_js : t -> Ojs.t = fun (x1418 : Ojs.t) -> x1418
        let (replace_notebook_metadata :
          t -> uri:Uri.t -> value:NotebookDocumentMetadata.t -> unit) =
          fun (x1422 : t) ->
            fun ~uri:(x1420 : Uri.t) ->
              fun ~value:(x1421 : NotebookDocumentMetadata.t) ->
                ignore
                  (Ojs.call (t_to_js x1422) "replaceNotebookMetadata"
                     [|(Uri.t_to_js x1420);(NotebookDocumentMetadata.t_to_js
                                              x1421)|])
        let (replace_notebook_cells :
          t ->
            uri:Uri.t ->
              start:int ->
                end_:int ->
                  cells:NotebookCellData.t list ->
                    ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1431 : t) ->
            fun ~uri:(x1423 : Uri.t) ->
              fun ~start:(x1424 : int) ->
                fun ~end_:(x1425 : int) ->
                  fun ~cells:(x1426 : NotebookCellData.t list) ->
                    fun
                      ?metadata:(x1427 : WorkspaceEditEntryMetadata.t option)
                      ->
                      fun () ->
                        ignore
                          (let x1432 = t_to_js x1431 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1432 "replaceNotebookCells")
                             "apply"
                             [|x1432;((let x1428 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1428 "push"
                                            [|(Uri.t_to_js x1423)|]);
                                       ignore
                                         (Ojs.call x1428 "push"
                                            [|(Ojs.int_to_js x1424)|]);
                                       ignore
                                         (Ojs.call x1428 "push"
                                            [|(Ojs.int_to_js x1425)|]);
                                       ignore
                                         (Ojs.call x1428 "push"
                                            [|(Ojs.list_to_js
                                                 NotebookCellData.t_to_js
                                                 x1426)|]);
                                       (match x1427 with
                                        | Some x1429 ->
                                            ignore
                                              (Ojs.call x1428 "push"
                                                 [|(WorkspaceEditEntryMetadata.t_to_js
                                                      x1429)|])
                                        | None -> ());
                                       x1428))|])
        let (replace_notebook_cell_metadata :
          t ->
            uri:Uri.t ->
              index:int ->
                cell_metadata:NotebookCellMetadata.t ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1439 : t) ->
            fun ~uri:(x1433 : Uri.t) ->
              fun ~index:(x1434 : int) ->
                fun ~cell_metadata:(x1435 : NotebookCellMetadata.t) ->
                  fun ?metadata:(x1436 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1440 = t_to_js x1439 in
                         Ojs.call
                           (Ojs.get_prop_ascii x1440
                              "replaceNotebookCellMetadata") "apply"
                           [|x1440;((let x1437 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1437 "push"
                                          [|(Uri.t_to_js x1433)|]);
                                     ignore
                                       (Ojs.call x1437 "push"
                                          [|(Ojs.int_to_js x1434)|]);
                                     ignore
                                       (Ojs.call x1437 "push"
                                          [|(NotebookCellMetadata.t_to_js
                                               x1435)|]);
                                     (match x1436 with
                                      | Some x1438 ->
                                          ignore
                                            (Ojs.call x1437 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1438)|])
                                      | None -> ());
                                     x1437))|])
        let (replace_notebook_cell_output :
          t ->
            uri:Uri.t ->
              index:int ->
                outputs:NotebookCellOutput.t list ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1448 : t) ->
            fun ~uri:(x1441 : Uri.t) ->
              fun ~index:(x1442 : int) ->
                fun ~outputs:(x1443 : NotebookCellOutput.t list) ->
                  fun ?metadata:(x1444 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1449 = t_to_js x1448 in
                         Ojs.call
                           (Ojs.get_prop_ascii x1449
                              "replaceNotebookCellOutput") "apply"
                           [|x1449;((let x1445 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1445 "push"
                                          [|(Uri.t_to_js x1441)|]);
                                     ignore
                                       (Ojs.call x1445 "push"
                                          [|(Ojs.int_to_js x1442)|]);
                                     ignore
                                       (Ojs.call x1445 "push"
                                          [|(Ojs.list_to_js
                                               NotebookCellOutput.t_to_js
                                               x1443)|]);
                                     (match x1444 with
                                      | Some x1446 ->
                                          ignore
                                            (Ojs.call x1445 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1446)|])
                                      | None -> ());
                                     x1445))|])
        let (append_notebook_cell_output :
          t ->
            uri:Uri.t ->
              index:int ->
                outputs:NotebookCellOutput.t list ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1457 : t) ->
            fun ~uri:(x1450 : Uri.t) ->
              fun ~index:(x1451 : int) ->
                fun ~outputs:(x1452 : NotebookCellOutput.t list) ->
                  fun ?metadata:(x1453 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1458 = t_to_js x1457 in
                         Ojs.call
                           (Ojs.get_prop_ascii x1458
                              "appendNotebookCellOutput") "apply"
                           [|x1458;((let x1454 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1454 "push"
                                          [|(Uri.t_to_js x1450)|]);
                                     ignore
                                       (Ojs.call x1454 "push"
                                          [|(Ojs.int_to_js x1451)|]);
                                     ignore
                                       (Ojs.call x1454 "push"
                                          [|(Ojs.list_to_js
                                               NotebookCellOutput.t_to_js
                                               x1452)|]);
                                     (match x1453 with
                                      | Some x1455 ->
                                          ignore
                                            (Ojs.call x1454 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1455)|])
                                      | None -> ());
                                     x1454))|])
        let (replace_notebook_cell_output_items :
          t ->
            uri:Uri.t ->
              index:int ->
                output_id:string ->
                  items:NotebookCellOutputItem.t list ->
                    ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1467 : t) ->
            fun ~uri:(x1459 : Uri.t) ->
              fun ~index:(x1460 : int) ->
                fun ~output_id:(x1461 : string) ->
                  fun ~items:(x1462 : NotebookCellOutputItem.t list) ->
                    fun
                      ?metadata:(x1463 : WorkspaceEditEntryMetadata.t option)
                      ->
                      fun () ->
                        ignore
                          (let x1468 = t_to_js x1467 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1468
                                "replaceNotebookCellOutputItems") "apply"
                             [|x1468;((let x1464 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1464 "push"
                                            [|(Uri.t_to_js x1459)|]);
                                       ignore
                                         (Ojs.call x1464 "push"
                                            [|(Ojs.int_to_js x1460)|]);
                                       ignore
                                         (Ojs.call x1464 "push"
                                            [|(Ojs.string_to_js x1461)|]);
                                       ignore
                                         (Ojs.call x1464 "push"
                                            [|(Ojs.list_to_js
                                                 NotebookCellOutputItem.t_to_js
                                                 x1462)|]);
                                       (match x1463 with
                                        | Some x1465 ->
                                            ignore
                                              (Ojs.call x1464 "push"
                                                 [|(WorkspaceEditEntryMetadata.t_to_js
                                                      x1465)|])
                                        | None -> ());
                                       x1464))|])
        let (append_notebook_cell_output_items :
          t ->
            uri:Uri.t ->
              index:int ->
                output_id:string ->
                  items:NotebookCellOutputItem.t list ->
                    ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1477 : t) ->
            fun ~uri:(x1469 : Uri.t) ->
              fun ~index:(x1470 : int) ->
                fun ~output_id:(x1471 : string) ->
                  fun ~items:(x1472 : NotebookCellOutputItem.t list) ->
                    fun
                      ?metadata:(x1473 : WorkspaceEditEntryMetadata.t option)
                      ->
                      fun () ->
                        ignore
                          (let x1478 = t_to_js x1477 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1478
                                "appendNotebookCellOutputItems") "apply"
                             [|x1478;((let x1474 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1474 "push"
                                            [|(Uri.t_to_js x1469)|]);
                                       ignore
                                         (Ojs.call x1474 "push"
                                            [|(Ojs.int_to_js x1470)|]);
                                       ignore
                                         (Ojs.call x1474 "push"
                                            [|(Ojs.string_to_js x1471)|]);
                                       ignore
                                         (Ojs.call x1474 "push"
                                            [|(Ojs.list_to_js
                                                 NotebookCellOutputItem.t_to_js
                                                 x1472)|]);
                                       (match x1473 with
                                        | Some x1475 ->
                                            ignore
                                              (Ojs.call x1474 "push"
                                                 [|(WorkspaceEditEntryMetadata.t_to_js
                                                      x1475)|])
                                        | None -> ());
                                       x1474))|])
      end
    module CompletionItemLabel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1480 : Ojs.t) -> x1480
        and t_to_js : t -> Ojs.t = fun (x1479 : Ojs.t) -> x1479
        let (name : t -> string) =
          fun (x1481 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1481) "name")
        let (set_name : t -> string -> unit) =
          fun (x1482 : t) ->
            fun (x1483 : string) ->
              Ojs.set_prop_ascii (t_to_js x1482) "name"
                (Ojs.string_to_js x1483)
        let (parameters : t -> string) =
          fun (x1484 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1484) "parameters")
        let (set_parameters : t -> string -> unit) =
          fun (x1485 : t) ->
            fun (x1486 : string) ->
              Ojs.set_prop_ascii (t_to_js x1485) "parameters"
                (Ojs.string_to_js x1486)
        let (qualifier : t -> string) =
          fun (x1487 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1487) "qualifier")
        let (set_qualifier : t -> string -> unit) =
          fun (x1488 : t) ->
            fun (x1489 : string) ->
              Ojs.set_prop_ascii (t_to_js x1488) "qualifier"
                (Ojs.string_to_js x1489)
        let (type_ : t -> string) =
          fun (x1490 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1490) "type")
        let (set_type : t -> string -> unit) =
          fun (x1491 : t) ->
            fun (x1492 : string) ->
              Ojs.set_prop_ascii (t_to_js x1491) "type"
                (Ojs.string_to_js x1492)
      end
    module CompletionItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1494 : Ojs.t) -> x1494
        and t_to_js : t -> Ojs.t = fun (x1493 : Ojs.t) -> x1493
        let (label2 : t -> CompletionItemLabel.t) =
          fun (x1495 : t) ->
            CompletionItemLabel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1495) "label2")
        let (set_label2 : t -> CompletionItemLabel.t -> unit) =
          fun (x1496 : t) ->
            fun (x1497 : CompletionItemLabel.t) ->
              Ojs.set_prop_ascii (t_to_js x1496) "label2"
                (CompletionItemLabel.t_to_js x1497)
      end
    module TimelineItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1499 : Ojs.t) -> x1499
        and t_to_js : t -> Ojs.t = fun (x1498 : Ojs.t) -> x1498
        let (timestamp : t -> int) =
          fun (x1500 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1500) "timestamp")
        let (set_timestamp : t -> int -> unit) =
          fun (x1501 : t) ->
            fun (x1502 : int) ->
              Ojs.set_prop_ascii (t_to_js x1501) "timestamp"
                (Ojs.int_to_js x1502)
        let (label : t -> string) =
          fun (x1503 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1503) "label")
        let (set_label : t -> string -> unit) =
          fun (x1504 : t) ->
            fun (x1505 : string) ->
              Ojs.set_prop_ascii (t_to_js x1504) "label"
                (Ojs.string_to_js x1505)
        let (id : t -> string) =
          fun (x1506 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1506) "id")
        let (set_id : t -> string -> unit) =
          fun (x1507 : t) ->
            fun (x1508 : string) ->
              Ojs.set_prop_ascii (t_to_js x1507) "id"
                (Ojs.string_to_js x1508)
        let (icon_path :
          t -> (ThemeIcon.t, Uri.t, AnonymousInterface9.t) union3) =
          fun (x1509 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js
              AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1509) "iconPath")
        let (set_icon_path :
          t -> (ThemeIcon.t, Uri.t, AnonymousInterface9.t) union3 -> unit) =
          fun (x1513 : t) ->
            fun (x1514 : (ThemeIcon.t, Uri.t, AnonymousInterface9.t) union3)
              ->
              Ojs.set_prop_ascii (t_to_js x1513) "iconPath"
                (union3_to_js ThemeIcon.t_to_js Uri.t_to_js
                   AnonymousInterface9.t_to_js x1514)
        let (description : t -> string) =
          fun (x1518 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1518) "description")
        let (set_description : t -> string -> unit) =
          fun (x1519 : t) ->
            fun (x1520 : string) ->
              Ojs.set_prop_ascii (t_to_js x1519) "description"
                (Ojs.string_to_js x1520)
        let (detail : t -> string) =
          fun (x1521 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1521) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1522 : t) ->
            fun (x1523 : string) ->
              Ojs.set_prop_ascii (t_to_js x1522) "detail"
                (Ojs.string_to_js x1523)
        let (command : t -> Command.t) =
          fun (x1524 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1524) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1525 : t) ->
            fun (x1526 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1525) "command"
                (Command.t_to_js x1526)
        let (context_value : t -> string) =
          fun (x1527 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1527) "contextValue")
        let (set_context_value : t -> string -> unit) =
          fun (x1528 : t) ->
            fun (x1529 : string) ->
              Ojs.set_prop_ascii (t_to_js x1528) "contextValue"
                (Ojs.string_to_js x1529)
        let (accessibility_information : t -> AccessibilityInformation.t) =
          fun (x1530 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1530) "accessibilityInformation")
        let (set_accessibility_information :
          t -> AccessibilityInformation.t -> unit) =
          fun (x1531 : t) ->
            fun (x1532 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x1531) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x1532)
        let (create : label:string -> timestamp:int -> t) =
          fun ~label:(x1533 : string) ->
            fun ~timestamp:(x1534 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode")
                      "TimelineItem")
                   [|(Ojs.string_to_js x1533);(Ojs.int_to_js x1534)|])
      end
    module TimelineChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1536 : Ojs.t) -> x1536
        and t_to_js : t -> Ojs.t = fun (x1535 : Ojs.t) -> x1535
        let (uri : t -> Uri.t) =
          fun (x1537 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1537) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x1538 : t) ->
            fun (x1539 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1538) "uri" (Uri.t_to_js x1539)
        let (reset : t -> bool) =
          fun (x1540 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1540) "reset")
        let (set_reset : t -> bool -> unit) =
          fun (x1541 : t) ->
            fun (x1542 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1541) "reset"
                (Ojs.bool_to_js x1542)
      end
    module AnonymousInterface2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1544 : Ojs.t) -> x1544
        and t_to_js : t -> Ojs.t = fun (x1543 : Ojs.t) -> x1543
        let (cursor : t -> string or_undefined) =
          fun (x1545 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1545) "cursor")
      end
    module Timeline =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1548 : Ojs.t) -> x1548
        and t_to_js : t -> Ojs.t = fun (x1547 : Ojs.t) -> x1547
        let (paging : t -> AnonymousInterface2.t) =
          fun (x1549 : t) ->
            AnonymousInterface2.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1549) "paging")
        let (items : t -> TimelineItem.t list) =
          fun (x1550 : t) ->
            Ojs.list_of_js TimelineItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1550) "items")
      end
    module TimelineOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1553 : Ojs.t) -> x1553
        and t_to_js : t -> Ojs.t = fun (x1552 : Ojs.t) -> x1552
        let (cursor : t -> string) =
          fun (x1554 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1554) "cursor")
        let (set_cursor : t -> string -> unit) =
          fun (x1555 : t) ->
            fun (x1556 : string) ->
              Ojs.set_prop_ascii (t_to_js x1555) "cursor"
                (Ojs.string_to_js x1556)
        let (limit : t -> AnonymousInterface14.t or_number) =
          fun (x1557 : t) ->
            or_number_of_js AnonymousInterface14.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1557) "limit")
        let (set_limit : t -> AnonymousInterface14.t or_number -> unit) =
          fun (x1559 : t) ->
            fun (x1560 : AnonymousInterface14.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1559) "limit"
                (or_number_to_js AnonymousInterface14.t_to_js x1560)
      end
    module TimelineProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1563 : Ojs.t) -> x1563
        and t_to_js : t -> Ojs.t = fun (x1562 : Ojs.t) -> x1562
        let (on_did_change : t -> TimelineChangeEvent.t or_undefined Event.t)
          =
          fun (x1564 : t) ->
            Event.t_of_js
              (fun (x1565 : Ojs.t) ->
                 or_undefined_of_js TimelineChangeEvent.t_of_js x1565)
              (Ojs.get_prop_ascii (t_to_js x1564) "onDidChange")
        let (set_on_did_change :
          t -> TimelineChangeEvent.t or_undefined Event.t -> unit) =
          fun (x1567 : t) ->
            fun (x1568 : TimelineChangeEvent.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1567) "onDidChange"
                (Event.t_to_js
                   (fun (x1569 : TimelineChangeEvent.t or_undefined) ->
                      or_undefined_to_js TimelineChangeEvent.t_to_js x1569)
                   x1568)
        let (id : t -> string) =
          fun (x1571 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1571) "id")
        let (label : t -> string) =
          fun (x1572 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1572) "label")
        let (provide_timeline :
          t ->
            uri:Uri.t ->
              options:TimelineOptions.t ->
                token:CancellationToken.t -> Timeline.t ProviderResult.t)
          =
          fun (x1576 : t) ->
            fun ~uri:(x1573 : Uri.t) ->
              fun ~options:(x1574 : TimelineOptions.t) ->
                fun ~token:(x1575 : CancellationToken.t) ->
                  ProviderResult.t_of_js Timeline.t_of_js
                    (Ojs.call (t_to_js x1576) "provideTimeline"
                       [|(Uri.t_to_js x1573);(TimelineOptions.t_to_js x1574);(
                         CancellationToken.t_to_js x1575)|])
      end
    module StandardTokenType =
      struct
        type t = [ `Other  | `Comment  | `String  | `RegEx ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1579 : Ojs.t) ->
            let x1580 = x1579 in
            match Ojs.int_of_js x1580 with
            | 0 -> `Other
            | 1 -> `Comment
            | 2 -> `String
            | 4 -> `RegEx
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1578 : [ `Other  | `Comment  | `String  | `RegEx ]) ->
            match x1578 with
            | `Other -> Ojs.int_to_js 0
            | `Comment -> Ojs.int_to_js 1
            | `String -> Ojs.int_to_js 2
            | `RegEx -> Ojs.int_to_js 4
      end
    module TokenInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1582 : Ojs.t) -> x1582
        and t_to_js : t -> Ojs.t = fun (x1581 : Ojs.t) -> x1581
        let (type_ : t -> StandardTokenType.t) =
          fun (x1583 : t) ->
            StandardTokenType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1583) "type")
        let (set_type : t -> StandardTokenType.t -> unit) =
          fun (x1584 : t) ->
            fun (x1585 : StandardTokenType.t) ->
              Ojs.set_prop_ascii (t_to_js x1584) "type"
                (StandardTokenType.t_to_js x1585)
        let (range : t -> Range.t) =
          fun (x1586 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1586) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1587 : t) ->
            fun (x1588 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1587) "range"
                (Range.t_to_js x1588)
      end
    module InlineHintKind =
      struct
        type t = [ `Other  | `Type  | `Parameter ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1590 : Ojs.t) ->
            let x1591 = x1590 in
            match Ojs.int_of_js x1591 with
            | 0 -> `Other
            | 1 -> `Type
            | 2 -> `Parameter
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1589 : [ `Other  | `Type  | `Parameter ]) ->
            match x1589 with
            | `Other -> Ojs.int_to_js 0
            | `Type -> Ojs.int_to_js 1
            | `Parameter -> Ojs.int_to_js 2
      end
    module InlineHint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1593 : Ojs.t) -> x1593
        and t_to_js : t -> Ojs.t = fun (x1592 : Ojs.t) -> x1592
        let (text : t -> string) =
          fun (x1594 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1594) "text")
        let (set_text : t -> string -> unit) =
          fun (x1595 : t) ->
            fun (x1596 : string) ->
              Ojs.set_prop_ascii (t_to_js x1595) "text"
                (Ojs.string_to_js x1596)
        let (range : t -> Range.t) =
          fun (x1597 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1597) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1598 : t) ->
            fun (x1599 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1598) "range"
                (Range.t_to_js x1599)
        let (kind : t -> InlineHintKind.t) =
          fun (x1600 : t) ->
            InlineHintKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1600) "kind")
        let (set_kind : t -> InlineHintKind.t -> unit) =
          fun (x1601 : t) ->
            fun (x1602 : InlineHintKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1601) "kind"
                (InlineHintKind.t_to_js x1602)
        let (description : t -> MarkdownString.t or_string) =
          fun (x1603 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1603) "description")
        let (set_description : t -> MarkdownString.t or_string -> unit) =
          fun (x1605 : t) ->
            fun (x1606 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1605) "description"
                (or_string_to_js MarkdownString.t_to_js x1606)
        let (whitespace_before : t -> bool) =
          fun (x1608 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1608) "whitespaceBefore")
        let (set_whitespace_before : t -> bool -> unit) =
          fun (x1609 : t) ->
            fun (x1610 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1609) "whitespaceBefore"
                (Ojs.bool_to_js x1610)
        let (whitespace_after : t -> bool) =
          fun (x1611 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1611) "whitespaceAfter")
        let (set_whitespace_after : t -> bool -> unit) =
          fun (x1612 : t) ->
            fun (x1613 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1612) "whitespaceAfter"
                (Ojs.bool_to_js x1613)
        let (create :
          text:string -> range:Range.t -> ?kind:InlineHintKind.t -> unit -> t)
          =
          fun ~text:(x1614 : string) ->
            fun ~range:(x1615 : Range.t) ->
              fun ?kind:(x1616 : InlineHintKind.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "InlineHint")
                       (let x1617 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1617 "push" [|(Ojs.string_to_js x1614)|]);
                        ignore
                          (Ojs.call x1617 "push" [|(Range.t_to_js x1615)|]);
                        (match x1616 with
                         | Some x1618 ->
                             ignore
                               (Ojs.call x1617 "push"
                                  [|(InlineHintKind.t_to_js x1618)|])
                         | None -> ());
                        x1617))
      end
    module InlineHintsProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1620 : Ojs.t) -> x1620
        and t_to_js : t -> Ojs.t = fun (x1619 : Ojs.t) -> x1619
        let (on_did_change_inline_hints : t -> unit Event.t) =
          fun (x1621 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1621) "onDidChangeInlineHints")
        let (set_on_did_change_inline_hints : t -> unit Event.t -> unit) =
          fun (x1623 : t) ->
            fun (x1624 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1623) "onDidChangeInlineHints"
                (Event.t_to_js Ojs.unit_to_js x1624)
        let (provide_inline_hints :
          t ->
            model:TextDocument.t ->
              range:Range.t ->
                token:CancellationToken.t ->
                  InlineHint.t list ProviderResult.t)
          =
          fun (x1629 : t) ->
            fun ~model:(x1626 : TextDocument.t) ->
              fun ~range:(x1627 : Range.t) ->
                fun ~token:(x1628 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1630 : Ojs.t) ->
                       Ojs.list_of_js InlineHint.t_of_js x1630)
                    (Ojs.call (t_to_js x1629) "provideInlineHints"
                       [|(TextDocument.t_to_js x1626);(Range.t_to_js x1627);(
                         CancellationToken.t_to_js x1628)|])
      end
    module Languages =
      struct
        let (get_token_information_at_position :
          document:TextDocument.t ->
            position:Position.t -> TokenInformation.t Promise.t)
          =
          fun ~document:(x1632 : TextDocument.t) ->
            fun ~position:(x1633 : Position.t) ->
              Promise.t_of_js TokenInformation.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "getTokenInformationAtPosition"
                   [|(TextDocument.t_to_js x1632);(Position.t_to_js x1633)|])
        let (register_inline_hints_provider :
          selector:DocumentSelector.t ->
            provider:InlineHintsProvider.t -> Disposable.t)
          =
          fun ~selector:(x1635 : DocumentSelector.t) ->
            fun ~provider:(x1636 : InlineHintsProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "languages")
                   "registerInlineHintsProvider"
                   [|(DocumentSelector.t_to_js x1635);(InlineHintsProvider.t_to_js
                                                         x1636)|])
      end
    module ExtensionRuntime =
      struct
        type t = [ `Node  | `Webworker ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1638 : Ojs.t) ->
            let x1639 = x1638 in
            match Ojs.int_of_js x1639 with
            | 1 -> `Node
            | 2 -> `Webworker
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1637 : [ `Node  | `Webworker ]) ->
            match x1637 with
            | `Node -> Ojs.int_to_js 1
            | `Webworker -> Ojs.int_to_js 2
      end
    module ExtensionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1641 : Ojs.t) -> x1641
        and t_to_js : t -> Ojs.t = fun (x1640 : Ojs.t) -> x1640
        let (extension_runtime : t -> ExtensionRuntime.t) =
          fun (x1642 : t) ->
            ExtensionRuntime.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1642) "extensionRuntime")
      end
    module TextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1644 : Ojs.t) -> x1644
        and t_to_js : t -> Ojs.t = fun (x1643 : Ojs.t) -> x1643
        let (notebook : t -> NotebookDocument.t or_undefined) =
          fun (x1645 : t) ->
            or_undefined_of_js NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1645) "notebook")
        let (set_notebook : t -> NotebookDocument.t or_undefined -> unit) =
          fun (x1647 : t) ->
            fun (x1648 : NotebookDocument.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1647) "notebook"
                (or_undefined_to_js NotebookDocument.t_to_js x1648)
      end
    module TestChildrenCollection =
      struct
        include struct include Iterable end
        let (size : 'T t -> int) =
          fun (x1650 : 'T t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1650) "size")
        let (get : 'T t -> id:string -> 'T or_undefined) =
          fun (x1653 : 'T t) ->
            fun ~id:(x1652 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js Obj.magic x1653) "get"
                   [|(Ojs.string_to_js x1652)|])
        let (add : 'T t -> child:'T -> unit) =
          fun (x1657 : 'T t) ->
            fun ~child:(x1656 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x1657) "add"
                   [|(Obj.magic x1656)|])
        let (delete : 'T t -> child:'T or_string -> unit) =
          fun (x1661 : 'T t) ->
            fun ~child:(x1659 : 'T or_string) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x1661) "delete"
                   [|(or_string_to_js Obj.magic x1659)|])
        let (clear : 'T t -> unit) =
          fun (x1663 : 'T t) ->
            ignore (Ojs.call (t_to_js Obj.magic x1663) "clear" [||])
      end
    module AnonymousInterface0 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1666 : Ojs.t) -> x1666
        and t_to_js : t -> Ojs.t = fun (x1665 : Ojs.t) -> x1665
        let (busy : t -> bool) =
          fun (x1667 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1667) "busy")
        let (set_busy : t -> bool -> unit) =
          fun (x1668 : t) ->
            fun (x1669 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1668) "busy"
                (Ojs.bool_to_js x1669)
      end
    module TestItem =
      struct
        type 'TChildren t = Ojs.t
        let rec t_of_js :
          'TChildren . (Ojs.t -> 'TChildren) -> Ojs.t -> 'TChildren t = fun
          (type __TChildren) ->
          fun (__TChildren_of_js : Ojs.t -> __TChildren) ->
            fun (x1671 : Ojs.t) -> x1671
        and t_to_js :
          'TChildren . ('TChildren -> Ojs.t) -> 'TChildren t -> Ojs.t = fun
          (type __TChildren) ->
          fun (__TChildren_to_js : __TChildren -> Ojs.t) ->
            fun (x1670 : Ojs.t) -> x1670
        type t_0 = any t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1674 : Ojs.t) -> t_of_js any_of_js x1674
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1672 : any t) -> t_to_js any_to_js x1672
        let (id : 'TChildren t -> string) =
          fun (x1676 : 'TChildren t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1676) "id")
        let (uri : 'TChildren t -> Uri.t) =
          fun (x1678 : 'TChildren t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1678) "uri")
        let (children : 'TChildren t -> 'TChildren TestChildrenCollection.t)
          =
          fun (x1680 : 'TChildren t) ->
            TestChildrenCollection.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1680) "children")
        let (label : 'TChildren t -> string) =
          fun (x1683 : 'TChildren t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1683) "label")
        let (set_label : 'TChildren t -> string -> unit) =
          fun (x1685 : 'TChildren t) ->
            fun (x1686 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1685) "label"
                (Ojs.string_to_js x1686)
        let (description : 'TChildren t -> string) =
          fun (x1688 : 'TChildren t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1688) "description")
        let (set_description : 'TChildren t -> string -> unit) =
          fun (x1690 : 'TChildren t) ->
            fun (x1691 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1690) "description"
                (Ojs.string_to_js x1691)
        let (range : 'TChildren t -> Range.t) =
          fun (x1693 : 'TChildren t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1693) "range")
        let (set_range : 'TChildren t -> Range.t -> unit) =
          fun (x1695 : 'TChildren t) ->
            fun (x1696 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1695) "range"
                (Range.t_to_js x1696)
        let (runnable : 'TChildren t -> bool) =
          fun (x1698 : 'TChildren t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1698) "runnable")
        let (set_runnable : 'TChildren t -> bool -> unit) =
          fun (x1700 : 'TChildren t) ->
            fun (x1701 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1700) "runnable"
                (Ojs.bool_to_js x1701)
        let (debuggable : 'TChildren t -> bool) =
          fun (x1703 : 'TChildren t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1703) "debuggable")
        let (set_debuggable : 'TChildren t -> bool -> unit) =
          fun (x1705 : 'TChildren t) ->
            fun (x1706 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1705) "debuggable"
                (Ojs.bool_to_js x1706)
        let (expandable : 'TChildren t -> bool) =
          fun (x1708 : 'TChildren t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1708) "expandable")
        let (set_expandable : 'TChildren t -> bool -> unit) =
          fun (x1710 : 'TChildren t) ->
            fun (x1711 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1710) "expandable"
                (Ojs.bool_to_js x1711)
        let (create :
          id:string ->
            label:string -> uri:Uri.t -> expandable:bool -> 'TChildren t)
          =
          fun ~id:(x1713 : string) ->
            fun ~label:(x1714 : string) ->
              fun ~uri:(x1715 : Uri.t) ->
                fun ~expandable:(x1716 : bool) ->
                  t_of_js Obj.magic
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii
                             (Ojs.get_prop_ascii Ojs.global
                                "__LIB__VSCODE__IMPORTS") "vscode")
                          "TestItem")
                       [|(Ojs.string_to_js x1713);(Ojs.string_to_js x1714);(
                         Uri.t_to_js x1715);(Ojs.bool_to_js x1716)|])
        let (invalidate : 'TChildren t -> unit) =
          fun (x1718 : 'TChildren t) ->
            ignore (Ojs.call (t_to_js Obj.magic x1718) "invalidate" [||])
        let (discover_children :
          'TChildren t ->
            progress:AnonymousInterface0.t Progress.t ->
              token:CancellationToken.t -> unit)
          =
          fun (x1723 : 'TChildren t) ->
            fun ~progress:(x1720 : AnonymousInterface0.t Progress.t) ->
              fun ~token:(x1722 : CancellationToken.t) ->
                ignore
                  (Ojs.call (t_to_js Obj.magic x1723) "discoverChildren"
                     [|(Progress.t_to_js AnonymousInterface0.t_to_js x1720);(
                       CancellationToken.t_to_js x1722)|])
      end
    module TestsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1726 : Ojs.t) -> x1726
        and t_to_js : t -> Ojs.t = fun (x1725 : Ojs.t) -> x1725
        let (added : t -> any TestItem.t list) =
          fun (x1727 : t) ->
            Ojs.list_of_js
              (fun (x1728 : Ojs.t) -> TestItem.t_of_js any_of_js x1728)
              (Ojs.get_prop_ascii (t_to_js x1727) "added")
        let (updated : t -> any TestItem.t list) =
          fun (x1730 : t) ->
            Ojs.list_of_js
              (fun (x1731 : Ojs.t) -> TestItem.t_of_js any_of_js x1731)
              (Ojs.get_prop_ascii (t_to_js x1730) "updated")
        let (removed : t -> any TestItem.t list) =
          fun (x1733 : t) ->
            Ojs.list_of_js
              (fun (x1734 : Ojs.t) -> TestItem.t_of_js any_of_js x1734)
              (Ojs.get_prop_ascii (t_to_js x1733) "removed")
      end
    module TestObserver =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1737 : Ojs.t) -> x1737
        and t_to_js : t -> Ojs.t = fun (x1736 : Ojs.t) -> x1736
        let (tests : t -> any TestItem.t list) =
          fun (x1738 : t) ->
            Ojs.list_of_js
              (fun (x1739 : Ojs.t) -> TestItem.t_of_js any_of_js x1739)
              (Ojs.get_prop_ascii (t_to_js x1738) "tests")
        let (on_did_change_test : t -> TestsChangeEvent.t Event.t) =
          fun (x1741 : t) ->
            Event.t_of_js TestsChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1741) "onDidChangeTest")
        let (on_did_discover_initial_tests : t -> unit Event.t) =
          fun (x1743 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1743) "onDidDiscoverInitialTests")
        let (dispose : t -> unit) =
          fun (x1745 : t) -> ignore (Ojs.call (t_to_js x1745) "dispose" [||])
      end
    module TestRunRequest =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1747 : Ojs.t) -> x1747
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1746 : Ojs.t) -> x1746
        type t_0 = any TestItem.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1751 : Ojs.t) ->
            t_of_js (fun (x1752 : Ojs.t) -> TestItem.t_of_js any_of_js x1752)
              x1751
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1748 : any TestItem.t t) ->
            t_to_js
              (fun (x1749 : any TestItem.t) ->
                 TestItem.t_to_js any_to_js x1749) x1748
        let (tests : 'T t -> 'T list) =
          fun (x1754 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1754) "tests")
        let (set_tests : 'T t -> 'T list -> unit) =
          fun (x1757 : 'T t) ->
            fun (x1758 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1757) "tests"
                (Ojs.list_to_js Obj.magic x1758)
        let (exclude : 'T t -> 'T list) =
          fun (x1761 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1761) "exclude")
        let (set_exclude : 'T t -> 'T list -> unit) =
          fun (x1764 : 'T t) ->
            fun (x1765 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1764) "exclude"
                (Ojs.list_to_js Obj.magic x1765)
        let (debug : 'T t -> bool) =
          fun (x1768 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1768) "debug")
        let (set_debug : 'T t -> bool -> unit) =
          fun (x1770 : 'T t) ->
            fun (x1771 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1770) "debug"
                (Ojs.bool_to_js x1771)
      end
    module TestResultState =
      struct
        type t =
          [ `Unset  | `Queued  | `Running  | `Passed  | `Failed  | `Skipped 
          | `Errored ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1774 : Ojs.t) ->
            let x1775 = x1774 in
            match Ojs.int_of_js x1775 with
            | 0 -> `Unset
            | 1 -> `Queued
            | 2 -> `Running
            | 3 -> `Passed
            | 4 -> `Failed
            | 5 -> `Skipped
            | 6 -> `Errored
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1773 :
              [ `Unset  | `Queued  | `Running  | `Passed  | `Failed 
              | `Skipped  | `Errored ])
            ->
            match x1773 with
            | `Unset -> Ojs.int_to_js 0
            | `Queued -> Ojs.int_to_js 1
            | `Running -> Ojs.int_to_js 2
            | `Passed -> Ojs.int_to_js 3
            | `Failed -> Ojs.int_to_js 4
            | `Skipped -> Ojs.int_to_js 5
            | `Errored -> Ojs.int_to_js 6
      end
    module TestMessageSeverity =
      struct
        type t = [ `Error  | `Warning  | `Information  | `Hint ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1777 : Ojs.t) ->
            let x1778 = x1777 in
            match Ojs.int_of_js x1778 with
            | 0 -> `Error
            | 1 -> `Warning
            | 2 -> `Information
            | 3 -> `Hint
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1776 : [ `Error  | `Warning  | `Information  | `Hint ]) ->
            match x1776 with
            | `Error -> Ojs.int_to_js 0
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
            | `Hint -> Ojs.int_to_js 3
      end
    module TestMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1780 : Ojs.t) -> x1780
        and t_to_js : t -> Ojs.t = fun (x1779 : Ojs.t) -> x1779
        let (message : t -> MarkdownString.t or_string) =
          fun (x1781 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1781) "message")
        let (set_message : t -> MarkdownString.t or_string -> unit) =
          fun (x1783 : t) ->
            fun (x1784 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1783) "message"
                (or_string_to_js MarkdownString.t_to_js x1784)
        let (severity : t -> TestMessageSeverity.t) =
          fun (x1786 : t) ->
            TestMessageSeverity.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1786) "severity")
        let (set_severity : t -> TestMessageSeverity.t -> unit) =
          fun (x1787 : t) ->
            fun (x1788 : TestMessageSeverity.t) ->
              Ojs.set_prop_ascii (t_to_js x1787) "severity"
                (TestMessageSeverity.t_to_js x1788)
        let (expected_output : t -> string) =
          fun (x1789 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1789) "expectedOutput")
        let (set_expected_output : t -> string -> unit) =
          fun (x1790 : t) ->
            fun (x1791 : string) ->
              Ojs.set_prop_ascii (t_to_js x1790) "expectedOutput"
                (Ojs.string_to_js x1791)
        let (actual_output : t -> string) =
          fun (x1792 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1792) "actualOutput")
        let (set_actual_output : t -> string -> unit) =
          fun (x1793 : t) ->
            fun (x1794 : string) ->
              Ojs.set_prop_ascii (t_to_js x1793) "actualOutput"
                (Ojs.string_to_js x1794)
        let (location : t -> Location.t) =
          fun (x1795 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x1795) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x1796 : t) ->
            fun (x1797 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x1796) "location"
                (Location.t_to_js x1797)
        let (diff :
          message:MarkdownString.t or_string ->
            expected:string -> actual:string -> t)
          =
          fun ~message:(x1798 : MarkdownString.t or_string) ->
            fun ~expected:(x1800 : string) ->
              fun ~actual:(x1801 : string) ->
                t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode")
                        "TestMessage") "diff"
                     [|(or_string_to_js MarkdownString.t_to_js x1798);(
                       Ojs.string_to_js x1800);(Ojs.string_to_js x1801)|])
        let (create : message:MarkdownString.t or_string -> t) =
          fun ~message:(x1802 : MarkdownString.t or_string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "TestMessage")
                 [|(or_string_to_js MarkdownString.t_to_js x1802)|])
      end
    module TestResultSnapshot =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1805 : Ojs.t) -> x1805
        and t_to_js : t -> Ojs.t = fun (x1804 : Ojs.t) -> x1804
        let (id : t -> string) =
          fun (x1806 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1806) "id")
        let (uri : t -> Uri.t) =
          fun (x1807 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1807) "uri")
        let (label : t -> string) =
          fun (x1808 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1808) "label")
        let (description : t -> string) =
          fun (x1809 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1809) "description")
        let (range : t -> Range.t) =
          fun (x1810 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1810) "range")
        let (state : t -> TestResultState.t) =
          fun (x1811 : t) ->
            TestResultState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1811) "state")
        let (duration : t -> int) =
          fun (x1812 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1812) "duration")
        let (messages : t -> TestMessage.t list) =
          fun (x1813 : t) ->
            Ojs.list_of_js TestMessage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1813) "messages")
        let (children : t -> t Readonly.t list) =
          fun (x1815 : t) ->
            Ojs.list_of_js
              (fun (x1816 : Ojs.t) -> Readonly.t_of_js t_of_js x1816)
              (Ojs.get_prop_ascii (t_to_js x1815) "children")
      end
    module TestRunResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1819 : Ojs.t) -> x1819
        and t_to_js : t -> Ojs.t = fun (x1818 : Ojs.t) -> x1818
        let (completed_at : t -> int) =
          fun (x1820 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1820) "completedAt")
        let (set_completed_at : t -> int -> unit) =
          fun (x1821 : t) ->
            fun (x1822 : int) ->
              Ojs.set_prop_ascii (t_to_js x1821) "completedAt"
                (Ojs.int_to_js x1822)
        let (output : t -> string) =
          fun (x1823 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1823) "output")
        let (set_output : t -> string -> unit) =
          fun (x1824 : t) ->
            fun (x1825 : string) ->
              Ojs.set_prop_ascii (t_to_js x1824) "output"
                (Ojs.string_to_js x1825)
        let (results : t -> TestResultSnapshot.t Readonly.t list) =
          fun (x1826 : t) ->
            Ojs.list_of_js
              (fun (x1827 : Ojs.t) ->
                 Readonly.t_of_js TestResultSnapshot.t_of_js x1827)
              (Ojs.get_prop_ascii (t_to_js x1826) "results")
        let (set_results : t -> TestResultSnapshot.t Readonly.t list -> unit)
          =
          fun (x1829 : t) ->
            fun (x1830 : TestResultSnapshot.t Readonly.t list) ->
              Ojs.set_prop_ascii (t_to_js x1829) "results"
                (Ojs.list_to_js
                   (fun (x1831 : TestResultSnapshot.t Readonly.t) ->
                      Readonly.t_to_js TestResultSnapshot.t_to_js x1831)
                   x1830)
      end
    module TestRunOptions =
      struct
        include struct include TestRunRequest end
        type t_0 = any TestItem.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1836 : Ojs.t) ->
            t_of_js (fun (x1837 : Ojs.t) -> TestItem.t_of_js any_of_js x1837)
              x1836
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1833 : any TestItem.t t) ->
            t_to_js
              (fun (x1834 : any TestItem.t) ->
                 TestItem.t_to_js any_to_js x1834) x1833
        let (set_state :
          'T t ->
            test:'T ->
              state:TestResultState.t -> ?duration:int -> unit -> unit)
          =
          fun (x1844 : 'T t) ->
            fun ~test:(x1839 : 'T) ->
              fun ~state:(x1840 : TestResultState.t) ->
                fun ?duration:(x1841 : int option) ->
                  fun () ->
                    ignore
                      (let x1846 = t_to_js Obj.magic x1844 in
                       Ojs.call (Ojs.get_prop_ascii x1846 "setState") "apply"
                         [|x1846;((let x1842 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1842 "push"
                                        [|(Obj.magic x1839)|]);
                                   ignore
                                     (Ojs.call x1842 "push"
                                        [|(TestResultState.t_to_js x1840)|]);
                                   (match x1841 with
                                    | Some x1843 ->
                                        ignore
                                          (Ojs.call x1842 "push"
                                             [|(Ojs.int_to_js x1843)|])
                                    | None -> ());
                                   x1842))|])
        let (append_message :
          'T t -> test:'T -> message:TestMessage.t -> unit) =
          fun (x1849 : 'T t) ->
            fun ~test:(x1847 : 'T) ->
              fun ~message:(x1848 : TestMessage.t) ->
                ignore
                  (Ojs.call (t_to_js Obj.magic x1849) "appendMessage"
                     [|(Obj.magic x1847);(TestMessage.t_to_js x1848)|])
        let (append_output : 'T t -> output:string -> unit) =
          fun (x1852 : 'T t) ->
            fun ~output:(x1851 : string) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x1852) "appendOutput"
                   [|(Ojs.string_to_js x1851)|])
      end
    module TestProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1855 : Ojs.t) -> x1855
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1854 : Ojs.t) -> x1854
        type t_0 = any TestItem.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1859 : Ojs.t) ->
            t_of_js (fun (x1860 : Ojs.t) -> TestItem.t_of_js any_of_js x1860)
              x1859
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1856 : any TestItem.t t) ->
            t_to_js
              (fun (x1857 : any TestItem.t) ->
                 TestItem.t_to_js any_to_js x1857) x1856
        let (provide_workspace_test_root :
          'T t ->
            workspace:WorkspaceFolder.t ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1864 : 'T t) ->
            fun ~workspace:(x1862 : WorkspaceFolder.t) ->
              fun ~token:(x1863 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1864)
                     "provideWorkspaceTestRoot"
                     [|(WorkspaceFolder.t_to_js x1862);(CancellationToken.t_to_js
                                                          x1863)|])
        let (provide_document_test_root :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1869 : 'T t) ->
            fun ~document:(x1867 : TextDocument.t) ->
              fun ~token:(x1868 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1869)
                     "provideDocumentTestRoot"
                     [|(TextDocument.t_to_js x1867);(CancellationToken.t_to_js
                                                       x1868)|])
        let (run_tests :
          'T t ->
            options:'T TestRunOptions.t ->
              token:CancellationToken.t -> unit ProviderResult.t)
          =
          fun (x1875 : 'T t) ->
            fun ~options:(x1872 : 'T TestRunOptions.t) ->
              fun ~token:(x1874 : CancellationToken.t) ->
                ProviderResult.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x1875) "runTests"
                     [|(TestRunOptions.t_to_js Obj.magic x1872);(CancellationToken.t_to_js
                                                                   x1874)|])
      end
    module Test =
      struct
        let (register_test_provider :
          test_provider:'T TestProvider.t -> Disposable.t) =
          fun ~test_provider:(x1878 : 'T TestProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "test")
                 "registerTestProvider"
                 [|(TestProvider.t_to_js Obj.magic x1878)|])
        let (run_tests :
          run:'T TestRunRequest.t ->
            ?token:CancellationToken.t -> unit -> unit Promise.t)
          =
          fun ~run:(x1880 : 'T TestRunRequest.t) ->
            fun ?token:(x1881 : CancellationToken.t option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1885 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "test" in
                   Ojs.call (Ojs.get_prop_ascii x1885 "runTests") "apply"
                     [|x1885;((let x1882 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1882 "push"
                                    [|(TestRunRequest.t_to_js Obj.magic x1880)|]);
                               (match x1881 with
                                | Some x1883 ->
                                    ignore
                                      (Ojs.call x1882 "push"
                                         [|(CancellationToken.t_to_js x1883)|])
                                | None -> ());
                               x1882))|])
        let (create_workspace_test_observer :
          workspace_folder:WorkspaceFolder.t -> TestObserver.t) =
          fun ~workspace_folder:(x1887 : WorkspaceFolder.t) ->
            TestObserver.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "test")
                 "createWorkspaceTestObserver"
                 [|(WorkspaceFolder.t_to_js x1887)|])
        let (create_document_test_observer :
          document:TextDocument.t -> TestObserver.t) =
          fun ~document:(x1888 : TextDocument.t) ->
            TestObserver.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "test")
                 "createDocumentTestObserver"
                 [|(TextDocument.t_to_js x1888)|])
        let (publish_test_result :
          results:TestRunResult.t -> ?persist:bool -> unit -> unit) =
          fun ~results:(x1889 : TestRunResult.t) ->
            fun ?persist:(x1890 : bool option) ->
              fun () ->
                ignore
                  (let x1893 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "test" in
                   Ojs.call (Ojs.get_prop_ascii x1893 "publishTestResult")
                     "apply"
                     [|x1893;((let x1891 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1891 "push"
                                    [|(TestRunResult.t_to_js x1889)|]);
                               (match x1890 with
                                | Some x1892 ->
                                    ignore
                                      (Ojs.call x1891 "push"
                                         [|(Ojs.bool_to_js x1892)|])
                                | None -> ());
                               x1891))|])
        let (test_results : TestRunResult.t list) =
          Ojs.list_of_js TestRunResult.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "test") "testResults")
        let (on_did_change_test_results : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "test") "onDidChangeTestResults")
      end
    module ExternalUriOpenerPriority =
      struct
        type t = [ `None  | `Option  | `Default  | `Preferred ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1897 : Ojs.t) ->
            let x1898 = x1897 in
            match Ojs.int_of_js x1898 with
            | 0 -> `None
            | 1 -> `Option
            | 2 -> `Default
            | 3 -> `Preferred
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1896 : [ `None  | `Option  | `Default  | `Preferred ]) ->
            match x1896 with
            | `None -> Ojs.int_to_js 0
            | `Option -> Ojs.int_to_js 1
            | `Default -> Ojs.int_to_js 2
            | `Preferred -> Ojs.int_to_js 3
      end
    module OpenExternalUriContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1900 : Ojs.t) -> x1900
        and t_to_js : t -> Ojs.t = fun (x1899 : Ojs.t) -> x1899
        let (source_uri : t -> Uri.t) =
          fun (x1901 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1901) "sourceUri")
      end
    module ExternalUriOpener =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1903 : Ojs.t) -> x1903
        and t_to_js : t -> Ojs.t = fun (x1902 : Ojs.t) -> x1902
        let (can_open_external_uri :
          t ->
            uri:Uri.t ->
              token:CancellationToken.t ->
                ((ExternalUriOpenerPriority.t,
                   ExternalUriOpenerPriority.t Promise.t) union2,
                  [ `Default  | `None  | `Option  | `Preferred ]) or_enum)
          =
          fun (x1906 : t) ->
            fun ~uri:(x1904 : Uri.t) ->
              fun ~token:(x1905 : CancellationToken.t) ->
                or_enum_of_js
                  (fun (x1907 : Ojs.t) ->
                     union2_of_js ExternalUriOpenerPriority.t_of_js
                       (fun (x1909 : Ojs.t) ->
                          Promise.t_of_js ExternalUriOpenerPriority.t_of_js
                            x1909) x1907)
                  (fun (x1911 : Ojs.t) ->
                     let x1912 = x1911 in
                     match Ojs.int_of_js x1912 with
                     | 2 -> `Default
                     | 0 -> `None
                     | 1 -> `Option
                     | 3 -> `Preferred
                     | _ -> assert false)
                  (Ojs.call (t_to_js x1906) "canOpenExternalUri"
                     [|(Uri.t_to_js x1904);(CancellationToken.t_to_js x1905)|])
        let (open_external_uri :
          t ->
            resolved_uri:Uri.t ->
              ctx:OpenExternalUriContext.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x1916 : t) ->
            fun ~resolved_uri:(x1913 : Uri.t) ->
              fun ~ctx:(x1914 : OpenExternalUriContext.t) ->
                fun ~token:(x1915 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x1918 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x1918)
                    (Ojs.call (t_to_js x1916) "openExternalUri"
                       [|(Uri.t_to_js x1913);(OpenExternalUriContext.t_to_js
                                                x1914);(CancellationToken.t_to_js
                                                          x1915)|])
      end
    module ExternalUriOpenerMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1921 : Ojs.t) -> x1921
        and t_to_js : t -> Ojs.t = fun (x1920 : Ojs.t) -> x1920
        let (schemes : t -> string list) =
          fun (x1922 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1922) "schemes")
        let (label : t -> string) =
          fun (x1924 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1924) "label")
      end
    module OpenExternalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1926 : Ojs.t) -> x1926
        and t_to_js : t -> Ojs.t = fun (x1925 : Ojs.t) -> x1925
        let (allow_contributed_openers : t -> bool or_string) =
          fun (x1927 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1927) "allowContributedOpeners")
      end
    module Env =
      struct
        let (open_external :
          target:Uri.t ->
            ?options:OpenExternalOptions.t -> unit -> bool Promise.t)
          =
          fun ~target:(x1929 : Uri.t) ->
            fun ?options:(x1930 : OpenExternalOptions.t option) ->
              fun () ->
                Promise.t_of_js Ojs.bool_of_js
                  (let x1933 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "env" in
                   Ojs.call (Ojs.get_prop_ascii x1933 "openExternal") "apply"
                     [|x1933;((let x1931 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1931 "push"
                                    [|(Uri.t_to_js x1929)|]);
                               (match x1930 with
                                | Some x1932 ->
                                    ignore
                                      (Ojs.call x1931 "push"
                                         [|(OpenExternalOptions.t_to_js x1932)|])
                                | None -> ());
                               x1931))|])
      end
    module OpenEditorInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1936 : Ojs.t) -> x1936
        and t_to_js : t -> Ojs.t = fun (x1935 : Ojs.t) -> x1935
        let (name : t -> string) =
          fun (x1937 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1937) "name")
        let (set_name : t -> string -> unit) =
          fun (x1938 : t) ->
            fun (x1939 : string) ->
              Ojs.set_prop_ascii (t_to_js x1938) "name"
                (Ojs.string_to_js x1939)
        let (resource : t -> Uri.t) =
          fun (x1940 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1940) "resource")
        let (set_resource : t -> Uri.t -> unit) =
          fun (x1941 : t) ->
            fun (x1942 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1941) "resource"
                (Uri.t_to_js x1942)
      end
    module WorkspaceTrustState =
      struct
        type t = [ `Untrusted  | `Trusted  | `Unspecified ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1944 : Ojs.t) ->
            let x1945 = x1944 in
            match Ojs.int_of_js x1945 with
            | 0 -> `Untrusted
            | 1 -> `Trusted
            | 2 -> `Unspecified
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1943 : [ `Untrusted  | `Trusted  | `Unspecified ]) ->
            match x1943 with
            | `Untrusted -> Ojs.int_to_js 0
            | `Trusted -> Ojs.int_to_js 1
            | `Unspecified -> Ojs.int_to_js 2
      end
    module WorkspaceTrustStateChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1947 : Ojs.t) -> x1947
        and t_to_js : t -> Ojs.t = fun (x1946 : Ojs.t) -> x1946
        let (new_trust_state : t -> WorkspaceTrustState.t) =
          fun (x1948 : t) ->
            WorkspaceTrustState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1948) "newTrustState")
      end
    module WorkspaceTrustRequestOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1950 : Ojs.t) -> x1950
        and t_to_js : t -> Ojs.t = fun (x1949 : Ojs.t) -> x1949
        let (modal : t -> bool) =
          fun (x1951 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1951) "modal")
      end
    module Webview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1953 : Ojs.t) -> x1953
        and t_to_js : t -> Ojs.t = fun (x1952 : Ojs.t) -> x1952
        let (post_message : t -> message:any -> bool Promise.t) =
          fun (x1955 : t) ->
            fun ~message:(x1954 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x1955) "postMessage" [|(any_to_js x1954)|])
      end
    module PortAutoForwardAction =
      struct
        type t =
          [ `Notify  | `OpenBrowser  | `OpenPreview  | `Silent  | `Ignore ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1958 : Ojs.t) ->
            let x1959 = x1958 in
            match Ojs.int_of_js x1959 with
            | 1 -> `Notify
            | 2 -> `OpenBrowser
            | 3 -> `OpenPreview
            | 4 -> `Silent
            | 5 -> `Ignore
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1957 :
              [ `Notify  | `OpenBrowser  | `OpenPreview  | `Silent 
              | `Ignore ])
            ->
            match x1957 with
            | `Notify -> Ojs.int_to_js 1
            | `OpenBrowser -> Ojs.int_to_js 2
            | `OpenPreview -> Ojs.int_to_js 3
            | `Silent -> Ojs.int_to_js 4
            | `Ignore -> Ojs.int_to_js 5
      end
    module PortAttributes =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1961 : Ojs.t) -> x1961
        and t_to_js : t -> Ojs.t = fun (x1960 : Ojs.t) -> x1960
        let (port : t -> int) =
          fun (x1962 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1962) "port")
        let (set_port : t -> int -> unit) =
          fun (x1963 : t) ->
            fun (x1964 : int) ->
              Ojs.set_prop_ascii (t_to_js x1963) "port" (Ojs.int_to_js x1964)
        let (auto_forward_action : t -> PortAutoForwardAction.t) =
          fun (x1965 : t) ->
            PortAutoForwardAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1965) "autoForwardAction")
        let (set_auto_forward_action : t -> PortAutoForwardAction.t -> unit)
          =
          fun (x1966 : t) ->
            fun (x1967 : PortAutoForwardAction.t) ->
              Ojs.set_prop_ascii (t_to_js x1966) "autoForwardAction"
                (PortAutoForwardAction.t_to_js x1967)
      end
    module PortAttributesProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1969 : Ojs.t) -> x1969
        and t_to_js : t -> Ojs.t = fun (x1968 : Ojs.t) -> x1968
        let (provide_port_attributes :
          t ->
            port:int ->
              pid:int or_undefined ->
                command_line:string or_undefined ->
                  token:CancellationToken.t ->
                    PortAttributes.t ProviderResult.t)
          =
          fun (x1976 : t) ->
            fun ~port:(x1970 : int) ->
              fun ~pid:(x1971 : int or_undefined) ->
                fun ~command_line:(x1973 : string or_undefined) ->
                  fun ~token:(x1975 : CancellationToken.t) ->
                    ProviderResult.t_of_js PortAttributes.t_of_js
                      (Ojs.call (t_to_js x1976) "providePortAttributes"
                         [|(Ojs.int_to_js x1970);(or_undefined_to_js
                                                    Ojs.int_to_js x1971);(
                           or_undefined_to_js Ojs.string_to_js x1973);(
                           CancellationToken.t_to_js x1975)|])
      end
    module Window =
      struct
        let (create_webview_text_editor_inset :
          editor:TextEditor.t ->
            line:int ->
              height:int ->
                ?options:WebviewOptions.t -> unit -> WebviewEditorInset.t)
          =
          fun ~editor:(x1978 : TextEditor.t) ->
            fun ~line:(x1979 : int) ->
              fun ~height:(x1980 : int) ->
                fun ?options:(x1981 : WebviewOptions.t option) ->
                  fun () ->
                    WebviewEditorInset.t_of_js
                      (let x1984 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                       Ojs.call
                         (Ojs.get_prop_ascii x1984
                            "createWebviewTextEditorInset") "apply"
                         [|x1984;((let x1982 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1982 "push"
                                        [|(TextEditor.t_to_js x1978)|]);
                                   ignore
                                     (Ojs.call x1982 "push"
                                        [|(Ojs.int_to_js x1979)|]);
                                   ignore
                                     (Ojs.call x1982 "push"
                                        [|(Ojs.int_to_js x1980)|]);
                                   (match x1981 with
                                    | Some x1983 ->
                                        ignore
                                          (Ojs.call x1982 "push"
                                             [|(WebviewOptions.t_to_js x1983)|])
                                    | None -> ());
                                   x1982))|])
        let (on_did_write_terminal_data : TerminalDataWriteEvent.t Event.t) =
          Event.t_of_js TerminalDataWriteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidWriteTerminalData")
        let (on_did_change_terminal_dimensions :
          TerminalDimensionsChangeEvent.t Event.t) =
          Event.t_of_js TerminalDimensionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeTerminalDimensions")
        let (create_status_bar_item :
          ?options:StatusBarItemOptions.t -> unit -> StatusBarItem.t) =
          fun ?options:(x1987 : StatusBarItemOptions.t option) ->
            fun () ->
              StatusBarItem.t_of_js
                (let x1990 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x1990 "createStatusBarItem")
                   "apply"
                   [|x1990;((let x1988 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1987 with
                              | Some x1989 ->
                                  ignore
                                    (Ojs.call x1988 "push"
                                       [|(StatusBarItemOptions.t_to_js x1989)|])
                              | None -> ());
                             x1988))|])
        let (visible_notebook_editors : NotebookEditor.t list) =
          Ojs.list_of_js NotebookEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "visibleNotebookEditors")
        let (on_did_change_visible_notebook_editors :
          NotebookEditor.t list Event.t) =
          Event.t_of_js
            (fun (x1992 : Ojs.t) ->
               Ojs.list_of_js NotebookEditor.t_of_js x1992)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeVisibleNotebookEditors")
        let (active_notebook_editor : NotebookEditor.t or_undefined) =
          or_undefined_of_js NotebookEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "activeNotebookEditor")
        let (on_did_change_active_notebook_editor :
          NotebookEditor.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x1995 : Ojs.t) ->
               or_undefined_of_js NotebookEditor.t_of_js x1995)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeActiveNotebookEditor")
        let (on_did_change_notebook_editor_selection :
          NotebookEditorSelectionChangeEvent.t Event.t) =
          Event.t_of_js NotebookEditorSelectionChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeNotebookEditorSelection")
        let (on_did_change_notebook_editor_visible_ranges :
          NotebookEditorVisibleRangesChangeEvent.t Event.t) =
          Event.t_of_js NotebookEditorVisibleRangesChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window")
               "onDidChangeNotebookEditorVisibleRanges")
        let (show_notebook_document :
          uri:Uri.t ->
            ?options:NotebookDocumentShowOptions.t ->
              unit -> NotebookEditor.t Promise.t)
          =
          fun ~uri:(x1999 : Uri.t) ->
            fun ?options:(x2000 : NotebookDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js NotebookEditor.t_of_js
                  (let x2003 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x2003 "showNotebookDocument")
                     "apply"
                     [|x2003;((let x2001 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2001 "push"
                                    [|(Uri.t_to_js x1999)|]);
                               (match x2000 with
                                | Some x2002 ->
                                    ignore
                                      (Ojs.call x2001 "push"
                                         [|(NotebookDocumentShowOptions.t_to_js
                                              x2002)|])
                                | None -> ());
                               x2001))|])
        let (show_notebook_document :
          document:NotebookDocument.t ->
            ?options:NotebookDocumentShowOptions.t ->
              unit -> NotebookEditor.t Promise.t)
          =
          fun ~document:(x2005 : NotebookDocument.t) ->
            fun ?options:(x2006 : NotebookDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js NotebookEditor.t_of_js
                  (let x2009 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS") "vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x2009 "showNotebookDocument")
                     "apply"
                     [|x2009;((let x2007 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2007 "push"
                                    [|(NotebookDocument.t_to_js x2005)|]);
                               (match x2006 with
                                | Some x2008 ->
                                    ignore
                                      (Ojs.call x2007 "push"
                                         [|(NotebookDocumentShowOptions.t_to_js
                                              x2008)|])
                                | None -> ());
                               x2007))|])
        let (register_external_uri_opener :
          id:string ->
            opener:ExternalUriOpener.t ->
              metadata:ExternalUriOpenerMetadata.t -> Disposable.t)
          =
          fun ~id:(x2011 : string) ->
            fun ~opener:(x2012 : ExternalUriOpener.t) ->
              fun ~metadata:(x2013 : ExternalUriOpenerMetadata.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS") "vscode") "window")
                     "registerExternalUriOpener"
                     [|(Ojs.string_to_js x2011);(ExternalUriOpener.t_to_js
                                                   x2012);(ExternalUriOpenerMetadata.t_to_js
                                                             x2013)|])
        let (open_editors : OpenEditorInfo.t list) =
          Ojs.list_of_js OpenEditorInfo.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "openEditors")
        let (on_did_change_open_editors : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "window") "onDidChangeOpenEditors")
      end
    module Workspace =
      struct
        let (open_tunnel :
          tunnel_options:TunnelOptions.t -> Tunnel.t Promise.t) =
          fun ~tunnel_options:(x2016 : TunnelOptions.t) ->
            Promise.t_of_js Tunnel.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "openTunnel" [|(TunnelOptions.t_to_js x2016)|])
        let (tunnels : TunnelDescription.t list Promise.t) =
          Promise.t_of_js
            (fun (x2018 : Ojs.t) ->
               Ojs.list_of_js TunnelDescription.t_of_js x2018)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "tunnels")
        let (on_did_change_tunnels : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeTunnels")
        let (register_remote_authority_resolver :
          authority_prefix:string ->
            resolver:RemoteAuthorityResolver.t -> Disposable.t)
          =
          fun ~authority_prefix:(x2021 : string) ->
            fun ~resolver:(x2022 : RemoteAuthorityResolver.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerRemoteAuthorityResolver"
                   [|(Ojs.string_to_js x2021);(RemoteAuthorityResolver.t_to_js
                                                 x2022)|])
        let (register_resource_label_formatter :
          formatter:ResourceLabelFormatter.t -> Disposable.t) =
          fun ~formatter:(x2023 : ResourceLabelFormatter.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                 "registerResourceLabelFormatter"
                 [|(ResourceLabelFormatter.t_to_js x2023)|])
        let (register_file_search_provider :
          scheme:string -> provider:FileSearchProvider.t -> Disposable.t) =
          fun ~scheme:(x2024 : string) ->
            fun ~provider:(x2025 : FileSearchProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerFileSearchProvider"
                   [|(Ojs.string_to_js x2024);(FileSearchProvider.t_to_js
                                                 x2025)|])
        let (register_text_search_provider :
          scheme:string -> provider:TextSearchProvider.t -> Disposable.t) =
          fun ~scheme:(x2026 : string) ->
            fun ~provider:(x2027 : TextSearchProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTextSearchProvider"
                   [|(Ojs.string_to_js x2026);(TextSearchProvider.t_to_js
                                                 x2027)|])
        let (find_text_in_files :
          query:TextSearchQuery.t ->
            callback:(result:TextSearchResult.t -> unit) ->
              ?token:CancellationToken.t ->
                unit -> TextSearchComplete.t Promise.t)
          =
          fun ~query:(x2028 : TextSearchQuery.t) ->
            fun ~callback:(x2029 : result:TextSearchResult.t -> unit) ->
              fun ?token:(x2030 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js TextSearchComplete.t_of_js
                    (let x2034 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS") "vscode")
                         "workspace" in
                     Ojs.call (Ojs.get_prop_ascii x2034 "findTextInFiles")
                       "apply"
                       [|x2034;((let x2031 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2031 "push"
                                      [|(TextSearchQuery.t_to_js x2028)|]);
                                 ignore
                                   (Ojs.call x2031 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x2033 : Ojs.t) ->
                                              x2029
                                                ~result:(TextSearchResult.t_of_js
                                                           x2033)))|]);
                                 (match x2030 with
                                  | Some x2032 ->
                                      ignore
                                        (Ojs.call x2031 "push"
                                           [|(CancellationToken.t_to_js x2032)|])
                                  | None -> ());
                                 x2031))|])
        let (find_text_in_files :
          query:TextSearchQuery.t ->
            options:FindTextInFilesOptions.t ->
              callback:(result:TextSearchResult.t -> unit) ->
                ?token:CancellationToken.t ->
                  unit -> TextSearchComplete.t Promise.t)
          =
          fun ~query:(x2036 : TextSearchQuery.t) ->
            fun ~options:(x2037 : FindTextInFilesOptions.t) ->
              fun ~callback:(x2038 : result:TextSearchResult.t -> unit) ->
                fun ?token:(x2039 : CancellationToken.t option) ->
                  fun () ->
                    Promise.t_of_js TextSearchComplete.t_of_js
                      (let x2043 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global
                                 "__LIB__VSCODE__IMPORTS") "vscode")
                           "workspace" in
                       Ojs.call (Ojs.get_prop_ascii x2043 "findTextInFiles")
                         "apply"
                         [|x2043;((let x2040 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x2040 "push"
                                        [|(TextSearchQuery.t_to_js x2036)|]);
                                   ignore
                                     (Ojs.call x2040 "push"
                                        [|(FindTextInFilesOptions.t_to_js
                                             x2037)|]);
                                   ignore
                                     (Ojs.call x2040 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x2042 : Ojs.t) ->
                                                x2038
                                                  ~result:(TextSearchResult.t_of_js
                                                             x2042)))|]);
                                   (match x2039 with
                                    | Some x2041 ->
                                        ignore
                                          (Ojs.call x2040 "push"
                                             [|(CancellationToken.t_to_js
                                                  x2041)|])
                                    | None -> ());
                                   x2040))|])
        let (register_timeline_provider :
          scheme:string list or_string ->
            provider:TimelineProvider.t -> Disposable.t)
          =
          fun ~scheme:(x2045 : string list or_string) ->
            fun ~provider:(x2048 : TimelineProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerTimelineProvider"
                   [|(or_string_to_js
                        (fun (x2046 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x2046) x2045);(
                     TimelineProvider.t_to_js x2048)|])
        let (trust_state : WorkspaceTrustState.t) =
          WorkspaceTrustState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "trustState")
        let (request_workspace_trust :
          ?options:WorkspaceTrustRequestOptions.t ->
            unit -> WorkspaceTrustState.t or_undefined Promise.t)
          =
          fun ?options:(x2049 : WorkspaceTrustRequestOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x2053 : Ojs.t) ->
                   or_undefined_of_js WorkspaceTrustState.t_of_js x2053)
                (let x2052 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS") "vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x2052 "requestWorkspaceTrust")
                   "apply"
                   [|x2052;((let x2050 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2049 with
                              | Some x2051 ->
                                  ignore
                                    (Ojs.call x2050 "push"
                                       [|(WorkspaceTrustRequestOptions.t_to_js
                                            x2051)|])
                              | None -> ());
                             x2050))|])
        let (on_did_change_workspace_trust_state :
          WorkspaceTrustStateChangeEvent.t Event.t) =
          Event.t_of_js WorkspaceTrustStateChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE__IMPORTS")
                     "vscode") "workspace") "onDidChangeWorkspaceTrustState")
        let (register_port_attributes_provider :
          port_selector:AnonymousInterface10.t ->
            provider:PortAttributesProvider.t -> Disposable.t)
          =
          fun ~port_selector:(x2056 : AnonymousInterface10.t) ->
            fun ~provider:(x2057 : PortAttributesProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS") "vscode") "workspace")
                   "registerPortAttributesProvider"
                   [|(AnonymousInterface10.t_to_js x2056);(PortAttributesProvider.t_to_js
                                                             x2057)|])
      end
  end
include struct include Vscode end
