[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2015
open Vscode
module Vscode =
  struct
    module AnonymousInterface16 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get : t -> string -> any) =
          fun (x3 : t) ->
            fun (x4 : string) ->
              any_of_js (Ojs.get_prop (t_to_js x3) (Ojs.string_to_js x4))
        let (set : t -> string -> any -> unit) =
          fun (x5 : t) ->
            fun (x6 : string) ->
              fun (x7 : any) ->
                Ojs.set_prop (t_to_js x5) (Ojs.string_to_js x6)
                  (any_to_js x7)
      end
    module AnonymousInterface8 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x9 : Ojs.t) -> x9
        and t_to_js : t -> Ojs.t = fun (x8 : Ojs.t) -> x8
        let (include_ : t -> GlobPattern.t) =
          fun (x10 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x10) "include")
        let (set_include : t -> GlobPattern.t -> unit) =
          fun (x11 : t) ->
            fun (x12 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x11) "include"
                (GlobPattern.t_to_js x12)
        let (exclude : t -> GlobPattern.t) =
          fun (x13 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x13) "exclude")
        let (set_exclude : t -> GlobPattern.t -> unit) =
          fun (x14 : t) ->
            fun (x15 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x14) "exclude"
                (GlobPattern.t_to_js x15)
      end
    module NotebookFilenamePattern =
      struct
        type t = (GlobPattern.t, AnonymousInterface8.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x19 : Ojs.t) ->
            union2_of_js GlobPattern.t_of_js AnonymousInterface8.t_of_js x19
        and t_to_js : t -> Ojs.t =
          fun (x16 : (GlobPattern.t, AnonymousInterface8.t) union2) ->
            union2_to_js GlobPattern.t_to_js AnonymousInterface8.t_to_js x16
      end
    module AnonymousInterface6 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
        and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
        let (editable : t -> bool or_null) =
          fun (x24 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x24) "editable")
        let (set_editable : t -> bool or_null -> unit) =
          fun (x26 : t) ->
            fun (x27 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x26) "editable"
                (or_null_to_js Ojs.bool_to_js x27)
        let (cellEditable : t -> bool or_null) =
          fun (x29 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x29) "cellEditable")
        let (set_cellEditable : t -> bool or_null -> unit) =
          fun (x31 : t) ->
            fun (x32 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x31) "cellEditable"
                (or_null_to_js Ojs.bool_to_js x32)
        let (custom : t -> AnonymousInterface16.t or_null) =
          fun (x34 : t) ->
            or_null_of_js AnonymousInterface16.t_of_js
              (Ojs.get_prop_ascii (t_to_js x34) "custom")
        let (set_custom : t -> AnonymousInterface16.t or_null -> unit) =
          fun (x36 : t) ->
            fun (x37 : AnonymousInterface16.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x36) "custom"
                (or_null_to_js AnonymousInterface16.t_to_js x37)
        let (trusted : t -> bool or_null) =
          fun (x39 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x39) "trusted")
        let (set_trusted : t -> bool or_null -> unit) =
          fun (x41 : t) ->
            fun (x42 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x41) "trusted"
                (or_null_to_js Ojs.bool_to_js x42)
      end
    module NotebookDocumentMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x45 : Ojs.t) -> x45
        and t_to_js : t -> Ojs.t = fun (x44 : Ojs.t) -> x44
        let (editable : t -> bool) =
          fun (x46 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x46) "editable")
        let (cellEditable : t -> bool) =
          fun (x47 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x47) "cellEditable")
        let (custom : t -> AnonymousInterface16.t) =
          fun (x48 : t) ->
            AnonymousInterface16.t_of_js
              (Ojs.get_prop_ascii (t_to_js x48) "custom")
        let (trusted : t -> bool) =
          fun (x49 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x49) "trusted")
        let (create :
          ?editable:bool ->
            ?cellEditable:bool ->
              ?custom:AnonymousInterface16.t -> ?trusted:bool -> unit -> t)
          =
          fun ?editable:(x50 : bool option) ->
            fun ?cellEditable:(x51 : bool option) ->
              fun ?custom:(x52 : AnonymousInterface16.t option) ->
                fun ?trusted:(x53 : bool option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global
                               "__LIB__VSCODE__IMPORTS.vscode")
                            "NotebookDocumentMetadata")
                         (let x54 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x50 with
                           | Some x58 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(Ojs.bool_to_js x58)|])
                           | None -> ());
                          (match x51 with
                           | Some x57 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(Ojs.bool_to_js x57)|])
                           | None -> ());
                          (match x52 with
                           | Some x56 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(AnonymousInterface16.t_to_js x56)|])
                           | None -> ());
                          (match x53 with
                           | Some x55 ->
                               ignore
                                 (Ojs.call x54 "push"
                                    [|(Ojs.bool_to_js x55)|])
                           | None -> ());
                          x54))
        let (with_ : t -> change:AnonymousInterface6.t -> t) =
          fun (x60 : t) ->
            fun ~change:(x59 : AnonymousInterface6.t) ->
              t_of_js
                (Ojs.call (t_to_js x60) "with"
                   [|(AnonymousInterface6.t_to_js x59)|])
      end
    module NotebookDocumentContentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x62 : Ojs.t) -> x62
        and t_to_js : t -> Ojs.t = fun (x61 : Ojs.t) -> x61
        let (transientOutputs : t -> bool) =
          fun (x63 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x63) "transientOutputs")
        let (set_transientOutputs : t -> bool -> unit) =
          fun (x64 : t) ->
            fun (x65 : bool) ->
              Ojs.set_prop_ascii (t_to_js x64) "transientOutputs"
                (Ojs.bool_to_js x65)
        let (transientMetadata : t -> any) =
          fun (x66 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x66) "transientMetadata")
        let (set_transientMetadata : t -> any -> unit) =
          fun (x67 : t) ->
            fun (x68 : any) ->
              Ojs.set_prop_ascii (t_to_js x67) "transientMetadata"
                (any_to_js x68)
      end
    module AnonymousInterface13 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x70 : Ojs.t) -> x70
        and t_to_js : t -> Ojs.t = fun (x69 : Ojs.t) -> x69
        let (start : t -> int) =
          fun (x71 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x71) "start")
        let (set_start : t -> int -> unit) =
          fun (x72 : t) ->
            fun (x73 : int) ->
              Ojs.set_prop_ascii (t_to_js x72) "start" (Ojs.int_to_js x73)
        let (end_ : t -> int) =
          fun (x74 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x74) "end")
        let (set_end : t -> int -> unit) =
          fun (x75 : t) ->
            fun (x76 : int) ->
              Ojs.set_prop_ascii (t_to_js x75) "end" (Ojs.int_to_js x76)
      end
    module NotebookCellRange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x78 : Ojs.t) -> x78
        and t_to_js : t -> Ojs.t = fun (x77 : Ojs.t) -> x77
        let (start : t -> int) =
          fun (x79 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x79) "start")
        let (end_ : t -> int) =
          fun (x80 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x80) "end")
        let (isEmpty : t -> bool) =
          fun (x81 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x81) "isEmpty")
        let (create : start:int -> end_:int -> t) =
          fun ~start:(x82 : int) ->
            fun ~end_:(x83 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "NotebookCellRange")
                   [|(Ojs.int_to_js x82);(Ojs.int_to_js x83)|])
        let (with_ : t -> change:AnonymousInterface13.t -> t) =
          fun (x85 : t) ->
            fun ~change:(x84 : AnonymousInterface13.t) ->
              t_of_js
                (Ojs.call (t_to_js x85) "with"
                   [|(AnonymousInterface13.t_to_js x84)|])
      end
    module NotebookCellOutputItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x87 : Ojs.t) -> x87
        and t_to_js : t -> Ojs.t = fun (x86 : Ojs.t) -> x86
        let (mime : t -> string) =
          fun (x88 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x88) "mime")
        let (value : t -> unknown) =
          fun (x89 : t) ->
            unknown_of_js (Ojs.get_prop_ascii (t_to_js x89) "value")
        let (metadata : t -> (string, any) Record.t) =
          fun (x90 : t) ->
            Record.t_of_js Ojs.string_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x90) "metadata")
        let (create :
          mime:string ->
            value:unknown -> ?metadata:(string, any) Record.t -> unit -> t)
          =
          fun ~mime:(x93 : string) ->
            fun ~value:(x94 : unknown) ->
              fun ?metadata:(x95 : (string, any) Record.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS.vscode")
                          "NotebookCellOutputItem")
                       (let x96 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x96 "push" [|(Ojs.string_to_js x93)|]);
                        ignore (Ojs.call x96 "push" [|(unknown_to_js x94)|]);
                        (match x95 with
                         | Some x97 ->
                             ignore
                               (Ojs.call x96 "push"
                                  [|(Record.t_to_js Ojs.string_to_js
                                       any_to_js x97)|])
                         | None -> ());
                        x96))
      end
    module NotebookCellOutput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x101 : Ojs.t) -> x101
        and t_to_js : t -> Ojs.t = fun (x100 : Ojs.t) -> x100
        let (id : t -> string) =
          fun (x102 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x102) "id")
        let (outputs : t -> NotebookCellOutputItem.t list) =
          fun (x103 : t) ->
            Ojs.list_of_js NotebookCellOutputItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x103) "outputs")
        let (metadata : t -> (string, any) Record.t) =
          fun (x105 : t) ->
            Record.t_of_js Ojs.string_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x105) "metadata")
        let (create :
          outputs:NotebookCellOutputItem.t list ->
            ?metadata:(string, any) Record.t -> unit -> t)
          =
          fun ~outputs:(x108 : NotebookCellOutputItem.t list) ->
            fun ?metadata:(x109 : (string, any) Record.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS.vscode")
                        "NotebookCellOutput")
                     (let x110 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x110 "push"
                           [|(Ojs.list_to_js NotebookCellOutputItem.t_to_js
                                x108)|]);
                      (match x109 with
                       | Some x111 ->
                           ignore
                             (Ojs.call x110 "push"
                                [|(Record.t_to_js Ojs.string_to_js any_to_js
                                     x111)|])
                       | None -> ());
                      x110))
        let (create' :
          outputs:NotebookCellOutputItem.t list ->
            id:string -> ?metadata:(string, any) Record.t -> unit -> t)
          =
          fun ~outputs:(x115 : NotebookCellOutputItem.t list) ->
            fun ~id:(x116 : string) ->
              fun ?metadata:(x117 : (string, any) Record.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS.vscode")
                          "NotebookCellOutput")
                       (let x118 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x118 "push"
                             [|(Ojs.list_to_js NotebookCellOutputItem.t_to_js
                                  x115)|]);
                        ignore
                          (Ojs.call x118 "push" [|(Ojs.string_to_js x116)|]);
                        (match x117 with
                         | Some x119 ->
                             ignore
                               (Ojs.call x118 "push"
                                  [|(Record.t_to_js Ojs.string_to_js
                                       any_to_js x119)|])
                         | None -> ());
                        x118))
      end
    module NotebookCellKind =
      struct
        type t = [ `Markdown  | `Code ]
        let rec t_of_js : Ojs.t -> t =
          fun (x124 : Ojs.t) ->
            let x125 = x124 in
            match Ojs.int_of_js x125 with
            | 1 -> `Markdown
            | 2 -> `Code
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x123 : [ `Markdown  | `Code ]) ->
            match x123 with
            | `Markdown -> Ojs.int_to_js 1
            | `Code -> Ojs.int_to_js 2
      end
    module AnonymousInterface5 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x127 : Ojs.t) -> x127
        and t_to_js : t -> Ojs.t = fun (x126 : Ojs.t) -> x126
        let (editable : t -> bool or_null) =
          fun (x128 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x128) "editable")
        let (set_editable : t -> bool or_null -> unit) =
          fun (x130 : t) ->
            fun (x131 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x130) "editable"
                (or_null_to_js Ojs.bool_to_js x131)
        let (breakpointMargin : t -> bool or_null) =
          fun (x133 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x133) "breakpointMargin")
        let (set_breakpointMargin : t -> bool or_null -> unit) =
          fun (x135 : t) ->
            fun (x136 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x135) "breakpointMargin"
                (or_null_to_js Ojs.bool_to_js x136)
        let (statusMessage : t -> string or_null) =
          fun (x138 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x138) "statusMessage")
        let (set_statusMessage : t -> string or_null -> unit) =
          fun (x140 : t) ->
            fun (x141 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x140) "statusMessage"
                (or_null_to_js Ojs.string_to_js x141)
        let (lastRunDuration : t -> int or_null) =
          fun (x143 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x143) "lastRunDuration")
        let (set_lastRunDuration : t -> int or_null -> unit) =
          fun (x145 : t) ->
            fun (x146 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js x145) "lastRunDuration"
                (or_null_to_js Ojs.int_to_js x146)
        let (inputCollapsed : t -> bool or_null) =
          fun (x148 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x148) "inputCollapsed")
        let (set_inputCollapsed : t -> bool or_null -> unit) =
          fun (x150 : t) ->
            fun (x151 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x150) "inputCollapsed"
                (or_null_to_js Ojs.bool_to_js x151)
        let (outputCollapsed : t -> bool or_null) =
          fun (x153 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x153) "outputCollapsed")
        let (set_outputCollapsed : t -> bool or_null -> unit) =
          fun (x155 : t) ->
            fun (x156 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x155) "outputCollapsed"
                (or_null_to_js Ojs.bool_to_js x156)
        let (custom : t -> (string, any) Record.t or_null) =
          fun (x158 : t) ->
            or_null_of_js
              (fun (x159 : Ojs.t) ->
                 Record.t_of_js Ojs.string_of_js any_of_js x159)
              (Ojs.get_prop_ascii (t_to_js x158) "custom")
        let (set_custom : t -> (string, any) Record.t or_null -> unit) =
          fun (x162 : t) ->
            fun (x163 : (string, any) Record.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x162) "custom"
                (or_null_to_js
                   (fun (x164 : (string, any) Record.t) ->
                      Record.t_to_js Ojs.string_to_js any_to_js x164) x163)
      end
    module NotebookCellMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x168 : Ojs.t) -> x168
        and t_to_js : t -> Ojs.t = fun (x167 : Ojs.t) -> x167
        let (editable : t -> bool) =
          fun (x169 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x169) "editable")
        let (breakpointMargin : t -> bool) =
          fun (x170 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x170) "breakpointMargin")
        let (outputCollapsed : t -> bool) =
          fun (x171 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x171) "outputCollapsed")
        let (inputCollapsed : t -> bool) =
          fun (x172 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x172) "inputCollapsed")
        let (custom : t -> (string, any) Record.t) =
          fun (x173 : t) ->
            Record.t_of_js Ojs.string_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x173) "custom")
        let (statusMessage : t -> string) =
          fun (x176 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x176) "statusMessage")
        let (create :
          ?editable:bool ->
            ?breakpointMargin:bool ->
              ?statusMessage:string ->
                ?lastRunDuration:int ->
                  ?inputCollapsed:bool ->
                    ?outputCollapsed:bool ->
                      ?custom:(string, any) Record.t -> unit -> t)
          =
          fun ?editable:(x177 : bool option) ->
            fun ?breakpointMargin:(x178 : bool option) ->
              fun ?statusMessage:(x179 : string option) ->
                fun ?lastRunDuration:(x180 : int option) ->
                  fun ?inputCollapsed:(x181 : bool option) ->
                    fun ?outputCollapsed:(x182 : bool option) ->
                      fun ?custom:(x183 : (string, any) Record.t option) ->
                        fun () ->
                          t_of_js
                            (Ojs.new_obj_arr
                               (Ojs.get_prop_ascii
                                  (Ojs.get_prop_ascii Ojs.global
                                     "__LIB__VSCODE__IMPORTS.vscode")
                                  "NotebookCellMetadata")
                               (let x184 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x177 with
                                 | Some x193 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.bool_to_js x193)|])
                                 | None -> ());
                                (match x178 with
                                 | Some x192 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.bool_to_js x192)|])
                                 | None -> ());
                                (match x179 with
                                 | Some x191 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.string_to_js x191)|])
                                 | None -> ());
                                (match x180 with
                                 | Some x190 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.int_to_js x190)|])
                                 | None -> ());
                                (match x181 with
                                 | Some x189 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.bool_to_js x189)|])
                                 | None -> ());
                                (match x182 with
                                 | Some x188 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.bool_to_js x188)|])
                                 | None -> ());
                                (match x183 with
                                 | Some x185 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Record.t_to_js Ojs.string_to_js
                                               any_to_js x185)|])
                                 | None -> ());
                                x184))
        let (with_ : t -> change:AnonymousInterface5.t -> t) =
          fun (x195 : t) ->
            fun ~change:(x194 : AnonymousInterface5.t) ->
              t_of_js
                (Ojs.call (t_to_js x195) "with"
                   [|(AnonymousInterface5.t_to_js x194)|])
      end
    module NotebookCellExecutionSummary =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x197 : Ojs.t) -> x197
        and t_to_js : t -> Ojs.t = fun (x196 : Ojs.t) -> x196
        let (executionOrder : t -> int) =
          fun (x198 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x198) "executionOrder")
        let (set_executionOrder : t -> int -> unit) =
          fun (x199 : t) ->
            fun (x200 : int) ->
              Ojs.set_prop_ascii (t_to_js x199) "executionOrder"
                (Ojs.int_to_js x200)
        let (success : t -> bool) =
          fun (x201 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x201) "success")
        let (set_success : t -> bool -> unit) =
          fun (x202 : t) ->
            fun (x203 : bool) ->
              Ojs.set_prop_ascii (t_to_js x202) "success"
                (Ojs.bool_to_js x203)
        let (duration : t -> int) =
          fun (x204 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x204) "duration")
        let (set_duration : t -> int -> unit) =
          fun (x205 : t) ->
            fun (x206 : int) ->
              Ojs.set_prop_ascii (t_to_js x205) "duration"
                (Ojs.int_to_js x206)
      end
    module NotebookCell =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x208 : Ojs.t) -> x208
        and t_to_js : t -> Ojs.t = fun (x207 : Ojs.t) -> x207
        let (index : t -> int) =
          fun (x209 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x209) "index")
        let (kind : t -> NotebookCellKind.t) =
          fun (x210 : t) ->
            NotebookCellKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x210) "kind")
        let (document : t -> TextDocument.t) =
          fun (x211 : t) ->
            TextDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x211) "document")
        let (metadata : t -> NotebookCellMetadata.t) =
          fun (x212 : t) ->
            NotebookCellMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x212) "metadata")
        let (outputs : t -> NotebookCellOutput.t list) =
          fun (x213 : t) ->
            Ojs.list_of_js NotebookCellOutput.t_of_js
              (Ojs.get_prop_ascii (t_to_js x213) "outputs")
        let (latestExecutionSummary :
          t -> NotebookCellExecutionSummary.t or_undefined) =
          fun (x215 : t) ->
            or_undefined_of_js NotebookCellExecutionSummary.t_of_js
              (Ojs.get_prop_ascii (t_to_js x215) "latestExecutionSummary")
      end
    module NotebookDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x218 : Ojs.t) -> x218
        and t_to_js : t -> Ojs.t = fun (x217 : Ojs.t) -> x217
        let (uri : t -> Uri.t) =
          fun (x219 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x219) "uri")
        let (version : t -> int) =
          fun (x220 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x220) "version")
        let (fileName : t -> string) =
          fun (x221 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x221) "fileName")
        let (isDirty : t -> bool) =
          fun (x222 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x222) "isDirty")
        let (isUntitled : t -> bool) =
          fun (x223 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x223) "isUntitled")
        let (isClosed : t -> bool) =
          fun (x224 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x224) "isClosed")
        let (metadata : t -> NotebookDocumentMetadata.t) =
          fun (x225 : t) ->
            NotebookDocumentMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x225) "metadata")
        let (viewType : t -> string) =
          fun (x226 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x226) "viewType")
        let (cellCount : t -> int) =
          fun (x227 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x227) "cellCount")
        let (cellAt : t -> index:int -> NotebookCell.t) =
          fun (x229 : t) ->
            fun ~index:(x228 : int) ->
              NotebookCell.t_of_js
                (Ojs.call (t_to_js x229) "cellAt" [|(Ojs.int_to_js x228)|])
        let (getCells :
          t -> ?range:NotebookCellRange.t -> unit -> NotebookCell.t list) =
          fun (x233 : t) ->
            fun ?range:(x230 : NotebookCellRange.t option) ->
              fun () ->
                Ojs.list_of_js NotebookCell.t_of_js
                  (let x234 = t_to_js x233 in
                   Ojs.call (Ojs.get_prop_ascii x234 "getCells") "apply"
                     [|x234;((let x231 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x230 with
                               | Some x232 ->
                                   ignore
                                     (Ojs.call x231 "push"
                                        [|(NotebookCellRange.t_to_js x232)|])
                               | None -> ());
                              x231))|])
        let (save : t -> bool Promise.t) =
          fun (x236 : t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (t_to_js x236) "save" [||])
      end
    module NotebookKernel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x239 : Ojs.t) -> x239
        and t_to_js : t -> Ojs.t = fun (x238 : Ojs.t) -> x238
        let (id : t -> string) =
          fun (x240 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x240) "id")
        let (label : t -> string) =
          fun (x241 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x241) "label")
        let (set_label : t -> string -> unit) =
          fun (x242 : t) ->
            fun (x243 : string) ->
              Ojs.set_prop_ascii (t_to_js x242) "label"
                (Ojs.string_to_js x243)
        let (description : t -> string) =
          fun (x244 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x244) "description")
        let (set_description : t -> string -> unit) =
          fun (x245 : t) ->
            fun (x246 : string) ->
              Ojs.set_prop_ascii (t_to_js x245) "description"
                (Ojs.string_to_js x246)
        let (detail : t -> string) =
          fun (x247 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x247) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x248 : t) ->
            fun (x249 : string) ->
              Ojs.set_prop_ascii (t_to_js x248) "detail"
                (Ojs.string_to_js x249)
        let (isPreferred : t -> bool) =
          fun (x250 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x250) "isPreferred")
        let (set_isPreferred : t -> bool -> unit) =
          fun (x251 : t) ->
            fun (x252 : bool) ->
              Ojs.set_prop_ascii (t_to_js x251) "isPreferred"
                (Ojs.bool_to_js x252)
        let (preloads : t -> Uri.t list) =
          fun (x253 : t) ->
            Ojs.list_of_js Uri.t_of_js
              (Ojs.get_prop_ascii (t_to_js x253) "preloads")
        let (set_preloads : t -> Uri.t list -> unit) =
          fun (x255 : t) ->
            fun (x256 : Uri.t list) ->
              Ojs.set_prop_ascii (t_to_js x255) "preloads"
                (Ojs.list_to_js Uri.t_to_js x256)
        let (supportedLanguages : t -> string list) =
          fun (x258 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x258) "supportedLanguages")
        let (set_supportedLanguages : t -> string list -> unit) =
          fun (x260 : t) ->
            fun (x261 : string list) ->
              Ojs.set_prop_ascii (t_to_js x260) "supportedLanguages"
                (Ojs.list_to_js Ojs.string_to_js x261)
        let (interrupt : t -> document:NotebookDocument.t -> unit) =
          fun (x264 : t) ->
            fun ~document:(x263 : NotebookDocument.t) ->
              ignore
                (Ojs.call (t_to_js x264) "interrupt"
                   [|(NotebookDocument.t_to_js x263)|])
        let (executeCellsRequest :
          t ->
            document:NotebookDocument.t ->
              ranges:NotebookCellRange.t list -> unit Promise.t)
          =
          fun (x268 : t) ->
            fun ~document:(x265 : NotebookDocument.t) ->
              fun ~ranges:(x266 : NotebookCellRange.t list) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x268) "executeCellsRequest"
                     [|(NotebookDocument.t_to_js x265);(Ojs.list_to_js
                                                          NotebookCellRange.t_to_js
                                                          x266)|])
      end
    module AnonymousInterface3 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x271 : Ojs.t) -> x271
        and t_to_js : t -> Ojs.t = fun (x270 : Ojs.t) -> x270
        let (displayName : t -> string) =
          fun (x272 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x272) "displayName")
        let (set_displayName : t -> string -> unit) =
          fun (x273 : t) ->
            fun (x274 : string) ->
              Ojs.set_prop_ascii (t_to_js x273) "displayName"
                (Ojs.string_to_js x274)
        let (filenamePattern : t -> NotebookFilenamePattern.t list) =
          fun (x275 : t) ->
            Ojs.list_of_js NotebookFilenamePattern.t_of_js
              (Ojs.get_prop_ascii (t_to_js x275) "filenamePattern")
        let (set_filenamePattern :
          t -> NotebookFilenamePattern.t list -> unit) =
          fun (x277 : t) ->
            fun (x278 : NotebookFilenamePattern.t list) ->
              Ojs.set_prop_ascii (t_to_js x277) "filenamePattern"
                (Ojs.list_to_js NotebookFilenamePattern.t_to_js x278)
        let (exclusive : t -> bool) =
          fun (x280 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x280) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x281 : t) ->
            fun (x282 : bool) ->
              Ojs.set_prop_ascii (t_to_js x281) "exclusive"
                (Ojs.bool_to_js x282)
      end
    module AnonymousInterface4 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x284 : Ojs.t) -> x284
        and t_to_js : t -> Ojs.t = fun (x283 : Ojs.t) -> x283
        let (document : t -> NotebookDocument.t) =
          fun (x285 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x285) "document")
        let (set_document : t -> NotebookDocument.t -> unit) =
          fun (x286 : t) ->
            fun (x287 : NotebookDocument.t) ->
              Ojs.set_prop_ascii (t_to_js x286) "document"
                (NotebookDocument.t_to_js x287)
        let (kernel : t -> NotebookKernel.t or_undefined) =
          fun (x288 : t) ->
            or_undefined_of_js NotebookKernel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x288) "kernel")
        let (set_kernel : t -> NotebookKernel.t or_undefined -> unit) =
          fun (x290 : t) ->
            fun (x291 : NotebookKernel.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x290) "kernel"
                (or_undefined_to_js NotebookKernel.t_to_js x291)
      end
    module AnonymousInterface7 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x294 : Ojs.t) -> x294
        and t_to_js : t -> Ojs.t = fun (x293 : Ojs.t) -> x293
        let (elevation : t -> bool) =
          fun (x295 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x295) "elevation")
        let (set_elevation : t -> bool -> unit) =
          fun (x296 : t) ->
            fun (x297 : bool) ->
              Ojs.set_prop_ascii (t_to_js x296) "elevation"
                (Ojs.bool_to_js x297)
        let (public : t -> bool) =
          fun (x298 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x298) "public")
        let (set_public : t -> bool -> unit) =
          fun (x299 : t) ->
            fun (x300 : bool) ->
              Ojs.set_prop_ascii (t_to_js x299) "public"
                (Ojs.bool_to_js x300)
      end
    module AnonymousInterface9 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x302 : Ojs.t) -> x302
        and t_to_js : t -> Ojs.t = fun (x301 : Ojs.t) -> x301
        let (light : t -> Uri.t) =
          fun (x303 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x303) "light")
        let (set_light : t -> Uri.t -> unit) =
          fun (x304 : t) ->
            fun (x305 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x304) "light" (Uri.t_to_js x305)
        let (dark : t -> Uri.t) =
          fun (x306 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x306) "dark")
        let (set_dark : t -> Uri.t -> unit) =
          fun (x307 : t) ->
            fun (x308 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x307) "dark" (Uri.t_to_js x308)
      end
    module AnonymousInterface10 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x310 : Ojs.t) -> x310
        and t_to_js : t -> Ojs.t = fun (x309 : Ojs.t) -> x309
        let (pid : t -> int) =
          fun (x311 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x311) "pid")
        let (set_pid : t -> int -> unit) =
          fun (x312 : t) ->
            fun (x313 : int) ->
              Ojs.set_prop_ascii (t_to_js x312) "pid" (Ojs.int_to_js x313)
        let (portRange : t -> (int * int)) =
          fun (x314 : t) ->
            let x315 = Ojs.get_prop_ascii (t_to_js x314) "portRange" in
            ((Ojs.int_of_js (Ojs.array_get x315 0)),
              (Ojs.int_of_js (Ojs.array_get x315 1)))
        let (set_portRange : t -> (int * int) -> unit) =
          fun (x316 : t) ->
            fun (x317 : (int * int)) ->
              Ojs.set_prop_ascii (t_to_js x316) "portRange"
                (let (x318, x319) = x317 in
                 let x320 = Ojs.array_make 2 in
                 Ojs.array_set x320 0 (Ojs.int_to_js x318);
                 Ojs.array_set x320 1 (Ojs.int_to_js x319);
                 x320)
        let (commandMatcher : t -> regexp) =
          fun (x321 : t) ->
            regexp_of_js (Ojs.get_prop_ascii (t_to_js x321) "commandMatcher")
        let (set_commandMatcher : t -> regexp -> unit) =
          fun (x322 : t) ->
            fun (x323 : regexp) ->
              Ojs.set_prop_ascii (t_to_js x322) "commandMatcher"
                (regexp_to_js x323)
      end
    module AnonymousInterface11 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x325 : Ojs.t) -> x325
        and t_to_js : t -> Ojs.t = fun (x324 : Ojs.t) -> x324
        let (port : t -> int) =
          fun (x326 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x326) "port")
        let (set_port : t -> int -> unit) =
          fun (x327 : t) ->
            fun (x328 : int) ->
              Ojs.set_prop_ascii (t_to_js x327) "port" (Ojs.int_to_js x328)
        let (host : t -> string) =
          fun (x329 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x329) "host")
        let (set_host : t -> string -> unit) =
          fun (x330 : t) ->
            fun (x331 : string) ->
              Ojs.set_prop_ascii (t_to_js x330) "host"
                (Ojs.string_to_js x331)
      end
    module AnonymousInterface12 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x333 : Ojs.t) -> x333
        and t_to_js : t -> Ojs.t = fun (x332 : Ojs.t) -> x332
        let (select : t -> bool) =
          fun (x334 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x334) "select")
        let (set_select : t -> bool -> unit) =
          fun (x335 : t) ->
            fun (x336 : bool) ->
              Ojs.set_prop_ascii (t_to_js x335) "select"
                (Ojs.bool_to_js x336)
        let (focus : t -> bool) =
          fun (x337 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x337) "focus")
        let (set_focus : t -> bool -> unit) =
          fun (x338 : t) ->
            fun (x339 : bool) ->
              Ojs.set_prop_ascii (t_to_js x338) "focus" (Ojs.bool_to_js x339)
        let (expand : t -> bool or_number) =
          fun (x340 : t) ->
            or_number_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x340) "expand")
        let (set_expand : t -> bool or_number -> unit) =
          fun (x342 : t) ->
            fun (x343 : bool or_number) ->
              Ojs.set_prop_ascii (t_to_js x342) "expand"
                (or_number_to_js Ojs.bool_to_js x343)
      end
    module AnonymousInterface14 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x346 : Ojs.t) -> x346
        and t_to_js : t -> Ojs.t = fun (x345 : Ojs.t) -> x345
        let (timestamp : t -> int) =
          fun (x347 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x347) "timestamp")
        let (set_timestamp : t -> int -> unit) =
          fun (x348 : t) ->
            fun (x349 : int) ->
              Ojs.set_prop_ascii (t_to_js x348) "timestamp"
                (Ojs.int_to_js x349)
        let (id : t -> string) =
          fun (x350 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x350) "id")
        let (set_id : t -> string -> unit) =
          fun (x351 : t) ->
            fun (x352 : string) ->
              Ojs.set_prop_ascii (t_to_js x351) "id" (Ojs.string_to_js x352)
      end
    module AnonymousInterface15 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x354 : Ojs.t) -> x354
        and t_to_js : t -> Ojs.t = fun (x353 : Ojs.t) -> x353
        let (viewOptions : t -> AnonymousInterface3.t) =
          fun (x355 : t) ->
            AnonymousInterface3.t_of_js
              (Ojs.get_prop_ascii (t_to_js x355) "viewOptions")
        let (set_viewOptions : t -> AnonymousInterface3.t -> unit) =
          fun (x356 : t) ->
            fun (x357 : AnonymousInterface3.t) ->
              Ojs.set_prop_ascii (t_to_js x356) "viewOptions"
                (AnonymousInterface3.t_to_js x357)
      end
    module AnonymousInterface17 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x359 : Ojs.t) -> x359
        and t_to_js : t -> Ojs.t = fun (x358 : Ojs.t) -> x358
        let (get : t -> string -> string or_null) =
          fun (x360 : t) ->
            fun (x361 : string) ->
              or_null_of_js Ojs.string_of_js
                (Ojs.get_prop (t_to_js x360) (Ojs.string_to_js x361))
        let (set : t -> string -> string or_null -> unit) =
          fun (x363 : t) ->
            fun (x364 : string) ->
              fun (x365 : string or_null) ->
                Ojs.set_prop (t_to_js x363) (Ojs.string_to_js x364)
                  (or_null_to_js Ojs.string_to_js x365)
      end
    module AuthenticationProvidersChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x368 : Ojs.t) -> x368
        and t_to_js : t -> Ojs.t = fun (x367 : Ojs.t) -> x367
        let (added : t -> AuthenticationProviderInformation.t list) =
          fun (x369 : t) ->
            Ojs.list_of_js AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x369) "added")
        let (removed : t -> AuthenticationProviderInformation.t list) =
          fun (x371 : t) ->
            Ojs.list_of_js AuthenticationProviderInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x371) "removed")
      end
    module Authentication =
      struct
        let (onDidChangeAuthenticationProviders :
          AuthenticationProvidersChangeEvent.t Event.t) =
          Event.t_of_js AuthenticationProvidersChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "authentication")
               "onDidChangeAuthenticationProviders")
        let (providers : AuthenticationProviderInformation.t list) =
          Ojs.list_of_js AuthenticationProviderInformation.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "authentication")
               "providers")
        let (logout :
          providerId:string -> sessionId:string -> unit Promise.t) =
          fun ~providerId:(x375 : string) ->
            fun ~sessionId:(x376 : string) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "authentication")
                   "logout"
                   [|(Ojs.string_to_js x375);(Ojs.string_to_js x376)|])
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x379 : Ojs.t) -> x379
        and t_to_js : t -> Ojs.t = fun (x378 : Ojs.t) -> x378
        let (useCustom : t -> bool) =
          fun (x380 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x380) "useCustom")
        let (set_useCustom : t -> bool -> unit) =
          fun (x381 : t) ->
            fun (x382 : bool) ->
              Ojs.set_prop_ascii (t_to_js x381) "useCustom"
                (Ojs.bool_to_js x382)
      end
    module RemoteAuthorityResolverContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x384 : Ojs.t) -> x384
        and t_to_js : t -> Ojs.t = fun (x383 : Ojs.t) -> x383
        let (resolveAttempt : t -> int) =
          fun (x385 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x385) "resolveAttempt")
        let (set_resolveAttempt : t -> int -> unit) =
          fun (x386 : t) ->
            fun (x387 : int) ->
              Ojs.set_prop_ascii (t_to_js x386) "resolveAttempt"
                (Ojs.int_to_js x387)
      end
    module ResolvedAuthority =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x389 : Ojs.t) -> x389
        and t_to_js : t -> Ojs.t = fun (x388 : Ojs.t) -> x388
        let (host : t -> string) =
          fun (x390 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x390) "host")
        let (port : t -> int) =
          fun (x391 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x391) "port")
        let (connectionToken : t -> string or_undefined) =
          fun (x392 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x392) "connectionToken")
        let (create :
          host:string -> port:int -> ?connectionToken:string -> unit -> t) =
          fun ~host:(x394 : string) ->
            fun ~port:(x395 : int) ->
              fun ?connectionToken:(x396 : string option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS.vscode")
                          "ResolvedAuthority")
                       (let x397 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x397 "push" [|(Ojs.string_to_js x394)|]);
                        ignore
                          (Ojs.call x397 "push" [|(Ojs.int_to_js x395)|]);
                        (match x396 with
                         | Some x398 ->
                             ignore
                               (Ojs.call x397 "push"
                                  [|(Ojs.string_to_js x398)|])
                         | None -> ());
                        x397))
      end
    module ResolvedOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x400 : Ojs.t) -> x400
        and t_to_js : t -> Ojs.t = fun (x399 : Ojs.t) -> x399
        let (extensionHostEnv : t -> AnonymousInterface17.t) =
          fun (x401 : t) ->
            AnonymousInterface17.t_of_js
              (Ojs.get_prop_ascii (t_to_js x401) "extensionHostEnv")
        let (set_extensionHostEnv : t -> AnonymousInterface17.t -> unit) =
          fun (x402 : t) ->
            fun (x403 : AnonymousInterface17.t) ->
              Ojs.set_prop_ascii (t_to_js x402) "extensionHostEnv"
                (AnonymousInterface17.t_to_js x403)
      end
    module TunnelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x405 : Ojs.t) -> x405
        and t_to_js : t -> Ojs.t = fun (x404 : Ojs.t) -> x404
        let (remoteAddress : t -> AnonymousInterface11.t) =
          fun (x406 : t) ->
            AnonymousInterface11.t_of_js
              (Ojs.get_prop_ascii (t_to_js x406) "remoteAddress")
        let (set_remoteAddress : t -> AnonymousInterface11.t -> unit) =
          fun (x407 : t) ->
            fun (x408 : AnonymousInterface11.t) ->
              Ojs.set_prop_ascii (t_to_js x407) "remoteAddress"
                (AnonymousInterface11.t_to_js x408)
        let (localAddressPort : t -> int) =
          fun (x409 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x409) "localAddressPort")
        let (set_localAddressPort : t -> int -> unit) =
          fun (x410 : t) ->
            fun (x411 : int) ->
              Ojs.set_prop_ascii (t_to_js x410) "localAddressPort"
                (Ojs.int_to_js x411)
        let (label : t -> string) =
          fun (x412 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x412) "label")
        let (set_label : t -> string -> unit) =
          fun (x413 : t) ->
            fun (x414 : string) ->
              Ojs.set_prop_ascii (t_to_js x413) "label"
                (Ojs.string_to_js x414)
        let (public : t -> bool) =
          fun (x415 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x415) "public")
        let (set_public : t -> bool -> unit) =
          fun (x416 : t) ->
            fun (x417 : bool) ->
              Ojs.set_prop_ascii (t_to_js x416) "public"
                (Ojs.bool_to_js x417)
      end
    module TunnelDescription =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x419 : Ojs.t) -> x419
        and t_to_js : t -> Ojs.t = fun (x418 : Ojs.t) -> x418
        let (remoteAddress : t -> AnonymousInterface11.t) =
          fun (x420 : t) ->
            AnonymousInterface11.t_of_js
              (Ojs.get_prop_ascii (t_to_js x420) "remoteAddress")
        let (set_remoteAddress : t -> AnonymousInterface11.t -> unit) =
          fun (x421 : t) ->
            fun (x422 : AnonymousInterface11.t) ->
              Ojs.set_prop_ascii (t_to_js x421) "remoteAddress"
                (AnonymousInterface11.t_to_js x422)
        let (localAddress : t -> AnonymousInterface11.t or_string) =
          fun (x423 : t) ->
            or_string_of_js AnonymousInterface11.t_of_js
              (Ojs.get_prop_ascii (t_to_js x423) "localAddress")
        let (set_localAddress :
          t -> AnonymousInterface11.t or_string -> unit) =
          fun (x425 : t) ->
            fun (x426 : AnonymousInterface11.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x425) "localAddress"
                (or_string_to_js AnonymousInterface11.t_to_js x426)
        let (public : t -> bool) =
          fun (x428 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x428) "public")
        let (set_public : t -> bool -> unit) =
          fun (x429 : t) ->
            fun (x430 : bool) ->
              Ojs.set_prop_ascii (t_to_js x429) "public"
                (Ojs.bool_to_js x430)
      end
    module Tunnel =
      struct
        include struct include TunnelDescription end
        let (onDidDispose : t -> unit Event.t) =
          fun (x431 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x431) "onDidDispose")
        let (set_onDidDispose : t -> unit Event.t -> unit) =
          fun (x433 : t) ->
            fun (x434 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x433) "onDidDispose"
                (Event.t_to_js Ojs.unit_to_js x434)
        let (dispose : t -> (unit, unit Promise.t) union2) =
          fun (x436 : t) ->
            union2_of_js Ojs.unit_of_js
              (fun (x438 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x438)
              (Ojs.call (t_to_js x436) "dispose" [||])
      end
    module TunnelInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x441 : Ojs.t) -> x441
        and t_to_js : t -> Ojs.t = fun (x440 : Ojs.t) -> x440
        let (environmentTunnels : t -> TunnelDescription.t list) =
          fun (x442 : t) ->
            Ojs.list_of_js TunnelDescription.t_of_js
              (Ojs.get_prop_ascii (t_to_js x442) "environmentTunnels")
        let (set_environmentTunnels : t -> TunnelDescription.t list -> unit)
          =
          fun (x444 : t) ->
            fun (x445 : TunnelDescription.t list) ->
              Ojs.set_prop_ascii (t_to_js x444) "environmentTunnels"
                (Ojs.list_to_js TunnelDescription.t_to_js x445)
      end
    module TunnelCreationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x448 : Ojs.t) -> x448
        and t_to_js : t -> Ojs.t = fun (x447 : Ojs.t) -> x447
        let (elevationRequired : t -> bool) =
          fun (x449 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x449) "elevationRequired")
        let (set_elevationRequired : t -> bool -> unit) =
          fun (x450 : t) ->
            fun (x451 : bool) ->
              Ojs.set_prop_ascii (t_to_js x450) "elevationRequired"
                (Ojs.bool_to_js x451)
      end
    module CandidatePortSource =
      struct
        type t = [ `None  | `Process  | `Output ]
        let rec t_of_js : Ojs.t -> t =
          fun (x453 : Ojs.t) ->
            let x454 = x453 in
            match Ojs.int_of_js x454 with
            | 0 -> `None
            | 1 -> `Process
            | 2 -> `Output
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x452 : [ `None  | `Process  | `Output ]) ->
            match x452 with
            | `None -> Ojs.int_to_js 0
            | `Process -> Ojs.int_to_js 1
            | `Output -> Ojs.int_to_js 2
      end
    module ResolverResult =
      struct
        type t =
          (ResolvedAuthority.t, ResolvedOptions.t, TunnelInformation.t)
            intersection3
        let rec t_of_js : Ojs.t -> t =
          fun (x459 : Ojs.t) ->
            intersection3_of_js ResolvedAuthority.t_of_js
              ResolvedOptions.t_of_js TunnelInformation.t_of_js x459
        and t_to_js : t -> Ojs.t =
          fun
            (x455 :
              (ResolvedAuthority.t, ResolvedOptions.t, TunnelInformation.t)
                intersection3)
            ->
            intersection3_to_js ResolvedAuthority.t_to_js
              ResolvedOptions.t_to_js TunnelInformation.t_to_js x455
      end
    module RemoteAuthorityResolverError =
      struct
        include struct include Error end
        let (notAvailable : ?message:string -> ?handled:bool -> unit -> t) =
          fun ?message:(x463 : string option) ->
            fun ?handled:(x464 : bool option) ->
              fun () ->
                t_of_js
                  (let x468 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS.vscode")
                       "RemoteAuthorityResolverError" in
                   Ojs.call (Ojs.get_prop_ascii x468 "NotAvailable") "apply"
                     [|x468;((let x465 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x463 with
                               | Some x467 ->
                                   ignore
                                     (Ojs.call x465 "push"
                                        [|(Ojs.string_to_js x467)|])
                               | None -> ());
                              (match x464 with
                               | Some x466 ->
                                   ignore
                                     (Ojs.call x465 "push"
                                        [|(Ojs.bool_to_js x466)|])
                               | None -> ());
                              x465))|])
        let (temporarilyNotAvailable : ?message:string -> unit -> t) =
          fun ?message:(x469 : string option) ->
            fun () ->
              t_of_js
                (let x472 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global
                        "__LIB__VSCODE__IMPORTS.vscode")
                     "RemoteAuthorityResolverError" in
                 Ojs.call (Ojs.get_prop_ascii x472 "TemporarilyNotAvailable")
                   "apply"
                   [|x472;((let x470 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x469 with
                             | Some x471 ->
                                 ignore
                                   (Ojs.call x470 "push"
                                      [|(Ojs.string_to_js x471)|])
                             | None -> ());
                            x470))|])
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x473 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode")
                      "RemoteAuthorityResolverError")
                   (let x474 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x473 with
                     | Some x475 ->
                         ignore
                           (Ojs.call x474 "push" [|(Ojs.string_to_js x475)|])
                     | None -> ());
                    x474))
      end
    module RemoteAuthorityResolver =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x477 : Ojs.t) -> x477
        and t_to_js : t -> Ojs.t = fun (x476 : Ojs.t) -> x476
        let (resolve :
          t ->
            authority:string ->
              context:RemoteAuthorityResolverContext.t ->
                (ResolverResult.t, ResolverResult.t Promise.t) union2)
          =
          fun (x480 : t) ->
            fun ~authority:(x478 : string) ->
              fun ~context:(x479 : RemoteAuthorityResolverContext.t) ->
                union2_of_js ResolverResult.t_of_js
                  (fun (x482 : Ojs.t) ->
                     Promise.t_of_js ResolverResult.t_of_js x482)
                  (Ojs.call (t_to_js x480) "resolve"
                     [|(Ojs.string_to_js x478);(RemoteAuthorityResolverContext.t_to_js
                                                  x479)|])
        let (tunnelFactory :
          t ->
            tunnelOptions:TunnelOptions.t ->
              tunnelCreationOptions:TunnelCreationOptions.t ->
                Tunnel.t Promise.t or_undefined)
          =
          fun (x486 : t) ->
            fun ~tunnelOptions:(x484 : TunnelOptions.t) ->
              fun ~tunnelCreationOptions:(x485 : TunnelCreationOptions.t) ->
                or_undefined_of_js
                  (fun (x487 : Ojs.t) -> Promise.t_of_js Tunnel.t_of_js x487)
                  (Ojs.call (t_to_js x486) "tunnelFactory"
                     [|(TunnelOptions.t_to_js x484);(TunnelCreationOptions.t_to_js
                                                       x485)|])
        let (showCandidatePort :
          t -> host:string -> port:int -> detail:string -> bool Promise.t) =
          fun (x492 : t) ->
            fun ~host:(x489 : string) ->
              fun ~port:(x490 : int) ->
                fun ~detail:(x491 : string) ->
                  Promise.t_of_js Ojs.bool_of_js
                    (Ojs.call (t_to_js x492) "showCandidatePort"
                       [|(Ojs.string_to_js x489);(Ojs.int_to_js x490);(
                         Ojs.string_to_js x491)|])
        let (tunnelFeatures : t -> AnonymousInterface7.t) =
          fun (x494 : t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js x494) "tunnelFeatures")
        let (set_tunnelFeatures : t -> AnonymousInterface7.t -> unit) =
          fun (x495 : t) ->
            fun (x496 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js x495) "tunnelFeatures"
                (AnonymousInterface7.t_to_js x496)
        let (candidatePortSource : t -> CandidatePortSource.t) =
          fun (x497 : t) ->
            CandidatePortSource.t_of_js
              (Ojs.get_prop_ascii (t_to_js x497) "candidatePortSource")
        let (set_candidatePortSource : t -> CandidatePortSource.t -> unit) =
          fun (x498 : t) ->
            fun (x499 : CandidatePortSource.t) ->
              Ojs.set_prop_ascii (t_to_js x498) "candidatePortSource"
                (CandidatePortSource.t_to_js x499)
      end
    module ResourceLabelFormatting =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x501 : Ojs.t) -> x501
        and t_to_js : t -> Ojs.t = fun (x500 : Ojs.t) -> x500
        let (label : t -> string) =
          fun (x502 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x502) "label")
        let (set_label : t -> string -> unit) =
          fun (x503 : t) ->
            fun (x504 : string) ->
              Ojs.set_prop_ascii (t_to_js x503) "label"
                (Ojs.string_to_js x504)
        let (separator : t -> [ `L_s0  | `L_s1  | `L_s2 ]) =
          fun (x505 : t) ->
            let x506 = Ojs.get_prop_ascii (t_to_js x505) "separator" in
            match Ojs.string_of_js x506 with
            | "" -> `L_s0
            | "/" -> `L_s1
            | "\\" -> `L_s2
            | _ -> assert false
        let (set_separator : t -> [ `L_s0  | `L_s1  | `L_s2 ] -> unit) =
          fun (x507 : t) ->
            fun (x508 : [ `L_s0  | `L_s1  | `L_s2 ]) ->
              Ojs.set_prop_ascii (t_to_js x507) "separator"
                (match x508 with
                 | `L_s0 -> Ojs.string_to_js "LS0"
                 | `L_s1 -> Ojs.string_to_js "LS1"
                 | `L_s2 -> Ojs.string_to_js "LS2")
        let (tildify : t -> bool) =
          fun (x509 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x509) "tildify")
        let (set_tildify : t -> bool -> unit) =
          fun (x510 : t) ->
            fun (x511 : bool) ->
              Ojs.set_prop_ascii (t_to_js x510) "tildify"
                (Ojs.bool_to_js x511)
        let (normalizeDriveLetter : t -> bool) =
          fun (x512 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x512) "normalizeDriveLetter")
        let (set_normalizeDriveLetter : t -> bool -> unit) =
          fun (x513 : t) ->
            fun (x514 : bool) ->
              Ojs.set_prop_ascii (t_to_js x513) "normalizeDriveLetter"
                (Ojs.bool_to_js x514)
        let (workspaceSuffix : t -> string) =
          fun (x515 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x515) "workspaceSuffix")
        let (set_workspaceSuffix : t -> string -> unit) =
          fun (x516 : t) ->
            fun (x517 : string) ->
              Ojs.set_prop_ascii (t_to_js x516) "workspaceSuffix"
                (Ojs.string_to_js x517)
        let (authorityPrefix : t -> string) =
          fun (x518 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x518) "authorityPrefix")
        let (set_authorityPrefix : t -> string -> unit) =
          fun (x519 : t) ->
            fun (x520 : string) ->
              Ojs.set_prop_ascii (t_to_js x519) "authorityPrefix"
                (Ojs.string_to_js x520)
        let (stripPathStartingSeparator : t -> bool) =
          fun (x521 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x521) "stripPathStartingSeparator")
        let (set_stripPathStartingSeparator : t -> bool -> unit) =
          fun (x522 : t) ->
            fun (x523 : bool) ->
              Ojs.set_prop_ascii (t_to_js x522) "stripPathStartingSeparator"
                (Ojs.bool_to_js x523)
      end
    module ResourceLabelFormatter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x525 : Ojs.t) -> x525
        and t_to_js : t -> Ojs.t = fun (x524 : Ojs.t) -> x524
        let (scheme : t -> string) =
          fun (x526 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x526) "scheme")
        let (set_scheme : t -> string -> unit) =
          fun (x527 : t) ->
            fun (x528 : string) ->
              Ojs.set_prop_ascii (t_to_js x527) "scheme"
                (Ojs.string_to_js x528)
        let (authority : t -> string) =
          fun (x529 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x529) "authority")
        let (set_authority : t -> string -> unit) =
          fun (x530 : t) ->
            fun (x531 : string) ->
              Ojs.set_prop_ascii (t_to_js x530) "authority"
                (Ojs.string_to_js x531)
        let (formatting : t -> ResourceLabelFormatting.t) =
          fun (x532 : t) ->
            ResourceLabelFormatting.t_of_js
              (Ojs.get_prop_ascii (t_to_js x532) "formatting")
        let (set_formatting : t -> ResourceLabelFormatting.t -> unit) =
          fun (x533 : t) ->
            fun (x534 : ResourceLabelFormatting.t) ->
              Ojs.set_prop_ascii (t_to_js x533) "formatting"
                (ResourceLabelFormatting.t_to_js x534)
      end
    module AnonymousInterface1 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x536 : Ojs.t) -> x536
        and t_to_js : t -> Ojs.t = fun (x535 : Ojs.t) -> x535
        let (create : t -> bool) =
          fun (x537 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x537) "create")
        let (set_create : t -> bool -> unit) =
          fun (x538 : t) ->
            fun (x539 : bool) ->
              Ojs.set_prop_ascii (t_to_js x538) "create"
                (Ojs.bool_to_js x539)
      end
    module FileSystemProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x541 : Ojs.t) -> x541
        and t_to_js : t -> Ojs.t = fun (x540 : Ojs.t) -> x540
        let (open_ :
          t ->
            resource:Uri.t ->
              options:AnonymousInterface1.t -> int Promise.t or_number)
          =
          fun (x544 : t) ->
            fun ~resource:(x542 : Uri.t) ->
              fun ~options:(x543 : AnonymousInterface1.t) ->
                or_number_of_js
                  (fun (x545 : Ojs.t) -> Promise.t_of_js Ojs.int_of_js x545)
                  (Ojs.call (t_to_js x544) "open"
                     [|(Uri.t_to_js x542);(AnonymousInterface1.t_to_js x543)|])
        let (close : t -> fd:int -> (unit, unit Promise.t) union2) =
          fun (x548 : t) ->
            fun ~fd:(x547 : int) ->
              union2_of_js Ojs.unit_of_js
                (fun (x550 : Ojs.t) -> Promise.t_of_js Ojs.unit_of_js x550)
                (Ojs.call (t_to_js x548) "close" [|(Ojs.int_to_js x547)|])
        let (read :
          t ->
            fd:int ->
              pos:int ->
                data:Uint8Array.t ->
                  offset:int -> length:int -> int Promise.t or_number)
          =
          fun (x557 : t) ->
            fun ~fd:(x552 : int) ->
              fun ~pos:(x553 : int) ->
                fun ~data:(x554 : Uint8Array.t) ->
                  fun ~offset:(x555 : int) ->
                    fun ~length:(x556 : int) ->
                      or_number_of_js
                        (fun (x558 : Ojs.t) ->
                           Promise.t_of_js Ojs.int_of_js x558)
                        (Ojs.call (t_to_js x557) "read"
                           [|(Ojs.int_to_js x552);(Ojs.int_to_js x553);(
                             Uint8Array.t_to_js x554);(Ojs.int_to_js x555);(
                             Ojs.int_to_js x556)|])
        let (write :
          t ->
            fd:int ->
              pos:int ->
                data:Uint8Array.t ->
                  offset:int -> length:int -> int Promise.t or_number)
          =
          fun (x565 : t) ->
            fun ~fd:(x560 : int) ->
              fun ~pos:(x561 : int) ->
                fun ~data:(x562 : Uint8Array.t) ->
                  fun ~offset:(x563 : int) ->
                    fun ~length:(x564 : int) ->
                      or_number_of_js
                        (fun (x566 : Ojs.t) ->
                           Promise.t_of_js Ojs.int_of_js x566)
                        (Ojs.call (t_to_js x565) "write"
                           [|(Ojs.int_to_js x560);(Ojs.int_to_js x561);(
                             Uint8Array.t_to_js x562);(Ojs.int_to_js x563);(
                             Ojs.int_to_js x564)|])
      end
    module TextSearchQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x569 : Ojs.t) -> x569
        and t_to_js : t -> Ojs.t = fun (x568 : Ojs.t) -> x568
        let (pattern : t -> string) =
          fun (x570 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x570) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x571 : t) ->
            fun (x572 : string) ->
              Ojs.set_prop_ascii (t_to_js x571) "pattern"
                (Ojs.string_to_js x572)
        let (isMultiline : t -> bool) =
          fun (x573 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x573) "isMultiline")
        let (set_isMultiline : t -> bool -> unit) =
          fun (x574 : t) ->
            fun (x575 : bool) ->
              Ojs.set_prop_ascii (t_to_js x574) "isMultiline"
                (Ojs.bool_to_js x575)
        let (isRegExp : t -> bool) =
          fun (x576 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x576) "isRegExp")
        let (set_isRegExp : t -> bool -> unit) =
          fun (x577 : t) ->
            fun (x578 : bool) ->
              Ojs.set_prop_ascii (t_to_js x577) "isRegExp"
                (Ojs.bool_to_js x578)
        let (isCaseSensitive : t -> bool) =
          fun (x579 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x579) "isCaseSensitive")
        let (set_isCaseSensitive : t -> bool -> unit) =
          fun (x580 : t) ->
            fun (x581 : bool) ->
              Ojs.set_prop_ascii (t_to_js x580) "isCaseSensitive"
                (Ojs.bool_to_js x581)
        let (isWordMatch : t -> bool) =
          fun (x582 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x582) "isWordMatch")
        let (set_isWordMatch : t -> bool -> unit) =
          fun (x583 : t) ->
            fun (x584 : bool) ->
              Ojs.set_prop_ascii (t_to_js x583) "isWordMatch"
                (Ojs.bool_to_js x584)
      end
    module GlobString =
      struct
        type t = string
        let rec t_of_js : Ojs.t -> t =
          fun (x586 : Ojs.t) -> Ojs.string_of_js x586
        and t_to_js : t -> Ojs.t =
          fun (x585 : string) -> Ojs.string_to_js x585
      end
    module SearchOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x588 : Ojs.t) -> x588
        and t_to_js : t -> Ojs.t = fun (x587 : Ojs.t) -> x587
        let (folder : t -> Uri.t) =
          fun (x589 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x589) "folder")
        let (set_folder : t -> Uri.t -> unit) =
          fun (x590 : t) ->
            fun (x591 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x590) "folder" (Uri.t_to_js x591)
        let (includes : t -> GlobString.t list) =
          fun (x592 : t) ->
            Ojs.list_of_js GlobString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x592) "includes")
        let (set_includes : t -> GlobString.t list -> unit) =
          fun (x594 : t) ->
            fun (x595 : GlobString.t list) ->
              Ojs.set_prop_ascii (t_to_js x594) "includes"
                (Ojs.list_to_js GlobString.t_to_js x595)
        let (excludes : t -> GlobString.t list) =
          fun (x597 : t) ->
            Ojs.list_of_js GlobString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x597) "excludes")
        let (set_excludes : t -> GlobString.t list -> unit) =
          fun (x599 : t) ->
            fun (x600 : GlobString.t list) ->
              Ojs.set_prop_ascii (t_to_js x599) "excludes"
                (Ojs.list_to_js GlobString.t_to_js x600)
        let (useIgnoreFiles : t -> bool) =
          fun (x602 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x602) "useIgnoreFiles")
        let (set_useIgnoreFiles : t -> bool -> unit) =
          fun (x603 : t) ->
            fun (x604 : bool) ->
              Ojs.set_prop_ascii (t_to_js x603) "useIgnoreFiles"
                (Ojs.bool_to_js x604)
        let (followSymlinks : t -> bool) =
          fun (x605 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x605) "followSymlinks")
        let (set_followSymlinks : t -> bool -> unit) =
          fun (x606 : t) ->
            fun (x607 : bool) ->
              Ojs.set_prop_ascii (t_to_js x606) "followSymlinks"
                (Ojs.bool_to_js x607)
        let (useGlobalIgnoreFiles : t -> bool) =
          fun (x608 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x608) "useGlobalIgnoreFiles")
        let (set_useGlobalIgnoreFiles : t -> bool -> unit) =
          fun (x609 : t) ->
            fun (x610 : bool) ->
              Ojs.set_prop_ascii (t_to_js x609) "useGlobalIgnoreFiles"
                (Ojs.bool_to_js x610)
      end
    module TextSearchPreviewOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x612 : Ojs.t) -> x612
        and t_to_js : t -> Ojs.t = fun (x611 : Ojs.t) -> x611
        let (matchLines : t -> int) =
          fun (x613 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x613) "matchLines")
        let (set_matchLines : t -> int -> unit) =
          fun (x614 : t) ->
            fun (x615 : int) ->
              Ojs.set_prop_ascii (t_to_js x614) "matchLines"
                (Ojs.int_to_js x615)
        let (charsPerLine : t -> int) =
          fun (x616 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x616) "charsPerLine")
        let (set_charsPerLine : t -> int -> unit) =
          fun (x617 : t) ->
            fun (x618 : int) ->
              Ojs.set_prop_ascii (t_to_js x617) "charsPerLine"
                (Ojs.int_to_js x618)
      end
    module TextSearchOptions =
      struct
        include struct include SearchOptions end
        let (maxResults : t -> int) =
          fun (x619 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x619) "maxResults")
        let (set_maxResults : t -> int -> unit) =
          fun (x620 : t) ->
            fun (x621 : int) ->
              Ojs.set_prop_ascii (t_to_js x620) "maxResults"
                (Ojs.int_to_js x621)
        let (previewOptions : t -> TextSearchPreviewOptions.t) =
          fun (x622 : t) ->
            TextSearchPreviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x622) "previewOptions")
        let (set_previewOptions : t -> TextSearchPreviewOptions.t -> unit) =
          fun (x623 : t) ->
            fun (x624 : TextSearchPreviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x623) "previewOptions"
                (TextSearchPreviewOptions.t_to_js x624)
        let (maxFileSize : t -> int) =
          fun (x625 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x625) "maxFileSize")
        let (set_maxFileSize : t -> int -> unit) =
          fun (x626 : t) ->
            fun (x627 : int) ->
              Ojs.set_prop_ascii (t_to_js x626) "maxFileSize"
                (Ojs.int_to_js x627)
        let (encoding : t -> string) =
          fun (x628 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x628) "encoding")
        let (set_encoding : t -> string -> unit) =
          fun (x629 : t) ->
            fun (x630 : string) ->
              Ojs.set_prop_ascii (t_to_js x629) "encoding"
                (Ojs.string_to_js x630)
        let (beforeContext : t -> int) =
          fun (x631 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x631) "beforeContext")
        let (set_beforeContext : t -> int -> unit) =
          fun (x632 : t) ->
            fun (x633 : int) ->
              Ojs.set_prop_ascii (t_to_js x632) "beforeContext"
                (Ojs.int_to_js x633)
        let (afterContext : t -> int) =
          fun (x634 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x634) "afterContext")
        let (set_afterContext : t -> int -> unit) =
          fun (x635 : t) ->
            fun (x636 : int) ->
              Ojs.set_prop_ascii (t_to_js x635) "afterContext"
                (Ojs.int_to_js x636)
      end
    module TextSearchComplete =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x638 : Ojs.t) -> x638
        and t_to_js : t -> Ojs.t = fun (x637 : Ojs.t) -> x637
        let (limitHit : t -> bool) =
          fun (x639 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x639) "limitHit")
        let (set_limitHit : t -> bool -> unit) =
          fun (x640 : t) ->
            fun (x641 : bool) ->
              Ojs.set_prop_ascii (t_to_js x640) "limitHit"
                (Ojs.bool_to_js x641)
      end
    module TextSearchMatchPreview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x643 : Ojs.t) -> x643
        and t_to_js : t -> Ojs.t = fun (x642 : Ojs.t) -> x642
        let (text : t -> string) =
          fun (x644 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x644) "text")
        let (set_text : t -> string -> unit) =
          fun (x645 : t) ->
            fun (x646 : string) ->
              Ojs.set_prop_ascii (t_to_js x645) "text"
                (Ojs.string_to_js x646)
        let (matches : t -> (Range.t, Range.t) or_array) =
          fun (x647 : t) ->
            or_array_of_js Range.t_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x647) "matches")
        let (set_matches : t -> (Range.t, Range.t) or_array -> unit) =
          fun (x650 : t) ->
            fun (x651 : (Range.t, Range.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x650) "matches"
                (or_array_to_js Range.t_to_js Range.t_to_js x651)
      end
    module TextSearchMatch =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x655 : Ojs.t) -> x655
        and t_to_js : t -> Ojs.t = fun (x654 : Ojs.t) -> x654
        let (uri : t -> Uri.t) =
          fun (x656 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x656) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x657 : t) ->
            fun (x658 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x657) "uri" (Uri.t_to_js x658)
        let (ranges : t -> (Range.t, Range.t) or_array) =
          fun (x659 : t) ->
            or_array_of_js Range.t_of_js Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js x659) "ranges")
        let (set_ranges : t -> (Range.t, Range.t) or_array -> unit) =
          fun (x662 : t) ->
            fun (x663 : (Range.t, Range.t) or_array) ->
              Ojs.set_prop_ascii (t_to_js x662) "ranges"
                (or_array_to_js Range.t_to_js Range.t_to_js x663)
        let (preview : t -> TextSearchMatchPreview.t) =
          fun (x666 : t) ->
            TextSearchMatchPreview.t_of_js
              (Ojs.get_prop_ascii (t_to_js x666) "preview")
        let (set_preview : t -> TextSearchMatchPreview.t -> unit) =
          fun (x667 : t) ->
            fun (x668 : TextSearchMatchPreview.t) ->
              Ojs.set_prop_ascii (t_to_js x667) "preview"
                (TextSearchMatchPreview.t_to_js x668)
      end
    module TextSearchContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x670 : Ojs.t) -> x670
        and t_to_js : t -> Ojs.t = fun (x669 : Ojs.t) -> x669
        let (uri : t -> Uri.t) =
          fun (x671 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x671) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x672 : t) ->
            fun (x673 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x672) "uri" (Uri.t_to_js x673)
        let (text : t -> string) =
          fun (x674 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x674) "text")
        let (set_text : t -> string -> unit) =
          fun (x675 : t) ->
            fun (x676 : string) ->
              Ojs.set_prop_ascii (t_to_js x675) "text"
                (Ojs.string_to_js x676)
        let (lineNumber : t -> int) =
          fun (x677 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x677) "lineNumber")
        let (set_lineNumber : t -> int -> unit) =
          fun (x678 : t) ->
            fun (x679 : int) ->
              Ojs.set_prop_ascii (t_to_js x678) "lineNumber"
                (Ojs.int_to_js x679)
      end
    module TextSearchResult =
      struct
        type t = (TextSearchContext.t, TextSearchMatch.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x683 : Ojs.t) ->
            union2_of_js TextSearchContext.t_of_js TextSearchMatch.t_of_js
              x683
        and t_to_js : t -> Ojs.t =
          fun (x680 : (TextSearchContext.t, TextSearchMatch.t) union2) ->
            union2_to_js TextSearchContext.t_to_js TextSearchMatch.t_to_js
              x680
      end
    module TextSearchProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x687 : Ojs.t) -> x687
        and t_to_js : t -> Ojs.t = fun (x686 : Ojs.t) -> x686
        let (provideTextSearchResults :
          t ->
            query:TextSearchQuery.t ->
              options:TextSearchOptions.t ->
                progress:TextSearchResult.t Progress.t ->
                  token:CancellationToken.t ->
                    TextSearchComplete.t ProviderResult.t)
          =
          fun (x693 : t) ->
            fun ~query:(x688 : TextSearchQuery.t) ->
              fun ~options:(x689 : TextSearchOptions.t) ->
                fun ~progress:(x690 : TextSearchResult.t Progress.t) ->
                  fun ~token:(x692 : CancellationToken.t) ->
                    ProviderResult.t_of_js TextSearchComplete.t_of_js
                      (Ojs.call (t_to_js x693) "provideTextSearchResults"
                         [|(TextSearchQuery.t_to_js x688);(TextSearchOptions.t_to_js
                                                             x689);(Progress.t_to_js
                                                                    TextSearchResult.t_to_js
                                                                    x690);(
                           CancellationToken.t_to_js x692)|])
      end
    module FileSearchQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x696 : Ojs.t) -> x696
        and t_to_js : t -> Ojs.t = fun (x695 : Ojs.t) -> x695
        let (pattern : t -> string) =
          fun (x697 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x697) "pattern")
        let (set_pattern : t -> string -> unit) =
          fun (x698 : t) ->
            fun (x699 : string) ->
              Ojs.set_prop_ascii (t_to_js x698) "pattern"
                (Ojs.string_to_js x699)
      end
    module FileSearchOptions =
      struct
        include struct include SearchOptions end
        let (maxResults : t -> int) =
          fun (x700 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x700) "maxResults")
        let (set_maxResults : t -> int -> unit) =
          fun (x701 : t) ->
            fun (x702 : int) ->
              Ojs.set_prop_ascii (t_to_js x701) "maxResults"
                (Ojs.int_to_js x702)
        let (session : t -> CancellationToken.t) =
          fun (x703 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x703) "session")
        let (set_session : t -> CancellationToken.t -> unit) =
          fun (x704 : t) ->
            fun (x705 : CancellationToken.t) ->
              Ojs.set_prop_ascii (t_to_js x704) "session"
                (CancellationToken.t_to_js x705)
      end
    module FileSearchProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x707 : Ojs.t) -> x707
        and t_to_js : t -> Ojs.t = fun (x706 : Ojs.t) -> x706
        let (provideFileSearchResults :
          t ->
            query:FileSearchQuery.t ->
              options:FileSearchOptions.t ->
                token:CancellationToken.t -> Uri.t list ProviderResult.t)
          =
          fun (x711 : t) ->
            fun ~query:(x708 : FileSearchQuery.t) ->
              fun ~options:(x709 : FileSearchOptions.t) ->
                fun ~token:(x710 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x712 : Ojs.t) -> Ojs.list_of_js Uri.t_of_js x712)
                    (Ojs.call (t_to_js x711) "provideFileSearchResults"
                       [|(FileSearchQuery.t_to_js x708);(FileSearchOptions.t_to_js
                                                           x709);(CancellationToken.t_to_js
                                                                    x710)|])
      end
    module WebviewEditorInset =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x715 : Ojs.t) -> x715
        and t_to_js : t -> Ojs.t = fun (x714 : Ojs.t) -> x714
        let (editor : t -> TextEditor.t) =
          fun (x716 : t) ->
            TextEditor.t_of_js (Ojs.get_prop_ascii (t_to_js x716) "editor")
        let (line : t -> int) =
          fun (x717 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x717) "line")
        let (height : t -> int) =
          fun (x718 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x718) "height")
        let (webview : t -> Webview.t) =
          fun (x719 : t) ->
            Webview.t_of_js (Ojs.get_prop_ascii (t_to_js x719) "webview")
        let (onDidDispose : t -> unit Event.t) =
          fun (x720 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x720) "onDidDispose")
        let (dispose : t -> unit) =
          fun (x722 : t) -> ignore (Ojs.call (t_to_js x722) "dispose" [||])
      end
    module TerminalDataWriteEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x724 : Ojs.t) -> x724
        and t_to_js : t -> Ojs.t = fun (x723 : Ojs.t) -> x723
        let (terminal : t -> Terminal.t) =
          fun (x725 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x725) "terminal")
        let (data : t -> string) =
          fun (x726 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x726) "data")
      end
    module TerminalDimensionsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x728 : Ojs.t) -> x728
        and t_to_js : t -> Ojs.t = fun (x727 : Ojs.t) -> x727
        let (terminal : t -> Terminal.t) =
          fun (x729 : t) ->
            Terminal.t_of_js (Ojs.get_prop_ascii (t_to_js x729) "terminal")
        let (dimensions : t -> TerminalDimensions.t) =
          fun (x730 : t) ->
            TerminalDimensions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x730) "dimensions")
      end
    module Terminal =
      struct
        type t = Terminal.t
        let rec t_of_js : Ojs.t -> t =
          fun (x732 : Ojs.t) -> Terminal.t_of_js x732
        and t_to_js : t -> Ojs.t =
          fun (x731 : Terminal.t) -> Terminal.t_to_js x731
        let (dimensions : t -> TerminalDimensions.t or_undefined) =
          fun (x733 : t) ->
            or_undefined_of_js TerminalDimensions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x733) "dimensions")
      end
    module TerminalOptions =
      struct
        type t = TerminalOptions.t
        let rec t_of_js : Ojs.t -> t =
          fun (x736 : Ojs.t) -> TerminalOptions.t_of_js x736
        and t_to_js : t -> Ojs.t =
          fun (x735 : TerminalOptions.t) -> TerminalOptions.t_to_js x735
        let (icon : t -> string) =
          fun (x737 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x737) "icon")
        let (message : t -> string) =
          fun (x738 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x738) "message")
      end
    module FindTextInFilesOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x740 : Ojs.t) -> x740
        and t_to_js : t -> Ojs.t = fun (x739 : Ojs.t) -> x739
        let (include_ : t -> GlobPattern.t) =
          fun (x741 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x741) "include")
        let (set_include : t -> GlobPattern.t -> unit) =
          fun (x742 : t) ->
            fun (x743 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x742) "include"
                (GlobPattern.t_to_js x743)
        let (exclude : t -> GlobPattern.t) =
          fun (x744 : t) ->
            GlobPattern.t_of_js (Ojs.get_prop_ascii (t_to_js x744) "exclude")
        let (set_exclude : t -> GlobPattern.t -> unit) =
          fun (x745 : t) ->
            fun (x746 : GlobPattern.t) ->
              Ojs.set_prop_ascii (t_to_js x745) "exclude"
                (GlobPattern.t_to_js x746)
        let (useDefaultExcludes : t -> bool) =
          fun (x747 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x747) "useDefaultExcludes")
        let (set_useDefaultExcludes : t -> bool -> unit) =
          fun (x748 : t) ->
            fun (x749 : bool) ->
              Ojs.set_prop_ascii (t_to_js x748) "useDefaultExcludes"
                (Ojs.bool_to_js x749)
        let (maxResults : t -> int) =
          fun (x750 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x750) "maxResults")
        let (set_maxResults : t -> int -> unit) =
          fun (x751 : t) ->
            fun (x752 : int) ->
              Ojs.set_prop_ascii (t_to_js x751) "maxResults"
                (Ojs.int_to_js x752)
        let (useIgnoreFiles : t -> bool) =
          fun (x753 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x753) "useIgnoreFiles")
        let (set_useIgnoreFiles : t -> bool -> unit) =
          fun (x754 : t) ->
            fun (x755 : bool) ->
              Ojs.set_prop_ascii (t_to_js x754) "useIgnoreFiles"
                (Ojs.bool_to_js x755)
        let (useGlobalIgnoreFiles : t -> bool) =
          fun (x756 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x756) "useGlobalIgnoreFiles")
        let (set_useGlobalIgnoreFiles : t -> bool -> unit) =
          fun (x757 : t) ->
            fun (x758 : bool) ->
              Ojs.set_prop_ascii (t_to_js x757) "useGlobalIgnoreFiles"
                (Ojs.bool_to_js x758)
        let (followSymlinks : t -> bool) =
          fun (x759 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x759) "followSymlinks")
        let (set_followSymlinks : t -> bool -> unit) =
          fun (x760 : t) ->
            fun (x761 : bool) ->
              Ojs.set_prop_ascii (t_to_js x760) "followSymlinks"
                (Ojs.bool_to_js x761)
        let (encoding : t -> string) =
          fun (x762 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x762) "encoding")
        let (set_encoding : t -> string -> unit) =
          fun (x763 : t) ->
            fun (x764 : string) ->
              Ojs.set_prop_ascii (t_to_js x763) "encoding"
                (Ojs.string_to_js x764)
        let (previewOptions : t -> TextSearchPreviewOptions.t) =
          fun (x765 : t) ->
            TextSearchPreviewOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x765) "previewOptions")
        let (set_previewOptions : t -> TextSearchPreviewOptions.t -> unit) =
          fun (x766 : t) ->
            fun (x767 : TextSearchPreviewOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x766) "previewOptions"
                (TextSearchPreviewOptions.t_to_js x767)
        let (beforeContext : t -> int) =
          fun (x768 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x768) "beforeContext")
        let (set_beforeContext : t -> int -> unit) =
          fun (x769 : t) ->
            fun (x770 : int) ->
              Ojs.set_prop_ascii (t_to_js x769) "beforeContext"
                (Ojs.int_to_js x770)
        let (afterContext : t -> int) =
          fun (x771 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x771) "afterContext")
        let (set_afterContext : t -> int -> unit) =
          fun (x772 : t) ->
            fun (x773 : int) ->
              Ojs.set_prop_ascii (t_to_js x772) "afterContext"
                (Ojs.int_to_js x773)
      end
    module LineChange =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x775 : Ojs.t) -> x775
        and t_to_js : t -> Ojs.t = fun (x774 : Ojs.t) -> x774
        let (originalStartLineNumber : t -> int) =
          fun (x776 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x776) "originalStartLineNumber")
        let (originalEndLineNumber : t -> int) =
          fun (x777 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x777) "originalEndLineNumber")
        let (modifiedStartLineNumber : t -> int) =
          fun (x778 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x778) "modifiedStartLineNumber")
        let (modifiedEndLineNumber : t -> int) =
          fun (x779 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x779) "modifiedEndLineNumber")
      end
    module Commands =
      struct
        let (registerDiffInformationCommand :
          command:string ->
            callback:(diff:LineChange.t list -> args:any list -> any) ->
              ?thisArg:any -> unit -> Disposable.t)
          =
          fun ~command:(x780 : string) ->
            fun
              ~callback:(x781 :
                          diff:LineChange.t list -> args:any list -> any)
              ->
              fun ?thisArg:(x782 : any option) ->
                fun () ->
                  Disposable.t_of_js
                    (let x788 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS.vscode") "commands" in
                     Ojs.call
                       (Ojs.get_prop_ascii x788
                          "registerDiffInformationCommand") "apply"
                       [|x788;((let x783 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x783 "push"
                                     [|(Ojs.string_to_js x780)|]);
                                ignore
                                  (Ojs.call x783 "push"
                                     [|(Ojs.fun_to_js_args
                                          (fun (x785 : _) ->
                                             any_to_js
                                               (x781
                                                  ~diff:(Ojs.list_of_js
                                                           LineChange.t_of_js
                                                           (Ojs.array_get
                                                              x785 0))
                                                  ~args:(Ojs.list_of_js_from
                                                           any_of_js x785 1))))|]);
                                (match x782 with
                                 | Some x784 ->
                                     ignore
                                       (Ojs.call x783 "push"
                                          [|(any_to_js x784)|])
                                 | None -> ());
                                x783))|])
      end
    module DebugProtocolVariableContainer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x790 : Ojs.t) -> x790
        and t_to_js : t -> Ojs.t = fun (x789 : Ojs.t) -> x789
      end
    module DebugProtocolVariable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x792 : Ojs.t) -> x792
        and t_to_js : t -> Ojs.t = fun (x791 : Ojs.t) -> x791
      end
    module SourceControlInputBoxValidationType =
      struct
        type t = [ `Error  | `Warning  | `Information ]
        let rec t_of_js : Ojs.t -> t =
          fun (x794 : Ojs.t) ->
            let x795 = x794 in
            match Ojs.int_of_js x795 with
            | 0 -> `Error
            | 1 -> `Warning
            | 2 -> `Information
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x793 : [ `Error  | `Warning  | `Information ]) ->
            match x793 with
            | `Error -> Ojs.int_to_js 0
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
      end
    module SourceControlInputBoxValidation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x797 : Ojs.t) -> x797
        and t_to_js : t -> Ojs.t = fun (x796 : Ojs.t) -> x796
        let (message : t -> string) =
          fun (x798 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x798) "message")
        let (type_ : t -> SourceControlInputBoxValidationType.t) =
          fun (x799 : t) ->
            SourceControlInputBoxValidationType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x799) "type")
      end
    module SourceControlInputBox =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x801 : Ojs.t) -> x801
        and t_to_js : t -> Ojs.t = fun (x800 : Ojs.t) -> x800
        let (focus : t -> unit) =
          fun (x802 : t) -> ignore (Ojs.call (t_to_js x802) "focus" [||])
        let (showValidationMessage :
          t ->
            message:string ->
              type_:SourceControlInputBoxValidationType.t -> unit)
          =
          fun (x805 : t) ->
            fun ~message:(x803 : string) ->
              fun ~type_:(x804 : SourceControlInputBoxValidationType.t) ->
                ignore
                  (Ojs.call (t_to_js x805) "showValidationMessage"
                     [|(Ojs.string_to_js x803);(SourceControlInputBoxValidationType.t_to_js
                                                  x804)|])
        let (validateInput :
          t ->
            value:string ->
              cursorPosition:int ->
                SourceControlInputBoxValidation.t ProviderResult.t)
          =
          fun (x808 : t) ->
            fun ~value:(x806 : string) ->
              fun ~cursorPosition:(x807 : int) ->
                ProviderResult.t_of_js
                  SourceControlInputBoxValidation.t_of_js
                  (Ojs.call (t_to_js x808) "validateInput"
                     [|(Ojs.string_to_js x806);(Ojs.int_to_js x807)|])
      end
    module SourceControl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x811 : Ojs.t) -> x811
        and t_to_js : t -> Ojs.t = fun (x810 : Ojs.t) -> x810
        let (selected : t -> bool) =
          fun (x812 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x812) "selected")
        let (onDidChangeSelection : t -> bool Event.t) =
          fun (x813 : t) ->
            Event.t_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x813) "onDidChangeSelection")
      end
    module DocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x816 : Ojs.t) -> x816
        and t_to_js : t -> Ojs.t = fun (x815 : Ojs.t) -> x815
        let (exclusive : t -> bool) =
          fun (x817 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x817) "exclusive")
      end
    module TreeView =
      struct
        include struct include Disposable end
        type 'T t = Disposable.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x819 : Ojs.t) -> Disposable.t_of_js x819
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x818 : Disposable.t) -> Disposable.t_to_js x818
        let (reveal :
          'T t ->
            element:'T or_undefined ->
              ?options:AnonymousInterface12.t -> unit -> unit Promise.t)
          =
          fun (x825 : 'T t) ->
            fun ~element:(x820 : 'T or_undefined) ->
              fun ?options:(x821 : AnonymousInterface12.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x827 = t_to_js Obj.magic x825 in
                     Ojs.call (Ojs.get_prop_ascii x827 "reveal") "apply"
                       [|x827;((let x822 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x822 "push"
                                     [|(or_undefined_to_js Obj.magic x820)|]);
                                (match x821 with
                                 | Some x823 ->
                                     ignore
                                       (Ojs.call x822 "push"
                                          [|(AnonymousInterface12.t_to_js
                                               x823)|])
                                 | None -> ());
                                x822))|])
      end
    module TaskPresentationOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x830 : Ojs.t) -> x830
        and t_to_js : t -> Ojs.t = fun (x829 : Ojs.t) -> x829
        let (group : t -> string) =
          fun (x831 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x831) "group")
        let (set_group : t -> string -> unit) =
          fun (x832 : t) ->
            fun (x833 : string) ->
              Ojs.set_prop_ascii (t_to_js x832) "group"
                (Ojs.string_to_js x833)
      end
    module StatusBarItemOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x835 : Ojs.t) -> x835
        and t_to_js : t -> Ojs.t = fun (x834 : Ojs.t) -> x834
        let (id : t -> string) =
          fun (x836 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x836) "id")
        let (set_id : t -> string -> unit) =
          fun (x837 : t) ->
            fun (x838 : string) ->
              Ojs.set_prop_ascii (t_to_js x837) "id" (Ojs.string_to_js x838)
        let (name : t -> string) =
          fun (x839 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x839) "name")
        let (set_name : t -> string -> unit) =
          fun (x840 : t) ->
            fun (x841 : string) ->
              Ojs.set_prop_ascii (t_to_js x840) "name"
                (Ojs.string_to_js x841)
        let (accessibilityInformation : t -> AccessibilityInformation.t) =
          fun (x842 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x842) "accessibilityInformation")
        let (set_accessibilityInformation :
          t -> AccessibilityInformation.t -> unit) =
          fun (x843 : t) ->
            fun (x844 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x843) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x844)
        let (alignment : t -> StatusBarAlignment.t) =
          fun (x845 : t) ->
            StatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x845) "alignment")
        let (set_alignment : t -> StatusBarAlignment.t -> unit) =
          fun (x846 : t) ->
            fun (x847 : StatusBarAlignment.t) ->
              Ojs.set_prop_ascii (t_to_js x846) "alignment"
                (StatusBarAlignment.t_to_js x847)
        let (priority : t -> int) =
          fun (x848 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x848) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x849 : t) ->
            fun (x850 : int) ->
              Ojs.set_prop_ascii (t_to_js x849) "priority"
                (Ojs.int_to_js x850)
      end
    module CustomTextEditorProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x852 : Ojs.t) -> x852
        and t_to_js : t -> Ojs.t = fun (x851 : Ojs.t) -> x851
        let (moveCustomTextEditor :
          t ->
            newDocument:TextDocument.t ->
              existingWebviewPanel:WebviewPanel.t ->
                token:CancellationToken.t -> unit Promise.t)
          =
          fun (x856 : t) ->
            fun ~newDocument:(x853 : TextDocument.t) ->
              fun ~existingWebviewPanel:(x854 : WebviewPanel.t) ->
                fun ~token:(x855 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js x856) "moveCustomTextEditor"
                       [|(TextDocument.t_to_js x853);(WebviewPanel.t_to_js
                                                        x854);(CancellationToken.t_to_js
                                                                 x855)|])
      end
    module QuickPick =
      struct
        include struct include QuickInput end
        type 'T t = QuickInput.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x859 : Ojs.t) -> QuickInput.t_of_js x859
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x858 : QuickInput.t) -> QuickInput.t_to_js x858
        let (sortByLabel : 'T t -> bool) =
          fun (x860 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x860) "sortByLabel")
        let (set_sortByLabel : 'T t -> bool -> unit) =
          fun (x862 : 'T t) ->
            fun (x863 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x862) "sortByLabel"
                (Ojs.bool_to_js x863)
      end
    module QuickPickOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x866 : Ojs.t) -> x866
        and t_to_js : t -> Ojs.t = fun (x865 : Ojs.t) -> x865
        let (title : t -> string) =
          fun (x867 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x867) "title")
        let (set_title : t -> string -> unit) =
          fun (x868 : t) ->
            fun (x869 : string) ->
              Ojs.set_prop_ascii (t_to_js x868) "title"
                (Ojs.string_to_js x869)
      end
    module InputBoxOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x871 : Ojs.t) -> x871
        and t_to_js : t -> Ojs.t = fun (x870 : Ojs.t) -> x870
        let (title : t -> string) =
          fun (x872 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x872) "title")
        let (set_title : t -> string -> unit) =
          fun (x873 : t) ->
            fun (x874 : string) ->
              Ojs.set_prop_ascii (t_to_js x873) "title"
                (Ojs.string_to_js x874)
      end
    module NotebookEditorRevealType =
      struct
        type t =
          [ `Default  | `InCenter  | `InCenterIfOutsideViewport  | `AtTop ]
        let rec t_of_js : Ojs.t -> t =
          fun (x876 : Ojs.t) ->
            let x877 = x876 in
            match Ojs.int_of_js x877 with
            | 0 -> `Default
            | 1 -> `InCenter
            | 2 -> `InCenterIfOutsideViewport
            | 3 -> `AtTop
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x875 :
              [ `Default  | `InCenter  | `InCenterIfOutsideViewport 
              | `AtTop ])
            ->
            match x875 with
            | `Default -> Ojs.int_to_js 0
            | `InCenter -> Ojs.int_to_js 1
            | `InCenterIfOutsideViewport -> Ojs.int_to_js 2
            | `AtTop -> Ojs.int_to_js 3
      end
    module NotebookCellData =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x879 : Ojs.t) -> x879
        and t_to_js : t -> Ojs.t = fun (x878 : Ojs.t) -> x878
        let (kind : t -> NotebookCellKind.t) =
          fun (x880 : t) ->
            NotebookCellKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x880) "kind")
        let (set_kind : t -> NotebookCellKind.t -> unit) =
          fun (x881 : t) ->
            fun (x882 : NotebookCellKind.t) ->
              Ojs.set_prop_ascii (t_to_js x881) "kind"
                (NotebookCellKind.t_to_js x882)
        let (source : t -> string) =
          fun (x883 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x883) "source")
        let (set_source : t -> string -> unit) =
          fun (x884 : t) ->
            fun (x885 : string) ->
              Ojs.set_prop_ascii (t_to_js x884) "source"
                (Ojs.string_to_js x885)
        let (language : t -> string) =
          fun (x886 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x886) "language")
        let (set_language : t -> string -> unit) =
          fun (x887 : t) ->
            fun (x888 : string) ->
              Ojs.set_prop_ascii (t_to_js x887) "language"
                (Ojs.string_to_js x888)
        let (outputs : t -> NotebookCellOutput.t list) =
          fun (x889 : t) ->
            Ojs.list_of_js NotebookCellOutput.t_of_js
              (Ojs.get_prop_ascii (t_to_js x889) "outputs")
        let (set_outputs : t -> NotebookCellOutput.t list -> unit) =
          fun (x891 : t) ->
            fun (x892 : NotebookCellOutput.t list) ->
              Ojs.set_prop_ascii (t_to_js x891) "outputs"
                (Ojs.list_to_js NotebookCellOutput.t_to_js x892)
        let (metadata : t -> NotebookCellMetadata.t) =
          fun (x894 : t) ->
            NotebookCellMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x894) "metadata")
        let (set_metadata : t -> NotebookCellMetadata.t -> unit) =
          fun (x895 : t) ->
            fun (x896 : NotebookCellMetadata.t) ->
              Ojs.set_prop_ascii (t_to_js x895) "metadata"
                (NotebookCellMetadata.t_to_js x896)
        let (latestExecutionSummary : t -> NotebookCellExecutionSummary.t) =
          fun (x897 : t) ->
            NotebookCellExecutionSummary.t_of_js
              (Ojs.get_prop_ascii (t_to_js x897) "latestExecutionSummary")
        let (set_latestExecutionSummary :
          t -> NotebookCellExecutionSummary.t -> unit) =
          fun (x898 : t) ->
            fun (x899 : NotebookCellExecutionSummary.t) ->
              Ojs.set_prop_ascii (t_to_js x898) "latestExecutionSummary"
                (NotebookCellExecutionSummary.t_to_js x899)
        let (create :
          kind:NotebookCellKind.t ->
            source:string ->
              language:string ->
                ?outputs:NotebookCellOutput.t list ->
                  ?metadata:NotebookCellMetadata.t ->
                    ?latestExecutionSummary:NotebookCellExecutionSummary.t ->
                      unit -> t)
          =
          fun ~kind:(x900 : NotebookCellKind.t) ->
            fun ~source:(x901 : string) ->
              fun ~language:(x902 : string) ->
                fun ?outputs:(x903 : NotebookCellOutput.t list option) ->
                  fun ?metadata:(x904 : NotebookCellMetadata.t option) ->
                    fun
                      ?latestExecutionSummary:(x905 :
                                                NotebookCellExecutionSummary.t
                                                  option)
                      ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii Ojs.global
                                   "__LIB__VSCODE__IMPORTS.vscode")
                                "NotebookCellData")
                             (let x906 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x906 "push"
                                   [|(NotebookCellKind.t_to_js x900)|]);
                              ignore
                                (Ojs.call x906 "push"
                                   [|(Ojs.string_to_js x901)|]);
                              ignore
                                (Ojs.call x906 "push"
                                   [|(Ojs.string_to_js x902)|]);
                              (match x903 with
                               | Some x909 ->
                                   ignore
                                     (Ojs.call x906 "push"
                                        [|(Ojs.list_to_js
                                             NotebookCellOutput.t_to_js x909)|])
                               | None -> ());
                              (match x904 with
                               | Some x908 ->
                                   ignore
                                     (Ojs.call x906 "push"
                                        [|(NotebookCellMetadata.t_to_js x908)|])
                               | None -> ());
                              (match x905 with
                               | Some x907 ->
                                   ignore
                                     (Ojs.call x906 "push"
                                        [|(NotebookCellExecutionSummary.t_to_js
                                             x907)|])
                               | None -> ());
                              x906))
      end
    module NotebookEditorEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x912 : Ojs.t) -> x912
        and t_to_js : t -> Ojs.t = fun (x911 : Ojs.t) -> x911
        let (replaceMetadata : t -> value:NotebookDocumentMetadata.t -> unit)
          =
          fun (x914 : t) ->
            fun ~value:(x913 : NotebookDocumentMetadata.t) ->
              ignore
                (Ojs.call (t_to_js x914) "replaceMetadata"
                   [|(NotebookDocumentMetadata.t_to_js x913)|])
        let (replaceCells :
          t -> start:int -> end_:int -> cells:NotebookCellData.t list -> unit)
          =
          fun (x919 : t) ->
            fun ~start:(x915 : int) ->
              fun ~end_:(x916 : int) ->
                fun ~cells:(x917 : NotebookCellData.t list) ->
                  ignore
                    (Ojs.call (t_to_js x919) "replaceCells"
                       [|(Ojs.int_to_js x915);(Ojs.int_to_js x916);(Ojs.list_to_js
                                                                    NotebookCellData.t_to_js
                                                                    x917)|])
        let (replaceCellOutput :
          t -> index:int -> outputs:NotebookCellOutput.t list -> unit) =
          fun (x923 : t) ->
            fun ~index:(x920 : int) ->
              fun ~outputs:(x921 : NotebookCellOutput.t list) ->
                ignore
                  (Ojs.call (t_to_js x923) "replaceCellOutput"
                     [|(Ojs.int_to_js x920);(Ojs.list_to_js
                                               NotebookCellOutput.t_to_js
                                               x921)|])
        let (replaceCellMetadata :
          t -> index:int -> metadata:NotebookCellMetadata.t -> unit) =
          fun (x926 : t) ->
            fun ~index:(x924 : int) ->
              fun ~metadata:(x925 : NotebookCellMetadata.t) ->
                ignore
                  (Ojs.call (t_to_js x926) "replaceCellMetadata"
                     [|(Ojs.int_to_js x924);(NotebookCellMetadata.t_to_js
                                               x925)|])
      end
    module NotebookEditorDecorationType =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x928 : Ojs.t) -> x928
        and t_to_js : t -> Ojs.t = fun (x927 : Ojs.t) -> x927
        let (key : t -> string) =
          fun (x929 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x929) "key")
        let (dispose : t -> unit) =
          fun (x930 : t) -> ignore (Ojs.call (t_to_js x930) "dispose" [||])
      end
    module NotebookEditor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x932 : Ojs.t) -> x932
        and t_to_js : t -> Ojs.t = fun (x931 : Ojs.t) -> x931
        let (setDecorations :
          t ->
            decorationType:NotebookEditorDecorationType.t ->
              range:NotebookCellRange.t -> unit)
          =
          fun (x935 : t) ->
            fun ~decorationType:(x933 : NotebookEditorDecorationType.t) ->
              fun ~range:(x934 : NotebookCellRange.t) ->
                ignore
                  (Ojs.call (t_to_js x935) "setDecorations"
                     [|(NotebookEditorDecorationType.t_to_js x933);(NotebookCellRange.t_to_js
                                                                    x934)|])
        let (kernel : t -> NotebookKernel.t) =
          fun (x936 : t) ->
            NotebookKernel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x936) "kernel")
        let (edit :
          t ->
            callback:(editBuilder:NotebookEditorEdit.t -> unit) ->
              bool Promise.t)
          =
          fun (x939 : t) ->
            fun ~callback:(x937 : editBuilder:NotebookEditorEdit.t -> unit)
              ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x939) "edit"
                   [|(Ojs.fun_to_js 1
                        (fun (x938 : Ojs.t) ->
                           x937
                             ~editBuilder:(NotebookEditorEdit.t_of_js x938)))|])
        let (document : t -> NotebookDocument.t) =
          fun (x941 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x941) "document")
        let (selection : t -> NotebookCell.t) =
          fun (x942 : t) ->
            NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x942) "selection")
        let (selections : t -> NotebookCellRange.t list) =
          fun (x943 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x943) "selections")
        let (visibleRanges : t -> NotebookCellRange.t list) =
          fun (x945 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x945) "visibleRanges")
        let (revealRange :
          t ->
            range:NotebookCellRange.t ->
              ?revealType:NotebookEditorRevealType.t -> unit -> unit)
          =
          fun (x951 : t) ->
            fun ~range:(x947 : NotebookCellRange.t) ->
              fun ?revealType:(x948 : NotebookEditorRevealType.t option) ->
                fun () ->
                  ignore
                    (let x952 = t_to_js x951 in
                     Ojs.call (Ojs.get_prop_ascii x952 "revealRange") "apply"
                       [|x952;((let x949 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x949 "push"
                                     [|(NotebookCellRange.t_to_js x947)|]);
                                (match x948 with
                                 | Some x950 ->
                                     ignore
                                       (Ojs.call x949 "push"
                                          [|(NotebookEditorRevealType.t_to_js
                                               x950)|])
                                 | None -> ());
                                x949))|])
        let (viewColumn : t -> ViewColumn.t) =
          fun (x953 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x953) "viewColumn")
      end
    module NotebookDocumentMetadataChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x955 : Ojs.t) -> x955
        and t_to_js : t -> Ojs.t = fun (x954 : Ojs.t) -> x954
        let (document : t -> NotebookDocument.t) =
          fun (x956 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x956) "document")
      end
    module NotebookCellsChangeData =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x958 : Ojs.t) -> x958
        and t_to_js : t -> Ojs.t = fun (x957 : Ojs.t) -> x957
        let (start : t -> int) =
          fun (x959 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x959) "start")
        let (deletedCount : t -> int) =
          fun (x960 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x960) "deletedCount")
        let (deletedItems : t -> NotebookCell.t list) =
          fun (x961 : t) ->
            Ojs.list_of_js NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x961) "deletedItems")
        let (items : t -> NotebookCell.t list) =
          fun (x963 : t) ->
            Ojs.list_of_js NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x963) "items")
      end
    module NotebookCellsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x966 : Ojs.t) -> x966
        and t_to_js : t -> Ojs.t = fun (x965 : Ojs.t) -> x965
        let (document : t -> NotebookDocument.t) =
          fun (x967 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x967) "document")
        let (changes : t -> NotebookCellsChangeData.t list) =
          fun (x968 : t) ->
            Ojs.list_of_js NotebookCellsChangeData.t_of_js
              (Ojs.get_prop_ascii (t_to_js x968) "changes")
      end
    module NotebookCellOutputsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x971 : Ojs.t) -> x971
        and t_to_js : t -> Ojs.t = fun (x970 : Ojs.t) -> x970
        let (document : t -> NotebookDocument.t) =
          fun (x972 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x972) "document")
        let (cells : t -> NotebookCell.t list) =
          fun (x973 : t) ->
            Ojs.list_of_js NotebookCell.t_of_js
              (Ojs.get_prop_ascii (t_to_js x973) "cells")
      end
    module NotebookCellMetadataChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x976 : Ojs.t) -> x976
        and t_to_js : t -> Ojs.t = fun (x975 : Ojs.t) -> x975
        let (document : t -> NotebookDocument.t) =
          fun (x977 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x977) "document")
        let (cell : t -> NotebookCell.t) =
          fun (x978 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x978) "cell")
      end
    module NotebookEditorSelectionChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x980 : Ojs.t) -> x980
        and t_to_js : t -> Ojs.t = fun (x979 : Ojs.t) -> x979
        let (notebookEditor : t -> NotebookEditor.t) =
          fun (x981 : t) ->
            NotebookEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x981) "notebookEditor")
        let (selections : t -> NotebookCellRange.t list) =
          fun (x982 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x982) "selections")
      end
    module NotebookEditorVisibleRangesChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x985 : Ojs.t) -> x985
        and t_to_js : t -> Ojs.t = fun (x984 : Ojs.t) -> x984
        let (notebookEditor : t -> NotebookEditor.t) =
          fun (x986 : t) ->
            NotebookEditor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x986) "notebookEditor")
        let (visibleRanges : t -> NotebookCellRange.t list) =
          fun (x987 : t) ->
            Ojs.list_of_js NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x987) "visibleRanges")
      end
    module NotebookCellExecutionState =
      struct
        type t = [ `Idle  | `Pending  | `Executing ]
        let rec t_of_js : Ojs.t -> t =
          fun (x990 : Ojs.t) ->
            let x991 = x990 in
            match Ojs.int_of_js x991 with
            | 1 -> `Idle
            | 2 -> `Pending
            | 3 -> `Executing
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x989 : [ `Idle  | `Pending  | `Executing ]) ->
            match x989 with
            | `Idle -> Ojs.int_to_js 1
            | `Pending -> Ojs.int_to_js 2
            | `Executing -> Ojs.int_to_js 3
      end
    module NotebookCellExecutionStateChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x993 : Ojs.t) -> x993
        and t_to_js : t -> Ojs.t = fun (x992 : Ojs.t) -> x992
        let (document : t -> NotebookDocument.t) =
          fun (x994 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x994) "document")
        let (cell : t -> NotebookCell.t) =
          fun (x995 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x995) "cell")
        let (executionState : t -> NotebookCellExecutionState.t) =
          fun (x996 : t) ->
            NotebookCellExecutionState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x996) "executionState")
      end
    module NotebookData =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x998 : Ojs.t) -> x998
        and t_to_js : t -> Ojs.t = fun (x997 : Ojs.t) -> x997
        let (cells : t -> NotebookCellData.t list) =
          fun (x999 : t) ->
            Ojs.list_of_js NotebookCellData.t_of_js
              (Ojs.get_prop_ascii (t_to_js x999) "cells")
        let (set_cells : t -> NotebookCellData.t list -> unit) =
          fun (x1001 : t) ->
            fun (x1002 : NotebookCellData.t list) ->
              Ojs.set_prop_ascii (t_to_js x1001) "cells"
                (Ojs.list_to_js NotebookCellData.t_to_js x1002)
        let (metadata : t -> NotebookDocumentMetadata.t) =
          fun (x1004 : t) ->
            NotebookDocumentMetadata.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1004) "metadata")
        let (set_metadata : t -> NotebookDocumentMetadata.t -> unit) =
          fun (x1005 : t) ->
            fun (x1006 : NotebookDocumentMetadata.t) ->
              Ojs.set_prop_ascii (t_to_js x1005) "metadata"
                (NotebookDocumentMetadata.t_to_js x1006)
        let (create :
          cells:NotebookCellData.t list ->
            ?metadata:NotebookDocumentMetadata.t -> unit -> t)
          =
          fun ~cells:(x1007 : NotebookCellData.t list) ->
            fun ?metadata:(x1008 : NotebookDocumentMetadata.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS.vscode") "NotebookData")
                     (let x1009 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x1009 "push"
                           [|(Ojs.list_to_js NotebookCellData.t_to_js x1007)|]);
                      (match x1008 with
                       | Some x1010 ->
                           ignore
                             (Ojs.call x1009 "push"
                                [|(NotebookDocumentMetadata.t_to_js x1010)|])
                       | None -> ());
                      x1009))
      end
    module NotebookCommunication =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1013 : Ojs.t) -> x1013
        and t_to_js : t -> Ojs.t = fun (x1012 : Ojs.t) -> x1012
        let (editorId : t -> string) =
          fun (x1014 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1014) "editorId")
        let (onDidReceiveMessage : t -> any Event.t) =
          fun (x1015 : t) ->
            Event.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x1015) "onDidReceiveMessage")
        let (postMessage : t -> message:any -> bool Promise.t) =
          fun (x1018 : t) ->
            fun ~message:(x1017 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x1018) "postMessage" [|(any_to_js x1017)|])
        let (asWebviewUri : t -> localResource:Uri.t -> Uri.t) =
          fun (x1021 : t) ->
            fun ~localResource:(x1020 : Uri.t) ->
              Uri.t_of_js
                (Ojs.call (t_to_js x1021) "asWebviewUri"
                   [|(Uri.t_to_js x1020)|])
      end
    module NotebookDocumentShowOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1023 : Ojs.t) -> x1023
        and t_to_js : t -> Ojs.t = fun (x1022 : Ojs.t) -> x1022
        let (viewColumn : t -> ViewColumn.t) =
          fun (x1024 : t) ->
            ViewColumn.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1024) "viewColumn")
        let (set_viewColumn : t -> ViewColumn.t -> unit) =
          fun (x1025 : t) ->
            fun (x1026 : ViewColumn.t) ->
              Ojs.set_prop_ascii (t_to_js x1025) "viewColumn"
                (ViewColumn.t_to_js x1026)
        let (preserveFocus : t -> bool) =
          fun (x1027 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1027) "preserveFocus")
        let (set_preserveFocus : t -> bool -> unit) =
          fun (x1028 : t) ->
            fun (x1029 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1028) "preserveFocus"
                (Ojs.bool_to_js x1029)
        let (preview : t -> bool) =
          fun (x1030 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1030) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x1031 : t) ->
            fun (x1032 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1031) "preview"
                (Ojs.bool_to_js x1032)
        let (selection : t -> NotebookCellRange.t) =
          fun (x1033 : t) ->
            NotebookCellRange.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1033) "selection")
        let (set_selection : t -> NotebookCellRange.t -> unit) =
          fun (x1034 : t) ->
            fun (x1035 : NotebookCellRange.t) ->
              Ojs.set_prop_ascii (t_to_js x1034) "selection"
                (NotebookCellRange.t_to_js x1035)
      end
    module NotebookSerializer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1037 : Ojs.t) -> x1037
        and t_to_js : t -> Ojs.t = fun (x1036 : Ojs.t) -> x1036
        let (dataToNotebook :
          t ->
            data:Uint8Array.t ->
              (NotebookData.t, NotebookData.t Promise.t) union2)
          =
          fun (x1039 : t) ->
            fun ~data:(x1038 : Uint8Array.t) ->
              union2_of_js NotebookData.t_of_js
                (fun (x1041 : Ojs.t) ->
                   Promise.t_of_js NotebookData.t_of_js x1041)
                (Ojs.call (t_to_js x1039) "dataToNotebook"
                   [|(Uint8Array.t_to_js x1038)|])
        let (notebookToData :
          t ->
            data:NotebookData.t ->
              (Uint8Array.t, Uint8Array.t Promise.t) union2)
          =
          fun (x1044 : t) ->
            fun ~data:(x1043 : NotebookData.t) ->
              union2_of_js Uint8Array.t_of_js
                (fun (x1046 : Ojs.t) ->
                   Promise.t_of_js Uint8Array.t_of_js x1046)
                (Ojs.call (t_to_js x1044) "notebookToData"
                   [|(NotebookData.t_to_js x1043)|])
      end
    module NotebookFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1049 : Ojs.t) -> x1049
        and t_to_js : t -> Ojs.t = fun (x1048 : Ojs.t) -> x1048
        let (viewType : t -> string) =
          fun (x1050 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1050) "viewType")
        let (scheme : t -> string) =
          fun (x1051 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1051) "scheme")
        let (pattern : t -> GlobPattern.t) =
          fun (x1052 : t) ->
            GlobPattern.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1052) "pattern")
      end
    module NotebookSelector =
      struct
        type t =
          (NotebookFilter.t, NotebookFilter.t or_string list) union2
            or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x1059 : Ojs.t) ->
            or_string_of_js
              (fun (x1060 : Ojs.t) ->
                 union2_of_js NotebookFilter.t_of_js
                   (fun (x1062 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x1063 : Ojs.t) ->
                           or_string_of_js NotebookFilter.t_of_js x1063)
                        x1062) x1060) x1059
        and t_to_js : t -> Ojs.t =
          fun
            (x1053 :
              (NotebookFilter.t, NotebookFilter.t or_string list) union2
                or_string)
            ->
            or_string_to_js
              (fun
                 (x1054 :
                   (NotebookFilter.t, NotebookFilter.t or_string list) union2)
                 ->
                 union2_to_js NotebookFilter.t_to_js
                   (fun (x1056 : NotebookFilter.t or_string list) ->
                      Ojs.list_to_js
                        (fun (x1057 : NotebookFilter.t or_string) ->
                           or_string_to_js NotebookFilter.t_to_js x1057)
                        x1056) x1054) x1053
      end
    module NotebookCellExecuteStartContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1066 : Ojs.t) -> x1066
        and t_to_js : t -> Ojs.t = fun (x1065 : Ojs.t) -> x1065
        let (startTime : t -> int) =
          fun (x1067 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1067) "startTime")
        let (set_startTime : t -> int -> unit) =
          fun (x1068 : t) ->
            fun (x1069 : int) ->
              Ojs.set_prop_ascii (t_to_js x1068) "startTime"
                (Ojs.int_to_js x1069)
      end
    module NotebookCellExecuteEndContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1071 : Ojs.t) -> x1071
        and t_to_js : t -> Ojs.t = fun (x1070 : Ojs.t) -> x1070
        let (success : t -> bool) =
          fun (x1072 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1072) "success")
        let (set_success : t -> bool -> unit) =
          fun (x1073 : t) ->
            fun (x1074 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1073) "success"
                (Ojs.bool_to_js x1074)
        let (duration : t -> int) =
          fun (x1075 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1075) "duration")
        let (set_duration : t -> int -> unit) =
          fun (x1076 : t) ->
            fun (x1077 : int) ->
              Ojs.set_prop_ascii (t_to_js x1076) "duration"
                (Ojs.int_to_js x1077)
      end
    module NotebookCellExecutionTask =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1079 : Ojs.t) -> x1079
        and t_to_js : t -> Ojs.t = fun (x1078 : Ojs.t) -> x1078
        let (document : t -> NotebookDocument.t) =
          fun (x1080 : t) ->
            NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1080) "document")
        let (cell : t -> NotebookCell.t) =
          fun (x1081 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x1081) "cell")
        let (start :
          t -> ?context:NotebookCellExecuteStartContext.t -> unit -> unit) =
          fun (x1085 : t) ->
            fun ?context:(x1082 : NotebookCellExecuteStartContext.t option)
              ->
              fun () ->
                ignore
                  (let x1086 = t_to_js x1085 in
                   Ojs.call (Ojs.get_prop_ascii x1086 "start") "apply"
                     [|x1086;((let x1083 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1082 with
                                | Some x1084 ->
                                    ignore
                                      (Ojs.call x1083 "push"
                                         [|(NotebookCellExecuteStartContext.t_to_js
                                              x1084)|])
                                | None -> ());
                               x1083))|])
        let (executionOrder : t -> int or_undefined) =
          fun (x1087 : t) ->
            or_undefined_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1087) "executionOrder")
        let (set_executionOrder : t -> int or_undefined -> unit) =
          fun (x1089 : t) ->
            fun (x1090 : int or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1089) "executionOrder"
                (or_undefined_to_js Ojs.int_to_js x1090)
        let (end_ :
          t -> ?result:NotebookCellExecuteEndContext.t -> unit -> unit) =
          fun (x1095 : t) ->
            fun ?result:(x1092 : NotebookCellExecuteEndContext.t option) ->
              fun () ->
                ignore
                  (let x1096 = t_to_js x1095 in
                   Ojs.call (Ojs.get_prop_ascii x1096 "end") "apply"
                     [|x1096;((let x1093 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1092 with
                                | Some x1094 ->
                                    ignore
                                      (Ojs.call x1093 "push"
                                         [|(NotebookCellExecuteEndContext.t_to_js
                                              x1094)|])
                                | None -> ());
                               x1093))|])
        let (token : t -> CancellationToken.t) =
          fun (x1097 : t) ->
            CancellationToken.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1097) "token")
        let (clearOutput : t -> ?cellIndex:int -> unit -> unit Promise.t) =
          fun (x1101 : t) ->
            fun ?cellIndex:(x1098 : int option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1102 = t_to_js x1101 in
                   Ojs.call (Ojs.get_prop_ascii x1102 "clearOutput") "apply"
                     [|x1102;((let x1099 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1098 with
                                | Some x1100 ->
                                    ignore
                                      (Ojs.call x1099 "push"
                                         [|(Ojs.int_to_js x1100)|])
                                | None -> ());
                               x1099))|])
        let (appendOutput :
          t ->
            out:(NotebookCellOutput.t, NotebookCellOutput.t) or_array ->
              ?cellIndex:int -> unit -> unit Promise.t)
          =
          fun (x1110 : t) ->
            fun
              ~out:(x1104 :
                     (NotebookCellOutput.t, NotebookCellOutput.t) or_array)
              ->
              fun ?cellIndex:(x1105 : int option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1111 = t_to_js x1110 in
                     Ojs.call (Ojs.get_prop_ascii x1111 "appendOutput")
                       "apply"
                       [|x1111;((let x1106 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1106 "push"
                                      [|(or_array_to_js
                                           NotebookCellOutput.t_to_js
                                           NotebookCellOutput.t_to_js x1104)|]);
                                 (match x1105 with
                                  | Some x1107 ->
                                      ignore
                                        (Ojs.call x1106 "push"
                                           [|(Ojs.int_to_js x1107)|])
                                  | None -> ());
                                 x1106))|])
        let (replaceOutput :
          t ->
            out:(NotebookCellOutput.t, NotebookCellOutput.t) or_array ->
              ?cellIndex:int -> unit -> unit Promise.t)
          =
          fun (x1119 : t) ->
            fun
              ~out:(x1113 :
                     (NotebookCellOutput.t, NotebookCellOutput.t) or_array)
              ->
              fun ?cellIndex:(x1114 : int option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1120 = t_to_js x1119 in
                     Ojs.call (Ojs.get_prop_ascii x1120 "replaceOutput")
                       "apply"
                       [|x1120;((let x1115 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1115 "push"
                                      [|(or_array_to_js
                                           NotebookCellOutput.t_to_js
                                           NotebookCellOutput.t_to_js x1113)|]);
                                 (match x1114 with
                                  | Some x1116 ->
                                      ignore
                                        (Ojs.call x1115 "push"
                                           [|(Ojs.int_to_js x1116)|])
                                  | None -> ());
                                 x1115))|])
        let (appendOutputItems :
          t ->
            items:(NotebookCellOutputItem.t, NotebookCellOutputItem.t)
              or_array -> outputId:string -> unit Promise.t)
          =
          fun (x1126 : t) ->
            fun
              ~items:(x1122 :
                       (NotebookCellOutputItem.t, NotebookCellOutputItem.t)
                         or_array)
              ->
              fun ~outputId:(x1125 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x1126) "appendOutputItems"
                     [|(or_array_to_js NotebookCellOutputItem.t_to_js
                          NotebookCellOutputItem.t_to_js x1122);(Ojs.string_to_js
                                                                   x1125)|])
        let (replaceOutputItems :
          t ->
            items:(NotebookCellOutputItem.t, NotebookCellOutputItem.t)
              or_array -> outputId:string -> unit Promise.t)
          =
          fun (x1132 : t) ->
            fun
              ~items:(x1128 :
                       (NotebookCellOutputItem.t, NotebookCellOutputItem.t)
                         or_array)
              ->
              fun ~outputId:(x1131 : string) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x1132) "replaceOutputItems"
                     [|(or_array_to_js NotebookCellOutputItem.t_to_js
                          NotebookCellOutputItem.t_to_js x1128);(Ojs.string_to_js
                                                                   x1131)|])
      end
    module NotebookDecorationRenderOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1135 : Ojs.t) -> x1135
        and t_to_js : t -> Ojs.t = fun (x1134 : Ojs.t) -> x1134
        let (backgroundColor : t -> ThemeColor.t or_string) =
          fun (x1136 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1136) "backgroundColor")
        let (set_backgroundColor : t -> ThemeColor.t or_string -> unit) =
          fun (x1138 : t) ->
            fun (x1139 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1138) "backgroundColor"
                (or_string_to_js ThemeColor.t_to_js x1139)
        let (borderColor : t -> ThemeColor.t or_string) =
          fun (x1141 : t) ->
            or_string_of_js ThemeColor.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1141) "borderColor")
        let (set_borderColor : t -> ThemeColor.t or_string -> unit) =
          fun (x1143 : t) ->
            fun (x1144 : ThemeColor.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1143) "borderColor"
                (or_string_to_js ThemeColor.t_to_js x1144)
        let (top : t -> ThemableDecorationAttachmentRenderOptions.t) =
          fun (x1146 : t) ->
            ThemableDecorationAttachmentRenderOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1146) "top")
        let (set_top :
          t -> ThemableDecorationAttachmentRenderOptions.t -> unit) =
          fun (x1147 : t) ->
            fun (x1148 : ThemableDecorationAttachmentRenderOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1147) "top"
                (ThemableDecorationAttachmentRenderOptions.t_to_js x1148)
      end
    module NotebookKernelOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1150 : Ojs.t) -> x1150
        and t_to_js : t -> Ojs.t = fun (x1149 : Ojs.t) -> x1149
        let (id : t -> string) =
          fun (x1151 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1151) "id")
        let (set_id : t -> string -> unit) =
          fun (x1152 : t) ->
            fun (x1153 : string) ->
              Ojs.set_prop_ascii (t_to_js x1152) "id"
                (Ojs.string_to_js x1153)
        let (label : t -> string) =
          fun (x1154 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1154) "label")
        let (set_label : t -> string -> unit) =
          fun (x1155 : t) ->
            fun (x1156 : string) ->
              Ojs.set_prop_ascii (t_to_js x1155) "label"
                (Ojs.string_to_js x1156)
        let (description : t -> string) =
          fun (x1157 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1157) "description")
        let (set_description : t -> string -> unit) =
          fun (x1158 : t) ->
            fun (x1159 : string) ->
              Ojs.set_prop_ascii (t_to_js x1158) "description"
                (Ojs.string_to_js x1159)
        let (selector : t -> NotebookSelector.t) =
          fun (x1160 : t) ->
            NotebookSelector.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1160) "selector")
        let (set_selector : t -> NotebookSelector.t -> unit) =
          fun (x1161 : t) ->
            fun (x1162 : NotebookSelector.t) ->
              Ojs.set_prop_ascii (t_to_js x1161) "selector"
                (NotebookSelector.t_to_js x1162)
        let (supportedLanguages : t -> string list) =
          fun (x1163 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1163) "supportedLanguages")
        let (set_supportedLanguages : t -> string list -> unit) =
          fun (x1165 : t) ->
            fun (x1166 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1165) "supportedLanguages"
                (Ojs.list_to_js Ojs.string_to_js x1166)
        let (hasExecutionOrder : t -> bool) =
          fun (x1168 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1168) "hasExecutionOrder")
        let (set_hasExecutionOrder : t -> bool -> unit) =
          fun (x1169 : t) ->
            fun (x1170 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1169) "hasExecutionOrder"
                (Ojs.bool_to_js x1170)
        let (executeHandler :
          t -> executions:NotebookCellExecutionTask.t list -> unit) =
          fun (x1173 : t) ->
            fun ~executions:(x1171 : NotebookCellExecutionTask.t list) ->
              ignore
                (Ojs.call (t_to_js x1173) "executeHandler"
                   [|(Ojs.list_to_js NotebookCellExecutionTask.t_to_js x1171)|])
        let (interruptHandler : t -> notebook:NotebookDocument.t -> unit) =
          fun (x1175 : t) ->
            fun ~notebook:(x1174 : NotebookDocument.t) ->
              ignore
                (Ojs.call (t_to_js x1175) "interruptHandler"
                   [|(NotebookDocument.t_to_js x1174)|])
      end
    module NotebookKernel2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1177 : Ojs.t) -> x1177
        and t_to_js : t -> Ojs.t = fun (x1176 : Ojs.t) -> x1176
        let (id : t -> string) =
          fun (x1178 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1178) "id")
        let (selector : t -> NotebookSelector.t) =
          fun (x1179 : t) ->
            NotebookSelector.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1179) "selector")
        let (label : t -> string) =
          fun (x1180 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1180) "label")
        let (set_label : t -> string -> unit) =
          fun (x1181 : t) ->
            fun (x1182 : string) ->
              Ojs.set_prop_ascii (t_to_js x1181) "label"
                (Ojs.string_to_js x1182)
        let (description : t -> string) =
          fun (x1183 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1183) "description")
        let (set_description : t -> string -> unit) =
          fun (x1184 : t) ->
            fun (x1185 : string) ->
              Ojs.set_prop_ascii (t_to_js x1184) "description"
                (Ojs.string_to_js x1185)
        let (supportedLanguages : t -> string list) =
          fun (x1186 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1186) "supportedLanguages")
        let (set_supportedLanguages : t -> string list -> unit) =
          fun (x1188 : t) ->
            fun (x1189 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1188) "supportedLanguages"
                (Ojs.list_to_js Ojs.string_to_js x1189)
        let (hasExecutionOrder : t -> bool) =
          fun (x1191 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1191) "hasExecutionOrder")
        let (set_hasExecutionOrder : t -> bool -> unit) =
          fun (x1192 : t) ->
            fun (x1193 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1192) "hasExecutionOrder"
                (Ojs.bool_to_js x1193)
        let (executeHandler :
          t -> executions:NotebookCellExecutionTask.t list -> unit) =
          fun (x1196 : t) ->
            fun ~executions:(x1194 : NotebookCellExecutionTask.t list) ->
              ignore
                (Ojs.call (t_to_js x1196) "executeHandler"
                   [|(Ojs.list_to_js NotebookCellExecutionTask.t_to_js x1194)|])
        let (interruptHandler : t -> notebook:NotebookDocument.t -> unit) =
          fun (x1198 : t) ->
            fun ~notebook:(x1197 : NotebookDocument.t) ->
              ignore
                (Ojs.call (t_to_js x1198) "interruptHandler"
                   [|(NotebookDocument.t_to_js x1197)|])
        let (dispose : t -> unit) =
          fun (x1199 : t) -> ignore (Ojs.call (t_to_js x1199) "dispose" [||])
        let (createNotebookCellExecutionTask :
          t -> cell:NotebookCell.t -> NotebookCellExecutionTask.t) =
          fun (x1201 : t) ->
            fun ~cell:(x1200 : NotebookCell.t) ->
              NotebookCellExecutionTask.t_of_js
                (Ojs.call (t_to_js x1201) "createNotebookCellExecutionTask"
                   [|(NotebookCell.t_to_js x1200)|])
      end
    module NotebookDocumentBackup =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1203 : Ojs.t) -> x1203
        and t_to_js : t -> Ojs.t = fun (x1202 : Ojs.t) -> x1202
        let (id : t -> string) =
          fun (x1204 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1204) "id")
        let (delete : t -> unit) =
          fun (x1205 : t) -> ignore (Ojs.call (t_to_js x1205) "delete" [||])
      end
    module NotebookDocumentBackupContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1207 : Ojs.t) -> x1207
        and t_to_js : t -> Ojs.t = fun (x1206 : Ojs.t) -> x1206
        let (destination : t -> Uri.t) =
          fun (x1208 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1208) "destination")
      end
    module NotebookDocumentOpenContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1210 : Ojs.t) -> x1210
        and t_to_js : t -> Ojs.t = fun (x1209 : Ojs.t) -> x1209
        let (backupId : t -> string) =
          fun (x1211 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1211) "backupId")
        let (untitledDocumentData : t -> Uint8Array.t) =
          fun (x1212 : t) ->
            Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1212) "untitledDocumentData")
      end
    module NotebookContentProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1214 : Ojs.t) -> x1214
        and t_to_js : t -> Ojs.t = fun (x1213 : Ojs.t) -> x1213
        let (options : t -> NotebookDocumentContentOptions.t) =
          fun (x1215 : t) ->
            NotebookDocumentContentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1215) "options")
        let (onDidChangeNotebookContentOptions :
          t -> NotebookDocumentContentOptions.t Event.t) =
          fun (x1216 : t) ->
            Event.t_of_js NotebookDocumentContentOptions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1216)
                 "onDidChangeNotebookContentOptions")
        let (openNotebook :
          t ->
            uri:Uri.t ->
              openContext:NotebookDocumentOpenContext.t ->
                token:CancellationToken.t ->
                  (NotebookData.t, NotebookData.t Promise.t) union2)
          =
          fun (x1221 : t) ->
            fun ~uri:(x1218 : Uri.t) ->
              fun ~openContext:(x1219 : NotebookDocumentOpenContext.t) ->
                fun ~token:(x1220 : CancellationToken.t) ->
                  union2_of_js NotebookData.t_of_js
                    (fun (x1223 : Ojs.t) ->
                       Promise.t_of_js NotebookData.t_of_js x1223)
                    (Ojs.call (t_to_js x1221) "openNotebook"
                       [|(Uri.t_to_js x1218);(NotebookDocumentOpenContext.t_to_js
                                                x1219);(CancellationToken.t_to_js
                                                          x1220)|])
        let (saveNotebook :
          t ->
            document:NotebookDocument.t ->
              token:CancellationToken.t -> unit Promise.t)
          =
          fun (x1227 : t) ->
            fun ~document:(x1225 : NotebookDocument.t) ->
              fun ~token:(x1226 : CancellationToken.t) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x1227) "saveNotebook"
                     [|(NotebookDocument.t_to_js x1225);(CancellationToken.t_to_js
                                                           x1226)|])
        let (saveNotebookAs :
          t ->
            targetResource:Uri.t ->
              document:NotebookDocument.t ->
                token:CancellationToken.t -> unit Promise.t)
          =
          fun (x1232 : t) ->
            fun ~targetResource:(x1229 : Uri.t) ->
              fun ~document:(x1230 : NotebookDocument.t) ->
                fun ~token:(x1231 : CancellationToken.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js x1232) "saveNotebookAs"
                       [|(Uri.t_to_js x1229);(NotebookDocument.t_to_js x1230);(
                         CancellationToken.t_to_js x1231)|])
        let (backupNotebook :
          t ->
            document:NotebookDocument.t ->
              context:NotebookDocumentBackupContext.t ->
                token:CancellationToken.t ->
                  NotebookDocumentBackup.t Promise.t)
          =
          fun (x1237 : t) ->
            fun ~document:(x1234 : NotebookDocument.t) ->
              fun ~context:(x1235 : NotebookDocumentBackupContext.t) ->
                fun ~token:(x1236 : CancellationToken.t) ->
                  Promise.t_of_js NotebookDocumentBackup.t_of_js
                    (Ojs.call (t_to_js x1237) "backupNotebook"
                       [|(NotebookDocument.t_to_js x1234);(NotebookDocumentBackupContext.t_to_js
                                                             x1235);(
                         CancellationToken.t_to_js x1236)|])
      end
    module NotebookDocumentFilter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1240 : Ojs.t) -> x1240
        and t_to_js : t -> Ojs.t = fun (x1239 : Ojs.t) -> x1239
        let (viewType : t -> string list or_string) =
          fun (x1241 : t) ->
            or_string_of_js
              (fun (x1242 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x1242)
              (Ojs.get_prop_ascii (t_to_js x1241) "viewType")
        let (set_viewType : t -> string list or_string -> unit) =
          fun (x1244 : t) ->
            fun (x1245 : string list or_string) ->
              Ojs.set_prop_ascii (t_to_js x1244) "viewType"
                (or_string_to_js
                   (fun (x1246 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x1246) x1245)
        let (filenamePattern : t -> NotebookFilenamePattern.t) =
          fun (x1248 : t) ->
            NotebookFilenamePattern.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1248) "filenamePattern")
        let (set_filenamePattern : t -> NotebookFilenamePattern.t -> unit) =
          fun (x1249 : t) ->
            fun (x1250 : NotebookFilenamePattern.t) ->
              Ojs.set_prop_ascii (t_to_js x1249) "filenamePattern"
                (NotebookFilenamePattern.t_to_js x1250)
      end
    module NotebookKernelProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1252 : Ojs.t) -> x1252
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1251 : Ojs.t) -> x1251
        type t_0 = NotebookKernel.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1255 : Ojs.t) -> t_of_js NotebookKernel.t_of_js x1255
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1253 : NotebookKernel.t t) ->
            t_to_js NotebookKernel.t_to_js x1253
        let (onDidChangeKernels :
          'T t -> NotebookDocument.t or_undefined Event.t) =
          fun (x1257 : 'T t) ->
            Event.t_of_js
              (fun (x1259 : Ojs.t) ->
                 or_undefined_of_js NotebookDocument.t_of_js x1259)
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1257)
                 "onDidChangeKernels")
        let (set_onDidChangeKernels :
          'T t -> NotebookDocument.t or_undefined Event.t -> unit) =
          fun (x1261 : 'T t) ->
            fun (x1262 : NotebookDocument.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1261)
                "onDidChangeKernels"
                (Event.t_to_js
                   (fun (x1263 : NotebookDocument.t or_undefined) ->
                      or_undefined_to_js NotebookDocument.t_to_js x1263)
                   x1262)
        let (provideKernels :
          'T t ->
            document:NotebookDocument.t ->
              token:CancellationToken.t -> 'T list ProviderResult.t)
          =
          fun (x1268 : 'T t) ->
            fun ~document:(x1266 : NotebookDocument.t) ->
              fun ~token:(x1267 : CancellationToken.t) ->
                ProviderResult.t_of_js
                  (fun (x1270 : Ojs.t) -> Ojs.list_of_js Obj.magic x1270)
                  (Ojs.call (t_to_js Obj.magic x1268) "provideKernels"
                     [|(NotebookDocument.t_to_js x1266);(CancellationToken.t_to_js
                                                           x1267)|])
        let (resolveKernel :
          'T t ->
            kernel:'T ->
              document:NotebookDocument.t ->
                webview:NotebookCommunication.t ->
                  token:CancellationToken.t -> unit ProviderResult.t)
          =
          fun (x1276 : 'T t) ->
            fun ~kernel:(x1272 : 'T) ->
              fun ~document:(x1273 : NotebookDocument.t) ->
                fun ~webview:(x1274 : NotebookCommunication.t) ->
                  fun ~token:(x1275 : CancellationToken.t) ->
                    ProviderResult.t_of_js Ojs.unit_of_js
                      (Ojs.call (t_to_js Obj.magic x1276) "resolveKernel"
                         [|(Obj.magic x1272);(NotebookDocument.t_to_js x1273);(
                           NotebookCommunication.t_to_js x1274);(CancellationToken.t_to_js
                                                                   x1275)|])
      end
    module NotebookCellStatusBarAlignment =
      struct
        type t = [ `Left  | `Right ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1280 : Ojs.t) ->
            let x1281 = x1280 in
            match Ojs.int_of_js x1281 with
            | 1 -> `Left
            | 2 -> `Right
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1279 : [ `Left  | `Right ]) ->
            match x1279 with
            | `Left -> Ojs.int_to_js 1
            | `Right -> Ojs.int_to_js 2
      end
    module NotebookCellStatusBarItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1283 : Ojs.t) -> x1283
        and t_to_js : t -> Ojs.t = fun (x1282 : Ojs.t) -> x1282
        let (cell : t -> NotebookCell.t) =
          fun (x1284 : t) ->
            NotebookCell.t_of_js (Ojs.get_prop_ascii (t_to_js x1284) "cell")
        let (alignment : t -> NotebookCellStatusBarAlignment.t) =
          fun (x1285 : t) ->
            NotebookCellStatusBarAlignment.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1285) "alignment")
        let (priority : t -> int) =
          fun (x1286 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1286) "priority")
        let (text : t -> string) =
          fun (x1287 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1287) "text")
        let (set_text : t -> string -> unit) =
          fun (x1288 : t) ->
            fun (x1289 : string) ->
              Ojs.set_prop_ascii (t_to_js x1288) "text"
                (Ojs.string_to_js x1289)
        let (tooltip : t -> string or_undefined) =
          fun (x1290 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1290) "tooltip")
        let (set_tooltip : t -> string or_undefined -> unit) =
          fun (x1292 : t) ->
            fun (x1293 : string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1292) "tooltip"
                (or_undefined_to_js Ojs.string_to_js x1293)
        let (command : t -> Command.t or_string or_undefined) =
          fun (x1295 : t) ->
            or_undefined_of_js
              (fun (x1296 : Ojs.t) -> or_string_of_js Command.t_of_js x1296)
              (Ojs.get_prop_ascii (t_to_js x1295) "command")
        let (set_command : t -> Command.t or_string or_undefined -> unit) =
          fun (x1298 : t) ->
            fun (x1299 : Command.t or_string or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1298) "command"
                (or_undefined_to_js
                   (fun (x1300 : Command.t or_string) ->
                      or_string_to_js Command.t_to_js x1300) x1299)
        let (accessibilityInformation : t -> AccessibilityInformation.t) =
          fun (x1302 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1302) "accessibilityInformation")
        let (set_accessibilityInformation :
          t -> AccessibilityInformation.t -> unit) =
          fun (x1303 : t) ->
            fun (x1304 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x1303) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x1304)
        let (show : t -> unit) =
          fun (x1305 : t) -> ignore (Ojs.call (t_to_js x1305) "show" [||])
        let (hide : t -> unit) =
          fun (x1306 : t) -> ignore (Ojs.call (t_to_js x1306) "hide" [||])
        let (dispose : t -> unit) =
          fun (x1307 : t) -> ignore (Ojs.call (t_to_js x1307) "dispose" [||])
      end
    module NotebookConcatTextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1309 : Ojs.t) -> x1309
        and t_to_js : t -> Ojs.t = fun (x1308 : Ojs.t) -> x1308
        let (uri : t -> Uri.t) =
          fun (x1310 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1310) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x1311 : t) ->
            fun (x1312 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1311) "uri" (Uri.t_to_js x1312)
        let (isClosed : t -> bool) =
          fun (x1313 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1313) "isClosed")
        let (set_isClosed : t -> bool -> unit) =
          fun (x1314 : t) ->
            fun (x1315 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1314) "isClosed"
                (Ojs.bool_to_js x1315)
        let (dispose : t -> unit) =
          fun (x1316 : t) -> ignore (Ojs.call (t_to_js x1316) "dispose" [||])
        let (onDidChange : t -> unit Event.t) =
          fun (x1317 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1317) "onDidChange")
        let (set_onDidChange : t -> unit Event.t -> unit) =
          fun (x1319 : t) ->
            fun (x1320 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1319) "onDidChange"
                (Event.t_to_js Ojs.unit_to_js x1320)
        let (version : t -> int) =
          fun (x1322 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1322) "version")
        let (set_version : t -> int -> unit) =
          fun (x1323 : t) ->
            fun (x1324 : int) ->
              Ojs.set_prop_ascii (t_to_js x1323) "version"
                (Ojs.int_to_js x1324)
        let (getText : t -> string) =
          fun (x1325 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x1325) "getText" [||])
        let (getText' : t -> range:Range.t -> string) =
          fun (x1327 : t) ->
            fun ~range:(x1326 : Range.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x1327) "getText" [|(Range.t_to_js x1326)|])
        let (offsetAt : t -> position:Position.t -> int) =
          fun (x1329 : t) ->
            fun ~position:(x1328 : Position.t) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x1329) "offsetAt"
                   [|(Position.t_to_js x1328)|])
        let (positionAt : t -> offset:int -> Position.t) =
          fun (x1331 : t) ->
            fun ~offset:(x1330 : int) ->
              Position.t_of_js
                (Ojs.call (t_to_js x1331) "positionAt"
                   [|(Ojs.int_to_js x1330)|])
        let (validateRange : t -> range:Range.t -> Range.t) =
          fun (x1333 : t) ->
            fun ~range:(x1332 : Range.t) ->
              Range.t_of_js
                (Ojs.call (t_to_js x1333) "validateRange"
                   [|(Range.t_to_js x1332)|])
        let (validatePosition : t -> position:Position.t -> Position.t) =
          fun (x1335 : t) ->
            fun ~position:(x1334 : Position.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x1335) "validatePosition"
                   [|(Position.t_to_js x1334)|])
        let (locationAt :
          t -> positionOrRange:(Position.t, Range.t) union2 -> Location.t) =
          fun (x1339 : t) ->
            fun ~positionOrRange:(x1336 : (Position.t, Range.t) union2) ->
              Location.t_of_js
                (Ojs.call (t_to_js x1339) "locationAt"
                   [|(union2_to_js Position.t_to_js Range.t_to_js x1336)|])
        let (positionAt' : t -> location:Location.t -> Position.t) =
          fun (x1341 : t) ->
            fun ~location:(x1340 : Location.t) ->
              Position.t_of_js
                (Ojs.call (t_to_js x1341) "positionAt"
                   [|(Location.t_to_js x1340)|])
        let (contains : t -> uri:Uri.t -> bool) =
          fun (x1343 : t) ->
            fun ~uri:(x1342 : Uri.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1343) "contains" [|(Uri.t_to_js x1342)|])
      end
    module Notebook =
      struct
        let (openNotebookDocument :
          uri:Uri.t -> NotebookDocument.t Promise.t) =
          fun ~uri:(x1344 : Uri.t) ->
            Promise.t_of_js NotebookDocument.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "notebook")
                 "openNotebookDocument" [|(Uri.t_to_js x1344)|])
        let (onDidOpenNotebookDocument : NotebookDocument.t Event.t) =
          Event.t_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidOpenNotebookDocument")
        let (onDidCloseNotebookDocument : NotebookDocument.t Event.t) =
          Event.t_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidCloseNotebookDocument")
        let (onDidSaveNotebookDocument : NotebookDocument.t Event.t) =
          Event.t_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidSaveNotebookDocument")
        let (notebookDocuments : NotebookDocument.t list) =
          Ojs.list_of_js NotebookDocument.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "notebookDocuments")
        let (onDidChangeNotebookDocumentMetadata :
          NotebookDocumentMetadataChangeEvent.t Event.t) =
          Event.t_of_js NotebookDocumentMetadataChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidChangeNotebookDocumentMetadata")
        let (onDidChangeNotebookCells : NotebookCellsChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidChangeNotebookCells")
        let (onDidChangeCellOutputs :
          NotebookCellOutputsChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellOutputsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidChangeCellOutputs")
        let (onDidChangeCellMetadata :
          NotebookCellMetadataChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellMetadataChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidChangeCellMetadata")
        let (registerNotebookSerializer :
          notebookType:string ->
            provider:NotebookSerializer.t ->
              ?options:NotebookDocumentContentOptions.t ->
                unit -> Disposable.t)
          =
          fun ~notebookType:(x1354 : string) ->
            fun ~provider:(x1355 : NotebookSerializer.t) ->
              fun ?options:(x1356 : NotebookDocumentContentOptions.t option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x1359 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS.vscode") "notebook" in
                     Ojs.call
                       (Ojs.get_prop_ascii x1359 "registerNotebookSerializer")
                       "apply"
                       [|x1359;((let x1357 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1357 "push"
                                      [|(Ojs.string_to_js x1354)|]);
                                 ignore
                                   (Ojs.call x1357 "push"
                                      [|(NotebookSerializer.t_to_js x1355)|]);
                                 (match x1356 with
                                  | Some x1358 ->
                                      ignore
                                        (Ojs.call x1357 "push"
                                           [|(NotebookDocumentContentOptions.t_to_js
                                                x1358)|])
                                  | None -> ());
                                 x1357))|])
        let (createNotebookKernel :
          options:NotebookKernelOptions.t -> NotebookKernel2.t) =
          fun ~options:(x1360 : NotebookKernelOptions.t) ->
            NotebookKernel2.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "notebook")
                 "createNotebookKernel"
                 [|(NotebookKernelOptions.t_to_js x1360)|])
        let (registerNotebookContentProvider :
          notebookType:string ->
            provider:NotebookContentProvider.t ->
              ?options:(NotebookDocumentContentOptions.t,
                AnonymousInterface15.t) intersection2 -> unit -> Disposable.t)
          =
          fun ~notebookType:(x1361 : string) ->
            fun ~provider:(x1362 : NotebookContentProvider.t) ->
              fun
                ?options:(x1363 :
                           (NotebookDocumentContentOptions.t,
                             AnonymousInterface15.t) intersection2 option)
                ->
                fun () ->
                  Disposable.t_of_js
                    (let x1368 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS.vscode") "notebook" in
                     Ojs.call
                       (Ojs.get_prop_ascii x1368
                          "registerNotebookContentProvider") "apply"
                       [|x1368;((let x1364 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1364 "push"
                                      [|(Ojs.string_to_js x1361)|]);
                                 ignore
                                   (Ojs.call x1364 "push"
                                      [|(NotebookContentProvider.t_to_js
                                           x1362)|]);
                                 (match x1363 with
                                  | Some x1365 ->
                                      ignore
                                        (Ojs.call x1364 "push"
                                           [|(intersection2_to_js
                                                NotebookDocumentContentOptions.t_to_js
                                                AnonymousInterface15.t_to_js
                                                x1365)|])
                                  | None -> ());
                                 x1364))|])
        let (createNotebookCellExecutionTask :
          uri:Uri.t ->
            index:int ->
              kernelId:string -> NotebookCellExecutionTask.t or_undefined)
          =
          fun ~uri:(x1369 : Uri.t) ->
            fun ~index:(x1370 : int) ->
              fun ~kernelId:(x1371 : string) ->
                or_undefined_of_js NotebookCellExecutionTask.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS.vscode") "notebook")
                     "createNotebookCellExecutionTask"
                     [|(Uri.t_to_js x1369);(Ojs.int_to_js x1370);(Ojs.string_to_js
                                                                    x1371)|])
        let (onDidChangeCellExecutionState :
          NotebookCellExecutionStateChangeEvent.t Event.t) =
          Event.t_of_js NotebookCellExecutionStateChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidChangeCellExecutionState")
        let (onDidChangeActiveNotebookKernel : AnonymousInterface4.t Event.t)
          =
          Event.t_of_js AnonymousInterface4.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "notebook")
               "onDidChangeActiveNotebookKernel")
        let (registerNotebookKernelProvider :
          selector:NotebookDocumentFilter.t ->
            provider:NotebookKernel.t NotebookKernelProvider.t ->
              Disposable.t)
          =
          fun ~selector:(x1375 : NotebookDocumentFilter.t) ->
            fun ~provider:(x1376 : NotebookKernel.t NotebookKernelProvider.t)
              ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "notebook")
                   "registerNotebookKernelProvider"
                   [|(NotebookDocumentFilter.t_to_js x1375);(NotebookKernelProvider.t_to_js
                                                               NotebookKernel.t_to_js
                                                               x1376)|])
        let (createNotebookEditorDecorationType :
          options:NotebookDecorationRenderOptions.t ->
            NotebookEditorDecorationType.t)
          =
          fun ~options:(x1378 : NotebookDecorationRenderOptions.t) ->
            NotebookEditorDecorationType.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "notebook")
                 "createNotebookEditorDecorationType"
                 [|(NotebookDecorationRenderOptions.t_to_js x1378)|])
        let (createCellStatusBarItem :
          cell:NotebookCell.t ->
            ?alignment:NotebookCellStatusBarAlignment.t ->
              ?priority:int -> unit -> NotebookCellStatusBarItem.t)
          =
          fun ~cell:(x1379 : NotebookCell.t) ->
            fun ?alignment:(x1380 : NotebookCellStatusBarAlignment.t option)
              ->
              fun ?priority:(x1381 : int option) ->
                fun () ->
                  NotebookCellStatusBarItem.t_of_js
                    (let x1385 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS.vscode") "notebook" in
                     Ojs.call
                       (Ojs.get_prop_ascii x1385 "createCellStatusBarItem")
                       "apply"
                       [|x1385;((let x1382 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1382 "push"
                                      [|(NotebookCell.t_to_js x1379)|]);
                                 (match x1380 with
                                  | Some x1384 ->
                                      ignore
                                        (Ojs.call x1382 "push"
                                           [|(NotebookCellStatusBarAlignment.t_to_js
                                                x1384)|])
                                  | None -> ());
                                 (match x1381 with
                                  | Some x1383 ->
                                      ignore
                                        (Ojs.call x1382 "push"
                                           [|(Ojs.int_to_js x1383)|])
                                  | None -> ());
                                 x1382))|])
        let (createConcatTextDocument :
          notebook:NotebookDocument.t ->
            ?selector:DocumentSelector.t ->
              unit -> NotebookConcatTextDocument.t)
          =
          fun ~notebook:(x1386 : NotebookDocument.t) ->
            fun ?selector:(x1387 : DocumentSelector.t option) ->
              fun () ->
                NotebookConcatTextDocument.t_of_js
                  (let x1390 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS.vscode") "notebook" in
                   Ojs.call
                     (Ojs.get_prop_ascii x1390 "createConcatTextDocument")
                     "apply"
                     [|x1390;((let x1388 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1388 "push"
                                    [|(NotebookDocument.t_to_js x1386)|]);
                               (match x1387 with
                                | Some x1389 ->
                                    ignore
                                      (Ojs.call x1388 "push"
                                         [|(DocumentSelector.t_to_js x1389)|])
                                | None -> ());
                               x1388))|])
      end
    module WorkspaceEdit =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1392 : Ojs.t) -> x1392
        and t_to_js : t -> Ojs.t = fun (x1391 : Ojs.t) -> x1391
        let (replaceNotebookMetadata :
          t -> uri:Uri.t -> value:NotebookDocumentMetadata.t -> unit) =
          fun (x1395 : t) ->
            fun ~uri:(x1393 : Uri.t) ->
              fun ~value:(x1394 : NotebookDocumentMetadata.t) ->
                ignore
                  (Ojs.call (t_to_js x1395) "replaceNotebookMetadata"
                     [|(Uri.t_to_js x1393);(NotebookDocumentMetadata.t_to_js
                                              x1394)|])
        let (replaceNotebookCells :
          t ->
            uri:Uri.t ->
              start:int ->
                end_:int ->
                  cells:NotebookCellData.t list ->
                    ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1404 : t) ->
            fun ~uri:(x1396 : Uri.t) ->
              fun ~start:(x1397 : int) ->
                fun ~end_:(x1398 : int) ->
                  fun ~cells:(x1399 : NotebookCellData.t list) ->
                    fun
                      ?metadata:(x1400 : WorkspaceEditEntryMetadata.t option)
                      ->
                      fun () ->
                        ignore
                          (let x1405 = t_to_js x1404 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1405 "replaceNotebookCells")
                             "apply"
                             [|x1405;((let x1401 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1401 "push"
                                            [|(Uri.t_to_js x1396)|]);
                                       ignore
                                         (Ojs.call x1401 "push"
                                            [|(Ojs.int_to_js x1397)|]);
                                       ignore
                                         (Ojs.call x1401 "push"
                                            [|(Ojs.int_to_js x1398)|]);
                                       ignore
                                         (Ojs.call x1401 "push"
                                            [|(Ojs.list_to_js
                                                 NotebookCellData.t_to_js
                                                 x1399)|]);
                                       (match x1400 with
                                        | Some x1402 ->
                                            ignore
                                              (Ojs.call x1401 "push"
                                                 [|(WorkspaceEditEntryMetadata.t_to_js
                                                      x1402)|])
                                        | None -> ());
                                       x1401))|])
        let (replaceNotebookCellMetadata :
          t ->
            uri:Uri.t ->
              index:int ->
                cellMetadata:NotebookCellMetadata.t ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1412 : t) ->
            fun ~uri:(x1406 : Uri.t) ->
              fun ~index:(x1407 : int) ->
                fun ~cellMetadata:(x1408 : NotebookCellMetadata.t) ->
                  fun ?metadata:(x1409 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1413 = t_to_js x1412 in
                         Ojs.call
                           (Ojs.get_prop_ascii x1413
                              "replaceNotebookCellMetadata") "apply"
                           [|x1413;((let x1410 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1410 "push"
                                          [|(Uri.t_to_js x1406)|]);
                                     ignore
                                       (Ojs.call x1410 "push"
                                          [|(Ojs.int_to_js x1407)|]);
                                     ignore
                                       (Ojs.call x1410 "push"
                                          [|(NotebookCellMetadata.t_to_js
                                               x1408)|]);
                                     (match x1409 with
                                      | Some x1411 ->
                                          ignore
                                            (Ojs.call x1410 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1411)|])
                                      | None -> ());
                                     x1410))|])
        let (replaceNotebookCellOutput :
          t ->
            uri:Uri.t ->
              index:int ->
                outputs:NotebookCellOutput.t list ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1421 : t) ->
            fun ~uri:(x1414 : Uri.t) ->
              fun ~index:(x1415 : int) ->
                fun ~outputs:(x1416 : NotebookCellOutput.t list) ->
                  fun ?metadata:(x1417 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1422 = t_to_js x1421 in
                         Ojs.call
                           (Ojs.get_prop_ascii x1422
                              "replaceNotebookCellOutput") "apply"
                           [|x1422;((let x1418 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1418 "push"
                                          [|(Uri.t_to_js x1414)|]);
                                     ignore
                                       (Ojs.call x1418 "push"
                                          [|(Ojs.int_to_js x1415)|]);
                                     ignore
                                       (Ojs.call x1418 "push"
                                          [|(Ojs.list_to_js
                                               NotebookCellOutput.t_to_js
                                               x1416)|]);
                                     (match x1417 with
                                      | Some x1419 ->
                                          ignore
                                            (Ojs.call x1418 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1419)|])
                                      | None -> ());
                                     x1418))|])
        let (appendNotebookCellOutput :
          t ->
            uri:Uri.t ->
              index:int ->
                outputs:NotebookCellOutput.t list ->
                  ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1430 : t) ->
            fun ~uri:(x1423 : Uri.t) ->
              fun ~index:(x1424 : int) ->
                fun ~outputs:(x1425 : NotebookCellOutput.t list) ->
                  fun ?metadata:(x1426 : WorkspaceEditEntryMetadata.t option)
                    ->
                    fun () ->
                      ignore
                        (let x1431 = t_to_js x1430 in
                         Ojs.call
                           (Ojs.get_prop_ascii x1431
                              "appendNotebookCellOutput") "apply"
                           [|x1431;((let x1427 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1427 "push"
                                          [|(Uri.t_to_js x1423)|]);
                                     ignore
                                       (Ojs.call x1427 "push"
                                          [|(Ojs.int_to_js x1424)|]);
                                     ignore
                                       (Ojs.call x1427 "push"
                                          [|(Ojs.list_to_js
                                               NotebookCellOutput.t_to_js
                                               x1425)|]);
                                     (match x1426 with
                                      | Some x1428 ->
                                          ignore
                                            (Ojs.call x1427 "push"
                                               [|(WorkspaceEditEntryMetadata.t_to_js
                                                    x1428)|])
                                      | None -> ());
                                     x1427))|])
        let (replaceNotebookCellOutputItems :
          t ->
            uri:Uri.t ->
              index:int ->
                outputId:string ->
                  items:NotebookCellOutputItem.t list ->
                    ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1440 : t) ->
            fun ~uri:(x1432 : Uri.t) ->
              fun ~index:(x1433 : int) ->
                fun ~outputId:(x1434 : string) ->
                  fun ~items:(x1435 : NotebookCellOutputItem.t list) ->
                    fun
                      ?metadata:(x1436 : WorkspaceEditEntryMetadata.t option)
                      ->
                      fun () ->
                        ignore
                          (let x1441 = t_to_js x1440 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1441
                                "replaceNotebookCellOutputItems") "apply"
                             [|x1441;((let x1437 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1437 "push"
                                            [|(Uri.t_to_js x1432)|]);
                                       ignore
                                         (Ojs.call x1437 "push"
                                            [|(Ojs.int_to_js x1433)|]);
                                       ignore
                                         (Ojs.call x1437 "push"
                                            [|(Ojs.string_to_js x1434)|]);
                                       ignore
                                         (Ojs.call x1437 "push"
                                            [|(Ojs.list_to_js
                                                 NotebookCellOutputItem.t_to_js
                                                 x1435)|]);
                                       (match x1436 with
                                        | Some x1438 ->
                                            ignore
                                              (Ojs.call x1437 "push"
                                                 [|(WorkspaceEditEntryMetadata.t_to_js
                                                      x1438)|])
                                        | None -> ());
                                       x1437))|])
        let (appendNotebookCellOutputItems :
          t ->
            uri:Uri.t ->
              index:int ->
                outputId:string ->
                  items:NotebookCellOutputItem.t list ->
                    ?metadata:WorkspaceEditEntryMetadata.t -> unit -> unit)
          =
          fun (x1450 : t) ->
            fun ~uri:(x1442 : Uri.t) ->
              fun ~index:(x1443 : int) ->
                fun ~outputId:(x1444 : string) ->
                  fun ~items:(x1445 : NotebookCellOutputItem.t list) ->
                    fun
                      ?metadata:(x1446 : WorkspaceEditEntryMetadata.t option)
                      ->
                      fun () ->
                        ignore
                          (let x1451 = t_to_js x1450 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1451
                                "appendNotebookCellOutputItems") "apply"
                             [|x1451;((let x1447 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1447 "push"
                                            [|(Uri.t_to_js x1442)|]);
                                       ignore
                                         (Ojs.call x1447 "push"
                                            [|(Ojs.int_to_js x1443)|]);
                                       ignore
                                         (Ojs.call x1447 "push"
                                            [|(Ojs.string_to_js x1444)|]);
                                       ignore
                                         (Ojs.call x1447 "push"
                                            [|(Ojs.list_to_js
                                                 NotebookCellOutputItem.t_to_js
                                                 x1445)|]);
                                       (match x1446 with
                                        | Some x1448 ->
                                            ignore
                                              (Ojs.call x1447 "push"
                                                 [|(WorkspaceEditEntryMetadata.t_to_js
                                                      x1448)|])
                                        | None -> ());
                                       x1447))|])
      end
    module CompletionItemLabel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1453 : Ojs.t) -> x1453
        and t_to_js : t -> Ojs.t = fun (x1452 : Ojs.t) -> x1452
        let (name : t -> string) =
          fun (x1454 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1454) "name")
        let (set_name : t -> string -> unit) =
          fun (x1455 : t) ->
            fun (x1456 : string) ->
              Ojs.set_prop_ascii (t_to_js x1455) "name"
                (Ojs.string_to_js x1456)
        let (parameters : t -> string) =
          fun (x1457 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1457) "parameters")
        let (set_parameters : t -> string -> unit) =
          fun (x1458 : t) ->
            fun (x1459 : string) ->
              Ojs.set_prop_ascii (t_to_js x1458) "parameters"
                (Ojs.string_to_js x1459)
        let (qualifier : t -> string) =
          fun (x1460 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1460) "qualifier")
        let (set_qualifier : t -> string -> unit) =
          fun (x1461 : t) ->
            fun (x1462 : string) ->
              Ojs.set_prop_ascii (t_to_js x1461) "qualifier"
                (Ojs.string_to_js x1462)
        let (type_ : t -> string) =
          fun (x1463 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1463) "type")
        let (set_type : t -> string -> unit) =
          fun (x1464 : t) ->
            fun (x1465 : string) ->
              Ojs.set_prop_ascii (t_to_js x1464) "type"
                (Ojs.string_to_js x1465)
      end
    module CompletionItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1467 : Ojs.t) -> x1467
        and t_to_js : t -> Ojs.t = fun (x1466 : Ojs.t) -> x1466
        let (label2 : t -> CompletionItemLabel.t) =
          fun (x1468 : t) ->
            CompletionItemLabel.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1468) "label2")
        let (set_label2 : t -> CompletionItemLabel.t -> unit) =
          fun (x1469 : t) ->
            fun (x1470 : CompletionItemLabel.t) ->
              Ojs.set_prop_ascii (t_to_js x1469) "label2"
                (CompletionItemLabel.t_to_js x1470)
      end
    module TimelineItem =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1472 : Ojs.t) -> x1472
        and t_to_js : t -> Ojs.t = fun (x1471 : Ojs.t) -> x1471
        let (timestamp : t -> int) =
          fun (x1473 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1473) "timestamp")
        let (set_timestamp : t -> int -> unit) =
          fun (x1474 : t) ->
            fun (x1475 : int) ->
              Ojs.set_prop_ascii (t_to_js x1474) "timestamp"
                (Ojs.int_to_js x1475)
        let (label : t -> string) =
          fun (x1476 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1476) "label")
        let (set_label : t -> string -> unit) =
          fun (x1477 : t) ->
            fun (x1478 : string) ->
              Ojs.set_prop_ascii (t_to_js x1477) "label"
                (Ojs.string_to_js x1478)
        let (id : t -> string) =
          fun (x1479 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1479) "id")
        let (set_id : t -> string -> unit) =
          fun (x1480 : t) ->
            fun (x1481 : string) ->
              Ojs.set_prop_ascii (t_to_js x1480) "id"
                (Ojs.string_to_js x1481)
        let (iconPath :
          t -> (ThemeIcon.t, Uri.t, AnonymousInterface9.t) union3) =
          fun (x1482 : t) ->
            union3_of_js ThemeIcon.t_of_js Uri.t_of_js
              AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1482) "iconPath")
        let (set_iconPath :
          t -> (ThemeIcon.t, Uri.t, AnonymousInterface9.t) union3 -> unit) =
          fun (x1486 : t) ->
            fun (x1487 : (ThemeIcon.t, Uri.t, AnonymousInterface9.t) union3)
              ->
              Ojs.set_prop_ascii (t_to_js x1486) "iconPath"
                (union3_to_js ThemeIcon.t_to_js Uri.t_to_js
                   AnonymousInterface9.t_to_js x1487)
        let (description : t -> string) =
          fun (x1491 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1491) "description")
        let (set_description : t -> string -> unit) =
          fun (x1492 : t) ->
            fun (x1493 : string) ->
              Ojs.set_prop_ascii (t_to_js x1492) "description"
                (Ojs.string_to_js x1493)
        let (detail : t -> string) =
          fun (x1494 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1494) "detail")
        let (set_detail : t -> string -> unit) =
          fun (x1495 : t) ->
            fun (x1496 : string) ->
              Ojs.set_prop_ascii (t_to_js x1495) "detail"
                (Ojs.string_to_js x1496)
        let (command : t -> Command.t) =
          fun (x1497 : t) ->
            Command.t_of_js (Ojs.get_prop_ascii (t_to_js x1497) "command")
        let (set_command : t -> Command.t -> unit) =
          fun (x1498 : t) ->
            fun (x1499 : Command.t) ->
              Ojs.set_prop_ascii (t_to_js x1498) "command"
                (Command.t_to_js x1499)
        let (contextValue : t -> string) =
          fun (x1500 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1500) "contextValue")
        let (set_contextValue : t -> string -> unit) =
          fun (x1501 : t) ->
            fun (x1502 : string) ->
              Ojs.set_prop_ascii (t_to_js x1501) "contextValue"
                (Ojs.string_to_js x1502)
        let (accessibilityInformation : t -> AccessibilityInformation.t) =
          fun (x1503 : t) ->
            AccessibilityInformation.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1503) "accessibilityInformation")
        let (set_accessibilityInformation :
          t -> AccessibilityInformation.t -> unit) =
          fun (x1504 : t) ->
            fun (x1505 : AccessibilityInformation.t) ->
              Ojs.set_prop_ascii (t_to_js x1504) "accessibilityInformation"
                (AccessibilityInformation.t_to_js x1505)
        let (create : label:string -> timestamp:int -> t) =
          fun ~label:(x1506 : string) ->
            fun ~timestamp:(x1507 : int) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "TimelineItem")
                   [|(Ojs.string_to_js x1506);(Ojs.int_to_js x1507)|])
      end
    module TimelineChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1509 : Ojs.t) -> x1509
        and t_to_js : t -> Ojs.t = fun (x1508 : Ojs.t) -> x1508
        let (uri : t -> Uri.t) =
          fun (x1510 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1510) "uri")
        let (set_uri : t -> Uri.t -> unit) =
          fun (x1511 : t) ->
            fun (x1512 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1511) "uri" (Uri.t_to_js x1512)
        let (reset : t -> bool) =
          fun (x1513 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1513) "reset")
        let (set_reset : t -> bool -> unit) =
          fun (x1514 : t) ->
            fun (x1515 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1514) "reset"
                (Ojs.bool_to_js x1515)
      end
    module AnonymousInterface2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1517 : Ojs.t) -> x1517
        and t_to_js : t -> Ojs.t = fun (x1516 : Ojs.t) -> x1516
        let (cursor : t -> string or_undefined) =
          fun (x1518 : t) ->
            or_undefined_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1518) "cursor")
      end
    module Timeline =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1521 : Ojs.t) -> x1521
        and t_to_js : t -> Ojs.t = fun (x1520 : Ojs.t) -> x1520
        let (paging : t -> AnonymousInterface2.t) =
          fun (x1522 : t) ->
            AnonymousInterface2.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1522) "paging")
        let (items : t -> TimelineItem.t list) =
          fun (x1523 : t) ->
            Ojs.list_of_js TimelineItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1523) "items")
      end
    module TimelineOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1526 : Ojs.t) -> x1526
        and t_to_js : t -> Ojs.t = fun (x1525 : Ojs.t) -> x1525
        let (cursor : t -> string) =
          fun (x1527 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1527) "cursor")
        let (set_cursor : t -> string -> unit) =
          fun (x1528 : t) ->
            fun (x1529 : string) ->
              Ojs.set_prop_ascii (t_to_js x1528) "cursor"
                (Ojs.string_to_js x1529)
        let (limit : t -> AnonymousInterface14.t or_number) =
          fun (x1530 : t) ->
            or_number_of_js AnonymousInterface14.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1530) "limit")
        let (set_limit : t -> AnonymousInterface14.t or_number -> unit) =
          fun (x1532 : t) ->
            fun (x1533 : AnonymousInterface14.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1532) "limit"
                (or_number_to_js AnonymousInterface14.t_to_js x1533)
      end
    module TimelineProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1536 : Ojs.t) -> x1536
        and t_to_js : t -> Ojs.t = fun (x1535 : Ojs.t) -> x1535
        let (onDidChange : t -> TimelineChangeEvent.t or_undefined Event.t) =
          fun (x1537 : t) ->
            Event.t_of_js
              (fun (x1538 : Ojs.t) ->
                 or_undefined_of_js TimelineChangeEvent.t_of_js x1538)
              (Ojs.get_prop_ascii (t_to_js x1537) "onDidChange")
        let (set_onDidChange :
          t -> TimelineChangeEvent.t or_undefined Event.t -> unit) =
          fun (x1540 : t) ->
            fun (x1541 : TimelineChangeEvent.t or_undefined Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1540) "onDidChange"
                (Event.t_to_js
                   (fun (x1542 : TimelineChangeEvent.t or_undefined) ->
                      or_undefined_to_js TimelineChangeEvent.t_to_js x1542)
                   x1541)
        let (id : t -> string) =
          fun (x1544 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1544) "id")
        let (label : t -> string) =
          fun (x1545 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1545) "label")
        let (provideTimeline :
          t ->
            uri:Uri.t ->
              options:TimelineOptions.t ->
                token:CancellationToken.t -> Timeline.t ProviderResult.t)
          =
          fun (x1549 : t) ->
            fun ~uri:(x1546 : Uri.t) ->
              fun ~options:(x1547 : TimelineOptions.t) ->
                fun ~token:(x1548 : CancellationToken.t) ->
                  ProviderResult.t_of_js Timeline.t_of_js
                    (Ojs.call (t_to_js x1549) "provideTimeline"
                       [|(Uri.t_to_js x1546);(TimelineOptions.t_to_js x1547);(
                         CancellationToken.t_to_js x1548)|])
      end
    module StandardTokenType =
      struct
        type t = [ `Other  | `Comment  | `String  | `RegEx ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1552 : Ojs.t) ->
            let x1553 = x1552 in
            match Ojs.int_of_js x1553 with
            | 0 -> `Other
            | 1 -> `Comment
            | 2 -> `String
            | 4 -> `RegEx
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1551 : [ `Other  | `Comment  | `String  | `RegEx ]) ->
            match x1551 with
            | `Other -> Ojs.int_to_js 0
            | `Comment -> Ojs.int_to_js 1
            | `String -> Ojs.int_to_js 2
            | `RegEx -> Ojs.int_to_js 4
      end
    module TokenInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1555 : Ojs.t) -> x1555
        and t_to_js : t -> Ojs.t = fun (x1554 : Ojs.t) -> x1554
        let (type_ : t -> StandardTokenType.t) =
          fun (x1556 : t) ->
            StandardTokenType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1556) "type")
        let (set_type : t -> StandardTokenType.t -> unit) =
          fun (x1557 : t) ->
            fun (x1558 : StandardTokenType.t) ->
              Ojs.set_prop_ascii (t_to_js x1557) "type"
                (StandardTokenType.t_to_js x1558)
        let (range : t -> Range.t) =
          fun (x1559 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1559) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1560 : t) ->
            fun (x1561 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1560) "range"
                (Range.t_to_js x1561)
      end
    module InlineHintKind =
      struct
        type t = [ `Other  | `Type  | `Parameter ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1563 : Ojs.t) ->
            let x1564 = x1563 in
            match Ojs.int_of_js x1564 with
            | 0 -> `Other
            | 1 -> `Type
            | 2 -> `Parameter
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1562 : [ `Other  | `Type  | `Parameter ]) ->
            match x1562 with
            | `Other -> Ojs.int_to_js 0
            | `Type -> Ojs.int_to_js 1
            | `Parameter -> Ojs.int_to_js 2
      end
    module InlineHint =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1566 : Ojs.t) -> x1566
        and t_to_js : t -> Ojs.t = fun (x1565 : Ojs.t) -> x1565
        let (text : t -> string) =
          fun (x1567 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1567) "text")
        let (set_text : t -> string -> unit) =
          fun (x1568 : t) ->
            fun (x1569 : string) ->
              Ojs.set_prop_ascii (t_to_js x1568) "text"
                (Ojs.string_to_js x1569)
        let (range : t -> Range.t) =
          fun (x1570 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1570) "range")
        let (set_range : t -> Range.t -> unit) =
          fun (x1571 : t) ->
            fun (x1572 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js x1571) "range"
                (Range.t_to_js x1572)
        let (kind : t -> InlineHintKind.t) =
          fun (x1573 : t) ->
            InlineHintKind.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1573) "kind")
        let (set_kind : t -> InlineHintKind.t -> unit) =
          fun (x1574 : t) ->
            fun (x1575 : InlineHintKind.t) ->
              Ojs.set_prop_ascii (t_to_js x1574) "kind"
                (InlineHintKind.t_to_js x1575)
        let (description : t -> MarkdownString.t or_string) =
          fun (x1576 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1576) "description")
        let (set_description : t -> MarkdownString.t or_string -> unit) =
          fun (x1578 : t) ->
            fun (x1579 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1578) "description"
                (or_string_to_js MarkdownString.t_to_js x1579)
        let (whitespaceBefore : t -> bool) =
          fun (x1581 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1581) "whitespaceBefore")
        let (set_whitespaceBefore : t -> bool -> unit) =
          fun (x1582 : t) ->
            fun (x1583 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1582) "whitespaceBefore"
                (Ojs.bool_to_js x1583)
        let (whitespaceAfter : t -> bool) =
          fun (x1584 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1584) "whitespaceAfter")
        let (set_whitespaceAfter : t -> bool -> unit) =
          fun (x1585 : t) ->
            fun (x1586 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1585) "whitespaceAfter"
                (Ojs.bool_to_js x1586)
        let (create :
          text:string -> range:Range.t -> ?kind:InlineHintKind.t -> unit -> t)
          =
          fun ~text:(x1587 : string) ->
            fun ~range:(x1588 : Range.t) ->
              fun ?kind:(x1589 : InlineHintKind.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS.vscode") "InlineHint")
                       (let x1590 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x1590 "push" [|(Ojs.string_to_js x1587)|]);
                        ignore
                          (Ojs.call x1590 "push" [|(Range.t_to_js x1588)|]);
                        (match x1589 with
                         | Some x1591 ->
                             ignore
                               (Ojs.call x1590 "push"
                                  [|(InlineHintKind.t_to_js x1591)|])
                         | None -> ());
                        x1590))
      end
    module InlineHintsProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1593 : Ojs.t) -> x1593
        and t_to_js : t -> Ojs.t = fun (x1592 : Ojs.t) -> x1592
        let (onDidChangeInlineHints : t -> unit Event.t) =
          fun (x1594 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1594) "onDidChangeInlineHints")
        let (set_onDidChangeInlineHints : t -> unit Event.t -> unit) =
          fun (x1596 : t) ->
            fun (x1597 : unit Event.t) ->
              Ojs.set_prop_ascii (t_to_js x1596) "onDidChangeInlineHints"
                (Event.t_to_js Ojs.unit_to_js x1597)
        let (provideInlineHints :
          t ->
            model:TextDocument.t ->
              range:Range.t ->
                token:CancellationToken.t ->
                  InlineHint.t list ProviderResult.t)
          =
          fun (x1602 : t) ->
            fun ~model:(x1599 : TextDocument.t) ->
              fun ~range:(x1600 : Range.t) ->
                fun ~token:(x1601 : CancellationToken.t) ->
                  ProviderResult.t_of_js
                    (fun (x1603 : Ojs.t) ->
                       Ojs.list_of_js InlineHint.t_of_js x1603)
                    (Ojs.call (t_to_js x1602) "provideInlineHints"
                       [|(TextDocument.t_to_js x1599);(Range.t_to_js x1600);(
                         CancellationToken.t_to_js x1601)|])
      end
    module Languages =
      struct
        let (getTokenInformationAtPosition :
          document:TextDocument.t ->
            position:Position.t -> TokenInformation.t Promise.t)
          =
          fun ~document:(x1605 : TextDocument.t) ->
            fun ~position:(x1606 : Position.t) ->
              Promise.t_of_js TokenInformation.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "languages")
                   "getTokenInformationAtPosition"
                   [|(TextDocument.t_to_js x1605);(Position.t_to_js x1606)|])
        let (registerInlineHintsProvider :
          selector:DocumentSelector.t ->
            provider:InlineHintsProvider.t -> Disposable.t)
          =
          fun ~selector:(x1608 : DocumentSelector.t) ->
            fun ~provider:(x1609 : InlineHintsProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "languages")
                   "registerInlineHintsProvider"
                   [|(DocumentSelector.t_to_js x1608);(InlineHintsProvider.t_to_js
                                                         x1609)|])
      end
    module ExtensionRuntime =
      struct
        type t = [ `Node  | `Webworker ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1611 : Ojs.t) ->
            let x1612 = x1611 in
            match Ojs.int_of_js x1612 with
            | 1 -> `Node
            | 2 -> `Webworker
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1610 : [ `Node  | `Webworker ]) ->
            match x1610 with
            | `Node -> Ojs.int_to_js 1
            | `Webworker -> Ojs.int_to_js 2
      end
    module ExtensionContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1614 : Ojs.t) -> x1614
        and t_to_js : t -> Ojs.t = fun (x1613 : Ojs.t) -> x1613
        let (extensionRuntime : t -> ExtensionRuntime.t) =
          fun (x1615 : t) ->
            ExtensionRuntime.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1615) "extensionRuntime")
      end
    module TextDocument =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1617 : Ojs.t) -> x1617
        and t_to_js : t -> Ojs.t = fun (x1616 : Ojs.t) -> x1616
        let (notebook : t -> NotebookDocument.t or_undefined) =
          fun (x1618 : t) ->
            or_undefined_of_js NotebookDocument.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1618) "notebook")
        let (set_notebook : t -> NotebookDocument.t or_undefined -> unit) =
          fun (x1620 : t) ->
            fun (x1621 : NotebookDocument.t or_undefined) ->
              Ojs.set_prop_ascii (t_to_js x1620) "notebook"
                (or_undefined_to_js NotebookDocument.t_to_js x1621)
      end
    module TestChildrenCollection =
      struct
        include struct include Iterable end
        let (size : 'T t -> int) =
          fun (x1623 : 'T t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1623) "size")
        let (get : 'T t -> id:string -> 'T or_undefined) =
          fun (x1626 : 'T t) ->
            fun ~id:(x1625 : string) ->
              or_undefined_of_js Obj.magic
                (Ojs.call (t_to_js Obj.magic x1626) "get"
                   [|(Ojs.string_to_js x1625)|])
        let (add : 'T t -> child:'T -> unit) =
          fun (x1630 : 'T t) ->
            fun ~child:(x1629 : 'T) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x1630) "add"
                   [|(Obj.magic x1629)|])
        let (delete : 'T t -> child:'T or_string -> unit) =
          fun (x1634 : 'T t) ->
            fun ~child:(x1632 : 'T or_string) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x1634) "delete"
                   [|(or_string_to_js Obj.magic x1632)|])
        let (clear : 'T t -> unit) =
          fun (x1636 : 'T t) ->
            ignore (Ojs.call (t_to_js Obj.magic x1636) "clear" [||])
      end
    module AnonymousInterface0 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1639 : Ojs.t) -> x1639
        and t_to_js : t -> Ojs.t = fun (x1638 : Ojs.t) -> x1638
        let (busy : t -> bool) =
          fun (x1640 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1640) "busy")
        let (set_busy : t -> bool -> unit) =
          fun (x1641 : t) ->
            fun (x1642 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1641) "busy"
                (Ojs.bool_to_js x1642)
      end
    module TestItem =
      struct
        type 'TChildren t = Ojs.t
        let rec t_of_js :
          'TChildren . (Ojs.t -> 'TChildren) -> Ojs.t -> 'TChildren t = fun
          (type __TChildren) ->
          fun (__TChildren_of_js : Ojs.t -> __TChildren) ->
            fun (x1644 : Ojs.t) -> x1644
        and t_to_js :
          'TChildren . ('TChildren -> Ojs.t) -> 'TChildren t -> Ojs.t = fun
          (type __TChildren) ->
          fun (__TChildren_to_js : __TChildren -> Ojs.t) ->
            fun (x1643 : Ojs.t) -> x1643
        type t_0 = any t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1647 : Ojs.t) -> t_of_js any_of_js x1647
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1645 : any t) -> t_to_js any_to_js x1645
        let (id : 'TChildren t -> string) =
          fun (x1649 : 'TChildren t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1649) "id")
        let (uri : 'TChildren t -> Uri.t) =
          fun (x1651 : 'TChildren t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1651) "uri")
        let (children : 'TChildren t -> 'TChildren TestChildrenCollection.t)
          =
          fun (x1653 : 'TChildren t) ->
            TestChildrenCollection.t_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1653) "children")
        let (label : 'TChildren t -> string) =
          fun (x1656 : 'TChildren t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1656) "label")
        let (set_label : 'TChildren t -> string -> unit) =
          fun (x1658 : 'TChildren t) ->
            fun (x1659 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1658) "label"
                (Ojs.string_to_js x1659)
        let (description : 'TChildren t -> string) =
          fun (x1661 : 'TChildren t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1661) "description")
        let (set_description : 'TChildren t -> string -> unit) =
          fun (x1663 : 'TChildren t) ->
            fun (x1664 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1663) "description"
                (Ojs.string_to_js x1664)
        let (range : 'TChildren t -> Range.t) =
          fun (x1666 : 'TChildren t) ->
            Range.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1666) "range")
        let (set_range : 'TChildren t -> Range.t -> unit) =
          fun (x1668 : 'TChildren t) ->
            fun (x1669 : Range.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1668) "range"
                (Range.t_to_js x1669)
        let (runnable : 'TChildren t -> bool) =
          fun (x1671 : 'TChildren t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1671) "runnable")
        let (set_runnable : 'TChildren t -> bool -> unit) =
          fun (x1673 : 'TChildren t) ->
            fun (x1674 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1673) "runnable"
                (Ojs.bool_to_js x1674)
        let (debuggable : 'TChildren t -> bool) =
          fun (x1676 : 'TChildren t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1676) "debuggable")
        let (set_debuggable : 'TChildren t -> bool -> unit) =
          fun (x1678 : 'TChildren t) ->
            fun (x1679 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1678) "debuggable"
                (Ojs.bool_to_js x1679)
        let (expandable : 'TChildren t -> bool) =
          fun (x1681 : 'TChildren t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1681) "expandable")
        let (set_expandable : 'TChildren t -> bool -> unit) =
          fun (x1683 : 'TChildren t) ->
            fun (x1684 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1683) "expandable"
                (Ojs.bool_to_js x1684)
        let (create :
          id:string ->
            label:string -> uri:Uri.t -> expandable:bool -> 'TChildren t)
          =
          fun ~id:(x1686 : string) ->
            fun ~label:(x1687 : string) ->
              fun ~uri:(x1688 : Uri.t) ->
                fun ~expandable:(x1689 : bool) ->
                  t_of_js Obj.magic
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global
                             "__LIB__VSCODE__IMPORTS.vscode") "TestItem")
                       [|(Ojs.string_to_js x1686);(Ojs.string_to_js x1687);(
                         Uri.t_to_js x1688);(Ojs.bool_to_js x1689)|])
        let (invalidate : 'TChildren t -> unit) =
          fun (x1691 : 'TChildren t) ->
            ignore (Ojs.call (t_to_js Obj.magic x1691) "invalidate" [||])
        let (discoverChildren :
          'TChildren t ->
            progress:AnonymousInterface0.t Progress.t ->
              token:CancellationToken.t -> unit)
          =
          fun (x1696 : 'TChildren t) ->
            fun ~progress:(x1693 : AnonymousInterface0.t Progress.t) ->
              fun ~token:(x1695 : CancellationToken.t) ->
                ignore
                  (Ojs.call (t_to_js Obj.magic x1696) "discoverChildren"
                     [|(Progress.t_to_js AnonymousInterface0.t_to_js x1693);(
                       CancellationToken.t_to_js x1695)|])
      end
    module TestsChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1699 : Ojs.t) -> x1699
        and t_to_js : t -> Ojs.t = fun (x1698 : Ojs.t) -> x1698
        let (added : t -> any TestItem.t list) =
          fun (x1700 : t) ->
            Ojs.list_of_js
              (fun (x1701 : Ojs.t) -> TestItem.t_of_js any_of_js x1701)
              (Ojs.get_prop_ascii (t_to_js x1700) "added")
        let (updated : t -> any TestItem.t list) =
          fun (x1703 : t) ->
            Ojs.list_of_js
              (fun (x1704 : Ojs.t) -> TestItem.t_of_js any_of_js x1704)
              (Ojs.get_prop_ascii (t_to_js x1703) "updated")
        let (removed : t -> any TestItem.t list) =
          fun (x1706 : t) ->
            Ojs.list_of_js
              (fun (x1707 : Ojs.t) -> TestItem.t_of_js any_of_js x1707)
              (Ojs.get_prop_ascii (t_to_js x1706) "removed")
      end
    module TestObserver =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1710 : Ojs.t) -> x1710
        and t_to_js : t -> Ojs.t = fun (x1709 : Ojs.t) -> x1709
        let (tests : t -> any TestItem.t list) =
          fun (x1711 : t) ->
            Ojs.list_of_js
              (fun (x1712 : Ojs.t) -> TestItem.t_of_js any_of_js x1712)
              (Ojs.get_prop_ascii (t_to_js x1711) "tests")
        let (onDidChangeTest : t -> TestsChangeEvent.t Event.t) =
          fun (x1714 : t) ->
            Event.t_of_js TestsChangeEvent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1714) "onDidChangeTest")
        let (onDidDiscoverInitialTests : t -> unit Event.t) =
          fun (x1716 : t) ->
            Event.t_of_js Ojs.unit_of_js
              (Ojs.get_prop_ascii (t_to_js x1716) "onDidDiscoverInitialTests")
        let (dispose : t -> unit) =
          fun (x1718 : t) -> ignore (Ojs.call (t_to_js x1718) "dispose" [||])
      end
    module TestRunRequest =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1720 : Ojs.t) -> x1720
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1719 : Ojs.t) -> x1719
        type t_0 = any TestItem.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1724 : Ojs.t) ->
            t_of_js (fun (x1725 : Ojs.t) -> TestItem.t_of_js any_of_js x1725)
              x1724
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1721 : any TestItem.t t) ->
            t_to_js
              (fun (x1722 : any TestItem.t) ->
                 TestItem.t_to_js any_to_js x1722) x1721
        let (tests : 'T t -> 'T list) =
          fun (x1727 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1727) "tests")
        let (set_tests : 'T t -> 'T list -> unit) =
          fun (x1730 : 'T t) ->
            fun (x1731 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1730) "tests"
                (Ojs.list_to_js Obj.magic x1731)
        let (exclude : 'T t -> 'T list) =
          fun (x1734 : 'T t) ->
            Ojs.list_of_js Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1734) "exclude")
        let (set_exclude : 'T t -> 'T list -> unit) =
          fun (x1737 : 'T t) ->
            fun (x1738 : 'T list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1737) "exclude"
                (Ojs.list_to_js Obj.magic x1738)
        let (debug : 'T t -> bool) =
          fun (x1741 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1741) "debug")
        let (set_debug : 'T t -> bool -> unit) =
          fun (x1743 : 'T t) ->
            fun (x1744 : bool) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1743) "debug"
                (Ojs.bool_to_js x1744)
      end
    module TestResultState =
      struct
        type t =
          [ `Unset  | `Queued  | `Running  | `Passed  | `Failed  | `Skipped 
          | `Errored ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1747 : Ojs.t) ->
            let x1748 = x1747 in
            match Ojs.int_of_js x1748 with
            | 0 -> `Unset
            | 1 -> `Queued
            | 2 -> `Running
            | 3 -> `Passed
            | 4 -> `Failed
            | 5 -> `Skipped
            | 6 -> `Errored
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1746 :
              [ `Unset  | `Queued  | `Running  | `Passed  | `Failed 
              | `Skipped  | `Errored ])
            ->
            match x1746 with
            | `Unset -> Ojs.int_to_js 0
            | `Queued -> Ojs.int_to_js 1
            | `Running -> Ojs.int_to_js 2
            | `Passed -> Ojs.int_to_js 3
            | `Failed -> Ojs.int_to_js 4
            | `Skipped -> Ojs.int_to_js 5
            | `Errored -> Ojs.int_to_js 6
      end
    module TestMessageSeverity =
      struct
        type t = [ `Error  | `Warning  | `Information  | `Hint ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1750 : Ojs.t) ->
            let x1751 = x1750 in
            match Ojs.int_of_js x1751 with
            | 0 -> `Error
            | 1 -> `Warning
            | 2 -> `Information
            | 3 -> `Hint
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1749 : [ `Error  | `Warning  | `Information  | `Hint ]) ->
            match x1749 with
            | `Error -> Ojs.int_to_js 0
            | `Warning -> Ojs.int_to_js 1
            | `Information -> Ojs.int_to_js 2
            | `Hint -> Ojs.int_to_js 3
      end
    module TestMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1753 : Ojs.t) -> x1753
        and t_to_js : t -> Ojs.t = fun (x1752 : Ojs.t) -> x1752
        let (message : t -> MarkdownString.t or_string) =
          fun (x1754 : t) ->
            or_string_of_js MarkdownString.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1754) "message")
        let (set_message : t -> MarkdownString.t or_string -> unit) =
          fun (x1756 : t) ->
            fun (x1757 : MarkdownString.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1756) "message"
                (or_string_to_js MarkdownString.t_to_js x1757)
        let (severity : t -> TestMessageSeverity.t) =
          fun (x1759 : t) ->
            TestMessageSeverity.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1759) "severity")
        let (set_severity : t -> TestMessageSeverity.t -> unit) =
          fun (x1760 : t) ->
            fun (x1761 : TestMessageSeverity.t) ->
              Ojs.set_prop_ascii (t_to_js x1760) "severity"
                (TestMessageSeverity.t_to_js x1761)
        let (expectedOutput : t -> string) =
          fun (x1762 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1762) "expectedOutput")
        let (set_expectedOutput : t -> string -> unit) =
          fun (x1763 : t) ->
            fun (x1764 : string) ->
              Ojs.set_prop_ascii (t_to_js x1763) "expectedOutput"
                (Ojs.string_to_js x1764)
        let (actualOutput : t -> string) =
          fun (x1765 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1765) "actualOutput")
        let (set_actualOutput : t -> string -> unit) =
          fun (x1766 : t) ->
            fun (x1767 : string) ->
              Ojs.set_prop_ascii (t_to_js x1766) "actualOutput"
                (Ojs.string_to_js x1767)
        let (location : t -> Location.t) =
          fun (x1768 : t) ->
            Location.t_of_js (Ojs.get_prop_ascii (t_to_js x1768) "location")
        let (set_location : t -> Location.t -> unit) =
          fun (x1769 : t) ->
            fun (x1770 : Location.t) ->
              Ojs.set_prop_ascii (t_to_js x1769) "location"
                (Location.t_to_js x1770)
        let (diff :
          message:MarkdownString.t or_string ->
            expected:string -> actual:string -> t)
          =
          fun ~message:(x1771 : MarkdownString.t or_string) ->
            fun ~expected:(x1773 : string) ->
              fun ~actual:(x1774 : string) ->
                t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS.vscode") "TestMessage")
                     "diff"
                     [|(or_string_to_js MarkdownString.t_to_js x1771);(
                       Ojs.string_to_js x1773);(Ojs.string_to_js x1774)|])
        let (create : message:MarkdownString.t or_string -> t) =
          fun ~message:(x1775 : MarkdownString.t or_string) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "TestMessage")
                 [|(or_string_to_js MarkdownString.t_to_js x1775)|])
      end
    module TestResultSnapshot =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1778 : Ojs.t) -> x1778
        and t_to_js : t -> Ojs.t = fun (x1777 : Ojs.t) -> x1777
        let (id : t -> string) =
          fun (x1779 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1779) "id")
        let (uri : t -> Uri.t) =
          fun (x1780 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1780) "uri")
        let (label : t -> string) =
          fun (x1781 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1781) "label")
        let (description : t -> string) =
          fun (x1782 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1782) "description")
        let (range : t -> Range.t) =
          fun (x1783 : t) ->
            Range.t_of_js (Ojs.get_prop_ascii (t_to_js x1783) "range")
        let (state : t -> TestResultState.t) =
          fun (x1784 : t) ->
            TestResultState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1784) "state")
        let (duration : t -> int) =
          fun (x1785 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1785) "duration")
        let (messages : t -> TestMessage.t list) =
          fun (x1786 : t) ->
            Ojs.list_of_js TestMessage.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1786) "messages")
        let (children : t -> t Readonly.t list) =
          fun (x1788 : t) ->
            Ojs.list_of_js
              (fun (x1789 : Ojs.t) -> Readonly.t_of_js t_of_js x1789)
              (Ojs.get_prop_ascii (t_to_js x1788) "children")
      end
    module TestRunResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1792 : Ojs.t) -> x1792
        and t_to_js : t -> Ojs.t = fun (x1791 : Ojs.t) -> x1791
        let (completedAt : t -> int) =
          fun (x1793 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1793) "completedAt")
        let (set_completedAt : t -> int -> unit) =
          fun (x1794 : t) ->
            fun (x1795 : int) ->
              Ojs.set_prop_ascii (t_to_js x1794) "completedAt"
                (Ojs.int_to_js x1795)
        let (output : t -> string) =
          fun (x1796 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1796) "output")
        let (set_output : t -> string -> unit) =
          fun (x1797 : t) ->
            fun (x1798 : string) ->
              Ojs.set_prop_ascii (t_to_js x1797) "output"
                (Ojs.string_to_js x1798)
        let (results : t -> TestResultSnapshot.t Readonly.t list) =
          fun (x1799 : t) ->
            Ojs.list_of_js
              (fun (x1800 : Ojs.t) ->
                 Readonly.t_of_js TestResultSnapshot.t_of_js x1800)
              (Ojs.get_prop_ascii (t_to_js x1799) "results")
        let (set_results : t -> TestResultSnapshot.t Readonly.t list -> unit)
          =
          fun (x1802 : t) ->
            fun (x1803 : TestResultSnapshot.t Readonly.t list) ->
              Ojs.set_prop_ascii (t_to_js x1802) "results"
                (Ojs.list_to_js
                   (fun (x1804 : TestResultSnapshot.t Readonly.t) ->
                      Readonly.t_to_js TestResultSnapshot.t_to_js x1804)
                   x1803)
      end
    module TestRunOptions =
      struct
        include struct include TestRunRequest end
        type t_0 = any TestItem.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1809 : Ojs.t) ->
            t_of_js (fun (x1810 : Ojs.t) -> TestItem.t_of_js any_of_js x1810)
              x1809
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1806 : any TestItem.t t) ->
            t_to_js
              (fun (x1807 : any TestItem.t) ->
                 TestItem.t_to_js any_to_js x1807) x1806
        let (setState :
          'T t ->
            test:'T ->
              state:TestResultState.t -> ?duration:int -> unit -> unit)
          =
          fun (x1817 : 'T t) ->
            fun ~test:(x1812 : 'T) ->
              fun ~state:(x1813 : TestResultState.t) ->
                fun ?duration:(x1814 : int option) ->
                  fun () ->
                    ignore
                      (let x1819 = t_to_js Obj.magic x1817 in
                       Ojs.call (Ojs.get_prop_ascii x1819 "setState") "apply"
                         [|x1819;((let x1815 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1815 "push"
                                        [|(Obj.magic x1812)|]);
                                   ignore
                                     (Ojs.call x1815 "push"
                                        [|(TestResultState.t_to_js x1813)|]);
                                   (match x1814 with
                                    | Some x1816 ->
                                        ignore
                                          (Ojs.call x1815 "push"
                                             [|(Ojs.int_to_js x1816)|])
                                    | None -> ());
                                   x1815))|])
        let (appendMessage :
          'T t -> test:'T -> message:TestMessage.t -> unit) =
          fun (x1822 : 'T t) ->
            fun ~test:(x1820 : 'T) ->
              fun ~message:(x1821 : TestMessage.t) ->
                ignore
                  (Ojs.call (t_to_js Obj.magic x1822) "appendMessage"
                     [|(Obj.magic x1820);(TestMessage.t_to_js x1821)|])
        let (appendOutput : 'T t -> output:string -> unit) =
          fun (x1825 : 'T t) ->
            fun ~output:(x1824 : string) ->
              ignore
                (Ojs.call (t_to_js Obj.magic x1825) "appendOutput"
                   [|(Ojs.string_to_js x1824)|])
      end
    module TestProvider =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1828 : Ojs.t) -> x1828
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1827 : Ojs.t) -> x1827
        type t_0 = any TestItem.t t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x1832 : Ojs.t) ->
            t_of_js (fun (x1833 : Ojs.t) -> TestItem.t_of_js any_of_js x1833)
              x1832
        and t_0_to_js : t_0 -> Ojs.t =
          fun (x1829 : any TestItem.t t) ->
            t_to_js
              (fun (x1830 : any TestItem.t) ->
                 TestItem.t_to_js any_to_js x1830) x1829
        let (provideWorkspaceTestRoot :
          'T t ->
            workspace:WorkspaceFolder.t ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1837 : 'T t) ->
            fun ~workspace:(x1835 : WorkspaceFolder.t) ->
              fun ~token:(x1836 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1837)
                     "provideWorkspaceTestRoot"
                     [|(WorkspaceFolder.t_to_js x1835);(CancellationToken.t_to_js
                                                          x1836)|])
        let (provideDocumentTestRoot :
          'T t ->
            document:TextDocument.t ->
              token:CancellationToken.t -> 'T ProviderResult.t)
          =
          fun (x1842 : 'T t) ->
            fun ~document:(x1840 : TextDocument.t) ->
              fun ~token:(x1841 : CancellationToken.t) ->
                ProviderResult.t_of_js Obj.magic
                  (Ojs.call (t_to_js Obj.magic x1842)
                     "provideDocumentTestRoot"
                     [|(TextDocument.t_to_js x1840);(CancellationToken.t_to_js
                                                       x1841)|])
        let (runTests :
          'T t ->
            options:'T TestRunOptions.t ->
              token:CancellationToken.t -> unit ProviderResult.t)
          =
          fun (x1848 : 'T t) ->
            fun ~options:(x1845 : 'T TestRunOptions.t) ->
              fun ~token:(x1847 : CancellationToken.t) ->
                ProviderResult.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js Obj.magic x1848) "runTests"
                     [|(TestRunOptions.t_to_js Obj.magic x1845);(CancellationToken.t_to_js
                                                                   x1847)|])
      end
    module Test =
      struct
        let (registerTestProvider :
          testProvider:'T TestProvider.t -> Disposable.t) =
          fun ~testProvider:(x1851 : 'T TestProvider.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "test")
                 "registerTestProvider"
                 [|(TestProvider.t_to_js Obj.magic x1851)|])
        let (runTests :
          run:'T TestRunRequest.t ->
            ?token:CancellationToken.t -> unit -> unit Promise.t)
          =
          fun ~run:(x1853 : 'T TestRunRequest.t) ->
            fun ?token:(x1854 : CancellationToken.t option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1858 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS.vscode") "test" in
                   Ojs.call (Ojs.get_prop_ascii x1858 "runTests") "apply"
                     [|x1858;((let x1855 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1855 "push"
                                    [|(TestRunRequest.t_to_js Obj.magic x1853)|]);
                               (match x1854 with
                                | Some x1856 ->
                                    ignore
                                      (Ojs.call x1855 "push"
                                         [|(CancellationToken.t_to_js x1856)|])
                                | None -> ());
                               x1855))|])
        let (createWorkspaceTestObserver :
          workspaceFolder:WorkspaceFolder.t -> TestObserver.t) =
          fun ~workspaceFolder:(x1860 : WorkspaceFolder.t) ->
            TestObserver.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "test")
                 "createWorkspaceTestObserver"
                 [|(WorkspaceFolder.t_to_js x1860)|])
        let (createDocumentTestObserver :
          document:TextDocument.t -> TestObserver.t) =
          fun ~document:(x1861 : TextDocument.t) ->
            TestObserver.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "test")
                 "createDocumentTestObserver"
                 [|(TextDocument.t_to_js x1861)|])
        let (publishTestResult :
          results:TestRunResult.t -> ?persist:bool -> unit -> unit) =
          fun ~results:(x1862 : TestRunResult.t) ->
            fun ?persist:(x1863 : bool option) ->
              fun () ->
                ignore
                  (let x1866 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS.vscode") "test" in
                   Ojs.call (Ojs.get_prop_ascii x1866 "publishTestResult")
                     "apply"
                     [|x1866;((let x1864 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1864 "push"
                                    [|(TestRunResult.t_to_js x1862)|]);
                               (match x1863 with
                                | Some x1865 ->
                                    ignore
                                      (Ojs.call x1864 "push"
                                         [|(Ojs.bool_to_js x1865)|])
                                | None -> ());
                               x1864))|])
        let (testResults : TestRunResult.t list) =
          Ojs.list_of_js TestRunResult.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "test") "testResults")
        let (onDidChangeTestResults : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "test")
               "onDidChangeTestResults")
      end
    module ExternalUriOpenerPriority =
      struct
        type t = [ `None  | `Option  | `Default  | `Preferred ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1870 : Ojs.t) ->
            let x1871 = x1870 in
            match Ojs.int_of_js x1871 with
            | 0 -> `None
            | 1 -> `Option
            | 2 -> `Default
            | 3 -> `Preferred
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1869 : [ `None  | `Option  | `Default  | `Preferred ]) ->
            match x1869 with
            | `None -> Ojs.int_to_js 0
            | `Option -> Ojs.int_to_js 1
            | `Default -> Ojs.int_to_js 2
            | `Preferred -> Ojs.int_to_js 3
      end
    module OpenExternalUriContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1873 : Ojs.t) -> x1873
        and t_to_js : t -> Ojs.t = fun (x1872 : Ojs.t) -> x1872
        let (sourceUri : t -> Uri.t) =
          fun (x1874 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1874) "sourceUri")
      end
    module ExternalUriOpener =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1876 : Ojs.t) -> x1876
        and t_to_js : t -> Ojs.t = fun (x1875 : Ojs.t) -> x1875
        let (canOpenExternalUri :
          t ->
            uri:Uri.t ->
              token:CancellationToken.t ->
                ((ExternalUriOpenerPriority.t,
                   ExternalUriOpenerPriority.t Promise.t) union2,
                  [ `Default  | `None  | `Option  | `Preferred ]) or_enum)
          =
          fun (x1879 : t) ->
            fun ~uri:(x1877 : Uri.t) ->
              fun ~token:(x1878 : CancellationToken.t) ->
                or_enum_of_js
                  (fun (x1880 : Ojs.t) ->
                     union2_of_js ExternalUriOpenerPriority.t_of_js
                       (fun (x1882 : Ojs.t) ->
                          Promise.t_of_js ExternalUriOpenerPriority.t_of_js
                            x1882) x1880)
                  (fun (x1884 : Ojs.t) ->
                     let x1885 = x1884 in
                     match Ojs.int_of_js x1885 with
                     | 2 -> `Default
                     | 0 -> `None
                     | 1 -> `Option
                     | 3 -> `Preferred
                     | _ -> assert false)
                  (Ojs.call (t_to_js x1879) "canOpenExternalUri"
                     [|(Uri.t_to_js x1877);(CancellationToken.t_to_js x1878)|])
        let (openExternalUri :
          t ->
            resolvedUri:Uri.t ->
              ctx:OpenExternalUriContext.t ->
                token:CancellationToken.t -> (unit, unit Promise.t) union2)
          =
          fun (x1889 : t) ->
            fun ~resolvedUri:(x1886 : Uri.t) ->
              fun ~ctx:(x1887 : OpenExternalUriContext.t) ->
                fun ~token:(x1888 : CancellationToken.t) ->
                  union2_of_js Ojs.unit_of_js
                    (fun (x1891 : Ojs.t) ->
                       Promise.t_of_js Ojs.unit_of_js x1891)
                    (Ojs.call (t_to_js x1889) "openExternalUri"
                       [|(Uri.t_to_js x1886);(OpenExternalUriContext.t_to_js
                                                x1887);(CancellationToken.t_to_js
                                                          x1888)|])
      end
    module ExternalUriOpenerMetadata =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1894 : Ojs.t) -> x1894
        and t_to_js : t -> Ojs.t = fun (x1893 : Ojs.t) -> x1893
        let (schemes : t -> string list) =
          fun (x1895 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1895) "schemes")
        let (label : t -> string) =
          fun (x1897 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1897) "label")
      end
    module OpenExternalOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1899 : Ojs.t) -> x1899
        and t_to_js : t -> Ojs.t = fun (x1898 : Ojs.t) -> x1898
        let (allowContributedOpeners : t -> bool or_string) =
          fun (x1900 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1900) "allowContributedOpeners")
      end
    module Env =
      struct
        let (openExternal :
          target:Uri.t ->
            ?options:OpenExternalOptions.t -> unit -> bool Promise.t)
          =
          fun ~target:(x1902 : Uri.t) ->
            fun ?options:(x1903 : OpenExternalOptions.t option) ->
              fun () ->
                Promise.t_of_js Ojs.bool_of_js
                  (let x1906 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS.vscode") "env" in
                   Ojs.call (Ojs.get_prop_ascii x1906 "openExternal") "apply"
                     [|x1906;((let x1904 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1904 "push"
                                    [|(Uri.t_to_js x1902)|]);
                               (match x1903 with
                                | Some x1905 ->
                                    ignore
                                      (Ojs.call x1904 "push"
                                         [|(OpenExternalOptions.t_to_js x1905)|])
                                | None -> ());
                               x1904))|])
      end
    module OpenEditorInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1909 : Ojs.t) -> x1909
        and t_to_js : t -> Ojs.t = fun (x1908 : Ojs.t) -> x1908
        let (name : t -> string) =
          fun (x1910 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1910) "name")
        let (set_name : t -> string -> unit) =
          fun (x1911 : t) ->
            fun (x1912 : string) ->
              Ojs.set_prop_ascii (t_to_js x1911) "name"
                (Ojs.string_to_js x1912)
        let (resource : t -> Uri.t) =
          fun (x1913 : t) ->
            Uri.t_of_js (Ojs.get_prop_ascii (t_to_js x1913) "resource")
        let (set_resource : t -> Uri.t -> unit) =
          fun (x1914 : t) ->
            fun (x1915 : Uri.t) ->
              Ojs.set_prop_ascii (t_to_js x1914) "resource"
                (Uri.t_to_js x1915)
      end
    module WorkspaceTrustState =
      struct
        type t = [ `Untrusted  | `Trusted  | `Unspecified ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1917 : Ojs.t) ->
            let x1918 = x1917 in
            match Ojs.int_of_js x1918 with
            | 0 -> `Untrusted
            | 1 -> `Trusted
            | 2 -> `Unspecified
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x1916 : [ `Untrusted  | `Trusted  | `Unspecified ]) ->
            match x1916 with
            | `Untrusted -> Ojs.int_to_js 0
            | `Trusted -> Ojs.int_to_js 1
            | `Unspecified -> Ojs.int_to_js 2
      end
    module WorkspaceTrustStateChangeEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1920 : Ojs.t) -> x1920
        and t_to_js : t -> Ojs.t = fun (x1919 : Ojs.t) -> x1919
        let (newTrustState : t -> WorkspaceTrustState.t) =
          fun (x1921 : t) ->
            WorkspaceTrustState.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1921) "newTrustState")
      end
    module WorkspaceTrustRequestOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1923 : Ojs.t) -> x1923
        and t_to_js : t -> Ojs.t = fun (x1922 : Ojs.t) -> x1922
        let (modal : t -> bool) =
          fun (x1924 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1924) "modal")
      end
    module Webview =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1926 : Ojs.t) -> x1926
        and t_to_js : t -> Ojs.t = fun (x1925 : Ojs.t) -> x1925
        let (postMessage : t -> message:any -> bool Promise.t) =
          fun (x1928 : t) ->
            fun ~message:(x1927 : any) ->
              Promise.t_of_js Ojs.bool_of_js
                (Ojs.call (t_to_js x1928) "postMessage" [|(any_to_js x1927)|])
      end
    module PortAutoForwardAction =
      struct
        type t =
          [ `Notify  | `OpenBrowser  | `OpenPreview  | `Silent  | `Ignore ]
        let rec t_of_js : Ojs.t -> t =
          fun (x1931 : Ojs.t) ->
            let x1932 = x1931 in
            match Ojs.int_of_js x1932 with
            | 1 -> `Notify
            | 2 -> `OpenBrowser
            | 3 -> `OpenPreview
            | 4 -> `Silent
            | 5 -> `Ignore
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x1930 :
              [ `Notify  | `OpenBrowser  | `OpenPreview  | `Silent 
              | `Ignore ])
            ->
            match x1930 with
            | `Notify -> Ojs.int_to_js 1
            | `OpenBrowser -> Ojs.int_to_js 2
            | `OpenPreview -> Ojs.int_to_js 3
            | `Silent -> Ojs.int_to_js 4
            | `Ignore -> Ojs.int_to_js 5
      end
    module PortAttributes =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1934 : Ojs.t) -> x1934
        and t_to_js : t -> Ojs.t = fun (x1933 : Ojs.t) -> x1933
        let (port : t -> int) =
          fun (x1935 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1935) "port")
        let (set_port : t -> int -> unit) =
          fun (x1936 : t) ->
            fun (x1937 : int) ->
              Ojs.set_prop_ascii (t_to_js x1936) "port" (Ojs.int_to_js x1937)
        let (autoForwardAction : t -> PortAutoForwardAction.t) =
          fun (x1938 : t) ->
            PortAutoForwardAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1938) "autoForwardAction")
        let (set_autoForwardAction : t -> PortAutoForwardAction.t -> unit) =
          fun (x1939 : t) ->
            fun (x1940 : PortAutoForwardAction.t) ->
              Ojs.set_prop_ascii (t_to_js x1939) "autoForwardAction"
                (PortAutoForwardAction.t_to_js x1940)
      end
    module PortAttributesProvider =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1942 : Ojs.t) -> x1942
        and t_to_js : t -> Ojs.t = fun (x1941 : Ojs.t) -> x1941
        let (providePortAttributes :
          t ->
            port:int ->
              pid:int or_undefined ->
                commandLine:string or_undefined ->
                  token:CancellationToken.t ->
                    PortAttributes.t ProviderResult.t)
          =
          fun (x1949 : t) ->
            fun ~port:(x1943 : int) ->
              fun ~pid:(x1944 : int or_undefined) ->
                fun ~commandLine:(x1946 : string or_undefined) ->
                  fun ~token:(x1948 : CancellationToken.t) ->
                    ProviderResult.t_of_js PortAttributes.t_of_js
                      (Ojs.call (t_to_js x1949) "providePortAttributes"
                         [|(Ojs.int_to_js x1943);(or_undefined_to_js
                                                    Ojs.int_to_js x1944);(
                           or_undefined_to_js Ojs.string_to_js x1946);(
                           CancellationToken.t_to_js x1948)|])
      end
    module Window =
      struct
        let (createWebviewTextEditorInset :
          editor:TextEditor.t ->
            line:int ->
              height:int ->
                ?options:WebviewOptions.t -> unit -> WebviewEditorInset.t)
          =
          fun ~editor:(x1951 : TextEditor.t) ->
            fun ~line:(x1952 : int) ->
              fun ~height:(x1953 : int) ->
                fun ?options:(x1954 : WebviewOptions.t option) ->
                  fun () ->
                    WebviewEditorInset.t_of_js
                      (let x1957 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS.vscode") "window" in
                       Ojs.call
                         (Ojs.get_prop_ascii x1957
                            "createWebviewTextEditorInset") "apply"
                         [|x1957;((let x1955 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1955 "push"
                                        [|(TextEditor.t_to_js x1951)|]);
                                   ignore
                                     (Ojs.call x1955 "push"
                                        [|(Ojs.int_to_js x1952)|]);
                                   ignore
                                     (Ojs.call x1955 "push"
                                        [|(Ojs.int_to_js x1953)|]);
                                   (match x1954 with
                                    | Some x1956 ->
                                        ignore
                                          (Ojs.call x1955 "push"
                                             [|(WebviewOptions.t_to_js x1956)|])
                                    | None -> ());
                                   x1955))|])
        let (onDidWriteTerminalData : TerminalDataWriteEvent.t Event.t) =
          Event.t_of_js TerminalDataWriteEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "onDidWriteTerminalData")
        let (onDidChangeTerminalDimensions :
          TerminalDimensionsChangeEvent.t Event.t) =
          Event.t_of_js TerminalDimensionsChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "onDidChangeTerminalDimensions")
        let (createStatusBarItem :
          ?options:StatusBarItemOptions.t -> unit -> StatusBarItem.t) =
          fun ?options:(x1960 : StatusBarItemOptions.t option) ->
            fun () ->
              StatusBarItem.t_of_js
                (let x1963 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global
                        "__LIB__VSCODE__IMPORTS.vscode") "window" in
                 Ojs.call (Ojs.get_prop_ascii x1963 "createStatusBarItem")
                   "apply"
                   [|x1963;((let x1961 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1960 with
                              | Some x1962 ->
                                  ignore
                                    (Ojs.call x1961 "push"
                                       [|(StatusBarItemOptions.t_to_js x1962)|])
                              | None -> ());
                             x1961))|])
        let (visibleNotebookEditors : NotebookEditor.t list) =
          Ojs.list_of_js NotebookEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "visibleNotebookEditors")
        let (onDidChangeVisibleNotebookEditors :
          NotebookEditor.t list Event.t) =
          Event.t_of_js
            (fun (x1965 : Ojs.t) ->
               Ojs.list_of_js NotebookEditor.t_of_js x1965)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "onDidChangeVisibleNotebookEditors")
        let (activeNotebookEditor : NotebookEditor.t or_undefined) =
          or_undefined_of_js NotebookEditor.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "activeNotebookEditor")
        let (onDidChangeActiveNotebookEditor :
          NotebookEditor.t or_undefined Event.t) =
          Event.t_of_js
            (fun (x1968 : Ojs.t) ->
               or_undefined_of_js NotebookEditor.t_of_js x1968)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "onDidChangeActiveNotebookEditor")
        let (onDidChangeNotebookEditorSelection :
          NotebookEditorSelectionChangeEvent.t Event.t) =
          Event.t_of_js NotebookEditorSelectionChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "onDidChangeNotebookEditorSelection")
        let (onDidChangeNotebookEditorVisibleRanges :
          NotebookEditorVisibleRangesChangeEvent.t Event.t) =
          Event.t_of_js NotebookEditorVisibleRangesChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "onDidChangeNotebookEditorVisibleRanges")
        let (showNotebookDocument :
          uri:Uri.t ->
            ?options:NotebookDocumentShowOptions.t ->
              unit -> NotebookEditor.t Promise.t)
          =
          fun ~uri:(x1972 : Uri.t) ->
            fun ?options:(x1973 : NotebookDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js NotebookEditor.t_of_js
                  (let x1976 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS.vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x1976 "showNotebookDocument")
                     "apply"
                     [|x1976;((let x1974 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1974 "push"
                                    [|(Uri.t_to_js x1972)|]);
                               (match x1973 with
                                | Some x1975 ->
                                    ignore
                                      (Ojs.call x1974 "push"
                                         [|(NotebookDocumentShowOptions.t_to_js
                                              x1975)|])
                                | None -> ());
                               x1974))|])
        let (showNotebookDocument :
          document:NotebookDocument.t ->
            ?options:NotebookDocumentShowOptions.t ->
              unit -> NotebookEditor.t Promise.t)
          =
          fun ~document:(x1978 : NotebookDocument.t) ->
            fun ?options:(x1979 : NotebookDocumentShowOptions.t option) ->
              fun () ->
                Promise.t_of_js NotebookEditor.t_of_js
                  (let x1982 =
                     Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global
                          "__LIB__VSCODE__IMPORTS.vscode") "window" in
                   Ojs.call (Ojs.get_prop_ascii x1982 "showNotebookDocument")
                     "apply"
                     [|x1982;((let x1980 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1980 "push"
                                    [|(NotebookDocument.t_to_js x1978)|]);
                               (match x1979 with
                                | Some x1981 ->
                                    ignore
                                      (Ojs.call x1980 "push"
                                         [|(NotebookDocumentShowOptions.t_to_js
                                              x1981)|])
                                | None -> ());
                               x1980))|])
        let (registerExternalUriOpener :
          id:string ->
            opener:ExternalUriOpener.t ->
              metadata:ExternalUriOpenerMetadata.t -> Disposable.t)
          =
          fun ~id:(x1984 : string) ->
            fun ~opener:(x1985 : ExternalUriOpener.t) ->
              fun ~metadata:(x1986 : ExternalUriOpenerMetadata.t) ->
                Disposable.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global
                           "__LIB__VSCODE__IMPORTS.vscode") "window")
                     "registerExternalUriOpener"
                     [|(Ojs.string_to_js x1984);(ExternalUriOpener.t_to_js
                                                   x1985);(ExternalUriOpenerMetadata.t_to_js
                                                             x1986)|])
        let (openEditors : OpenEditorInfo.t list) =
          Ojs.list_of_js OpenEditorInfo.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window") "openEditors")
        let (onDidChangeOpenEditors : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "window")
               "onDidChangeOpenEditors")
      end
    module Workspace =
      struct
        let (openTunnel :
          tunnelOptions:TunnelOptions.t -> Tunnel.t Promise.t) =
          fun ~tunnelOptions:(x1989 : TunnelOptions.t) ->
            Promise.t_of_js Tunnel.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "workspace")
                 "openTunnel" [|(TunnelOptions.t_to_js x1989)|])
        let (tunnels : TunnelDescription.t list Promise.t) =
          Promise.t_of_js
            (fun (x1991 : Ojs.t) ->
               Ojs.list_of_js TunnelDescription.t_of_js x1991)
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "workspace") "tunnels")
        let (onDidChangeTunnels : unit Event.t) =
          Event.t_of_js Ojs.unit_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "workspace")
               "onDidChangeTunnels")
        let (registerRemoteAuthorityResolver :
          authorityPrefix:string ->
            resolver:RemoteAuthorityResolver.t -> Disposable.t)
          =
          fun ~authorityPrefix:(x1994 : string) ->
            fun ~resolver:(x1995 : RemoteAuthorityResolver.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "workspace")
                   "registerRemoteAuthorityResolver"
                   [|(Ojs.string_to_js x1994);(RemoteAuthorityResolver.t_to_js
                                                 x1995)|])
        let (registerResourceLabelFormatter :
          formatter:ResourceLabelFormatter.t -> Disposable.t) =
          fun ~formatter:(x1996 : ResourceLabelFormatter.t) ->
            Disposable.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE__IMPORTS.vscode") "workspace")
                 "registerResourceLabelFormatter"
                 [|(ResourceLabelFormatter.t_to_js x1996)|])
        let (registerFileSearchProvider :
          scheme:string -> provider:FileSearchProvider.t -> Disposable.t) =
          fun ~scheme:(x1997 : string) ->
            fun ~provider:(x1998 : FileSearchProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "workspace")
                   "registerFileSearchProvider"
                   [|(Ojs.string_to_js x1997);(FileSearchProvider.t_to_js
                                                 x1998)|])
        let (registerTextSearchProvider :
          scheme:string -> provider:TextSearchProvider.t -> Disposable.t) =
          fun ~scheme:(x1999 : string) ->
            fun ~provider:(x2000 : TextSearchProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "workspace")
                   "registerTextSearchProvider"
                   [|(Ojs.string_to_js x1999);(TextSearchProvider.t_to_js
                                                 x2000)|])
        let (findTextInFiles :
          query:TextSearchQuery.t ->
            callback:(result:TextSearchResult.t -> unit) ->
              ?token:CancellationToken.t ->
                unit -> TextSearchComplete.t Promise.t)
          =
          fun ~query:(x2001 : TextSearchQuery.t) ->
            fun ~callback:(x2002 : result:TextSearchResult.t -> unit) ->
              fun ?token:(x2003 : CancellationToken.t option) ->
                fun () ->
                  Promise.t_of_js TextSearchComplete.t_of_js
                    (let x2007 =
                       Ojs.get_prop_ascii
                         (Ojs.get_prop_ascii Ojs.global
                            "__LIB__VSCODE__IMPORTS.vscode") "workspace" in
                     Ojs.call (Ojs.get_prop_ascii x2007 "findTextInFiles")
                       "apply"
                       [|x2007;((let x2004 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2004 "push"
                                      [|(TextSearchQuery.t_to_js x2001)|]);
                                 ignore
                                   (Ojs.call x2004 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x2006 : Ojs.t) ->
                                              x2002
                                                ~result:(TextSearchResult.t_of_js
                                                           x2006)))|]);
                                 (match x2003 with
                                  | Some x2005 ->
                                      ignore
                                        (Ojs.call x2004 "push"
                                           [|(CancellationToken.t_to_js x2005)|])
                                  | None -> ());
                                 x2004))|])
        let (findTextInFiles :
          query:TextSearchQuery.t ->
            options:FindTextInFilesOptions.t ->
              callback:(result:TextSearchResult.t -> unit) ->
                ?token:CancellationToken.t ->
                  unit -> TextSearchComplete.t Promise.t)
          =
          fun ~query:(x2009 : TextSearchQuery.t) ->
            fun ~options:(x2010 : FindTextInFilesOptions.t) ->
              fun ~callback:(x2011 : result:TextSearchResult.t -> unit) ->
                fun ?token:(x2012 : CancellationToken.t option) ->
                  fun () ->
                    Promise.t_of_js TextSearchComplete.t_of_js
                      (let x2016 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Ojs.global
                              "__LIB__VSCODE__IMPORTS.vscode") "workspace" in
                       Ojs.call (Ojs.get_prop_ascii x2016 "findTextInFiles")
                         "apply"
                         [|x2016;((let x2013 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x2013 "push"
                                        [|(TextSearchQuery.t_to_js x2009)|]);
                                   ignore
                                     (Ojs.call x2013 "push"
                                        [|(FindTextInFilesOptions.t_to_js
                                             x2010)|]);
                                   ignore
                                     (Ojs.call x2013 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x2015 : Ojs.t) ->
                                                x2011
                                                  ~result:(TextSearchResult.t_of_js
                                                             x2015)))|]);
                                   (match x2012 with
                                    | Some x2014 ->
                                        ignore
                                          (Ojs.call x2013 "push"
                                             [|(CancellationToken.t_to_js
                                                  x2014)|])
                                    | None -> ());
                                   x2013))|])
        let (registerTimelineProvider :
          scheme:string list or_string ->
            provider:TimelineProvider.t -> Disposable.t)
          =
          fun ~scheme:(x2018 : string list or_string) ->
            fun ~provider:(x2021 : TimelineProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "workspace")
                   "registerTimelineProvider"
                   [|(or_string_to_js
                        (fun (x2019 : string list) ->
                           Ojs.list_to_js Ojs.string_to_js x2019) x2018);(
                     TimelineProvider.t_to_js x2021)|])
        let (trustState : WorkspaceTrustState.t) =
          WorkspaceTrustState.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "workspace")
               "trustState")
        let (requestWorkspaceTrust :
          ?options:WorkspaceTrustRequestOptions.t ->
            unit -> WorkspaceTrustState.t or_undefined Promise.t)
          =
          fun ?options:(x2022 : WorkspaceTrustRequestOptions.t option) ->
            fun () ->
              Promise.t_of_js
                (fun (x2026 : Ojs.t) ->
                   or_undefined_of_js WorkspaceTrustState.t_of_js x2026)
                (let x2025 =
                   Ojs.get_prop_ascii
                     (Ojs.get_prop_ascii Ojs.global
                        "__LIB__VSCODE__IMPORTS.vscode") "workspace" in
                 Ojs.call (Ojs.get_prop_ascii x2025 "requestWorkspaceTrust")
                   "apply"
                   [|x2025;((let x2023 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2022 with
                              | Some x2024 ->
                                  ignore
                                    (Ojs.call x2023 "push"
                                       [|(WorkspaceTrustRequestOptions.t_to_js
                                            x2024)|])
                              | None -> ());
                             x2023))|])
        let (onDidChangeWorkspaceTrustState :
          WorkspaceTrustStateChangeEvent.t Event.t) =
          Event.t_of_js WorkspaceTrustStateChangeEvent.t_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE__IMPORTS.vscode") "workspace")
               "onDidChangeWorkspaceTrustState")
        let (registerPortAttributesProvider :
          portSelector:AnonymousInterface10.t ->
            provider:PortAttributesProvider.t -> Disposable.t)
          =
          fun ~portSelector:(x2029 : AnonymousInterface10.t) ->
            fun ~provider:(x2030 : PortAttributesProvider.t) ->
              Disposable.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global
                         "__LIB__VSCODE__IMPORTS.vscode") "workspace")
                   "registerPortAttributesProvider"
                   [|(AnonymousInterface10.t_to_js x2029);(PortAttributesProvider.t_to_js
                                                             x2030)|])
      end
  end
include struct include Vscode end
