[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Revocable =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_proxy : t -> 'T) =
      fun (x3 : t) -> Obj.magic (Ojs.get_prop_ascii (t_to_js x3) "proxy")
    let (set_proxy : t -> 'T -> unit) =
      fun (x4 : t) ->
        fun (x5 : 'T) ->
          Ojs.set_prop_ascii (t_to_js x4) "proxy" (Obj.magic x5)
    let (revoke : t -> unit) =
      fun (x6 : t) -> ignore (Ojs.call (t_to_js x6) "revoke" [||])
  end
module ProxyHandler =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x8 : Ojs.t) -> x8
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x7 : Ojs.t) -> x7
    let (apply :
      'T t -> target:'T -> thisArg:any -> argArray:any list -> any) =
      fun (x13 : 'T t) ->
        fun ~target:(x9 : 'T) ->
          fun ~thisArg:(x10 : any) ->
            fun ~argArray:(x11 : any list) ->
              any_of_js
                (Ojs.call (t_to_js Obj.magic x13) "apply"
                   [|(Obj.magic x9);(any_to_js x10);(Ojs.list_to_js any_to_js
                                                       x11)|])
    let (construct :
      'T t ->
        target:'T ->
          argArray:any list -> newTarget:untyped_function -> untyped_object)
      =
      fun (x19 : 'T t) ->
        fun ~target:(x15 : 'T) ->
          fun ~argArray:(x16 : any list) ->
            fun ~newTarget:(x18 : untyped_function) ->
              untyped_object_of_js
                (Ojs.call (t_to_js Obj.magic x19) "construct"
                   [|(Obj.magic x15);(Ojs.list_to_js any_to_js x16);(
                     untyped_function_to_js x18)|])
    let (define_property :
      'T t ->
        target:'T ->
          p:symbol or_string -> attributes:PropertyDescriptor.t -> bool)
      =
      fun (x25 : 'T t) ->
        fun ~target:(x21 : 'T) ->
          fun ~p:(x22 : symbol or_string) ->
            fun ~attributes:(x24 : PropertyDescriptor.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js Obj.magic x25) "defineProperty"
                   [|(Obj.magic x21);(or_string_to_js symbol_to_js x22);(
                     PropertyDescriptor.t_to_js x24)|])
    let (delete_property : 'T t -> target:'T -> p:symbol or_string -> bool) =
      fun (x30 : 'T t) ->
        fun ~target:(x27 : 'T) ->
          fun ~p:(x28 : symbol or_string) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x30) "deleteProperty"
                 [|(Obj.magic x27);(or_string_to_js symbol_to_js x28)|])
    let (get :
      'T t -> target:'T -> p:symbol or_string -> receiver:any -> any) =
      fun (x36 : 'T t) ->
        fun ~target:(x32 : 'T) ->
          fun ~p:(x33 : symbol or_string) ->
            fun ~receiver:(x35 : any) ->
              any_of_js
                (Ojs.call (t_to_js Obj.magic x36) "get"
                   [|(Obj.magic x32);(or_string_to_js symbol_to_js x33);(
                     any_to_js x35)|])
    let (get_own_property_descriptor :
      'T t ->
        target:'T -> p:symbol or_string -> PropertyDescriptor.t or_undefined)
      =
      fun (x41 : 'T t) ->
        fun ~target:(x38 : 'T) ->
          fun ~p:(x39 : symbol or_string) ->
            or_undefined_of_js PropertyDescriptor.t_of_js
              (Ojs.call (t_to_js Obj.magic x41) "getOwnPropertyDescriptor"
                 [|(Obj.magic x38);(or_string_to_js symbol_to_js x39)|])
    let (get_prototype_of : 'T t -> target:'T -> untyped_object or_null) =
      fun (x45 : 'T t) ->
        fun ~target:(x44 : 'T) ->
          or_null_of_js untyped_object_of_js
            (Ojs.call (t_to_js Obj.magic x45) "getPrototypeOf"
               [|(Obj.magic x44)|])
    let (has : 'T t -> target:'T -> p:symbol or_string -> bool) =
      fun (x51 : 'T t) ->
        fun ~target:(x48 : 'T) ->
          fun ~p:(x49 : symbol or_string) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x51) "has"
                 [|(Obj.magic x48);(or_string_to_js symbol_to_js x49)|])
    let (is_extensible : 'T t -> target:'T -> bool) =
      fun (x54 : 'T t) ->
        fun ~target:(x53 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js Obj.magic x54) "isExtensible"
               [|(Obj.magic x53)|])
    let (own_keys : 'T t -> target:'T -> symbol or_string Array.t) =
      fun (x57 : 'T t) ->
        fun ~target:(x56 : 'T) ->
          Array.t_of_js
            (fun (x59 : Ojs.t) -> or_string_of_js symbol_of_js x59)
            (Ojs.call (t_to_js Obj.magic x57) "ownKeys" [|(Obj.magic x56)|])
    let (prevent_extensions : 'T t -> target:'T -> bool) =
      fun (x62 : 'T t) ->
        fun ~target:(x61 : 'T) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js Obj.magic x62) "preventExtensions"
               [|(Obj.magic x61)|])
    let (set :
      'T t ->
        target:'T -> p:symbol or_string -> value:any -> receiver:any -> bool)
      =
      fun (x69 : 'T t) ->
        fun ~target:(x64 : 'T) ->
          fun ~p:(x65 : symbol or_string) ->
            fun ~value:(x67 : any) ->
              fun ~receiver:(x68 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js Obj.magic x69) "set"
                     [|(Obj.magic x64);(or_string_to_js symbol_to_js x65);(
                       any_to_js x67);(any_to_js x68)|])
    let (set_prototype_of :
      'T t -> target:'T -> v:untyped_object or_null -> bool) =
      fun (x74 : 'T t) ->
        fun ~target:(x71 : 'T) ->
          fun ~v:(x72 : untyped_object or_null) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x74) "setPrototypeOf"
                 [|(Obj.magic x71);(or_null_to_js untyped_object_to_js x72)|])
  end
module ProxyConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x77 : Ojs.t) -> x77
    and t_to_js : t -> Ojs.t = fun (x76 : Ojs.t) -> x76
    let (revocable :
      t -> target:'T -> handler:'T ProxyHandler.t -> Revocable.t) =
      fun (x81 : t) ->
        fun ~target:(x78 : 'T) ->
          fun ~handler:(x79 : 'T ProxyHandler.t) ->
            Revocable.t_of_js
              (Ojs.call (t_to_js x81) "revocable"
                 [|(Obj.magic x78);(ProxyHandler.t_to_js Obj.magic x79)|])
    let (create : t -> target:'T -> handler:'T ProxyHandler.t -> 'T) =
      fun (x85 : t) ->
        fun ~target:(x82 : 'T) ->
          fun ~handler:(x83 : 'T ProxyHandler.t) ->
            Obj.magic
              (Ojs.new_obj (t_to_js x85)
                 [|(Obj.magic x82);(ProxyHandler.t_to_js Obj.magic x83)|])
  end
let (proxy : ProxyConstructor.t) =
  ProxyConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Proxy")
