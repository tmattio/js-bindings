[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
open Es2015_symbol
open Es2015_collection
module SymbolConstructor =
  struct
    include struct include SymbolConstructor end
    let (get_iterator : t -> symbol) =
      fun (x1 : t) ->
        symbol_of_js (Ojs.get_prop_ascii (t_to_js x1) "iterator")
  end
module IteratorYieldResult =
  struct
    type 'TYield t = Ojs.t
    let rec t_of_js : 'TYield . (Ojs.t -> 'TYield) -> Ojs.t -> 'TYield t =
      fun (type __TYield) ->
      fun (__TYield_of_js : Ojs.t -> __TYield) -> fun (x3 : Ojs.t) -> x3
    and t_to_js : 'TYield . ('TYield -> Ojs.t) -> 'TYield t -> Ojs.t = fun
      (type __TYield) ->
      fun (__TYield_to_js : __TYield -> Ojs.t) -> fun (x2 : Ojs.t) -> x2
    let (get_done : 'TYield t -> [ `L_b_false ]) =
      fun (x4 : 'TYield t) ->
        let x6 = Ojs.get_prop_ascii (t_to_js Obj.magic x4) "done" in
        match Ojs.bool_of_js x6 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : 'TYield t -> [ `L_b_false ] -> unit) =
      fun (x7 : 'TYield t) ->
        fun (x8 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x7) "done"
            (match x8 with | `L_b_false -> Ojs.string_to_js "LBFalse")
    let (get_value : 'TYield t -> 'TYield) =
      fun (x10 : 'TYield t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x10) "value")
    let (set_value : 'TYield t -> 'TYield -> unit) =
      fun (x12 : 'TYield t) ->
        fun (x13 : 'TYield) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x12) "value" (Obj.magic x13)
  end
module IteratorReturnResult =
  struct
    type 'TReturn t = Ojs.t
    let rec t_of_js : 'TReturn . (Ojs.t -> 'TReturn) -> Ojs.t -> 'TReturn t =
      fun (type __TReturn) ->
      fun (__TReturn_of_js : Ojs.t -> __TReturn) -> fun (x16 : Ojs.t) -> x16
    and t_to_js : 'TReturn . ('TReturn -> Ojs.t) -> 'TReturn t -> Ojs.t = fun
      (type __TReturn) ->
      fun (__TReturn_to_js : __TReturn -> Ojs.t) -> fun (x15 : Ojs.t) -> x15
    let (get_done : 'TReturn t -> [ `L_b_true ]) =
      fun (x17 : 'TReturn t) ->
        let x19 = Ojs.get_prop_ascii (t_to_js Obj.magic x17) "done" in
        match Ojs.bool_of_js x19 with | true -> `L_b_true | _ -> assert false
    let (set_done : 'TReturn t -> [ `L_b_true ] -> unit) =
      fun (x20 : 'TReturn t) ->
        fun (x21 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x20) "done"
            (match x21 with | `L_b_true -> Ojs.string_to_js "LBTrue")
    let (get_value : 'TReturn t -> 'TReturn) =
      fun (x23 : 'TReturn t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x23) "value")
    let (set_value : 'TReturn t -> 'TReturn -> unit) =
      fun (x25 : 'TReturn t) ->
        fun (x26 : 'TReturn) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x25) "value" (Obj.magic x26)
  end
module IteratorResult =
  struct
    type ('T, 'TReturn) t =
      [ `false_ of 'T IteratorYieldResult.t 
      | `true_ of 'TReturn IteratorReturnResult.t ]
    let rec t_of_js :
      'T 'TReturn .
        (Ojs.t -> 'T) -> (Ojs.t -> 'TReturn) -> Ojs.t -> ('T, 'TReturn) t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (x33 : Ojs.t) ->
            let x34 = x33 in
            match Ojs.bool_of_js (Ojs.get_prop_ascii x34 "done") with
            | false -> `false_ (IteratorYieldResult.t_of_js __T_of_js x34)
            | true ->
                `true_ (IteratorReturnResult.t_of_js __TReturn_of_js x34)
    and t_to_js :
      'T 'TReturn .
        ('T -> Ojs.t) -> ('TReturn -> Ojs.t) -> ('T, 'TReturn) t -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun
            (x28 :
              [ `false_ of __T IteratorYieldResult.t 
              | `true_ of __TReturn IteratorReturnResult.t ])
            ->
            match x28 with
            | `false_ x29 -> IteratorYieldResult.t_to_js __T_to_js x29
            | `true_ x31 -> IteratorReturnResult.t_to_js __TReturn_to_js x31
  end
module Iterator =
  struct
    type ('T, 'TReturn, 'TNext) t = Ojs.t
    let rec t_of_js :
      'T 'TReturn 'TNext .
        (Ojs.t -> 'T) ->
          (Ojs.t -> 'TReturn) ->
            (Ojs.t -> 'TNext) -> Ojs.t -> ('T, 'TReturn, 'TNext) t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__TReturn_of_js : Ojs.t -> __TReturn) ->
          fun (__TNext_of_js : Ojs.t -> __TNext) -> fun (x38 : Ojs.t) -> x38
    and t_to_js :
      'T 'TReturn 'TNext .
        ('T -> Ojs.t) ->
          ('TReturn -> Ojs.t) ->
            ('TNext -> Ojs.t) -> ('T, 'TReturn, 'TNext) t -> Ojs.t
      = fun (type __T) -> fun (type __TReturn) -> fun (type __TNext) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__TReturn_to_js : __TReturn -> Ojs.t) ->
          fun (__TNext_to_js : __TNext -> Ojs.t) -> fun (x37 : Ojs.t) -> x37
    let (next :
      ('T, 'TReturn, 'TNext) t ->
        args:any list -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x42 : ('T, 'TReturn, 'TNext) t) ->
        fun ~args:(x39 : any list) ->
          IteratorResult.t_of_js Obj.magic Obj.magic
            (let x46 = t_to_js Obj.magic Obj.magic Obj.magic x42 in
             Ojs.call (Ojs.get_prop_ascii x46 "next") "apply"
               [|x46;((let x40 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x41 : any) ->
                            ignore (Ojs.call x40 "push" [|(any_to_js x41)|]))
                         x39;
                       x40))|])
    let (return :
      ('T, 'TReturn, 'TNext) t ->
        ?value:'TReturn -> unit -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x52 : ('T, 'TReturn, 'TNext) t) ->
        fun ?value:(x49 : 'TReturn option) ->
          fun () ->
            IteratorResult.t_of_js Obj.magic Obj.magic
              (let x56 = t_to_js Obj.magic Obj.magic Obj.magic x52 in
               Ojs.call (Ojs.get_prop_ascii x56 "return") "apply"
                 [|x56;((let x50 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x49 with
                          | Some x51 ->
                              ignore
                                (Ojs.call x50 "push" [|(Obj.magic x51)|])
                          | None -> ());
                         x50))|])
    let (throw :
      ('T, 'TReturn, 'TNext) t ->
        ?e:any -> unit -> ('T, 'TReturn) IteratorResult.t)
      =
      fun (x62 : ('T, 'TReturn, 'TNext) t) ->
        fun ?e:(x59 : any option) ->
          fun () ->
            IteratorResult.t_of_js Obj.magic Obj.magic
              (let x66 = t_to_js Obj.magic Obj.magic Obj.magic x62 in
               Ojs.call (Ojs.get_prop_ascii x66 "throw") "apply"
                 [|x66;((let x60 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x59 with
                          | Some x61 ->
                              ignore
                                (Ojs.call x60 "push" [|(any_to_js x61)|])
                          | None -> ());
                         x60))|])
  end
module Iterable =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x70 : Ojs.t) -> x70
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x69 : Ojs.t) -> x69
  end
module IterableIterator =
  struct
    type 'T t = ('T, any, never or_undefined) Iterator.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x76 : Ojs.t) ->
          Iterator.t_of_js __T_of_js any_of_js
            (fun (x79 : Ojs.t) -> or_undefined_of_js never_of_js x79) x76
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x71 : (__T, any, never or_undefined) Iterator.t) ->
          Iterator.t_to_js __T_to_js any_to_js
            (fun (x74 : never or_undefined) ->
               or_undefined_to_js never_to_js x74) x71
  end
module Array =
  struct
    include struct include Array end
    let (entries : 'T t -> (int * 'T) IterableIterator.t) =
      fun (x81 : 'T t) ->
        IterableIterator.t_of_js
          (fun (x83 : Ojs.t) ->
             let x84 = x83 in
             ((Ojs.int_of_js (Ojs.array_get x84 0)),
               (Obj.magic (Ojs.array_get x84 1))))
          (Ojs.call (t_to_js Obj.magic x81) "entries" [||])
    let (keys : 'T t -> int IterableIterator.t) =
      fun (x85 : 'T t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js Obj.magic x85) "keys" [||])
    let (values : 'T t -> 'T IterableIterator.t) =
      fun (x88 : 'T t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x88) "values" [||])
    let (to_ml : 'T t -> 'T list) =
      fun (x91 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x91)
    let (of_ml : 'T list -> 'T t) =
      fun (x94 : 'T list) -> t_of_js Obj.magic (Ojs.list_to_js Obj.magic x94)
    let (from_iterable :
      iterable:('T Array.t, 'T Iterable.t) union2 -> 'T list) =
      fun ~iterable:(x97 : ('T Array.t, 'T Iterable.t) union2) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "from"
             [|(union2_to_js
                  (fun (x98 : 'T Array.t) -> Array.t_to_js Obj.magic x98)
                  (fun (x100 : 'T Iterable.t) ->
                     Iterable.t_to_js Obj.magic x100) x97)|])
    let (from_iterable' :
      iterable:('T Array.t, 'T Iterable.t) union2 ->
        mapfn:(v:'T -> k:int -> 'U) -> ?thisArg:any -> unit -> 'U list)
      =
      fun ~iterable:(x103 : ('T Array.t, 'T Iterable.t) union2) ->
        fun ~mapfn:(x104 : v:'T -> k:int -> 'U) ->
          fun ?thisArg:(x105 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x114 = Ojs.get_prop_ascii Ojs.global "Array" in
                 Ojs.call (Ojs.get_prop_ascii x114 "from") "apply"
                   [|x114;((let x106 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x106 "push"
                                 [|(union2_to_js
                                      (fun (x110 : 'T Array.t) ->
                                         Array.t_to_js Obj.magic x110)
                                      (fun (x112 : 'T Iterable.t) ->
                                         Iterable.t_to_js Obj.magic x112)
                                      x103)|]);
                            ignore
                              (Ojs.call x106 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x108 : Ojs.t) ->
                                         fun (x109 : Ojs.t) ->
                                           Obj.magic
                                             (x104 ~v:(Obj.magic x108)
                                                ~k:(Ojs.int_of_js x109))))|]);
                            (match x105 with
                             | Some x107 ->
                                 ignore
                                   (Ojs.call x106 "push" [|(any_to_js x107)|])
                             | None -> ());
                            x106))|])
  end
module ArrayConstructor =
  struct
    include struct include ArrayConstructor end
    let (from_iterable :
      t -> iterable:('T Array.t, 'T Iterable.t) union2 -> 'T list) =
      fun (x121 : t) ->
        fun ~iterable:(x116 : ('T Array.t, 'T Iterable.t) union2) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x121) "from"
               [|(union2_to_js
                    (fun (x117 : 'T Array.t) -> Array.t_to_js Obj.magic x117)
                    (fun (x119 : 'T Iterable.t) ->
                       Iterable.t_to_js Obj.magic x119) x116)|])
    let (from_iterable' :
      t ->
        iterable:('T Array.t, 'T Iterable.t) union2 ->
          mapfn:(v:'T -> k:int -> 'U) -> ?thisArg:any -> unit -> 'U list)
      =
      fun (x134 : t) ->
        fun ~iterable:(x123 : ('T Array.t, 'T Iterable.t) union2) ->
          fun ~mapfn:(x124 : v:'T -> k:int -> 'U) ->
            fun ?thisArg:(x125 : any option) ->
              fun () ->
                Ojs.list_of_js Obj.magic
                  (let x135 = t_to_js x134 in
                   Ojs.call (Ojs.get_prop_ascii x135 "from") "apply"
                     [|x135;((let x126 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x126 "push"
                                   [|(union2_to_js
                                        (fun (x130 : 'T Array.t) ->
                                           Array.t_to_js Obj.magic x130)
                                        (fun (x132 : 'T Iterable.t) ->
                                           Iterable.t_to_js Obj.magic x132)
                                        x123)|]);
                              ignore
                                (Ojs.call x126 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x128 : Ojs.t) ->
                                           fun (x129 : Ojs.t) ->
                                             Obj.magic
                                               (x124 ~v:(Obj.magic x128)
                                                  ~k:(Ojs.int_of_js x129))))|]);
                              (match x125 with
                               | Some x127 ->
                                   ignore
                                     (Ojs.call x126 "push"
                                        [|(any_to_js x127)|])
                               | None -> ());
                              x126))|])
  end
module ReadonlyArray =
  struct
    include struct include ReadonlyArray end
    let (entries : 'T t -> (int * 'T) IterableIterator.t) =
      fun (x137 : 'T t) ->
        IterableIterator.t_of_js
          (fun (x139 : Ojs.t) ->
             let x140 = x139 in
             ((Ojs.int_of_js (Ojs.array_get x140 0)),
               (Obj.magic (Ojs.array_get x140 1))))
          (Ojs.call (t_to_js Obj.magic x137) "entries" [||])
    let (keys : 'T t -> int IterableIterator.t) =
      fun (x141 : 'T t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js Obj.magic x141) "keys" [||])
    let (values : 'T t -> 'T IterableIterator.t) =
      fun (x144 : 'T t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x144) "values" [||])
    let (to_ml : 'T t -> 'T list) =
      fun (x147 : 'T t) -> Ojs.list_of_js Obj.magic (t_to_js Obj.magic x147)
    let (of_ml : 'T list -> 'T t) =
      fun (x150 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x150)
  end
module IArguments = struct include struct include IArguments end end
module Map =
  struct
    include struct include Map end
    let (entries : ('K, 'V) t -> ('K * 'V) IterableIterator.t) =
      fun (x153 : ('K, 'V) t) ->
        IterableIterator.t_of_js
          (fun (x156 : Ojs.t) ->
             let x157 = x156 in
             ((Obj.magic (Ojs.array_get x157 0)),
               (Obj.magic (Ojs.array_get x157 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x153) "entries" [||])
    let (keys : ('K, 'V) t -> 'K IterableIterator.t) =
      fun (x158 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x158) "keys" [||])
    let (values : ('K, 'V) t -> 'V IterableIterator.t) =
      fun (x162 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x162) "values" [||])
    let (create_iterable : iterable:('K * 'V) Iterable.t -> ('K, 'V) t) =
      fun ~iterable:(x166 : ('K * 'V) Iterable.t) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Map")
             [|(Iterable.t_to_js
                  (fun (x167 : ('K * 'V)) ->
                     let (x168, x169) = x167 in
                     let x170 = Ojs.array_make 2 in
                     Ojs.array_set x170 0 (Obj.magic x168);
                     Ojs.array_set x170 1 (Obj.magic x169);
                     x170) x166)|])
  end
module ReadonlyMap =
  struct
    include struct include ReadonlyMap end
    let (entries : ('K, 'V) t -> ('K * 'V) IterableIterator.t) =
      fun (x173 : ('K, 'V) t) ->
        IterableIterator.t_of_js
          (fun (x176 : Ojs.t) ->
             let x177 = x176 in
             ((Obj.magic (Ojs.array_get x177 0)),
               (Obj.magic (Ojs.array_get x177 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x173) "entries" [||])
    let (keys : ('K, 'V) t -> 'K IterableIterator.t) =
      fun (x178 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x178) "keys" [||])
    let (values : ('K, 'V) t -> 'V IterableIterator.t) =
      fun (x182 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x182) "values" [||])
  end
module MapConstructor =
  struct
    include struct include MapConstructor end
    let (create_iterable :
      t -> iterable:('K * 'V) Iterable.t -> ('K, 'V) Map.t) =
      fun (x191 : t) ->
        fun ~iterable:(x186 : ('K * 'V) Iterable.t) ->
          Map.t_of_js Obj.magic Obj.magic
            (Ojs.new_obj (t_to_js x191)
               [|(Iterable.t_to_js
                    (fun (x187 : ('K * 'V)) ->
                       let (x188, x189) = x187 in
                       let x190 = Ojs.array_make 2 in
                       Ojs.array_set x190 0 (Obj.magic x188);
                       Ojs.array_set x190 1 (Obj.magic x189);
                       x190) x186)|])
  end
module WeakMap =
  struct
    include struct include WeakMap end
    let (create_iterable : iterable:('K * 'V) Iterable.t -> ('K, 'V) t) =
      fun ~iterable:(x194 : ('K * 'V) Iterable.t) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WeakMap")
             [|(Iterable.t_to_js
                  (fun (x195 : ('K * 'V)) ->
                     let (x196, x197) = x195 in
                     let x198 = Ojs.array_make 2 in
                     Ojs.array_set x198 0 (Obj.magic x196);
                     Ojs.array_set x198 1 (Obj.magic x197);
                     x198) x194)|])
  end
module WeakMapConstructor =
  struct
    include struct include WeakMapConstructor end
    let (create_iterable :
      t -> iterable:('K * 'V) Iterable.t -> ('K, 'V) WeakMap.t) =
      fun (x206 : t) ->
        fun ~iterable:(x201 : ('K * 'V) Iterable.t) ->
          WeakMap.t_of_js Obj.magic Obj.magic
            (Ojs.new_obj (t_to_js x206)
               [|(Iterable.t_to_js
                    (fun (x202 : ('K * 'V)) ->
                       let (x203, x204) = x202 in
                       let x205 = Ojs.array_make 2 in
                       Ojs.array_set x205 0 (Obj.magic x203);
                       Ojs.array_set x205 1 (Obj.magic x204);
                       x205) x201)|])
  end
module Set =
  struct
    include struct include Set end
    let (entries : 'T t -> ('T * 'T) IterableIterator.t) =
      fun (x209 : 'T t) ->
        IterableIterator.t_of_js
          (fun (x211 : Ojs.t) ->
             let x212 = x211 in
             ((Obj.magic (Ojs.array_get x212 0)),
               (Obj.magic (Ojs.array_get x212 1))))
          (Ojs.call (t_to_js Obj.magic x209) "entries" [||])
    let (keys : 'T t -> 'T IterableIterator.t) =
      fun (x213 : 'T t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x213) "keys" [||])
    let (values : 'T t -> 'T IterableIterator.t) =
      fun (x216 : 'T t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x216) "values" [||])
    let (create_iterable : ?iterable:'T Iterable.t or_null -> unit -> 'T t) =
      fun ?iterable:(x219 : 'T Iterable.t or_null option) ->
        fun () ->
          t_of_js Obj.magic
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Set")
               (let x220 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x219 with
                 | Some x221 ->
                     ignore
                       (Ojs.call x220 "push"
                          [|(or_null_to_js
                               (fun (x222 : 'T Iterable.t) ->
                                  Iterable.t_to_js Obj.magic x222) x221)|])
                 | None -> ());
                x220))
  end
module ReadonlySet =
  struct
    include struct include ReadonlySet end
    let (entries : 'T t -> ('T * 'T) IterableIterator.t) =
      fun (x225 : 'T t) ->
        IterableIterator.t_of_js
          (fun (x227 : Ojs.t) ->
             let x228 = x227 in
             ((Obj.magic (Ojs.array_get x228 0)),
               (Obj.magic (Ojs.array_get x228 1))))
          (Ojs.call (t_to_js Obj.magic x225) "entries" [||])
    let (keys : 'T t -> 'T IterableIterator.t) =
      fun (x229 : 'T t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x229) "keys" [||])
    let (values : 'T t -> 'T IterableIterator.t) =
      fun (x232 : 'T t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x232) "values" [||])
  end
module SetConstructor =
  struct
    include struct include SetConstructor end
    let (create_iterable :
      t -> ?iterable:'T Iterable.t or_null -> unit -> 'T Set.t) =
      fun (x240 : t) ->
        fun ?iterable:(x235 : 'T Iterable.t or_null option) ->
          fun () ->
            Set.t_of_js Obj.magic
              (Ojs.new_obj_arr (t_to_js x240)
                 (let x236 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x235 with
                   | Some x237 ->
                       ignore
                         (Ojs.call x236 "push"
                            [|(or_null_to_js
                                 (fun (x238 : 'T Iterable.t) ->
                                    Iterable.t_to_js Obj.magic x238) x237)|])
                   | None -> ());
                  x236))
  end
module WeakSet =
  struct
    include struct include WeakSet end
    let (create_iterable : iterable:'T Iterable.t -> 'T t) =
      fun ~iterable:(x242 : 'T Iterable.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WeakSet")
             [|(Iterable.t_to_js Obj.magic x242)|])
  end
module WeakSetConstructor =
  struct
    include struct include WeakSetConstructor end
    let (create_iterable : t -> iterable:'T Iterable.t -> 'T WeakSet.t) =
      fun (x247 : t) ->
        fun ~iterable:(x245 : 'T Iterable.t) ->
          WeakSet.t_of_js Obj.magic
            (Ojs.new_obj (t_to_js x247) [|(Iterable.t_to_js Obj.magic x245)|])
  end
module Promise =
  struct
    include struct include Promise end
    let (all_iterable : 'T Promise.t Iterable.t -> 'T list t) =
      fun (x249 : 'T Promise.t Iterable.t) ->
        t_of_js (fun (x252 : Ojs.t) -> Ojs.list_of_js Obj.magic x252)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "all"
             [|(Iterable.t_to_js
                  (fun (x250 : 'T Promise.t) ->
                     Promise.t_to_js Obj.magic x250) x249)|])
    let (race_iterable : 'T Promise.t Iterable.t -> 'T t) =
      fun (x254 : 'T Promise.t Iterable.t) ->
        t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "race"
             [|(Iterable.t_to_js
                  (fun (x255 : 'T Promise.t) ->
                     Promise.t_to_js Obj.magic x255) x254)|])
  end
module PromiseConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x259 : Ojs.t) -> x259
    and t_to_js : t -> Ojs.t = fun (x258 : Ojs.t) -> x258
    let (all_iterable : t -> 'T Promise.t Iterable.t -> 'T list Promise.t) =
      fun (x263 : t) ->
        fun (x260 : 'T Promise.t Iterable.t) ->
          Promise.t_of_js
            (fun (x264 : Ojs.t) -> Ojs.list_of_js Obj.magic x264)
            (Ojs.call (t_to_js x263) "all"
               [|(Iterable.t_to_js
                    (fun (x261 : 'T Promise.t) ->
                       Promise.t_to_js Obj.magic x261) x260)|])
    let (race_iterable : t -> 'T Promise.t Iterable.t -> 'T Promise.t) =
      fun (x269 : t) ->
        fun (x266 : 'T Promise.t Iterable.t) ->
          Promise.t_of_js Obj.magic
            (Ojs.call (t_to_js x269) "race"
               [|(Iterable.t_to_js
                    (fun (x267 : 'T Promise.t) ->
                       Promise.t_to_js Obj.magic x267) x266)|])
  end
module String =
  struct
    include struct include String end
    let (to_ml : t -> string) =
      fun (x271 : t) -> Ojs.string_of_js (t_to_js x271)
    let (of_ml : string -> t) =
      fun (x272 : string) -> t_of_js (Ojs.string_to_js x272)
  end
module Int8Array =
  struct
    include struct include Int8Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x273 : t) ->
        IterableIterator.t_of_js
          (fun (x274 : Ojs.t) ->
             let x275 = x274 in
             ((Ojs.int_of_js (Ojs.array_get x275 0)),
               (Ojs.int_of_js (Ojs.array_get x275 1))))
          (Ojs.call (t_to_js x273) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x276 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x276) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x278 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x278) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x280 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(Iterable.t_to_js Ojs.int_to_js x280)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x282 : int Iterable.t) ->
        fun ?mapfn:(x283 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x284 : any option) ->
            fun () ->
              t_of_js
                (let x291 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
                 Ojs.call (Ojs.get_prop_ascii x291 "from") "apply"
                   [|x291;((let x285 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x285 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x282)|]);
                            (match x283 with
                             | Some x287 ->
                                 ignore
                                   (Ojs.call x285 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x288 : Ojs.t) ->
                                              fun (x289 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x287
                                                     ~v:(Ojs.int_of_js x288)
                                                     ~k:(Ojs.int_of_js x289))))|])
                             | None -> ());
                            (match x284 with
                             | Some x286 ->
                                 ignore
                                   (Ojs.call x285 "push" [|(any_to_js x286)|])
                             | None -> ());
                            x285))|])
  end
module Int8ArrayConstructor =
  struct
    include struct include Int8ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Int8Array.t) =
      fun (x294 : t) ->
        fun (x292 : int Iterable.t) ->
          Int8Array.t_of_js
            (Ojs.new_obj (t_to_js x294)
               [|(Iterable.t_to_js Ojs.int_to_js x292)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Int8Array.t)
      =
      fun (x304 : t) ->
        fun ~array:(x295 : int Iterable.t) ->
          fun ?mapfn:(x296 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x297 : any option) ->
              fun () ->
                Int8Array.t_of_js
                  (let x305 = t_to_js x304 in
                   Ojs.call (Ojs.get_prop_ascii x305 "from") "apply"
                     [|x305;((let x298 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x298 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x295)|]);
                              (match x296 with
                               | Some x300 ->
                                   ignore
                                     (Ojs.call x298 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x301 : Ojs.t) ->
                                                fun (x302 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x300
                                                       ~v:(Ojs.int_of_js x301)
                                                       ~k:(Ojs.int_of_js x302))))|])
                               | None -> ());
                              (match x297 with
                               | Some x299 ->
                                   ignore
                                     (Ojs.call x298 "push"
                                        [|(any_to_js x299)|])
                               | None -> ());
                              x298))|])
  end
module Uint8Array =
  struct
    include struct include Uint8Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x306 : t) ->
        IterableIterator.t_of_js
          (fun (x307 : Ojs.t) ->
             let x308 = x307 in
             ((Ojs.int_of_js (Ojs.array_get x308 0)),
               (Ojs.int_of_js (Ojs.array_get x308 1))))
          (Ojs.call (t_to_js x306) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x309 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x309) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x311 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x311) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x313 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(Iterable.t_to_js Ojs.int_to_js x313)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x315 : int Iterable.t) ->
        fun ?mapfn:(x316 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x317 : any option) ->
            fun () ->
              t_of_js
                (let x324 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
                 Ojs.call (Ojs.get_prop_ascii x324 "from") "apply"
                   [|x324;((let x318 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x318 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x315)|]);
                            (match x316 with
                             | Some x320 ->
                                 ignore
                                   (Ojs.call x318 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x321 : Ojs.t) ->
                                              fun (x322 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x320
                                                     ~v:(Ojs.int_of_js x321)
                                                     ~k:(Ojs.int_of_js x322))))|])
                             | None -> ());
                            (match x317 with
                             | Some x319 ->
                                 ignore
                                   (Ojs.call x318 "push" [|(any_to_js x319)|])
                             | None -> ());
                            x318))|])
  end
module Uint8ArrayConstructor =
  struct
    include struct include Uint8ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Uint8Array.t) =
      fun (x327 : t) ->
        fun (x325 : int Iterable.t) ->
          Uint8Array.t_of_js
            (Ojs.new_obj (t_to_js x327)
               [|(Iterable.t_to_js Ojs.int_to_js x325)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint8Array.t)
      =
      fun (x337 : t) ->
        fun ~array:(x328 : int Iterable.t) ->
          fun ?mapfn:(x329 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x330 : any option) ->
              fun () ->
                Uint8Array.t_of_js
                  (let x338 = t_to_js x337 in
                   Ojs.call (Ojs.get_prop_ascii x338 "from") "apply"
                     [|x338;((let x331 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x331 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x328)|]);
                              (match x329 with
                               | Some x333 ->
                                   ignore
                                     (Ojs.call x331 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x334 : Ojs.t) ->
                                                fun (x335 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x333
                                                       ~v:(Ojs.int_of_js x334)
                                                       ~k:(Ojs.int_of_js x335))))|])
                               | None -> ());
                              (match x330 with
                               | Some x332 ->
                                   ignore
                                     (Ojs.call x331 "push"
                                        [|(any_to_js x332)|])
                               | None -> ());
                              x331))|])
  end
module Uint8ClampedArray =
  struct
    include struct include Uint8ClampedArray end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x339 : t) ->
        IterableIterator.t_of_js
          (fun (x340 : Ojs.t) ->
             let x341 = x340 in
             ((Ojs.int_of_js (Ojs.array_get x341 0)),
               (Ojs.int_of_js (Ojs.array_get x341 1))))
          (Ojs.call (t_to_js x339) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x342 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x342) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x344 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x344) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x346 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(Iterable.t_to_js Ojs.int_to_js x346)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x348 : int Iterable.t) ->
        fun ?mapfn:(x349 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x350 : any option) ->
            fun () ->
              t_of_js
                (let x357 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
                 Ojs.call (Ojs.get_prop_ascii x357 "from") "apply"
                   [|x357;((let x351 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x351 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x348)|]);
                            (match x349 with
                             | Some x353 ->
                                 ignore
                                   (Ojs.call x351 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x354 : Ojs.t) ->
                                              fun (x355 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x353
                                                     ~v:(Ojs.int_of_js x354)
                                                     ~k:(Ojs.int_of_js x355))))|])
                             | None -> ());
                            (match x350 with
                             | Some x352 ->
                                 ignore
                                   (Ojs.call x351 "push" [|(any_to_js x352)|])
                             | None -> ());
                            x351))|])
  end
module Uint8ClampedArrayConstructor =
  struct
    include struct include Uint8ClampedArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Uint8ClampedArray.t) =
      fun (x360 : t) ->
        fun (x358 : int Iterable.t) ->
          Uint8ClampedArray.t_of_js
            (Ojs.new_obj (t_to_js x360)
               [|(Iterable.t_to_js Ojs.int_to_js x358)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint8ClampedArray.t)
      =
      fun (x370 : t) ->
        fun ~array:(x361 : int Iterable.t) ->
          fun ?mapfn:(x362 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x363 : any option) ->
              fun () ->
                Uint8ClampedArray.t_of_js
                  (let x371 = t_to_js x370 in
                   Ojs.call (Ojs.get_prop_ascii x371 "from") "apply"
                     [|x371;((let x364 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x364 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x361)|]);
                              (match x362 with
                               | Some x366 ->
                                   ignore
                                     (Ojs.call x364 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x367 : Ojs.t) ->
                                                fun (x368 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x366
                                                       ~v:(Ojs.int_of_js x367)
                                                       ~k:(Ojs.int_of_js x368))))|])
                               | None -> ());
                              (match x363 with
                               | Some x365 ->
                                   ignore
                                     (Ojs.call x364 "push"
                                        [|(any_to_js x365)|])
                               | None -> ());
                              x364))|])
  end
module Int16Array =
  struct
    include struct include Int16Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x372 : t) ->
        IterableIterator.t_of_js
          (fun (x373 : Ojs.t) ->
             let x374 = x373 in
             ((Ojs.int_of_js (Ojs.array_get x374 0)),
               (Ojs.int_of_js (Ojs.array_get x374 1))))
          (Ojs.call (t_to_js x372) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x375 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x375) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x377 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x377) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x379 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(Iterable.t_to_js Ojs.int_to_js x379)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x381 : int Iterable.t) ->
        fun ?mapfn:(x382 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x383 : any option) ->
            fun () ->
              t_of_js
                (let x390 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
                 Ojs.call (Ojs.get_prop_ascii x390 "from") "apply"
                   [|x390;((let x384 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x384 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x381)|]);
                            (match x382 with
                             | Some x386 ->
                                 ignore
                                   (Ojs.call x384 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x387 : Ojs.t) ->
                                              fun (x388 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x386
                                                     ~v:(Ojs.int_of_js x387)
                                                     ~k:(Ojs.int_of_js x388))))|])
                             | None -> ());
                            (match x383 with
                             | Some x385 ->
                                 ignore
                                   (Ojs.call x384 "push" [|(any_to_js x385)|])
                             | None -> ());
                            x384))|])
  end
module Int16ArrayConstructor =
  struct
    include struct include Int16ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Int16Array.t) =
      fun (x393 : t) ->
        fun (x391 : int Iterable.t) ->
          Int16Array.t_of_js
            (Ojs.new_obj (t_to_js x393)
               [|(Iterable.t_to_js Ojs.int_to_js x391)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Int16Array.t)
      =
      fun (x403 : t) ->
        fun ~array:(x394 : int Iterable.t) ->
          fun ?mapfn:(x395 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x396 : any option) ->
              fun () ->
                Int16Array.t_of_js
                  (let x404 = t_to_js x403 in
                   Ojs.call (Ojs.get_prop_ascii x404 "from") "apply"
                     [|x404;((let x397 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x397 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x394)|]);
                              (match x395 with
                               | Some x399 ->
                                   ignore
                                     (Ojs.call x397 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x400 : Ojs.t) ->
                                                fun (x401 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x399
                                                       ~v:(Ojs.int_of_js x400)
                                                       ~k:(Ojs.int_of_js x401))))|])
                               | None -> ());
                              (match x396 with
                               | Some x398 ->
                                   ignore
                                     (Ojs.call x397 "push"
                                        [|(any_to_js x398)|])
                               | None -> ());
                              x397))|])
  end
module Uint16Array =
  struct
    include struct include Uint16Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x405 : t) ->
        IterableIterator.t_of_js
          (fun (x406 : Ojs.t) ->
             let x407 = x406 in
             ((Ojs.int_of_js (Ojs.array_get x407 0)),
               (Ojs.int_of_js (Ojs.array_get x407 1))))
          (Ojs.call (t_to_js x405) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x408 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x408) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x410 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x410) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x412 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(Iterable.t_to_js Ojs.int_to_js x412)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x414 : int Iterable.t) ->
        fun ?mapfn:(x415 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x416 : any option) ->
            fun () ->
              t_of_js
                (let x423 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
                 Ojs.call (Ojs.get_prop_ascii x423 "from") "apply"
                   [|x423;((let x417 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x417 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x414)|]);
                            (match x415 with
                             | Some x419 ->
                                 ignore
                                   (Ojs.call x417 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x420 : Ojs.t) ->
                                              fun (x421 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x419
                                                     ~v:(Ojs.int_of_js x420)
                                                     ~k:(Ojs.int_of_js x421))))|])
                             | None -> ());
                            (match x416 with
                             | Some x418 ->
                                 ignore
                                   (Ojs.call x417 "push" [|(any_to_js x418)|])
                             | None -> ());
                            x417))|])
  end
module Uint16ArrayConstructor =
  struct
    include struct include Uint16ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Uint16Array.t) =
      fun (x426 : t) ->
        fun (x424 : int Iterable.t) ->
          Uint16Array.t_of_js
            (Ojs.new_obj (t_to_js x426)
               [|(Iterable.t_to_js Ojs.int_to_js x424)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint16Array.t)
      =
      fun (x436 : t) ->
        fun ~array:(x427 : int Iterable.t) ->
          fun ?mapfn:(x428 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x429 : any option) ->
              fun () ->
                Uint16Array.t_of_js
                  (let x437 = t_to_js x436 in
                   Ojs.call (Ojs.get_prop_ascii x437 "from") "apply"
                     [|x437;((let x430 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x430 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x427)|]);
                              (match x428 with
                               | Some x432 ->
                                   ignore
                                     (Ojs.call x430 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x433 : Ojs.t) ->
                                                fun (x434 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x432
                                                       ~v:(Ojs.int_of_js x433)
                                                       ~k:(Ojs.int_of_js x434))))|])
                               | None -> ());
                              (match x429 with
                               | Some x431 ->
                                   ignore
                                     (Ojs.call x430 "push"
                                        [|(any_to_js x431)|])
                               | None -> ());
                              x430))|])
  end
module Int32Array =
  struct
    include struct include Int32Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x438 : t) ->
        IterableIterator.t_of_js
          (fun (x439 : Ojs.t) ->
             let x440 = x439 in
             ((Ojs.int_of_js (Ojs.array_get x440 0)),
               (Ojs.int_of_js (Ojs.array_get x440 1))))
          (Ojs.call (t_to_js x438) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x441 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x441) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x443 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x443) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x445 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(Iterable.t_to_js Ojs.int_to_js x445)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x447 : int Iterable.t) ->
        fun ?mapfn:(x448 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x449 : any option) ->
            fun () ->
              t_of_js
                (let x456 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
                 Ojs.call (Ojs.get_prop_ascii x456 "from") "apply"
                   [|x456;((let x450 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x450 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x447)|]);
                            (match x448 with
                             | Some x452 ->
                                 ignore
                                   (Ojs.call x450 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x453 : Ojs.t) ->
                                              fun (x454 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x452
                                                     ~v:(Ojs.int_of_js x453)
                                                     ~k:(Ojs.int_of_js x454))))|])
                             | None -> ());
                            (match x449 with
                             | Some x451 ->
                                 ignore
                                   (Ojs.call x450 "push" [|(any_to_js x451)|])
                             | None -> ());
                            x450))|])
  end
module Int32ArrayConstructor =
  struct
    include struct include Int32ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Int32Array.t) =
      fun (x459 : t) ->
        fun (x457 : int Iterable.t) ->
          Int32Array.t_of_js
            (Ojs.new_obj (t_to_js x459)
               [|(Iterable.t_to_js Ojs.int_to_js x457)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Int32Array.t)
      =
      fun (x469 : t) ->
        fun ~array:(x460 : int Iterable.t) ->
          fun ?mapfn:(x461 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x462 : any option) ->
              fun () ->
                Int32Array.t_of_js
                  (let x470 = t_to_js x469 in
                   Ojs.call (Ojs.get_prop_ascii x470 "from") "apply"
                     [|x470;((let x463 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x463 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x460)|]);
                              (match x461 with
                               | Some x465 ->
                                   ignore
                                     (Ojs.call x463 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x466 : Ojs.t) ->
                                                fun (x467 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x465
                                                       ~v:(Ojs.int_of_js x466)
                                                       ~k:(Ojs.int_of_js x467))))|])
                               | None -> ());
                              (match x462 with
                               | Some x464 ->
                                   ignore
                                     (Ojs.call x463 "push"
                                        [|(any_to_js x464)|])
                               | None -> ());
                              x463))|])
  end
module Uint32Array =
  struct
    include struct include Uint32Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x471 : t) ->
        IterableIterator.t_of_js
          (fun (x472 : Ojs.t) ->
             let x473 = x472 in
             ((Ojs.int_of_js (Ojs.array_get x473 0)),
               (Ojs.int_of_js (Ojs.array_get x473 1))))
          (Ojs.call (t_to_js x471) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x474 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x474) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x476 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x476) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x478 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(Iterable.t_to_js Ojs.int_to_js x478)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x480 : int Iterable.t) ->
        fun ?mapfn:(x481 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x482 : any option) ->
            fun () ->
              t_of_js
                (let x489 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
                 Ojs.call (Ojs.get_prop_ascii x489 "from") "apply"
                   [|x489;((let x483 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x483 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x480)|]);
                            (match x481 with
                             | Some x485 ->
                                 ignore
                                   (Ojs.call x483 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x486 : Ojs.t) ->
                                              fun (x487 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x485
                                                     ~v:(Ojs.int_of_js x486)
                                                     ~k:(Ojs.int_of_js x487))))|])
                             | None -> ());
                            (match x482 with
                             | Some x484 ->
                                 ignore
                                   (Ojs.call x483 "push" [|(any_to_js x484)|])
                             | None -> ());
                            x483))|])
  end
module Uint32ArrayConstructor =
  struct
    include struct include Uint32ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Uint32Array.t) =
      fun (x492 : t) ->
        fun (x490 : int Iterable.t) ->
          Uint32Array.t_of_js
            (Ojs.new_obj (t_to_js x492)
               [|(Iterable.t_to_js Ojs.int_to_js x490)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint32Array.t)
      =
      fun (x502 : t) ->
        fun ~array:(x493 : int Iterable.t) ->
          fun ?mapfn:(x494 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x495 : any option) ->
              fun () ->
                Uint32Array.t_of_js
                  (let x503 = t_to_js x502 in
                   Ojs.call (Ojs.get_prop_ascii x503 "from") "apply"
                     [|x503;((let x496 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x496 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x493)|]);
                              (match x494 with
                               | Some x498 ->
                                   ignore
                                     (Ojs.call x496 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x499 : Ojs.t) ->
                                                fun (x500 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x498
                                                       ~v:(Ojs.int_of_js x499)
                                                       ~k:(Ojs.int_of_js x500))))|])
                               | None -> ());
                              (match x495 with
                               | Some x497 ->
                                   ignore
                                     (Ojs.call x496 "push"
                                        [|(any_to_js x497)|])
                               | None -> ());
                              x496))|])
  end
module Float32Array =
  struct
    include struct include Float32Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x504 : t) ->
        IterableIterator.t_of_js
          (fun (x505 : Ojs.t) ->
             let x506 = x505 in
             ((Ojs.int_of_js (Ojs.array_get x506 0)),
               (Ojs.int_of_js (Ojs.array_get x506 1))))
          (Ojs.call (t_to_js x504) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x507 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x507) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x509 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x509) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x511 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(Iterable.t_to_js Ojs.int_to_js x511)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x513 : int Iterable.t) ->
        fun ?mapfn:(x514 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x515 : any option) ->
            fun () ->
              t_of_js
                (let x522 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
                 Ojs.call (Ojs.get_prop_ascii x522 "from") "apply"
                   [|x522;((let x516 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x516 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x513)|]);
                            (match x514 with
                             | Some x518 ->
                                 ignore
                                   (Ojs.call x516 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x519 : Ojs.t) ->
                                              fun (x520 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x518
                                                     ~v:(Ojs.int_of_js x519)
                                                     ~k:(Ojs.int_of_js x520))))|])
                             | None -> ());
                            (match x515 with
                             | Some x517 ->
                                 ignore
                                   (Ojs.call x516 "push" [|(any_to_js x517)|])
                             | None -> ());
                            x516))|])
  end
module Float32ArrayConstructor =
  struct
    include struct include Float32ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Float32Array.t) =
      fun (x525 : t) ->
        fun (x523 : int Iterable.t) ->
          Float32Array.t_of_js
            (Ojs.new_obj (t_to_js x525)
               [|(Iterable.t_to_js Ojs.int_to_js x523)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Float32Array.t)
      =
      fun (x535 : t) ->
        fun ~array:(x526 : int Iterable.t) ->
          fun ?mapfn:(x527 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x528 : any option) ->
              fun () ->
                Float32Array.t_of_js
                  (let x536 = t_to_js x535 in
                   Ojs.call (Ojs.get_prop_ascii x536 "from") "apply"
                     [|x536;((let x529 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x529 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x526)|]);
                              (match x527 with
                               | Some x531 ->
                                   ignore
                                     (Ojs.call x529 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x532 : Ojs.t) ->
                                                fun (x533 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x531
                                                       ~v:(Ojs.int_of_js x532)
                                                       ~k:(Ojs.int_of_js x533))))|])
                               | None -> ());
                              (match x528 with
                               | Some x530 ->
                                   ignore
                                     (Ojs.call x529 "push"
                                        [|(any_to_js x530)|])
                               | None -> ());
                              x529))|])
  end
module Float64Array =
  struct
    include struct include Float64Array end
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x537 : t) ->
        IterableIterator.t_of_js
          (fun (x538 : Ojs.t) ->
             let x539 = x538 in
             ((Ojs.int_of_js (Ojs.array_get x539 0)),
               (Ojs.int_of_js (Ojs.array_get x539 1))))
          (Ojs.call (t_to_js x537) "entries" [||])
    let (keys : t -> int IterableIterator.t) =
      fun (x540 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x540) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x542 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x542) "values" [||])
    let (create_iterable : int Iterable.t -> t) =
      fun (x544 : int Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(Iterable.t_to_js Ojs.int_to_js x544)|])
    let (from_iterable :
      array:int Iterable.t ->
        ?mapfn:(v:int -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x546 : int Iterable.t) ->
        fun ?mapfn:(x547 : (v:int -> k:int -> int) option) ->
          fun ?thisArg:(x548 : any option) ->
            fun () ->
              t_of_js
                (let x555 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
                 Ojs.call (Ojs.get_prop_ascii x555 "from") "apply"
                   [|x555;((let x549 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x549 "push"
                                 [|(Iterable.t_to_js Ojs.int_to_js x546)|]);
                            (match x547 with
                             | Some x551 ->
                                 ignore
                                   (Ojs.call x549 "push"
                                      [|(Ojs.fun_to_js 2
                                           (fun (x552 : Ojs.t) ->
                                              fun (x553 : Ojs.t) ->
                                                Ojs.int_to_js
                                                  (x551
                                                     ~v:(Ojs.int_of_js x552)
                                                     ~k:(Ojs.int_of_js x553))))|])
                             | None -> ());
                            (match x548 with
                             | Some x550 ->
                                 ignore
                                   (Ojs.call x549 "push" [|(any_to_js x550)|])
                             | None -> ());
                            x549))|])
  end
module Float64ArrayConstructor =
  struct
    include struct include Float64ArrayConstructor end
    let (create_iterable : t -> int Iterable.t -> Float64Array.t) =
      fun (x558 : t) ->
        fun (x556 : int Iterable.t) ->
          Float64Array.t_of_js
            (Ojs.new_obj (t_to_js x558)
               [|(Iterable.t_to_js Ojs.int_to_js x556)|])
    let (from_iterable :
      t ->
        array:int Iterable.t ->
          ?mapfn:(v:int -> k:int -> int) ->
            ?thisArg:any -> unit -> Float64Array.t)
      =
      fun (x568 : t) ->
        fun ~array:(x559 : int Iterable.t) ->
          fun ?mapfn:(x560 : (v:int -> k:int -> int) option) ->
            fun ?thisArg:(x561 : any option) ->
              fun () ->
                Float64Array.t_of_js
                  (let x569 = t_to_js x568 in
                   Ojs.call (Ojs.get_prop_ascii x569 "from") "apply"
                     [|x569;((let x562 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x562 "push"
                                   [|(Iterable.t_to_js Ojs.int_to_js x559)|]);
                              (match x560 with
                               | Some x564 ->
                                   ignore
                                     (Ojs.call x562 "push"
                                        [|(Ojs.fun_to_js 2
                                             (fun (x565 : Ojs.t) ->
                                                fun (x566 : Ojs.t) ->
                                                  Ojs.int_to_js
                                                    (x564
                                                       ~v:(Ojs.int_of_js x565)
                                                       ~k:(Ojs.int_of_js x566))))|])
                               | None -> ());
                              (match x561 with
                               | Some x563 ->
                                   ignore
                                     (Ojs.call x562 "push"
                                        [|(any_to_js x563)|])
                               | None -> ());
                              x562))|])
  end
