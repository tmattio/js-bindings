[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Symbol =
  struct
    include struct include Symbol end
    let (for_ : key:string -> symbol) =
      fun ~key:(x1 : string) ->
        symbol_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Symbol") "for"
             [|(Ojs.string_to_js x1)|])
    let (keyFor : sym:symbol -> string or_undefined) =
      fun ~sym:(x2 : symbol) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Symbol") "keyFor"
             [|(symbol_to_js x2)|])
  end
module SymbolConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x5 : Ojs.t) -> x5
    and t_to_js : t -> Ojs.t = fun (x4 : Ojs.t) -> x4
    let (get_prototype : t -> Symbol.t) =
      fun (x6 : t) ->
        Symbol.t_of_js (Ojs.get_prop_ascii (t_to_js x6) "prototype")
    let (apply : t -> ?description:string or_number -> unit -> symbol) =
      fun (x11 : t) ->
        fun ?description:(x7 : string or_number option) ->
          fun () ->
            symbol_of_js
              (Ojs.call (t_to_js x11) "apply"
                 [|Ojs.null;((let x8 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x7 with
                               | Some x9 ->
                                   ignore
                                     (Ojs.call x8 "push"
                                        [|(or_number_to_js Ojs.string_to_js
                                             x9)|])
                               | None -> ());
                              x8))|])
    let (for_ : t -> key:string -> symbol) =
      fun (x13 : t) ->
        fun ~key:(x12 : string) ->
          symbol_of_js
            (Ojs.call (t_to_js x13) "for" [|(Ojs.string_to_js x12)|])
    let (keyFor : t -> sym:symbol -> string or_undefined) =
      fun (x15 : t) ->
        fun ~sym:(x14 : symbol) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.call (t_to_js x15) "keyFor" [|(symbol_to_js x14)|])
  end
let (symbol : SymbolConstructor.t) =
  SymbolConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Symbol")
