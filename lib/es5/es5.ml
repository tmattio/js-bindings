[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
type never = Ojs.t
let rec never_of_js : Ojs.t -> never = fun (x2 : Ojs.t) -> x2
and never_to_js : never -> Ojs.t = fun (x1 : Ojs.t) -> x1
module Never =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    exception Ts_Never 
    let absurd _ = raise Ts_Never
  end
type any = Ojs.t
let rec any_of_js : Ojs.t -> any = fun (x6 : Ojs.t) -> x6
and any_to_js : any -> Ojs.t = fun (x5 : Ojs.t) -> x5
module Any =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> x8
    and t_to_js : t -> Ojs.t = fun (x7 : Ojs.t) -> x7
    let unsafe_cast x = Obj.magic x
  end
type unknown = Ojs.t
let rec unknown_of_js : Ojs.t -> unknown = fun (x10 : Ojs.t) -> x10
and unknown_to_js : unknown -> Ojs.t = fun (x9 : Ojs.t) -> x9
module Unknown =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x12 : Ojs.t) -> x12
    and t_to_js : t -> Ojs.t = fun (x11 : Ojs.t) -> x11
    let unsafe_cast x = Obj.magic x
  end
type ('t, +'a) enum = 'a
let enum_to_js (_ : 't -> Ojs.t) (f : 'a -> Ojs.t) (e : ('t, 'a) enum) =
  (f e : Ojs.t)
let enum_of_js (_ : Ojs.t -> 't) (f : Ojs.t -> 'a) (e : Ojs.t) =
  (f e : ('t, 'a) enum)
module Enum =
  struct
    type ('t, +'a) t = ('t, 'a) enum
    let t_to_js = enum_to_js
    let t_of_js = enum_of_js
    let get_value x = x
  end
type untyped_object = Ojs.t
let rec untyped_object_of_js : Ojs.t -> untyped_object = Obj.magic
and untyped_object_to_js : untyped_object -> Ojs.t = Obj.magic
type untyped_function = Ojs.t
let rec untyped_function_of_js : Ojs.t -> untyped_function = Obj.magic
and untyped_function_to_js : untyped_function -> Ojs.t = Obj.magic
type symbol = Ojs.t
let rec symbol_of_js : Ojs.t -> symbol = Obj.magic
and symbol_to_js : symbol -> Ojs.t = Obj.magic
type regexp = Ojs.t
let rec regexp_of_js : Ojs.t -> regexp = Obj.magic
and regexp_to_js : regexp -> Ojs.t = Obj.magic
type bigint = Ojs.t
let rec bigint_of_js : Ojs.t -> bigint = Obj.magic
and bigint_to_js : bigint -> Ojs.t = Obj.magic
type 'a or_null = 'a option
let rec or_null_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_null = fun (type
  __a) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (x15 : Ojs.t) -> Ojs.option_of_js __a_of_js x15
and or_null_to_js : 'a . ('a -> Ojs.t) -> 'a or_null -> Ojs.t = fun (type
  __a) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (x13 : __a option) -> Ojs.option_to_js __a_to_js x13
type 'a or_undefined = 'a option
let rec or_undefined_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_undefined =
  fun (type __a) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (x19 : Ojs.t) -> Ojs.option_of_js __a_of_js x19
and or_undefined_to_js : 'a . ('a -> Ojs.t) -> 'a or_undefined -> Ojs.t = fun
  (type __a) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (x17 : __a option) -> Ojs.option_to_js __a_to_js x17
type 'a or_null_or_undefined = 'a option
let rec or_null_or_undefined_of_js :
  'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_null_or_undefined = fun (type __a) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (x23 : Ojs.t) -> Ojs.option_of_js __a_of_js x23
and or_null_or_undefined_to_js :
  'a . ('a -> Ojs.t) -> 'a or_null_or_undefined -> Ojs.t = fun (type __a) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (x21 : __a option) -> Ojs.option_to_js __a_to_js x21
type ('a, 'b) and_ = Ojs.t
let rec and__of_js :
  'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) and_ = fun
  (type __a) -> fun (type __b) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) -> fun (x26 : Ojs.t) -> x26
and and__to_js :
  'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) and_ -> Ojs.t = fun
  (type __a) -> fun (type __b) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) -> fun (x25 : Ojs.t) -> x25
module And =
  struct
    type ('a, 'b) t = ('a, 'b) and_
    let rec t_of_js :
      'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_of_js : Ojs.t -> __a) ->
        fun (__b_of_js : Ojs.t -> __b) ->
          fun (x30 : Ojs.t) -> and__of_js __a_of_js __b_of_js x30
    and t_to_js :
      'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) t -> Ojs.t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_to_js : __a -> Ojs.t) ->
        fun (__b_to_js : __b -> Ojs.t) ->
          fun (x27 : (__a, __b) and_) -> and__to_js __a_to_js __b_to_js x27
    let car (x : ('a, 'b) t) = (Obj.magic x : 'a)
    let cdr (x : ('a, 'b) t) = (Obj.magic x : 'b)
  end
type ('a, 'b) intersection2 = ('b, 'a) and_
let rec intersection2_of_js :
  'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) intersection2 =
  fun (type __a) -> fun (type __b) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (x36 : Ojs.t) -> and__of_js __b_of_js __a_of_js x36
and intersection2_to_js :
  'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) intersection2 -> Ojs.t =
  fun (type __a) -> fun (type __b) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (x33 : (__b, __a) and_) -> and__to_js __b_to_js __a_to_js x33
type ('a, 'b, 'c) intersection3 = (('b, 'c) intersection2, 'a) and_
let rec intersection3_of_js :
  'a 'b 'c .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) -> (Ojs.t -> 'c) -> Ojs.t -> ('a, 'b, 'c) intersection3
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (x44 : Ojs.t) ->
          and__of_js
            (fun (x45 : Ojs.t) -> intersection2_of_js __b_of_js __c_of_js x45)
            __a_of_js x44
and intersection3_to_js :
  'a 'b 'c .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) -> ('c -> Ojs.t) -> ('a, 'b, 'c) intersection3 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (x39 : ((__b, __c) intersection2, __a) and_) ->
          and__to_js
            (fun (x40 : (__b, __c) intersection2) ->
               intersection2_to_js __b_to_js __c_to_js x40) __a_to_js x39
type ('a, 'b, 'c, 'd) intersection4 = (('b, 'c, 'd) intersection3, 'a) and_
let rec intersection4_of_js :
  'a 'b 'c 'd .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) -> Ojs.t -> ('a, 'b, 'c, 'd) intersection4
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (x55 : Ojs.t) ->
            and__of_js
              (fun (x56 : Ojs.t) ->
                 intersection3_of_js __b_of_js __c_of_js __d_of_js x56)
              __a_of_js x55
and intersection4_to_js :
  'a 'b 'c 'd .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) -> ('a, 'b, 'c, 'd) intersection4 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (x49 : ((__b, __c, __d) intersection3, __a) and_) ->
            and__to_js
              (fun (x50 : (__b, __c, __d) intersection3) ->
                 intersection3_to_js __b_to_js __c_to_js __d_to_js x50)
              __a_to_js x49
type ('a, 'b, 'c, 'd, 'e) intersection5 =
  (('b, 'c, 'd, 'e) intersection4, 'a) and_
let rec intersection5_of_js :
  'a 'b 'c 'd 'e .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e) intersection5
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (x68 : Ojs.t) ->
              and__of_js
                (fun (x69 : Ojs.t) ->
                   intersection4_of_js __b_of_js __c_of_js __d_of_js
                     __e_of_js x69) __a_of_js x68
and intersection5_to_js :
  'a 'b 'c 'd 'e .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e) intersection5 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (x61 : ((__b, __c, __d, __e) intersection4, __a) and_) ->
              and__to_js
                (fun (x62 : (__b, __c, __d, __e) intersection4) ->
                   intersection4_to_js __b_to_js __c_to_js __d_to_js
                     __e_to_js x62) __a_to_js x61
type ('a, 'b, 'c, 'd, 'e, 'f) intersection6 =
  (('b, 'c, 'd, 'e, 'f) intersection5, 'a) and_
let rec intersection6_of_js :
  'a 'b 'c 'd 'e 'f .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f) intersection6
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (x83 : Ojs.t) ->
                and__of_js
                  (fun (x84 : Ojs.t) ->
                     intersection5_of_js __b_of_js __c_of_js __d_of_js
                       __e_of_js __f_of_js x84) __a_of_js x83
and intersection6_to_js :
  'a 'b 'c 'd 'e 'f .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('a, 'b, 'c, 'd, 'e, 'f) intersection6 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (x75 : ((__b, __c, __d, __e, __f) intersection5, __a) and_)
                ->
                and__to_js
                  (fun (x76 : (__b, __c, __d, __e, __f) intersection5) ->
                     intersection5_to_js __b_to_js __c_to_js __d_to_js
                       __e_to_js __f_to_js x76) __a_to_js x75
type ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7 =
  (('b, 'c, 'd, 'e, 'f, 'g) intersection6, 'a) and_
let rec intersection7_of_js :
  'a 'b 'c 'd 'e 'f 'g .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) ->
                  Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (x100 : Ojs.t) ->
                  and__of_js
                    (fun (x101 : Ojs.t) ->
                       intersection6_of_js __b_of_js __c_of_js __d_of_js
                         __e_of_js __f_of_js __g_of_js x101) __a_of_js x100
and intersection7_to_js :
  'a 'b 'c 'd 'e 'f 'g .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) ->
                  ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun
                  (x91 :
                    ((__b, __c, __d, __e, __f, __g) intersection6, __a) and_)
                  ->
                  and__to_js
                    (fun (x92 : (__b, __c, __d, __e, __f, __g) intersection6)
                       ->
                       intersection6_to_js __b_to_js __c_to_js __d_to_js
                         __e_to_js __f_to_js __g_to_js x92) __a_to_js x91
type ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8 =
  (('b, 'c, 'd, 'e, 'f, 'g, 'h) intersection7, 'a) and_
let rec intersection8_of_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) ->
                  (Ojs.t -> 'h) ->
                    Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (__h_of_js : Ojs.t -> __h) ->
                  fun (x119 : Ojs.t) ->
                    and__of_js
                      (fun (x120 : Ojs.t) ->
                         intersection7_of_js __b_of_js __c_of_js __d_of_js
                           __e_of_js __f_of_js __g_of_js __h_of_js x120)
                      __a_of_js x119
and intersection8_to_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) ->
                  ('h -> Ojs.t) ->
                    ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun (__h_to_js : __h -> Ojs.t) ->
                  fun
                    (x109 :
                      ((__b, __c, __d, __e, __f, __g, __h) intersection7,
                        __a) and_)
                    ->
                    and__to_js
                      (fun
                         (x110 :
                           (__b, __c, __d, __e, __f, __g, __h) intersection7)
                         ->
                         intersection7_to_js __b_to_js __c_to_js __d_to_js
                           __e_to_js __f_to_js __g_to_js __h_to_js x110)
                      __a_to_js x109
module Intersection =
  struct
    let get_0 x = Obj.magic x
    let get_1 x = Obj.magic x
    let get_2 x = Obj.magic x
    let get_3 x = Obj.magic x
    let get_4 x = Obj.magic x
    let get_5 x = Obj.magic x
    let get_6 x = Obj.magic x
  end
type ('a, 'b) or_from_js =
  {
  a_of_js: Ojs.t -> 'a ;
  b_of_js: Ojs.t -> 'b ;
  value: Ojs.t }
type ('a, 'b) or_ =
  | A of 'a 
  | B of 'b 
  | FromJS of ('a, 'b) or_from_js 
let or__to_js a_to_js b_to_js =
  function | A a -> a_to_js a | B b -> b_to_js b | FromJS x -> x.value
let or__of_js a_of_js b_of_js value = FromJS { a_of_js; b_of_js; value }
module Or =
  struct
    type ('a, 'b) t = ('a, 'b) or_
    let rec t_of_js :
      'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_of_js : Ojs.t -> __a) ->
        fun (__b_of_js : Ojs.t -> __b) ->
          fun (x132 : Ojs.t) -> or__of_js __a_of_js __b_of_js x132
    and t_to_js :
      'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) t -> Ojs.t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_to_js : __a -> Ojs.t) ->
        fun (__b_to_js : __b -> Ojs.t) ->
          fun (x129 : (__a, __b) or_) -> or__to_js __a_to_js __b_to_js x129
    let inl (x : 'a) = (A x : ('a, 'b) t)
    let inr (x : 'b) = (B x : ('a, 'b) t)
    let test ~is_left  ~is_right  =
      function
      | A a -> `Left a
      | B b -> `Right b
      | FromJS x ->
          if is_left x.value
          then `Left (x.a_of_js x.value)
          else
            if is_right x.value
            then `Right (x.b_of_js x.value)
            else `Other (x.value)
  end
type ('a, 'b) union2 = ('b, 'a) or_
let rec union2_of_js :
  'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) union2 = fun
  (type __a) -> fun (type __b) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (x138 : Ojs.t) -> or__of_js __b_of_js __a_of_js x138
and union2_to_js :
  'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) union2 -> Ojs.t = fun
  (type __a) -> fun (type __b) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (x135 : (__b, __a) or_) -> or__to_js __b_to_js __a_to_js x135
type ('a, 'b, 'c) union3 = (('b, 'c) union2, 'a) or_
let rec union3_of_js :
  'a 'b 'c .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) -> (Ojs.t -> 'c) -> Ojs.t -> ('a, 'b, 'c) union3
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (x146 : Ojs.t) ->
          or__of_js
            (fun (x147 : Ojs.t) -> union2_of_js __b_of_js __c_of_js x147)
            __a_of_js x146
and union3_to_js :
  'a 'b 'c .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) -> ('c -> Ojs.t) -> ('a, 'b, 'c) union3 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (x141 : ((__b, __c) union2, __a) or_) ->
          or__to_js
            (fun (x142 : (__b, __c) union2) ->
               union2_to_js __b_to_js __c_to_js x142) __a_to_js x141
type ('a, 'b, 'c, 'd) union4 = (('b, 'c, 'd) union3, 'a) or_
let rec union4_of_js :
  'a 'b 'c 'd .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) -> (Ojs.t -> 'd) -> Ojs.t -> ('a, 'b, 'c, 'd) union4
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (x157 : Ojs.t) ->
            or__of_js
              (fun (x158 : Ojs.t) ->
                 union3_of_js __b_of_js __c_of_js __d_of_js x158) __a_of_js
              x157
and union4_to_js :
  'a 'b 'c 'd .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) -> ('d -> Ojs.t) -> ('a, 'b, 'c, 'd) union4 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (x151 : ((__b, __c, __d) union3, __a) or_) ->
            or__to_js
              (fun (x152 : (__b, __c, __d) union3) ->
                 union3_to_js __b_to_js __c_to_js __d_to_js x152) __a_to_js
              x151
type ('a, 'b, 'c, 'd, 'e) union5 = (('b, 'c, 'd, 'e) union4, 'a) or_
let rec union5_of_js :
  'a 'b 'c 'd 'e .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e) union5
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (x170 : Ojs.t) ->
              or__of_js
                (fun (x171 : Ojs.t) ->
                   union4_of_js __b_of_js __c_of_js __d_of_js __e_of_js x171)
                __a_of_js x170
and union5_to_js :
  'a 'b 'c 'd 'e .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e) union5 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (x163 : ((__b, __c, __d, __e) union4, __a) or_) ->
              or__to_js
                (fun (x164 : (__b, __c, __d, __e) union4) ->
                   union4_to_js __b_to_js __c_to_js __d_to_js __e_to_js x164)
                __a_to_js x163
type ('a, 'b, 'c, 'd, 'e, 'f) union6 = (('b, 'c, 'd, 'e, 'f) union5, 'a) or_
let rec union6_of_js :
  'a 'b 'c 'd 'e 'f .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f) union6
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (x185 : Ojs.t) ->
                or__of_js
                  (fun (x186 : Ojs.t) ->
                     union5_of_js __b_of_js __c_of_js __d_of_js __e_of_js
                       __f_of_js x186) __a_of_js x185
and union6_to_js :
  'a 'b 'c 'd 'e 'f .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e, 'f) union6 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (x177 : ((__b, __c, __d, __e, __f) union5, __a) or_) ->
                or__to_js
                  (fun (x178 : (__b, __c, __d, __e, __f) union5) ->
                     union5_to_js __b_to_js __c_to_js __d_to_js __e_to_js
                       __f_to_js x178) __a_to_js x177
type ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7 =
  (('b, 'c, 'd, 'e, 'f, 'g) union6, 'a) or_
let rec union7_of_js :
  'a 'b 'c 'd 'e 'f 'g .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (x202 : Ojs.t) ->
                  or__of_js
                    (fun (x203 : Ojs.t) ->
                       union6_of_js __b_of_js __c_of_js __d_of_js __e_of_js
                         __f_of_js __g_of_js x203) __a_of_js x202
and union7_to_js :
  'a 'b 'c 'd 'e 'f 'g .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun (x193 : ((__b, __c, __d, __e, __f, __g) union6, __a) or_)
                  ->
                  or__to_js
                    (fun (x194 : (__b, __c, __d, __e, __f, __g) union6) ->
                       union6_to_js __b_to_js __c_to_js __d_to_js __e_to_js
                         __f_to_js __g_to_js x194) __a_to_js x193
type ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8 =
  (('b, 'c, 'd, 'e, 'f, 'g, 'h) union7, 'a) or_
let rec union8_of_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) ->
                  (Ojs.t -> 'h) ->
                    Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (__h_of_js : Ojs.t -> __h) ->
                  fun (x221 : Ojs.t) ->
                    or__of_js
                      (fun (x222 : Ojs.t) ->
                         union7_of_js __b_of_js __c_of_js __d_of_js __e_of_js
                           __f_of_js __g_of_js __h_of_js x222) __a_of_js x221
and union8_to_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) ->
                  ('h -> Ojs.t) ->
                    ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun (__h_to_js : __h -> Ojs.t) ->
                  fun
                    (x211 :
                      ((__b, __c, __d, __e, __f, __g, __h) union7, __a) or_)
                    ->
                    or__to_js
                      (fun
                         (x212 : (__b, __c, __d, __e, __f, __g, __h) union7)
                         ->
                         union7_to_js __b_to_js __c_to_js __d_to_js __e_to_js
                           __f_to_js __g_to_js __h_to_js x212) __a_to_js x211
module Union =
  struct
    let inject_0 x = Obj.magic x
    let inject_1 x = Obj.magic x
    let inject_2 x = Obj.magic x
    let inject_3 x = Obj.magic x
    let inject_4 x = Obj.magic x
    let inject_5 x = Obj.magic x
    let inject_6 x = Obj.magic x
  end
type 'a or_string = [ `String of string  | `Other of 'a ]
let rec or_string_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_string =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "string" -> `String (Ojs.string_of_js x)
      | _ -> `Other (a_of_js x)
and or_string_to_js : 'a . ('a -> Ojs.t) -> 'a or_string -> Ojs.t =
  fun a_to_js ->
    function | `String x -> Ojs.string_to_js x | `Other x -> a_to_js x
type 'a or_number = [ `Number of int  | `Other of 'a ]
let rec or_number_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_number =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "number" -> `Number (Ojs.float_of_js x)
      | _ -> `Other (a_of_js x)
and or_number_to_js : 'a . ('a -> Ojs.t) -> 'a or_number -> Ojs.t =
  fun a_to_js ->
    function | `Number x -> Ojs.float_to_js x | `Other x -> a_to_js x
type 'a or_boolean = [ `Boolean of bool  | `Other of 'a ]
let rec or_boolean_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_boolean =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "boolean" -> `Boolean (Ojs.bool_of_js x)
      | _ -> `Other (a_of_js x)
and or_boolean_to_js : 'a . ('a -> Ojs.t) -> 'a or_boolean -> Ojs.t =
  fun a_to_js ->
    function | `Boolean x -> Ojs.bool_to_js x | `Other x -> a_to_js x
type 'a or_symbol = [ `Symbol of symbol  | `Other of 'a ]
let rec or_symbol_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_symbol =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "symbol" -> `Symbol (symbol_of_js x)
      | _ -> `Other (a_of_js x)
and or_symbol_to_js : 'a . ('a -> Ojs.t) -> 'a or_symbol -> Ojs.t =
  fun a_to_js ->
    function | `Symbol x -> symbol_to_js x | `Other x -> a_to_js x
type 'a or_bigint = [ `BigInt of bigint  | `Other of 'a ]
let rec or_bigint_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_bigint =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "bigint" -> `BigInt (bigint_of_js x)
      | _ -> `Other (a_of_js x)
and or_bigint_to_js : 'a . ('a -> Ojs.t) -> 'a or_bigint -> Ojs.t =
  fun a_to_js ->
    function | `BigInt x -> bigint_to_js x | `Other x -> a_to_js x
let (is_array : Ojs.t -> bool) =
  fun (x231 : Ojs.t) ->
    Ojs.bool_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "isArray" [|x231|])
type ('a, 't) or_array = [ `Array of 't list  | `Other of 'a ]
let rec or_array_of_js :
  'a 't . (Ojs.t -> 'a) -> (Ojs.t -> 't) -> Ojs.t -> ('a, 't) or_array =
  fun a_of_js ->
    fun t_of_js ->
      fun x ->
        if is_array x
        then `Array (Ojs.list_of_js t_of_js x)
        else `Other (a_of_js x)
and or_array_to_js :
  'a 't . ('a -> Ojs.t) -> ('t -> Ojs.t) -> ('a, 't) or_array -> Ojs.t =
  fun a_to_js ->
    fun t_to_js ->
      function | `Array x -> Ojs.list_to_js t_to_js x | `Other x -> a_to_js x
type ('a, 'cases) or_enum = [ `Enum of 'cases  | `Other of 'a ]
let rec or_enum_of_js :
  'a 'cases .
    (Ojs.t -> 'a) -> (Ojs.t -> 'cases) -> Ojs.t -> ('a, 'cases) or_enum
  =
  fun a_of_js ->
    fun cases_of_js ->
      fun x -> try `Enum (cases_of_js x) with | _ -> `Other (a_of_js x)
and or_enum_to_js :
  'a 'cases .
    ('a -> Ojs.t) -> ('cases -> Ojs.t) -> ('a, 'cases) or_enum -> Ojs.t
  =
  fun a_to_js ->
    fun cases_to_js ->
      function | `Enum cases -> cases_to_js cases | `Other x -> a_to_js x
external pure_js_expr : string -> Ojs.t = "caml_pure_js_expr"
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = Ojs.t
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = Ojs.t
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = Ojs.t
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = Ojs.t
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
        type anonymous_interface_4 = Ojs.t
        let rec anonymous_interface_4_of_js : Ojs.t -> anonymous_interface_4
          = Obj.magic
        and anonymous_interface_4_to_js : anonymous_interface_4 -> Ojs.t =
          Obj.magic
        type ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5 = Ojs.t
        let rec anonymous_interface_5_of_js :
          'A 'A0 'A1 'A2 'A3 'R .
            (Ojs.t -> 'A) ->
              (Ojs.t -> 'A0) ->
                (Ojs.t -> 'A1) ->
                  (Ojs.t -> 'A2) ->
                    (Ojs.t -> 'A3) ->
                      (Ojs.t -> 'R) ->
                        Ojs.t ->
                          ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5
          =
          fun _A ->
            fun _A0 -> fun _A1 -> fun _A2 -> fun _A3 -> fun _R -> Obj.magic
        and anonymous_interface_5_to_js :
          'A 'A0 'A1 'A2 'A3 'R .
            ('A -> Ojs.t) ->
              ('A0 -> Ojs.t) ->
                ('A1 -> Ojs.t) ->
                  ('A2 -> Ojs.t) ->
                    ('A3 -> Ojs.t) ->
                      ('R -> Ojs.t) ->
                        ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5 ->
                          Ojs.t
          =
          fun _A ->
            fun _A0 -> fun _A1 -> fun _A2 -> fun _A3 -> fun _R -> Obj.magic
        type ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6 = Ojs.t
        let rec anonymous_interface_6_of_js :
          'A 'A0 'A1 'A2 'R .
            (Ojs.t -> 'A) ->
              (Ojs.t -> 'A0) ->
                (Ojs.t -> 'A1) ->
                  (Ojs.t -> 'A2) ->
                    (Ojs.t -> 'R) ->
                      Ojs.t -> ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6
          = fun _A -> fun _A0 -> fun _A1 -> fun _A2 -> fun _R -> Obj.magic
        and anonymous_interface_6_to_js :
          'A 'A0 'A1 'A2 'R .
            ('A -> Ojs.t) ->
              ('A0 -> Ojs.t) ->
                ('A1 -> Ojs.t) ->
                  ('A2 -> Ojs.t) ->
                    ('R -> Ojs.t) ->
                      ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6 -> Ojs.t
          = fun _A -> fun _A0 -> fun _A1 -> fun _A2 -> fun _R -> Obj.magic
        type ('A, 'A0, 'A1, 'R) anonymous_interface_7 = Ojs.t
        let rec anonymous_interface_7_of_js :
          'A 'A0 'A1 'R .
            (Ojs.t -> 'A) ->
              (Ojs.t -> 'A0) ->
                (Ojs.t -> 'A1) ->
                  (Ojs.t -> 'R) ->
                    Ojs.t -> ('A, 'A0, 'A1, 'R) anonymous_interface_7
          = fun _A -> fun _A0 -> fun _A1 -> fun _R -> Obj.magic
        and anonymous_interface_7_to_js :
          'A 'A0 'A1 'R .
            ('A -> Ojs.t) ->
              ('A0 -> Ojs.t) ->
                ('A1 -> Ojs.t) ->
                  ('R -> Ojs.t) ->
                    ('A, 'A0, 'A1, 'R) anonymous_interface_7 -> Ojs.t
          = fun _A -> fun _A0 -> fun _A1 -> fun _R -> Obj.magic
        type ('A, 'A0, 'R) anonymous_interface_8 = Ojs.t
        let rec anonymous_interface_8_of_js :
          'A 'A0 'R .
            (Ojs.t -> 'A) ->
              (Ojs.t -> 'A0) ->
                (Ojs.t -> 'R) -> Ojs.t -> ('A, 'A0, 'R) anonymous_interface_8
          = fun _A -> fun _A0 -> fun _R -> Obj.magic
        and anonymous_interface_8_to_js :
          'A 'A0 'R .
            ('A -> Ojs.t) ->
              ('A0 -> Ojs.t) ->
                ('R -> Ojs.t) -> ('A, 'A0, 'R) anonymous_interface_8 -> Ojs.t
          = fun _A -> fun _A0 -> fun _R -> Obj.magic
        type ('A, 'R) anonymous_interface_9 = Ojs.t
        let rec anonymous_interface_9_of_js :
          'A 'R .
            (Ojs.t -> 'A) ->
              (Ojs.t -> 'R) -> Ojs.t -> ('A, 'R) anonymous_interface_9
          = fun _A -> fun _R -> Obj.magic
        and anonymous_interface_9_to_js :
          'A 'R .
            ('A -> Ojs.t) ->
              ('R -> Ojs.t) -> ('A, 'R) anonymous_interface_9 -> Ojs.t
          = fun _A -> fun _R -> Obj.magic
        type ('A, 'T) anonymous_interface_10 = Ojs.t
        let rec anonymous_interface_10_of_js :
          'A 'T .
            (Ojs.t -> 'A) ->
              (Ojs.t -> 'T) -> Ojs.t -> ('A, 'T) anonymous_interface_10
          = fun _A -> fun _T -> Obj.magic
        and anonymous_interface_10_to_js :
          'A 'T .
            ('A -> Ojs.t) ->
              ('T -> Ojs.t) -> ('A, 'T) anonymous_interface_10 -> Ojs.t
          = fun _A -> fun _T -> Obj.magic
        type ('AX, 'R) anonymous_interface_11 = Ojs.t
        let rec anonymous_interface_11_of_js :
          'AX 'R .
            (Ojs.t -> 'AX) ->
              (Ojs.t -> 'R) -> Ojs.t -> ('AX, 'R) anonymous_interface_11
          = fun _AX -> fun _R -> Obj.magic
        and anonymous_interface_11_to_js :
          'AX 'R .
            ('AX -> Ojs.t) ->
              ('R -> Ojs.t) -> ('AX, 'R) anonymous_interface_11 -> Ojs.t
          = fun _AX -> fun _R -> Obj.magic
        type 'T anonymous_interface_12 = Ojs.t
        let rec anonymous_interface_12_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T anonymous_interface_12 =
          fun _T -> Obj.magic
        and anonymous_interface_12_to_js :
          'T . ('T -> Ojs.t) -> 'T anonymous_interface_12 -> Ojs.t =
          fun _T -> Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
let (nan : int) = Ojs.int_of_js (Ojs.get_prop_ascii Ojs.global "NaN")
let (infinity : int) =
  Ojs.int_of_js (Ojs.get_prop_ascii Ojs.global "Infinity")
let (eval : string -> any) =
  fun (x232 : string) ->
    any_of_js (Ojs.call Ojs.global "eval" [|(Ojs.string_to_js x232)|])
let (parseInt : string -> ?radix:int -> unit -> int) =
  fun (x233 : string) ->
    fun ?radix:(x234 : int option) ->
      fun () ->
        Ojs.int_of_js
          (let x237 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x237 "parseInt") "apply"
             [|x237;((let x235 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x235 "push" [|(Ojs.string_to_js x233)|]);
                      (match x234 with
                       | Some x236 ->
                           ignore
                             (Ojs.call x235 "push" [|(Ojs.int_to_js x236)|])
                       | None -> ());
                      x235))|])
let (parseFloat : string:string -> int) =
  fun ~string:(x238 : string) ->
    Ojs.int_of_js
      (Ojs.call Ojs.global "parseFloat" [|(Ojs.string_to_js x238)|])
let (isNaN : int -> bool) =
  fun (x239 : int) ->
    Ojs.bool_of_js (Ojs.call Ojs.global "isNaN" [|(Ojs.int_to_js x239)|])
let (isFinite : int -> bool) =
  fun (x240 : int) ->
    Ojs.bool_of_js (Ojs.call Ojs.global "isFinite" [|(Ojs.int_to_js x240)|])
let (decodeURI : string -> string) =
  fun (x241 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "decodeURI" [|(Ojs.string_to_js x241)|])
let (decodeURIComponent : string -> string) =
  fun (x242 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "decodeURIComponent" [|(Ojs.string_to_js x242)|])
let (encodeURI : string -> string) =
  fun (x243 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "encodeURI" [|(Ojs.string_to_js x243)|])
let (encodeURIComponent : bool or_string or_number -> string) =
  fun (x244 : bool or_string or_number) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "encodeURIComponent"
         [|(or_number_to_js
              (fun (x245 : bool or_string) ->
                 or_string_to_js Ojs.bool_to_js x245) x244)|])
let (escape : string -> string) =
  fun (x247 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "escape" [|(Ojs.string_to_js x247)|])
let (unescape : string -> string) =
  fun (x248 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "unescape" [|(Ojs.string_to_js x248)|])
module Symbol =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x250 : Ojs.t) -> x250
    and t_to_js : t -> Ojs.t = fun (x249 : Ojs.t) -> x249
    let (toString : t -> string) =
      fun (x251 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x251) "toString" [||])
    let (valueOf : t -> symbol) =
      fun (x252 : t) -> symbol_of_js (Ojs.call (t_to_js x252) "valueOf" [||])
  end
module PropertyKey =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x254 : Ojs.t) -> x254
    and t_to_js : t -> Ojs.t = fun (x253 : Ojs.t) -> x253
  end
module PropertyDescriptor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x256 : Ojs.t) -> x256
    and t_to_js : t -> Ojs.t = fun (x255 : Ojs.t) -> x255
    let (get_configurable : t -> bool) =
      fun (x257 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x257) "configurable")
    let (set_configurable : t -> bool -> unit) =
      fun (x258 : t) ->
        fun (x259 : bool) ->
          Ojs.set_prop_ascii (t_to_js x258) "configurable"
            (Ojs.bool_to_js x259)
    let (get_enumerable : t -> bool) =
      fun (x260 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x260) "enumerable")
    let (set_enumerable : t -> bool -> unit) =
      fun (x261 : t) ->
        fun (x262 : bool) ->
          Ojs.set_prop_ascii (t_to_js x261) "enumerable"
            (Ojs.bool_to_js x262)
    let (get_value : t -> any) =
      fun (x263 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x263) "value")
    let (set_value : t -> any -> unit) =
      fun (x264 : t) ->
        fun (x265 : any) ->
          Ojs.set_prop_ascii (t_to_js x264) "value" (any_to_js x265)
    let (get_writable : t -> bool) =
      fun (x266 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x266) "writable")
    let (set_writable : t -> bool -> unit) =
      fun (x267 : t) ->
        fun (x268 : bool) ->
          Ojs.set_prop_ascii (t_to_js x267) "writable" (Ojs.bool_to_js x268)
    let (get_ : t -> any) =
      fun (x269 : t) -> any_of_js (Ojs.call (t_to_js x269) "get" [||])
    let (set_ : t -> any -> unit) =
      fun (x271 : t) ->
        fun (x270 : any) ->
          ignore (Ojs.call (t_to_js x271) "set" [|(any_to_js x270)|])
  end
module PropertyDescriptorMap =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x273 : Ojs.t) -> x273
    and t_to_js : t -> Ojs.t = fun (x272 : Ojs.t) -> x272
    let (get : t -> string -> PropertyDescriptor.t) =
      fun (x274 : t) ->
        fun (x275 : string) ->
          PropertyDescriptor.t_of_js
            (Ojs.get_prop (t_to_js x274) (Ojs.string_to_js x275))
    let (set : t -> string -> PropertyDescriptor.t -> unit) =
      fun (x276 : t) ->
        fun (x277 : string) ->
          fun (x278 : PropertyDescriptor.t) ->
            Ojs.set_prop (t_to_js x276) (Ojs.string_to_js x277)
              (PropertyDescriptor.t_to_js x278)
  end
module Partial =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x280 : Ojs.t) -> x280
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x279 : Ojs.t) -> x279
  end
module Required =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x282 : Ojs.t) -> x282
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x281 : Ojs.t) -> x281
  end
module Readonly =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x284 : Ojs.t) -> x284
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x283 : Ojs.t) -> x283
  end
module Pick =
  struct
    type ('T, 'K) t = Ojs.t
    let rec t_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) -> fun (x286 : Ojs.t) -> x286
    and t_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) -> fun (x285 : Ojs.t) -> x285
  end
module Record =
  struct
    type ('K, 'T) t = Ojs.t
    let rec t_of_js :
      'K 'T . (Ojs.t -> 'K) -> (Ojs.t -> 'T) -> Ojs.t -> ('K, 'T) t = fun
      (type __K) -> fun (type __T) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__T_of_js : Ojs.t -> __T) -> fun (x288 : Ojs.t) -> x288
    and t_to_js :
      'K 'T . ('K -> Ojs.t) -> ('T -> Ojs.t) -> ('K, 'T) t -> Ojs.t = fun
      (type __K) -> fun (type __T) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) -> fun (x287 : Ojs.t) -> x287
  end
module Exclude =
  struct
    type ('T, 'U) t = Ojs.t
    let rec t_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) -> fun (x290 : Ojs.t) -> x290
    and t_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) -> fun (x289 : Ojs.t) -> x289
  end
module Extract =
  struct
    type ('T, 'U) t = Ojs.t
    let rec t_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) -> fun (x292 : Ojs.t) -> x292
    and t_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) -> fun (x291 : Ojs.t) -> x291
  end
module Omit =
  struct
    type ('T, 'K) t = Ojs.t
    let rec t_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) -> fun (x294 : Ojs.t) -> x294
    and t_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) -> fun (x293 : Ojs.t) -> x293
  end
module NonNullable =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x296 : Ojs.t) -> x296
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x295 : Ojs.t) -> x295
  end
module Parameters =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x298 : Ojs.t) -> x298
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x297 : Ojs.t) -> x297
  end
module ConstructorParameters =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x300 : Ojs.t) -> x300
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x299 : Ojs.t) -> x299
  end
module ReturnType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x302 : Ojs.t) -> x302
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x301 : Ojs.t) -> x301
  end
module InstanceType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x304 : Ojs.t) -> x304
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x303 : Ojs.t) -> x303
  end
module ThisType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x306 : Ojs.t) -> x306
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x305 : Ojs.t) -> x305
  end
module Function =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x308 : Ojs.t) -> x308
    and t_to_js : t -> Ojs.t = fun (x307 : Ojs.t) -> x307
    let (apply_ : t -> this:t -> thisArg:any -> ?argArray:any -> unit -> any)
      =
      fun (x314 : t) ->
        fun ~this:(x309 : t) ->
          fun ~thisArg:(x310 : any) ->
            fun ?argArray:(x311 : any option) ->
              fun () ->
                any_of_js
                  (let x315 = t_to_js x314 in
                   Ojs.call (Ojs.get_prop_ascii x315 "apply") "apply"
                     [|x315;((let x312 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x312 "push" [|(t_to_js x309)|]);
                              ignore
                                (Ojs.call x312 "push" [|(any_to_js x310)|]);
                              (match x311 with
                               | Some x313 ->
                                   ignore
                                     (Ojs.call x312 "push"
                                        [|(any_to_js x313)|])
                               | None -> ());
                              x312))|])
    let (call : t -> this:t -> thisArg:any -> argArray:any list -> any) =
      fun (x321 : t) ->
        fun ~this:(x316 : t) ->
          fun ~thisArg:(x317 : any) ->
            fun ~argArray:(x318 : any list) ->
              any_of_js
                (let x322 = t_to_js x321 in
                 Ojs.call (Ojs.get_prop_ascii x322 "call") "apply"
                   [|x322;((let x319 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x319 "push" [|(t_to_js x316)|]);
                            ignore
                              (Ojs.call x319 "push" [|(any_to_js x317)|]);
                            List.iter
                              (fun (x320 : any) ->
                                 ignore
                                   (Ojs.call x319 "push" [|(any_to_js x320)|]))
                              x318;
                            x319))|])
    let (bind : t -> this:t -> thisArg:any -> argArray:any list -> any) =
      fun (x328 : t) ->
        fun ~this:(x323 : t) ->
          fun ~thisArg:(x324 : any) ->
            fun ~argArray:(x325 : any list) ->
              any_of_js
                (let x329 = t_to_js x328 in
                 Ojs.call (Ojs.get_prop_ascii x329 "bind") "apply"
                   [|x329;((let x326 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x326 "push" [|(t_to_js x323)|]);
                            ignore
                              (Ojs.call x326 "push" [|(any_to_js x324)|]);
                            List.iter
                              (fun (x327 : any) ->
                                 ignore
                                   (Ojs.call x326 "push" [|(any_to_js x327)|]))
                              x325;
                            x326))|])
    let (toString : t -> string) =
      fun (x330 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x330) "toString" [||])
    let (get_prototype : t -> any) =
      fun (x331 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x331) "prototype")
    let (set_prototype : t -> any -> unit) =
      fun (x332 : t) ->
        fun (x333 : any) ->
          Ojs.set_prop_ascii (t_to_js x332) "prototype" (any_to_js x333)
    let (get_length : t -> int) =
      fun (x334 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x334) "length")
    let (get_arguments : t -> any) =
      fun (x335 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x335) "arguments")
    let (set_arguments : t -> any -> unit) =
      fun (x336 : t) ->
        fun (x337 : any) ->
          Ojs.set_prop_ascii (t_to_js x336) "arguments" (any_to_js x337)
    let (get_caller : t -> t) =
      fun (x338 : t) -> t_of_js (Ojs.get_prop_ascii (t_to_js x338) "caller")
    let (set_caller : t -> t -> unit) =
      fun (x339 : t) ->
        fun (x340 : t) ->
          Ojs.set_prop_ascii (t_to_js x339) "caller" (t_to_js x340)
    let (create : string list -> t) =
      fun (x341 : string list) ->
        t_of_js
          (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Function")
             (let x342 =
                Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
              List.iter
                (fun (x343 : string) ->
                   ignore (Ojs.call x342 "push" [|(Ojs.string_to_js x343)|]))
                x341;
              x342))
  end
module FunctionConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x345 : Ojs.t) -> x345
    and t_to_js : t -> Ojs.t = fun (x344 : Ojs.t) -> x344
    let (create : t -> string list -> Function.t) =
      fun (x349 : t) ->
        fun (x346 : string list) ->
          Function.t_of_js
            (Ojs.new_obj_arr (t_to_js x349)
               (let x347 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x348 : string) ->
                     ignore
                       (Ojs.call x347 "push" [|(Ojs.string_to_js x348)|]))
                  x346;
                x347))
    let (apply : t -> string list -> Function.t) =
      fun (x353 : t) ->
        fun (x350 : string list) ->
          Function.t_of_js
            (Ojs.call (t_to_js x353) "apply"
               [|Ojs.null;((let x351 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x352 : string) ->
                                 ignore
                                   (Ojs.call x351 "push"
                                      [|(Ojs.string_to_js x352)|])) x350;
                            x351))|])
    let (get_prototype : t -> Function.t) =
      fun (x354 : t) ->
        Function.t_of_js (Ojs.get_prop_ascii (t_to_js x354) "prototype")
  end
let (function_ : FunctionConstructor.t) =
  FunctionConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Function")
module Object =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x356 : Ojs.t) -> x356
    and t_to_js : t -> Ojs.t = fun (x355 : Ojs.t) -> x355
    let (get_constructor : t -> Function.t) =
      fun (x357 : t) ->
        Function.t_of_js (Ojs.get_prop_ascii (t_to_js x357) "constructor")
    let (set_constructor : t -> Function.t -> unit) =
      fun (x358 : t) ->
        fun (x359 : Function.t) ->
          Ojs.set_prop_ascii (t_to_js x358) "constructor"
            (Function.t_to_js x359)
    let (toString : t -> string) =
      fun (x360 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x360) "toString" [||])
    let (toLocaleString : t -> string) =
      fun (x361 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x361) "toLocaleString" [||])
    let (valueOf : t -> t) =
      fun (x362 : t) -> t_of_js (Ojs.call (t_to_js x362) "valueOf" [||])
    let (hasOwnProperty : t -> PropertyKey.t -> bool) =
      fun (x364 : t) ->
        fun (x363 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x364) "hasOwnProperty"
               [|(PropertyKey.t_to_js x363)|])
    let (isPrototypeOf : t -> t -> bool) =
      fun (x366 : t) ->
        fun (x365 : t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x366) "isPrototypeOf" [|(t_to_js x365)|])
    let (propertyIsEnumerable : t -> PropertyKey.t -> bool) =
      fun (x368 : t) ->
        fun (x367 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x368) "propertyIsEnumerable"
               [|(PropertyKey.t_to_js x367)|])
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x369 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Object")
               (let x370 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x369 with
                 | Some x371 ->
                     ignore (Ojs.call x370 "push" [|(any_to_js x371)|])
                 | None -> ());
                x370))
    let (getPrototypeOf : any -> any) =
      fun (x372 : any) ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "getPrototypeOf"
             [|(any_to_js x372)|])
    let (getOwnPropertyDescriptor :
      any -> p:PropertyKey.t -> PropertyDescriptor.t or_undefined) =
      fun (x373 : any) ->
        fun ~p:(x374 : PropertyKey.t) ->
          or_undefined_of_js PropertyDescriptor.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
               "getOwnPropertyDescriptor"
               [|(any_to_js x373);(PropertyKey.t_to_js x374)|])
    let (getOwnPropertyNames : any -> string list) =
      fun (x376 : any) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "getOwnPropertyNames" [|(any_to_js x376)|])
    let (create_ : untyped_object or_null -> any) =
      fun (x378 : untyped_object or_null) ->
        any_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Object")
             [|(or_null_to_js untyped_object_to_js x378)|])
    let (create_' :
      untyped_object or_null ->
        properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2 ->
          any)
      =
      fun (x380 : untyped_object or_null) ->
        fun
          ~properties:(x382 :
                        (PropertyDescriptorMap.t, any ThisType.t)
                          intersection2)
          ->
          any_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Object")
               [|(or_null_to_js untyped_object_to_js x380);(intersection2_to_js
                                                              PropertyDescriptorMap.t_to_js
                                                              (fun
                                                                 (x384 :
                                                                   any
                                                                    ThisType.t)
                                                                 ->
                                                                 ThisType.t_to_js
                                                                   any_to_js
                                                                   x384) x382)|])
    let (defineProperty :
      t ->
        any ->
          p:PropertyKey.t ->
            attributes:(PropertyDescriptor.t, any ThisType.t) intersection2
              -> any)
      =
      fun (x386 : t) ->
        fun (x387 : any) ->
          fun ~p:(x388 : PropertyKey.t) ->
            fun
              ~attributes:(x389 :
                            (PropertyDescriptor.t, any ThisType.t)
                              intersection2)
              ->
              any_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
                   "defineProperty"
                   [|(t_to_js x386);(any_to_js x387);(PropertyKey.t_to_js
                                                        x388);(intersection2_to_js
                                                                 PropertyDescriptor.t_to_js
                                                                 (fun
                                                                    (x391 :
                                                                    any
                                                                    ThisType.t)
                                                                    ->
                                                                    ThisType.t_to_js
                                                                    any_to_js
                                                                    x391)
                                                                 x389)|])
    let (defineProperties :
      t ->
        any ->
          properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2
            -> any)
      =
      fun (x393 : t) ->
        fun (x394 : any) ->
          fun
            ~properties:(x395 :
                          (PropertyDescriptorMap.t, any ThisType.t)
                            intersection2)
            ->
            any_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
                 "defineProperties"
                 [|(t_to_js x393);(any_to_js x394);(intersection2_to_js
                                                      PropertyDescriptorMap.t_to_js
                                                      (fun
                                                         (x397 :
                                                           any ThisType.t)
                                                         ->
                                                         ThisType.t_to_js
                                                           any_to_js x397)
                                                      x395)|])
    let (seal : 'T -> 'T) =
      fun (x399 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "seal"
             [|(Obj.magic x399)|])
    let (freeze : 'T list -> 'T list) =
      fun (x400 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Ojs.list_to_js Obj.magic x400)|])
    let (freeze' : 'T -> 'T) =
      fun (x403 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Obj.magic x403)|])
    let (freeze'' : 'T -> 'T Readonly.t) =
      fun (x404 : 'T) ->
        Readonly.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Obj.magic x404)|])
    let (preventExtensions : 'T -> 'T) =
      fun (x406 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "preventExtensions" [|(Obj.magic x406)|])
    let (isSealed : any -> bool) =
      fun (x407 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isSealed"
             [|(any_to_js x407)|])
    let (isFrozen : any -> bool) =
      fun (x408 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isFrozen"
             [|(any_to_js x408)|])
    let (isExtensible : any -> bool) =
      fun (x409 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isExtensible"
             [|(any_to_js x409)|])
    let (keys : untyped_object -> string list) =
      fun (x410 : untyped_object) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "keys"
             [|(untyped_object_to_js x410)|])
  end
module ObjectConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x413 : Ojs.t) -> x413
    and t_to_js : t -> Ojs.t = fun (x412 : Ojs.t) -> x412
    let (create : t -> ?value:any -> unit -> Object.t) =
      fun (x417 : t) ->
        fun ?value:(x414 : any option) ->
          fun () ->
            Object.t_of_js
              (Ojs.new_obj_arr (t_to_js x417)
                 (let x415 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x414 with
                   | Some x416 ->
                       ignore (Ojs.call x415 "push" [|(any_to_js x416)|])
                   | None -> ());
                  x415))
    let (apply : t -> any) =
      fun (x418 : t) -> any_of_js (Ojs.apply (t_to_js x418) [||])
    let (apply' : t -> any -> any) =
      fun (x420 : t) ->
        fun (x419 : any) ->
          any_of_js (Ojs.apply (t_to_js x420) [|(any_to_js x419)|])
    let (get_prototype : t -> Object.t) =
      fun (x421 : t) ->
        Object.t_of_js (Ojs.get_prop_ascii (t_to_js x421) "prototype")
    let (getPrototypeOf : t -> any -> any) =
      fun (x423 : t) ->
        fun (x422 : any) ->
          any_of_js
            (Ojs.call (t_to_js x423) "getPrototypeOf" [|(any_to_js x422)|])
    let (getOwnPropertyDescriptor :
      t -> any -> p:PropertyKey.t -> PropertyDescriptor.t or_undefined) =
      fun (x426 : t) ->
        fun (x424 : any) ->
          fun ~p:(x425 : PropertyKey.t) ->
            or_undefined_of_js PropertyDescriptor.t_of_js
              (Ojs.call (t_to_js x426) "getOwnPropertyDescriptor"
                 [|(any_to_js x424);(PropertyKey.t_to_js x425)|])
    let (getOwnPropertyNames : t -> any -> string list) =
      fun (x429 : t) ->
        fun (x428 : any) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (t_to_js x429) "getOwnPropertyNames"
               [|(any_to_js x428)|])
    let (create_ : t -> untyped_object or_null -> any) =
      fun (x433 : t) ->
        fun (x431 : untyped_object or_null) ->
          any_of_js
            (Ojs.call (t_to_js x433) "create"
               [|(or_null_to_js untyped_object_to_js x431)|])
    let (create_' :
      t ->
        untyped_object or_null ->
          properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2
            -> any)
      =
      fun (x440 : t) ->
        fun (x434 : untyped_object or_null) ->
          fun
            ~properties:(x436 :
                          (PropertyDescriptorMap.t, any ThisType.t)
                            intersection2)
            ->
            any_of_js
              (Ojs.call (t_to_js x440) "create"
                 [|(or_null_to_js untyped_object_to_js x434);(intersection2_to_js
                                                                PropertyDescriptorMap.t_to_js
                                                                (fun
                                                                   (x438 :
                                                                    any
                                                                    ThisType.t)
                                                                   ->
                                                                   ThisType.t_to_js
                                                                    any_to_js
                                                                    x438)
                                                                x436)|])
    let (defineProperty :
      t ->
        any ->
          p:PropertyKey.t ->
            attributes:(PropertyDescriptor.t, any ThisType.t) intersection2
              -> any)
      =
      fun (x447 : t) ->
        fun (x441 : any) ->
          fun ~p:(x442 : PropertyKey.t) ->
            fun
              ~attributes:(x443 :
                            (PropertyDescriptor.t, any ThisType.t)
                              intersection2)
              ->
              any_of_js
                (Ojs.call (t_to_js x447) "defineProperty"
                   [|(any_to_js x441);(PropertyKey.t_to_js x442);(intersection2_to_js
                                                                    PropertyDescriptor.t_to_js
                                                                    (
                                                                    fun
                                                                    (x445 :
                                                                    any
                                                                    ThisType.t)
                                                                    ->
                                                                    ThisType.t_to_js
                                                                    any_to_js
                                                                    x445)
                                                                    x443)|])
    let (defineProperties :
      t ->
        any ->
          properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2
            -> any)
      =
      fun (x453 : t) ->
        fun (x448 : any) ->
          fun
            ~properties:(x449 :
                          (PropertyDescriptorMap.t, any ThisType.t)
                            intersection2)
            ->
            any_of_js
              (Ojs.call (t_to_js x453) "defineProperties"
                 [|(any_to_js x448);(intersection2_to_js
                                       PropertyDescriptorMap.t_to_js
                                       (fun (x451 : any ThisType.t) ->
                                          ThisType.t_to_js any_to_js x451)
                                       x449)|])
    let (seal : t -> 'T -> 'T) =
      fun (x455 : t) ->
        fun (x454 : 'T) ->
          Obj.magic (Ojs.call (t_to_js x455) "seal" [|(Obj.magic x454)|])
    let (freeze : t -> 'T list -> 'T list) =
      fun (x458 : t) ->
        fun (x456 : 'T list) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x458) "freeze"
               [|(Ojs.list_to_js Obj.magic x456)|])
    let (freeze' : t -> 'T -> 'T) =
      fun (x461 : t) ->
        fun (x460 : 'T) ->
          Obj.magic (Ojs.call (t_to_js x461) "freeze" [|(Obj.magic x460)|])
    let (freeze'' : t -> 'T -> 'T Readonly.t) =
      fun (x463 : t) ->
        fun (x462 : 'T) ->
          Readonly.t_of_js Obj.magic
            (Ojs.call (t_to_js x463) "freeze" [|(Obj.magic x462)|])
    let (preventExtensions : t -> 'T -> 'T) =
      fun (x466 : t) ->
        fun (x465 : 'T) ->
          Obj.magic
            (Ojs.call (t_to_js x466) "preventExtensions" [|(Obj.magic x465)|])
    let (isSealed : t -> any -> bool) =
      fun (x468 : t) ->
        fun (x467 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x468) "isSealed" [|(any_to_js x467)|])
    let (isFrozen : t -> any -> bool) =
      fun (x470 : t) ->
        fun (x469 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x470) "isFrozen" [|(any_to_js x469)|])
    let (isExtensible : t -> any -> bool) =
      fun (x472 : t) ->
        fun (x471 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x472) "isExtensible" [|(any_to_js x471)|])
    let (keys : t -> untyped_object -> string list) =
      fun (x474 : t) ->
        fun (x473 : untyped_object) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (t_to_js x474) "keys" [|(untyped_object_to_js x473)|])
  end
let (object_ : ObjectConstructor.t) =
  ObjectConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Object")
module ThisParameterType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x477 : Ojs.t) -> x477
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x476 : Ojs.t) -> x476
  end
module OmitThisParameter =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x479 : Ojs.t) -> x479
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x478 : Ojs.t) -> x478
  end
module CallableFunction =
  struct
    include struct include Function end
    let (apply_ : t -> this:(this:'T -> 'R) -> thisArg:'T -> 'R) =
      fun (x483 : t) ->
        fun ~this:(x480 : this:'T -> 'R) ->
          fun ~thisArg:(x482 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js x483) "apply"
                 [|(Ojs.fun_to_js 1
                      (fun (x481 : Ojs.t) ->
                         Obj.magic (x480 ~this:(Obj.magic x481))));(Obj.magic
                                                                    x482)|])
    let (apply_all :
      t ->
        this:(this:'T -> args:any list -> 'R) -> thisArg:'T -> args:'A -> 'R)
      =
      fun (x489 : t) ->
        fun ~this:(x484 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x487 : 'T) ->
            fun ~args:(x488 : 'A) ->
              Obj.magic
                (Ojs.call (t_to_js x489) "apply"
                   [|(Ojs.fun_to_js_args
                        (fun (x485 : _) ->
                           Obj.magic
                             (x484 ~this:(Obj.magic (Ojs.array_get x485 0))
                                ~args:(Ojs.list_of_js_from any_of_js x485 1))));(
                     Obj.magic x487);(Obj.magic x488)|])
    let (call :
      t ->
        this:(this:'T -> args:any list -> 'R) ->
          thisArg:'T -> args:any list -> 'R)
      =
      fun (x497 : t) ->
        fun ~this:(x490 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x491 : 'T) ->
            fun ~args:(x492 : any list) ->
              Obj.magic
                (let x498 = t_to_js x497 in
                 Ojs.call (Ojs.get_prop_ascii x498 "call") "apply"
                   [|x498;((let x493 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x493 "push"
                                 [|(Ojs.fun_to_js_args
                                      (fun (x495 : _) ->
                                         Obj.magic
                                           (x490
                                              ~this:(Obj.magic
                                                       (Ojs.array_get x495 0))
                                              ~args:(Ojs.list_of_js_from
                                                       any_of_js x495 1))))|]);
                            ignore
                              (Ojs.call x493 "push" [|(Obj.magic x491)|]);
                            List.iter
                              (fun (x494 : any) ->
                                 ignore
                                   (Ojs.call x493 "push" [|(any_to_js x494)|]))
                              x492;
                            x493))|])
    let (bind :
      t ->
        this:'T -> thisArg:'T ThisParameterType.t -> 'T OmitThisParameter.t)
      =
      fun (x502 : t) ->
        fun ~this:(x499 : 'T) ->
          fun ~thisArg:(x500 : 'T ThisParameterType.t) ->
            OmitThisParameter.t_of_js Obj.magic
              (Ojs.call (t_to_js x502) "bind"
                 [|(Obj.magic x499);(ThisParameterType.t_to_js Obj.magic x500)|])
    let (bind_all :
      t ->
        this:(this:'T -> args:any list -> 'R) ->
          thisArg:'T -> args:any list -> 'R)
      =
      fun (x508 : t) ->
        fun ~this:(x504 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x507 : 'T) ->
            fun ~args:(x509 : any list) ->
              Obj.magic
                (Ojs.call
                   (Ojs.call (t_to_js x508) "bind"
                      [|(Ojs.fun_to_js_args
                           (fun (x505 : _) ->
                              Obj.magic
                                (x504
                                   ~this:(Obj.magic (Ojs.array_get x505 0))
                                   ~args:(Ojs.list_of_js_from any_of_js x505
                                            1))));(Obj.magic x507)|]) "apply"
                   [|Ojs.null;((let x510 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                List.iter
                                  (fun (x511 : any) ->
                                     ignore
                                       (Ojs.call x510 "push"
                                          [|(any_to_js x511)|])) x509;
                                x510))|])
  end
module NewableFunction =
  struct
    include struct include Function end
    let (apply_ : t -> this:'T anonymous_interface_12 -> thisArg:'T -> unit)
      =
      fun (x515 : t) ->
        fun ~this:(x512 : 'T anonymous_interface_12) ->
          fun ~thisArg:(x514 : 'T) ->
            ignore
              (Ojs.call (t_to_js x515) "apply"
                 [|(anonymous_interface_12_to_js Obj.magic x512);(Obj.magic
                                                                    x514)|])
    let (apply_' :
      t -> this:('A, 'T) anonymous_interface_10 -> thisArg:'T -> 'A -> unit)
      =
      fun (x521 : t) ->
        fun ~this:(x516 : ('A, 'T) anonymous_interface_10) ->
          fun ~thisArg:(x519 : 'T) ->
            fun (x520 : 'A) ->
              ignore
                (Ojs.call (t_to_js x521) "apply"
                   [|(anonymous_interface_10_to_js Obj.magic Obj.magic x516);(
                     Obj.magic x519);(Obj.magic x520)|])
    let (call :
      t ->
        this:('A, 'T) anonymous_interface_10 ->
          thisArg:'T -> any list -> unit)
      =
      fun (x529 : t) ->
        fun ~this:(x522 : ('A, 'T) anonymous_interface_10) ->
          fun ~thisArg:(x523 : 'T) ->
            fun (x524 : any list) ->
              ignore
                (let x530 = t_to_js x529 in
                 Ojs.call (Ojs.get_prop_ascii x530 "call") "apply"
                   [|x530;((let x525 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x525 "push"
                                 [|(anonymous_interface_10_to_js Obj.magic
                                      Obj.magic x522)|]);
                            ignore
                              (Ojs.call x525 "push" [|(Obj.magic x523)|]);
                            List.iter
                              (fun (x526 : any) ->
                                 ignore
                                   (Ojs.call x525 "push" [|(any_to_js x526)|]))
                              x524;
                            x525))|])
    let (bind : t -> this:'T -> thisArg:any -> 'T) =
      fun (x533 : t) ->
        fun ~this:(x531 : 'T) ->
          fun ~thisArg:(x532 : any) ->
            Obj.magic
              (Ojs.call (t_to_js x533) "bind"
                 [|(Obj.magic x531);(any_to_js x532)|])
    let (bind' :
      t ->
        this:('A, 'A0, 'R) anonymous_interface_8 ->
          thisArg:any -> arg0:'A0 -> ('A, 'R) anonymous_interface_9)
      =
      fun (x540 : t) ->
        fun ~this:(x534 : ('A, 'A0, 'R) anonymous_interface_8) ->
          fun ~thisArg:(x538 : any) ->
            fun ~arg0:(x539 : 'A0) ->
              anonymous_interface_9_of_js Obj.magic Obj.magic
                (Ojs.call (t_to_js x540) "bind"
                   [|(anonymous_interface_8_to_js Obj.magic Obj.magic
                        Obj.magic x534);(any_to_js x538);(Obj.magic x539)|])
    let (bind'' :
      t ->
        this:('A, 'A0, 'A1, 'R) anonymous_interface_7 ->
          thisArg:any ->
            arg0:'A0 -> arg1:'A1 -> ('A, 'R) anonymous_interface_9)
      =
      fun (x551 : t) ->
        fun ~this:(x543 : ('A, 'A0, 'A1, 'R) anonymous_interface_7) ->
          fun ~thisArg:(x548 : any) ->
            fun ~arg0:(x549 : 'A0) ->
              fun ~arg1:(x550 : 'A1) ->
                anonymous_interface_9_of_js Obj.magic Obj.magic
                  (Ojs.call (t_to_js x551) "bind"
                     [|(anonymous_interface_7_to_js Obj.magic Obj.magic
                          Obj.magic Obj.magic x543);(any_to_js x548);(
                       Obj.magic x549);(Obj.magic x550)|])
    let (bind''' :
      t ->
        this:('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6 ->
          thisArg:any ->
            arg0:'A0 ->
              arg1:'A1 -> arg2:'A2 -> ('A, 'R) anonymous_interface_9)
      =
      fun (x564 : t) ->
        fun ~this:(x554 : ('A, 'A0, 'A1, 'A2, 'R) anonymous_interface_6) ->
          fun ~thisArg:(x560 : any) ->
            fun ~arg0:(x561 : 'A0) ->
              fun ~arg1:(x562 : 'A1) ->
                fun ~arg2:(x563 : 'A2) ->
                  anonymous_interface_9_of_js Obj.magic Obj.magic
                    (Ojs.call (t_to_js x564) "bind"
                       [|(anonymous_interface_6_to_js Obj.magic Obj.magic
                            Obj.magic Obj.magic Obj.magic x554);(any_to_js
                                                                   x560);(
                         Obj.magic x561);(Obj.magic x562);(Obj.magic x563)|])
    let (bind'''' :
      t ->
        this:('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5 ->
          thisArg:any ->
            arg0:'A0 ->
              arg1:'A1 ->
                arg2:'A2 -> arg3:'A3 -> ('A, 'R) anonymous_interface_9)
      =
      fun (x579 : t) ->
        fun ~this:(x567 : ('A, 'A0, 'A1, 'A2, 'A3, 'R) anonymous_interface_5)
          ->
          fun ~thisArg:(x574 : any) ->
            fun ~arg0:(x575 : 'A0) ->
              fun ~arg1:(x576 : 'A1) ->
                fun ~arg2:(x577 : 'A2) ->
                  fun ~arg3:(x578 : 'A3) ->
                    anonymous_interface_9_of_js Obj.magic Obj.magic
                      (Ojs.call (t_to_js x579) "bind"
                         [|(anonymous_interface_5_to_js Obj.magic Obj.magic
                              Obj.magic Obj.magic Obj.magic Obj.magic x567);(
                           any_to_js x574);(Obj.magic x575);(Obj.magic x576);(
                           Obj.magic x577);(Obj.magic x578)|])
    let (bind''''' :
      t ->
        this:('AX, 'R) anonymous_interface_11 ->
          thisArg:any -> 'AX list -> ('AX, 'R) anonymous_interface_11)
      =
      fun (x589 : t) ->
        fun ~this:(x582 : ('AX, 'R) anonymous_interface_11) ->
          fun ~thisArg:(x583 : any) ->
            fun (x584 : 'AX list) ->
              anonymous_interface_11_of_js Obj.magic Obj.magic
                (let x590 = t_to_js x589 in
                 Ojs.call (Ojs.get_prop_ascii x590 "bind") "apply"
                   [|x590;((let x585 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x585 "push"
                                 [|(anonymous_interface_11_to_js Obj.magic
                                      Obj.magic x582)|]);
                            ignore
                              (Ojs.call x585 "push" [|(any_to_js x583)|]);
                            List.iter
                              (fun (x586 : 'AX) ->
                                 ignore
                                   (Ojs.call x585 "push" [|(Obj.magic x586)|]))
                              x584;
                            x585))|])
  end
module IArguments =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x594 : Ojs.t) -> x594
    and t_to_js : t -> Ojs.t = fun (x593 : Ojs.t) -> x593
    let (get : t -> int -> any) =
      fun (x595 : t) ->
        fun (x596 : int) -> any_of_js (Ojs.array_get (t_to_js x595) x596)
    let (set : t -> int -> any -> unit) =
      fun (x597 : t) ->
        fun (x598 : int) ->
          fun (x599 : any) ->
            Ojs.array_set (t_to_js x597) x598 (any_to_js x599)
    let (get_length : t -> int) =
      fun (x600 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x600) "length")
    let (set_length : t -> int -> unit) =
      fun (x601 : t) ->
        fun (x602 : int) ->
          Ojs.set_prop_ascii (t_to_js x601) "length" (Ojs.int_to_js x602)
    let (get_callee : t -> Function.t) =
      fun (x603 : t) ->
        Function.t_of_js (Ojs.get_prop_ascii (t_to_js x603) "callee")
    let (set_callee : t -> Function.t -> unit) =
      fun (x604 : t) ->
        fun (x605 : Function.t) ->
          Ojs.set_prop_ascii (t_to_js x604) "callee" (Function.t_to_js x605)
  end
module Intl =
  struct
    module CollatorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x607 : Ojs.t) -> x607
        and t_to_js : t -> Ojs.t = fun (x606 : Ojs.t) -> x606
        let (get_usage : t -> string) =
          fun (x608 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x608) "usage")
        let (set_usage : t -> string -> unit) =
          fun (x609 : t) ->
            fun (x610 : string) ->
              Ojs.set_prop_ascii (t_to_js x609) "usage"
                (Ojs.string_to_js x610)
        let (get_localeMatcher : t -> string) =
          fun (x611 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x611) "localeMatcher")
        let (set_localeMatcher : t -> string -> unit) =
          fun (x612 : t) ->
            fun (x613 : string) ->
              Ojs.set_prop_ascii (t_to_js x612) "localeMatcher"
                (Ojs.string_to_js x613)
        let (get_numeric : t -> bool) =
          fun (x614 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x614) "numeric")
        let (set_numeric : t -> bool -> unit) =
          fun (x615 : t) ->
            fun (x616 : bool) ->
              Ojs.set_prop_ascii (t_to_js x615) "numeric"
                (Ojs.bool_to_js x616)
        let (get_caseFirst : t -> string) =
          fun (x617 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x617) "caseFirst")
        let (set_caseFirst : t -> string -> unit) =
          fun (x618 : t) ->
            fun (x619 : string) ->
              Ojs.set_prop_ascii (t_to_js x618) "caseFirst"
                (Ojs.string_to_js x619)
        let (get_sensitivity : t -> string) =
          fun (x620 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x620) "sensitivity")
        let (set_sensitivity : t -> string -> unit) =
          fun (x621 : t) ->
            fun (x622 : string) ->
              Ojs.set_prop_ascii (t_to_js x621) "sensitivity"
                (Ojs.string_to_js x622)
        let (get_ignorePunctuation : t -> bool) =
          fun (x623 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x623) "ignorePunctuation")
        let (set_ignorePunctuation : t -> bool -> unit) =
          fun (x624 : t) ->
            fun (x625 : bool) ->
              Ojs.set_prop_ascii (t_to_js x624) "ignorePunctuation"
                (Ojs.bool_to_js x625)
      end
    module ResolvedCollatorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x627 : Ojs.t) -> x627
        and t_to_js : t -> Ojs.t = fun (x626 : Ojs.t) -> x626
        let (get_locale : t -> string) =
          fun (x628 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x628) "locale")
        let (set_locale : t -> string -> unit) =
          fun (x629 : t) ->
            fun (x630 : string) ->
              Ojs.set_prop_ascii (t_to_js x629) "locale"
                (Ojs.string_to_js x630)
        let (get_usage : t -> string) =
          fun (x631 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x631) "usage")
        let (set_usage : t -> string -> unit) =
          fun (x632 : t) ->
            fun (x633 : string) ->
              Ojs.set_prop_ascii (t_to_js x632) "usage"
                (Ojs.string_to_js x633)
        let (get_sensitivity : t -> string) =
          fun (x634 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x634) "sensitivity")
        let (set_sensitivity : t -> string -> unit) =
          fun (x635 : t) ->
            fun (x636 : string) ->
              Ojs.set_prop_ascii (t_to_js x635) "sensitivity"
                (Ojs.string_to_js x636)
        let (get_ignorePunctuation : t -> bool) =
          fun (x637 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x637) "ignorePunctuation")
        let (set_ignorePunctuation : t -> bool -> unit) =
          fun (x638 : t) ->
            fun (x639 : bool) ->
              Ojs.set_prop_ascii (t_to_js x638) "ignorePunctuation"
                (Ojs.bool_to_js x639)
        let (get_collation : t -> string) =
          fun (x640 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x640) "collation")
        let (set_collation : t -> string -> unit) =
          fun (x641 : t) ->
            fun (x642 : string) ->
              Ojs.set_prop_ascii (t_to_js x641) "collation"
                (Ojs.string_to_js x642)
        let (get_caseFirst : t -> string) =
          fun (x643 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x643) "caseFirst")
        let (set_caseFirst : t -> string -> unit) =
          fun (x644 : t) ->
            fun (x645 : string) ->
              Ojs.set_prop_ascii (t_to_js x644) "caseFirst"
                (Ojs.string_to_js x645)
        let (get_numeric : t -> bool) =
          fun (x646 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x646) "numeric")
        let (set_numeric : t -> bool -> unit) =
          fun (x647 : t) ->
            fun (x648 : bool) ->
              Ojs.set_prop_ascii (t_to_js x647) "numeric"
                (Ojs.bool_to_js x648)
      end
    module Collator =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x650 : Ojs.t) -> x650
        and t_to_js : t -> Ojs.t = fun (x649 : Ojs.t) -> x649
        let (compare : t -> x:string -> y:string -> int) =
          fun (x653 : t) ->
            fun ~x:(x651 : string) ->
              fun ~y:(x652 : string) ->
                Ojs.int_of_js
                  (Ojs.call (t_to_js x653) "compare"
                     [|(Ojs.string_to_js x651);(Ojs.string_to_js x652)|])
        let (resolvedOptions : t -> ResolvedCollatorOptions.t) =
          fun (x654 : t) ->
            ResolvedCollatorOptions.t_of_js
              (Ojs.call (t_to_js x654) "resolvedOptions" [||])
      end
    let (collator : anonymous_interface_2) =
      anonymous_interface_2_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl") "Collator")
    module NumberFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x656 : Ojs.t) -> x656
        and t_to_js : t -> Ojs.t = fun (x655 : Ojs.t) -> x655
        let (get_localeMatcher : t -> string) =
          fun (x657 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x657) "localeMatcher")
        let (set_localeMatcher : t -> string -> unit) =
          fun (x658 : t) ->
            fun (x659 : string) ->
              Ojs.set_prop_ascii (t_to_js x658) "localeMatcher"
                (Ojs.string_to_js x659)
        let (get_style : t -> string) =
          fun (x660 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x660) "style")
        let (set_style : t -> string -> unit) =
          fun (x661 : t) ->
            fun (x662 : string) ->
              Ojs.set_prop_ascii (t_to_js x661) "style"
                (Ojs.string_to_js x662)
        let (get_currency : t -> string) =
          fun (x663 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x663) "currency")
        let (set_currency : t -> string -> unit) =
          fun (x664 : t) ->
            fun (x665 : string) ->
              Ojs.set_prop_ascii (t_to_js x664) "currency"
                (Ojs.string_to_js x665)
        let (get_currencyDisplay : t -> string) =
          fun (x666 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x666) "currencyDisplay")
        let (set_currencyDisplay : t -> string -> unit) =
          fun (x667 : t) ->
            fun (x668 : string) ->
              Ojs.set_prop_ascii (t_to_js x667) "currencyDisplay"
                (Ojs.string_to_js x668)
        let (get_currencySign : t -> string) =
          fun (x669 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x669) "currencySign")
        let (set_currencySign : t -> string -> unit) =
          fun (x670 : t) ->
            fun (x671 : string) ->
              Ojs.set_prop_ascii (t_to_js x670) "currencySign"
                (Ojs.string_to_js x671)
        let (get_useGrouping : t -> bool) =
          fun (x672 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x672) "useGrouping")
        let (set_useGrouping : t -> bool -> unit) =
          fun (x673 : t) ->
            fun (x674 : bool) ->
              Ojs.set_prop_ascii (t_to_js x673) "useGrouping"
                (Ojs.bool_to_js x674)
        let (get_minimumIntegerDigits : t -> int) =
          fun (x675 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x675) "minimumIntegerDigits")
        let (set_minimumIntegerDigits : t -> int -> unit) =
          fun (x676 : t) ->
            fun (x677 : int) ->
              Ojs.set_prop_ascii (t_to_js x676) "minimumIntegerDigits"
                (Ojs.int_to_js x677)
        let (get_minimumFractionDigits : t -> int) =
          fun (x678 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x678) "minimumFractionDigits")
        let (set_minimumFractionDigits : t -> int -> unit) =
          fun (x679 : t) ->
            fun (x680 : int) ->
              Ojs.set_prop_ascii (t_to_js x679) "minimumFractionDigits"
                (Ojs.int_to_js x680)
        let (get_maximumFractionDigits : t -> int) =
          fun (x681 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x681) "maximumFractionDigits")
        let (set_maximumFractionDigits : t -> int -> unit) =
          fun (x682 : t) ->
            fun (x683 : int) ->
              Ojs.set_prop_ascii (t_to_js x682) "maximumFractionDigits"
                (Ojs.int_to_js x683)
        let (get_minimumSignificantDigits : t -> int) =
          fun (x684 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x684) "minimumSignificantDigits")
        let (set_minimumSignificantDigits : t -> int -> unit) =
          fun (x685 : t) ->
            fun (x686 : int) ->
              Ojs.set_prop_ascii (t_to_js x685) "minimumSignificantDigits"
                (Ojs.int_to_js x686)
        let (get_maximumSignificantDigits : t -> int) =
          fun (x687 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x687) "maximumSignificantDigits")
        let (set_maximumSignificantDigits : t -> int -> unit) =
          fun (x688 : t) ->
            fun (x689 : int) ->
              Ojs.set_prop_ascii (t_to_js x688) "maximumSignificantDigits"
                (Ojs.int_to_js x689)
      end
    module ResolvedNumberFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x691 : Ojs.t) -> x691
        and t_to_js : t -> Ojs.t = fun (x690 : Ojs.t) -> x690
        let (get_locale : t -> string) =
          fun (x692 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x692) "locale")
        let (set_locale : t -> string -> unit) =
          fun (x693 : t) ->
            fun (x694 : string) ->
              Ojs.set_prop_ascii (t_to_js x693) "locale"
                (Ojs.string_to_js x694)
        let (get_numberingSystem : t -> string) =
          fun (x695 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x695) "numberingSystem")
        let (set_numberingSystem : t -> string -> unit) =
          fun (x696 : t) ->
            fun (x697 : string) ->
              Ojs.set_prop_ascii (t_to_js x696) "numberingSystem"
                (Ojs.string_to_js x697)
        let (get_style : t -> string) =
          fun (x698 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x698) "style")
        let (set_style : t -> string -> unit) =
          fun (x699 : t) ->
            fun (x700 : string) ->
              Ojs.set_prop_ascii (t_to_js x699) "style"
                (Ojs.string_to_js x700)
        let (get_currency : t -> string) =
          fun (x701 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x701) "currency")
        let (set_currency : t -> string -> unit) =
          fun (x702 : t) ->
            fun (x703 : string) ->
              Ojs.set_prop_ascii (t_to_js x702) "currency"
                (Ojs.string_to_js x703)
        let (get_currencyDisplay : t -> string) =
          fun (x704 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x704) "currencyDisplay")
        let (set_currencyDisplay : t -> string -> unit) =
          fun (x705 : t) ->
            fun (x706 : string) ->
              Ojs.set_prop_ascii (t_to_js x705) "currencyDisplay"
                (Ojs.string_to_js x706)
        let (get_minimumIntegerDigits : t -> int) =
          fun (x707 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x707) "minimumIntegerDigits")
        let (set_minimumIntegerDigits : t -> int -> unit) =
          fun (x708 : t) ->
            fun (x709 : int) ->
              Ojs.set_prop_ascii (t_to_js x708) "minimumIntegerDigits"
                (Ojs.int_to_js x709)
        let (get_minimumFractionDigits : t -> int) =
          fun (x710 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x710) "minimumFractionDigits")
        let (set_minimumFractionDigits : t -> int -> unit) =
          fun (x711 : t) ->
            fun (x712 : int) ->
              Ojs.set_prop_ascii (t_to_js x711) "minimumFractionDigits"
                (Ojs.int_to_js x712)
        let (get_maximumFractionDigits : t -> int) =
          fun (x713 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x713) "maximumFractionDigits")
        let (set_maximumFractionDigits : t -> int -> unit) =
          fun (x714 : t) ->
            fun (x715 : int) ->
              Ojs.set_prop_ascii (t_to_js x714) "maximumFractionDigits"
                (Ojs.int_to_js x715)
        let (get_minimumSignificantDigits : t -> int) =
          fun (x716 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x716) "minimumSignificantDigits")
        let (set_minimumSignificantDigits : t -> int -> unit) =
          fun (x717 : t) ->
            fun (x718 : int) ->
              Ojs.set_prop_ascii (t_to_js x717) "minimumSignificantDigits"
                (Ojs.int_to_js x718)
        let (get_maximumSignificantDigits : t -> int) =
          fun (x719 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x719) "maximumSignificantDigits")
        let (set_maximumSignificantDigits : t -> int -> unit) =
          fun (x720 : t) ->
            fun (x721 : int) ->
              Ojs.set_prop_ascii (t_to_js x720) "maximumSignificantDigits"
                (Ojs.int_to_js x721)
        let (get_useGrouping : t -> bool) =
          fun (x722 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x722) "useGrouping")
        let (set_useGrouping : t -> bool -> unit) =
          fun (x723 : t) ->
            fun (x724 : bool) ->
              Ojs.set_prop_ascii (t_to_js x723) "useGrouping"
                (Ojs.bool_to_js x724)
      end
    module NumberFormat =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x726 : Ojs.t) -> x726
        and t_to_js : t -> Ojs.t = fun (x725 : Ojs.t) -> x725
        let (format : t -> value:int -> string) =
          fun (x728 : t) ->
            fun ~value:(x727 : int) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x728) "format" [|(Ojs.int_to_js x727)|])
        let (resolvedOptions : t -> ResolvedNumberFormatOptions.t) =
          fun (x729 : t) ->
            ResolvedNumberFormatOptions.t_of_js
              (Ojs.call (t_to_js x729) "resolvedOptions" [||])
      end
    let (numberFormat : anonymous_interface_4) =
      anonymous_interface_4_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl")
           "NumberFormat")
    module DateTimeFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x731 : Ojs.t) -> x731
        and t_to_js : t -> Ojs.t = fun (x730 : Ojs.t) -> x730
        let (get_localeMatcher : t -> [ `best_fit  | `lookup ]) =
          fun (x732 : t) ->
            let x733 = Ojs.get_prop_ascii (t_to_js x732) "localeMatcher" in
            match Ojs.string_of_js x733 with
            | "best fit" -> `best_fit
            | "lookup" -> `lookup
            | _ -> assert false
        let (set_localeMatcher : t -> [ `best_fit  | `lookup ] -> unit) =
          fun (x734 : t) ->
            fun (x735 : [ `best_fit  | `lookup ]) ->
              Ojs.set_prop_ascii (t_to_js x734) "localeMatcher"
                (match x735 with
                 | `best_fit -> Ojs.string_to_js "bestFit"
                 | `lookup -> Ojs.string_to_js "lookup")
        let (get_weekday : t -> [ `long  | `narrow  | `short ]) =
          fun (x736 : t) ->
            let x737 = Ojs.get_prop_ascii (t_to_js x736) "weekday" in
            match Ojs.string_of_js x737 with
            | "long" -> `long
            | "narrow" -> `narrow
            | "short" -> `short
            | _ -> assert false
        let (set_weekday : t -> [ `long  | `narrow  | `short ] -> unit) =
          fun (x738 : t) ->
            fun (x739 : [ `long  | `narrow  | `short ]) ->
              Ojs.set_prop_ascii (t_to_js x738) "weekday"
                (match x739 with
                 | `long -> Ojs.string_to_js "long"
                 | `narrow -> Ojs.string_to_js "narrow"
                 | `short -> Ojs.string_to_js "short")
        let (get_era : t -> [ `long  | `narrow  | `short ]) =
          fun (x740 : t) ->
            let x741 = Ojs.get_prop_ascii (t_to_js x740) "era" in
            match Ojs.string_of_js x741 with
            | "long" -> `long
            | "narrow" -> `narrow
            | "short" -> `short
            | _ -> assert false
        let (set_era : t -> [ `long  | `narrow  | `short ] -> unit) =
          fun (x742 : t) ->
            fun (x743 : [ `long  | `narrow  | `short ]) ->
              Ojs.set_prop_ascii (t_to_js x742) "era"
                (match x743 with
                 | `long -> Ojs.string_to_js "long"
                 | `narrow -> Ojs.string_to_js "narrow"
                 | `short -> Ojs.string_to_js "short")
        let (get_year : t -> [ `two_digit  | `numeric ]) =
          fun (x744 : t) ->
            let x745 = Ojs.get_prop_ascii (t_to_js x744) "year" in
            match Ojs.string_of_js x745 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_year : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x746 : t) ->
            fun (x747 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x746) "year"
                (match x747 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_month :
          t -> [ `two_digit  | `long  | `narrow  | `numeric  | `short ]) =
          fun (x748 : t) ->
            let x749 = Ojs.get_prop_ascii (t_to_js x748) "month" in
            match Ojs.string_of_js x749 with
            | "2-digit" -> `two_digit
            | "long" -> `long
            | "narrow" -> `narrow
            | "numeric" -> `numeric
            | "short" -> `short
            | _ -> assert false
        let (set_month :
          t ->
            [ `two_digit  | `long  | `narrow  | `numeric  | `short ] -> unit)
          =
          fun (x750 : t) ->
            fun
              (x751 :
                [ `two_digit  | `long  | `narrow  | `numeric  | `short ])
              ->
              Ojs.set_prop_ascii (t_to_js x750) "month"
                (match x751 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `long -> Ojs.string_to_js "long"
                 | `narrow -> Ojs.string_to_js "narrow"
                 | `numeric -> Ojs.string_to_js "numeric"
                 | `short -> Ojs.string_to_js "short")
        let (get_day : t -> [ `two_digit  | `numeric ]) =
          fun (x752 : t) ->
            let x753 = Ojs.get_prop_ascii (t_to_js x752) "day" in
            match Ojs.string_of_js x753 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_day : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x754 : t) ->
            fun (x755 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x754) "day"
                (match x755 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_hour : t -> [ `two_digit  | `numeric ]) =
          fun (x756 : t) ->
            let x757 = Ojs.get_prop_ascii (t_to_js x756) "hour" in
            match Ojs.string_of_js x757 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_hour : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x758 : t) ->
            fun (x759 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x758) "hour"
                (match x759 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_minute : t -> [ `two_digit  | `numeric ]) =
          fun (x760 : t) ->
            let x761 = Ojs.get_prop_ascii (t_to_js x760) "minute" in
            match Ojs.string_of_js x761 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_minute : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x762 : t) ->
            fun (x763 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x762) "minute"
                (match x763 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_second : t -> [ `two_digit  | `numeric ]) =
          fun (x764 : t) ->
            let x765 = Ojs.get_prop_ascii (t_to_js x764) "second" in
            match Ojs.string_of_js x765 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_second : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x766 : t) ->
            fun (x767 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x766) "second"
                (match x767 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_timeZoneName : t -> [ `long  | `short ]) =
          fun (x768 : t) ->
            let x769 = Ojs.get_prop_ascii (t_to_js x768) "timeZoneName" in
            match Ojs.string_of_js x769 with
            | "long" -> `long
            | "short" -> `short
            | _ -> assert false
        let (set_timeZoneName : t -> [ `long  | `short ] -> unit) =
          fun (x770 : t) ->
            fun (x771 : [ `long  | `short ]) ->
              Ojs.set_prop_ascii (t_to_js x770) "timeZoneName"
                (match x771 with
                 | `long -> Ojs.string_to_js "long"
                 | `short -> Ojs.string_to_js "short")
        let (get_formatMatcher : t -> [ `basic  | `best_fit ]) =
          fun (x772 : t) ->
            let x773 = Ojs.get_prop_ascii (t_to_js x772) "formatMatcher" in
            match Ojs.string_of_js x773 with
            | "basic" -> `basic
            | "best fit" -> `best_fit
            | _ -> assert false
        let (set_formatMatcher : t -> [ `basic  | `best_fit ] -> unit) =
          fun (x774 : t) ->
            fun (x775 : [ `basic  | `best_fit ]) ->
              Ojs.set_prop_ascii (t_to_js x774) "formatMatcher"
                (match x775 with
                 | `basic -> Ojs.string_to_js "basic"
                 | `best_fit -> Ojs.string_to_js "bestFit")
        let (get_hour12 : t -> bool) =
          fun (x776 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x776) "hour12")
        let (set_hour12 : t -> bool -> unit) =
          fun (x777 : t) ->
            fun (x778 : bool) ->
              Ojs.set_prop_ascii (t_to_js x777) "hour12"
                (Ojs.bool_to_js x778)
        let (get_timeZone : t -> string) =
          fun (x779 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x779) "timeZone")
        let (set_timeZone : t -> string -> unit) =
          fun (x780 : t) ->
            fun (x781 : string) ->
              Ojs.set_prop_ascii (t_to_js x780) "timeZone"
                (Ojs.string_to_js x781)
      end
    module ResolvedDateTimeFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x783 : Ojs.t) -> x783
        and t_to_js : t -> Ojs.t = fun (x782 : Ojs.t) -> x782
        let (get_locale : t -> string) =
          fun (x784 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x784) "locale")
        let (set_locale : t -> string -> unit) =
          fun (x785 : t) ->
            fun (x786 : string) ->
              Ojs.set_prop_ascii (t_to_js x785) "locale"
                (Ojs.string_to_js x786)
        let (get_calendar : t -> string) =
          fun (x787 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x787) "calendar")
        let (set_calendar : t -> string -> unit) =
          fun (x788 : t) ->
            fun (x789 : string) ->
              Ojs.set_prop_ascii (t_to_js x788) "calendar"
                (Ojs.string_to_js x789)
        let (get_numberingSystem : t -> string) =
          fun (x790 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x790) "numberingSystem")
        let (set_numberingSystem : t -> string -> unit) =
          fun (x791 : t) ->
            fun (x792 : string) ->
              Ojs.set_prop_ascii (t_to_js x791) "numberingSystem"
                (Ojs.string_to_js x792)
        let (get_timeZone : t -> string) =
          fun (x793 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x793) "timeZone")
        let (set_timeZone : t -> string -> unit) =
          fun (x794 : t) ->
            fun (x795 : string) ->
              Ojs.set_prop_ascii (t_to_js x794) "timeZone"
                (Ojs.string_to_js x795)
        let (get_hour12 : t -> bool) =
          fun (x796 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x796) "hour12")
        let (set_hour12 : t -> bool -> unit) =
          fun (x797 : t) ->
            fun (x798 : bool) ->
              Ojs.set_prop_ascii (t_to_js x797) "hour12"
                (Ojs.bool_to_js x798)
        let (get_weekday : t -> string) =
          fun (x799 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x799) "weekday")
        let (set_weekday : t -> string -> unit) =
          fun (x800 : t) ->
            fun (x801 : string) ->
              Ojs.set_prop_ascii (t_to_js x800) "weekday"
                (Ojs.string_to_js x801)
        let (get_era : t -> string) =
          fun (x802 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x802) "era")
        let (set_era : t -> string -> unit) =
          fun (x803 : t) ->
            fun (x804 : string) ->
              Ojs.set_prop_ascii (t_to_js x803) "era" (Ojs.string_to_js x804)
        let (get_year : t -> string) =
          fun (x805 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x805) "year")
        let (set_year : t -> string -> unit) =
          fun (x806 : t) ->
            fun (x807 : string) ->
              Ojs.set_prop_ascii (t_to_js x806) "year"
                (Ojs.string_to_js x807)
        let (get_month : t -> string) =
          fun (x808 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x808) "month")
        let (set_month : t -> string -> unit) =
          fun (x809 : t) ->
            fun (x810 : string) ->
              Ojs.set_prop_ascii (t_to_js x809) "month"
                (Ojs.string_to_js x810)
        let (get_day : t -> string) =
          fun (x811 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x811) "day")
        let (set_day : t -> string -> unit) =
          fun (x812 : t) ->
            fun (x813 : string) ->
              Ojs.set_prop_ascii (t_to_js x812) "day" (Ojs.string_to_js x813)
        let (get_hour : t -> string) =
          fun (x814 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x814) "hour")
        let (set_hour : t -> string -> unit) =
          fun (x815 : t) ->
            fun (x816 : string) ->
              Ojs.set_prop_ascii (t_to_js x815) "hour"
                (Ojs.string_to_js x816)
        let (get_minute : t -> string) =
          fun (x817 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x817) "minute")
        let (set_minute : t -> string -> unit) =
          fun (x818 : t) ->
            fun (x819 : string) ->
              Ojs.set_prop_ascii (t_to_js x818) "minute"
                (Ojs.string_to_js x819)
        let (get_second : t -> string) =
          fun (x820 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x820) "second")
        let (set_second : t -> string -> unit) =
          fun (x821 : t) ->
            fun (x822 : string) ->
              Ojs.set_prop_ascii (t_to_js x821) "second"
                (Ojs.string_to_js x822)
        let (get_timeZoneName : t -> string) =
          fun (x823 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x823) "timeZoneName")
        let (set_timeZoneName : t -> string -> unit) =
          fun (x824 : t) ->
            fun (x825 : string) ->
              Ojs.set_prop_ascii (t_to_js x824) "timeZoneName"
                (Ojs.string_to_js x825)
      end
  end
module ConcatArray =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x827 : Ojs.t) -> x827
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x826 : Ojs.t) -> x826
    let (get_length : 'T t -> int) =
      fun (x828 : 'T t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x828) "length")
    let (get : 'T t -> int -> 'T) =
      fun (x830 : 'T t) ->
        fun (x832 : int) ->
          Obj.magic (Ojs.array_get (t_to_js Obj.magic x830) x832)
    let (join : 'T t -> ?separator:string -> unit -> string) =
      fun (x836 : 'T t) ->
        fun ?separator:(x833 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x838 = t_to_js Obj.magic x836 in
               Ojs.call (Ojs.get_prop_ascii x838 "join") "apply"
                 [|x838;((let x834 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x833 with
                           | Some x835 ->
                               ignore
                                 (Ojs.call x834 "push"
                                    [|(Ojs.string_to_js x835)|])
                           | None -> ());
                          x834))|])
    let (slice : 'T t -> ?start:int -> ?end_:int -> unit -> 'T list) =
      fun (x844 : 'T t) ->
        fun ?start:(x839 : int option) ->
          fun ?end_:(x840 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x846 = t_to_js Obj.magic x844 in
                 Ojs.call (Ojs.get_prop_ascii x846 "slice") "apply"
                   [|x846;((let x841 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x839 with
                             | Some x843 ->
                                 ignore
                                   (Ojs.call x841 "push"
                                      [|(Ojs.int_to_js x843)|])
                             | None -> ());
                            (match x840 with
                             | Some x842 ->
                                 ignore
                                   (Ojs.call x841 "push"
                                      [|(Ojs.int_to_js x842)|])
                             | None -> ());
                            x841))|])
  end
module ReadonlyArray =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x849 : Ojs.t) -> x849
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x848 : Ojs.t) -> x848
    let (get_length : 'T t -> int) =
      fun (x850 : 'T t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x850) "length")
    let (toString : 'T t -> string) =
      fun (x852 : 'T t) ->
        Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x852) "toString" [||])
    let (toLocaleString : 'T t -> string) =
      fun (x854 : 'T t) ->
        Ojs.string_of_js
          (Ojs.call (t_to_js Obj.magic x854) "toLocaleString" [||])
    let (concat : 'T t -> 'T ConcatArray.t list -> 'T list) =
      fun (x860 : 'T t) ->
        fun (x856 : 'T ConcatArray.t list) ->
          Ojs.list_of_js Obj.magic
            (let x862 = t_to_js Obj.magic x860 in
             Ojs.call (Ojs.get_prop_ascii x862 "concat") "apply"
               [|x862;((let x857 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x858 : 'T ConcatArray.t) ->
                             ignore
                               (Ojs.call x857 "push"
                                  [|(ConcatArray.t_to_js Obj.magic x858)|]))
                          x856;
                        x857))|])
    let (concat' : 'T t -> ('T, 'T ConcatArray.t) union2 list -> 'T list) =
      fun (x870 : 'T t) ->
        fun (x864 : ('T, 'T ConcatArray.t) union2 list) ->
          Ojs.list_of_js Obj.magic
            (let x872 = t_to_js Obj.magic x870 in
             Ojs.call (Ojs.get_prop_ascii x872 "concat") "apply"
               [|x872;((let x865 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x866 : ('T, 'T ConcatArray.t) union2) ->
                             ignore
                               (Ojs.call x865 "push"
                                  [|(union2_to_js Obj.magic
                                       (fun (x868 : 'T ConcatArray.t) ->
                                          ConcatArray.t_to_js Obj.magic x868)
                                       x866)|])) x864;
                        x865))|])
    let (join : 'T t -> ?separator:string -> unit -> string) =
      fun (x877 : 'T t) ->
        fun ?separator:(x874 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x879 = t_to_js Obj.magic x877 in
               Ojs.call (Ojs.get_prop_ascii x879 "join") "apply"
                 [|x879;((let x875 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x874 with
                           | Some x876 ->
                               ignore
                                 (Ojs.call x875 "push"
                                    [|(Ojs.string_to_js x876)|])
                           | None -> ());
                          x875))|])
    let (slice : 'T t -> ?start:int -> ?end_:int -> unit -> 'T list) =
      fun (x885 : 'T t) ->
        fun ?start:(x880 : int option) ->
          fun ?end_:(x881 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x887 = t_to_js Obj.magic x885 in
                 Ojs.call (Ojs.get_prop_ascii x887 "slice") "apply"
                   [|x887;((let x882 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x880 with
                             | Some x884 ->
                                 ignore
                                   (Ojs.call x882 "push"
                                      [|(Ojs.int_to_js x884)|])
                             | None -> ());
                            (match x881 with
                             | Some x883 ->
                                 ignore
                                   (Ojs.call x882 "push"
                                      [|(Ojs.int_to_js x883)|])
                             | None -> ());
                            x882))|])
    let (indexOf : 'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int)
      =
      fun (x893 : 'T t) ->
        fun ~searchElement:(x889 : 'T) ->
          fun ?fromIndex:(x890 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x895 = t_to_js Obj.magic x893 in
                 Ojs.call (Ojs.get_prop_ascii x895 "indexOf") "apply"
                   [|x895;((let x891 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x891 "push" [|(Obj.magic x889)|]);
                            (match x890 with
                             | Some x892 ->
                                 ignore
                                   (Ojs.call x891 "push"
                                      [|(Ojs.int_to_js x892)|])
                             | None -> ());
                            x891))|])
    let (lastIndexOf :
      'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int) =
      fun (x900 : 'T t) ->
        fun ~searchElement:(x896 : 'T) ->
          fun ?fromIndex:(x897 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x902 = t_to_js Obj.magic x900 in
                 Ojs.call (Ojs.get_prop_ascii x902 "lastIndexOf") "apply"
                   [|x902;((let x898 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x898 "push" [|(Obj.magic x896)|]);
                            (match x897 with
                             | Some x899 ->
                                 ignore
                                   (Ojs.call x898 "push"
                                      [|(Ojs.int_to_js x899)|])
                             | None -> ());
                            x898))|])
    let (every :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x911 : 'T t) ->
        fun (x903 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x904 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x913 = t_to_js Obj.magic x911 in
                 Ojs.call (Ojs.get_prop_ascii x913 "every") "apply"
                   [|x913;((let x905 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x905 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x907 : Ojs.t) ->
                                         fun (x908 : Ojs.t) ->
                                           fun (x909 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x903 ~value:(Obj.magic x907)
                                                  ~index:(Ojs.int_of_js x908)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x909))))|]);
                            (match x904 with
                             | Some x906 ->
                                 ignore
                                   (Ojs.call x905 "push" [|(any_to_js x906)|])
                             | None -> ());
                            x905))|])
    let (every' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x922 : 'T t) ->
        fun (x914 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x915 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x924 = t_to_js Obj.magic x922 in
                 Ojs.call (Ojs.get_prop_ascii x924 "every") "apply"
                   [|x924;((let x916 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x916 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x918 : Ojs.t) ->
                                         fun (x919 : Ojs.t) ->
                                           fun (x920 : Ojs.t) ->
                                             unknown_to_js
                                               (x914 ~value:(Obj.magic x918)
                                                  ~index:(Ojs.int_of_js x919)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x920))))|]);
                            (match x915 with
                             | Some x917 ->
                                 ignore
                                   (Ojs.call x916 "push" [|(any_to_js x917)|])
                             | None -> ());
                            x916))|])
    let (some :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x933 : 'T t) ->
        fun (x925 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x926 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x935 = t_to_js Obj.magic x933 in
                 Ojs.call (Ojs.get_prop_ascii x935 "some") "apply"
                   [|x935;((let x927 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x927 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x929 : Ojs.t) ->
                                         fun (x930 : Ojs.t) ->
                                           fun (x931 : Ojs.t) ->
                                             unknown_to_js
                                               (x925 ~value:(Obj.magic x929)
                                                  ~index:(Ojs.int_of_js x930)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x931))))|]);
                            (match x926 with
                             | Some x928 ->
                                 ignore
                                   (Ojs.call x927 "push" [|(any_to_js x928)|])
                             | None -> ());
                            x927))|])
    let (forEach :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x944 : 'T t) ->
        fun
          ~callbackfn:(x936 : value:'T -> index:int -> array:'T list -> unit)
          ->
          fun ?thisArg:(x937 : any option) ->
            fun () ->
              ignore
                (let x946 = t_to_js Obj.magic x944 in
                 Ojs.call (Ojs.get_prop_ascii x946 "forEach") "apply"
                   [|x946;((let x938 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x938 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x940 : Ojs.t) ->
                                         fun (x941 : Ojs.t) ->
                                           fun (x942 : Ojs.t) ->
                                             x936 ~value:(Obj.magic x940)
                                               ~index:(Ojs.int_of_js x941)
                                               ~array:(Ojs.list_of_js
                                                         Obj.magic x942)))|]);
                            (match x937 with
                             | Some x939 ->
                                 ignore
                                   (Ojs.call x938 "push" [|(any_to_js x939)|])
                             | None -> ());
                            x938))|])
    let (map :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> 'U) ->
          ?thisArg:any -> unit -> 'U list)
      =
      fun (x955 : 'T t) ->
        fun ~callbackfn:(x947 : value:'T -> index:int -> array:'T list -> 'U)
          ->
          fun ?thisArg:(x948 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x957 = t_to_js Obj.magic x955 in
                 Ojs.call (Ojs.get_prop_ascii x957 "map") "apply"
                   [|x957;((let x949 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x949 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x951 : Ojs.t) ->
                                         fun (x952 : Ojs.t) ->
                                           fun (x953 : Ojs.t) ->
                                             Obj.magic
                                               (x947 ~value:(Obj.magic x951)
                                                  ~index:(Ojs.int_of_js x952)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x953))))|]);
                            (match x948 with
                             | Some x950 ->
                                 ignore
                                   (Ojs.call x949 "push" [|(any_to_js x950)|])
                             | None -> ());
                            x949))|])
    let (filter :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> 'S list)
      =
      fun (x967 : 'T t) ->
        fun (x959 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x960 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x969 = t_to_js Obj.magic x967 in
                 Ojs.call (Ojs.get_prop_ascii x969 "filter") "apply"
                   [|x969;((let x961 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x961 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x963 : Ojs.t) ->
                                         fun (x964 : Ojs.t) ->
                                           fun (x965 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x959 ~value:(Obj.magic x963)
                                                  ~index:(Ojs.int_of_js x964)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x965))))|]);
                            (match x960 with
                             | Some x962 ->
                                 ignore
                                   (Ojs.call x961 "push" [|(any_to_js x962)|])
                             | None -> ());
                            x961))|])
    let (filter' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T list)
      =
      fun (x979 : 'T t) ->
        fun (x971 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x972 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x981 = t_to_js Obj.magic x979 in
                 Ojs.call (Ojs.get_prop_ascii x981 "filter") "apply"
                   [|x981;((let x973 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x973 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x975 : Ojs.t) ->
                                         fun (x976 : Ojs.t) ->
                                           fun (x977 : Ojs.t) ->
                                             unknown_to_js
                                               (x971 ~value:(Obj.magic x975)
                                                  ~index:(Ojs.int_of_js x976)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x977))))|]);
                            (match x972 with
                             | Some x974 ->
                                 ignore
                                   (Ojs.call x973 "push" [|(any_to_js x974)|])
                             | None -> ());
                            x973))|])
    let (reduce :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x989 : 'T t) ->
        fun
          ~callbackfn:(x983 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x989) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x984 : Ojs.t) ->
                       fun (x985 : Ojs.t) ->
                         fun (x986 : Ojs.t) ->
                           fun (x987 : Ojs.t) ->
                             Obj.magic
                               (x983 ~previousValue:(Obj.magic x984)
                                  ~currentValue:(Obj.magic x985)
                                  ~currentIndex:(Ojs.int_of_js x986)
                                  ~array:(Ojs.list_of_js Obj.magic x987))))|])
    let (reduce' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x998 : 'T t) ->
        fun
          ~callbackfn:(x991 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x997 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x998) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x992 : Ojs.t) ->
                         fun (x993 : Ojs.t) ->
                           fun (x994 : Ojs.t) ->
                             fun (x995 : Ojs.t) ->
                               Obj.magic
                                 (x991 ~previousValue:(Obj.magic x992)
                                    ~currentValue:(Obj.magic x993)
                                    ~currentIndex:(Ojs.int_of_js x994)
                                    ~array:(Ojs.list_of_js Obj.magic x995))));(
                   Obj.magic x997)|])
    let (reduce'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1007 : 'T t) ->
        fun
          ~callbackfn:(x1000 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1006 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1007) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1001 : Ojs.t) ->
                         fun (x1002 : Ojs.t) ->
                           fun (x1003 : Ojs.t) ->
                             fun (x1004 : Ojs.t) ->
                               Obj.magic
                                 (x1000 ~previousValue:(Obj.magic x1001)
                                    ~currentValue:(Obj.magic x1002)
                                    ~currentIndex:(Ojs.int_of_js x1003)
                                    ~array:(Ojs.list_of_js Obj.magic x1004))));(
                   Obj.magic x1006)|])
    let (reduceRight :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1015 : 'T t) ->
        fun
          ~callbackfn:(x1009 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x1015) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x1010 : Ojs.t) ->
                       fun (x1011 : Ojs.t) ->
                         fun (x1012 : Ojs.t) ->
                           fun (x1013 : Ojs.t) ->
                             Obj.magic
                               (x1009 ~previousValue:(Obj.magic x1010)
                                  ~currentValue:(Obj.magic x1011)
                                  ~currentIndex:(Ojs.int_of_js x1012)
                                  ~array:(Ojs.list_of_js Obj.magic x1013))))|])
    let (reduceRight' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1024 : 'T t) ->
        fun
          ~callbackfn:(x1017 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1023 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1024) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1018 : Ojs.t) ->
                         fun (x1019 : Ojs.t) ->
                           fun (x1020 : Ojs.t) ->
                             fun (x1021 : Ojs.t) ->
                               Obj.magic
                                 (x1017 ~previousValue:(Obj.magic x1018)
                                    ~currentValue:(Obj.magic x1019)
                                    ~currentIndex:(Ojs.int_of_js x1020)
                                    ~array:(Ojs.list_of_js Obj.magic x1021))));(
                   Obj.magic x1023)|])
    let (reduceRight'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1033 : 'T t) ->
        fun
          ~callbackfn:(x1026 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1032 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1033) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1027 : Ojs.t) ->
                         fun (x1028 : Ojs.t) ->
                           fun (x1029 : Ojs.t) ->
                             fun (x1030 : Ojs.t) ->
                               Obj.magic
                                 (x1026 ~previousValue:(Obj.magic x1027)
                                    ~currentValue:(Obj.magic x1028)
                                    ~currentIndex:(Ojs.int_of_js x1029)
                                    ~array:(Ojs.list_of_js Obj.magic x1030))));(
                   Obj.magic x1032)|])
    let (get : 'T t -> int -> 'T) =
      fun (x1035 : 'T t) ->
        fun (x1037 : int) ->
          Obj.magic (Ojs.array_get (t_to_js Obj.magic x1035) x1037)
    let (to_ml : 'T t -> 'T list) =
      fun (x1038 : 'T t) ->
        Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1038)
    let (of_ml : 'T list -> 'T t) =
      fun (x1041 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1041)
  end
module TemplateStringsArray =
  struct
    include struct include ReadonlyArray end
    type t = string ReadonlyArray.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1046 : Ojs.t) -> ReadonlyArray.t_of_js Ojs.string_of_js x1046
    and t_to_js : t -> Ojs.t =
      fun (x1044 : string ReadonlyArray.t) ->
        ReadonlyArray.t_to_js Ojs.string_to_js x1044
    let (get_raw : t -> string list) =
      fun (x1048 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x1048) "raw")
  end
module Array =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x1051 : Ojs.t) -> x1051
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x1050 : Ojs.t) -> x1050
    let (get_length : 'T t -> int) =
      fun (x1052 : 'T t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1052) "length")
    let (set_length : 'T t -> int -> unit) =
      fun (x1054 : 'T t) ->
        fun (x1055 : int) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x1054) "length"
            (Ojs.int_to_js x1055)
    let (toString : 'T t -> string) =
      fun (x1057 : 'T t) ->
        Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x1057) "toString" [||])
    let (toLocaleString : 'T t -> string) =
      fun (x1059 : 'T t) ->
        Ojs.string_of_js
          (Ojs.call (t_to_js Obj.magic x1059) "toLocaleString" [||])
    let (pop : 'T t -> 'T or_undefined) =
      fun (x1061 : 'T t) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x1061) "pop" [||])
    let (push : 'T t -> 'T list -> int) =
      fun (x1067 : 'T t) ->
        fun (x1064 : 'T list) ->
          Ojs.int_of_js
            (let x1069 = t_to_js Obj.magic x1067 in
             Ojs.call (Ojs.get_prop_ascii x1069 "push") "apply"
               [|x1069;((let x1065 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1066 : 'T) ->
                              ignore
                                (Ojs.call x1065 "push" [|(Obj.magic x1066)|]))
                           x1064;
                         x1065))|])
    let (concat : 'T t -> 'T ConcatArray.t list -> 'T list) =
      fun (x1074 : 'T t) ->
        fun (x1070 : 'T ConcatArray.t list) ->
          Ojs.list_of_js Obj.magic
            (let x1076 = t_to_js Obj.magic x1074 in
             Ojs.call (Ojs.get_prop_ascii x1076 "concat") "apply"
               [|x1076;((let x1071 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1072 : 'T ConcatArray.t) ->
                              ignore
                                (Ojs.call x1071 "push"
                                   [|(ConcatArray.t_to_js Obj.magic x1072)|]))
                           x1070;
                         x1071))|])
    let (concat' : 'T t -> ('T, 'T ConcatArray.t) union2 list -> 'T list) =
      fun (x1084 : 'T t) ->
        fun (x1078 : ('T, 'T ConcatArray.t) union2 list) ->
          Ojs.list_of_js Obj.magic
            (let x1086 = t_to_js Obj.magic x1084 in
             Ojs.call (Ojs.get_prop_ascii x1086 "concat") "apply"
               [|x1086;((let x1079 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1080 : ('T, 'T ConcatArray.t) union2) ->
                              ignore
                                (Ojs.call x1079 "push"
                                   [|(union2_to_js Obj.magic
                                        (fun (x1082 : 'T ConcatArray.t) ->
                                           ConcatArray.t_to_js Obj.magic
                                             x1082) x1080)|])) x1078;
                         x1079))|])
    let (join : 'T t -> ?separator:string -> unit -> string) =
      fun (x1091 : 'T t) ->
        fun ?separator:(x1088 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x1093 = t_to_js Obj.magic x1091 in
               Ojs.call (Ojs.get_prop_ascii x1093 "join") "apply"
                 [|x1093;((let x1089 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1088 with
                            | Some x1090 ->
                                ignore
                                  (Ojs.call x1089 "push"
                                     [|(Ojs.string_to_js x1090)|])
                            | None -> ());
                           x1089))|])
    let (reverse : 'T t -> 'T list) =
      fun (x1094 : 'T t) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x1094) "reverse" [||])
    let (shift : 'T t -> 'T or_undefined) =
      fun (x1097 : 'T t) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x1097) "shift" [||])
    let (slice : 'T t -> ?start:int -> ?end_:int -> unit -> 'T list) =
      fun (x1105 : 'T t) ->
        fun ?start:(x1100 : int option) ->
          fun ?end_:(x1101 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1107 = t_to_js Obj.magic x1105 in
                 Ojs.call (Ojs.get_prop_ascii x1107 "slice") "apply"
                   [|x1107;((let x1102 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1100 with
                              | Some x1104 ->
                                  ignore
                                    (Ojs.call x1102 "push"
                                       [|(Ojs.int_to_js x1104)|])
                              | None -> ());
                             (match x1101 with
                              | Some x1103 ->
                                  ignore
                                    (Ojs.call x1102 "push"
                                       [|(Ojs.int_to_js x1103)|])
                              | None -> ());
                             x1102))|])
    let (sort : 'T t -> ?compareFn:(a:'T -> b:'T -> int) -> unit -> 'T t) =
      fun (x1114 : 'T t) ->
        fun ?compareFn:(x1109 : (a:'T -> b:'T -> int) option) ->
          fun () ->
            t_of_js Obj.magic
              (let x1116 = t_to_js Obj.magic x1114 in
               Ojs.call (Ojs.get_prop_ascii x1116 "sort") "apply"
                 [|x1116;((let x1110 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1109 with
                            | Some x1111 ->
                                ignore
                                  (Ojs.call x1110 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x1112 : Ojs.t) ->
                                             fun (x1113 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x1111 ~a:(Obj.magic x1112)
                                                    ~b:(Obj.magic x1113))))|])
                            | None -> ());
                           x1110))|])
    let (splice : 'T t -> start:int -> ?deleteCount:int -> unit -> 'T list) =
      fun (x1122 : 'T t) ->
        fun ~start:(x1118 : int) ->
          fun ?deleteCount:(x1119 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1124 = t_to_js Obj.magic x1122 in
                 Ojs.call (Ojs.get_prop_ascii x1124 "splice") "apply"
                   [|x1124;((let x1120 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1120 "push"
                                  [|(Ojs.int_to_js x1118)|]);
                             (match x1119 with
                              | Some x1121 ->
                                  ignore
                                    (Ojs.call x1120 "push"
                                       [|(Ojs.int_to_js x1121)|])
                              | None -> ());
                             x1120))|])
    let (splice' :
      'T t -> start:int -> deleteCount:int -> 'T list -> 'T list) =
      fun (x1131 : 'T t) ->
        fun ~start:(x1126 : int) ->
          fun ~deleteCount:(x1127 : int) ->
            fun (x1128 : 'T list) ->
              Ojs.list_of_js Obj.magic
                (let x1133 = t_to_js Obj.magic x1131 in
                 Ojs.call (Ojs.get_prop_ascii x1133 "splice") "apply"
                   [|x1133;((let x1129 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1129 "push"
                                  [|(Ojs.int_to_js x1126)|]);
                             ignore
                               (Ojs.call x1129 "push"
                                  [|(Ojs.int_to_js x1127)|]);
                             List.iter
                               (fun (x1130 : 'T) ->
                                  ignore
                                    (Ojs.call x1129 "push"
                                       [|(Obj.magic x1130)|])) x1128;
                             x1129))|])
    let (unshift : 'T t -> 'T list -> int) =
      fun (x1138 : 'T t) ->
        fun (x1135 : 'T list) ->
          Ojs.int_of_js
            (let x1140 = t_to_js Obj.magic x1138 in
             Ojs.call (Ojs.get_prop_ascii x1140 "unshift") "apply"
               [|x1140;((let x1136 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1137 : 'T) ->
                              ignore
                                (Ojs.call x1136 "push" [|(Obj.magic x1137)|]))
                           x1135;
                         x1136))|])
    let (indexOf : 'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int)
      =
      fun (x1145 : 'T t) ->
        fun ~searchElement:(x1141 : 'T) ->
          fun ?fromIndex:(x1142 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1147 = t_to_js Obj.magic x1145 in
                 Ojs.call (Ojs.get_prop_ascii x1147 "indexOf") "apply"
                   [|x1147;((let x1143 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1143 "push" [|(Obj.magic x1141)|]);
                             (match x1142 with
                              | Some x1144 ->
                                  ignore
                                    (Ojs.call x1143 "push"
                                       [|(Ojs.int_to_js x1144)|])
                              | None -> ());
                             x1143))|])
    let (lastIndexOf :
      'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int) =
      fun (x1152 : 'T t) ->
        fun ~searchElement:(x1148 : 'T) ->
          fun ?fromIndex:(x1149 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1154 = t_to_js Obj.magic x1152 in
                 Ojs.call (Ojs.get_prop_ascii x1154 "lastIndexOf") "apply"
                   [|x1154;((let x1150 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1150 "push" [|(Obj.magic x1148)|]);
                             (match x1149 with
                              | Some x1151 ->
                                  ignore
                                    (Ojs.call x1150 "push"
                                       [|(Ojs.int_to_js x1151)|])
                              | None -> ());
                             x1150))|])
    let (every :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1163 : 'T t) ->
        fun (x1155 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x1156 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1165 = t_to_js Obj.magic x1163 in
                 Ojs.call (Ojs.get_prop_ascii x1165 "every") "apply"
                   [|x1165;((let x1157 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1157 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1159 : Ojs.t) ->
                                          fun (x1160 : Ojs.t) ->
                                            fun (x1161 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x1155
                                                   ~value:(Obj.magic x1159)
                                                   ~index:(Ojs.int_of_js
                                                             x1160)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1161))))|]);
                             (match x1156 with
                              | Some x1158 ->
                                  ignore
                                    (Ojs.call x1157 "push"
                                       [|(any_to_js x1158)|])
                              | None -> ());
                             x1157))|])
    let (every' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1174 : 'T t) ->
        fun (x1166 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x1167 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1176 = t_to_js Obj.magic x1174 in
                 Ojs.call (Ojs.get_prop_ascii x1176 "every") "apply"
                   [|x1176;((let x1168 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1168 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1170 : Ojs.t) ->
                                          fun (x1171 : Ojs.t) ->
                                            fun (x1172 : Ojs.t) ->
                                              unknown_to_js
                                                (x1166
                                                   ~value:(Obj.magic x1170)
                                                   ~index:(Ojs.int_of_js
                                                             x1171)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1172))))|]);
                             (match x1167 with
                              | Some x1169 ->
                                  ignore
                                    (Ojs.call x1168 "push"
                                       [|(any_to_js x1169)|])
                              | None -> ());
                             x1168))|])
    let (some :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1185 : 'T t) ->
        fun (x1177 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x1178 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1187 = t_to_js Obj.magic x1185 in
                 Ojs.call (Ojs.get_prop_ascii x1187 "some") "apply"
                   [|x1187;((let x1179 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1179 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1181 : Ojs.t) ->
                                          fun (x1182 : Ojs.t) ->
                                            fun (x1183 : Ojs.t) ->
                                              unknown_to_js
                                                (x1177
                                                   ~value:(Obj.magic x1181)
                                                   ~index:(Ojs.int_of_js
                                                             x1182)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1183))))|]);
                             (match x1178 with
                              | Some x1180 ->
                                  ignore
                                    (Ojs.call x1179 "push"
                                       [|(any_to_js x1180)|])
                              | None -> ());
                             x1179))|])
    let (forEach :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x1196 : 'T t) ->
        fun
          ~callbackfn:(x1188 :
                        value:'T -> index:int -> array:'T list -> unit)
          ->
          fun ?thisArg:(x1189 : any option) ->
            fun () ->
              ignore
                (let x1198 = t_to_js Obj.magic x1196 in
                 Ojs.call (Ojs.get_prop_ascii x1198 "forEach") "apply"
                   [|x1198;((let x1190 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1190 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1192 : Ojs.t) ->
                                          fun (x1193 : Ojs.t) ->
                                            fun (x1194 : Ojs.t) ->
                                              x1188 ~value:(Obj.magic x1192)
                                                ~index:(Ojs.int_of_js x1193)
                                                ~array:(Ojs.list_of_js
                                                          Obj.magic x1194)))|]);
                             (match x1189 with
                              | Some x1191 ->
                                  ignore
                                    (Ojs.call x1190 "push"
                                       [|(any_to_js x1191)|])
                              | None -> ());
                             x1190))|])
    let (map :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> 'U) ->
          ?thisArg:any -> unit -> 'U list)
      =
      fun (x1207 : 'T t) ->
        fun
          ~callbackfn:(x1199 : value:'T -> index:int -> array:'T list -> 'U)
          ->
          fun ?thisArg:(x1200 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1209 = t_to_js Obj.magic x1207 in
                 Ojs.call (Ojs.get_prop_ascii x1209 "map") "apply"
                   [|x1209;((let x1201 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1201 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1203 : Ojs.t) ->
                                          fun (x1204 : Ojs.t) ->
                                            fun (x1205 : Ojs.t) ->
                                              Obj.magic
                                                (x1199
                                                   ~value:(Obj.magic x1203)
                                                   ~index:(Ojs.int_of_js
                                                             x1204)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1205))))|]);
                             (match x1200 with
                              | Some x1202 ->
                                  ignore
                                    (Ojs.call x1201 "push"
                                       [|(any_to_js x1202)|])
                              | None -> ());
                             x1201))|])
    let (filter :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> 'S list)
      =
      fun (x1219 : 'T t) ->
        fun (x1211 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x1212 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1221 = t_to_js Obj.magic x1219 in
                 Ojs.call (Ojs.get_prop_ascii x1221 "filter") "apply"
                   [|x1221;((let x1213 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1213 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1215 : Ojs.t) ->
                                          fun (x1216 : Ojs.t) ->
                                            fun (x1217 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x1211
                                                   ~value:(Obj.magic x1215)
                                                   ~index:(Ojs.int_of_js
                                                             x1216)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1217))))|]);
                             (match x1212 with
                              | Some x1214 ->
                                  ignore
                                    (Ojs.call x1213 "push"
                                       [|(any_to_js x1214)|])
                              | None -> ());
                             x1213))|])
    let (filter' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T list)
      =
      fun (x1231 : 'T t) ->
        fun (x1223 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x1224 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1233 = t_to_js Obj.magic x1231 in
                 Ojs.call (Ojs.get_prop_ascii x1233 "filter") "apply"
                   [|x1233;((let x1225 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1225 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1227 : Ojs.t) ->
                                          fun (x1228 : Ojs.t) ->
                                            fun (x1229 : Ojs.t) ->
                                              unknown_to_js
                                                (x1223
                                                   ~value:(Obj.magic x1227)
                                                   ~index:(Ojs.int_of_js
                                                             x1228)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1229))))|]);
                             (match x1224 with
                              | Some x1226 ->
                                  ignore
                                    (Ojs.call x1225 "push"
                                       [|(any_to_js x1226)|])
                              | None -> ());
                             x1225))|])
    let (reduce :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1241 : 'T t) ->
        fun
          ~callbackfn:(x1235 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x1241) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x1236 : Ojs.t) ->
                       fun (x1237 : Ojs.t) ->
                         fun (x1238 : Ojs.t) ->
                           fun (x1239 : Ojs.t) ->
                             Obj.magic
                               (x1235 ~previousValue:(Obj.magic x1236)
                                  ~currentValue:(Obj.magic x1237)
                                  ~currentIndex:(Ojs.int_of_js x1238)
                                  ~array:(Ojs.list_of_js Obj.magic x1239))))|])
    let (reduce' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1250 : 'T t) ->
        fun
          ~callbackfn:(x1243 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1249 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1250) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1244 : Ojs.t) ->
                         fun (x1245 : Ojs.t) ->
                           fun (x1246 : Ojs.t) ->
                             fun (x1247 : Ojs.t) ->
                               Obj.magic
                                 (x1243 ~previousValue:(Obj.magic x1244)
                                    ~currentValue:(Obj.magic x1245)
                                    ~currentIndex:(Ojs.int_of_js x1246)
                                    ~array:(Ojs.list_of_js Obj.magic x1247))));(
                   Obj.magic x1249)|])
    let (reduce'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1259 : 'T t) ->
        fun
          ~callbackfn:(x1252 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1258 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1259) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1253 : Ojs.t) ->
                         fun (x1254 : Ojs.t) ->
                           fun (x1255 : Ojs.t) ->
                             fun (x1256 : Ojs.t) ->
                               Obj.magic
                                 (x1252 ~previousValue:(Obj.magic x1253)
                                    ~currentValue:(Obj.magic x1254)
                                    ~currentIndex:(Ojs.int_of_js x1255)
                                    ~array:(Ojs.list_of_js Obj.magic x1256))));(
                   Obj.magic x1258)|])
    let (reduceRight :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1267 : 'T t) ->
        fun
          ~callbackfn:(x1261 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x1267) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x1262 : Ojs.t) ->
                       fun (x1263 : Ojs.t) ->
                         fun (x1264 : Ojs.t) ->
                           fun (x1265 : Ojs.t) ->
                             Obj.magic
                               (x1261 ~previousValue:(Obj.magic x1262)
                                  ~currentValue:(Obj.magic x1263)
                                  ~currentIndex:(Ojs.int_of_js x1264)
                                  ~array:(Ojs.list_of_js Obj.magic x1265))))|])
    let (reduceRight' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1276 : 'T t) ->
        fun
          ~callbackfn:(x1269 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1275 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1276) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1270 : Ojs.t) ->
                         fun (x1271 : Ojs.t) ->
                           fun (x1272 : Ojs.t) ->
                             fun (x1273 : Ojs.t) ->
                               Obj.magic
                                 (x1269 ~previousValue:(Obj.magic x1270)
                                    ~currentValue:(Obj.magic x1271)
                                    ~currentIndex:(Ojs.int_of_js x1272)
                                    ~array:(Ojs.list_of_js Obj.magic x1273))));(
                   Obj.magic x1275)|])
    let (reduceRight'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1285 : 'T t) ->
        fun
          ~callbackfn:(x1278 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1284 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1285) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1279 : Ojs.t) ->
                         fun (x1280 : Ojs.t) ->
                           fun (x1281 : Ojs.t) ->
                             fun (x1282 : Ojs.t) ->
                               Obj.magic
                                 (x1278 ~previousValue:(Obj.magic x1279)
                                    ~currentValue:(Obj.magic x1280)
                                    ~currentIndex:(Ojs.int_of_js x1281)
                                    ~array:(Ojs.list_of_js Obj.magic x1282))));(
                   Obj.magic x1284)|])
    let (get : 'T t -> int -> 'T) =
      fun (x1287 : 'T t) ->
        fun (x1289 : int) ->
          Obj.magic (Ojs.array_get (t_to_js Obj.magic x1287) x1289)
    let (set : 'T t -> int -> 'T -> unit) =
      fun (x1290 : 'T t) ->
        fun (x1292 : int) ->
          fun (x1293 : 'T) ->
            Ojs.array_set (t_to_js Obj.magic x1290) x1292 (Obj.magic x1293)
    let (to_ml : 'T t -> 'T list) =
      fun (x1294 : 'T t) ->
        Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1294)
    let (of_ml : 'T list -> 'T t) =
      fun (x1297 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1297)
    let (create : ?arrayLength:int -> unit -> any list) =
      fun ?arrayLength:(x1300 : int option) ->
        fun () ->
          Ojs.list_of_js any_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Array")
               (let x1301 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1300 with
                 | Some x1302 ->
                     ignore (Ojs.call x1301 "push" [|(Ojs.int_to_js x1302)|])
                 | None -> ());
                x1301))
    let (create' : arrayLength:int -> 'T list) =
      fun ~arrayLength:(x1304 : int) ->
        Ojs.list_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
             [|(Ojs.int_to_js x1304)|])
    let (create'' : 'T list -> 'T list) =
      fun (x1306 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Array")
             (let x1307 =
                Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
              List.iter
                (fun (x1308 : 'T) ->
                   ignore (Ojs.call x1307 "push" [|(Obj.magic x1308)|]))
                x1306;
              x1307))
    let (isArray : any -> bool) =
      fun (x1310 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "isArray"
             [|(any_to_js x1310)|])
  end
module ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1312 : Ojs.t) -> x1312
    and t_to_js : t -> Ojs.t = fun (x1311 : Ojs.t) -> x1311
    let (create : t -> ?arrayLength:int -> unit -> any list) =
      fun (x1316 : t) ->
        fun ?arrayLength:(x1313 : int option) ->
          fun () ->
            Ojs.list_of_js any_of_js
              (Ojs.new_obj_arr (t_to_js x1316)
                 (let x1314 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1313 with
                   | Some x1315 ->
                       ignore
                         (Ojs.call x1314 "push" [|(Ojs.int_to_js x1315)|])
                   | None -> ());
                  x1314))
    let (create' : t -> arrayLength:int -> 'T list) =
      fun (x1319 : t) ->
        fun ~arrayLength:(x1318 : int) ->
          Ojs.list_of_js Obj.magic
            (Ojs.new_obj (t_to_js x1319) [|(Ojs.int_to_js x1318)|])
    let (create'' : t -> 'T list -> 'T list) =
      fun (x1324 : t) ->
        fun (x1321 : 'T list) ->
          Ojs.list_of_js Obj.magic
            (Ojs.new_obj_arr (t_to_js x1324)
               (let x1322 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x1323 : 'T) ->
                     ignore (Ojs.call x1322 "push" [|(Obj.magic x1323)|]))
                  x1321;
                x1322))
    let (apply : t -> ?arrayLength:int -> unit -> any list) =
      fun (x1329 : t) ->
        fun ?arrayLength:(x1326 : int option) ->
          fun () ->
            Ojs.list_of_js any_of_js
              (Ojs.call (t_to_js x1329) "apply"
                 [|Ojs.null;((let x1327 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1326 with
                               | Some x1328 ->
                                   ignore
                                     (Ojs.call x1327 "push"
                                        [|(Ojs.int_to_js x1328)|])
                               | None -> ());
                              x1327))|])
    let (apply' : t -> arrayLength:int -> 'T list) =
      fun (x1332 : t) ->
        fun ~arrayLength:(x1331 : int) ->
          Ojs.list_of_js Obj.magic
            (Ojs.apply (t_to_js x1332) [|(Ojs.int_to_js x1331)|])
    let (apply'' : t -> 'T list -> 'T list) =
      fun (x1337 : t) ->
        fun (x1334 : 'T list) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x1337) "apply"
               [|Ojs.null;((let x1335 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x1336 : 'T) ->
                                 ignore
                                   (Ojs.call x1335 "push"
                                      [|(Obj.magic x1336)|])) x1334;
                            x1335))|])
    let (isArray : t -> any -> bool) =
      fun (x1340 : t) ->
        fun (x1339 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x1340) "isArray" [|(any_to_js x1339)|])
    let (get_prototype : t -> any list) =
      fun (x1341 : t) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (t_to_js x1341) "prototype")
  end
let (array : ArrayConstructor.t) =
  ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Array")
module RegExpMatchArray =
  struct
    include struct include Array end
    type t = string Array.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1345 : Ojs.t) -> Array.t_of_js Ojs.string_of_js x1345
    and t_to_js : t -> Ojs.t =
      fun (x1343 : string Array.t) -> Array.t_to_js Ojs.string_to_js x1343
    let (get_index : t -> int) =
      fun (x1347 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1347) "index")
    let (set_index : t -> int -> unit) =
      fun (x1348 : t) ->
        fun (x1349 : int) ->
          Ojs.set_prop_ascii (t_to_js x1348) "index" (Ojs.int_to_js x1349)
    let (get_input : t -> string) =
      fun (x1350 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1350) "input")
    let (set_input : t -> string -> unit) =
      fun (x1351 : t) ->
        fun (x1352 : string) ->
          Ojs.set_prop_ascii (t_to_js x1351) "input" (Ojs.string_to_js x1352)
  end
module RegExpExecArray =
  struct
    include struct include Array end
    type t = string Array.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1355 : Ojs.t) -> Array.t_of_js Ojs.string_of_js x1355
    and t_to_js : t -> Ojs.t =
      fun (x1353 : string Array.t) -> Array.t_to_js Ojs.string_to_js x1353
    let (get_index : t -> int) =
      fun (x1357 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1357) "index")
    let (set_index : t -> int -> unit) =
      fun (x1358 : t) ->
        fun (x1359 : int) ->
          Ojs.set_prop_ascii (t_to_js x1358) "index" (Ojs.int_to_js x1359)
    let (get_input : t -> string) =
      fun (x1360 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1360) "input")
    let (set_input : t -> string -> unit) =
      fun (x1361 : t) ->
        fun (x1362 : string) ->
          Ojs.set_prop_ascii (t_to_js x1361) "input" (Ojs.string_to_js x1362)
  end
module RegExp =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1364 : Ojs.t) -> x1364
    and t_to_js : t -> Ojs.t = fun (x1363 : Ojs.t) -> x1363
    let (exec : t -> string:string -> RegExpExecArray.t or_null) =
      fun (x1366 : t) ->
        fun ~string:(x1365 : string) ->
          or_null_of_js RegExpExecArray.t_of_js
            (Ojs.call (t_to_js x1366) "exec" [|(Ojs.string_to_js x1365)|])
    let (test : t -> string:string -> bool) =
      fun (x1369 : t) ->
        fun ~string:(x1368 : string) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x1369) "test" [|(Ojs.string_to_js x1368)|])
    let (get_source : t -> string) =
      fun (x1370 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1370) "source")
    let (get_global : t -> bool) =
      fun (x1371 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1371) "global")
    let (get_ignoreCase : t -> bool) =
      fun (x1372 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1372) "ignoreCase")
    let (get_multiline : t -> bool) =
      fun (x1373 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1373) "multiline")
    let (get_lastIndex : t -> int) =
      fun (x1374 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1374) "lastIndex")
    let (set_lastIndex : t -> int -> unit) =
      fun (x1375 : t) ->
        fun (x1376 : int) ->
          Ojs.set_prop_ascii (t_to_js x1375) "lastIndex"
            (Ojs.int_to_js x1376)
    let (compile : t -> t) =
      fun (x1377 : t) -> t_of_js (Ojs.call (t_to_js x1377) "compile" [||])
    let (create : pattern:t or_string -> t) =
      fun ~pattern:(x1378 : t or_string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RegExp")
             [|(or_string_to_js t_to_js x1378)|])
    let (create' : pattern:string -> ?flags:string -> unit -> t) =
      fun ~pattern:(x1380 : string) ->
        fun ?flags:(x1381 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RegExp")
                 (let x1382 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x1382 "push" [|(Ojs.string_to_js x1380)|]);
                  (match x1381 with
                   | Some x1383 ->
                       ignore
                         (Ojs.call x1382 "push" [|(Ojs.string_to_js x1383)|])
                   | None -> ());
                  x1382))
    let (get__1 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$1" [||])
    let (set__1 : string -> unit) =
      fun (x1384 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$1"
             [|(Ojs.string_to_js x1384)|])
    let (get__2 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$2" [||])
    let (set__2 : string -> unit) =
      fun (x1385 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$2"
             [|(Ojs.string_to_js x1385)|])
    let (get__3 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$3" [||])
    let (set__3 : string -> unit) =
      fun (x1386 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$3"
             [|(Ojs.string_to_js x1386)|])
    let (get__4 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$4" [||])
    let (set__4 : string -> unit) =
      fun (x1387 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$4"
             [|(Ojs.string_to_js x1387)|])
    let (get__5 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$5" [||])
    let (set__5 : string -> unit) =
      fun (x1388 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$5"
             [|(Ojs.string_to_js x1388)|])
    let (get__6 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$6" [||])
    let (set__6 : string -> unit) =
      fun (x1389 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$6"
             [|(Ojs.string_to_js x1389)|])
    let (get__7 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$7" [||])
    let (set__7 : string -> unit) =
      fun (x1390 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$7"
             [|(Ojs.string_to_js x1390)|])
    let (get__8 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$8" [||])
    let (set__8 : string -> unit) =
      fun (x1391 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$8"
             [|(Ojs.string_to_js x1391)|])
    let (get__9 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$9" [||])
    let (set__9 : string -> unit) =
      fun (x1392 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$9"
             [|(Ojs.string_to_js x1392)|])
    let (get_lastMatch : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "lastMatch" [||])
    let (set_lastMatch : string -> unit) =
      fun (x1393 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "lastMatch"
             [|(Ojs.string_to_js x1393)|])
  end
module RegExpConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1395 : Ojs.t) -> x1395
    and t_to_js : t -> Ojs.t = fun (x1394 : Ojs.t) -> x1394
    let (create : t -> pattern:RegExp.t or_string -> RegExp.t) =
      fun (x1398 : t) ->
        fun ~pattern:(x1396 : RegExp.t or_string) ->
          RegExp.t_of_js
            (Ojs.new_obj (t_to_js x1398)
               [|(or_string_to_js RegExp.t_to_js x1396)|])
    let (create' : t -> pattern:string -> ?flags:string -> unit -> RegExp.t)
      =
      fun (x1403 : t) ->
        fun ~pattern:(x1399 : string) ->
          fun ?flags:(x1400 : string option) ->
            fun () ->
              RegExp.t_of_js
                (Ojs.new_obj_arr (t_to_js x1403)
                   (let x1401 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x1401 "push" [|(Ojs.string_to_js x1399)|]);
                    (match x1400 with
                     | Some x1402 ->
                         ignore
                           (Ojs.call x1401 "push"
                              [|(Ojs.string_to_js x1402)|])
                     | None -> ());
                    x1401))
    let (apply : t -> pattern:RegExp.t or_string -> RegExp.t) =
      fun (x1406 : t) ->
        fun ~pattern:(x1404 : RegExp.t or_string) ->
          RegExp.t_of_js
            (Ojs.apply (t_to_js x1406)
               [|(or_string_to_js RegExp.t_to_js x1404)|])
    let (apply' : t -> pattern:string -> ?flags:string -> unit -> RegExp.t) =
      fun (x1411 : t) ->
        fun ~pattern:(x1407 : string) ->
          fun ?flags:(x1408 : string option) ->
            fun () ->
              RegExp.t_of_js
                (Ojs.call (t_to_js x1411) "apply"
                   [|Ojs.null;((let x1409 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x1409 "push"
                                     [|(Ojs.string_to_js x1407)|]);
                                (match x1408 with
                                 | Some x1410 ->
                                     ignore
                                       (Ojs.call x1409 "push"
                                          [|(Ojs.string_to_js x1410)|])
                                 | None -> ());
                                x1409))|])
    let (get_prototype : t -> RegExp.t) =
      fun (x1412 : t) ->
        RegExp.t_of_js (Ojs.get_prop_ascii (t_to_js x1412) "prototype")
    let (get__1 : t -> string) =
      fun (x1413 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1413) "$1")
    let (set__1 : t -> string -> unit) =
      fun (x1414 : t) ->
        fun (x1415 : string) ->
          Ojs.set_prop_ascii (t_to_js x1414) "$1" (Ojs.string_to_js x1415)
    let (get__2 : t -> string) =
      fun (x1416 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1416) "$2")
    let (set__2 : t -> string -> unit) =
      fun (x1417 : t) ->
        fun (x1418 : string) ->
          Ojs.set_prop_ascii (t_to_js x1417) "$2" (Ojs.string_to_js x1418)
    let (get__3 : t -> string) =
      fun (x1419 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1419) "$3")
    let (set__3 : t -> string -> unit) =
      fun (x1420 : t) ->
        fun (x1421 : string) ->
          Ojs.set_prop_ascii (t_to_js x1420) "$3" (Ojs.string_to_js x1421)
    let (get__4 : t -> string) =
      fun (x1422 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1422) "$4")
    let (set__4 : t -> string -> unit) =
      fun (x1423 : t) ->
        fun (x1424 : string) ->
          Ojs.set_prop_ascii (t_to_js x1423) "$4" (Ojs.string_to_js x1424)
    let (get__5 : t -> string) =
      fun (x1425 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1425) "$5")
    let (set__5 : t -> string -> unit) =
      fun (x1426 : t) ->
        fun (x1427 : string) ->
          Ojs.set_prop_ascii (t_to_js x1426) "$5" (Ojs.string_to_js x1427)
    let (get__6 : t -> string) =
      fun (x1428 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1428) "$6")
    let (set__6 : t -> string -> unit) =
      fun (x1429 : t) ->
        fun (x1430 : string) ->
          Ojs.set_prop_ascii (t_to_js x1429) "$6" (Ojs.string_to_js x1430)
    let (get__7 : t -> string) =
      fun (x1431 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1431) "$7")
    let (set__7 : t -> string -> unit) =
      fun (x1432 : t) ->
        fun (x1433 : string) ->
          Ojs.set_prop_ascii (t_to_js x1432) "$7" (Ojs.string_to_js x1433)
    let (get__8 : t -> string) =
      fun (x1434 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1434) "$8")
    let (set__8 : t -> string -> unit) =
      fun (x1435 : t) ->
        fun (x1436 : string) ->
          Ojs.set_prop_ascii (t_to_js x1435) "$8" (Ojs.string_to_js x1436)
    let (get__9 : t -> string) =
      fun (x1437 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1437) "$9")
    let (set__9 : t -> string -> unit) =
      fun (x1438 : t) ->
        fun (x1439 : string) ->
          Ojs.set_prop_ascii (t_to_js x1438) "$9" (Ojs.string_to_js x1439)
    let (get_lastMatch : t -> string) =
      fun (x1440 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1440) "lastMatch")
    let (set_lastMatch : t -> string -> unit) =
      fun (x1441 : t) ->
        fun (x1442 : string) ->
          Ojs.set_prop_ascii (t_to_js x1441) "lastMatch"
            (Ojs.string_to_js x1442)
  end
let (regExp : RegExpConstructor.t) =
  RegExpConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "RegExp")
module String =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1444 : Ojs.t) -> x1444
    and t_to_js : t -> Ojs.t = fun (x1443 : Ojs.t) -> x1443
    let (localeCompare :
      t ->
        that:string ->
          ?locales:string list or_string ->
            ?options:Intl.CollatorOptions.t -> unit -> int)
      =
      fun (x1453 : t) ->
        fun ~that:(x1445 : string) ->
          fun ?locales:(x1446 : string list or_string option) ->
            fun ?options:(x1447 : Intl.CollatorOptions.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1454 = t_to_js x1453 in
                   Ojs.call (Ojs.get_prop_ascii x1454 "localeCompare")
                     "apply"
                     [|x1454;((let x1448 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1448 "push"
                                    [|(Ojs.string_to_js x1445)|]);
                               (match x1446 with
                                | Some x1450 ->
                                    ignore
                                      (Ojs.call x1448 "push"
                                         [|(or_string_to_js
                                              (fun (x1451 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x1451)
                                              x1450)|])
                                | None -> ());
                               (match x1447 with
                                | Some x1449 ->
                                    ignore
                                      (Ojs.call x1448 "push"
                                         [|(Intl.CollatorOptions.t_to_js
                                              x1449)|])
                                | None -> ());
                               x1448))|])
    let (toString : t -> string) =
      fun (x1455 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1455) "toString" [||])
    let (charAt : t -> pos:int -> string) =
      fun (x1457 : t) ->
        fun ~pos:(x1456 : int) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x1457) "charAt" [|(Ojs.int_to_js x1456)|])
    let (charCodeAt : t -> index:int -> int) =
      fun (x1459 : t) ->
        fun ~index:(x1458 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1459) "charCodeAt" [|(Ojs.int_to_js x1458)|])
    let (concat : t -> strings:string list -> string) =
      fun (x1463 : t) ->
        fun ~strings:(x1460 : string list) ->
          Ojs.string_of_js
            (let x1464 = t_to_js x1463 in
             Ojs.call (Ojs.get_prop_ascii x1464 "concat") "apply"
               [|x1464;((let x1461 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1462 : string) ->
                              ignore
                                (Ojs.call x1461 "push"
                                   [|(Ojs.string_to_js x1462)|])) x1460;
                         x1461))|])
    let (indexOf : t -> searchString:string -> ?position:int -> unit -> int)
      =
      fun (x1469 : t) ->
        fun ~searchString:(x1465 : string) ->
          fun ?position:(x1466 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1470 = t_to_js x1469 in
                 Ojs.call (Ojs.get_prop_ascii x1470 "indexOf") "apply"
                   [|x1470;((let x1467 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1467 "push"
                                  [|(Ojs.string_to_js x1465)|]);
                             (match x1466 with
                              | Some x1468 ->
                                  ignore
                                    (Ojs.call x1467 "push"
                                       [|(Ojs.int_to_js x1468)|])
                              | None -> ());
                             x1467))|])
    let (lastIndexOf :
      t -> searchString:string -> ?position:int -> unit -> int) =
      fun (x1475 : t) ->
        fun ~searchString:(x1471 : string) ->
          fun ?position:(x1472 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1476 = t_to_js x1475 in
                 Ojs.call (Ojs.get_prop_ascii x1476 "lastIndexOf") "apply"
                   [|x1476;((let x1473 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1473 "push"
                                  [|(Ojs.string_to_js x1471)|]);
                             (match x1472 with
                              | Some x1474 ->
                                  ignore
                                    (Ojs.call x1473 "push"
                                       [|(Ojs.int_to_js x1474)|])
                              | None -> ());
                             x1473))|])
    let (localeCompare' : t -> that:string -> int) =
      fun (x1478 : t) ->
        fun ~that:(x1477 : string) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1478) "localeCompare"
               [|(Ojs.string_to_js x1477)|])
    let (match_ :
      t -> regexp:RegExp.t or_string -> RegExpMatchArray.t or_null) =
      fun (x1481 : t) ->
        fun ~regexp:(x1479 : RegExp.t or_string) ->
          or_null_of_js RegExpMatchArray.t_of_js
            (Ojs.call (t_to_js x1481) "match"
               [|(or_string_to_js RegExp.t_to_js x1479)|])
    let (replace :
      t -> searchValue:RegExp.t or_string -> replaceValue:string -> string) =
      fun (x1486 : t) ->
        fun ~searchValue:(x1483 : RegExp.t or_string) ->
          fun ~replaceValue:(x1485 : string) ->
            Ojs.string_of_js
              (Ojs.call (t_to_js x1486) "replace"
                 [|(or_string_to_js RegExp.t_to_js x1483);(Ojs.string_to_js
                                                             x1485)|])
    let (replace' :
      t ->
        searchValue:RegExp.t or_string ->
          replacer:(substring:string -> args:any list -> string) -> string)
      =
      fun (x1492 : t) ->
        fun ~searchValue:(x1487 : RegExp.t or_string) ->
          fun ~replacer:(x1489 : substring:string -> args:any list -> string)
            ->
            Ojs.string_of_js
              (Ojs.call (t_to_js x1492) "replace"
                 [|(or_string_to_js RegExp.t_to_js x1487);(Ojs.fun_to_js_args
                                                             (fun (x1490 : _)
                                                                ->
                                                                Ojs.string_to_js
                                                                  (x1489
                                                                    ~substring:(
                                                                    Ojs.string_of_js
                                                                    (Ojs.array_get
                                                                    x1490 0))
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1490 1))))|])
    let (search : t -> regexp:RegExp.t or_string -> int) =
      fun (x1495 : t) ->
        fun ~regexp:(x1493 : RegExp.t or_string) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1495) "search"
               [|(or_string_to_js RegExp.t_to_js x1493)|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> string) =
      fun (x1501 : t) ->
        fun ?start:(x1496 : int option) ->
          fun ?end_:(x1497 : int option) ->
            fun () ->
              Ojs.string_of_js
                (let x1502 = t_to_js x1501 in
                 Ojs.call (Ojs.get_prop_ascii x1502 "slice") "apply"
                   [|x1502;((let x1498 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1496 with
                              | Some x1500 ->
                                  ignore
                                    (Ojs.call x1498 "push"
                                       [|(Ojs.int_to_js x1500)|])
                              | None -> ());
                             (match x1497 with
                              | Some x1499 ->
                                  ignore
                                    (Ojs.call x1498 "push"
                                       [|(Ojs.int_to_js x1499)|])
                              | None -> ());
                             x1498))|])
    let (split :
      t -> separator:RegExp.t or_string -> ?limit:int -> unit -> string list)
      =
      fun (x1508 : t) ->
        fun ~separator:(x1503 : RegExp.t or_string) ->
          fun ?limit:(x1504 : int option) ->
            fun () ->
              Ojs.list_of_js Ojs.string_of_js
                (let x1509 = t_to_js x1508 in
                 Ojs.call (Ojs.get_prop_ascii x1509 "split") "apply"
                   [|x1509;((let x1505 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1505 "push"
                                  [|(or_string_to_js RegExp.t_to_js x1503)|]);
                             (match x1504 with
                              | Some x1506 ->
                                  ignore
                                    (Ojs.call x1505 "push"
                                       [|(Ojs.int_to_js x1506)|])
                              | None -> ());
                             x1505))|])
    let (substring : t -> start:int -> ?end_:int -> unit -> string) =
      fun (x1515 : t) ->
        fun ~start:(x1511 : int) ->
          fun ?end_:(x1512 : int option) ->
            fun () ->
              Ojs.string_of_js
                (let x1516 = t_to_js x1515 in
                 Ojs.call (Ojs.get_prop_ascii x1516 "substring") "apply"
                   [|x1516;((let x1513 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1513 "push"
                                  [|(Ojs.int_to_js x1511)|]);
                             (match x1512 with
                              | Some x1514 ->
                                  ignore
                                    (Ojs.call x1513 "push"
                                       [|(Ojs.int_to_js x1514)|])
                              | None -> ());
                             x1513))|])
    let (toLowerCase : t -> string) =
      fun (x1517 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1517) "toLowerCase" [||])
    let (toLocaleLowerCase :
      t -> ?locales:string list or_string -> unit -> string) =
      fun (x1523 : t) ->
        fun ?locales:(x1518 : string list or_string option) ->
          fun () ->
            Ojs.string_of_js
              (let x1524 = t_to_js x1523 in
               Ojs.call (Ojs.get_prop_ascii x1524 "toLocaleLowerCase")
                 "apply"
                 [|x1524;((let x1519 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1518 with
                            | Some x1520 ->
                                ignore
                                  (Ojs.call x1519 "push"
                                     [|(or_string_to_js
                                          (fun (x1521 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x1521) x1520)|])
                            | None -> ());
                           x1519))|])
    let (toUpperCase : t -> string) =
      fun (x1525 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1525) "toUpperCase" [||])
    let (toLocaleUpperCase :
      t -> ?locales:string list or_string -> unit -> string) =
      fun (x1531 : t) ->
        fun ?locales:(x1526 : string list or_string option) ->
          fun () ->
            Ojs.string_of_js
              (let x1532 = t_to_js x1531 in
               Ojs.call (Ojs.get_prop_ascii x1532 "toLocaleUpperCase")
                 "apply"
                 [|x1532;((let x1527 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1526 with
                            | Some x1528 ->
                                ignore
                                  (Ojs.call x1527 "push"
                                     [|(or_string_to_js
                                          (fun (x1529 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x1529) x1528)|])
                            | None -> ());
                           x1527))|])
    let (trim : t -> string) =
      fun (x1533 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1533) "trim" [||])
    let (get_length : t -> int) =
      fun (x1534 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1534) "length")
    let (substr : t -> from:int -> ?length:int -> unit -> string) =
      fun (x1539 : t) ->
        fun ~from:(x1535 : int) ->
          fun ?length:(x1536 : int option) ->
            fun () ->
              Ojs.string_of_js
                (let x1540 = t_to_js x1539 in
                 Ojs.call (Ojs.get_prop_ascii x1540 "substr") "apply"
                   [|x1540;((let x1537 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1537 "push"
                                  [|(Ojs.int_to_js x1535)|]);
                             (match x1536 with
                              | Some x1538 ->
                                  ignore
                                    (Ojs.call x1537 "push"
                                       [|(Ojs.int_to_js x1538)|])
                              | None -> ());
                             x1537))|])
    let (valueOf : t -> string) =
      fun (x1541 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1541) "valueOf" [||])
    let (get : t -> int -> string) =
      fun (x1542 : t) ->
        fun (x1543 : int) ->
          Ojs.string_of_js (Ojs.array_get (t_to_js x1542) x1543)
    let (to_ml : t -> string) =
      fun (x1544 : t) -> Ojs.string_of_js (t_to_js x1544)
    let (of_ml : string -> t) =
      fun (x1545 : string) -> t_of_js (Ojs.string_to_js x1545)
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x1546 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "String")
               (let x1547 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1546 with
                 | Some x1548 ->
                     ignore (Ojs.call x1547 "push" [|(any_to_js x1548)|])
                 | None -> ());
                x1547))
    let (fromCharCode : codes:int list -> string) =
      fun ~codes:(x1549 : int list) ->
        Ojs.string_of_js
          (let x1552 = Ojs.get_prop_ascii Ojs.global "String" in
           Ojs.call (Ojs.get_prop_ascii x1552 "fromCharCode") "apply"
             [|x1552;((let x1550 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x1551 : int) ->
                            ignore
                              (Ojs.call x1550 "push"
                                 [|(Ojs.int_to_js x1551)|])) x1549;
                       x1550))|])
  end
module StringConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1554 : Ojs.t) -> x1554
    and t_to_js : t -> Ojs.t = fun (x1553 : Ojs.t) -> x1553
    let (create : t -> ?value:any -> unit -> String.t) =
      fun (x1558 : t) ->
        fun ?value:(x1555 : any option) ->
          fun () ->
            String.t_of_js
              (Ojs.new_obj_arr (t_to_js x1558)
                 (let x1556 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1555 with
                   | Some x1557 ->
                       ignore (Ojs.call x1556 "push" [|(any_to_js x1557)|])
                   | None -> ());
                  x1556))
    let (apply : t -> ?value:any -> unit -> string) =
      fun (x1562 : t) ->
        fun ?value:(x1559 : any option) ->
          fun () ->
            Ojs.string_of_js
              (Ojs.call (t_to_js x1562) "apply"
                 [|Ojs.null;((let x1560 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1559 with
                               | Some x1561 ->
                                   ignore
                                     (Ojs.call x1560 "push"
                                        [|(any_to_js x1561)|])
                               | None -> ());
                              x1560))|])
    let (get_prototype : t -> String.t) =
      fun (x1563 : t) ->
        String.t_of_js (Ojs.get_prop_ascii (t_to_js x1563) "prototype")
    let (fromCharCode : t -> codes:int list -> string) =
      fun (x1567 : t) ->
        fun ~codes:(x1564 : int list) ->
          Ojs.string_of_js
            (let x1568 = t_to_js x1567 in
             Ojs.call (Ojs.get_prop_ascii x1568 "fromCharCode") "apply"
               [|x1568;((let x1565 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1566 : int) ->
                              ignore
                                (Ojs.call x1565 "push"
                                   [|(Ojs.int_to_js x1566)|])) x1564;
                         x1565))|])
  end
let (string : StringConstructor.t) =
  StringConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "String")
module Boolean =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1570 : Ojs.t) -> x1570
    and t_to_js : t -> Ojs.t = fun (x1569 : Ojs.t) -> x1569
    let (valueOf : t -> bool) =
      fun (x1571 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x1571) "valueOf" [||])
    let (to_ml : t -> bool) =
      fun (x1572 : t) -> Ojs.bool_of_js (t_to_js x1572)
    let (of_ml : bool -> t) =
      fun (x1573 : bool) -> t_of_js (Ojs.bool_to_js x1573)
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x1574 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Boolean")
               (let x1575 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1574 with
                 | Some x1576 ->
                     ignore (Ojs.call x1575 "push" [|(any_to_js x1576)|])
                 | None -> ());
                x1575))
  end
module BooleanConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1578 : Ojs.t) -> x1578
    and t_to_js : t -> Ojs.t = fun (x1577 : Ojs.t) -> x1577
    let (create : t -> ?value:any -> unit -> Boolean.t) =
      fun (x1582 : t) ->
        fun ?value:(x1579 : any option) ->
          fun () ->
            Boolean.t_of_js
              (Ojs.new_obj_arr (t_to_js x1582)
                 (let x1580 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1579 with
                   | Some x1581 ->
                       ignore (Ojs.call x1580 "push" [|(any_to_js x1581)|])
                   | None -> ());
                  x1580))
    let (apply : t -> ?value:'T -> unit -> bool) =
      fun (x1586 : t) ->
        fun ?value:(x1583 : 'T option) ->
          fun () ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js x1586) "apply"
                 [|Ojs.null;((let x1584 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1583 with
                               | Some x1585 ->
                                   ignore
                                     (Ojs.call x1584 "push"
                                        [|(Obj.magic x1585)|])
                               | None -> ());
                              x1584))|])
    let (get_prototype : t -> Boolean.t) =
      fun (x1587 : t) ->
        Boolean.t_of_js (Ojs.get_prop_ascii (t_to_js x1587) "prototype")
  end
let (boolean : BooleanConstructor.t) =
  BooleanConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Boolean")
module Number =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1589 : Ojs.t) -> x1589
    and t_to_js : t -> Ojs.t = fun (x1588 : Ojs.t) -> x1588
    let (toLocaleString :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.NumberFormatOptions.t -> unit -> string)
      =
      fun (x1597 : t) ->
        fun ?locales:(x1590 : string list or_string option) ->
          fun ?options:(x1591 : Intl.NumberFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1598 = t_to_js x1597 in
                 Ojs.call (Ojs.get_prop_ascii x1598 "toLocaleString") "apply"
                   [|x1598;((let x1592 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1590 with
                              | Some x1594 ->
                                  ignore
                                    (Ojs.call x1592 "push"
                                       [|(or_string_to_js
                                            (fun (x1595 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1595)
                                            x1594)|])
                              | None -> ());
                             (match x1591 with
                              | Some x1593 ->
                                  ignore
                                    (Ojs.call x1592 "push"
                                       [|(Intl.NumberFormatOptions.t_to_js
                                            x1593)|])
                              | None -> ());
                             x1592))|])
    let (toString : t -> ?radix:int -> unit -> string) =
      fun (x1602 : t) ->
        fun ?radix:(x1599 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1603 = t_to_js x1602 in
               Ojs.call (Ojs.get_prop_ascii x1603 "toString") "apply"
                 [|x1603;((let x1600 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1599 with
                            | Some x1601 ->
                                ignore
                                  (Ojs.call x1600 "push"
                                     [|(Ojs.int_to_js x1601)|])
                            | None -> ());
                           x1600))|])
    let (toFixed : t -> ?fractionDigits:int -> unit -> string) =
      fun (x1607 : t) ->
        fun ?fractionDigits:(x1604 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1608 = t_to_js x1607 in
               Ojs.call (Ojs.get_prop_ascii x1608 "toFixed") "apply"
                 [|x1608;((let x1605 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1604 with
                            | Some x1606 ->
                                ignore
                                  (Ojs.call x1605 "push"
                                     [|(Ojs.int_to_js x1606)|])
                            | None -> ());
                           x1605))|])
    let (toExponential : t -> ?fractionDigits:int -> unit -> string) =
      fun (x1612 : t) ->
        fun ?fractionDigits:(x1609 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1613 = t_to_js x1612 in
               Ojs.call (Ojs.get_prop_ascii x1613 "toExponential") "apply"
                 [|x1613;((let x1610 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1609 with
                            | Some x1611 ->
                                ignore
                                  (Ojs.call x1610 "push"
                                     [|(Ojs.int_to_js x1611)|])
                            | None -> ());
                           x1610))|])
    let (toPrecision : t -> ?precision:int -> unit -> string) =
      fun (x1617 : t) ->
        fun ?precision:(x1614 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1618 = t_to_js x1617 in
               Ojs.call (Ojs.get_prop_ascii x1618 "toPrecision") "apply"
                 [|x1618;((let x1615 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1614 with
                            | Some x1616 ->
                                ignore
                                  (Ojs.call x1615 "push"
                                     [|(Ojs.int_to_js x1616)|])
                            | None -> ());
                           x1615))|])
    let (valueOf : t -> int) =
      fun (x1619 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1619) "valueOf" [||])
    let (to_ml : t -> int) = fun (x1620 : t) -> Ojs.int_of_js (t_to_js x1620)
    let (of_ml : int -> t) =
      fun (x1621 : int) -> t_of_js (Ojs.int_to_js x1621)
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x1622 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Number")
               (let x1623 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1622 with
                 | Some x1624 ->
                     ignore (Ojs.call x1623 "push" [|(any_to_js x1624)|])
                 | None -> ());
                x1623))
    let (get_MAX_VALUE : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "MAX_VALUE")
    let (get_MIN_VALUE : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "MIN_VALUE")
    let (get_NaN : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number") "NaN")
    let (get_NEGATIVE_INFINITY : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "NEGATIVE_INFINITY")
    let (get_POSITIVE_INFINITY : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "POSITIVE_INFINITY")
  end
module NumberConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1626 : Ojs.t) -> x1626
    and t_to_js : t -> Ojs.t = fun (x1625 : Ojs.t) -> x1625
    let (create : t -> ?value:any -> unit -> Number.t) =
      fun (x1630 : t) ->
        fun ?value:(x1627 : any option) ->
          fun () ->
            Number.t_of_js
              (Ojs.new_obj_arr (t_to_js x1630)
                 (let x1628 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1627 with
                   | Some x1629 ->
                       ignore (Ojs.call x1628 "push" [|(any_to_js x1629)|])
                   | None -> ());
                  x1628))
    let (apply : t -> ?value:any -> unit -> int) =
      fun (x1634 : t) ->
        fun ?value:(x1631 : any option) ->
          fun () ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x1634) "apply"
                 [|Ojs.null;((let x1632 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1631 with
                               | Some x1633 ->
                                   ignore
                                     (Ojs.call x1632 "push"
                                        [|(any_to_js x1633)|])
                               | None -> ());
                              x1632))|])
    let (get_prototype : t -> Number.t) =
      fun (x1635 : t) ->
        Number.t_of_js (Ojs.get_prop_ascii (t_to_js x1635) "prototype")
    let (get_MAX_VALUE : t -> int) =
      fun (x1636 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1636) "MAX_VALUE")
    let (get_MIN_VALUE : t -> int) =
      fun (x1637 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1637) "MIN_VALUE")
    let (get_NaN : t -> int) =
      fun (x1638 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1638) "NaN")
    let (get_NEGATIVE_INFINITY : t -> int) =
      fun (x1639 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x1639) "NEGATIVE_INFINITY")
    let (get_POSITIVE_INFINITY : t -> int) =
      fun (x1640 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x1640) "POSITIVE_INFINITY")
  end
let (number : NumberConstructor.t) =
  NumberConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Number")
module ImportMeta =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1642 : Ojs.t) -> x1642
    and t_to_js : t -> Ojs.t = fun (x1641 : Ojs.t) -> x1641
  end
module Math =
  struct
    let (get_E : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "E")
    let (get_LN10 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LN10")
    let (get_LN2 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LN2")
    let (get_LOG2E : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LOG2E")
    let (get_LOG10E : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LOG10E")
    let (get_PI : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "PI")
    let (get_SQRT1_2 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "SQRT1_2")
    let (get_SQRT2 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "SQRT2")
    let (abs : int -> int) =
      fun (x1643 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "abs"
             [|(Ojs.int_to_js x1643)|])
    let (acos : int -> int) =
      fun (x1644 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "acos"
             [|(Ojs.int_to_js x1644)|])
    let (asin : int -> int) =
      fun (x1645 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "asin"
             [|(Ojs.int_to_js x1645)|])
    let (atan : int -> int) =
      fun (x1646 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "atan"
             [|(Ojs.int_to_js x1646)|])
    let (atan2 : y:int -> x:int -> int) =
      fun ~y:(x1647 : int) ->
        fun ~x:(x1648 : int) ->
          Ojs.int_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "atan2"
               [|(Ojs.int_to_js x1647);(Ojs.int_to_js x1648)|])
    let (ceil : int -> int) =
      fun (x1649 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "ceil"
             [|(Ojs.int_to_js x1649)|])
    let (cos : int -> int) =
      fun (x1650 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "cos"
             [|(Ojs.int_to_js x1650)|])
    let (exp : int -> int) =
      fun (x1651 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "exp"
             [|(Ojs.int_to_js x1651)|])
    let (floor : int -> int) =
      fun (x1652 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "floor"
             [|(Ojs.int_to_js x1652)|])
    let (log : int -> int) =
      fun (x1653 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "log"
             [|(Ojs.int_to_js x1653)|])
    let (max : int list -> int) =
      fun (x1654 : int list) ->
        Ojs.int_of_js
          (let x1657 = Ojs.get_prop_ascii Ojs.global "Math" in
           Ojs.call (Ojs.get_prop_ascii x1657 "max") "apply"
             [|x1657;((let x1655 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x1656 : int) ->
                            ignore
                              (Ojs.call x1655 "push"
                                 [|(Ojs.int_to_js x1656)|])) x1654;
                       x1655))|])
    let (min : int list -> int) =
      fun (x1658 : int list) ->
        Ojs.int_of_js
          (let x1661 = Ojs.get_prop_ascii Ojs.global "Math" in
           Ojs.call (Ojs.get_prop_ascii x1661 "min") "apply"
             [|x1661;((let x1659 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x1660 : int) ->
                            ignore
                              (Ojs.call x1659 "push"
                                 [|(Ojs.int_to_js x1660)|])) x1658;
                       x1659))|])
    let (pow : x:int -> y:int -> int) =
      fun ~x:(x1662 : int) ->
        fun ~y:(x1663 : int) ->
          Ojs.int_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "pow"
               [|(Ojs.int_to_js x1662);(Ojs.int_to_js x1663)|])
    let (random : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "random")
    let (round : int -> int) =
      fun (x1664 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "round"
             [|(Ojs.int_to_js x1664)|])
    let (sin : int -> int) =
      fun (x1665 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sin"
             [|(Ojs.int_to_js x1665)|])
    let (sqrt : int -> int) =
      fun (x1666 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sqrt"
             [|(Ojs.int_to_js x1666)|])
    let (tan : int -> int) =
      fun (x1667 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "tan"
             [|(Ojs.int_to_js x1667)|])
  end
module Date =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1669 : Ojs.t) -> x1669
    and t_to_js : t -> Ojs.t = fun (x1668 : Ojs.t) -> x1668
    let (toLocaleString :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.DateTimeFormatOptions.t -> unit -> string)
      =
      fun (x1677 : t) ->
        fun ?locales:(x1670 : string list or_string option) ->
          fun ?options:(x1671 : Intl.DateTimeFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1678 = t_to_js x1677 in
                 Ojs.call (Ojs.get_prop_ascii x1678 "toLocaleString") "apply"
                   [|x1678;((let x1672 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1670 with
                              | Some x1674 ->
                                  ignore
                                    (Ojs.call x1672 "push"
                                       [|(or_string_to_js
                                            (fun (x1675 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1675)
                                            x1674)|])
                              | None -> ());
                             (match x1671 with
                              | Some x1673 ->
                                  ignore
                                    (Ojs.call x1672 "push"
                                       [|(Intl.DateTimeFormatOptions.t_to_js
                                            x1673)|])
                              | None -> ());
                             x1672))|])
    let (toLocaleDateString :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.DateTimeFormatOptions.t -> unit -> string)
      =
      fun (x1686 : t) ->
        fun ?locales:(x1679 : string list or_string option) ->
          fun ?options:(x1680 : Intl.DateTimeFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1687 = t_to_js x1686 in
                 Ojs.call (Ojs.get_prop_ascii x1687 "toLocaleDateString")
                   "apply"
                   [|x1687;((let x1681 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1679 with
                              | Some x1683 ->
                                  ignore
                                    (Ojs.call x1681 "push"
                                       [|(or_string_to_js
                                            (fun (x1684 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1684)
                                            x1683)|])
                              | None -> ());
                             (match x1680 with
                              | Some x1682 ->
                                  ignore
                                    (Ojs.call x1681 "push"
                                       [|(Intl.DateTimeFormatOptions.t_to_js
                                            x1682)|])
                              | None -> ());
                             x1681))|])
    let (toLocaleTimeString :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.DateTimeFormatOptions.t -> unit -> string)
      =
      fun (x1695 : t) ->
        fun ?locales:(x1688 : string list or_string option) ->
          fun ?options:(x1689 : Intl.DateTimeFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1696 = t_to_js x1695 in
                 Ojs.call (Ojs.get_prop_ascii x1696 "toLocaleTimeString")
                   "apply"
                   [|x1696;((let x1690 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1688 with
                              | Some x1692 ->
                                  ignore
                                    (Ojs.call x1690 "push"
                                       [|(or_string_to_js
                                            (fun (x1693 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1693)
                                            x1692)|])
                              | None -> ());
                             (match x1689 with
                              | Some x1691 ->
                                  ignore
                                    (Ojs.call x1690 "push"
                                       [|(Intl.DateTimeFormatOptions.t_to_js
                                            x1691)|])
                              | None -> ());
                             x1690))|])
    let (toString : t -> string) =
      fun (x1697 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1697) "toString" [||])
    let (toDateString : t -> string) =
      fun (x1698 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1698) "toDateString" [||])
    let (toTimeString : t -> string) =
      fun (x1699 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1699) "toTimeString" [||])
    let (toLocaleString' : t -> string) =
      fun (x1700 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1700) "toLocaleString" [||])
    let (toLocaleDateString' : t -> string) =
      fun (x1701 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1701) "toLocaleDateString" [||])
    let (toLocaleTimeString' : t -> string) =
      fun (x1702 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1702) "toLocaleTimeString" [||])
    let (valueOf : t -> int) =
      fun (x1703 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1703) "valueOf" [||])
    let (getTime : t -> int) =
      fun (x1704 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1704) "getTime" [||])
    let (getFullYear : t -> int) =
      fun (x1705 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1705) "getFullYear" [||])
    let (getUTCFullYear : t -> int) =
      fun (x1706 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1706) "getUTCFullYear" [||])
    let (getMonth : t -> int) =
      fun (x1707 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1707) "getMonth" [||])
    let (getUTCMonth : t -> int) =
      fun (x1708 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1708) "getUTCMonth" [||])
    let (getDate : t -> int) =
      fun (x1709 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1709) "getDate" [||])
    let (getUTCDate : t -> int) =
      fun (x1710 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1710) "getUTCDate" [||])
    let (getDay : t -> int) =
      fun (x1711 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1711) "getDay" [||])
    let (getUTCDay : t -> int) =
      fun (x1712 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1712) "getUTCDay" [||])
    let (getHours : t -> int) =
      fun (x1713 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1713) "getHours" [||])
    let (getUTCHours : t -> int) =
      fun (x1714 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1714) "getUTCHours" [||])
    let (getMinutes : t -> int) =
      fun (x1715 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1715) "getMinutes" [||])
    let (getUTCMinutes : t -> int) =
      fun (x1716 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1716) "getUTCMinutes" [||])
    let (getSeconds : t -> int) =
      fun (x1717 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1717) "getSeconds" [||])
    let (getUTCSeconds : t -> int) =
      fun (x1718 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1718) "getUTCSeconds" [||])
    let (getMilliseconds : t -> int) =
      fun (x1719 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1719) "getMilliseconds" [||])
    let (getUTCMilliseconds : t -> int) =
      fun (x1720 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1720) "getUTCMilliseconds" [||])
    let (getTimezoneOffset : t -> int) =
      fun (x1721 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1721) "getTimezoneOffset" [||])
    let (setTime : t -> time:int -> int) =
      fun (x1723 : t) ->
        fun ~time:(x1722 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1723) "setTime" [|(Ojs.int_to_js x1722)|])
    let (setMilliseconds : t -> ms:int -> int) =
      fun (x1725 : t) ->
        fun ~ms:(x1724 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1725) "setMilliseconds"
               [|(Ojs.int_to_js x1724)|])
    let (setUTCMilliseconds : t -> ms:int -> int) =
      fun (x1727 : t) ->
        fun ~ms:(x1726 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1727) "setUTCMilliseconds"
               [|(Ojs.int_to_js x1726)|])
    let (setSeconds : t -> sec:int -> ?ms:int -> unit -> int) =
      fun (x1732 : t) ->
        fun ~sec:(x1728 : int) ->
          fun ?ms:(x1729 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1733 = t_to_js x1732 in
                 Ojs.call (Ojs.get_prop_ascii x1733 "setSeconds") "apply"
                   [|x1733;((let x1730 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1730 "push"
                                  [|(Ojs.int_to_js x1728)|]);
                             (match x1729 with
                              | Some x1731 ->
                                  ignore
                                    (Ojs.call x1730 "push"
                                       [|(Ojs.int_to_js x1731)|])
                              | None -> ());
                             x1730))|])
    let (setUTCSeconds : t -> sec:int -> ?ms:int -> unit -> int) =
      fun (x1738 : t) ->
        fun ~sec:(x1734 : int) ->
          fun ?ms:(x1735 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1739 = t_to_js x1738 in
                 Ojs.call (Ojs.get_prop_ascii x1739 "setUTCSeconds") "apply"
                   [|x1739;((let x1736 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1736 "push"
                                  [|(Ojs.int_to_js x1734)|]);
                             (match x1735 with
                              | Some x1737 ->
                                  ignore
                                    (Ojs.call x1736 "push"
                                       [|(Ojs.int_to_js x1737)|])
                              | None -> ());
                             x1736))|])
    let (setMinutes : t -> min:int -> ?sec:int -> ?ms:int -> unit -> int) =
      fun (x1746 : t) ->
        fun ~min:(x1740 : int) ->
          fun ?sec:(x1741 : int option) ->
            fun ?ms:(x1742 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1747 = t_to_js x1746 in
                   Ojs.call (Ojs.get_prop_ascii x1747 "setMinutes") "apply"
                     [|x1747;((let x1743 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1743 "push"
                                    [|(Ojs.int_to_js x1740)|]);
                               (match x1741 with
                                | Some x1745 ->
                                    ignore
                                      (Ojs.call x1743 "push"
                                         [|(Ojs.int_to_js x1745)|])
                                | None -> ());
                               (match x1742 with
                                | Some x1744 ->
                                    ignore
                                      (Ojs.call x1743 "push"
                                         [|(Ojs.int_to_js x1744)|])
                                | None -> ());
                               x1743))|])
    let (setUTCMinutes : t -> min:int -> ?sec:int -> ?ms:int -> unit -> int)
      =
      fun (x1754 : t) ->
        fun ~min:(x1748 : int) ->
          fun ?sec:(x1749 : int option) ->
            fun ?ms:(x1750 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1755 = t_to_js x1754 in
                   Ojs.call (Ojs.get_prop_ascii x1755 "setUTCMinutes")
                     "apply"
                     [|x1755;((let x1751 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1751 "push"
                                    [|(Ojs.int_to_js x1748)|]);
                               (match x1749 with
                                | Some x1753 ->
                                    ignore
                                      (Ojs.call x1751 "push"
                                         [|(Ojs.int_to_js x1753)|])
                                | None -> ());
                               (match x1750 with
                                | Some x1752 ->
                                    ignore
                                      (Ojs.call x1751 "push"
                                         [|(Ojs.int_to_js x1752)|])
                                | None -> ());
                               x1751))|])
    let (setHours :
      t -> hours:int -> ?min:int -> ?sec:int -> ?ms:int -> unit -> int) =
      fun (x1764 : t) ->
        fun ~hours:(x1756 : int) ->
          fun ?min:(x1757 : int option) ->
            fun ?sec:(x1758 : int option) ->
              fun ?ms:(x1759 : int option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x1765 = t_to_js x1764 in
                     Ojs.call (Ojs.get_prop_ascii x1765 "setHours") "apply"
                       [|x1765;((let x1760 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1760 "push"
                                      [|(Ojs.int_to_js x1756)|]);
                                 (match x1757 with
                                  | Some x1763 ->
                                      ignore
                                        (Ojs.call x1760 "push"
                                           [|(Ojs.int_to_js x1763)|])
                                  | None -> ());
                                 (match x1758 with
                                  | Some x1762 ->
                                      ignore
                                        (Ojs.call x1760 "push"
                                           [|(Ojs.int_to_js x1762)|])
                                  | None -> ());
                                 (match x1759 with
                                  | Some x1761 ->
                                      ignore
                                        (Ojs.call x1760 "push"
                                           [|(Ojs.int_to_js x1761)|])
                                  | None -> ());
                                 x1760))|])
    let (setUTCHours :
      t -> hours:int -> ?min:int -> ?sec:int -> ?ms:int -> unit -> int) =
      fun (x1774 : t) ->
        fun ~hours:(x1766 : int) ->
          fun ?min:(x1767 : int option) ->
            fun ?sec:(x1768 : int option) ->
              fun ?ms:(x1769 : int option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x1775 = t_to_js x1774 in
                     Ojs.call (Ojs.get_prop_ascii x1775 "setUTCHours")
                       "apply"
                       [|x1775;((let x1770 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1770 "push"
                                      [|(Ojs.int_to_js x1766)|]);
                                 (match x1767 with
                                  | Some x1773 ->
                                      ignore
                                        (Ojs.call x1770 "push"
                                           [|(Ojs.int_to_js x1773)|])
                                  | None -> ());
                                 (match x1768 with
                                  | Some x1772 ->
                                      ignore
                                        (Ojs.call x1770 "push"
                                           [|(Ojs.int_to_js x1772)|])
                                  | None -> ());
                                 (match x1769 with
                                  | Some x1771 ->
                                      ignore
                                        (Ojs.call x1770 "push"
                                           [|(Ojs.int_to_js x1771)|])
                                  | None -> ());
                                 x1770))|])
    let (setDate : t -> date:int -> int) =
      fun (x1777 : t) ->
        fun ~date:(x1776 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1777) "setDate" [|(Ojs.int_to_js x1776)|])
    let (setUTCDate : t -> date:int -> int) =
      fun (x1779 : t) ->
        fun ~date:(x1778 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1779) "setUTCDate" [|(Ojs.int_to_js x1778)|])
    let (setMonth : t -> month:int -> ?date:int -> unit -> int) =
      fun (x1784 : t) ->
        fun ~month:(x1780 : int) ->
          fun ?date:(x1781 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1785 = t_to_js x1784 in
                 Ojs.call (Ojs.get_prop_ascii x1785 "setMonth") "apply"
                   [|x1785;((let x1782 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1782 "push"
                                  [|(Ojs.int_to_js x1780)|]);
                             (match x1781 with
                              | Some x1783 ->
                                  ignore
                                    (Ojs.call x1782 "push"
                                       [|(Ojs.int_to_js x1783)|])
                              | None -> ());
                             x1782))|])
    let (setUTCMonth : t -> month:int -> ?date:int -> unit -> int) =
      fun (x1790 : t) ->
        fun ~month:(x1786 : int) ->
          fun ?date:(x1787 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1791 = t_to_js x1790 in
                 Ojs.call (Ojs.get_prop_ascii x1791 "setUTCMonth") "apply"
                   [|x1791;((let x1788 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1788 "push"
                                  [|(Ojs.int_to_js x1786)|]);
                             (match x1787 with
                              | Some x1789 ->
                                  ignore
                                    (Ojs.call x1788 "push"
                                       [|(Ojs.int_to_js x1789)|])
                              | None -> ());
                             x1788))|])
    let (setFullYear :
      t -> year:int -> ?month:int -> ?date:int -> unit -> int) =
      fun (x1798 : t) ->
        fun ~year:(x1792 : int) ->
          fun ?month:(x1793 : int option) ->
            fun ?date:(x1794 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1799 = t_to_js x1798 in
                   Ojs.call (Ojs.get_prop_ascii x1799 "setFullYear") "apply"
                     [|x1799;((let x1795 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1795 "push"
                                    [|(Ojs.int_to_js x1792)|]);
                               (match x1793 with
                                | Some x1797 ->
                                    ignore
                                      (Ojs.call x1795 "push"
                                         [|(Ojs.int_to_js x1797)|])
                                | None -> ());
                               (match x1794 with
                                | Some x1796 ->
                                    ignore
                                      (Ojs.call x1795 "push"
                                         [|(Ojs.int_to_js x1796)|])
                                | None -> ());
                               x1795))|])
    let (setUTCFullYear :
      t -> year:int -> ?month:int -> ?date:int -> unit -> int) =
      fun (x1806 : t) ->
        fun ~year:(x1800 : int) ->
          fun ?month:(x1801 : int option) ->
            fun ?date:(x1802 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1807 = t_to_js x1806 in
                   Ojs.call (Ojs.get_prop_ascii x1807 "setUTCFullYear")
                     "apply"
                     [|x1807;((let x1803 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1803 "push"
                                    [|(Ojs.int_to_js x1800)|]);
                               (match x1801 with
                                | Some x1805 ->
                                    ignore
                                      (Ojs.call x1803 "push"
                                         [|(Ojs.int_to_js x1805)|])
                                | None -> ());
                               (match x1802 with
                                | Some x1804 ->
                                    ignore
                                      (Ojs.call x1803 "push"
                                         [|(Ojs.int_to_js x1804)|])
                                | None -> ());
                               x1803))|])
    let (toUTCString : t -> string) =
      fun (x1808 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1808) "toUTCString" [||])
    let (toISOString : t -> string) =
      fun (x1809 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1809) "toISOString" [||])
    let (toJSON : t -> ?key:any -> unit -> string) =
      fun (x1813 : t) ->
        fun ?key:(x1810 : any option) ->
          fun () ->
            Ojs.string_of_js
              (let x1814 = t_to_js x1813 in
               Ojs.call (Ojs.get_prop_ascii x1814 "toJSON") "apply"
                 [|x1814;((let x1811 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1810 with
                            | Some x1812 ->
                                ignore
                                  (Ojs.call x1811 "push"
                                     [|(any_to_js x1812)|])
                            | None -> ());
                           x1811))|])
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Date") [||])
    let (create' : string or_number -> t) =
      fun (x1815 : string or_number) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Date")
             [|(or_number_to_js Ojs.string_to_js x1815)|])
    let (create'' :
      t ->
        year:int ->
          month:int ->
            ?date:int ->
              ?hours:int ->
                ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> t)
      =
      fun (x1817 : t) ->
        fun ~year:(x1818 : int) ->
          fun ~month:(x1819 : int) ->
            fun ?date:(x1820 : int option) ->
              fun ?hours:(x1821 : int option) ->
                fun ?minutes:(x1822 : int option) ->
                  fun ?seconds:(x1823 : int option) ->
                    fun ?ms:(x1824 : int option) ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii Ojs.global "Date")
                             (let x1825 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x1825 "push" [|(t_to_js x1817)|]);
                              ignore
                                (Ojs.call x1825 "push"
                                   [|(Ojs.int_to_js x1818)|]);
                              ignore
                                (Ojs.call x1825 "push"
                                   [|(Ojs.int_to_js x1819)|]);
                              (match x1820 with
                               | Some x1830 ->
                                   ignore
                                     (Ojs.call x1825 "push"
                                        [|(Ojs.int_to_js x1830)|])
                               | None -> ());
                              (match x1821 with
                               | Some x1829 ->
                                   ignore
                                     (Ojs.call x1825 "push"
                                        [|(Ojs.int_to_js x1829)|])
                               | None -> ());
                              (match x1822 with
                               | Some x1828 ->
                                   ignore
                                     (Ojs.call x1825 "push"
                                        [|(Ojs.int_to_js x1828)|])
                               | None -> ());
                              (match x1823 with
                               | Some x1827 ->
                                   ignore
                                     (Ojs.call x1825 "push"
                                        [|(Ojs.int_to_js x1827)|])
                               | None -> ());
                              (match x1824 with
                               | Some x1826 ->
                                   ignore
                                     (Ojs.call x1825 "push"
                                        [|(Ojs.int_to_js x1826)|])
                               | None -> ());
                              x1825))
    let (parse : string -> int) =
      fun (x1831 : string) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Date") "parse"
             [|(Ojs.string_to_js x1831)|])
    let (utc :
      year:int ->
        month:int ->
          ?date:int ->
            ?hours:int ->
              ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> int)
      =
      fun ~year:(x1832 : int) ->
        fun ~month:(x1833 : int) ->
          fun ?date:(x1834 : int option) ->
            fun ?hours:(x1835 : int option) ->
              fun ?minutes:(x1836 : int option) ->
                fun ?seconds:(x1837 : int option) ->
                  fun ?ms:(x1838 : int option) ->
                    fun () ->
                      Ojs.int_of_js
                        (let x1845 = Ojs.get_prop_ascii Ojs.global "Date" in
                         Ojs.call (Ojs.get_prop_ascii x1845 "UTC") "apply"
                           [|x1845;((let x1839 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1839 "push"
                                          [|(Ojs.int_to_js x1832)|]);
                                     ignore
                                       (Ojs.call x1839 "push"
                                          [|(Ojs.int_to_js x1833)|]);
                                     (match x1834 with
                                      | Some x1844 ->
                                          ignore
                                            (Ojs.call x1839 "push"
                                               [|(Ojs.int_to_js x1844)|])
                                      | None -> ());
                                     (match x1835 with
                                      | Some x1843 ->
                                          ignore
                                            (Ojs.call x1839 "push"
                                               [|(Ojs.int_to_js x1843)|])
                                      | None -> ());
                                     (match x1836 with
                                      | Some x1842 ->
                                          ignore
                                            (Ojs.call x1839 "push"
                                               [|(Ojs.int_to_js x1842)|])
                                      | None -> ());
                                     (match x1837 with
                                      | Some x1841 ->
                                          ignore
                                            (Ojs.call x1839 "push"
                                               [|(Ojs.int_to_js x1841)|])
                                      | None -> ());
                                     (match x1838 with
                                      | Some x1840 ->
                                          ignore
                                            (Ojs.call x1839 "push"
                                               [|(Ojs.int_to_js x1840)|])
                                      | None -> ());
                                     x1839))|])
    let (now : unit -> int) =
      fun () ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Date") "now" [||])
  end
module DateConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1847 : Ojs.t) -> x1847
    and t_to_js : t -> Ojs.t = fun (x1846 : Ojs.t) -> x1846
    let (create : t -> Date.t) =
      fun (x1848 : t) -> Date.t_of_js (Ojs.new_obj (t_to_js x1848) [||])
    let (create' : t -> string or_number -> Date.t) =
      fun (x1851 : t) ->
        fun (x1849 : string or_number) ->
          Date.t_of_js
            (Ojs.new_obj (t_to_js x1851)
               [|(or_number_to_js Ojs.string_to_js x1849)|])
    let (create'' :
      t ->
        year:int ->
          month:int ->
            ?date:int ->
              ?hours:int ->
                ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> Date.t)
      =
      fun (x1865 : t) ->
        fun ~year:(x1852 : int) ->
          fun ~month:(x1853 : int) ->
            fun ?date:(x1854 : int option) ->
              fun ?hours:(x1855 : int option) ->
                fun ?minutes:(x1856 : int option) ->
                  fun ?seconds:(x1857 : int option) ->
                    fun ?ms:(x1858 : int option) ->
                      fun () ->
                        Date.t_of_js
                          (Ojs.new_obj_arr (t_to_js x1865)
                             (let x1859 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x1859 "push"
                                   [|(Ojs.int_to_js x1852)|]);
                              ignore
                                (Ojs.call x1859 "push"
                                   [|(Ojs.int_to_js x1853)|]);
                              (match x1854 with
                               | Some x1864 ->
                                   ignore
                                     (Ojs.call x1859 "push"
                                        [|(Ojs.int_to_js x1864)|])
                               | None -> ());
                              (match x1855 with
                               | Some x1863 ->
                                   ignore
                                     (Ojs.call x1859 "push"
                                        [|(Ojs.int_to_js x1863)|])
                               | None -> ());
                              (match x1856 with
                               | Some x1862 ->
                                   ignore
                                     (Ojs.call x1859 "push"
                                        [|(Ojs.int_to_js x1862)|])
                               | None -> ());
                              (match x1857 with
                               | Some x1861 ->
                                   ignore
                                     (Ojs.call x1859 "push"
                                        [|(Ojs.int_to_js x1861)|])
                               | None -> ());
                              (match x1858 with
                               | Some x1860 ->
                                   ignore
                                     (Ojs.call x1859 "push"
                                        [|(Ojs.int_to_js x1860)|])
                               | None -> ());
                              x1859))
    let (apply : t -> string) =
      fun (x1866 : t) -> Ojs.string_of_js (Ojs.apply (t_to_js x1866) [||])
    let (get_prototype : t -> Date.t) =
      fun (x1867 : t) ->
        Date.t_of_js (Ojs.get_prop_ascii (t_to_js x1867) "prototype")
    let (parse : t -> string -> int) =
      fun (x1869 : t) ->
        fun (x1868 : string) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1869) "parse" [|(Ojs.string_to_js x1868)|])
    let (utc :
      t ->
        year:int ->
          month:int ->
            ?date:int ->
              ?hours:int ->
                ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> int)
      =
      fun (x1883 : t) ->
        fun ~year:(x1870 : int) ->
          fun ~month:(x1871 : int) ->
            fun ?date:(x1872 : int option) ->
              fun ?hours:(x1873 : int option) ->
                fun ?minutes:(x1874 : int option) ->
                  fun ?seconds:(x1875 : int option) ->
                    fun ?ms:(x1876 : int option) ->
                      fun () ->
                        Ojs.int_of_js
                          (let x1884 = t_to_js x1883 in
                           Ojs.call (Ojs.get_prop_ascii x1884 "UTC") "apply"
                             [|x1884;((let x1877 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1877 "push"
                                            [|(Ojs.int_to_js x1870)|]);
                                       ignore
                                         (Ojs.call x1877 "push"
                                            [|(Ojs.int_to_js x1871)|]);
                                       (match x1872 with
                                        | Some x1882 ->
                                            ignore
                                              (Ojs.call x1877 "push"
                                                 [|(Ojs.int_to_js x1882)|])
                                        | None -> ());
                                       (match x1873 with
                                        | Some x1881 ->
                                            ignore
                                              (Ojs.call x1877 "push"
                                                 [|(Ojs.int_to_js x1881)|])
                                        | None -> ());
                                       (match x1874 with
                                        | Some x1880 ->
                                            ignore
                                              (Ojs.call x1877 "push"
                                                 [|(Ojs.int_to_js x1880)|])
                                        | None -> ());
                                       (match x1875 with
                                        | Some x1879 ->
                                            ignore
                                              (Ojs.call x1877 "push"
                                                 [|(Ojs.int_to_js x1879)|])
                                        | None -> ());
                                       (match x1876 with
                                        | Some x1878 ->
                                            ignore
                                              (Ojs.call x1877 "push"
                                                 [|(Ojs.int_to_js x1878)|])
                                        | None -> ());
                                       x1877))|])
    let (now : t -> int) =
      fun (x1885 : t) -> Ojs.int_of_js (Ojs.call (t_to_js x1885) "now" [||])
  end
let (date : DateConstructor.t) =
  DateConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Date")
module Error =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1887 : Ojs.t) -> x1887
    and t_to_js : t -> Ojs.t = fun (x1886 : Ojs.t) -> x1886
    let (get_name : t -> string) =
      fun (x1888 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1888) "name")
    let (set_name : t -> string -> unit) =
      fun (x1889 : t) ->
        fun (x1890 : string) ->
          Ojs.set_prop_ascii (t_to_js x1889) "name" (Ojs.string_to_js x1890)
    let (get_message : t -> string) =
      fun (x1891 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1891) "message")
    let (set_message : t -> string -> unit) =
      fun (x1892 : t) ->
        fun (x1893 : string) ->
          Ojs.set_prop_ascii (t_to_js x1892) "message"
            (Ojs.string_to_js x1893)
    let (get_stack : t -> string) =
      fun (x1894 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1894) "stack")
    let (set_stack : t -> string -> unit) =
      fun (x1895 : t) ->
        fun (x1896 : string) ->
          Ojs.set_prop_ascii (t_to_js x1895) "stack" (Ojs.string_to_js x1896)
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1897 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Error")
               (let x1898 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1897 with
                 | Some x1899 ->
                     ignore
                       (Ojs.call x1898 "push" [|(Ojs.string_to_js x1899)|])
                 | None -> ());
                x1898))
  end
module ErrorConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1901 : Ojs.t) -> x1901
    and t_to_js : t -> Ojs.t = fun (x1900 : Ojs.t) -> x1900
    let (create : t -> ?message:string -> unit -> Error.t) =
      fun (x1905 : t) ->
        fun ?message:(x1902 : string option) ->
          fun () ->
            Error.t_of_js
              (Ojs.new_obj_arr (t_to_js x1905)
                 (let x1903 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1902 with
                   | Some x1904 ->
                       ignore
                         (Ojs.call x1903 "push" [|(Ojs.string_to_js x1904)|])
                   | None -> ());
                  x1903))
    let (apply : t -> ?message:string -> unit -> Error.t) =
      fun (x1909 : t) ->
        fun ?message:(x1906 : string option) ->
          fun () ->
            Error.t_of_js
              (Ojs.call (t_to_js x1909) "apply"
                 [|Ojs.null;((let x1907 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1906 with
                               | Some x1908 ->
                                   ignore
                                     (Ojs.call x1907 "push"
                                        [|(Ojs.string_to_js x1908)|])
                               | None -> ());
                              x1907))|])
    let (get_prototype : t -> Error.t) =
      fun (x1910 : t) ->
        Error.t_of_js (Ojs.get_prop_ascii (t_to_js x1910) "prototype")
  end
let (error : ErrorConstructor.t) =
  ErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Error")
module EvalError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1911 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EvalError")
               (let x1912 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1911 with
                 | Some x1913 ->
                     ignore
                       (Ojs.call x1912 "push" [|(Ojs.string_to_js x1913)|])
                 | None -> ());
                x1912))
  end
module EvalErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> EvalError.t) =
      fun (x1917 : t) ->
        fun ?message:(x1914 : string option) ->
          fun () ->
            EvalError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1917)
                 (let x1915 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1914 with
                   | Some x1916 ->
                       ignore
                         (Ojs.call x1915 "push" [|(Ojs.string_to_js x1916)|])
                   | None -> ());
                  x1915))
    let (apply : t -> ?message:string -> unit -> EvalError.t) =
      fun (x1921 : t) ->
        fun ?message:(x1918 : string option) ->
          fun () ->
            EvalError.t_of_js
              (Ojs.call (t_to_js x1921) "apply"
                 [|Ojs.null;((let x1919 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1918 with
                               | Some x1920 ->
                                   ignore
                                     (Ojs.call x1919 "push"
                                        [|(Ojs.string_to_js x1920)|])
                               | None -> ());
                              x1919))|])
    let (get_prototype : t -> EvalError.t) =
      fun (x1922 : t) ->
        EvalError.t_of_js (Ojs.get_prop_ascii (t_to_js x1922) "prototype")
  end
let (evalError : EvalErrorConstructor.t) =
  EvalErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "EvalError")
module RangeError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1923 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RangeError")
               (let x1924 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1923 with
                 | Some x1925 ->
                     ignore
                       (Ojs.call x1924 "push" [|(Ojs.string_to_js x1925)|])
                 | None -> ());
                x1924))
  end
module RangeErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> RangeError.t) =
      fun (x1929 : t) ->
        fun ?message:(x1926 : string option) ->
          fun () ->
            RangeError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1929)
                 (let x1927 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1926 with
                   | Some x1928 ->
                       ignore
                         (Ojs.call x1927 "push" [|(Ojs.string_to_js x1928)|])
                   | None -> ());
                  x1927))
    let (apply : t -> ?message:string -> unit -> RangeError.t) =
      fun (x1933 : t) ->
        fun ?message:(x1930 : string option) ->
          fun () ->
            RangeError.t_of_js
              (Ojs.call (t_to_js x1933) "apply"
                 [|Ojs.null;((let x1931 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1930 with
                               | Some x1932 ->
                                   ignore
                                     (Ojs.call x1931 "push"
                                        [|(Ojs.string_to_js x1932)|])
                               | None -> ());
                              x1931))|])
    let (get_prototype : t -> RangeError.t) =
      fun (x1934 : t) ->
        RangeError.t_of_js (Ojs.get_prop_ascii (t_to_js x1934) "prototype")
  end
let (rangeError : RangeErrorConstructor.t) =
  RangeErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "RangeError")
module ReferenceError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1935 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ReferenceError")
               (let x1936 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1935 with
                 | Some x1937 ->
                     ignore
                       (Ojs.call x1936 "push" [|(Ojs.string_to_js x1937)|])
                 | None -> ());
                x1936))
  end
module ReferenceErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> ReferenceError.t) =
      fun (x1941 : t) ->
        fun ?message:(x1938 : string option) ->
          fun () ->
            ReferenceError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1941)
                 (let x1939 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1938 with
                   | Some x1940 ->
                       ignore
                         (Ojs.call x1939 "push" [|(Ojs.string_to_js x1940)|])
                   | None -> ());
                  x1939))
    let (apply : t -> ?message:string -> unit -> ReferenceError.t) =
      fun (x1945 : t) ->
        fun ?message:(x1942 : string option) ->
          fun () ->
            ReferenceError.t_of_js
              (Ojs.call (t_to_js x1945) "apply"
                 [|Ojs.null;((let x1943 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1942 with
                               | Some x1944 ->
                                   ignore
                                     (Ojs.call x1943 "push"
                                        [|(Ojs.string_to_js x1944)|])
                               | None -> ());
                              x1943))|])
    let (get_prototype : t -> ReferenceError.t) =
      fun (x1946 : t) ->
        ReferenceError.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1946) "prototype")
  end
let (referenceError : ReferenceErrorConstructor.t) =
  ReferenceErrorConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "ReferenceError")
module SyntaxError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1947 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "SyntaxError")
               (let x1948 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1947 with
                 | Some x1949 ->
                     ignore
                       (Ojs.call x1948 "push" [|(Ojs.string_to_js x1949)|])
                 | None -> ());
                x1948))
  end
module SyntaxErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> SyntaxError.t) =
      fun (x1953 : t) ->
        fun ?message:(x1950 : string option) ->
          fun () ->
            SyntaxError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1953)
                 (let x1951 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1950 with
                   | Some x1952 ->
                       ignore
                         (Ojs.call x1951 "push" [|(Ojs.string_to_js x1952)|])
                   | None -> ());
                  x1951))
    let (apply : t -> ?message:string -> unit -> SyntaxError.t) =
      fun (x1957 : t) ->
        fun ?message:(x1954 : string option) ->
          fun () ->
            SyntaxError.t_of_js
              (Ojs.call (t_to_js x1957) "apply"
                 [|Ojs.null;((let x1955 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1954 with
                               | Some x1956 ->
                                   ignore
                                     (Ojs.call x1955 "push"
                                        [|(Ojs.string_to_js x1956)|])
                               | None -> ());
                              x1955))|])
    let (get_prototype : t -> SyntaxError.t) =
      fun (x1958 : t) ->
        SyntaxError.t_of_js (Ojs.get_prop_ascii (t_to_js x1958) "prototype")
  end
let (syntaxError : SyntaxErrorConstructor.t) =
  SyntaxErrorConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "SyntaxError")
module TypeError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1959 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TypeError")
               (let x1960 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1959 with
                 | Some x1961 ->
                     ignore
                       (Ojs.call x1960 "push" [|(Ojs.string_to_js x1961)|])
                 | None -> ());
                x1960))
  end
module TypeErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> TypeError.t) =
      fun (x1965 : t) ->
        fun ?message:(x1962 : string option) ->
          fun () ->
            TypeError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1965)
                 (let x1963 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1962 with
                   | Some x1964 ->
                       ignore
                         (Ojs.call x1963 "push" [|(Ojs.string_to_js x1964)|])
                   | None -> ());
                  x1963))
    let (apply : t -> ?message:string -> unit -> TypeError.t) =
      fun (x1969 : t) ->
        fun ?message:(x1966 : string option) ->
          fun () ->
            TypeError.t_of_js
              (Ojs.call (t_to_js x1969) "apply"
                 [|Ojs.null;((let x1967 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1966 with
                               | Some x1968 ->
                                   ignore
                                     (Ojs.call x1967 "push"
                                        [|(Ojs.string_to_js x1968)|])
                               | None -> ());
                              x1967))|])
    let (get_prototype : t -> TypeError.t) =
      fun (x1970 : t) ->
        TypeError.t_of_js (Ojs.get_prop_ascii (t_to_js x1970) "prototype")
  end
let (typeError : TypeErrorConstructor.t) =
  TypeErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "TypeError")
module URIError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1971 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URIError")
               (let x1972 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1971 with
                 | Some x1973 ->
                     ignore
                       (Ojs.call x1972 "push" [|(Ojs.string_to_js x1973)|])
                 | None -> ());
                x1972))
  end
module URIErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> URIError.t) =
      fun (x1977 : t) ->
        fun ?message:(x1974 : string option) ->
          fun () ->
            URIError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1977)
                 (let x1975 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1974 with
                   | Some x1976 ->
                       ignore
                         (Ojs.call x1975 "push" [|(Ojs.string_to_js x1976)|])
                   | None -> ());
                  x1975))
    let (apply : t -> ?message:string -> unit -> URIError.t) =
      fun (x1981 : t) ->
        fun ?message:(x1978 : string option) ->
          fun () ->
            URIError.t_of_js
              (Ojs.call (t_to_js x1981) "apply"
                 [|Ojs.null;((let x1979 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1978 with
                               | Some x1980 ->
                                   ignore
                                     (Ojs.call x1979 "push"
                                        [|(Ojs.string_to_js x1980)|])
                               | None -> ());
                              x1979))|])
    let (get_prototype : t -> URIError.t) =
      fun (x1982 : t) ->
        URIError.t_of_js (Ojs.get_prop_ascii (t_to_js x1982) "prototype")
  end
let (uriError : URIErrorConstructor.t) =
  URIErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "URIError")
module JSON =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1984 : Ojs.t) -> x1984
    and t_to_js : t -> Ojs.t = fun (x1983 : Ojs.t) -> x1983
    let (parse :
      string ->
        ?reviver:(this:any -> key:string -> value:any -> any) -> unit -> any)
      =
      fun (x1985 : string) ->
        fun
          ?reviver:(x1986 :
                     (this:any -> key:string -> value:any -> any) option)
          ->
          fun () ->
            any_of_js
              (let x1992 = Ojs.get_prop_ascii Ojs.global "JSON" in
               Ojs.call (Ojs.get_prop_ascii x1992 "parse") "apply"
                 [|x1992;((let x1987 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1987 "push"
                                [|(Ojs.string_to_js x1985)|]);
                           (match x1986 with
                            | Some x1988 ->
                                ignore
                                  (Ojs.call x1987 "push"
                                     [|(Ojs.fun_to_js 3
                                          (fun (x1989 : Ojs.t) ->
                                             fun (x1990 : Ojs.t) ->
                                               fun (x1991 : Ojs.t) ->
                                                 any_to_js
                                                   (x1988
                                                      ~this:(any_of_js x1989)
                                                      ~key:(Ojs.string_of_js
                                                              x1990)
                                                      ~value:(any_of_js x1991))))|])
                            | None -> ());
                           x1987))|])
    let (stringify :
      any ->
        ?replacer:(this:any -> key:string -> value:any -> any) ->
          ?space:string or_number -> unit -> string)
      =
      fun (x1993 : any) ->
        fun
          ?replacer:(x1994 :
                      (this:any -> key:string -> value:any -> any) option)
          ->
          fun ?space:(x1995 : string or_number option) ->
            fun () ->
              Ojs.string_of_js
                (let x2003 = Ojs.get_prop_ascii Ojs.global "JSON" in
                 Ojs.call (Ojs.get_prop_ascii x2003 "stringify") "apply"
                   [|x2003;((let x1996 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1996 "push" [|(any_to_js x1993)|]);
                             (match x1994 with
                              | Some x1999 ->
                                  ignore
                                    (Ojs.call x1996 "push"
                                       [|(Ojs.fun_to_js 3
                                            (fun (x2000 : Ojs.t) ->
                                               fun (x2001 : Ojs.t) ->
                                                 fun (x2002 : Ojs.t) ->
                                                   any_to_js
                                                     (x1999
                                                        ~this:(any_of_js
                                                                 x2000)
                                                        ~key:(Ojs.string_of_js
                                                                x2001)
                                                        ~value:(any_of_js
                                                                  x2002))))|])
                              | None -> ());
                             (match x1995 with
                              | Some x1997 ->
                                  ignore
                                    (Ojs.call x1996 "push"
                                       [|(or_number_to_js Ojs.string_to_js
                                            x1997)|])
                              | None -> ());
                             x1996))|])
    let (stringify' :
      any ->
        ?replacer:string or_number list or_null ->
          ?space:string or_number -> unit -> string)
      =
      fun (x2004 : any) ->
        fun ?replacer:(x2005 : string or_number list or_null option) ->
          fun ?space:(x2006 : string or_number option) ->
            fun () ->
              Ojs.string_of_js
                (let x2014 = Ojs.get_prop_ascii Ojs.global "JSON" in
                 Ojs.call (Ojs.get_prop_ascii x2014 "stringify") "apply"
                   [|x2014;((let x2007 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2007 "push" [|(any_to_js x2004)|]);
                             (match x2005 with
                              | Some x2010 ->
                                  ignore
                                    (Ojs.call x2007 "push"
                                       [|(or_null_to_js
                                            (fun
                                               (x2011 :
                                                 string or_number list)
                                               ->
                                               Ojs.list_to_js
                                                 (fun
                                                    (x2012 :
                                                      string or_number)
                                                    ->
                                                    or_number_to_js
                                                      Ojs.string_to_js x2012)
                                                 x2011) x2010)|])
                              | None -> ());
                             (match x2006 with
                              | Some x2008 ->
                                  ignore
                                    (Ojs.call x2007 "push"
                                       [|(or_number_to_js Ojs.string_to_js
                                            x2008)|])
                              | None -> ());
                             x2007))|])
  end
module TypedPropertyDescriptor =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x2016 : Ojs.t) -> x2016
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x2015 : Ojs.t) -> x2015
    let (get_enumerable : 'T t -> bool) =
      fun (x2017 : 'T t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x2017) "enumerable")
    let (set_enumerable : 'T t -> bool -> unit) =
      fun (x2019 : 'T t) ->
        fun (x2020 : bool) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2019) "enumerable"
            (Ojs.bool_to_js x2020)
    let (get_configurable : 'T t -> bool) =
      fun (x2022 : 'T t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x2022) "configurable")
    let (set_configurable : 'T t -> bool -> unit) =
      fun (x2024 : 'T t) ->
        fun (x2025 : bool) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2024) "configurable"
            (Ojs.bool_to_js x2025)
    let (get_writable : 'T t -> bool) =
      fun (x2027 : 'T t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x2027) "writable")
    let (set_writable : 'T t -> bool -> unit) =
      fun (x2029 : 'T t) ->
        fun (x2030 : bool) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2029) "writable"
            (Ojs.bool_to_js x2030)
    let (get_value : 'T t -> 'T) =
      fun (x2032 : 'T t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x2032) "value")
    let (set_value : 'T t -> 'T -> unit) =
      fun (x2034 : 'T t) ->
        fun (x2035 : 'T) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2034) "value"
            (Obj.magic x2035)
    let (get_ : 'T t -> 'T) =
      fun (x2037 : 'T t) ->
        Obj.magic (Ojs.call (t_to_js Obj.magic x2037) "get" [||])
    let (set_ : 'T t -> value:'T -> unit) =
      fun (x2040 : 'T t) ->
        fun ~value:(x2039 : 'T) ->
          ignore
            (Ojs.call (t_to_js Obj.magic x2040) "set" [|(Obj.magic x2039)|])
  end
module ClassDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2043 : Ojs.t) -> x2043
    and t_to_js : t -> Ojs.t = fun (x2042 : Ojs.t) -> x2042
    let (apply : t -> target:'TFunction -> ('TFunction, unit) union2) =
      fun (x2045 : t) ->
        fun ~target:(x2044 : 'TFunction) ->
          union2_of_js Obj.magic Ojs.unit_of_js
            (Ojs.apply (t_to_js x2045) [|(Obj.magic x2044)|])
  end
module PropertyDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2049 : Ojs.t) -> x2049
    and t_to_js : t -> Ojs.t = fun (x2048 : Ojs.t) -> x2048
    let (apply :
      t -> target:Object.t -> propertyKey:symbol or_string -> unit) =
      fun (x2053 : t) ->
        fun ~target:(x2050 : Object.t) ->
          fun ~propertyKey:(x2051 : symbol or_string) ->
            ignore
              (Ojs.apply (t_to_js x2053)
                 [|(Object.t_to_js x2050);(or_string_to_js symbol_to_js x2051)|])
  end
module MethodDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2055 : Ojs.t) -> x2055
    and t_to_js : t -> Ojs.t = fun (x2054 : Ojs.t) -> x2054
    let (apply :
      t ->
        target:Object.t ->
          propertyKey:symbol or_string ->
            descriptor:'T TypedPropertyDescriptor.t ->
              (unit, 'T TypedPropertyDescriptor.t) union2)
      =
      fun (x2061 : t) ->
        fun ~target:(x2056 : Object.t) ->
          fun ~propertyKey:(x2057 : symbol or_string) ->
            fun ~descriptor:(x2059 : 'T TypedPropertyDescriptor.t) ->
              union2_of_js Ojs.unit_of_js
                (fun (x2063 : Ojs.t) ->
                   TypedPropertyDescriptor.t_of_js Obj.magic x2063)
                (Ojs.apply (t_to_js x2061)
                   [|(Object.t_to_js x2056);(or_string_to_js symbol_to_js
                                               x2057);(TypedPropertyDescriptor.t_to_js
                                                         Obj.magic x2059)|])
  end
module ParameterDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2066 : Ojs.t) -> x2066
    and t_to_js : t -> Ojs.t = fun (x2065 : Ojs.t) -> x2065
    let (apply :
      t ->
        target:Object.t ->
          propertyKey:symbol or_string -> parameterIndex:int -> unit)
      =
      fun (x2071 : t) ->
        fun ~target:(x2067 : Object.t) ->
          fun ~propertyKey:(x2068 : symbol or_string) ->
            fun ~parameterIndex:(x2070 : int) ->
              ignore
                (Ojs.apply (t_to_js x2071)
                   [|(Object.t_to_js x2067);(or_string_to_js symbol_to_js
                                               x2068);(Ojs.int_to_js x2070)|])
  end
module Promise =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x2073 : Ojs.t) -> x2073
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x2072 : Ojs.t) -> x2072
    let (then_ :
      'T t ->
        ?onfulfilled:('T -> 'TResult t) ->
          ?onrejected:(any -> 'TResult t) -> unit -> 'TResult t)
      =
      fun (x2083 : 'T t) ->
        fun ?onfulfilled:(x2074 : ('T -> 'TResult t) option) ->
          fun ?onrejected:(x2075 : (any -> 'TResult t) option) ->
            fun () ->
              t_of_js Obj.magic
                (let x2085 = t_to_js Obj.magic x2083 in
                 Ojs.call (Ojs.get_prop_ascii x2085 "then") "apply"
                   [|x2085;((let x2076 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2074 with
                              | Some x2080 ->
                                  ignore
                                    (Ojs.call x2076 "push"
                                       [|(Ojs.fun_to_js 1
                                            (fun (x2081 : Ojs.t) ->
                                               t_to_js Obj.magic
                                                 (x2080 (Obj.magic x2081))))|])
                              | None -> ());
                             (match x2075 with
                              | Some x2077 ->
                                  ignore
                                    (Ojs.call x2076 "push"
                                       [|(Ojs.fun_to_js 1
                                            (fun (x2078 : Ojs.t) ->
                                               t_to_js Obj.magic
                                                 (x2077 (any_of_js x2078))))|])
                              | None -> ());
                             x2076))|])
    let (catch : 'T t -> ?onrejected:(any -> 'T t) -> unit -> 'T t) =
      fun (x2092 : 'T t) ->
        fun ?onrejected:(x2087 : (any -> 'T t) option) ->
          fun () ->
            t_of_js Obj.magic
              (let x2094 = t_to_js Obj.magic x2092 in
               Ojs.call (Ojs.get_prop_ascii x2094 "catch") "apply"
                 [|x2094;((let x2088 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2087 with
                            | Some x2089 ->
                                ignore
                                  (Ojs.call x2088 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x2090 : Ojs.t) ->
                                             t_to_js Obj.magic
                                               (x2089 (any_of_js x2090))))|])
                            | None -> ());
                           x2088))|])
  end
module ArrayBuffer =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2097 : Ojs.t) -> x2097
    and t_to_js : t -> Ojs.t = fun (x2096 : Ojs.t) -> x2096
    let (get_byteLength : t -> int) =
      fun (x2098 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2098) "byteLength")
    let (slice : t -> begin_:int -> ?end_:int -> unit -> t) =
      fun (x2103 : t) ->
        fun ~begin_:(x2099 : int) ->
          fun ?end_:(x2100 : int option) ->
            fun () ->
              t_of_js
                (let x2104 = t_to_js x2103 in
                 Ojs.call (Ojs.get_prop_ascii x2104 "slice") "apply"
                   [|x2104;((let x2101 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2101 "push"
                                  [|(Ojs.int_to_js x2099)|]);
                             (match x2100 with
                              | Some x2102 ->
                                  ignore
                                    (Ojs.call x2101 "push"
                                       [|(Ojs.int_to_js x2102)|])
                              | None -> ());
                             x2101))|])
    let (create : byteLength:int -> t) =
      fun ~byteLength:(x2105 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
             [|(Ojs.int_to_js x2105)|])
    let (isView : any -> bool) =
      fun (x2106 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ArrayBuffer") "isView"
             [|(any_to_js x2106)|])
  end
module ArrayBufferTypes =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2108 : Ojs.t) -> x2108
    and t_to_js : t -> Ojs.t = fun (x2107 : Ojs.t) -> x2107
    let (get_ArrayBuffer : t -> ArrayBuffer.t) =
      fun (x2109 : t) ->
        ArrayBuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x2109) "ArrayBuffer")
    let (set_ArrayBuffer : t -> ArrayBuffer.t -> unit) =
      fun (x2110 : t) ->
        fun (x2111 : ArrayBuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x2110) "ArrayBuffer"
            (ArrayBuffer.t_to_js x2111)
  end
module ArrayBufferConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2113 : Ojs.t) -> x2113
    and t_to_js : t -> Ojs.t = fun (x2112 : Ojs.t) -> x2112
    let (get_prototype : t -> ArrayBuffer.t) =
      fun (x2114 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2114) "prototype")
    let (create : t -> byteLength:int -> ArrayBuffer.t) =
      fun (x2116 : t) ->
        fun ~byteLength:(x2115 : int) ->
          ArrayBuffer.t_of_js
            (Ojs.new_obj (t_to_js x2116) [|(Ojs.int_to_js x2115)|])
    let (isView : t -> any -> bool) =
      fun (x2118 : t) ->
        fun (x2117 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x2118) "isView" [|(any_to_js x2117)|])
  end
let (arrayBuffer : ArrayBufferConstructor.t) =
  ArrayBufferConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
module ArrayBufferView =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2120 : Ojs.t) -> x2120
    and t_to_js : t -> Ojs.t = fun (x2119 : Ojs.t) -> x2119
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2121 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2121) "buffer")
    let (set_buffer : t -> ArrayBuffer.t -> unit) =
      fun (x2122 : t) ->
        fun (x2123 : ArrayBuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x2122) "buffer"
            (ArrayBuffer.t_to_js x2123)
    let (get_byteLength : t -> int) =
      fun (x2124 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2124) "byteLength")
    let (set_byteLength : t -> int -> unit) =
      fun (x2125 : t) ->
        fun (x2126 : int) ->
          Ojs.set_prop_ascii (t_to_js x2125) "byteLength"
            (Ojs.int_to_js x2126)
    let (get_byteOffset : t -> int) =
      fun (x2127 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2127) "byteOffset")
    let (set_byteOffset : t -> int -> unit) =
      fun (x2128 : t) ->
        fun (x2129 : int) ->
          Ojs.set_prop_ascii (t_to_js x2128) "byteOffset"
            (Ojs.int_to_js x2129)
  end
module DataView =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2131 : Ojs.t) -> x2131
    and t_to_js : t -> Ojs.t = fun (x2130 : Ojs.t) -> x2130
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2132 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2132) "buffer")
    let (get_byteLength : t -> int) =
      fun (x2133 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2133) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x2134 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2134) "byteOffset")
    let (getFloat32 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2139 : t) ->
        fun ~byteOffset:(x2135 : int) ->
          fun ?littleEndian:(x2136 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2140 = t_to_js x2139 in
                 Ojs.call (Ojs.get_prop_ascii x2140 "getFloat32") "apply"
                   [|x2140;((let x2137 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2137 "push"
                                  [|(Ojs.int_to_js x2135)|]);
                             (match x2136 with
                              | Some x2138 ->
                                  ignore
                                    (Ojs.call x2137 "push"
                                       [|(Ojs.bool_to_js x2138)|])
                              | None -> ());
                             x2137))|])
    let (getFloat64 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2145 : t) ->
        fun ~byteOffset:(x2141 : int) ->
          fun ?littleEndian:(x2142 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2146 = t_to_js x2145 in
                 Ojs.call (Ojs.get_prop_ascii x2146 "getFloat64") "apply"
                   [|x2146;((let x2143 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2143 "push"
                                  [|(Ojs.int_to_js x2141)|]);
                             (match x2142 with
                              | Some x2144 ->
                                  ignore
                                    (Ojs.call x2143 "push"
                                       [|(Ojs.bool_to_js x2144)|])
                              | None -> ());
                             x2143))|])
    let (getInt8 : t -> byteOffset:int -> int) =
      fun (x2148 : t) ->
        fun ~byteOffset:(x2147 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2148) "getInt8" [|(Ojs.int_to_js x2147)|])
    let (getInt16 : t -> byteOffset:int -> ?littleEndian:bool -> unit -> int)
      =
      fun (x2153 : t) ->
        fun ~byteOffset:(x2149 : int) ->
          fun ?littleEndian:(x2150 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2154 = t_to_js x2153 in
                 Ojs.call (Ojs.get_prop_ascii x2154 "getInt16") "apply"
                   [|x2154;((let x2151 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2151 "push"
                                  [|(Ojs.int_to_js x2149)|]);
                             (match x2150 with
                              | Some x2152 ->
                                  ignore
                                    (Ojs.call x2151 "push"
                                       [|(Ojs.bool_to_js x2152)|])
                              | None -> ());
                             x2151))|])
    let (getInt32 : t -> byteOffset:int -> ?littleEndian:bool -> unit -> int)
      =
      fun (x2159 : t) ->
        fun ~byteOffset:(x2155 : int) ->
          fun ?littleEndian:(x2156 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2160 = t_to_js x2159 in
                 Ojs.call (Ojs.get_prop_ascii x2160 "getInt32") "apply"
                   [|x2160;((let x2157 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2157 "push"
                                  [|(Ojs.int_to_js x2155)|]);
                             (match x2156 with
                              | Some x2158 ->
                                  ignore
                                    (Ojs.call x2157 "push"
                                       [|(Ojs.bool_to_js x2158)|])
                              | None -> ());
                             x2157))|])
    let (getUint8 : t -> byteOffset:int -> int) =
      fun (x2162 : t) ->
        fun ~byteOffset:(x2161 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2162) "getUint8" [|(Ojs.int_to_js x2161)|])
    let (getUint16 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2167 : t) ->
        fun ~byteOffset:(x2163 : int) ->
          fun ?littleEndian:(x2164 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2168 = t_to_js x2167 in
                 Ojs.call (Ojs.get_prop_ascii x2168 "getUint16") "apply"
                   [|x2168;((let x2165 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2165 "push"
                                  [|(Ojs.int_to_js x2163)|]);
                             (match x2164 with
                              | Some x2166 ->
                                  ignore
                                    (Ojs.call x2165 "push"
                                       [|(Ojs.bool_to_js x2166)|])
                              | None -> ());
                             x2165))|])
    let (getUint32 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2173 : t) ->
        fun ~byteOffset:(x2169 : int) ->
          fun ?littleEndian:(x2170 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2174 = t_to_js x2173 in
                 Ojs.call (Ojs.get_prop_ascii x2174 "getUint32") "apply"
                   [|x2174;((let x2171 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2171 "push"
                                  [|(Ojs.int_to_js x2169)|]);
                             (match x2170 with
                              | Some x2172 ->
                                  ignore
                                    (Ojs.call x2171 "push"
                                       [|(Ojs.bool_to_js x2172)|])
                              | None -> ());
                             x2171))|])
    let (setFloat32 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2180 : t) ->
        fun ~byteOffset:(x2175 : int) ->
          fun ~value:(x2176 : int) ->
            fun ?littleEndian:(x2177 : bool option) ->
              fun () ->
                ignore
                  (let x2181 = t_to_js x2180 in
                   Ojs.call (Ojs.get_prop_ascii x2181 "setFloat32") "apply"
                     [|x2181;((let x2178 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2178 "push"
                                    [|(Ojs.int_to_js x2175)|]);
                               ignore
                                 (Ojs.call x2178 "push"
                                    [|(Ojs.int_to_js x2176)|]);
                               (match x2177 with
                                | Some x2179 ->
                                    ignore
                                      (Ojs.call x2178 "push"
                                         [|(Ojs.bool_to_js x2179)|])
                                | None -> ());
                               x2178))|])
    let (setFloat64 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2187 : t) ->
        fun ~byteOffset:(x2182 : int) ->
          fun ~value:(x2183 : int) ->
            fun ?littleEndian:(x2184 : bool option) ->
              fun () ->
                ignore
                  (let x2188 = t_to_js x2187 in
                   Ojs.call (Ojs.get_prop_ascii x2188 "setFloat64") "apply"
                     [|x2188;((let x2185 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2185 "push"
                                    [|(Ojs.int_to_js x2182)|]);
                               ignore
                                 (Ojs.call x2185 "push"
                                    [|(Ojs.int_to_js x2183)|]);
                               (match x2184 with
                                | Some x2186 ->
                                    ignore
                                      (Ojs.call x2185 "push"
                                         [|(Ojs.bool_to_js x2186)|])
                                | None -> ());
                               x2185))|])
    let (setInt8 : t -> byteOffset:int -> value:int -> unit) =
      fun (x2191 : t) ->
        fun ~byteOffset:(x2189 : int) ->
          fun ~value:(x2190 : int) ->
            ignore
              (Ojs.call (t_to_js x2191) "setInt8"
                 [|(Ojs.int_to_js x2189);(Ojs.int_to_js x2190)|])
    let (setInt16 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2197 : t) ->
        fun ~byteOffset:(x2192 : int) ->
          fun ~value:(x2193 : int) ->
            fun ?littleEndian:(x2194 : bool option) ->
              fun () ->
                ignore
                  (let x2198 = t_to_js x2197 in
                   Ojs.call (Ojs.get_prop_ascii x2198 "setInt16") "apply"
                     [|x2198;((let x2195 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2195 "push"
                                    [|(Ojs.int_to_js x2192)|]);
                               ignore
                                 (Ojs.call x2195 "push"
                                    [|(Ojs.int_to_js x2193)|]);
                               (match x2194 with
                                | Some x2196 ->
                                    ignore
                                      (Ojs.call x2195 "push"
                                         [|(Ojs.bool_to_js x2196)|])
                                | None -> ());
                               x2195))|])
    let (setInt32 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2204 : t) ->
        fun ~byteOffset:(x2199 : int) ->
          fun ~value:(x2200 : int) ->
            fun ?littleEndian:(x2201 : bool option) ->
              fun () ->
                ignore
                  (let x2205 = t_to_js x2204 in
                   Ojs.call (Ojs.get_prop_ascii x2205 "setInt32") "apply"
                     [|x2205;((let x2202 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2202 "push"
                                    [|(Ojs.int_to_js x2199)|]);
                               ignore
                                 (Ojs.call x2202 "push"
                                    [|(Ojs.int_to_js x2200)|]);
                               (match x2201 with
                                | Some x2203 ->
                                    ignore
                                      (Ojs.call x2202 "push"
                                         [|(Ojs.bool_to_js x2203)|])
                                | None -> ());
                               x2202))|])
    let (setUint8 : t -> byteOffset:int -> value:int -> unit) =
      fun (x2208 : t) ->
        fun ~byteOffset:(x2206 : int) ->
          fun ~value:(x2207 : int) ->
            ignore
              (Ojs.call (t_to_js x2208) "setUint8"
                 [|(Ojs.int_to_js x2206);(Ojs.int_to_js x2207)|])
    let (setUint16 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2214 : t) ->
        fun ~byteOffset:(x2209 : int) ->
          fun ~value:(x2210 : int) ->
            fun ?littleEndian:(x2211 : bool option) ->
              fun () ->
                ignore
                  (let x2215 = t_to_js x2214 in
                   Ojs.call (Ojs.get_prop_ascii x2215 "setUint16") "apply"
                     [|x2215;((let x2212 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2212 "push"
                                    [|(Ojs.int_to_js x2209)|]);
                               ignore
                                 (Ojs.call x2212 "push"
                                    [|(Ojs.int_to_js x2210)|]);
                               (match x2211 with
                                | Some x2213 ->
                                    ignore
                                      (Ojs.call x2212 "push"
                                         [|(Ojs.bool_to_js x2213)|])
                                | None -> ());
                               x2212))|])
    let (setUint32 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2221 : t) ->
        fun ~byteOffset:(x2216 : int) ->
          fun ~value:(x2217 : int) ->
            fun ?littleEndian:(x2218 : bool option) ->
              fun () ->
                ignore
                  (let x2222 = t_to_js x2221 in
                   Ojs.call (Ojs.get_prop_ascii x2222 "setUint32") "apply"
                     [|x2222;((let x2219 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2219 "push"
                                    [|(Ojs.int_to_js x2216)|]);
                               ignore
                                 (Ojs.call x2219 "push"
                                    [|(Ojs.int_to_js x2217)|]);
                               (match x2218 with
                                | Some x2220 ->
                                    ignore
                                      (Ojs.call x2219 "push"
                                         [|(Ojs.bool_to_js x2220)|])
                                | None -> ());
                               x2219))|])
    let (create :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?byteLength:int -> unit -> t)
      =
      fun ~buffer:(x2223 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2224 : int option) ->
          fun ?byteLength:(x2225 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DataView")
                   (let x2226 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2226 "push" [|(ArrayBuffer.t_to_js x2223)|]);
                    (match x2224 with
                     | Some x2228 ->
                         ignore
                           (Ojs.call x2226 "push" [|(Ojs.int_to_js x2228)|])
                     | None -> ());
                    (match x2225 with
                     | Some x2227 ->
                         ignore
                           (Ojs.call x2226 "push" [|(Ojs.int_to_js x2227)|])
                     | None -> ());
                    x2226))
  end
module DataViewConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2230 : Ojs.t) -> x2230
    and t_to_js : t -> Ojs.t = fun (x2229 : Ojs.t) -> x2229
    let (get_prototype : t -> DataView.t) =
      fun (x2231 : t) ->
        DataView.t_of_js (Ojs.get_prop_ascii (t_to_js x2231) "prototype")
    let (create :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?byteLength:int -> unit -> DataView.t)
      =
      fun (x2238 : t) ->
        fun ~buffer:(x2232 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2233 : int option) ->
            fun ?byteLength:(x2234 : int option) ->
              fun () ->
                DataView.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2238)
                     (let x2235 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2235 "push"
                           [|(ArrayBuffer.t_to_js x2232)|]);
                      (match x2233 with
                       | Some x2237 ->
                           ignore
                             (Ojs.call x2235 "push" [|(Ojs.int_to_js x2237)|])
                       | None -> ());
                      (match x2234 with
                       | Some x2236 ->
                           ignore
                             (Ojs.call x2235 "push" [|(Ojs.int_to_js x2236)|])
                       | None -> ());
                      x2235))
  end
let (dataView : DataViewConstructor.t) =
  DataViewConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "DataView")
module Int8Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2240 : Ojs.t) -> x2240
    and t_to_js : t -> Ojs.t = fun (x2239 : Ojs.t) -> x2239
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x2241 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2241) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2242 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2242) "buffer")
    let (get_byteLength : t -> int) =
      fun (x2243 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2243) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x2244 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2244) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x2250 : t) ->
        fun ~target:(x2245 : int) ->
          fun ~start:(x2246 : int) ->
            fun ?end_:(x2247 : int option) ->
              fun () ->
                t_of_js
                  (let x2251 = t_to_js x2250 in
                   Ojs.call (Ojs.get_prop_ascii x2251 "copyWithin") "apply"
                     [|x2251;((let x2248 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2248 "push"
                                    [|(Ojs.int_to_js x2245)|]);
                               ignore
                                 (Ojs.call x2248 "push"
                                    [|(Ojs.int_to_js x2246)|]);
                               (match x2247 with
                                | Some x2249 ->
                                    ignore
                                      (Ojs.call x2248 "push"
                                         [|(Ojs.int_to_js x2249)|])
                                | None -> ());
                               x2248))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2259 : t) ->
        fun (x2252 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2253 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2260 = t_to_js x2259 in
                 Ojs.call (Ojs.get_prop_ascii x2260 "every") "apply"
                   [|x2260;((let x2254 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2254 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2256 : Ojs.t) ->
                                          fun (x2257 : Ojs.t) ->
                                            fun (x2258 : Ojs.t) ->
                                              unknown_to_js
                                                (x2252
                                                   ~value:(Ojs.int_of_js
                                                             x2256)
                                                   ~index:(Ojs.int_of_js
                                                             x2257)
                                                   ~array:(t_of_js x2258))))|]);
                             (match x2253 with
                              | Some x2255 ->
                                  ignore
                                    (Ojs.call x2254 "push"
                                       [|(any_to_js x2255)|])
                              | None -> ());
                             x2254))|])
    let (fill : t -> int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2267 : t) ->
        fun (x2261 : int) ->
          fun ?start:(x2262 : int option) ->
            fun ?end_:(x2263 : int option) ->
              fun () ->
                t_of_js
                  (let x2268 = t_to_js x2267 in
                   Ojs.call (Ojs.get_prop_ascii x2268 "fill") "apply"
                     [|x2268;((let x2264 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2264 "push"
                                    [|(Ojs.int_to_js x2261)|]);
                               (match x2262 with
                                | Some x2266 ->
                                    ignore
                                      (Ojs.call x2264 "push"
                                         [|(Ojs.int_to_js x2266)|])
                                | None -> ());
                               (match x2263 with
                                | Some x2265 ->
                                    ignore
                                      (Ojs.call x2264 "push"
                                         [|(Ojs.int_to_js x2265)|])
                                | None -> ());
                               x2264))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2276 : t) ->
        fun (x2269 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x2270 : any option) ->
            fun () ->
              t_of_js
                (let x2277 = t_to_js x2276 in
                 Ojs.call (Ojs.get_prop_ascii x2277 "filter") "apply"
                   [|x2277;((let x2271 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2271 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2273 : Ojs.t) ->
                                          fun (x2274 : Ojs.t) ->
                                            fun (x2275 : Ojs.t) ->
                                              any_to_js
                                                (x2269
                                                   ~value:(Ojs.int_of_js
                                                             x2273)
                                                   ~index:(Ojs.int_of_js
                                                             x2274)
                                                   ~array:(t_of_js x2275))))|]);
                             (match x2270 with
                              | Some x2272 ->
                                  ignore
                                    (Ojs.call x2271 "push"
                                       [|(any_to_js x2272)|])
                              | None -> ());
                             x2271))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x2285 : t) ->
        fun (x2278 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2279 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x2286 = t_to_js x2285 in
                 Ojs.call (Ojs.get_prop_ascii x2286 "find") "apply"
                   [|x2286;((let x2280 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2280 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2282 : Ojs.t) ->
                                          fun (x2283 : Ojs.t) ->
                                            fun (x2284 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2278
                                                   ~value:(Ojs.int_of_js
                                                             x2282)
                                                   ~index:(Ojs.int_of_js
                                                             x2283)
                                                   ~obj:(t_of_js x2284))))|]);
                             (match x2279 with
                              | Some x2281 ->
                                  ignore
                                    (Ojs.call x2280 "push"
                                       [|(any_to_js x2281)|])
                              | None -> ());
                             x2280))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x2295 : t) ->
        fun (x2288 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2289 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x2296 = t_to_js x2295 in
                 Ojs.call (Ojs.get_prop_ascii x2296 "findIndex") "apply"
                   [|x2296;((let x2290 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2290 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2292 : Ojs.t) ->
                                          fun (x2293 : Ojs.t) ->
                                            fun (x2294 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2288
                                                   ~value:(Ojs.int_of_js
                                                             x2292)
                                                   ~index:(Ojs.int_of_js
                                                             x2293)
                                                   ~obj:(t_of_js x2294))))|]);
                             (match x2289 with
                              | Some x2291 ->
                                  ignore
                                    (Ojs.call x2290 "push"
                                       [|(any_to_js x2291)|])
                              | None -> ());
                             x2290))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x2304 : t) ->
        fun ~callbackfn:(x2297 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x2298 : any option) ->
            fun () ->
              ignore
                (let x2305 = t_to_js x2304 in
                 Ojs.call (Ojs.get_prop_ascii x2305 "forEach") "apply"
                   [|x2305;((let x2299 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2299 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2301 : Ojs.t) ->
                                          fun (x2302 : Ojs.t) ->
                                            fun (x2303 : Ojs.t) ->
                                              x2297
                                                ~value:(Ojs.int_of_js x2301)
                                                ~index:(Ojs.int_of_js x2302)
                                                ~array:(t_of_js x2303)))|]);
                             (match x2298 with
                              | Some x2300 ->
                                  ignore
                                    (Ojs.call x2299 "push"
                                       [|(any_to_js x2300)|])
                              | None -> ());
                             x2299))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2310 : t) ->
        fun ~searchElement:(x2306 : int) ->
          fun ?fromIndex:(x2307 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2311 = t_to_js x2310 in
                 Ojs.call (Ojs.get_prop_ascii x2311 "indexOf") "apply"
                   [|x2311;((let x2308 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2308 "push"
                                  [|(Ojs.int_to_js x2306)|]);
                             (match x2307 with
                              | Some x2309 ->
                                  ignore
                                    (Ojs.call x2308 "push"
                                       [|(Ojs.int_to_js x2309)|])
                              | None -> ());
                             x2308))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x2315 : t) ->
        fun ?separator:(x2312 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x2316 = t_to_js x2315 in
               Ojs.call (Ojs.get_prop_ascii x2316 "join") "apply"
                 [|x2316;((let x2313 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2312 with
                            | Some x2314 ->
                                ignore
                                  (Ojs.call x2313 "push"
                                     [|(Ojs.string_to_js x2314)|])
                            | None -> ());
                           x2313))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2321 : t) ->
        fun ~searchElement:(x2317 : int) ->
          fun ?fromIndex:(x2318 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2322 = t_to_js x2321 in
                 Ojs.call (Ojs.get_prop_ascii x2322 "lastIndexOf") "apply"
                   [|x2322;((let x2319 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2319 "push"
                                  [|(Ojs.int_to_js x2317)|]);
                             (match x2318 with
                              | Some x2320 ->
                                  ignore
                                    (Ojs.call x2319 "push"
                                       [|(Ojs.int_to_js x2320)|])
                              | None -> ());
                             x2319))|])
    let (get_length : t -> int) =
      fun (x2323 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2323) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2331 : t) ->
        fun ~callbackfn:(x2324 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x2325 : any option) ->
            fun () ->
              t_of_js
                (let x2332 = t_to_js x2331 in
                 Ojs.call (Ojs.get_prop_ascii x2332 "map") "apply"
                   [|x2332;((let x2326 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2326 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2328 : Ojs.t) ->
                                          fun (x2329 : Ojs.t) ->
                                            fun (x2330 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2324
                                                   ~value:(Ojs.int_of_js
                                                             x2328)
                                                   ~index:(Ojs.int_of_js
                                                             x2329)
                                                   ~array:(t_of_js x2330))))|]);
                             (match x2325 with
                              | Some x2327 ->
                                  ignore
                                    (Ojs.call x2326 "push"
                                       [|(any_to_js x2327)|])
                              | None -> ());
                             x2326))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2338 : t) ->
        fun
          ~callbackfn:(x2333 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2338) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x2334 : Ojs.t) ->
                       fun (x2335 : Ojs.t) ->
                         fun (x2336 : Ojs.t) ->
                           fun (x2337 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2333 ~previousValue:(Ojs.int_of_js x2334)
                                  ~currentValue:(Ojs.int_of_js x2335)
                                  ~currentIndex:(Ojs.int_of_js x2336)
                                  ~array:(t_of_js x2337))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2345 : t) ->
        fun
          ~callbackfn:(x2339 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2344 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2345) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2340 : Ojs.t) ->
                         fun (x2341 : Ojs.t) ->
                           fun (x2342 : Ojs.t) ->
                             fun (x2343 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2339 ~previousValue:(Ojs.int_of_js x2340)
                                    ~currentValue:(Ojs.int_of_js x2341)
                                    ~currentIndex:(Ojs.int_of_js x2342)
                                    ~array:(t_of_js x2343))));(Ojs.int_to_js
                                                                 x2344)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2352 : t) ->
        fun
          ~callbackfn:(x2346 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2351 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2352) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2347 : Ojs.t) ->
                         fun (x2348 : Ojs.t) ->
                           fun (x2349 : Ojs.t) ->
                             fun (x2350 : Ojs.t) ->
                               Obj.magic
                                 (x2346 ~previousValue:(Obj.magic x2347)
                                    ~currentValue:(Ojs.int_of_js x2348)
                                    ~currentIndex:(Ojs.int_of_js x2349)
                                    ~array:(t_of_js x2350))));(Obj.magic
                                                                 x2351)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2358 : t) ->
        fun
          ~callbackfn:(x2353 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2358) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x2354 : Ojs.t) ->
                       fun (x2355 : Ojs.t) ->
                         fun (x2356 : Ojs.t) ->
                           fun (x2357 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2353 ~previousValue:(Ojs.int_of_js x2354)
                                  ~currentValue:(Ojs.int_of_js x2355)
                                  ~currentIndex:(Ojs.int_of_js x2356)
                                  ~array:(t_of_js x2357))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2365 : t) ->
        fun
          ~callbackfn:(x2359 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2364 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2365) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2360 : Ojs.t) ->
                         fun (x2361 : Ojs.t) ->
                           fun (x2362 : Ojs.t) ->
                             fun (x2363 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2359 ~previousValue:(Ojs.int_of_js x2360)
                                    ~currentValue:(Ojs.int_of_js x2361)
                                    ~currentIndex:(Ojs.int_of_js x2362)
                                    ~array:(t_of_js x2363))));(Ojs.int_to_js
                                                                 x2364)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2372 : t) ->
        fun
          ~callbackfn:(x2366 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2371 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2372) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2367 : Ojs.t) ->
                         fun (x2368 : Ojs.t) ->
                           fun (x2369 : Ojs.t) ->
                             fun (x2370 : Ojs.t) ->
                               Obj.magic
                                 (x2366 ~previousValue:(Obj.magic x2367)
                                    ~currentValue:(Ojs.int_of_js x2368)
                                    ~currentIndex:(Ojs.int_of_js x2369)
                                    ~array:(t_of_js x2370))));(Obj.magic
                                                                 x2371)|])
    let (reverse : t -> t) =
      fun (x2373 : t) -> t_of_js (Ojs.call (t_to_js x2373) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x2379 : t) ->
        fun ~array:(x2374 : int Array.t) ->
          fun ?offset:(x2375 : int option) ->
            fun () ->
              ignore
                (let x2380 = t_to_js x2379 in
                 Ojs.call (Ojs.get_prop_ascii x2380 "set") "apply"
                   [|x2380;((let x2376 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2376 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x2374)|]);
                             (match x2375 with
                              | Some x2377 ->
                                  ignore
                                    (Ojs.call x2376 "push"
                                       [|(Ojs.int_to_js x2377)|])
                              | None -> ());
                             x2376))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2386 : t) ->
        fun ?start:(x2381 : int option) ->
          fun ?end_:(x2382 : int option) ->
            fun () ->
              t_of_js
                (let x2387 = t_to_js x2386 in
                 Ojs.call (Ojs.get_prop_ascii x2387 "slice") "apply"
                   [|x2387;((let x2383 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2381 with
                              | Some x2385 ->
                                  ignore
                                    (Ojs.call x2383 "push"
                                       [|(Ojs.int_to_js x2385)|])
                              | None -> ());
                             (match x2382 with
                              | Some x2384 ->
                                  ignore
                                    (Ojs.call x2383 "push"
                                       [|(Ojs.int_to_js x2384)|])
                              | None -> ());
                             x2383))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2395 : t) ->
        fun (x2388 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2389 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2396 = t_to_js x2395 in
                 Ojs.call (Ojs.get_prop_ascii x2396 "some") "apply"
                   [|x2396;((let x2390 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2390 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2392 : Ojs.t) ->
                                          fun (x2393 : Ojs.t) ->
                                            fun (x2394 : Ojs.t) ->
                                              unknown_to_js
                                                (x2388
                                                   ~value:(Ojs.int_of_js
                                                             x2392)
                                                   ~index:(Ojs.int_of_js
                                                             x2393)
                                                   ~array:(t_of_js x2394))))|]);
                             (match x2389 with
                              | Some x2391 ->
                                  ignore
                                    (Ojs.call x2390 "push"
                                       [|(any_to_js x2391)|])
                              | None -> ());
                             x2390))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x2402 : t) ->
        fun ?compareFn:(x2397 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x2403 = t_to_js x2402 in
               Ojs.call (Ojs.get_prop_ascii x2403 "sort") "apply"
                 [|x2403;((let x2398 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2397 with
                            | Some x2399 ->
                                ignore
                                  (Ojs.call x2398 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2400 : Ojs.t) ->
                                             fun (x2401 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x2399
                                                    ~a:(Ojs.int_of_js x2400)
                                                    ~b:(Ojs.int_of_js x2401))))|])
                            | None -> ());
                           x2398))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x2409 : t) ->
        fun ?begin_:(x2404 : int option) ->
          fun ?end_:(x2405 : int option) ->
            fun () ->
              t_of_js
                (let x2410 = t_to_js x2409 in
                 Ojs.call (Ojs.get_prop_ascii x2410 "subarray") "apply"
                   [|x2410;((let x2406 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2404 with
                              | Some x2408 ->
                                  ignore
                                    (Ojs.call x2406 "push"
                                       [|(Ojs.int_to_js x2408)|])
                              | None -> ());
                             (match x2405 with
                              | Some x2407 ->
                                  ignore
                                    (Ojs.call x2406 "push"
                                       [|(Ojs.int_to_js x2407)|])
                              | None -> ());
                             x2406))|])
    let (toLocaleString : t -> string) =
      fun (x2411 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2411) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x2412 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2412) "toString" [||])
    let (valueOf : t -> t) =
      fun (x2413 : t) -> t_of_js (Ojs.call (t_to_js x2413) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x2414 : t) ->
        fun (x2415 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x2414) x2415)
    let (set : t -> int -> int -> unit) =
      fun (x2416 : t) ->
        fun (x2417 : int) ->
          fun (x2418 : int) ->
            Ojs.array_set (t_to_js x2416) x2417 (Ojs.int_to_js x2418)
    let (create : length:int -> t) =
      fun ~length:(x2419 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(Ojs.int_to_js x2419)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x2420 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x2422 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x2422) x2420)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x2424 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2425 : int option) ->
          fun ?length:(x2426 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int8Array")
                   (let x2427 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2427 "push" [|(ArrayBuffer.t_to_js x2424)|]);
                    (match x2425 with
                     | Some x2429 ->
                         ignore
                           (Ojs.call x2427 "push" [|(Ojs.int_to_js x2429)|])
                     | None -> ());
                    (match x2426 with
                     | Some x2428 ->
                         ignore
                           (Ojs.call x2427 "push" [|(Ojs.int_to_js x2428)|])
                     | None -> ());
                    x2427))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int8Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x2430 : int list) ->
        t_of_js
          (let x2433 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
           Ojs.call (Ojs.get_prop_ascii x2433 "of") "apply"
             [|x2433;((let x2431 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2432 : int) ->
                            ignore
                              (Ojs.call x2431 "push"
                                 [|(Ojs.int_to_js x2432)|])) x2430;
                       x2431))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x2434 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int8Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x2434)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x2436 : 'T Array.t) ->
        fun ~mapfn:(x2437 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x2438 : any option) ->
            fun () ->
              t_of_js
                (let x2444 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
                 Ojs.call (Ojs.get_prop_ascii x2444 "from") "apply"
                   [|x2444;((let x2439 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2439 "push"
                                  [|(Array.t_to_js Obj.magic x2436)|]);
                             ignore
                               (Ojs.call x2439 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2441 : Ojs.t) ->
                                          fun (x2442 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x2437 ~v:(Obj.magic x2441)
                                                 ~k:(Ojs.int_of_js x2442))))|]);
                             (match x2438 with
                              | Some x2440 ->
                                  ignore
                                    (Ojs.call x2439 "push"
                                       [|(any_to_js x2440)|])
                              | None -> ());
                             x2439))|])
  end
module Int8ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2446 : Ojs.t) -> x2446
    and t_to_js : t -> Ojs.t = fun (x2445 : Ojs.t) -> x2445
    let (get_prototype : t -> Int8Array.t) =
      fun (x2447 : t) ->
        Int8Array.t_of_js (Ojs.get_prop_ascii (t_to_js x2447) "prototype")
    let (create : t -> length:int -> Int8Array.t) =
      fun (x2449 : t) ->
        fun ~length:(x2448 : int) ->
          Int8Array.t_of_js
            (Ojs.new_obj (t_to_js x2449) [|(Ojs.int_to_js x2448)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Int8Array.t) =
      fun (x2454 : t) ->
        fun ~array:(x2450 : (ArrayBuffer.t, int Array.t) union2) ->
          Int8Array.t_of_js
            (Ojs.new_obj (t_to_js x2454)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x2452 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x2452) x2450)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Int8Array.t)
      =
      fun (x2461 : t) ->
        fun ~buffer:(x2455 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2456 : int option) ->
            fun ?length:(x2457 : int option) ->
              fun () ->
                Int8Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2461)
                     (let x2458 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2458 "push"
                           [|(ArrayBuffer.t_to_js x2455)|]);
                      (match x2456 with
                       | Some x2460 ->
                           ignore
                             (Ojs.call x2458 "push" [|(Ojs.int_to_js x2460)|])
                       | None -> ());
                      (match x2457 with
                       | Some x2459 ->
                           ignore
                             (Ojs.call x2458 "push" [|(Ojs.int_to_js x2459)|])
                       | None -> ());
                      x2458))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x2462 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2462) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Int8Array.t) =
      fun (x2466 : t) ->
        fun (x2463 : int list) ->
          Int8Array.t_of_js
            (let x2467 = t_to_js x2466 in
             Ojs.call (Ojs.get_prop_ascii x2467 "of") "apply"
               [|x2467;((let x2464 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x2465 : int) ->
                              ignore
                                (Ojs.call x2464 "push"
                                   [|(Ojs.int_to_js x2465)|])) x2463;
                         x2464))|])
    let (from : t -> array:int Array.t -> Int8Array.t) =
      fun (x2470 : t) ->
        fun ~array:(x2468 : int Array.t) ->
          Int8Array.t_of_js
            (Ojs.call (t_to_js x2470) "from"
               [|(Array.t_to_js Ojs.int_to_js x2468)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> Int8Array.t)
      =
      fun (x2479 : t) ->
        fun ~array:(x2471 : 'T Array.t) ->
          fun ~mapfn:(x2472 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x2473 : any option) ->
              fun () ->
                Int8Array.t_of_js
                  (let x2480 = t_to_js x2479 in
                   Ojs.call (Ojs.get_prop_ascii x2480 "from") "apply"
                     [|x2480;((let x2474 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2474 "push"
                                    [|(Array.t_to_js Obj.magic x2471)|]);
                               ignore
                                 (Ojs.call x2474 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2476 : Ojs.t) ->
                                            fun (x2477 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2472 ~v:(Obj.magic x2476)
                                                   ~k:(Ojs.int_of_js x2477))))|]);
                               (match x2473 with
                                | Some x2475 ->
                                    ignore
                                      (Ojs.call x2474 "push"
                                         [|(any_to_js x2475)|])
                                | None -> ());
                               x2474))|])
  end
let (int8Array : Int8ArrayConstructor.t) =
  Int8ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Int8Array")
module Uint8Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2482 : Ojs.t) -> x2482
    and t_to_js : t -> Ojs.t = fun (x2481 : Ojs.t) -> x2481
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x2483 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2483) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2484 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2484) "buffer")
    let (get_byteLength : t -> int) =
      fun (x2485 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2485) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x2486 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2486) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x2492 : t) ->
        fun ~target:(x2487 : int) ->
          fun ~start:(x2488 : int) ->
            fun ?end_:(x2489 : int option) ->
              fun () ->
                t_of_js
                  (let x2493 = t_to_js x2492 in
                   Ojs.call (Ojs.get_prop_ascii x2493 "copyWithin") "apply"
                     [|x2493;((let x2490 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2490 "push"
                                    [|(Ojs.int_to_js x2487)|]);
                               ignore
                                 (Ojs.call x2490 "push"
                                    [|(Ojs.int_to_js x2488)|]);
                               (match x2489 with
                                | Some x2491 ->
                                    ignore
                                      (Ojs.call x2490 "push"
                                         [|(Ojs.int_to_js x2491)|])
                                | None -> ());
                               x2490))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2501 : t) ->
        fun (x2494 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2495 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2502 = t_to_js x2501 in
                 Ojs.call (Ojs.get_prop_ascii x2502 "every") "apply"
                   [|x2502;((let x2496 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2496 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2498 : Ojs.t) ->
                                          fun (x2499 : Ojs.t) ->
                                            fun (x2500 : Ojs.t) ->
                                              unknown_to_js
                                                (x2494
                                                   ~value:(Ojs.int_of_js
                                                             x2498)
                                                   ~index:(Ojs.int_of_js
                                                             x2499)
                                                   ~array:(t_of_js x2500))))|]);
                             (match x2495 with
                              | Some x2497 ->
                                  ignore
                                    (Ojs.call x2496 "push"
                                       [|(any_to_js x2497)|])
                              | None -> ());
                             x2496))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2509 : t) ->
        fun ~value:(x2503 : int) ->
          fun ?start:(x2504 : int option) ->
            fun ?end_:(x2505 : int option) ->
              fun () ->
                t_of_js
                  (let x2510 = t_to_js x2509 in
                   Ojs.call (Ojs.get_prop_ascii x2510 "fill") "apply"
                     [|x2510;((let x2506 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2506 "push"
                                    [|(Ojs.int_to_js x2503)|]);
                               (match x2504 with
                                | Some x2508 ->
                                    ignore
                                      (Ojs.call x2506 "push"
                                         [|(Ojs.int_to_js x2508)|])
                                | None -> ());
                               (match x2505 with
                                | Some x2507 ->
                                    ignore
                                      (Ojs.call x2506 "push"
                                         [|(Ojs.int_to_js x2507)|])
                                | None -> ());
                               x2506))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2518 : t) ->
        fun (x2511 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x2512 : any option) ->
            fun () ->
              t_of_js
                (let x2519 = t_to_js x2518 in
                 Ojs.call (Ojs.get_prop_ascii x2519 "filter") "apply"
                   [|x2519;((let x2513 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2513 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2515 : Ojs.t) ->
                                          fun (x2516 : Ojs.t) ->
                                            fun (x2517 : Ojs.t) ->
                                              any_to_js
                                                (x2511
                                                   ~value:(Ojs.int_of_js
                                                             x2515)
                                                   ~index:(Ojs.int_of_js
                                                             x2516)
                                                   ~array:(t_of_js x2517))))|]);
                             (match x2512 with
                              | Some x2514 ->
                                  ignore
                                    (Ojs.call x2513 "push"
                                       [|(any_to_js x2514)|])
                              | None -> ());
                             x2513))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x2527 : t) ->
        fun (x2520 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2521 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x2528 = t_to_js x2527 in
                 Ojs.call (Ojs.get_prop_ascii x2528 "find") "apply"
                   [|x2528;((let x2522 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2522 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2524 : Ojs.t) ->
                                          fun (x2525 : Ojs.t) ->
                                            fun (x2526 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2520
                                                   ~value:(Ojs.int_of_js
                                                             x2524)
                                                   ~index:(Ojs.int_of_js
                                                             x2525)
                                                   ~obj:(t_of_js x2526))))|]);
                             (match x2521 with
                              | Some x2523 ->
                                  ignore
                                    (Ojs.call x2522 "push"
                                       [|(any_to_js x2523)|])
                              | None -> ());
                             x2522))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x2537 : t) ->
        fun (x2530 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2531 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x2538 = t_to_js x2537 in
                 Ojs.call (Ojs.get_prop_ascii x2538 "findIndex") "apply"
                   [|x2538;((let x2532 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2532 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2534 : Ojs.t) ->
                                          fun (x2535 : Ojs.t) ->
                                            fun (x2536 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2530
                                                   ~value:(Ojs.int_of_js
                                                             x2534)
                                                   ~index:(Ojs.int_of_js
                                                             x2535)
                                                   ~obj:(t_of_js x2536))))|]);
                             (match x2531 with
                              | Some x2533 ->
                                  ignore
                                    (Ojs.call x2532 "push"
                                       [|(any_to_js x2533)|])
                              | None -> ());
                             x2532))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x2546 : t) ->
        fun ~callbackfn:(x2539 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x2540 : any option) ->
            fun () ->
              ignore
                (let x2547 = t_to_js x2546 in
                 Ojs.call (Ojs.get_prop_ascii x2547 "forEach") "apply"
                   [|x2547;((let x2541 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2541 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2543 : Ojs.t) ->
                                          fun (x2544 : Ojs.t) ->
                                            fun (x2545 : Ojs.t) ->
                                              x2539
                                                ~value:(Ojs.int_of_js x2543)
                                                ~index:(Ojs.int_of_js x2544)
                                                ~array:(t_of_js x2545)))|]);
                             (match x2540 with
                              | Some x2542 ->
                                  ignore
                                    (Ojs.call x2541 "push"
                                       [|(any_to_js x2542)|])
                              | None -> ());
                             x2541))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2552 : t) ->
        fun ~searchElement:(x2548 : int) ->
          fun ?fromIndex:(x2549 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2553 = t_to_js x2552 in
                 Ojs.call (Ojs.get_prop_ascii x2553 "indexOf") "apply"
                   [|x2553;((let x2550 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2550 "push"
                                  [|(Ojs.int_to_js x2548)|]);
                             (match x2549 with
                              | Some x2551 ->
                                  ignore
                                    (Ojs.call x2550 "push"
                                       [|(Ojs.int_to_js x2551)|])
                              | None -> ());
                             x2550))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x2557 : t) ->
        fun ?separator:(x2554 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x2558 = t_to_js x2557 in
               Ojs.call (Ojs.get_prop_ascii x2558 "join") "apply"
                 [|x2558;((let x2555 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2554 with
                            | Some x2556 ->
                                ignore
                                  (Ojs.call x2555 "push"
                                     [|(Ojs.string_to_js x2556)|])
                            | None -> ());
                           x2555))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2563 : t) ->
        fun ~searchElement:(x2559 : int) ->
          fun ?fromIndex:(x2560 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2564 = t_to_js x2563 in
                 Ojs.call (Ojs.get_prop_ascii x2564 "lastIndexOf") "apply"
                   [|x2564;((let x2561 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2561 "push"
                                  [|(Ojs.int_to_js x2559)|]);
                             (match x2560 with
                              | Some x2562 ->
                                  ignore
                                    (Ojs.call x2561 "push"
                                       [|(Ojs.int_to_js x2562)|])
                              | None -> ());
                             x2561))|])
    let (get_length : t -> int) =
      fun (x2565 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2565) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2573 : t) ->
        fun ~callbackfn:(x2566 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x2567 : any option) ->
            fun () ->
              t_of_js
                (let x2574 = t_to_js x2573 in
                 Ojs.call (Ojs.get_prop_ascii x2574 "map") "apply"
                   [|x2574;((let x2568 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2568 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2570 : Ojs.t) ->
                                          fun (x2571 : Ojs.t) ->
                                            fun (x2572 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2566
                                                   ~value:(Ojs.int_of_js
                                                             x2570)
                                                   ~index:(Ojs.int_of_js
                                                             x2571)
                                                   ~array:(t_of_js x2572))))|]);
                             (match x2567 with
                              | Some x2569 ->
                                  ignore
                                    (Ojs.call x2568 "push"
                                       [|(any_to_js x2569)|])
                              | None -> ());
                             x2568))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2580 : t) ->
        fun
          ~callbackfn:(x2575 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2580) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x2576 : Ojs.t) ->
                       fun (x2577 : Ojs.t) ->
                         fun (x2578 : Ojs.t) ->
                           fun (x2579 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2575 ~previousValue:(Ojs.int_of_js x2576)
                                  ~currentValue:(Ojs.int_of_js x2577)
                                  ~currentIndex:(Ojs.int_of_js x2578)
                                  ~array:(t_of_js x2579))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2587 : t) ->
        fun
          ~callbackfn:(x2581 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2586 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2587) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2582 : Ojs.t) ->
                         fun (x2583 : Ojs.t) ->
                           fun (x2584 : Ojs.t) ->
                             fun (x2585 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2581 ~previousValue:(Ojs.int_of_js x2582)
                                    ~currentValue:(Ojs.int_of_js x2583)
                                    ~currentIndex:(Ojs.int_of_js x2584)
                                    ~array:(t_of_js x2585))));(Ojs.int_to_js
                                                                 x2586)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2594 : t) ->
        fun
          ~callbackfn:(x2588 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2593 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2594) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2589 : Ojs.t) ->
                         fun (x2590 : Ojs.t) ->
                           fun (x2591 : Ojs.t) ->
                             fun (x2592 : Ojs.t) ->
                               Obj.magic
                                 (x2588 ~previousValue:(Obj.magic x2589)
                                    ~currentValue:(Ojs.int_of_js x2590)
                                    ~currentIndex:(Ojs.int_of_js x2591)
                                    ~array:(t_of_js x2592))));(Obj.magic
                                                                 x2593)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2600 : t) ->
        fun
          ~callbackfn:(x2595 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2600) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x2596 : Ojs.t) ->
                       fun (x2597 : Ojs.t) ->
                         fun (x2598 : Ojs.t) ->
                           fun (x2599 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2595 ~previousValue:(Ojs.int_of_js x2596)
                                  ~currentValue:(Ojs.int_of_js x2597)
                                  ~currentIndex:(Ojs.int_of_js x2598)
                                  ~array:(t_of_js x2599))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2607 : t) ->
        fun
          ~callbackfn:(x2601 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2606 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2607) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2602 : Ojs.t) ->
                         fun (x2603 : Ojs.t) ->
                           fun (x2604 : Ojs.t) ->
                             fun (x2605 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2601 ~previousValue:(Ojs.int_of_js x2602)
                                    ~currentValue:(Ojs.int_of_js x2603)
                                    ~currentIndex:(Ojs.int_of_js x2604)
                                    ~array:(t_of_js x2605))));(Ojs.int_to_js
                                                                 x2606)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2614 : t) ->
        fun
          ~callbackfn:(x2608 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2613 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2614) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2609 : Ojs.t) ->
                         fun (x2610 : Ojs.t) ->
                           fun (x2611 : Ojs.t) ->
                             fun (x2612 : Ojs.t) ->
                               Obj.magic
                                 (x2608 ~previousValue:(Obj.magic x2609)
                                    ~currentValue:(Ojs.int_of_js x2610)
                                    ~currentIndex:(Ojs.int_of_js x2611)
                                    ~array:(t_of_js x2612))));(Obj.magic
                                                                 x2613)|])
    let (reverse : t -> t) =
      fun (x2615 : t) -> t_of_js (Ojs.call (t_to_js x2615) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x2621 : t) ->
        fun ~array:(x2616 : int Array.t) ->
          fun ?offset:(x2617 : int option) ->
            fun () ->
              ignore
                (let x2622 = t_to_js x2621 in
                 Ojs.call (Ojs.get_prop_ascii x2622 "set") "apply"
                   [|x2622;((let x2618 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2618 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x2616)|]);
                             (match x2617 with
                              | Some x2619 ->
                                  ignore
                                    (Ojs.call x2618 "push"
                                       [|(Ojs.int_to_js x2619)|])
                              | None -> ());
                             x2618))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2628 : t) ->
        fun ?start:(x2623 : int option) ->
          fun ?end_:(x2624 : int option) ->
            fun () ->
              t_of_js
                (let x2629 = t_to_js x2628 in
                 Ojs.call (Ojs.get_prop_ascii x2629 "slice") "apply"
                   [|x2629;((let x2625 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2623 with
                              | Some x2627 ->
                                  ignore
                                    (Ojs.call x2625 "push"
                                       [|(Ojs.int_to_js x2627)|])
                              | None -> ());
                             (match x2624 with
                              | Some x2626 ->
                                  ignore
                                    (Ojs.call x2625 "push"
                                       [|(Ojs.int_to_js x2626)|])
                              | None -> ());
                             x2625))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2637 : t) ->
        fun (x2630 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2631 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2638 = t_to_js x2637 in
                 Ojs.call (Ojs.get_prop_ascii x2638 "some") "apply"
                   [|x2638;((let x2632 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2632 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2634 : Ojs.t) ->
                                          fun (x2635 : Ojs.t) ->
                                            fun (x2636 : Ojs.t) ->
                                              unknown_to_js
                                                (x2630
                                                   ~value:(Ojs.int_of_js
                                                             x2634)
                                                   ~index:(Ojs.int_of_js
                                                             x2635)
                                                   ~array:(t_of_js x2636))))|]);
                             (match x2631 with
                              | Some x2633 ->
                                  ignore
                                    (Ojs.call x2632 "push"
                                       [|(any_to_js x2633)|])
                              | None -> ());
                             x2632))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x2644 : t) ->
        fun ?compareFn:(x2639 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x2645 = t_to_js x2644 in
               Ojs.call (Ojs.get_prop_ascii x2645 "sort") "apply"
                 [|x2645;((let x2640 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2639 with
                            | Some x2641 ->
                                ignore
                                  (Ojs.call x2640 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2642 : Ojs.t) ->
                                             fun (x2643 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x2641
                                                    ~a:(Ojs.int_of_js x2642)
                                                    ~b:(Ojs.int_of_js x2643))))|])
                            | None -> ());
                           x2640))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x2651 : t) ->
        fun ?begin_:(x2646 : int option) ->
          fun ?end_:(x2647 : int option) ->
            fun () ->
              t_of_js
                (let x2652 = t_to_js x2651 in
                 Ojs.call (Ojs.get_prop_ascii x2652 "subarray") "apply"
                   [|x2652;((let x2648 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2646 with
                              | Some x2650 ->
                                  ignore
                                    (Ojs.call x2648 "push"
                                       [|(Ojs.int_to_js x2650)|])
                              | None -> ());
                             (match x2647 with
                              | Some x2649 ->
                                  ignore
                                    (Ojs.call x2648 "push"
                                       [|(Ojs.int_to_js x2649)|])
                              | None -> ());
                             x2648))|])
    let (toLocaleString : t -> string) =
      fun (x2653 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2653) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x2654 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2654) "toString" [||])
    let (valueOf : t -> t) =
      fun (x2655 : t) -> t_of_js (Ojs.call (t_to_js x2655) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x2656 : t) ->
        fun (x2657 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x2656) x2657)
    let (set : t -> int -> int -> unit) =
      fun (x2658 : t) ->
        fun (x2659 : int) ->
          fun (x2660 : int) ->
            Ojs.array_set (t_to_js x2658) x2659 (Ojs.int_to_js x2660)
    let (create : length:int -> t) =
      fun ~length:(x2661 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(Ojs.int_to_js x2661)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x2662 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x2664 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x2664) x2662)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x2666 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2667 : int option) ->
          fun ?length:(x2668 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Uint8Array")
                   (let x2669 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2669 "push" [|(ArrayBuffer.t_to_js x2666)|]);
                    (match x2667 with
                     | Some x2671 ->
                         ignore
                           (Ojs.call x2669 "push" [|(Ojs.int_to_js x2671)|])
                     | None -> ());
                    (match x2668 with
                     | Some x2670 ->
                         ignore
                           (Ojs.call x2669 "push" [|(Ojs.int_to_js x2670)|])
                     | None -> ());
                    x2669))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint8Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x2672 : int list) ->
        t_of_js
          (let x2675 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
           Ojs.call (Ojs.get_prop_ascii x2675 "of") "apply"
             [|x2675;((let x2673 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2674 : int) ->
                            ignore
                              (Ojs.call x2673 "push"
                                 [|(Ojs.int_to_js x2674)|])) x2672;
                       x2673))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x2676 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint8Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x2676)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x2678 : 'T Array.t) ->
        fun ~mapfn:(x2679 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x2680 : any option) ->
            fun () ->
              t_of_js
                (let x2686 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
                 Ojs.call (Ojs.get_prop_ascii x2686 "from") "apply"
                   [|x2686;((let x2681 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2681 "push"
                                  [|(Array.t_to_js Obj.magic x2678)|]);
                             ignore
                               (Ojs.call x2681 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2683 : Ojs.t) ->
                                          fun (x2684 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x2679 ~v:(Obj.magic x2683)
                                                 ~k:(Ojs.int_of_js x2684))))|]);
                             (match x2680 with
                              | Some x2682 ->
                                  ignore
                                    (Ojs.call x2681 "push"
                                       [|(any_to_js x2682)|])
                              | None -> ());
                             x2681))|])
  end
module Uint8ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2688 : Ojs.t) -> x2688
    and t_to_js : t -> Ojs.t = fun (x2687 : Ojs.t) -> x2687
    let (get_prototype : t -> Uint8Array.t) =
      fun (x2689 : t) ->
        Uint8Array.t_of_js (Ojs.get_prop_ascii (t_to_js x2689) "prototype")
    let (create : t -> length:int -> Uint8Array.t) =
      fun (x2691 : t) ->
        fun ~length:(x2690 : int) ->
          Uint8Array.t_of_js
            (Ojs.new_obj (t_to_js x2691) [|(Ojs.int_to_js x2690)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint8Array.t) =
      fun (x2696 : t) ->
        fun ~array:(x2692 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint8Array.t_of_js
            (Ojs.new_obj (t_to_js x2696)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x2694 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x2694) x2692)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint8Array.t)
      =
      fun (x2703 : t) ->
        fun ~buffer:(x2697 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2698 : int option) ->
            fun ?length:(x2699 : int option) ->
              fun () ->
                Uint8Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2703)
                     (let x2700 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2700 "push"
                           [|(ArrayBuffer.t_to_js x2697)|]);
                      (match x2698 with
                       | Some x2702 ->
                           ignore
                             (Ojs.call x2700 "push" [|(Ojs.int_to_js x2702)|])
                       | None -> ());
                      (match x2699 with
                       | Some x2701 ->
                           ignore
                             (Ojs.call x2700 "push" [|(Ojs.int_to_js x2701)|])
                       | None -> ());
                      x2700))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x2704 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2704) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint8Array.t) =
      fun (x2708 : t) ->
        fun (x2705 : int list) ->
          Uint8Array.t_of_js
            (let x2709 = t_to_js x2708 in
             Ojs.call (Ojs.get_prop_ascii x2709 "of") "apply"
               [|x2709;((let x2706 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x2707 : int) ->
                              ignore
                                (Ojs.call x2706 "push"
                                   [|(Ojs.int_to_js x2707)|])) x2705;
                         x2706))|])
    let (from : t -> array:int Array.t -> Uint8Array.t) =
      fun (x2712 : t) ->
        fun ~array:(x2710 : int Array.t) ->
          Uint8Array.t_of_js
            (Ojs.call (t_to_js x2712) "from"
               [|(Array.t_to_js Ojs.int_to_js x2710)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint8Array.t)
      =
      fun (x2721 : t) ->
        fun ~array:(x2713 : 'T Array.t) ->
          fun ~mapfn:(x2714 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x2715 : any option) ->
              fun () ->
                Uint8Array.t_of_js
                  (let x2722 = t_to_js x2721 in
                   Ojs.call (Ojs.get_prop_ascii x2722 "from") "apply"
                     [|x2722;((let x2716 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2716 "push"
                                    [|(Array.t_to_js Obj.magic x2713)|]);
                               ignore
                                 (Ojs.call x2716 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2718 : Ojs.t) ->
                                            fun (x2719 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2714 ~v:(Obj.magic x2718)
                                                   ~k:(Ojs.int_of_js x2719))))|]);
                               (match x2715 with
                                | Some x2717 ->
                                    ignore
                                      (Ojs.call x2716 "push"
                                         [|(any_to_js x2717)|])
                                | None -> ());
                               x2716))|])
  end
let (uint8Array : Uint8ArrayConstructor.t) =
  Uint8ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Uint8Array")
module Uint8ClampedArray =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2724 : Ojs.t) -> x2724
    and t_to_js : t -> Ojs.t = fun (x2723 : Ojs.t) -> x2723
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x2725 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2725) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2726 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2726) "buffer")
    let (get_byteLength : t -> int) =
      fun (x2727 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2727) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x2728 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2728) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x2734 : t) ->
        fun ~target:(x2729 : int) ->
          fun ~start:(x2730 : int) ->
            fun ?end_:(x2731 : int option) ->
              fun () ->
                t_of_js
                  (let x2735 = t_to_js x2734 in
                   Ojs.call (Ojs.get_prop_ascii x2735 "copyWithin") "apply"
                     [|x2735;((let x2732 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2732 "push"
                                    [|(Ojs.int_to_js x2729)|]);
                               ignore
                                 (Ojs.call x2732 "push"
                                    [|(Ojs.int_to_js x2730)|]);
                               (match x2731 with
                                | Some x2733 ->
                                    ignore
                                      (Ojs.call x2732 "push"
                                         [|(Ojs.int_to_js x2733)|])
                                | None -> ());
                               x2732))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2743 : t) ->
        fun (x2736 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2737 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2744 = t_to_js x2743 in
                 Ojs.call (Ojs.get_prop_ascii x2744 "every") "apply"
                   [|x2744;((let x2738 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2738 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2740 : Ojs.t) ->
                                          fun (x2741 : Ojs.t) ->
                                            fun (x2742 : Ojs.t) ->
                                              unknown_to_js
                                                (x2736
                                                   ~value:(Ojs.int_of_js
                                                             x2740)
                                                   ~index:(Ojs.int_of_js
                                                             x2741)
                                                   ~array:(t_of_js x2742))))|]);
                             (match x2737 with
                              | Some x2739 ->
                                  ignore
                                    (Ojs.call x2738 "push"
                                       [|(any_to_js x2739)|])
                              | None -> ());
                             x2738))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2751 : t) ->
        fun ~value:(x2745 : int) ->
          fun ?start:(x2746 : int option) ->
            fun ?end_:(x2747 : int option) ->
              fun () ->
                t_of_js
                  (let x2752 = t_to_js x2751 in
                   Ojs.call (Ojs.get_prop_ascii x2752 "fill") "apply"
                     [|x2752;((let x2748 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2748 "push"
                                    [|(Ojs.int_to_js x2745)|]);
                               (match x2746 with
                                | Some x2750 ->
                                    ignore
                                      (Ojs.call x2748 "push"
                                         [|(Ojs.int_to_js x2750)|])
                                | None -> ());
                               (match x2747 with
                                | Some x2749 ->
                                    ignore
                                      (Ojs.call x2748 "push"
                                         [|(Ojs.int_to_js x2749)|])
                                | None -> ());
                               x2748))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2760 : t) ->
        fun (x2753 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x2754 : any option) ->
            fun () ->
              t_of_js
                (let x2761 = t_to_js x2760 in
                 Ojs.call (Ojs.get_prop_ascii x2761 "filter") "apply"
                   [|x2761;((let x2755 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2755 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2757 : Ojs.t) ->
                                          fun (x2758 : Ojs.t) ->
                                            fun (x2759 : Ojs.t) ->
                                              any_to_js
                                                (x2753
                                                   ~value:(Ojs.int_of_js
                                                             x2757)
                                                   ~index:(Ojs.int_of_js
                                                             x2758)
                                                   ~array:(t_of_js x2759))))|]);
                             (match x2754 with
                              | Some x2756 ->
                                  ignore
                                    (Ojs.call x2755 "push"
                                       [|(any_to_js x2756)|])
                              | None -> ());
                             x2755))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x2769 : t) ->
        fun (x2762 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2763 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x2770 = t_to_js x2769 in
                 Ojs.call (Ojs.get_prop_ascii x2770 "find") "apply"
                   [|x2770;((let x2764 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2764 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2766 : Ojs.t) ->
                                          fun (x2767 : Ojs.t) ->
                                            fun (x2768 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2762
                                                   ~value:(Ojs.int_of_js
                                                             x2766)
                                                   ~index:(Ojs.int_of_js
                                                             x2767)
                                                   ~obj:(t_of_js x2768))))|]);
                             (match x2763 with
                              | Some x2765 ->
                                  ignore
                                    (Ojs.call x2764 "push"
                                       [|(any_to_js x2765)|])
                              | None -> ());
                             x2764))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x2779 : t) ->
        fun (x2772 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2773 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x2780 = t_to_js x2779 in
                 Ojs.call (Ojs.get_prop_ascii x2780 "findIndex") "apply"
                   [|x2780;((let x2774 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2774 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2776 : Ojs.t) ->
                                          fun (x2777 : Ojs.t) ->
                                            fun (x2778 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2772
                                                   ~value:(Ojs.int_of_js
                                                             x2776)
                                                   ~index:(Ojs.int_of_js
                                                             x2777)
                                                   ~obj:(t_of_js x2778))))|]);
                             (match x2773 with
                              | Some x2775 ->
                                  ignore
                                    (Ojs.call x2774 "push"
                                       [|(any_to_js x2775)|])
                              | None -> ());
                             x2774))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x2788 : t) ->
        fun ~callbackfn:(x2781 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x2782 : any option) ->
            fun () ->
              ignore
                (let x2789 = t_to_js x2788 in
                 Ojs.call (Ojs.get_prop_ascii x2789 "forEach") "apply"
                   [|x2789;((let x2783 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2783 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2785 : Ojs.t) ->
                                          fun (x2786 : Ojs.t) ->
                                            fun (x2787 : Ojs.t) ->
                                              x2781
                                                ~value:(Ojs.int_of_js x2785)
                                                ~index:(Ojs.int_of_js x2786)
                                                ~array:(t_of_js x2787)))|]);
                             (match x2782 with
                              | Some x2784 ->
                                  ignore
                                    (Ojs.call x2783 "push"
                                       [|(any_to_js x2784)|])
                              | None -> ());
                             x2783))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2794 : t) ->
        fun ~searchElement:(x2790 : int) ->
          fun ?fromIndex:(x2791 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2795 = t_to_js x2794 in
                 Ojs.call (Ojs.get_prop_ascii x2795 "indexOf") "apply"
                   [|x2795;((let x2792 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2792 "push"
                                  [|(Ojs.int_to_js x2790)|]);
                             (match x2791 with
                              | Some x2793 ->
                                  ignore
                                    (Ojs.call x2792 "push"
                                       [|(Ojs.int_to_js x2793)|])
                              | None -> ());
                             x2792))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x2799 : t) ->
        fun ?separator:(x2796 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x2800 = t_to_js x2799 in
               Ojs.call (Ojs.get_prop_ascii x2800 "join") "apply"
                 [|x2800;((let x2797 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2796 with
                            | Some x2798 ->
                                ignore
                                  (Ojs.call x2797 "push"
                                     [|(Ojs.string_to_js x2798)|])
                            | None -> ());
                           x2797))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2805 : t) ->
        fun ~searchElement:(x2801 : int) ->
          fun ?fromIndex:(x2802 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2806 = t_to_js x2805 in
                 Ojs.call (Ojs.get_prop_ascii x2806 "lastIndexOf") "apply"
                   [|x2806;((let x2803 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2803 "push"
                                  [|(Ojs.int_to_js x2801)|]);
                             (match x2802 with
                              | Some x2804 ->
                                  ignore
                                    (Ojs.call x2803 "push"
                                       [|(Ojs.int_to_js x2804)|])
                              | None -> ());
                             x2803))|])
    let (get_length : t -> int) =
      fun (x2807 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2807) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2815 : t) ->
        fun ~callbackfn:(x2808 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x2809 : any option) ->
            fun () ->
              t_of_js
                (let x2816 = t_to_js x2815 in
                 Ojs.call (Ojs.get_prop_ascii x2816 "map") "apply"
                   [|x2816;((let x2810 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2810 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2812 : Ojs.t) ->
                                          fun (x2813 : Ojs.t) ->
                                            fun (x2814 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2808
                                                   ~value:(Ojs.int_of_js
                                                             x2812)
                                                   ~index:(Ojs.int_of_js
                                                             x2813)
                                                   ~array:(t_of_js x2814))))|]);
                             (match x2809 with
                              | Some x2811 ->
                                  ignore
                                    (Ojs.call x2810 "push"
                                       [|(any_to_js x2811)|])
                              | None -> ());
                             x2810))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2822 : t) ->
        fun
          ~callbackfn:(x2817 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2822) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x2818 : Ojs.t) ->
                       fun (x2819 : Ojs.t) ->
                         fun (x2820 : Ojs.t) ->
                           fun (x2821 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2817 ~previousValue:(Ojs.int_of_js x2818)
                                  ~currentValue:(Ojs.int_of_js x2819)
                                  ~currentIndex:(Ojs.int_of_js x2820)
                                  ~array:(t_of_js x2821))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2829 : t) ->
        fun
          ~callbackfn:(x2823 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2828 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2829) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2824 : Ojs.t) ->
                         fun (x2825 : Ojs.t) ->
                           fun (x2826 : Ojs.t) ->
                             fun (x2827 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2823 ~previousValue:(Ojs.int_of_js x2824)
                                    ~currentValue:(Ojs.int_of_js x2825)
                                    ~currentIndex:(Ojs.int_of_js x2826)
                                    ~array:(t_of_js x2827))));(Ojs.int_to_js
                                                                 x2828)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2836 : t) ->
        fun
          ~callbackfn:(x2830 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2835 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2836) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2831 : Ojs.t) ->
                         fun (x2832 : Ojs.t) ->
                           fun (x2833 : Ojs.t) ->
                             fun (x2834 : Ojs.t) ->
                               Obj.magic
                                 (x2830 ~previousValue:(Obj.magic x2831)
                                    ~currentValue:(Ojs.int_of_js x2832)
                                    ~currentIndex:(Ojs.int_of_js x2833)
                                    ~array:(t_of_js x2834))));(Obj.magic
                                                                 x2835)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2842 : t) ->
        fun
          ~callbackfn:(x2837 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2842) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x2838 : Ojs.t) ->
                       fun (x2839 : Ojs.t) ->
                         fun (x2840 : Ojs.t) ->
                           fun (x2841 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2837 ~previousValue:(Ojs.int_of_js x2838)
                                  ~currentValue:(Ojs.int_of_js x2839)
                                  ~currentIndex:(Ojs.int_of_js x2840)
                                  ~array:(t_of_js x2841))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2849 : t) ->
        fun
          ~callbackfn:(x2843 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2848 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2849) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2844 : Ojs.t) ->
                         fun (x2845 : Ojs.t) ->
                           fun (x2846 : Ojs.t) ->
                             fun (x2847 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2843 ~previousValue:(Ojs.int_of_js x2844)
                                    ~currentValue:(Ojs.int_of_js x2845)
                                    ~currentIndex:(Ojs.int_of_js x2846)
                                    ~array:(t_of_js x2847))));(Ojs.int_to_js
                                                                 x2848)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2856 : t) ->
        fun
          ~callbackfn:(x2850 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2855 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2856) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2851 : Ojs.t) ->
                         fun (x2852 : Ojs.t) ->
                           fun (x2853 : Ojs.t) ->
                             fun (x2854 : Ojs.t) ->
                               Obj.magic
                                 (x2850 ~previousValue:(Obj.magic x2851)
                                    ~currentValue:(Ojs.int_of_js x2852)
                                    ~currentIndex:(Ojs.int_of_js x2853)
                                    ~array:(t_of_js x2854))));(Obj.magic
                                                                 x2855)|])
    let (reverse : t -> t) =
      fun (x2857 : t) -> t_of_js (Ojs.call (t_to_js x2857) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x2863 : t) ->
        fun ~array:(x2858 : int Array.t) ->
          fun ?offset:(x2859 : int option) ->
            fun () ->
              ignore
                (let x2864 = t_to_js x2863 in
                 Ojs.call (Ojs.get_prop_ascii x2864 "set") "apply"
                   [|x2864;((let x2860 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2860 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x2858)|]);
                             (match x2859 with
                              | Some x2861 ->
                                  ignore
                                    (Ojs.call x2860 "push"
                                       [|(Ojs.int_to_js x2861)|])
                              | None -> ());
                             x2860))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2870 : t) ->
        fun ?start:(x2865 : int option) ->
          fun ?end_:(x2866 : int option) ->
            fun () ->
              t_of_js
                (let x2871 = t_to_js x2870 in
                 Ojs.call (Ojs.get_prop_ascii x2871 "slice") "apply"
                   [|x2871;((let x2867 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2865 with
                              | Some x2869 ->
                                  ignore
                                    (Ojs.call x2867 "push"
                                       [|(Ojs.int_to_js x2869)|])
                              | None -> ());
                             (match x2866 with
                              | Some x2868 ->
                                  ignore
                                    (Ojs.call x2867 "push"
                                       [|(Ojs.int_to_js x2868)|])
                              | None -> ());
                             x2867))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2879 : t) ->
        fun (x2872 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2873 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2880 = t_to_js x2879 in
                 Ojs.call (Ojs.get_prop_ascii x2880 "some") "apply"
                   [|x2880;((let x2874 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2874 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2876 : Ojs.t) ->
                                          fun (x2877 : Ojs.t) ->
                                            fun (x2878 : Ojs.t) ->
                                              unknown_to_js
                                                (x2872
                                                   ~value:(Ojs.int_of_js
                                                             x2876)
                                                   ~index:(Ojs.int_of_js
                                                             x2877)
                                                   ~array:(t_of_js x2878))))|]);
                             (match x2873 with
                              | Some x2875 ->
                                  ignore
                                    (Ojs.call x2874 "push"
                                       [|(any_to_js x2875)|])
                              | None -> ());
                             x2874))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x2886 : t) ->
        fun ?compareFn:(x2881 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x2887 = t_to_js x2886 in
               Ojs.call (Ojs.get_prop_ascii x2887 "sort") "apply"
                 [|x2887;((let x2882 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2881 with
                            | Some x2883 ->
                                ignore
                                  (Ojs.call x2882 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2884 : Ojs.t) ->
                                             fun (x2885 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x2883
                                                    ~a:(Ojs.int_of_js x2884)
                                                    ~b:(Ojs.int_of_js x2885))))|])
                            | None -> ());
                           x2882))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x2893 : t) ->
        fun ?begin_:(x2888 : int option) ->
          fun ?end_:(x2889 : int option) ->
            fun () ->
              t_of_js
                (let x2894 = t_to_js x2893 in
                 Ojs.call (Ojs.get_prop_ascii x2894 "subarray") "apply"
                   [|x2894;((let x2890 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2888 with
                              | Some x2892 ->
                                  ignore
                                    (Ojs.call x2890 "push"
                                       [|(Ojs.int_to_js x2892)|])
                              | None -> ());
                             (match x2889 with
                              | Some x2891 ->
                                  ignore
                                    (Ojs.call x2890 "push"
                                       [|(Ojs.int_to_js x2891)|])
                              | None -> ());
                             x2890))|])
    let (toLocaleString : t -> string) =
      fun (x2895 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2895) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x2896 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2896) "toString" [||])
    let (valueOf : t -> t) =
      fun (x2897 : t) -> t_of_js (Ojs.call (t_to_js x2897) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x2898 : t) ->
        fun (x2899 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x2898) x2899)
    let (set : t -> int -> int -> unit) =
      fun (x2900 : t) ->
        fun (x2901 : int) ->
          fun (x2902 : int) ->
            Ojs.array_set (t_to_js x2900) x2901 (Ojs.int_to_js x2902)
    let (create : length:int -> t) =
      fun ~length:(x2903 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(Ojs.int_to_js x2903)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x2904 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x2906 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x2906) x2904)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x2908 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2909 : int option) ->
          fun ?length:(x2910 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
                   (let x2911 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2911 "push" [|(ArrayBuffer.t_to_js x2908)|]);
                    (match x2909 with
                     | Some x2913 ->
                         ignore
                           (Ojs.call x2911 "push" [|(Ojs.int_to_js x2913)|])
                     | None -> ());
                    (match x2910 with
                     | Some x2912 ->
                         ignore
                           (Ojs.call x2911 "push" [|(Ojs.int_to_js x2912)|])
                     | None -> ());
                    x2911))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x2914 : int list) ->
        t_of_js
          (let x2917 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
           Ojs.call (Ojs.get_prop_ascii x2917 "of") "apply"
             [|x2917;((let x2915 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2916 : int) ->
                            ignore
                              (Ojs.call x2915 "push"
                                 [|(Ojs.int_to_js x2916)|])) x2914;
                       x2915))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x2918 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             "from" [|(Array.t_to_js Ojs.int_to_js x2918)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x2920 : 'T Array.t) ->
        fun ~mapfn:(x2921 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x2922 : any option) ->
            fun () ->
              t_of_js
                (let x2928 =
                   Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
                 Ojs.call (Ojs.get_prop_ascii x2928 "from") "apply"
                   [|x2928;((let x2923 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2923 "push"
                                  [|(Array.t_to_js Obj.magic x2920)|]);
                             ignore
                               (Ojs.call x2923 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2925 : Ojs.t) ->
                                          fun (x2926 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x2921 ~v:(Obj.magic x2925)
                                                 ~k:(Ojs.int_of_js x2926))))|]);
                             (match x2922 with
                              | Some x2924 ->
                                  ignore
                                    (Ojs.call x2923 "push"
                                       [|(any_to_js x2924)|])
                              | None -> ());
                             x2923))|])
  end
module Uint8ClampedArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2930 : Ojs.t) -> x2930
    and t_to_js : t -> Ojs.t = fun (x2929 : Ojs.t) -> x2929
    let (get_prototype : t -> Uint8ClampedArray.t) =
      fun (x2931 : t) ->
        Uint8ClampedArray.t_of_js
          (Ojs.get_prop_ascii (t_to_js x2931) "prototype")
    let (create : t -> length:int -> Uint8ClampedArray.t) =
      fun (x2933 : t) ->
        fun ~length:(x2932 : int) ->
          Uint8ClampedArray.t_of_js
            (Ojs.new_obj (t_to_js x2933) [|(Ojs.int_to_js x2932)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint8ClampedArray.t)
      =
      fun (x2938 : t) ->
        fun ~array:(x2934 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint8ClampedArray.t_of_js
            (Ojs.new_obj (t_to_js x2938)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x2936 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x2936) x2934)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint8ClampedArray.t)
      =
      fun (x2945 : t) ->
        fun ~buffer:(x2939 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2940 : int option) ->
            fun ?length:(x2941 : int option) ->
              fun () ->
                Uint8ClampedArray.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2945)
                     (let x2942 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2942 "push"
                           [|(ArrayBuffer.t_to_js x2939)|]);
                      (match x2940 with
                       | Some x2944 ->
                           ignore
                             (Ojs.call x2942 "push" [|(Ojs.int_to_js x2944)|])
                       | None -> ());
                      (match x2941 with
                       | Some x2943 ->
                           ignore
                             (Ojs.call x2942 "push" [|(Ojs.int_to_js x2943)|])
                       | None -> ());
                      x2942))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x2946 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2946) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint8ClampedArray.t) =
      fun (x2950 : t) ->
        fun (x2947 : int list) ->
          Uint8ClampedArray.t_of_js
            (let x2951 = t_to_js x2950 in
             Ojs.call (Ojs.get_prop_ascii x2951 "of") "apply"
               [|x2951;((let x2948 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x2949 : int) ->
                              ignore
                                (Ojs.call x2948 "push"
                                   [|(Ojs.int_to_js x2949)|])) x2947;
                         x2948))|])
    let (from : t -> array:int Array.t -> Uint8ClampedArray.t) =
      fun (x2954 : t) ->
        fun ~array:(x2952 : int Array.t) ->
          Uint8ClampedArray.t_of_js
            (Ojs.call (t_to_js x2954) "from"
               [|(Array.t_to_js Ojs.int_to_js x2952)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint8ClampedArray.t)
      =
      fun (x2963 : t) ->
        fun ~array:(x2955 : 'T Array.t) ->
          fun ~mapfn:(x2956 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x2957 : any option) ->
              fun () ->
                Uint8ClampedArray.t_of_js
                  (let x2964 = t_to_js x2963 in
                   Ojs.call (Ojs.get_prop_ascii x2964 "from") "apply"
                     [|x2964;((let x2958 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2958 "push"
                                    [|(Array.t_to_js Obj.magic x2955)|]);
                               ignore
                                 (Ojs.call x2958 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2960 : Ojs.t) ->
                                            fun (x2961 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2956 ~v:(Obj.magic x2960)
                                                   ~k:(Ojs.int_of_js x2961))))|]);
                               (match x2957 with
                                | Some x2959 ->
                                    ignore
                                      (Ojs.call x2958 "push"
                                         [|(any_to_js x2959)|])
                                | None -> ());
                               x2958))|])
  end
let (uint8ClampedArray : Uint8ClampedArrayConstructor.t) =
  Uint8ClampedArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
module Int16Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2966 : Ojs.t) -> x2966
    and t_to_js : t -> Ojs.t = fun (x2965 : Ojs.t) -> x2965
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x2967 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2967) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2968 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2968) "buffer")
    let (get_byteLength : t -> int) =
      fun (x2969 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2969) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x2970 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2970) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x2976 : t) ->
        fun ~target:(x2971 : int) ->
          fun ~start:(x2972 : int) ->
            fun ?end_:(x2973 : int option) ->
              fun () ->
                t_of_js
                  (let x2977 = t_to_js x2976 in
                   Ojs.call (Ojs.get_prop_ascii x2977 "copyWithin") "apply"
                     [|x2977;((let x2974 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2974 "push"
                                    [|(Ojs.int_to_js x2971)|]);
                               ignore
                                 (Ojs.call x2974 "push"
                                    [|(Ojs.int_to_js x2972)|]);
                               (match x2973 with
                                | Some x2975 ->
                                    ignore
                                      (Ojs.call x2974 "push"
                                         [|(Ojs.int_to_js x2975)|])
                                | None -> ());
                               x2974))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2985 : t) ->
        fun (x2978 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2979 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2986 = t_to_js x2985 in
                 Ojs.call (Ojs.get_prop_ascii x2986 "every") "apply"
                   [|x2986;((let x2980 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2980 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2982 : Ojs.t) ->
                                          fun (x2983 : Ojs.t) ->
                                            fun (x2984 : Ojs.t) ->
                                              unknown_to_js
                                                (x2978
                                                   ~value:(Ojs.int_of_js
                                                             x2982)
                                                   ~index:(Ojs.int_of_js
                                                             x2983)
                                                   ~array:(t_of_js x2984))))|]);
                             (match x2979 with
                              | Some x2981 ->
                                  ignore
                                    (Ojs.call x2980 "push"
                                       [|(any_to_js x2981)|])
                              | None -> ());
                             x2980))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2993 : t) ->
        fun ~value:(x2987 : int) ->
          fun ?start:(x2988 : int option) ->
            fun ?end_:(x2989 : int option) ->
              fun () ->
                t_of_js
                  (let x2994 = t_to_js x2993 in
                   Ojs.call (Ojs.get_prop_ascii x2994 "fill") "apply"
                     [|x2994;((let x2990 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2990 "push"
                                    [|(Ojs.int_to_js x2987)|]);
                               (match x2988 with
                                | Some x2992 ->
                                    ignore
                                      (Ojs.call x2990 "push"
                                         [|(Ojs.int_to_js x2992)|])
                                | None -> ());
                               (match x2989 with
                                | Some x2991 ->
                                    ignore
                                      (Ojs.call x2990 "push"
                                         [|(Ojs.int_to_js x2991)|])
                                | None -> ());
                               x2990))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3002 : t) ->
        fun (x2995 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x2996 : any option) ->
            fun () ->
              t_of_js
                (let x3003 = t_to_js x3002 in
                 Ojs.call (Ojs.get_prop_ascii x3003 "filter") "apply"
                   [|x3003;((let x2997 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2997 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2999 : Ojs.t) ->
                                          fun (x3000 : Ojs.t) ->
                                            fun (x3001 : Ojs.t) ->
                                              any_to_js
                                                (x2995
                                                   ~value:(Ojs.int_of_js
                                                             x2999)
                                                   ~index:(Ojs.int_of_js
                                                             x3000)
                                                   ~array:(t_of_js x3001))))|]);
                             (match x2996 with
                              | Some x2998 ->
                                  ignore
                                    (Ojs.call x2997 "push"
                                       [|(any_to_js x2998)|])
                              | None -> ());
                             x2997))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3011 : t) ->
        fun (x3004 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3005 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3012 = t_to_js x3011 in
                 Ojs.call (Ojs.get_prop_ascii x3012 "find") "apply"
                   [|x3012;((let x3006 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3006 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3008 : Ojs.t) ->
                                          fun (x3009 : Ojs.t) ->
                                            fun (x3010 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3004
                                                   ~value:(Ojs.int_of_js
                                                             x3008)
                                                   ~index:(Ojs.int_of_js
                                                             x3009)
                                                   ~obj:(t_of_js x3010))))|]);
                             (match x3005 with
                              | Some x3007 ->
                                  ignore
                                    (Ojs.call x3006 "push"
                                       [|(any_to_js x3007)|])
                              | None -> ());
                             x3006))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3021 : t) ->
        fun (x3014 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3015 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3022 = t_to_js x3021 in
                 Ojs.call (Ojs.get_prop_ascii x3022 "findIndex") "apply"
                   [|x3022;((let x3016 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3016 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3018 : Ojs.t) ->
                                          fun (x3019 : Ojs.t) ->
                                            fun (x3020 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3014
                                                   ~value:(Ojs.int_of_js
                                                             x3018)
                                                   ~index:(Ojs.int_of_js
                                                             x3019)
                                                   ~obj:(t_of_js x3020))))|]);
                             (match x3015 with
                              | Some x3017 ->
                                  ignore
                                    (Ojs.call x3016 "push"
                                       [|(any_to_js x3017)|])
                              | None -> ());
                             x3016))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3030 : t) ->
        fun ~callbackfn:(x3023 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3024 : any option) ->
            fun () ->
              ignore
                (let x3031 = t_to_js x3030 in
                 Ojs.call (Ojs.get_prop_ascii x3031 "forEach") "apply"
                   [|x3031;((let x3025 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3025 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3027 : Ojs.t) ->
                                          fun (x3028 : Ojs.t) ->
                                            fun (x3029 : Ojs.t) ->
                                              x3023
                                                ~value:(Ojs.int_of_js x3027)
                                                ~index:(Ojs.int_of_js x3028)
                                                ~array:(t_of_js x3029)))|]);
                             (match x3024 with
                              | Some x3026 ->
                                  ignore
                                    (Ojs.call x3025 "push"
                                       [|(any_to_js x3026)|])
                              | None -> ());
                             x3025))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3036 : t) ->
        fun ~searchElement:(x3032 : int) ->
          fun ?fromIndex:(x3033 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3037 = t_to_js x3036 in
                 Ojs.call (Ojs.get_prop_ascii x3037 "indexOf") "apply"
                   [|x3037;((let x3034 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3034 "push"
                                  [|(Ojs.int_to_js x3032)|]);
                             (match x3033 with
                              | Some x3035 ->
                                  ignore
                                    (Ojs.call x3034 "push"
                                       [|(Ojs.int_to_js x3035)|])
                              | None -> ());
                             x3034))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3041 : t) ->
        fun ?separator:(x3038 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3042 = t_to_js x3041 in
               Ojs.call (Ojs.get_prop_ascii x3042 "join") "apply"
                 [|x3042;((let x3039 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3038 with
                            | Some x3040 ->
                                ignore
                                  (Ojs.call x3039 "push"
                                     [|(Ojs.string_to_js x3040)|])
                            | None -> ());
                           x3039))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3047 : t) ->
        fun ~searchElement:(x3043 : int) ->
          fun ?fromIndex:(x3044 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3048 = t_to_js x3047 in
                 Ojs.call (Ojs.get_prop_ascii x3048 "lastIndexOf") "apply"
                   [|x3048;((let x3045 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3045 "push"
                                  [|(Ojs.int_to_js x3043)|]);
                             (match x3044 with
                              | Some x3046 ->
                                  ignore
                                    (Ojs.call x3045 "push"
                                       [|(Ojs.int_to_js x3046)|])
                              | None -> ());
                             x3045))|])
    let (get_length : t -> int) =
      fun (x3049 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3049) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3057 : t) ->
        fun ~callbackfn:(x3050 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3051 : any option) ->
            fun () ->
              t_of_js
                (let x3058 = t_to_js x3057 in
                 Ojs.call (Ojs.get_prop_ascii x3058 "map") "apply"
                   [|x3058;((let x3052 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3052 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3054 : Ojs.t) ->
                                          fun (x3055 : Ojs.t) ->
                                            fun (x3056 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3050
                                                   ~value:(Ojs.int_of_js
                                                             x3054)
                                                   ~index:(Ojs.int_of_js
                                                             x3055)
                                                   ~array:(t_of_js x3056))))|]);
                             (match x3051 with
                              | Some x3053 ->
                                  ignore
                                    (Ojs.call x3052 "push"
                                       [|(any_to_js x3053)|])
                              | None -> ());
                             x3052))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3064 : t) ->
        fun
          ~callbackfn:(x3059 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3064) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3060 : Ojs.t) ->
                       fun (x3061 : Ojs.t) ->
                         fun (x3062 : Ojs.t) ->
                           fun (x3063 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3059 ~previousValue:(Ojs.int_of_js x3060)
                                  ~currentValue:(Ojs.int_of_js x3061)
                                  ~currentIndex:(Ojs.int_of_js x3062)
                                  ~array:(t_of_js x3063))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3071 : t) ->
        fun
          ~callbackfn:(x3065 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3070 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3071) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3066 : Ojs.t) ->
                         fun (x3067 : Ojs.t) ->
                           fun (x3068 : Ojs.t) ->
                             fun (x3069 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3065 ~previousValue:(Ojs.int_of_js x3066)
                                    ~currentValue:(Ojs.int_of_js x3067)
                                    ~currentIndex:(Ojs.int_of_js x3068)
                                    ~array:(t_of_js x3069))));(Ojs.int_to_js
                                                                 x3070)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3078 : t) ->
        fun
          ~callbackfn:(x3072 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3077 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3078) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3073 : Ojs.t) ->
                         fun (x3074 : Ojs.t) ->
                           fun (x3075 : Ojs.t) ->
                             fun (x3076 : Ojs.t) ->
                               Obj.magic
                                 (x3072 ~previousValue:(Obj.magic x3073)
                                    ~currentValue:(Ojs.int_of_js x3074)
                                    ~currentIndex:(Ojs.int_of_js x3075)
                                    ~array:(t_of_js x3076))));(Obj.magic
                                                                 x3077)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3084 : t) ->
        fun
          ~callbackfn:(x3079 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3084) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3080 : Ojs.t) ->
                       fun (x3081 : Ojs.t) ->
                         fun (x3082 : Ojs.t) ->
                           fun (x3083 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3079 ~previousValue:(Ojs.int_of_js x3080)
                                  ~currentValue:(Ojs.int_of_js x3081)
                                  ~currentIndex:(Ojs.int_of_js x3082)
                                  ~array:(t_of_js x3083))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3091 : t) ->
        fun
          ~callbackfn:(x3085 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3090 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3091) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3086 : Ojs.t) ->
                         fun (x3087 : Ojs.t) ->
                           fun (x3088 : Ojs.t) ->
                             fun (x3089 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3085 ~previousValue:(Ojs.int_of_js x3086)
                                    ~currentValue:(Ojs.int_of_js x3087)
                                    ~currentIndex:(Ojs.int_of_js x3088)
                                    ~array:(t_of_js x3089))));(Ojs.int_to_js
                                                                 x3090)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3098 : t) ->
        fun
          ~callbackfn:(x3092 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3097 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3098) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3093 : Ojs.t) ->
                         fun (x3094 : Ojs.t) ->
                           fun (x3095 : Ojs.t) ->
                             fun (x3096 : Ojs.t) ->
                               Obj.magic
                                 (x3092 ~previousValue:(Obj.magic x3093)
                                    ~currentValue:(Ojs.int_of_js x3094)
                                    ~currentIndex:(Ojs.int_of_js x3095)
                                    ~array:(t_of_js x3096))));(Obj.magic
                                                                 x3097)|])
    let (reverse : t -> t) =
      fun (x3099 : t) -> t_of_js (Ojs.call (t_to_js x3099) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3105 : t) ->
        fun ~array:(x3100 : int Array.t) ->
          fun ?offset:(x3101 : int option) ->
            fun () ->
              ignore
                (let x3106 = t_to_js x3105 in
                 Ojs.call (Ojs.get_prop_ascii x3106 "set") "apply"
                   [|x3106;((let x3102 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3102 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3100)|]);
                             (match x3101 with
                              | Some x3103 ->
                                  ignore
                                    (Ojs.call x3102 "push"
                                       [|(Ojs.int_to_js x3103)|])
                              | None -> ());
                             x3102))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3112 : t) ->
        fun ?start:(x3107 : int option) ->
          fun ?end_:(x3108 : int option) ->
            fun () ->
              t_of_js
                (let x3113 = t_to_js x3112 in
                 Ojs.call (Ojs.get_prop_ascii x3113 "slice") "apply"
                   [|x3113;((let x3109 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3107 with
                              | Some x3111 ->
                                  ignore
                                    (Ojs.call x3109 "push"
                                       [|(Ojs.int_to_js x3111)|])
                              | None -> ());
                             (match x3108 with
                              | Some x3110 ->
                                  ignore
                                    (Ojs.call x3109 "push"
                                       [|(Ojs.int_to_js x3110)|])
                              | None -> ());
                             x3109))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3121 : t) ->
        fun (x3114 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3115 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3122 = t_to_js x3121 in
                 Ojs.call (Ojs.get_prop_ascii x3122 "some") "apply"
                   [|x3122;((let x3116 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3116 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3118 : Ojs.t) ->
                                          fun (x3119 : Ojs.t) ->
                                            fun (x3120 : Ojs.t) ->
                                              unknown_to_js
                                                (x3114
                                                   ~value:(Ojs.int_of_js
                                                             x3118)
                                                   ~index:(Ojs.int_of_js
                                                             x3119)
                                                   ~array:(t_of_js x3120))))|]);
                             (match x3115 with
                              | Some x3117 ->
                                  ignore
                                    (Ojs.call x3116 "push"
                                       [|(any_to_js x3117)|])
                              | None -> ());
                             x3116))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3128 : t) ->
        fun ?compareFn:(x3123 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3129 = t_to_js x3128 in
               Ojs.call (Ojs.get_prop_ascii x3129 "sort") "apply"
                 [|x3129;((let x3124 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3123 with
                            | Some x3125 ->
                                ignore
                                  (Ojs.call x3124 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3126 : Ojs.t) ->
                                             fun (x3127 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3125
                                                    ~a:(Ojs.int_of_js x3126)
                                                    ~b:(Ojs.int_of_js x3127))))|])
                            | None -> ());
                           x3124))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3135 : t) ->
        fun ?begin_:(x3130 : int option) ->
          fun ?end_:(x3131 : int option) ->
            fun () ->
              t_of_js
                (let x3136 = t_to_js x3135 in
                 Ojs.call (Ojs.get_prop_ascii x3136 "subarray") "apply"
                   [|x3136;((let x3132 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3130 with
                              | Some x3134 ->
                                  ignore
                                    (Ojs.call x3132 "push"
                                       [|(Ojs.int_to_js x3134)|])
                              | None -> ());
                             (match x3131 with
                              | Some x3133 ->
                                  ignore
                                    (Ojs.call x3132 "push"
                                       [|(Ojs.int_to_js x3133)|])
                              | None -> ());
                             x3132))|])
    let (toLocaleString : t -> string) =
      fun (x3137 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3137) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x3138 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3138) "toString" [||])
    let (valueOf : t -> t) =
      fun (x3139 : t) -> t_of_js (Ojs.call (t_to_js x3139) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3140 : t) ->
        fun (x3141 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3140) x3141)
    let (set : t -> int -> int -> unit) =
      fun (x3142 : t) ->
        fun (x3143 : int) ->
          fun (x3144 : int) ->
            Ojs.array_set (t_to_js x3142) x3143 (Ojs.int_to_js x3144)
    let (create : length:int -> t) =
      fun ~length:(x3145 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(Ojs.int_to_js x3145)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3146 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3148 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3148) x3146)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3150 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3151 : int option) ->
          fun ?length:(x3152 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int16Array")
                   (let x3153 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3153 "push" [|(ArrayBuffer.t_to_js x3150)|]);
                    (match x3151 with
                     | Some x3155 ->
                         ignore
                           (Ojs.call x3153 "push" [|(Ojs.int_to_js x3155)|])
                     | None -> ());
                    (match x3152 with
                     | Some x3154 ->
                         ignore
                           (Ojs.call x3153 "push" [|(Ojs.int_to_js x3154)|])
                     | None -> ());
                    x3153))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int16Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3156 : int list) ->
        t_of_js
          (let x3159 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
           Ojs.call (Ojs.get_prop_ascii x3159 "of") "apply"
             [|x3159;((let x3157 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3158 : int) ->
                            ignore
                              (Ojs.call x3157 "push"
                                 [|(Ojs.int_to_js x3158)|])) x3156;
                       x3157))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3160 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int16Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3160)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3162 : 'T Array.t) ->
        fun ~mapfn:(x3163 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3164 : any option) ->
            fun () ->
              t_of_js
                (let x3170 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
                 Ojs.call (Ojs.get_prop_ascii x3170 "from") "apply"
                   [|x3170;((let x3165 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3165 "push"
                                  [|(Array.t_to_js Obj.magic x3162)|]);
                             ignore
                               (Ojs.call x3165 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3167 : Ojs.t) ->
                                          fun (x3168 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3163 ~v:(Obj.magic x3167)
                                                 ~k:(Ojs.int_of_js x3168))))|]);
                             (match x3164 with
                              | Some x3166 ->
                                  ignore
                                    (Ojs.call x3165 "push"
                                       [|(any_to_js x3166)|])
                              | None -> ());
                             x3165))|])
  end
module Int16ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3172 : Ojs.t) -> x3172
    and t_to_js : t -> Ojs.t = fun (x3171 : Ojs.t) -> x3171
    let (get_prototype : t -> Int16Array.t) =
      fun (x3173 : t) ->
        Int16Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3173) "prototype")
    let (create : t -> length:int -> Int16Array.t) =
      fun (x3175 : t) ->
        fun ~length:(x3174 : int) ->
          Int16Array.t_of_js
            (Ojs.new_obj (t_to_js x3175) [|(Ojs.int_to_js x3174)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Int16Array.t) =
      fun (x3180 : t) ->
        fun ~array:(x3176 : (ArrayBuffer.t, int Array.t) union2) ->
          Int16Array.t_of_js
            (Ojs.new_obj (t_to_js x3180)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3178 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3178) x3176)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Int16Array.t)
      =
      fun (x3187 : t) ->
        fun ~buffer:(x3181 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3182 : int option) ->
            fun ?length:(x3183 : int option) ->
              fun () ->
                Int16Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3187)
                     (let x3184 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3184 "push"
                           [|(ArrayBuffer.t_to_js x3181)|]);
                      (match x3182 with
                       | Some x3186 ->
                           ignore
                             (Ojs.call x3184 "push" [|(Ojs.int_to_js x3186)|])
                       | None -> ());
                      (match x3183 with
                       | Some x3185 ->
                           ignore
                             (Ojs.call x3184 "push" [|(Ojs.int_to_js x3185)|])
                       | None -> ());
                      x3184))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3188 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3188) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Int16Array.t) =
      fun (x3192 : t) ->
        fun (x3189 : int list) ->
          Int16Array.t_of_js
            (let x3193 = t_to_js x3192 in
             Ojs.call (Ojs.get_prop_ascii x3193 "of") "apply"
               [|x3193;((let x3190 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3191 : int) ->
                              ignore
                                (Ojs.call x3190 "push"
                                   [|(Ojs.int_to_js x3191)|])) x3189;
                         x3190))|])
    let (from : t -> array:int Array.t -> Int16Array.t) =
      fun (x3196 : t) ->
        fun ~array:(x3194 : int Array.t) ->
          Int16Array.t_of_js
            (Ojs.call (t_to_js x3196) "from"
               [|(Array.t_to_js Ojs.int_to_js x3194)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Int16Array.t)
      =
      fun (x3205 : t) ->
        fun ~array:(x3197 : 'T Array.t) ->
          fun ~mapfn:(x3198 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3199 : any option) ->
              fun () ->
                Int16Array.t_of_js
                  (let x3206 = t_to_js x3205 in
                   Ojs.call (Ojs.get_prop_ascii x3206 "from") "apply"
                     [|x3206;((let x3200 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3200 "push"
                                    [|(Array.t_to_js Obj.magic x3197)|]);
                               ignore
                                 (Ojs.call x3200 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3202 : Ojs.t) ->
                                            fun (x3203 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3198 ~v:(Obj.magic x3202)
                                                   ~k:(Ojs.int_of_js x3203))))|]);
                               (match x3199 with
                                | Some x3201 ->
                                    ignore
                                      (Ojs.call x3200 "push"
                                         [|(any_to_js x3201)|])
                                | None -> ());
                               x3200))|])
  end
let (int16Array : Int16ArrayConstructor.t) =
  Int16ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Int16Array")
module Uint16Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3208 : Ojs.t) -> x3208
    and t_to_js : t -> Ojs.t = fun (x3207 : Ojs.t) -> x3207
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3209 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3209) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3210 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3210) "buffer")
    let (get_byteLength : t -> int) =
      fun (x3211 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3211) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x3212 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3212) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x3218 : t) ->
        fun ~target:(x3213 : int) ->
          fun ~start:(x3214 : int) ->
            fun ?end_:(x3215 : int option) ->
              fun () ->
                t_of_js
                  (let x3219 = t_to_js x3218 in
                   Ojs.call (Ojs.get_prop_ascii x3219 "copyWithin") "apply"
                     [|x3219;((let x3216 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3216 "push"
                                    [|(Ojs.int_to_js x3213)|]);
                               ignore
                                 (Ojs.call x3216 "push"
                                    [|(Ojs.int_to_js x3214)|]);
                               (match x3215 with
                                | Some x3217 ->
                                    ignore
                                      (Ojs.call x3216 "push"
                                         [|(Ojs.int_to_js x3217)|])
                                | None -> ());
                               x3216))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3227 : t) ->
        fun (x3220 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3221 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3228 = t_to_js x3227 in
                 Ojs.call (Ojs.get_prop_ascii x3228 "every") "apply"
                   [|x3228;((let x3222 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3222 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3224 : Ojs.t) ->
                                          fun (x3225 : Ojs.t) ->
                                            fun (x3226 : Ojs.t) ->
                                              unknown_to_js
                                                (x3220
                                                   ~value:(Ojs.int_of_js
                                                             x3224)
                                                   ~index:(Ojs.int_of_js
                                                             x3225)
                                                   ~array:(t_of_js x3226))))|]);
                             (match x3221 with
                              | Some x3223 ->
                                  ignore
                                    (Ojs.call x3222 "push"
                                       [|(any_to_js x3223)|])
                              | None -> ());
                             x3222))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3235 : t) ->
        fun ~value:(x3229 : int) ->
          fun ?start:(x3230 : int option) ->
            fun ?end_:(x3231 : int option) ->
              fun () ->
                t_of_js
                  (let x3236 = t_to_js x3235 in
                   Ojs.call (Ojs.get_prop_ascii x3236 "fill") "apply"
                     [|x3236;((let x3232 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3232 "push"
                                    [|(Ojs.int_to_js x3229)|]);
                               (match x3230 with
                                | Some x3234 ->
                                    ignore
                                      (Ojs.call x3232 "push"
                                         [|(Ojs.int_to_js x3234)|])
                                | None -> ());
                               (match x3231 with
                                | Some x3233 ->
                                    ignore
                                      (Ojs.call x3232 "push"
                                         [|(Ojs.int_to_js x3233)|])
                                | None -> ());
                               x3232))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3244 : t) ->
        fun (x3237 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3238 : any option) ->
            fun () ->
              t_of_js
                (let x3245 = t_to_js x3244 in
                 Ojs.call (Ojs.get_prop_ascii x3245 "filter") "apply"
                   [|x3245;((let x3239 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3239 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3241 : Ojs.t) ->
                                          fun (x3242 : Ojs.t) ->
                                            fun (x3243 : Ojs.t) ->
                                              any_to_js
                                                (x3237
                                                   ~value:(Ojs.int_of_js
                                                             x3241)
                                                   ~index:(Ojs.int_of_js
                                                             x3242)
                                                   ~array:(t_of_js x3243))))|]);
                             (match x3238 with
                              | Some x3240 ->
                                  ignore
                                    (Ojs.call x3239 "push"
                                       [|(any_to_js x3240)|])
                              | None -> ());
                             x3239))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3253 : t) ->
        fun (x3246 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3247 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3254 = t_to_js x3253 in
                 Ojs.call (Ojs.get_prop_ascii x3254 "find") "apply"
                   [|x3254;((let x3248 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3248 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3250 : Ojs.t) ->
                                          fun (x3251 : Ojs.t) ->
                                            fun (x3252 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3246
                                                   ~value:(Ojs.int_of_js
                                                             x3250)
                                                   ~index:(Ojs.int_of_js
                                                             x3251)
                                                   ~obj:(t_of_js x3252))))|]);
                             (match x3247 with
                              | Some x3249 ->
                                  ignore
                                    (Ojs.call x3248 "push"
                                       [|(any_to_js x3249)|])
                              | None -> ());
                             x3248))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3263 : t) ->
        fun (x3256 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3257 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3264 = t_to_js x3263 in
                 Ojs.call (Ojs.get_prop_ascii x3264 "findIndex") "apply"
                   [|x3264;((let x3258 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3258 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3260 : Ojs.t) ->
                                          fun (x3261 : Ojs.t) ->
                                            fun (x3262 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3256
                                                   ~value:(Ojs.int_of_js
                                                             x3260)
                                                   ~index:(Ojs.int_of_js
                                                             x3261)
                                                   ~obj:(t_of_js x3262))))|]);
                             (match x3257 with
                              | Some x3259 ->
                                  ignore
                                    (Ojs.call x3258 "push"
                                       [|(any_to_js x3259)|])
                              | None -> ());
                             x3258))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3272 : t) ->
        fun ~callbackfn:(x3265 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3266 : any option) ->
            fun () ->
              ignore
                (let x3273 = t_to_js x3272 in
                 Ojs.call (Ojs.get_prop_ascii x3273 "forEach") "apply"
                   [|x3273;((let x3267 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3267 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3269 : Ojs.t) ->
                                          fun (x3270 : Ojs.t) ->
                                            fun (x3271 : Ojs.t) ->
                                              x3265
                                                ~value:(Ojs.int_of_js x3269)
                                                ~index:(Ojs.int_of_js x3270)
                                                ~array:(t_of_js x3271)))|]);
                             (match x3266 with
                              | Some x3268 ->
                                  ignore
                                    (Ojs.call x3267 "push"
                                       [|(any_to_js x3268)|])
                              | None -> ());
                             x3267))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3278 : t) ->
        fun ~searchElement:(x3274 : int) ->
          fun ?fromIndex:(x3275 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3279 = t_to_js x3278 in
                 Ojs.call (Ojs.get_prop_ascii x3279 "indexOf") "apply"
                   [|x3279;((let x3276 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3276 "push"
                                  [|(Ojs.int_to_js x3274)|]);
                             (match x3275 with
                              | Some x3277 ->
                                  ignore
                                    (Ojs.call x3276 "push"
                                       [|(Ojs.int_to_js x3277)|])
                              | None -> ());
                             x3276))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3283 : t) ->
        fun ?separator:(x3280 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3284 = t_to_js x3283 in
               Ojs.call (Ojs.get_prop_ascii x3284 "join") "apply"
                 [|x3284;((let x3281 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3280 with
                            | Some x3282 ->
                                ignore
                                  (Ojs.call x3281 "push"
                                     [|(Ojs.string_to_js x3282)|])
                            | None -> ());
                           x3281))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3289 : t) ->
        fun ~searchElement:(x3285 : int) ->
          fun ?fromIndex:(x3286 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3290 = t_to_js x3289 in
                 Ojs.call (Ojs.get_prop_ascii x3290 "lastIndexOf") "apply"
                   [|x3290;((let x3287 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3287 "push"
                                  [|(Ojs.int_to_js x3285)|]);
                             (match x3286 with
                              | Some x3288 ->
                                  ignore
                                    (Ojs.call x3287 "push"
                                       [|(Ojs.int_to_js x3288)|])
                              | None -> ());
                             x3287))|])
    let (get_length : t -> int) =
      fun (x3291 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3291) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3299 : t) ->
        fun ~callbackfn:(x3292 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3293 : any option) ->
            fun () ->
              t_of_js
                (let x3300 = t_to_js x3299 in
                 Ojs.call (Ojs.get_prop_ascii x3300 "map") "apply"
                   [|x3300;((let x3294 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3294 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3296 : Ojs.t) ->
                                          fun (x3297 : Ojs.t) ->
                                            fun (x3298 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3292
                                                   ~value:(Ojs.int_of_js
                                                             x3296)
                                                   ~index:(Ojs.int_of_js
                                                             x3297)
                                                   ~array:(t_of_js x3298))))|]);
                             (match x3293 with
                              | Some x3295 ->
                                  ignore
                                    (Ojs.call x3294 "push"
                                       [|(any_to_js x3295)|])
                              | None -> ());
                             x3294))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3306 : t) ->
        fun
          ~callbackfn:(x3301 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3306) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3302 : Ojs.t) ->
                       fun (x3303 : Ojs.t) ->
                         fun (x3304 : Ojs.t) ->
                           fun (x3305 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3301 ~previousValue:(Ojs.int_of_js x3302)
                                  ~currentValue:(Ojs.int_of_js x3303)
                                  ~currentIndex:(Ojs.int_of_js x3304)
                                  ~array:(t_of_js x3305))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3313 : t) ->
        fun
          ~callbackfn:(x3307 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3312 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3313) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3308 : Ojs.t) ->
                         fun (x3309 : Ojs.t) ->
                           fun (x3310 : Ojs.t) ->
                             fun (x3311 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3307 ~previousValue:(Ojs.int_of_js x3308)
                                    ~currentValue:(Ojs.int_of_js x3309)
                                    ~currentIndex:(Ojs.int_of_js x3310)
                                    ~array:(t_of_js x3311))));(Ojs.int_to_js
                                                                 x3312)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3320 : t) ->
        fun
          ~callbackfn:(x3314 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3319 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3320) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3315 : Ojs.t) ->
                         fun (x3316 : Ojs.t) ->
                           fun (x3317 : Ojs.t) ->
                             fun (x3318 : Ojs.t) ->
                               Obj.magic
                                 (x3314 ~previousValue:(Obj.magic x3315)
                                    ~currentValue:(Ojs.int_of_js x3316)
                                    ~currentIndex:(Ojs.int_of_js x3317)
                                    ~array:(t_of_js x3318))));(Obj.magic
                                                                 x3319)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3326 : t) ->
        fun
          ~callbackfn:(x3321 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3326) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3322 : Ojs.t) ->
                       fun (x3323 : Ojs.t) ->
                         fun (x3324 : Ojs.t) ->
                           fun (x3325 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3321 ~previousValue:(Ojs.int_of_js x3322)
                                  ~currentValue:(Ojs.int_of_js x3323)
                                  ~currentIndex:(Ojs.int_of_js x3324)
                                  ~array:(t_of_js x3325))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3333 : t) ->
        fun
          ~callbackfn:(x3327 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3332 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3333) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3328 : Ojs.t) ->
                         fun (x3329 : Ojs.t) ->
                           fun (x3330 : Ojs.t) ->
                             fun (x3331 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3327 ~previousValue:(Ojs.int_of_js x3328)
                                    ~currentValue:(Ojs.int_of_js x3329)
                                    ~currentIndex:(Ojs.int_of_js x3330)
                                    ~array:(t_of_js x3331))));(Ojs.int_to_js
                                                                 x3332)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3340 : t) ->
        fun
          ~callbackfn:(x3334 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3339 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3340) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3335 : Ojs.t) ->
                         fun (x3336 : Ojs.t) ->
                           fun (x3337 : Ojs.t) ->
                             fun (x3338 : Ojs.t) ->
                               Obj.magic
                                 (x3334 ~previousValue:(Obj.magic x3335)
                                    ~currentValue:(Ojs.int_of_js x3336)
                                    ~currentIndex:(Ojs.int_of_js x3337)
                                    ~array:(t_of_js x3338))));(Obj.magic
                                                                 x3339)|])
    let (reverse : t -> t) =
      fun (x3341 : t) -> t_of_js (Ojs.call (t_to_js x3341) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3347 : t) ->
        fun ~array:(x3342 : int Array.t) ->
          fun ?offset:(x3343 : int option) ->
            fun () ->
              ignore
                (let x3348 = t_to_js x3347 in
                 Ojs.call (Ojs.get_prop_ascii x3348 "set") "apply"
                   [|x3348;((let x3344 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3344 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3342)|]);
                             (match x3343 with
                              | Some x3345 ->
                                  ignore
                                    (Ojs.call x3344 "push"
                                       [|(Ojs.int_to_js x3345)|])
                              | None -> ());
                             x3344))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3354 : t) ->
        fun ?start:(x3349 : int option) ->
          fun ?end_:(x3350 : int option) ->
            fun () ->
              t_of_js
                (let x3355 = t_to_js x3354 in
                 Ojs.call (Ojs.get_prop_ascii x3355 "slice") "apply"
                   [|x3355;((let x3351 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3349 with
                              | Some x3353 ->
                                  ignore
                                    (Ojs.call x3351 "push"
                                       [|(Ojs.int_to_js x3353)|])
                              | None -> ());
                             (match x3350 with
                              | Some x3352 ->
                                  ignore
                                    (Ojs.call x3351 "push"
                                       [|(Ojs.int_to_js x3352)|])
                              | None -> ());
                             x3351))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3363 : t) ->
        fun (x3356 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3357 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3364 = t_to_js x3363 in
                 Ojs.call (Ojs.get_prop_ascii x3364 "some") "apply"
                   [|x3364;((let x3358 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3358 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3360 : Ojs.t) ->
                                          fun (x3361 : Ojs.t) ->
                                            fun (x3362 : Ojs.t) ->
                                              unknown_to_js
                                                (x3356
                                                   ~value:(Ojs.int_of_js
                                                             x3360)
                                                   ~index:(Ojs.int_of_js
                                                             x3361)
                                                   ~array:(t_of_js x3362))))|]);
                             (match x3357 with
                              | Some x3359 ->
                                  ignore
                                    (Ojs.call x3358 "push"
                                       [|(any_to_js x3359)|])
                              | None -> ());
                             x3358))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3370 : t) ->
        fun ?compareFn:(x3365 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3371 = t_to_js x3370 in
               Ojs.call (Ojs.get_prop_ascii x3371 "sort") "apply"
                 [|x3371;((let x3366 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3365 with
                            | Some x3367 ->
                                ignore
                                  (Ojs.call x3366 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3368 : Ojs.t) ->
                                             fun (x3369 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3367
                                                    ~a:(Ojs.int_of_js x3368)
                                                    ~b:(Ojs.int_of_js x3369))))|])
                            | None -> ());
                           x3366))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3377 : t) ->
        fun ?begin_:(x3372 : int option) ->
          fun ?end_:(x3373 : int option) ->
            fun () ->
              t_of_js
                (let x3378 = t_to_js x3377 in
                 Ojs.call (Ojs.get_prop_ascii x3378 "subarray") "apply"
                   [|x3378;((let x3374 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3372 with
                              | Some x3376 ->
                                  ignore
                                    (Ojs.call x3374 "push"
                                       [|(Ojs.int_to_js x3376)|])
                              | None -> ());
                             (match x3373 with
                              | Some x3375 ->
                                  ignore
                                    (Ojs.call x3374 "push"
                                       [|(Ojs.int_to_js x3375)|])
                              | None -> ());
                             x3374))|])
    let (toLocaleString : t -> string) =
      fun (x3379 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3379) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x3380 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3380) "toString" [||])
    let (valueOf : t -> t) =
      fun (x3381 : t) -> t_of_js (Ojs.call (t_to_js x3381) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3382 : t) ->
        fun (x3383 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3382) x3383)
    let (set : t -> int -> int -> unit) =
      fun (x3384 : t) ->
        fun (x3385 : int) ->
          fun (x3386 : int) ->
            Ojs.array_set (t_to_js x3384) x3385 (Ojs.int_to_js x3386)
    let (create : length:int -> t) =
      fun ~length:(x3387 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(Ojs.int_to_js x3387)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3388 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3390 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3390) x3388)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3392 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3393 : int option) ->
          fun ?length:(x3394 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint16Array")
                   (let x3395 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3395 "push" [|(ArrayBuffer.t_to_js x3392)|]);
                    (match x3393 with
                     | Some x3397 ->
                         ignore
                           (Ojs.call x3395 "push" [|(Ojs.int_to_js x3397)|])
                     | None -> ());
                    (match x3394 with
                     | Some x3396 ->
                         ignore
                           (Ojs.call x3395 "push" [|(Ojs.int_to_js x3396)|])
                     | None -> ());
                    x3395))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint16Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3398 : int list) ->
        t_of_js
          (let x3401 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
           Ojs.call (Ojs.get_prop_ascii x3401 "of") "apply"
             [|x3401;((let x3399 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3400 : int) ->
                            ignore
                              (Ojs.call x3399 "push"
                                 [|(Ojs.int_to_js x3400)|])) x3398;
                       x3399))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3402 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint16Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3402)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3404 : 'T Array.t) ->
        fun ~mapfn:(x3405 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3406 : any option) ->
            fun () ->
              t_of_js
                (let x3412 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
                 Ojs.call (Ojs.get_prop_ascii x3412 "from") "apply"
                   [|x3412;((let x3407 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3407 "push"
                                  [|(Array.t_to_js Obj.magic x3404)|]);
                             ignore
                               (Ojs.call x3407 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3409 : Ojs.t) ->
                                          fun (x3410 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3405 ~v:(Obj.magic x3409)
                                                 ~k:(Ojs.int_of_js x3410))))|]);
                             (match x3406 with
                              | Some x3408 ->
                                  ignore
                                    (Ojs.call x3407 "push"
                                       [|(any_to_js x3408)|])
                              | None -> ());
                             x3407))|])
  end
module Uint16ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3414 : Ojs.t) -> x3414
    and t_to_js : t -> Ojs.t = fun (x3413 : Ojs.t) -> x3413
    let (get_prototype : t -> Uint16Array.t) =
      fun (x3415 : t) ->
        Uint16Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3415) "prototype")
    let (create : t -> length:int -> Uint16Array.t) =
      fun (x3417 : t) ->
        fun ~length:(x3416 : int) ->
          Uint16Array.t_of_js
            (Ojs.new_obj (t_to_js x3417) [|(Ojs.int_to_js x3416)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint16Array.t) =
      fun (x3422 : t) ->
        fun ~array:(x3418 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint16Array.t_of_js
            (Ojs.new_obj (t_to_js x3422)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3420 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3420) x3418)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint16Array.t)
      =
      fun (x3429 : t) ->
        fun ~buffer:(x3423 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3424 : int option) ->
            fun ?length:(x3425 : int option) ->
              fun () ->
                Uint16Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3429)
                     (let x3426 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3426 "push"
                           [|(ArrayBuffer.t_to_js x3423)|]);
                      (match x3424 with
                       | Some x3428 ->
                           ignore
                             (Ojs.call x3426 "push" [|(Ojs.int_to_js x3428)|])
                       | None -> ());
                      (match x3425 with
                       | Some x3427 ->
                           ignore
                             (Ojs.call x3426 "push" [|(Ojs.int_to_js x3427)|])
                       | None -> ());
                      x3426))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3430 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3430) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint16Array.t) =
      fun (x3434 : t) ->
        fun (x3431 : int list) ->
          Uint16Array.t_of_js
            (let x3435 = t_to_js x3434 in
             Ojs.call (Ojs.get_prop_ascii x3435 "of") "apply"
               [|x3435;((let x3432 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3433 : int) ->
                              ignore
                                (Ojs.call x3432 "push"
                                   [|(Ojs.int_to_js x3433)|])) x3431;
                         x3432))|])
    let (from : t -> array:int Array.t -> Uint16Array.t) =
      fun (x3438 : t) ->
        fun ~array:(x3436 : int Array.t) ->
          Uint16Array.t_of_js
            (Ojs.call (t_to_js x3438) "from"
               [|(Array.t_to_js Ojs.int_to_js x3436)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint16Array.t)
      =
      fun (x3447 : t) ->
        fun ~array:(x3439 : 'T Array.t) ->
          fun ~mapfn:(x3440 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3441 : any option) ->
              fun () ->
                Uint16Array.t_of_js
                  (let x3448 = t_to_js x3447 in
                   Ojs.call (Ojs.get_prop_ascii x3448 "from") "apply"
                     [|x3448;((let x3442 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3442 "push"
                                    [|(Array.t_to_js Obj.magic x3439)|]);
                               ignore
                                 (Ojs.call x3442 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3444 : Ojs.t) ->
                                            fun (x3445 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3440 ~v:(Obj.magic x3444)
                                                   ~k:(Ojs.int_of_js x3445))))|]);
                               (match x3441 with
                                | Some x3443 ->
                                    ignore
                                      (Ojs.call x3442 "push"
                                         [|(any_to_js x3443)|])
                                | None -> ());
                               x3442))|])
  end
let (uint16Array : Uint16ArrayConstructor.t) =
  Uint16ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Uint16Array")
module Int32Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3450 : Ojs.t) -> x3450
    and t_to_js : t -> Ojs.t = fun (x3449 : Ojs.t) -> x3449
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3451 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3451) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3452 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3452) "buffer")
    let (get_byteLength : t -> int) =
      fun (x3453 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3453) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x3454 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3454) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x3460 : t) ->
        fun ~target:(x3455 : int) ->
          fun ~start:(x3456 : int) ->
            fun ?end_:(x3457 : int option) ->
              fun () ->
                t_of_js
                  (let x3461 = t_to_js x3460 in
                   Ojs.call (Ojs.get_prop_ascii x3461 "copyWithin") "apply"
                     [|x3461;((let x3458 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3458 "push"
                                    [|(Ojs.int_to_js x3455)|]);
                               ignore
                                 (Ojs.call x3458 "push"
                                    [|(Ojs.int_to_js x3456)|]);
                               (match x3457 with
                                | Some x3459 ->
                                    ignore
                                      (Ojs.call x3458 "push"
                                         [|(Ojs.int_to_js x3459)|])
                                | None -> ());
                               x3458))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3469 : t) ->
        fun (x3462 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3463 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3470 = t_to_js x3469 in
                 Ojs.call (Ojs.get_prop_ascii x3470 "every") "apply"
                   [|x3470;((let x3464 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3464 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3466 : Ojs.t) ->
                                          fun (x3467 : Ojs.t) ->
                                            fun (x3468 : Ojs.t) ->
                                              unknown_to_js
                                                (x3462
                                                   ~value:(Ojs.int_of_js
                                                             x3466)
                                                   ~index:(Ojs.int_of_js
                                                             x3467)
                                                   ~array:(t_of_js x3468))))|]);
                             (match x3463 with
                              | Some x3465 ->
                                  ignore
                                    (Ojs.call x3464 "push"
                                       [|(any_to_js x3465)|])
                              | None -> ());
                             x3464))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3477 : t) ->
        fun ~value:(x3471 : int) ->
          fun ?start:(x3472 : int option) ->
            fun ?end_:(x3473 : int option) ->
              fun () ->
                t_of_js
                  (let x3478 = t_to_js x3477 in
                   Ojs.call (Ojs.get_prop_ascii x3478 "fill") "apply"
                     [|x3478;((let x3474 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3474 "push"
                                    [|(Ojs.int_to_js x3471)|]);
                               (match x3472 with
                                | Some x3476 ->
                                    ignore
                                      (Ojs.call x3474 "push"
                                         [|(Ojs.int_to_js x3476)|])
                                | None -> ());
                               (match x3473 with
                                | Some x3475 ->
                                    ignore
                                      (Ojs.call x3474 "push"
                                         [|(Ojs.int_to_js x3475)|])
                                | None -> ());
                               x3474))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3486 : t) ->
        fun (x3479 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3480 : any option) ->
            fun () ->
              t_of_js
                (let x3487 = t_to_js x3486 in
                 Ojs.call (Ojs.get_prop_ascii x3487 "filter") "apply"
                   [|x3487;((let x3481 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3481 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3483 : Ojs.t) ->
                                          fun (x3484 : Ojs.t) ->
                                            fun (x3485 : Ojs.t) ->
                                              any_to_js
                                                (x3479
                                                   ~value:(Ojs.int_of_js
                                                             x3483)
                                                   ~index:(Ojs.int_of_js
                                                             x3484)
                                                   ~array:(t_of_js x3485))))|]);
                             (match x3480 with
                              | Some x3482 ->
                                  ignore
                                    (Ojs.call x3481 "push"
                                       [|(any_to_js x3482)|])
                              | None -> ());
                             x3481))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3495 : t) ->
        fun (x3488 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3489 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3496 = t_to_js x3495 in
                 Ojs.call (Ojs.get_prop_ascii x3496 "find") "apply"
                   [|x3496;((let x3490 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3490 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3492 : Ojs.t) ->
                                          fun (x3493 : Ojs.t) ->
                                            fun (x3494 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3488
                                                   ~value:(Ojs.int_of_js
                                                             x3492)
                                                   ~index:(Ojs.int_of_js
                                                             x3493)
                                                   ~obj:(t_of_js x3494))))|]);
                             (match x3489 with
                              | Some x3491 ->
                                  ignore
                                    (Ojs.call x3490 "push"
                                       [|(any_to_js x3491)|])
                              | None -> ());
                             x3490))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3505 : t) ->
        fun (x3498 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3499 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3506 = t_to_js x3505 in
                 Ojs.call (Ojs.get_prop_ascii x3506 "findIndex") "apply"
                   [|x3506;((let x3500 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3500 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3502 : Ojs.t) ->
                                          fun (x3503 : Ojs.t) ->
                                            fun (x3504 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3498
                                                   ~value:(Ojs.int_of_js
                                                             x3502)
                                                   ~index:(Ojs.int_of_js
                                                             x3503)
                                                   ~obj:(t_of_js x3504))))|]);
                             (match x3499 with
                              | Some x3501 ->
                                  ignore
                                    (Ojs.call x3500 "push"
                                       [|(any_to_js x3501)|])
                              | None -> ());
                             x3500))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3514 : t) ->
        fun ~callbackfn:(x3507 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3508 : any option) ->
            fun () ->
              ignore
                (let x3515 = t_to_js x3514 in
                 Ojs.call (Ojs.get_prop_ascii x3515 "forEach") "apply"
                   [|x3515;((let x3509 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3509 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3511 : Ojs.t) ->
                                          fun (x3512 : Ojs.t) ->
                                            fun (x3513 : Ojs.t) ->
                                              x3507
                                                ~value:(Ojs.int_of_js x3511)
                                                ~index:(Ojs.int_of_js x3512)
                                                ~array:(t_of_js x3513)))|]);
                             (match x3508 with
                              | Some x3510 ->
                                  ignore
                                    (Ojs.call x3509 "push"
                                       [|(any_to_js x3510)|])
                              | None -> ());
                             x3509))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3520 : t) ->
        fun ~searchElement:(x3516 : int) ->
          fun ?fromIndex:(x3517 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3521 = t_to_js x3520 in
                 Ojs.call (Ojs.get_prop_ascii x3521 "indexOf") "apply"
                   [|x3521;((let x3518 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3518 "push"
                                  [|(Ojs.int_to_js x3516)|]);
                             (match x3517 with
                              | Some x3519 ->
                                  ignore
                                    (Ojs.call x3518 "push"
                                       [|(Ojs.int_to_js x3519)|])
                              | None -> ());
                             x3518))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3525 : t) ->
        fun ?separator:(x3522 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3526 = t_to_js x3525 in
               Ojs.call (Ojs.get_prop_ascii x3526 "join") "apply"
                 [|x3526;((let x3523 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3522 with
                            | Some x3524 ->
                                ignore
                                  (Ojs.call x3523 "push"
                                     [|(Ojs.string_to_js x3524)|])
                            | None -> ());
                           x3523))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3531 : t) ->
        fun ~searchElement:(x3527 : int) ->
          fun ?fromIndex:(x3528 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3532 = t_to_js x3531 in
                 Ojs.call (Ojs.get_prop_ascii x3532 "lastIndexOf") "apply"
                   [|x3532;((let x3529 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3529 "push"
                                  [|(Ojs.int_to_js x3527)|]);
                             (match x3528 with
                              | Some x3530 ->
                                  ignore
                                    (Ojs.call x3529 "push"
                                       [|(Ojs.int_to_js x3530)|])
                              | None -> ());
                             x3529))|])
    let (get_length : t -> int) =
      fun (x3533 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3533) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3541 : t) ->
        fun ~callbackfn:(x3534 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3535 : any option) ->
            fun () ->
              t_of_js
                (let x3542 = t_to_js x3541 in
                 Ojs.call (Ojs.get_prop_ascii x3542 "map") "apply"
                   [|x3542;((let x3536 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3536 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3538 : Ojs.t) ->
                                          fun (x3539 : Ojs.t) ->
                                            fun (x3540 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3534
                                                   ~value:(Ojs.int_of_js
                                                             x3538)
                                                   ~index:(Ojs.int_of_js
                                                             x3539)
                                                   ~array:(t_of_js x3540))))|]);
                             (match x3535 with
                              | Some x3537 ->
                                  ignore
                                    (Ojs.call x3536 "push"
                                       [|(any_to_js x3537)|])
                              | None -> ());
                             x3536))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3548 : t) ->
        fun
          ~callbackfn:(x3543 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3548) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3544 : Ojs.t) ->
                       fun (x3545 : Ojs.t) ->
                         fun (x3546 : Ojs.t) ->
                           fun (x3547 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3543 ~previousValue:(Ojs.int_of_js x3544)
                                  ~currentValue:(Ojs.int_of_js x3545)
                                  ~currentIndex:(Ojs.int_of_js x3546)
                                  ~array:(t_of_js x3547))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3555 : t) ->
        fun
          ~callbackfn:(x3549 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3554 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3555) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3550 : Ojs.t) ->
                         fun (x3551 : Ojs.t) ->
                           fun (x3552 : Ojs.t) ->
                             fun (x3553 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3549 ~previousValue:(Ojs.int_of_js x3550)
                                    ~currentValue:(Ojs.int_of_js x3551)
                                    ~currentIndex:(Ojs.int_of_js x3552)
                                    ~array:(t_of_js x3553))));(Ojs.int_to_js
                                                                 x3554)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3562 : t) ->
        fun
          ~callbackfn:(x3556 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3561 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3562) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3557 : Ojs.t) ->
                         fun (x3558 : Ojs.t) ->
                           fun (x3559 : Ojs.t) ->
                             fun (x3560 : Ojs.t) ->
                               Obj.magic
                                 (x3556 ~previousValue:(Obj.magic x3557)
                                    ~currentValue:(Ojs.int_of_js x3558)
                                    ~currentIndex:(Ojs.int_of_js x3559)
                                    ~array:(t_of_js x3560))));(Obj.magic
                                                                 x3561)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3568 : t) ->
        fun
          ~callbackfn:(x3563 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3568) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3564 : Ojs.t) ->
                       fun (x3565 : Ojs.t) ->
                         fun (x3566 : Ojs.t) ->
                           fun (x3567 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3563 ~previousValue:(Ojs.int_of_js x3564)
                                  ~currentValue:(Ojs.int_of_js x3565)
                                  ~currentIndex:(Ojs.int_of_js x3566)
                                  ~array:(t_of_js x3567))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3575 : t) ->
        fun
          ~callbackfn:(x3569 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3574 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3575) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3570 : Ojs.t) ->
                         fun (x3571 : Ojs.t) ->
                           fun (x3572 : Ojs.t) ->
                             fun (x3573 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3569 ~previousValue:(Ojs.int_of_js x3570)
                                    ~currentValue:(Ojs.int_of_js x3571)
                                    ~currentIndex:(Ojs.int_of_js x3572)
                                    ~array:(t_of_js x3573))));(Ojs.int_to_js
                                                                 x3574)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3582 : t) ->
        fun
          ~callbackfn:(x3576 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3581 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3582) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3577 : Ojs.t) ->
                         fun (x3578 : Ojs.t) ->
                           fun (x3579 : Ojs.t) ->
                             fun (x3580 : Ojs.t) ->
                               Obj.magic
                                 (x3576 ~previousValue:(Obj.magic x3577)
                                    ~currentValue:(Ojs.int_of_js x3578)
                                    ~currentIndex:(Ojs.int_of_js x3579)
                                    ~array:(t_of_js x3580))));(Obj.magic
                                                                 x3581)|])
    let (reverse : t -> t) =
      fun (x3583 : t) -> t_of_js (Ojs.call (t_to_js x3583) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3589 : t) ->
        fun ~array:(x3584 : int Array.t) ->
          fun ?offset:(x3585 : int option) ->
            fun () ->
              ignore
                (let x3590 = t_to_js x3589 in
                 Ojs.call (Ojs.get_prop_ascii x3590 "set") "apply"
                   [|x3590;((let x3586 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3586 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3584)|]);
                             (match x3585 with
                              | Some x3587 ->
                                  ignore
                                    (Ojs.call x3586 "push"
                                       [|(Ojs.int_to_js x3587)|])
                              | None -> ());
                             x3586))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3596 : t) ->
        fun ?start:(x3591 : int option) ->
          fun ?end_:(x3592 : int option) ->
            fun () ->
              t_of_js
                (let x3597 = t_to_js x3596 in
                 Ojs.call (Ojs.get_prop_ascii x3597 "slice") "apply"
                   [|x3597;((let x3593 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3591 with
                              | Some x3595 ->
                                  ignore
                                    (Ojs.call x3593 "push"
                                       [|(Ojs.int_to_js x3595)|])
                              | None -> ());
                             (match x3592 with
                              | Some x3594 ->
                                  ignore
                                    (Ojs.call x3593 "push"
                                       [|(Ojs.int_to_js x3594)|])
                              | None -> ());
                             x3593))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3605 : t) ->
        fun (x3598 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3599 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3606 = t_to_js x3605 in
                 Ojs.call (Ojs.get_prop_ascii x3606 "some") "apply"
                   [|x3606;((let x3600 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3600 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3602 : Ojs.t) ->
                                          fun (x3603 : Ojs.t) ->
                                            fun (x3604 : Ojs.t) ->
                                              unknown_to_js
                                                (x3598
                                                   ~value:(Ojs.int_of_js
                                                             x3602)
                                                   ~index:(Ojs.int_of_js
                                                             x3603)
                                                   ~array:(t_of_js x3604))))|]);
                             (match x3599 with
                              | Some x3601 ->
                                  ignore
                                    (Ojs.call x3600 "push"
                                       [|(any_to_js x3601)|])
                              | None -> ());
                             x3600))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3612 : t) ->
        fun ?compareFn:(x3607 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3613 = t_to_js x3612 in
               Ojs.call (Ojs.get_prop_ascii x3613 "sort") "apply"
                 [|x3613;((let x3608 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3607 with
                            | Some x3609 ->
                                ignore
                                  (Ojs.call x3608 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3610 : Ojs.t) ->
                                             fun (x3611 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3609
                                                    ~a:(Ojs.int_of_js x3610)
                                                    ~b:(Ojs.int_of_js x3611))))|])
                            | None -> ());
                           x3608))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3619 : t) ->
        fun ?begin_:(x3614 : int option) ->
          fun ?end_:(x3615 : int option) ->
            fun () ->
              t_of_js
                (let x3620 = t_to_js x3619 in
                 Ojs.call (Ojs.get_prop_ascii x3620 "subarray") "apply"
                   [|x3620;((let x3616 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3614 with
                              | Some x3618 ->
                                  ignore
                                    (Ojs.call x3616 "push"
                                       [|(Ojs.int_to_js x3618)|])
                              | None -> ());
                             (match x3615 with
                              | Some x3617 ->
                                  ignore
                                    (Ojs.call x3616 "push"
                                       [|(Ojs.int_to_js x3617)|])
                              | None -> ());
                             x3616))|])
    let (toLocaleString : t -> string) =
      fun (x3621 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3621) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x3622 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3622) "toString" [||])
    let (valueOf : t -> t) =
      fun (x3623 : t) -> t_of_js (Ojs.call (t_to_js x3623) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3624 : t) ->
        fun (x3625 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3624) x3625)
    let (set : t -> int -> int -> unit) =
      fun (x3626 : t) ->
        fun (x3627 : int) ->
          fun (x3628 : int) ->
            Ojs.array_set (t_to_js x3626) x3627 (Ojs.int_to_js x3628)
    let (create : length:int -> t) =
      fun ~length:(x3629 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(Ojs.int_to_js x3629)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3630 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3632 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3632) x3630)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3634 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3635 : int option) ->
          fun ?length:(x3636 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int32Array")
                   (let x3637 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3637 "push" [|(ArrayBuffer.t_to_js x3634)|]);
                    (match x3635 with
                     | Some x3639 ->
                         ignore
                           (Ojs.call x3637 "push" [|(Ojs.int_to_js x3639)|])
                     | None -> ());
                    (match x3636 with
                     | Some x3638 ->
                         ignore
                           (Ojs.call x3637 "push" [|(Ojs.int_to_js x3638)|])
                     | None -> ());
                    x3637))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int32Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3640 : int list) ->
        t_of_js
          (let x3643 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
           Ojs.call (Ojs.get_prop_ascii x3643 "of") "apply"
             [|x3643;((let x3641 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3642 : int) ->
                            ignore
                              (Ojs.call x3641 "push"
                                 [|(Ojs.int_to_js x3642)|])) x3640;
                       x3641))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3644 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int32Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3644)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3646 : 'T Array.t) ->
        fun ~mapfn:(x3647 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3648 : any option) ->
            fun () ->
              t_of_js
                (let x3654 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
                 Ojs.call (Ojs.get_prop_ascii x3654 "from") "apply"
                   [|x3654;((let x3649 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3649 "push"
                                  [|(Array.t_to_js Obj.magic x3646)|]);
                             ignore
                               (Ojs.call x3649 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3651 : Ojs.t) ->
                                          fun (x3652 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3647 ~v:(Obj.magic x3651)
                                                 ~k:(Ojs.int_of_js x3652))))|]);
                             (match x3648 with
                              | Some x3650 ->
                                  ignore
                                    (Ojs.call x3649 "push"
                                       [|(any_to_js x3650)|])
                              | None -> ());
                             x3649))|])
  end
module Int32ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3656 : Ojs.t) -> x3656
    and t_to_js : t -> Ojs.t = fun (x3655 : Ojs.t) -> x3655
    let (get_prototype : t -> Int32Array.t) =
      fun (x3657 : t) ->
        Int32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3657) "prototype")
    let (create : t -> length:int -> Int32Array.t) =
      fun (x3659 : t) ->
        fun ~length:(x3658 : int) ->
          Int32Array.t_of_js
            (Ojs.new_obj (t_to_js x3659) [|(Ojs.int_to_js x3658)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Int32Array.t) =
      fun (x3664 : t) ->
        fun ~array:(x3660 : (ArrayBuffer.t, int Array.t) union2) ->
          Int32Array.t_of_js
            (Ojs.new_obj (t_to_js x3664)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3662 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3662) x3660)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Int32Array.t)
      =
      fun (x3671 : t) ->
        fun ~buffer:(x3665 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3666 : int option) ->
            fun ?length:(x3667 : int option) ->
              fun () ->
                Int32Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3671)
                     (let x3668 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3668 "push"
                           [|(ArrayBuffer.t_to_js x3665)|]);
                      (match x3666 with
                       | Some x3670 ->
                           ignore
                             (Ojs.call x3668 "push" [|(Ojs.int_to_js x3670)|])
                       | None -> ());
                      (match x3667 with
                       | Some x3669 ->
                           ignore
                             (Ojs.call x3668 "push" [|(Ojs.int_to_js x3669)|])
                       | None -> ());
                      x3668))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3672 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3672) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Int32Array.t) =
      fun (x3676 : t) ->
        fun (x3673 : int list) ->
          Int32Array.t_of_js
            (let x3677 = t_to_js x3676 in
             Ojs.call (Ojs.get_prop_ascii x3677 "of") "apply"
               [|x3677;((let x3674 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3675 : int) ->
                              ignore
                                (Ojs.call x3674 "push"
                                   [|(Ojs.int_to_js x3675)|])) x3673;
                         x3674))|])
    let (from : t -> array:int Array.t -> Int32Array.t) =
      fun (x3680 : t) ->
        fun ~array:(x3678 : int Array.t) ->
          Int32Array.t_of_js
            (Ojs.call (t_to_js x3680) "from"
               [|(Array.t_to_js Ojs.int_to_js x3678)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Int32Array.t)
      =
      fun (x3689 : t) ->
        fun ~array:(x3681 : 'T Array.t) ->
          fun ~mapfn:(x3682 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3683 : any option) ->
              fun () ->
                Int32Array.t_of_js
                  (let x3690 = t_to_js x3689 in
                   Ojs.call (Ojs.get_prop_ascii x3690 "from") "apply"
                     [|x3690;((let x3684 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3684 "push"
                                    [|(Array.t_to_js Obj.magic x3681)|]);
                               ignore
                                 (Ojs.call x3684 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3686 : Ojs.t) ->
                                            fun (x3687 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3682 ~v:(Obj.magic x3686)
                                                   ~k:(Ojs.int_of_js x3687))))|]);
                               (match x3683 with
                                | Some x3685 ->
                                    ignore
                                      (Ojs.call x3684 "push"
                                         [|(any_to_js x3685)|])
                                | None -> ());
                               x3684))|])
  end
let (int32Array : Int32ArrayConstructor.t) =
  Int32ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Int32Array")
module Uint32Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3692 : Ojs.t) -> x3692
    and t_to_js : t -> Ojs.t = fun (x3691 : Ojs.t) -> x3691
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3693 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3693) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3694 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3694) "buffer")
    let (get_byteLength : t -> int) =
      fun (x3695 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3695) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x3696 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3696) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x3702 : t) ->
        fun ~target:(x3697 : int) ->
          fun ~start:(x3698 : int) ->
            fun ?end_:(x3699 : int option) ->
              fun () ->
                t_of_js
                  (let x3703 = t_to_js x3702 in
                   Ojs.call (Ojs.get_prop_ascii x3703 "copyWithin") "apply"
                     [|x3703;((let x3700 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3700 "push"
                                    [|(Ojs.int_to_js x3697)|]);
                               ignore
                                 (Ojs.call x3700 "push"
                                    [|(Ojs.int_to_js x3698)|]);
                               (match x3699 with
                                | Some x3701 ->
                                    ignore
                                      (Ojs.call x3700 "push"
                                         [|(Ojs.int_to_js x3701)|])
                                | None -> ());
                               x3700))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3711 : t) ->
        fun (x3704 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3705 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3712 = t_to_js x3711 in
                 Ojs.call (Ojs.get_prop_ascii x3712 "every") "apply"
                   [|x3712;((let x3706 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3706 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3708 : Ojs.t) ->
                                          fun (x3709 : Ojs.t) ->
                                            fun (x3710 : Ojs.t) ->
                                              unknown_to_js
                                                (x3704
                                                   ~value:(Ojs.int_of_js
                                                             x3708)
                                                   ~index:(Ojs.int_of_js
                                                             x3709)
                                                   ~array:(t_of_js x3710))))|]);
                             (match x3705 with
                              | Some x3707 ->
                                  ignore
                                    (Ojs.call x3706 "push"
                                       [|(any_to_js x3707)|])
                              | None -> ());
                             x3706))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3719 : t) ->
        fun ~value:(x3713 : int) ->
          fun ?start:(x3714 : int option) ->
            fun ?end_:(x3715 : int option) ->
              fun () ->
                t_of_js
                  (let x3720 = t_to_js x3719 in
                   Ojs.call (Ojs.get_prop_ascii x3720 "fill") "apply"
                     [|x3720;((let x3716 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3716 "push"
                                    [|(Ojs.int_to_js x3713)|]);
                               (match x3714 with
                                | Some x3718 ->
                                    ignore
                                      (Ojs.call x3716 "push"
                                         [|(Ojs.int_to_js x3718)|])
                                | None -> ());
                               (match x3715 with
                                | Some x3717 ->
                                    ignore
                                      (Ojs.call x3716 "push"
                                         [|(Ojs.int_to_js x3717)|])
                                | None -> ());
                               x3716))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3728 : t) ->
        fun (x3721 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3722 : any option) ->
            fun () ->
              t_of_js
                (let x3729 = t_to_js x3728 in
                 Ojs.call (Ojs.get_prop_ascii x3729 "filter") "apply"
                   [|x3729;((let x3723 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3723 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3725 : Ojs.t) ->
                                          fun (x3726 : Ojs.t) ->
                                            fun (x3727 : Ojs.t) ->
                                              any_to_js
                                                (x3721
                                                   ~value:(Ojs.int_of_js
                                                             x3725)
                                                   ~index:(Ojs.int_of_js
                                                             x3726)
                                                   ~array:(t_of_js x3727))))|]);
                             (match x3722 with
                              | Some x3724 ->
                                  ignore
                                    (Ojs.call x3723 "push"
                                       [|(any_to_js x3724)|])
                              | None -> ());
                             x3723))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3737 : t) ->
        fun (x3730 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3731 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3738 = t_to_js x3737 in
                 Ojs.call (Ojs.get_prop_ascii x3738 "find") "apply"
                   [|x3738;((let x3732 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3732 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3734 : Ojs.t) ->
                                          fun (x3735 : Ojs.t) ->
                                            fun (x3736 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3730
                                                   ~value:(Ojs.int_of_js
                                                             x3734)
                                                   ~index:(Ojs.int_of_js
                                                             x3735)
                                                   ~obj:(t_of_js x3736))))|]);
                             (match x3731 with
                              | Some x3733 ->
                                  ignore
                                    (Ojs.call x3732 "push"
                                       [|(any_to_js x3733)|])
                              | None -> ());
                             x3732))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3747 : t) ->
        fun (x3740 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3741 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3748 = t_to_js x3747 in
                 Ojs.call (Ojs.get_prop_ascii x3748 "findIndex") "apply"
                   [|x3748;((let x3742 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3742 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3744 : Ojs.t) ->
                                          fun (x3745 : Ojs.t) ->
                                            fun (x3746 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3740
                                                   ~value:(Ojs.int_of_js
                                                             x3744)
                                                   ~index:(Ojs.int_of_js
                                                             x3745)
                                                   ~obj:(t_of_js x3746))))|]);
                             (match x3741 with
                              | Some x3743 ->
                                  ignore
                                    (Ojs.call x3742 "push"
                                       [|(any_to_js x3743)|])
                              | None -> ());
                             x3742))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3756 : t) ->
        fun ~callbackfn:(x3749 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3750 : any option) ->
            fun () ->
              ignore
                (let x3757 = t_to_js x3756 in
                 Ojs.call (Ojs.get_prop_ascii x3757 "forEach") "apply"
                   [|x3757;((let x3751 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3751 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3753 : Ojs.t) ->
                                          fun (x3754 : Ojs.t) ->
                                            fun (x3755 : Ojs.t) ->
                                              x3749
                                                ~value:(Ojs.int_of_js x3753)
                                                ~index:(Ojs.int_of_js x3754)
                                                ~array:(t_of_js x3755)))|]);
                             (match x3750 with
                              | Some x3752 ->
                                  ignore
                                    (Ojs.call x3751 "push"
                                       [|(any_to_js x3752)|])
                              | None -> ());
                             x3751))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3762 : t) ->
        fun ~searchElement:(x3758 : int) ->
          fun ?fromIndex:(x3759 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3763 = t_to_js x3762 in
                 Ojs.call (Ojs.get_prop_ascii x3763 "indexOf") "apply"
                   [|x3763;((let x3760 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3760 "push"
                                  [|(Ojs.int_to_js x3758)|]);
                             (match x3759 with
                              | Some x3761 ->
                                  ignore
                                    (Ojs.call x3760 "push"
                                       [|(Ojs.int_to_js x3761)|])
                              | None -> ());
                             x3760))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3767 : t) ->
        fun ?separator:(x3764 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3768 = t_to_js x3767 in
               Ojs.call (Ojs.get_prop_ascii x3768 "join") "apply"
                 [|x3768;((let x3765 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3764 with
                            | Some x3766 ->
                                ignore
                                  (Ojs.call x3765 "push"
                                     [|(Ojs.string_to_js x3766)|])
                            | None -> ());
                           x3765))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3773 : t) ->
        fun ~searchElement:(x3769 : int) ->
          fun ?fromIndex:(x3770 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3774 = t_to_js x3773 in
                 Ojs.call (Ojs.get_prop_ascii x3774 "lastIndexOf") "apply"
                   [|x3774;((let x3771 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3771 "push"
                                  [|(Ojs.int_to_js x3769)|]);
                             (match x3770 with
                              | Some x3772 ->
                                  ignore
                                    (Ojs.call x3771 "push"
                                       [|(Ojs.int_to_js x3772)|])
                              | None -> ());
                             x3771))|])
    let (get_length : t -> int) =
      fun (x3775 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3775) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3783 : t) ->
        fun ~callbackfn:(x3776 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3777 : any option) ->
            fun () ->
              t_of_js
                (let x3784 = t_to_js x3783 in
                 Ojs.call (Ojs.get_prop_ascii x3784 "map") "apply"
                   [|x3784;((let x3778 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3778 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3780 : Ojs.t) ->
                                          fun (x3781 : Ojs.t) ->
                                            fun (x3782 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3776
                                                   ~value:(Ojs.int_of_js
                                                             x3780)
                                                   ~index:(Ojs.int_of_js
                                                             x3781)
                                                   ~array:(t_of_js x3782))))|]);
                             (match x3777 with
                              | Some x3779 ->
                                  ignore
                                    (Ojs.call x3778 "push"
                                       [|(any_to_js x3779)|])
                              | None -> ());
                             x3778))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3790 : t) ->
        fun
          ~callbackfn:(x3785 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3790) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3786 : Ojs.t) ->
                       fun (x3787 : Ojs.t) ->
                         fun (x3788 : Ojs.t) ->
                           fun (x3789 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3785 ~previousValue:(Ojs.int_of_js x3786)
                                  ~currentValue:(Ojs.int_of_js x3787)
                                  ~currentIndex:(Ojs.int_of_js x3788)
                                  ~array:(t_of_js x3789))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3797 : t) ->
        fun
          ~callbackfn:(x3791 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3796 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3797) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3792 : Ojs.t) ->
                         fun (x3793 : Ojs.t) ->
                           fun (x3794 : Ojs.t) ->
                             fun (x3795 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3791 ~previousValue:(Ojs.int_of_js x3792)
                                    ~currentValue:(Ojs.int_of_js x3793)
                                    ~currentIndex:(Ojs.int_of_js x3794)
                                    ~array:(t_of_js x3795))));(Ojs.int_to_js
                                                                 x3796)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3804 : t) ->
        fun
          ~callbackfn:(x3798 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3803 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3804) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3799 : Ojs.t) ->
                         fun (x3800 : Ojs.t) ->
                           fun (x3801 : Ojs.t) ->
                             fun (x3802 : Ojs.t) ->
                               Obj.magic
                                 (x3798 ~previousValue:(Obj.magic x3799)
                                    ~currentValue:(Ojs.int_of_js x3800)
                                    ~currentIndex:(Ojs.int_of_js x3801)
                                    ~array:(t_of_js x3802))));(Obj.magic
                                                                 x3803)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3810 : t) ->
        fun
          ~callbackfn:(x3805 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3810) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3806 : Ojs.t) ->
                       fun (x3807 : Ojs.t) ->
                         fun (x3808 : Ojs.t) ->
                           fun (x3809 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3805 ~previousValue:(Ojs.int_of_js x3806)
                                  ~currentValue:(Ojs.int_of_js x3807)
                                  ~currentIndex:(Ojs.int_of_js x3808)
                                  ~array:(t_of_js x3809))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3817 : t) ->
        fun
          ~callbackfn:(x3811 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3816 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3817) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3812 : Ojs.t) ->
                         fun (x3813 : Ojs.t) ->
                           fun (x3814 : Ojs.t) ->
                             fun (x3815 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3811 ~previousValue:(Ojs.int_of_js x3812)
                                    ~currentValue:(Ojs.int_of_js x3813)
                                    ~currentIndex:(Ojs.int_of_js x3814)
                                    ~array:(t_of_js x3815))));(Ojs.int_to_js
                                                                 x3816)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3824 : t) ->
        fun
          ~callbackfn:(x3818 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3823 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3824) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3819 : Ojs.t) ->
                         fun (x3820 : Ojs.t) ->
                           fun (x3821 : Ojs.t) ->
                             fun (x3822 : Ojs.t) ->
                               Obj.magic
                                 (x3818 ~previousValue:(Obj.magic x3819)
                                    ~currentValue:(Ojs.int_of_js x3820)
                                    ~currentIndex:(Ojs.int_of_js x3821)
                                    ~array:(t_of_js x3822))));(Obj.magic
                                                                 x3823)|])
    let (reverse : t -> t) =
      fun (x3825 : t) -> t_of_js (Ojs.call (t_to_js x3825) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3831 : t) ->
        fun ~array:(x3826 : int Array.t) ->
          fun ?offset:(x3827 : int option) ->
            fun () ->
              ignore
                (let x3832 = t_to_js x3831 in
                 Ojs.call (Ojs.get_prop_ascii x3832 "set") "apply"
                   [|x3832;((let x3828 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3828 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3826)|]);
                             (match x3827 with
                              | Some x3829 ->
                                  ignore
                                    (Ojs.call x3828 "push"
                                       [|(Ojs.int_to_js x3829)|])
                              | None -> ());
                             x3828))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3838 : t) ->
        fun ?start:(x3833 : int option) ->
          fun ?end_:(x3834 : int option) ->
            fun () ->
              t_of_js
                (let x3839 = t_to_js x3838 in
                 Ojs.call (Ojs.get_prop_ascii x3839 "slice") "apply"
                   [|x3839;((let x3835 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3833 with
                              | Some x3837 ->
                                  ignore
                                    (Ojs.call x3835 "push"
                                       [|(Ojs.int_to_js x3837)|])
                              | None -> ());
                             (match x3834 with
                              | Some x3836 ->
                                  ignore
                                    (Ojs.call x3835 "push"
                                       [|(Ojs.int_to_js x3836)|])
                              | None -> ());
                             x3835))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3847 : t) ->
        fun (x3840 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3841 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3848 = t_to_js x3847 in
                 Ojs.call (Ojs.get_prop_ascii x3848 "some") "apply"
                   [|x3848;((let x3842 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3842 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3844 : Ojs.t) ->
                                          fun (x3845 : Ojs.t) ->
                                            fun (x3846 : Ojs.t) ->
                                              unknown_to_js
                                                (x3840
                                                   ~value:(Ojs.int_of_js
                                                             x3844)
                                                   ~index:(Ojs.int_of_js
                                                             x3845)
                                                   ~array:(t_of_js x3846))))|]);
                             (match x3841 with
                              | Some x3843 ->
                                  ignore
                                    (Ojs.call x3842 "push"
                                       [|(any_to_js x3843)|])
                              | None -> ());
                             x3842))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3854 : t) ->
        fun ?compareFn:(x3849 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3855 = t_to_js x3854 in
               Ojs.call (Ojs.get_prop_ascii x3855 "sort") "apply"
                 [|x3855;((let x3850 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3849 with
                            | Some x3851 ->
                                ignore
                                  (Ojs.call x3850 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3852 : Ojs.t) ->
                                             fun (x3853 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3851
                                                    ~a:(Ojs.int_of_js x3852)
                                                    ~b:(Ojs.int_of_js x3853))))|])
                            | None -> ());
                           x3850))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3861 : t) ->
        fun ?begin_:(x3856 : int option) ->
          fun ?end_:(x3857 : int option) ->
            fun () ->
              t_of_js
                (let x3862 = t_to_js x3861 in
                 Ojs.call (Ojs.get_prop_ascii x3862 "subarray") "apply"
                   [|x3862;((let x3858 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3856 with
                              | Some x3860 ->
                                  ignore
                                    (Ojs.call x3858 "push"
                                       [|(Ojs.int_to_js x3860)|])
                              | None -> ());
                             (match x3857 with
                              | Some x3859 ->
                                  ignore
                                    (Ojs.call x3858 "push"
                                       [|(Ojs.int_to_js x3859)|])
                              | None -> ());
                             x3858))|])
    let (toLocaleString : t -> string) =
      fun (x3863 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3863) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x3864 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3864) "toString" [||])
    let (valueOf : t -> t) =
      fun (x3865 : t) -> t_of_js (Ojs.call (t_to_js x3865) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3866 : t) ->
        fun (x3867 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3866) x3867)
    let (set : t -> int -> int -> unit) =
      fun (x3868 : t) ->
        fun (x3869 : int) ->
          fun (x3870 : int) ->
            Ojs.array_set (t_to_js x3868) x3869 (Ojs.int_to_js x3870)
    let (create : length:int -> t) =
      fun ~length:(x3871 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(Ojs.int_to_js x3871)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3872 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3874 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3874) x3872)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3876 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3877 : int option) ->
          fun ?length:(x3878 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint32Array")
                   (let x3879 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3879 "push" [|(ArrayBuffer.t_to_js x3876)|]);
                    (match x3877 with
                     | Some x3881 ->
                         ignore
                           (Ojs.call x3879 "push" [|(Ojs.int_to_js x3881)|])
                     | None -> ());
                    (match x3878 with
                     | Some x3880 ->
                         ignore
                           (Ojs.call x3879 "push" [|(Ojs.int_to_js x3880)|])
                     | None -> ());
                    x3879))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint32Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3882 : int list) ->
        t_of_js
          (let x3885 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
           Ojs.call (Ojs.get_prop_ascii x3885 "of") "apply"
             [|x3885;((let x3883 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3884 : int) ->
                            ignore
                              (Ojs.call x3883 "push"
                                 [|(Ojs.int_to_js x3884)|])) x3882;
                       x3883))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3886 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint32Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3886)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3888 : 'T Array.t) ->
        fun ~mapfn:(x3889 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3890 : any option) ->
            fun () ->
              t_of_js
                (let x3896 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
                 Ojs.call (Ojs.get_prop_ascii x3896 "from") "apply"
                   [|x3896;((let x3891 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3891 "push"
                                  [|(Array.t_to_js Obj.magic x3888)|]);
                             ignore
                               (Ojs.call x3891 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3893 : Ojs.t) ->
                                          fun (x3894 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3889 ~v:(Obj.magic x3893)
                                                 ~k:(Ojs.int_of_js x3894))))|]);
                             (match x3890 with
                              | Some x3892 ->
                                  ignore
                                    (Ojs.call x3891 "push"
                                       [|(any_to_js x3892)|])
                              | None -> ());
                             x3891))|])
  end
module Uint32ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3898 : Ojs.t) -> x3898
    and t_to_js : t -> Ojs.t = fun (x3897 : Ojs.t) -> x3897
    let (get_prototype : t -> Uint32Array.t) =
      fun (x3899 : t) ->
        Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3899) "prototype")
    let (create : t -> length:int -> Uint32Array.t) =
      fun (x3901 : t) ->
        fun ~length:(x3900 : int) ->
          Uint32Array.t_of_js
            (Ojs.new_obj (t_to_js x3901) [|(Ojs.int_to_js x3900)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint32Array.t) =
      fun (x3906 : t) ->
        fun ~array:(x3902 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint32Array.t_of_js
            (Ojs.new_obj (t_to_js x3906)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3904 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3904) x3902)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint32Array.t)
      =
      fun (x3913 : t) ->
        fun ~buffer:(x3907 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3908 : int option) ->
            fun ?length:(x3909 : int option) ->
              fun () ->
                Uint32Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3913)
                     (let x3910 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3910 "push"
                           [|(ArrayBuffer.t_to_js x3907)|]);
                      (match x3908 with
                       | Some x3912 ->
                           ignore
                             (Ojs.call x3910 "push" [|(Ojs.int_to_js x3912)|])
                       | None -> ());
                      (match x3909 with
                       | Some x3911 ->
                           ignore
                             (Ojs.call x3910 "push" [|(Ojs.int_to_js x3911)|])
                       | None -> ());
                      x3910))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3914 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3914) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint32Array.t) =
      fun (x3918 : t) ->
        fun (x3915 : int list) ->
          Uint32Array.t_of_js
            (let x3919 = t_to_js x3918 in
             Ojs.call (Ojs.get_prop_ascii x3919 "of") "apply"
               [|x3919;((let x3916 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3917 : int) ->
                              ignore
                                (Ojs.call x3916 "push"
                                   [|(Ojs.int_to_js x3917)|])) x3915;
                         x3916))|])
    let (from : t -> array:int Array.t -> Uint32Array.t) =
      fun (x3922 : t) ->
        fun ~array:(x3920 : int Array.t) ->
          Uint32Array.t_of_js
            (Ojs.call (t_to_js x3922) "from"
               [|(Array.t_to_js Ojs.int_to_js x3920)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint32Array.t)
      =
      fun (x3931 : t) ->
        fun ~array:(x3923 : 'T Array.t) ->
          fun ~mapfn:(x3924 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3925 : any option) ->
              fun () ->
                Uint32Array.t_of_js
                  (let x3932 = t_to_js x3931 in
                   Ojs.call (Ojs.get_prop_ascii x3932 "from") "apply"
                     [|x3932;((let x3926 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3926 "push"
                                    [|(Array.t_to_js Obj.magic x3923)|]);
                               ignore
                                 (Ojs.call x3926 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3928 : Ojs.t) ->
                                            fun (x3929 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3924 ~v:(Obj.magic x3928)
                                                   ~k:(Ojs.int_of_js x3929))))|]);
                               (match x3925 with
                                | Some x3927 ->
                                    ignore
                                      (Ojs.call x3926 "push"
                                         [|(any_to_js x3927)|])
                                | None -> ());
                               x3926))|])
  end
let (uint32Array : Uint32ArrayConstructor.t) =
  Uint32ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Uint32Array")
module Float32Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3934 : Ojs.t) -> x3934
    and t_to_js : t -> Ojs.t = fun (x3933 : Ojs.t) -> x3933
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x3935 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3935) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3936 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3936) "buffer")
    let (get_byteLength : t -> int) =
      fun (x3937 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3937) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x3938 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3938) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x3944 : t) ->
        fun ~target:(x3939 : int) ->
          fun ~start:(x3940 : int) ->
            fun ?end_:(x3941 : int option) ->
              fun () ->
                t_of_js
                  (let x3945 = t_to_js x3944 in
                   Ojs.call (Ojs.get_prop_ascii x3945 "copyWithin") "apply"
                     [|x3945;((let x3942 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3942 "push"
                                    [|(Ojs.int_to_js x3939)|]);
                               ignore
                                 (Ojs.call x3942 "push"
                                    [|(Ojs.int_to_js x3940)|]);
                               (match x3941 with
                                | Some x3943 ->
                                    ignore
                                      (Ojs.call x3942 "push"
                                         [|(Ojs.int_to_js x3943)|])
                                | None -> ());
                               x3942))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3953 : t) ->
        fun (x3946 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3947 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3954 = t_to_js x3953 in
                 Ojs.call (Ojs.get_prop_ascii x3954 "every") "apply"
                   [|x3954;((let x3948 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3948 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3950 : Ojs.t) ->
                                          fun (x3951 : Ojs.t) ->
                                            fun (x3952 : Ojs.t) ->
                                              unknown_to_js
                                                (x3946
                                                   ~value:(Ojs.int_of_js
                                                             x3950)
                                                   ~index:(Ojs.int_of_js
                                                             x3951)
                                                   ~array:(t_of_js x3952))))|]);
                             (match x3947 with
                              | Some x3949 ->
                                  ignore
                                    (Ojs.call x3948 "push"
                                       [|(any_to_js x3949)|])
                              | None -> ());
                             x3948))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3961 : t) ->
        fun ~value:(x3955 : int) ->
          fun ?start:(x3956 : int option) ->
            fun ?end_:(x3957 : int option) ->
              fun () ->
                t_of_js
                  (let x3962 = t_to_js x3961 in
                   Ojs.call (Ojs.get_prop_ascii x3962 "fill") "apply"
                     [|x3962;((let x3958 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3958 "push"
                                    [|(Ojs.int_to_js x3955)|]);
                               (match x3956 with
                                | Some x3960 ->
                                    ignore
                                      (Ojs.call x3958 "push"
                                         [|(Ojs.int_to_js x3960)|])
                                | None -> ());
                               (match x3957 with
                                | Some x3959 ->
                                    ignore
                                      (Ojs.call x3958 "push"
                                         [|(Ojs.int_to_js x3959)|])
                                | None -> ());
                               x3958))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3970 : t) ->
        fun (x3963 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3964 : any option) ->
            fun () ->
              t_of_js
                (let x3971 = t_to_js x3970 in
                 Ojs.call (Ojs.get_prop_ascii x3971 "filter") "apply"
                   [|x3971;((let x3965 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3965 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3967 : Ojs.t) ->
                                          fun (x3968 : Ojs.t) ->
                                            fun (x3969 : Ojs.t) ->
                                              any_to_js
                                                (x3963
                                                   ~value:(Ojs.int_of_js
                                                             x3967)
                                                   ~index:(Ojs.int_of_js
                                                             x3968)
                                                   ~array:(t_of_js x3969))))|]);
                             (match x3964 with
                              | Some x3966 ->
                                  ignore
                                    (Ojs.call x3965 "push"
                                       [|(any_to_js x3966)|])
                              | None -> ());
                             x3965))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3979 : t) ->
        fun (x3972 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3973 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3980 = t_to_js x3979 in
                 Ojs.call (Ojs.get_prop_ascii x3980 "find") "apply"
                   [|x3980;((let x3974 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3974 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3976 : Ojs.t) ->
                                          fun (x3977 : Ojs.t) ->
                                            fun (x3978 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3972
                                                   ~value:(Ojs.int_of_js
                                                             x3976)
                                                   ~index:(Ojs.int_of_js
                                                             x3977)
                                                   ~obj:(t_of_js x3978))))|]);
                             (match x3973 with
                              | Some x3975 ->
                                  ignore
                                    (Ojs.call x3974 "push"
                                       [|(any_to_js x3975)|])
                              | None -> ());
                             x3974))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3989 : t) ->
        fun (x3982 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3983 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3990 = t_to_js x3989 in
                 Ojs.call (Ojs.get_prop_ascii x3990 "findIndex") "apply"
                   [|x3990;((let x3984 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3984 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3986 : Ojs.t) ->
                                          fun (x3987 : Ojs.t) ->
                                            fun (x3988 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3982
                                                   ~value:(Ojs.int_of_js
                                                             x3986)
                                                   ~index:(Ojs.int_of_js
                                                             x3987)
                                                   ~obj:(t_of_js x3988))))|]);
                             (match x3983 with
                              | Some x3985 ->
                                  ignore
                                    (Ojs.call x3984 "push"
                                       [|(any_to_js x3985)|])
                              | None -> ());
                             x3984))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3998 : t) ->
        fun ~callbackfn:(x3991 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3992 : any option) ->
            fun () ->
              ignore
                (let x3999 = t_to_js x3998 in
                 Ojs.call (Ojs.get_prop_ascii x3999 "forEach") "apply"
                   [|x3999;((let x3993 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3993 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3995 : Ojs.t) ->
                                          fun (x3996 : Ojs.t) ->
                                            fun (x3997 : Ojs.t) ->
                                              x3991
                                                ~value:(Ojs.int_of_js x3995)
                                                ~index:(Ojs.int_of_js x3996)
                                                ~array:(t_of_js x3997)))|]);
                             (match x3992 with
                              | Some x3994 ->
                                  ignore
                                    (Ojs.call x3993 "push"
                                       [|(any_to_js x3994)|])
                              | None -> ());
                             x3993))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x4004 : t) ->
        fun ~searchElement:(x4000 : int) ->
          fun ?fromIndex:(x4001 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4005 = t_to_js x4004 in
                 Ojs.call (Ojs.get_prop_ascii x4005 "indexOf") "apply"
                   [|x4005;((let x4002 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4002 "push"
                                  [|(Ojs.int_to_js x4000)|]);
                             (match x4001 with
                              | Some x4003 ->
                                  ignore
                                    (Ojs.call x4002 "push"
                                       [|(Ojs.int_to_js x4003)|])
                              | None -> ());
                             x4002))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x4009 : t) ->
        fun ?separator:(x4006 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x4010 = t_to_js x4009 in
               Ojs.call (Ojs.get_prop_ascii x4010 "join") "apply"
                 [|x4010;((let x4007 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4006 with
                            | Some x4008 ->
                                ignore
                                  (Ojs.call x4007 "push"
                                     [|(Ojs.string_to_js x4008)|])
                            | None -> ());
                           x4007))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x4015 : t) ->
        fun ~searchElement:(x4011 : int) ->
          fun ?fromIndex:(x4012 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4016 = t_to_js x4015 in
                 Ojs.call (Ojs.get_prop_ascii x4016 "lastIndexOf") "apply"
                   [|x4016;((let x4013 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4013 "push"
                                  [|(Ojs.int_to_js x4011)|]);
                             (match x4012 with
                              | Some x4014 ->
                                  ignore
                                    (Ojs.call x4013 "push"
                                       [|(Ojs.int_to_js x4014)|])
                              | None -> ());
                             x4013))|])
    let (get_length : t -> int) =
      fun (x4017 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4017) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x4025 : t) ->
        fun ~callbackfn:(x4018 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x4019 : any option) ->
            fun () ->
              t_of_js
                (let x4026 = t_to_js x4025 in
                 Ojs.call (Ojs.get_prop_ascii x4026 "map") "apply"
                   [|x4026;((let x4020 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4020 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4022 : Ojs.t) ->
                                          fun (x4023 : Ojs.t) ->
                                            fun (x4024 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4018
                                                   ~value:(Ojs.int_of_js
                                                             x4022)
                                                   ~index:(Ojs.int_of_js
                                                             x4023)
                                                   ~array:(t_of_js x4024))))|]);
                             (match x4019 with
                              | Some x4021 ->
                                  ignore
                                    (Ojs.call x4020 "push"
                                       [|(any_to_js x4021)|])
                              | None -> ());
                             x4020))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4032 : t) ->
        fun
          ~callbackfn:(x4027 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4032) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x4028 : Ojs.t) ->
                       fun (x4029 : Ojs.t) ->
                         fun (x4030 : Ojs.t) ->
                           fun (x4031 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4027 ~previousValue:(Ojs.int_of_js x4028)
                                  ~currentValue:(Ojs.int_of_js x4029)
                                  ~currentIndex:(Ojs.int_of_js x4030)
                                  ~array:(t_of_js x4031))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4039 : t) ->
        fun
          ~callbackfn:(x4033 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4038 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4039) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4034 : Ojs.t) ->
                         fun (x4035 : Ojs.t) ->
                           fun (x4036 : Ojs.t) ->
                             fun (x4037 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4033 ~previousValue:(Ojs.int_of_js x4034)
                                    ~currentValue:(Ojs.int_of_js x4035)
                                    ~currentIndex:(Ojs.int_of_js x4036)
                                    ~array:(t_of_js x4037))));(Ojs.int_to_js
                                                                 x4038)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4046 : t) ->
        fun
          ~callbackfn:(x4040 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4045 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4046) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4041 : Ojs.t) ->
                         fun (x4042 : Ojs.t) ->
                           fun (x4043 : Ojs.t) ->
                             fun (x4044 : Ojs.t) ->
                               Obj.magic
                                 (x4040 ~previousValue:(Obj.magic x4041)
                                    ~currentValue:(Ojs.int_of_js x4042)
                                    ~currentIndex:(Ojs.int_of_js x4043)
                                    ~array:(t_of_js x4044))));(Obj.magic
                                                                 x4045)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4052 : t) ->
        fun
          ~callbackfn:(x4047 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4052) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x4048 : Ojs.t) ->
                       fun (x4049 : Ojs.t) ->
                         fun (x4050 : Ojs.t) ->
                           fun (x4051 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4047 ~previousValue:(Ojs.int_of_js x4048)
                                  ~currentValue:(Ojs.int_of_js x4049)
                                  ~currentIndex:(Ojs.int_of_js x4050)
                                  ~array:(t_of_js x4051))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4059 : t) ->
        fun
          ~callbackfn:(x4053 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4058 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4059) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4054 : Ojs.t) ->
                         fun (x4055 : Ojs.t) ->
                           fun (x4056 : Ojs.t) ->
                             fun (x4057 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4053 ~previousValue:(Ojs.int_of_js x4054)
                                    ~currentValue:(Ojs.int_of_js x4055)
                                    ~currentIndex:(Ojs.int_of_js x4056)
                                    ~array:(t_of_js x4057))));(Ojs.int_to_js
                                                                 x4058)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4066 : t) ->
        fun
          ~callbackfn:(x4060 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4065 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4066) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4061 : Ojs.t) ->
                         fun (x4062 : Ojs.t) ->
                           fun (x4063 : Ojs.t) ->
                             fun (x4064 : Ojs.t) ->
                               Obj.magic
                                 (x4060 ~previousValue:(Obj.magic x4061)
                                    ~currentValue:(Ojs.int_of_js x4062)
                                    ~currentIndex:(Ojs.int_of_js x4063)
                                    ~array:(t_of_js x4064))));(Obj.magic
                                                                 x4065)|])
    let (reverse : t -> t) =
      fun (x4067 : t) -> t_of_js (Ojs.call (t_to_js x4067) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x4073 : t) ->
        fun ~array:(x4068 : int Array.t) ->
          fun ?offset:(x4069 : int option) ->
            fun () ->
              ignore
                (let x4074 = t_to_js x4073 in
                 Ojs.call (Ojs.get_prop_ascii x4074 "set") "apply"
                   [|x4074;((let x4070 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4070 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x4068)|]);
                             (match x4069 with
                              | Some x4071 ->
                                  ignore
                                    (Ojs.call x4070 "push"
                                       [|(Ojs.int_to_js x4071)|])
                              | None -> ());
                             x4070))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x4080 : t) ->
        fun ?start:(x4075 : int option) ->
          fun ?end_:(x4076 : int option) ->
            fun () ->
              t_of_js
                (let x4081 = t_to_js x4080 in
                 Ojs.call (Ojs.get_prop_ascii x4081 "slice") "apply"
                   [|x4081;((let x4077 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4075 with
                              | Some x4079 ->
                                  ignore
                                    (Ojs.call x4077 "push"
                                       [|(Ojs.int_to_js x4079)|])
                              | None -> ());
                             (match x4076 with
                              | Some x4078 ->
                                  ignore
                                    (Ojs.call x4077 "push"
                                       [|(Ojs.int_to_js x4078)|])
                              | None -> ());
                             x4077))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x4089 : t) ->
        fun (x4082 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x4083 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x4090 = t_to_js x4089 in
                 Ojs.call (Ojs.get_prop_ascii x4090 "some") "apply"
                   [|x4090;((let x4084 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4084 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4086 : Ojs.t) ->
                                          fun (x4087 : Ojs.t) ->
                                            fun (x4088 : Ojs.t) ->
                                              unknown_to_js
                                                (x4082
                                                   ~value:(Ojs.int_of_js
                                                             x4086)
                                                   ~index:(Ojs.int_of_js
                                                             x4087)
                                                   ~array:(t_of_js x4088))))|]);
                             (match x4083 with
                              | Some x4085 ->
                                  ignore
                                    (Ojs.call x4084 "push"
                                       [|(any_to_js x4085)|])
                              | None -> ());
                             x4084))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x4096 : t) ->
        fun ?compareFn:(x4091 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x4097 = t_to_js x4096 in
               Ojs.call (Ojs.get_prop_ascii x4097 "sort") "apply"
                 [|x4097;((let x4092 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4091 with
                            | Some x4093 ->
                                ignore
                                  (Ojs.call x4092 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x4094 : Ojs.t) ->
                                             fun (x4095 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x4093
                                                    ~a:(Ojs.int_of_js x4094)
                                                    ~b:(Ojs.int_of_js x4095))))|])
                            | None -> ());
                           x4092))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x4103 : t) ->
        fun ?begin_:(x4098 : int option) ->
          fun ?end_:(x4099 : int option) ->
            fun () ->
              t_of_js
                (let x4104 = t_to_js x4103 in
                 Ojs.call (Ojs.get_prop_ascii x4104 "subarray") "apply"
                   [|x4104;((let x4100 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4098 with
                              | Some x4102 ->
                                  ignore
                                    (Ojs.call x4100 "push"
                                       [|(Ojs.int_to_js x4102)|])
                              | None -> ());
                             (match x4099 with
                              | Some x4101 ->
                                  ignore
                                    (Ojs.call x4100 "push"
                                       [|(Ojs.int_to_js x4101)|])
                              | None -> ());
                             x4100))|])
    let (toLocaleString : t -> string) =
      fun (x4105 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4105) "toLocaleString" [||])
    let (toString : t -> string) =
      fun (x4106 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4106) "toString" [||])
    let (valueOf : t -> t) =
      fun (x4107 : t) -> t_of_js (Ojs.call (t_to_js x4107) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x4108 : t) ->
        fun (x4109 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x4108) x4109)
    let (set : t -> int -> int -> unit) =
      fun (x4110 : t) ->
        fun (x4111 : int) ->
          fun (x4112 : int) ->
            Ojs.array_set (t_to_js x4110) x4111 (Ojs.int_to_js x4112)
    let (create : length:int -> t) =
      fun ~length:(x4113 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(Ojs.int_to_js x4113)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x4114 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x4116 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x4116) x4114)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x4118 : ArrayBuffer.t) ->
        fun ?byteOffset:(x4119 : int option) ->
          fun ?length:(x4120 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Float32Array")
                   (let x4121 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4121 "push" [|(ArrayBuffer.t_to_js x4118)|]);
                    (match x4119 with
                     | Some x4123 ->
                         ignore
                           (Ojs.call x4121 "push" [|(Ojs.int_to_js x4123)|])
                     | None -> ());
                    (match x4120 with
                     | Some x4122 ->
                         ignore
                           (Ojs.call x4121 "push" [|(Ojs.int_to_js x4122)|])
                     | None -> ());
                    x4121))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float32Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x4124 : int list) ->
        t_of_js
          (let x4127 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
           Ojs.call (Ojs.get_prop_ascii x4127 "of") "apply"
             [|x4127;((let x4125 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4126 : int) ->
                            ignore
                              (Ojs.call x4125 "push"
                                 [|(Ojs.int_to_js x4126)|])) x4124;
                       x4125))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x4128 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Float32Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x4128)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x4130 : 'T Array.t) ->
        fun ~mapfn:(x4131 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x4132 : any option) ->
            fun () ->
              t_of_js
                (let x4138 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
                 Ojs.call (Ojs.get_prop_ascii x4138 "from") "apply"
                   [|x4138;((let x4133 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4133 "push"
                                  [|(Array.t_to_js Obj.magic x4130)|]);
                             ignore
                               (Ojs.call x4133 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x4135 : Ojs.t) ->
                                          fun (x4136 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x4131 ~v:(Obj.magic x4135)
                                                 ~k:(Ojs.int_of_js x4136))))|]);
                             (match x4132 with
                              | Some x4134 ->
                                  ignore
                                    (Ojs.call x4133 "push"
                                       [|(any_to_js x4134)|])
                              | None -> ());
                             x4133))|])
  end
module Float32ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4140 : Ojs.t) -> x4140
    and t_to_js : t -> Ojs.t = fun (x4139 : Ojs.t) -> x4139
    let (get_prototype : t -> Float32Array.t) =
      fun (x4141 : t) ->
        Float32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x4141) "prototype")
    let (create : t -> length:int -> Float32Array.t) =
      fun (x4143 : t) ->
        fun ~length:(x4142 : int) ->
          Float32Array.t_of_js
            (Ojs.new_obj (t_to_js x4143) [|(Ojs.int_to_js x4142)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Float32Array.t) =
      fun (x4148 : t) ->
        fun ~array:(x4144 : (ArrayBuffer.t, int Array.t) union2) ->
          Float32Array.t_of_js
            (Ojs.new_obj (t_to_js x4148)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x4146 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x4146) x4144)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Float32Array.t)
      =
      fun (x4155 : t) ->
        fun ~buffer:(x4149 : ArrayBuffer.t) ->
          fun ?byteOffset:(x4150 : int option) ->
            fun ?length:(x4151 : int option) ->
              fun () ->
                Float32Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x4155)
                     (let x4152 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4152 "push"
                           [|(ArrayBuffer.t_to_js x4149)|]);
                      (match x4150 with
                       | Some x4154 ->
                           ignore
                             (Ojs.call x4152 "push" [|(Ojs.int_to_js x4154)|])
                       | None -> ());
                      (match x4151 with
                       | Some x4153 ->
                           ignore
                             (Ojs.call x4152 "push" [|(Ojs.int_to_js x4153)|])
                       | None -> ());
                      x4152))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x4156 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x4156) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Float32Array.t) =
      fun (x4160 : t) ->
        fun (x4157 : int list) ->
          Float32Array.t_of_js
            (let x4161 = t_to_js x4160 in
             Ojs.call (Ojs.get_prop_ascii x4161 "of") "apply"
               [|x4161;((let x4158 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x4159 : int) ->
                              ignore
                                (Ojs.call x4158 "push"
                                   [|(Ojs.int_to_js x4159)|])) x4157;
                         x4158))|])
    let (from : t -> array:int Array.t -> Float32Array.t) =
      fun (x4164 : t) ->
        fun ~array:(x4162 : int Array.t) ->
          Float32Array.t_of_js
            (Ojs.call (t_to_js x4164) "from"
               [|(Array.t_to_js Ojs.int_to_js x4162)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Float32Array.t)
      =
      fun (x4173 : t) ->
        fun ~array:(x4165 : 'T Array.t) ->
          fun ~mapfn:(x4166 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x4167 : any option) ->
              fun () ->
                Float32Array.t_of_js
                  (let x4174 = t_to_js x4173 in
                   Ojs.call (Ojs.get_prop_ascii x4174 "from") "apply"
                     [|x4174;((let x4168 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4168 "push"
                                    [|(Array.t_to_js Obj.magic x4165)|]);
                               ignore
                                 (Ojs.call x4168 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4170 : Ojs.t) ->
                                            fun (x4171 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4166 ~v:(Obj.magic x4170)
                                                   ~k:(Ojs.int_of_js x4171))))|]);
                               (match x4167 with
                                | Some x4169 ->
                                    ignore
                                      (Ojs.call x4168 "push"
                                         [|(any_to_js x4169)|])
                                | None -> ());
                               x4168))|])
  end
let (float32Array : Float32ArrayConstructor.t) =
  Float32ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Float32Array")
module Float64Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4176 : Ojs.t) -> x4176
    and t_to_js : t -> Ojs.t = fun (x4175 : Ojs.t) -> x4175
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x4177 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x4177) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x4178 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x4178) "buffer")
    let (get_byteLength : t -> int) =
      fun (x4179 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4179) "byteLength")
    let (get_byteOffset : t -> int) =
      fun (x4180 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4180) "byteOffset")
    let (copyWithin : t -> target:int -> start:int -> ?end_:int -> unit -> t)
      =
      fun (x4186 : t) ->
        fun ~target:(x4181 : int) ->
          fun ~start:(x4182 : int) ->
            fun ?end_:(x4183 : int option) ->
              fun () ->
                t_of_js
                  (let x4187 = t_to_js x4186 in
                   Ojs.call (Ojs.get_prop_ascii x4187 "copyWithin") "apply"
                     [|x4187;((let x4184 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4184 "push"
                                    [|(Ojs.int_to_js x4181)|]);
                               ignore
                                 (Ojs.call x4184 "push"
                                    [|(Ojs.int_to_js x4182)|]);
                               (match x4183 with
                                | Some x4185 ->
                                    ignore
                                      (Ojs.call x4184 "push"
                                         [|(Ojs.int_to_js x4185)|])
                                | None -> ());
                               x4184))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x4195 : t) ->
        fun (x4188 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x4189 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x4196 = t_to_js x4195 in
                 Ojs.call (Ojs.get_prop_ascii x4196 "every") "apply"
                   [|x4196;((let x4190 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4190 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4192 : Ojs.t) ->
                                          fun (x4193 : Ojs.t) ->
                                            fun (x4194 : Ojs.t) ->
                                              unknown_to_js
                                                (x4188
                                                   ~value:(Ojs.int_of_js
                                                             x4192)
                                                   ~index:(Ojs.int_of_js
                                                             x4193)
                                                   ~array:(t_of_js x4194))))|]);
                             (match x4189 with
                              | Some x4191 ->
                                  ignore
                                    (Ojs.call x4190 "push"
                                       [|(any_to_js x4191)|])
                              | None -> ());
                             x4190))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x4203 : t) ->
        fun ~value:(x4197 : int) ->
          fun ?start:(x4198 : int option) ->
            fun ?end_:(x4199 : int option) ->
              fun () ->
                t_of_js
                  (let x4204 = t_to_js x4203 in
                   Ojs.call (Ojs.get_prop_ascii x4204 "fill") "apply"
                     [|x4204;((let x4200 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4200 "push"
                                    [|(Ojs.int_to_js x4197)|]);
                               (match x4198 with
                                | Some x4202 ->
                                    ignore
                                      (Ojs.call x4200 "push"
                                         [|(Ojs.int_to_js x4202)|])
                                | None -> ());
                               (match x4199 with
                                | Some x4201 ->
                                    ignore
                                      (Ojs.call x4200 "push"
                                         [|(Ojs.int_to_js x4201)|])
                                | None -> ());
                               x4200))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x4212 : t) ->
        fun (x4205 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x4206 : any option) ->
            fun () ->
              t_of_js
                (let x4213 = t_to_js x4212 in
                 Ojs.call (Ojs.get_prop_ascii x4213 "filter") "apply"
                   [|x4213;((let x4207 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4207 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4209 : Ojs.t) ->
                                          fun (x4210 : Ojs.t) ->
                                            fun (x4211 : Ojs.t) ->
                                              any_to_js
                                                (x4205
                                                   ~value:(Ojs.int_of_js
                                                             x4209)
                                                   ~index:(Ojs.int_of_js
                                                             x4210)
                                                   ~array:(t_of_js x4211))))|]);
                             (match x4206 with
                              | Some x4208 ->
                                  ignore
                                    (Ojs.call x4207 "push"
                                       [|(any_to_js x4208)|])
                              | None -> ());
                             x4207))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x4221 : t) ->
        fun (x4214 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x4215 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x4222 = t_to_js x4221 in
                 Ojs.call (Ojs.get_prop_ascii x4222 "find") "apply"
                   [|x4222;((let x4216 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4216 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4218 : Ojs.t) ->
                                          fun (x4219 : Ojs.t) ->
                                            fun (x4220 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x4214
                                                   ~value:(Ojs.int_of_js
                                                             x4218)
                                                   ~index:(Ojs.int_of_js
                                                             x4219)
                                                   ~obj:(t_of_js x4220))))|]);
                             (match x4215 with
                              | Some x4217 ->
                                  ignore
                                    (Ojs.call x4216 "push"
                                       [|(any_to_js x4217)|])
                              | None -> ());
                             x4216))|])
    let (findIndex :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x4231 : t) ->
        fun (x4224 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x4225 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x4232 = t_to_js x4231 in
                 Ojs.call (Ojs.get_prop_ascii x4232 "findIndex") "apply"
                   [|x4232;((let x4226 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4226 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4228 : Ojs.t) ->
                                          fun (x4229 : Ojs.t) ->
                                            fun (x4230 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x4224
                                                   ~value:(Ojs.int_of_js
                                                             x4228)
                                                   ~index:(Ojs.int_of_js
                                                             x4229)
                                                   ~obj:(t_of_js x4230))))|]);
                             (match x4225 with
                              | Some x4227 ->
                                  ignore
                                    (Ojs.call x4226 "push"
                                       [|(any_to_js x4227)|])
                              | None -> ());
                             x4226))|])
    let (forEach :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4240 : t) ->
        fun ~callbackfn:(x4233 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x4234 : any option) ->
            fun () ->
              ignore
                (let x4241 = t_to_js x4240 in
                 Ojs.call (Ojs.get_prop_ascii x4241 "forEach") "apply"
                   [|x4241;((let x4235 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4235 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4237 : Ojs.t) ->
                                          fun (x4238 : Ojs.t) ->
                                            fun (x4239 : Ojs.t) ->
                                              x4233
                                                ~value:(Ojs.int_of_js x4237)
                                                ~index:(Ojs.int_of_js x4238)
                                                ~array:(t_of_js x4239)))|]);
                             (match x4234 with
                              | Some x4236 ->
                                  ignore
                                    (Ojs.call x4235 "push"
                                       [|(any_to_js x4236)|])
                              | None -> ());
                             x4235))|])
    let (indexOf : t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x4246 : t) ->
        fun ~searchElement:(x4242 : int) ->
          fun ?fromIndex:(x4243 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4247 = t_to_js x4246 in
                 Ojs.call (Ojs.get_prop_ascii x4247 "indexOf") "apply"
                   [|x4247;((let x4244 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4244 "push"
                                  [|(Ojs.int_to_js x4242)|]);
                             (match x4243 with
                              | Some x4245 ->
                                  ignore
                                    (Ojs.call x4244 "push"
                                       [|(Ojs.int_to_js x4245)|])
                              | None -> ());
                             x4244))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x4251 : t) ->
        fun ?separator:(x4248 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x4252 = t_to_js x4251 in
               Ojs.call (Ojs.get_prop_ascii x4252 "join") "apply"
                 [|x4252;((let x4249 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4248 with
                            | Some x4250 ->
                                ignore
                                  (Ojs.call x4249 "push"
                                     [|(Ojs.string_to_js x4250)|])
                            | None -> ());
                           x4249))|])
    let (lastIndexOf :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x4257 : t) ->
        fun ~searchElement:(x4253 : int) ->
          fun ?fromIndex:(x4254 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4258 = t_to_js x4257 in
                 Ojs.call (Ojs.get_prop_ascii x4258 "lastIndexOf") "apply"
                   [|x4258;((let x4255 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4255 "push"
                                  [|(Ojs.int_to_js x4253)|]);
                             (match x4254 with
                              | Some x4256 ->
                                  ignore
                                    (Ojs.call x4255 "push"
                                       [|(Ojs.int_to_js x4256)|])
                              | None -> ());
                             x4255))|])
    let (get_length : t -> int) =
      fun (x4259 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4259) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x4267 : t) ->
        fun ~callbackfn:(x4260 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x4261 : any option) ->
            fun () ->
              t_of_js
                (let x4268 = t_to_js x4267 in
                 Ojs.call (Ojs.get_prop_ascii x4268 "map") "apply"
                   [|x4268;((let x4262 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4262 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4264 : Ojs.t) ->
                                          fun (x4265 : Ojs.t) ->
                                            fun (x4266 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4260
                                                   ~value:(Ojs.int_of_js
                                                             x4264)
                                                   ~index:(Ojs.int_of_js
                                                             x4265)
                                                   ~array:(t_of_js x4266))))|]);
                             (match x4261 with
                              | Some x4263 ->
                                  ignore
                                    (Ojs.call x4262 "push"
                                       [|(any_to_js x4263)|])
                              | None -> ());
                             x4262))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4274 : t) ->
        fun
          ~callbackfn:(x4269 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4274) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x4270 : Ojs.t) ->
                       fun (x4271 : Ojs.t) ->
                         fun (x4272 : Ojs.t) ->
                           fun (x4273 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4269 ~previousValue:(Ojs.int_of_js x4270)
                                  ~currentValue:(Ojs.int_of_js x4271)
                                  ~currentIndex:(Ojs.int_of_js x4272)
                                  ~array:(t_of_js x4273))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4281 : t) ->
        fun
          ~callbackfn:(x4275 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4280 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4281) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4276 : Ojs.t) ->
                         fun (x4277 : Ojs.t) ->
                           fun (x4278 : Ojs.t) ->
                             fun (x4279 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4275 ~previousValue:(Ojs.int_of_js x4276)
                                    ~currentValue:(Ojs.int_of_js x4277)
                                    ~currentIndex:(Ojs.int_of_js x4278)
                                    ~array:(t_of_js x4279))));(Ojs.int_to_js
                                                                 x4280)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4288 : t) ->
        fun
          ~callbackfn:(x4282 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4287 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4288) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4283 : Ojs.t) ->
                         fun (x4284 : Ojs.t) ->
                           fun (x4285 : Ojs.t) ->
                             fun (x4286 : Ojs.t) ->
                               Obj.magic
                                 (x4282 ~previousValue:(Obj.magic x4283)
                                    ~currentValue:(Ojs.int_of_js x4284)
                                    ~currentIndex:(Ojs.int_of_js x4285)
                                    ~array:(t_of_js x4286))));(Obj.magic
                                                                 x4287)|])
    let (reduceRight :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4294 : t) ->
        fun
          ~callbackfn:(x4289 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4294) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x4290 : Ojs.t) ->
                       fun (x4291 : Ojs.t) ->
                         fun (x4292 : Ojs.t) ->
                           fun (x4293 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4289 ~previousValue:(Ojs.int_of_js x4290)
                                  ~currentValue:(Ojs.int_of_js x4291)
                                  ~currentIndex:(Ojs.int_of_js x4292)
                                  ~array:(t_of_js x4293))))|])
    let (reduceRight' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4301 : t) ->
        fun
          ~callbackfn:(x4295 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4300 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4301) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4296 : Ojs.t) ->
                         fun (x4297 : Ojs.t) ->
                           fun (x4298 : Ojs.t) ->
                             fun (x4299 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4295 ~previousValue:(Ojs.int_of_js x4296)
                                    ~currentValue:(Ojs.int_of_js x4297)
                                    ~currentIndex:(Ojs.int_of_js x4298)
                                    ~array:(t_of_js x4299))));(Ojs.int_to_js
                                                                 x4300)|])
    let (reduceRight'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4308 : t) ->
        fun
          ~callbackfn:(x4302 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4307 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4308) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4303 : Ojs.t) ->
                         fun (x4304 : Ojs.t) ->
                           fun (x4305 : Ojs.t) ->
                             fun (x4306 : Ojs.t) ->
                               Obj.magic
                                 (x4302 ~previousValue:(Obj.magic x4303)
                                    ~currentValue:(Ojs.int_of_js x4304)
                                    ~currentIndex:(Ojs.int_of_js x4305)
                                    ~array:(t_of_js x4306))));(Obj.magic
                                                                 x4307)|])
    let (reverse : t -> t) =
      fun (x4309 : t) -> t_of_js (Ojs.call (t_to_js x4309) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x4315 : t) ->
        fun ~array:(x4310 : int Array.t) ->
          fun ?offset:(x4311 : int option) ->
            fun () ->
              ignore
                (let x4316 = t_to_js x4315 in
                 Ojs.call (Ojs.get_prop_ascii x4316 "set") "apply"
                   [|x4316;((let x4312 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4312 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x4310)|]);
                             (match x4311 with
                              | Some x4313 ->
                                  ignore
                                    (Ojs.call x4312 "push"
                                       [|(Ojs.int_to_js x4313)|])
                              | None -> ());
                             x4312))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x4322 : t) ->
        fun ?start:(x4317 : int option) ->
          fun ?end_:(x4318 : int option) ->
            fun () ->
              t_of_js
                (let x4323 = t_to_js x4322 in
                 Ojs.call (Ojs.get_prop_ascii x4323 "slice") "apply"
                   [|x4323;((let x4319 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4317 with
                              | Some x4321 ->
                                  ignore
                                    (Ojs.call x4319 "push"
                                       [|(Ojs.int_to_js x4321)|])
                              | None -> ());
                             (match x4318 with
                              | Some x4320 ->
                                  ignore
                                    (Ojs.call x4319 "push"
                                       [|(Ojs.int_to_js x4320)|])
                              | None -> ());
                             x4319))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x4331 : t) ->
        fun (x4324 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x4325 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x4332 = t_to_js x4331 in
                 Ojs.call (Ojs.get_prop_ascii x4332 "some") "apply"
                   [|x4332;((let x4326 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4326 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4328 : Ojs.t) ->
                                          fun (x4329 : Ojs.t) ->
                                            fun (x4330 : Ojs.t) ->
                                              unknown_to_js
                                                (x4324
                                                   ~value:(Ojs.int_of_js
                                                             x4328)
                                                   ~index:(Ojs.int_of_js
                                                             x4329)
                                                   ~array:(t_of_js x4330))))|]);
                             (match x4325 with
                              | Some x4327 ->
                                  ignore
                                    (Ojs.call x4326 "push"
                                       [|(any_to_js x4327)|])
                              | None -> ());
                             x4326))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x4338 : t) ->
        fun ?compareFn:(x4333 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x4339 = t_to_js x4338 in
               Ojs.call (Ojs.get_prop_ascii x4339 "sort") "apply"
                 [|x4339;((let x4334 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4333 with
                            | Some x4335 ->
                                ignore
                                  (Ojs.call x4334 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x4336 : Ojs.t) ->
                                             fun (x4337 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x4335
                                                    ~a:(Ojs.int_of_js x4336)
                                                    ~b:(Ojs.int_of_js x4337))))|])
                            | None -> ());
                           x4334))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x4345 : t) ->
        fun ?begin_:(x4340 : int option) ->
          fun ?end_:(x4341 : int option) ->
            fun () ->
              t_of_js
                (let x4346 = t_to_js x4345 in
                 Ojs.call (Ojs.get_prop_ascii x4346 "subarray") "apply"
                   [|x4346;((let x4342 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4340 with
                              | Some x4344 ->
                                  ignore
                                    (Ojs.call x4342 "push"
                                       [|(Ojs.int_to_js x4344)|])
                              | None -> ());
                             (match x4341 with
                              | Some x4343 ->
                                  ignore
                                    (Ojs.call x4342 "push"
                                       [|(Ojs.int_to_js x4343)|])
                              | None -> ());
                             x4342))|])
    let (toString : t -> string) =
      fun (x4347 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4347) "toString" [||])
    let (valueOf : t -> t) =
      fun (x4348 : t) -> t_of_js (Ojs.call (t_to_js x4348) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x4349 : t) ->
        fun (x4350 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x4349) x4350)
    let (set : t -> int -> int -> unit) =
      fun (x4351 : t) ->
        fun (x4352 : int) ->
          fun (x4353 : int) ->
            Ojs.array_set (t_to_js x4351) x4352 (Ojs.int_to_js x4353)
    let (create : length:int -> t) =
      fun ~length:(x4354 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(Ojs.int_to_js x4354)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x4355 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x4357 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x4357) x4355)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x4359 : ArrayBuffer.t) ->
        fun ?byteOffset:(x4360 : int option) ->
          fun ?length:(x4361 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Float64Array")
                   (let x4362 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4362 "push" [|(ArrayBuffer.t_to_js x4359)|]);
                    (match x4360 with
                     | Some x4364 ->
                         ignore
                           (Ojs.call x4362 "push" [|(Ojs.int_to_js x4364)|])
                     | None -> ());
                    (match x4361 with
                     | Some x4363 ->
                         ignore
                           (Ojs.call x4362 "push" [|(Ojs.int_to_js x4363)|])
                     | None -> ());
                    x4362))
    let (get_BYTES_PER_ELEMENT : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float64Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x4365 : int list) ->
        t_of_js
          (let x4368 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
           Ojs.call (Ojs.get_prop_ascii x4368 "of") "apply"
             [|x4368;((let x4366 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4367 : int) ->
                            ignore
                              (Ojs.call x4366 "push"
                                 [|(Ojs.int_to_js x4367)|])) x4365;
                       x4366))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x4369 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Float64Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x4369)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x4371 : 'T Array.t) ->
        fun ~mapfn:(x4372 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x4373 : any option) ->
            fun () ->
              t_of_js
                (let x4379 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
                 Ojs.call (Ojs.get_prop_ascii x4379 "from") "apply"
                   [|x4379;((let x4374 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4374 "push"
                                  [|(Array.t_to_js Obj.magic x4371)|]);
                             ignore
                               (Ojs.call x4374 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x4376 : Ojs.t) ->
                                          fun (x4377 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x4372 ~v:(Obj.magic x4376)
                                                 ~k:(Ojs.int_of_js x4377))))|]);
                             (match x4373 with
                              | Some x4375 ->
                                  ignore
                                    (Ojs.call x4374 "push"
                                       [|(any_to_js x4375)|])
                              | None -> ());
                             x4374))|])
  end
module Float64ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4381 : Ojs.t) -> x4381
    and t_to_js : t -> Ojs.t = fun (x4380 : Ojs.t) -> x4380
    let (get_prototype : t -> Float64Array.t) =
      fun (x4382 : t) ->
        Float64Array.t_of_js (Ojs.get_prop_ascii (t_to_js x4382) "prototype")
    let (create : t -> length:int -> Float64Array.t) =
      fun (x4384 : t) ->
        fun ~length:(x4383 : int) ->
          Float64Array.t_of_js
            (Ojs.new_obj (t_to_js x4384) [|(Ojs.int_to_js x4383)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Float64Array.t) =
      fun (x4389 : t) ->
        fun ~array:(x4385 : (ArrayBuffer.t, int Array.t) union2) ->
          Float64Array.t_of_js
            (Ojs.new_obj (t_to_js x4389)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x4387 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x4387) x4385)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Float64Array.t)
      =
      fun (x4396 : t) ->
        fun ~buffer:(x4390 : ArrayBuffer.t) ->
          fun ?byteOffset:(x4391 : int option) ->
            fun ?length:(x4392 : int option) ->
              fun () ->
                Float64Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x4396)
                     (let x4393 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4393 "push"
                           [|(ArrayBuffer.t_to_js x4390)|]);
                      (match x4391 with
                       | Some x4395 ->
                           ignore
                             (Ojs.call x4393 "push" [|(Ojs.int_to_js x4395)|])
                       | None -> ());
                      (match x4392 with
                       | Some x4394 ->
                           ignore
                             (Ojs.call x4393 "push" [|(Ojs.int_to_js x4394)|])
                       | None -> ());
                      x4393))
    let (get_BYTES_PER_ELEMENT : t -> int) =
      fun (x4397 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x4397) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Float64Array.t) =
      fun (x4401 : t) ->
        fun (x4398 : int list) ->
          Float64Array.t_of_js
            (let x4402 = t_to_js x4401 in
             Ojs.call (Ojs.get_prop_ascii x4402 "of") "apply"
               [|x4402;((let x4399 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x4400 : int) ->
                              ignore
                                (Ojs.call x4399 "push"
                                   [|(Ojs.int_to_js x4400)|])) x4398;
                         x4399))|])
    let (from : t -> array:int Array.t -> Float64Array.t) =
      fun (x4405 : t) ->
        fun ~array:(x4403 : int Array.t) ->
          Float64Array.t_of_js
            (Ojs.call (t_to_js x4405) "from"
               [|(Array.t_to_js Ojs.int_to_js x4403)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Float64Array.t)
      =
      fun (x4414 : t) ->
        fun ~array:(x4406 : 'T Array.t) ->
          fun ~mapfn:(x4407 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x4408 : any option) ->
              fun () ->
                Float64Array.t_of_js
                  (let x4415 = t_to_js x4414 in
                   Ojs.call (Ojs.get_prop_ascii x4415 "from") "apply"
                     [|x4415;((let x4409 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4409 "push"
                                    [|(Array.t_to_js Obj.magic x4406)|]);
                               ignore
                                 (Ojs.call x4409 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4411 : Ojs.t) ->
                                            fun (x4412 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4407 ~v:(Obj.magic x4411)
                                                   ~k:(Ojs.int_of_js x4412))))|]);
                               (match x4408 with
                                | Some x4410 ->
                                    ignore
                                      (Ojs.call x4409 "push"
                                         [|(any_to_js x4410)|])
                                | None -> ());
                               x4409))|])
  end
let (float64Array : Float64ArrayConstructor.t) =
  Float64ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Float64Array")
include struct include Intl end
module DateTimeFormat =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4417 : Ojs.t) -> x4417
    and t_to_js : t -> Ojs.t = fun (x4416 : Ojs.t) -> x4416
    let (format : t -> ?date:Date.t or_number -> unit -> string) =
      fun (x4422 : t) ->
        fun ?date:(x4418 : Date.t or_number option) ->
          fun () ->
            Ojs.string_of_js
              (let x4423 = t_to_js x4422 in
               Ojs.call (Ojs.get_prop_ascii x4423 "format") "apply"
                 [|x4423;((let x4419 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4418 with
                            | Some x4420 ->
                                ignore
                                  (Ojs.call x4419 "push"
                                     [|(or_number_to_js Date.t_to_js x4420)|])
                            | None -> ());
                           x4419))|])
    let (resolvedOptions : t -> ResolvedDateTimeFormatOptions.t) =
      fun (x4424 : t) ->
        ResolvedDateTimeFormatOptions.t_of_js
          (Ojs.call (t_to_js x4424) "resolvedOptions" [||])
  end
let (dateTimeFormat : anonymous_interface_3) =
  anonymous_interface_3_of_js
    (Ojs.get_prop_ascii Ojs.global "DateTimeFormat")
