[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
type never = Ojs.t
let rec never_of_js : Ojs.t -> never = fun (x2 : Ojs.t) -> x2
and never_to_js : never -> Ojs.t = fun (x1 : Ojs.t) -> x1
module Never =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    exception Ts_Never 
    let absurd _ = raise Ts_Never
  end
type any = Ojs.t
let rec any_of_js : Ojs.t -> any = fun (x6 : Ojs.t) -> x6
and any_to_js : any -> Ojs.t = fun (x5 : Ojs.t) -> x5
module Any =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> x8
    and t_to_js : t -> Ojs.t = fun (x7 : Ojs.t) -> x7
    let unsafe_cast x = Obj.magic x
  end
type unknown = Ojs.t
let rec unknown_of_js : Ojs.t -> unknown = fun (x10 : Ojs.t) -> x10
and unknown_to_js : unknown -> Ojs.t = fun (x9 : Ojs.t) -> x9
module Unknown =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x12 : Ojs.t) -> x12
    and t_to_js : t -> Ojs.t = fun (x11 : Ojs.t) -> x11
    let unsafe_cast x = Obj.magic x
  end
type ('t, +'a) enum = 'a
let enum_to_js (_ : 't -> Ojs.t) (f : 'a -> Ojs.t) (e : ('t, 'a) enum) =
  (f e : Ojs.t)
let enum_of_js (_ : Ojs.t -> 't) (f : Ojs.t -> 'a) (e : Ojs.t) =
  (f e : ('t, 'a) enum)
module Enum =
  struct
    type ('t, +'a) t = ('t, 'a) enum
    let t_to_js = enum_to_js
    let t_of_js = enum_of_js
    let get_value x = x
  end
type untyped_object = Ojs.t
let rec untyped_object_of_js : Ojs.t -> untyped_object =
  fun (x14 : Ojs.t) -> x14
and untyped_object_to_js : untyped_object -> Ojs.t = fun (x13 : Ojs.t) -> x13
type untyped_function = Ojs.t
let rec untyped_function_of_js : Ojs.t -> untyped_function =
  fun (x16 : Ojs.t) -> x16
and untyped_function_to_js : untyped_function -> Ojs.t =
  fun (x15 : Ojs.t) -> x15
type symbol = Ojs.t
let rec symbol_of_js : Ojs.t -> symbol = fun (x18 : Ojs.t) -> x18
and symbol_to_js : symbol -> Ojs.t = fun (x17 : Ojs.t) -> x17
type regexp = Ojs.t
let rec regexp_of_js : Ojs.t -> regexp = fun (x20 : Ojs.t) -> x20
and regexp_to_js : regexp -> Ojs.t = fun (x19 : Ojs.t) -> x19
type bigint = Ojs.t
let rec bigint_of_js : Ojs.t -> bigint = fun (x22 : Ojs.t) -> x22
and bigint_to_js : bigint -> Ojs.t = fun (x21 : Ojs.t) -> x21
type 'a or_null = 'a option
let rec or_null_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_null = fun (type
  __a) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (x25 : Ojs.t) -> Ojs.option_of_js __a_of_js x25
and or_null_to_js : 'a . ('a -> Ojs.t) -> 'a or_null -> Ojs.t = fun (type
  __a) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (x23 : __a option) -> Ojs.option_to_js __a_to_js x23
type 'a or_undefined = 'a option
let rec or_undefined_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_undefined =
  fun (type __a) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (x29 : Ojs.t) -> Ojs.option_of_js __a_of_js x29
and or_undefined_to_js : 'a . ('a -> Ojs.t) -> 'a or_undefined -> Ojs.t = fun
  (type __a) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (x27 : __a option) -> Ojs.option_to_js __a_to_js x27
type 'a or_null_or_undefined = 'a option
let rec or_null_or_undefined_of_js :
  'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_null_or_undefined = fun (type __a) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (x33 : Ojs.t) -> Ojs.option_of_js __a_of_js x33
and or_null_or_undefined_to_js :
  'a . ('a -> Ojs.t) -> 'a or_null_or_undefined -> Ojs.t = fun (type __a) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (x31 : __a option) -> Ojs.option_to_js __a_to_js x31
type ('a, 'b) and_ = Ojs.t
let rec and__of_js :
  'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) and_ = fun
  (type __a) -> fun (type __b) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) -> fun (x36 : Ojs.t) -> x36
and and__to_js :
  'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) and_ -> Ojs.t = fun
  (type __a) -> fun (type __b) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) -> fun (x35 : Ojs.t) -> x35
module And =
  struct
    type ('a, 'b) t = ('a, 'b) and_
    let rec t_of_js :
      'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_of_js : Ojs.t -> __a) ->
        fun (__b_of_js : Ojs.t -> __b) ->
          fun (x40 : Ojs.t) -> and__of_js __a_of_js __b_of_js x40
    and t_to_js :
      'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) t -> Ojs.t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_to_js : __a -> Ojs.t) ->
        fun (__b_to_js : __b -> Ojs.t) ->
          fun (x37 : (__a, __b) and_) -> and__to_js __a_to_js __b_to_js x37
    let car (x : ('a, 'b) t) = (Obj.magic x : 'a)
    let cdr (x : ('a, 'b) t) = (Obj.magic x : 'b)
  end
type ('a, 'b) intersection2 = ('b, 'a) and_
let rec intersection2_of_js :
  'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) intersection2 =
  fun (type __a) -> fun (type __b) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (x46 : Ojs.t) -> and__of_js __b_of_js __a_of_js x46
and intersection2_to_js :
  'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) intersection2 -> Ojs.t =
  fun (type __a) -> fun (type __b) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (x43 : (__b, __a) and_) -> and__to_js __b_to_js __a_to_js x43
type ('a, 'b, 'c) intersection3 = (('b, 'c) intersection2, 'a) and_
let rec intersection3_of_js :
  'a 'b 'c .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) -> (Ojs.t -> 'c) -> Ojs.t -> ('a, 'b, 'c) intersection3
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (x54 : Ojs.t) ->
          and__of_js
            (fun (x55 : Ojs.t) -> intersection2_of_js __b_of_js __c_of_js x55)
            __a_of_js x54
and intersection3_to_js :
  'a 'b 'c .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) -> ('c -> Ojs.t) -> ('a, 'b, 'c) intersection3 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (x49 : ((__b, __c) intersection2, __a) and_) ->
          and__to_js
            (fun (x50 : (__b, __c) intersection2) ->
               intersection2_to_js __b_to_js __c_to_js x50) __a_to_js x49
type ('a, 'b, 'c, 'd) intersection4 = (('b, 'c, 'd) intersection3, 'a) and_
let rec intersection4_of_js :
  'a 'b 'c 'd .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) -> Ojs.t -> ('a, 'b, 'c, 'd) intersection4
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (x65 : Ojs.t) ->
            and__of_js
              (fun (x66 : Ojs.t) ->
                 intersection3_of_js __b_of_js __c_of_js __d_of_js x66)
              __a_of_js x65
and intersection4_to_js :
  'a 'b 'c 'd .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) -> ('a, 'b, 'c, 'd) intersection4 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (x59 : ((__b, __c, __d) intersection3, __a) and_) ->
            and__to_js
              (fun (x60 : (__b, __c, __d) intersection3) ->
                 intersection3_to_js __b_to_js __c_to_js __d_to_js x60)
              __a_to_js x59
type ('a, 'b, 'c, 'd, 'e) intersection5 =
  (('b, 'c, 'd, 'e) intersection4, 'a) and_
let rec intersection5_of_js :
  'a 'b 'c 'd 'e .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e) intersection5
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (x78 : Ojs.t) ->
              and__of_js
                (fun (x79 : Ojs.t) ->
                   intersection4_of_js __b_of_js __c_of_js __d_of_js
                     __e_of_js x79) __a_of_js x78
and intersection5_to_js :
  'a 'b 'c 'd 'e .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e) intersection5 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (x71 : ((__b, __c, __d, __e) intersection4, __a) and_) ->
              and__to_js
                (fun (x72 : (__b, __c, __d, __e) intersection4) ->
                   intersection4_to_js __b_to_js __c_to_js __d_to_js
                     __e_to_js x72) __a_to_js x71
type ('a, 'b, 'c, 'd, 'e, 'f) intersection6 =
  (('b, 'c, 'd, 'e, 'f) intersection5, 'a) and_
let rec intersection6_of_js :
  'a 'b 'c 'd 'e 'f .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f) intersection6
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (x93 : Ojs.t) ->
                and__of_js
                  (fun (x94 : Ojs.t) ->
                     intersection5_of_js __b_of_js __c_of_js __d_of_js
                       __e_of_js __f_of_js x94) __a_of_js x93
and intersection6_to_js :
  'a 'b 'c 'd 'e 'f .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('a, 'b, 'c, 'd, 'e, 'f) intersection6 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (x85 : ((__b, __c, __d, __e, __f) intersection5, __a) and_)
                ->
                and__to_js
                  (fun (x86 : (__b, __c, __d, __e, __f) intersection5) ->
                     intersection5_to_js __b_to_js __c_to_js __d_to_js
                       __e_to_js __f_to_js x86) __a_to_js x85
type ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7 =
  (('b, 'c, 'd, 'e, 'f, 'g) intersection6, 'a) and_
let rec intersection7_of_js :
  'a 'b 'c 'd 'e 'f 'g .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) ->
                  Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (x110 : Ojs.t) ->
                  and__of_js
                    (fun (x111 : Ojs.t) ->
                       intersection6_of_js __b_of_js __c_of_js __d_of_js
                         __e_of_js __f_of_js __g_of_js x111) __a_of_js x110
and intersection7_to_js :
  'a 'b 'c 'd 'e 'f 'g .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) ->
                  ('a, 'b, 'c, 'd, 'e, 'f, 'g) intersection7 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun
                  (x101 :
                    ((__b, __c, __d, __e, __f, __g) intersection6, __a) and_)
                  ->
                  and__to_js
                    (fun
                       (x102 : (__b, __c, __d, __e, __f, __g) intersection6)
                       ->
                       intersection6_to_js __b_to_js __c_to_js __d_to_js
                         __e_to_js __f_to_js __g_to_js x102) __a_to_js x101
type ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8 =
  (('b, 'c, 'd, 'e, 'f, 'g, 'h) intersection7, 'a) and_
let rec intersection8_of_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) ->
                  (Ojs.t -> 'h) ->
                    Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (__h_of_js : Ojs.t -> __h) ->
                  fun (x129 : Ojs.t) ->
                    and__of_js
                      (fun (x130 : Ojs.t) ->
                         intersection7_of_js __b_of_js __c_of_js __d_of_js
                           __e_of_js __f_of_js __g_of_js __h_of_js x130)
                      __a_of_js x129
and intersection8_to_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) ->
                  ('h -> Ojs.t) ->
                    ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) intersection8 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun (__h_to_js : __h -> Ojs.t) ->
                  fun
                    (x119 :
                      ((__b, __c, __d, __e, __f, __g, __h) intersection7,
                        __a) and_)
                    ->
                    and__to_js
                      (fun
                         (x120 :
                           (__b, __c, __d, __e, __f, __g, __h) intersection7)
                         ->
                         intersection7_to_js __b_to_js __c_to_js __d_to_js
                           __e_to_js __f_to_js __g_to_js __h_to_js x120)
                      __a_to_js x119
module Intersection =
  struct
    let get_0 x = Obj.magic x
    let get_1 x = Obj.magic x
    let get_2 x = Obj.magic x
    let get_3 x = Obj.magic x
    let get_4 x = Obj.magic x
    let get_5 x = Obj.magic x
    let get_6 x = Obj.magic x
  end
type ('a, 'b) or_from_js =
  {
  a_of_js: Ojs.t -> 'a ;
  b_of_js: Ojs.t -> 'b ;
  value: Ojs.t }
type ('a, 'b) or_ =
  | A of 'a 
  | B of 'b 
  | FromJS of ('a, 'b) or_from_js 
let or__to_js a_to_js b_to_js =
  function | A a -> a_to_js a | B b -> b_to_js b | FromJS x -> x.value
let or__of_js a_of_js b_of_js value = FromJS { a_of_js; b_of_js; value }
module Or =
  struct
    type ('a, 'b) t = ('a, 'b) or_
    let rec t_of_js :
      'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_of_js : Ojs.t -> __a) ->
        fun (__b_of_js : Ojs.t -> __b) ->
          fun (x142 : Ojs.t) -> or__of_js __a_of_js __b_of_js x142
    and t_to_js :
      'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) t -> Ojs.t = fun
      (type __a) -> fun (type __b) ->
      fun (__a_to_js : __a -> Ojs.t) ->
        fun (__b_to_js : __b -> Ojs.t) ->
          fun (x139 : (__a, __b) or_) -> or__to_js __a_to_js __b_to_js x139
    let inl (x : 'a) = (A x : ('a, 'b) t)
    let inr (x : 'b) = (B x : ('a, 'b) t)
    let test ~is_left  ~is_right  =
      function
      | A a -> `Left a
      | B b -> `Right b
      | FromJS x ->
          if is_left x.value
          then `Left (x.a_of_js x.value)
          else
            if is_right x.value
            then `Right (x.b_of_js x.value)
            else `Other (x.value)
  end
type ('a, 'b) union2 = ('b, 'a) or_
let rec union2_of_js :
  'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) union2 = fun
  (type __a) -> fun (type __b) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (x148 : Ojs.t) -> or__of_js __b_of_js __a_of_js x148
and union2_to_js :
  'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) union2 -> Ojs.t = fun
  (type __a) -> fun (type __b) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (x145 : (__b, __a) or_) -> or__to_js __b_to_js __a_to_js x145
type ('a, 'b, 'c) union3 = (('b, 'c) union2, 'a) or_
let rec union3_of_js :
  'a 'b 'c .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) -> (Ojs.t -> 'c) -> Ojs.t -> ('a, 'b, 'c) union3
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (x156 : Ojs.t) ->
          or__of_js
            (fun (x157 : Ojs.t) -> union2_of_js __b_of_js __c_of_js x157)
            __a_of_js x156
and union3_to_js :
  'a 'b 'c .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) -> ('c -> Ojs.t) -> ('a, 'b, 'c) union3 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (x151 : ((__b, __c) union2, __a) or_) ->
          or__to_js
            (fun (x152 : (__b, __c) union2) ->
               union2_to_js __b_to_js __c_to_js x152) __a_to_js x151
type ('a, 'b, 'c, 'd) union4 = (('b, 'c, 'd) union3, 'a) or_
let rec union4_of_js :
  'a 'b 'c 'd .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) -> (Ojs.t -> 'd) -> Ojs.t -> ('a, 'b, 'c, 'd) union4
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (x167 : Ojs.t) ->
            or__of_js
              (fun (x168 : Ojs.t) ->
                 union3_of_js __b_of_js __c_of_js __d_of_js x168) __a_of_js
              x167
and union4_to_js :
  'a 'b 'c 'd .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) -> ('d -> Ojs.t) -> ('a, 'b, 'c, 'd) union4 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (x161 : ((__b, __c, __d) union3, __a) or_) ->
            or__to_js
              (fun (x162 : (__b, __c, __d) union3) ->
                 union3_to_js __b_to_js __c_to_js __d_to_js x162) __a_to_js
              x161
type ('a, 'b, 'c, 'd, 'e) union5 = (('b, 'c, 'd, 'e) union4, 'a) or_
let rec union5_of_js :
  'a 'b 'c 'd 'e .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e) union5
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (x180 : Ojs.t) ->
              or__of_js
                (fun (x181 : Ojs.t) ->
                   union4_of_js __b_of_js __c_of_js __d_of_js __e_of_js x181)
                __a_of_js x180
and union5_to_js :
  'a 'b 'c 'd 'e .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e) union5 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (x173 : ((__b, __c, __d, __e) union4, __a) or_) ->
              or__to_js
                (fun (x174 : (__b, __c, __d, __e) union4) ->
                   union4_to_js __b_to_js __c_to_js __d_to_js __e_to_js x174)
                __a_to_js x173
type ('a, 'b, 'c, 'd, 'e, 'f) union6 = (('b, 'c, 'd, 'e, 'f) union5, 'a) or_
let rec union6_of_js :
  'a 'b 'c 'd 'e 'f .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f) union6
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (x195 : Ojs.t) ->
                or__of_js
                  (fun (x196 : Ojs.t) ->
                     union5_of_js __b_of_js __c_of_js __d_of_js __e_of_js
                       __f_of_js x196) __a_of_js x195
and union6_to_js :
  'a 'b 'c 'd 'e 'f .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e, 'f) union6 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (x187 : ((__b, __c, __d, __e, __f) union5, __a) or_) ->
                or__to_js
                  (fun (x188 : (__b, __c, __d, __e, __f) union5) ->
                     union5_to_js __b_to_js __c_to_js __d_to_js __e_to_js
                       __f_to_js x188) __a_to_js x187
type ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7 =
  (('b, 'c, 'd, 'e, 'f, 'g) union6, 'a) or_
let rec union7_of_js :
  'a 'b 'c 'd 'e 'f 'g .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) -> Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (x212 : Ojs.t) ->
                  or__of_js
                    (fun (x213 : Ojs.t) ->
                       union6_of_js __b_of_js __c_of_js __d_of_js __e_of_js
                         __f_of_js __g_of_js x213) __a_of_js x212
and union7_to_js :
  'a 'b 'c 'd 'e 'f 'g .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) -> ('a, 'b, 'c, 'd, 'e, 'f, 'g) union7 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun (x203 : ((__b, __c, __d, __e, __f, __g) union6, __a) or_)
                  ->
                  or__to_js
                    (fun (x204 : (__b, __c, __d, __e, __f, __g) union6) ->
                       union6_to_js __b_to_js __c_to_js __d_to_js __e_to_js
                         __f_to_js __g_to_js x204) __a_to_js x203
type ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8 =
  (('b, 'c, 'd, 'e, 'f, 'g, 'h) union7, 'a) or_
let rec union8_of_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    (Ojs.t -> 'a) ->
      (Ojs.t -> 'b) ->
        (Ojs.t -> 'c) ->
          (Ojs.t -> 'd) ->
            (Ojs.t -> 'e) ->
              (Ojs.t -> 'f) ->
                (Ojs.t -> 'g) ->
                  (Ojs.t -> 'h) ->
                    Ojs.t -> ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_of_js : Ojs.t -> __a) ->
    fun (__b_of_js : Ojs.t -> __b) ->
      fun (__c_of_js : Ojs.t -> __c) ->
        fun (__d_of_js : Ojs.t -> __d) ->
          fun (__e_of_js : Ojs.t -> __e) ->
            fun (__f_of_js : Ojs.t -> __f) ->
              fun (__g_of_js : Ojs.t -> __g) ->
                fun (__h_of_js : Ojs.t -> __h) ->
                  fun (x231 : Ojs.t) ->
                    or__of_js
                      (fun (x232 : Ojs.t) ->
                         union7_of_js __b_of_js __c_of_js __d_of_js __e_of_js
                           __f_of_js __g_of_js __h_of_js x232) __a_of_js x231
and union8_to_js :
  'a 'b 'c 'd 'e 'f 'g 'h .
    ('a -> Ojs.t) ->
      ('b -> Ojs.t) ->
        ('c -> Ojs.t) ->
          ('d -> Ojs.t) ->
            ('e -> Ojs.t) ->
              ('f -> Ojs.t) ->
                ('g -> Ojs.t) ->
                  ('h -> Ojs.t) ->
                    ('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h) union8 -> Ojs.t
  = fun (type __a) -> fun (type __b) -> fun (type __c) -> fun (type __d) ->
  fun (type __e) -> fun (type __f) -> fun (type __g) -> fun (type __h) ->
  fun (__a_to_js : __a -> Ojs.t) ->
    fun (__b_to_js : __b -> Ojs.t) ->
      fun (__c_to_js : __c -> Ojs.t) ->
        fun (__d_to_js : __d -> Ojs.t) ->
          fun (__e_to_js : __e -> Ojs.t) ->
            fun (__f_to_js : __f -> Ojs.t) ->
              fun (__g_to_js : __g -> Ojs.t) ->
                fun (__h_to_js : __h -> Ojs.t) ->
                  fun
                    (x221 :
                      ((__b, __c, __d, __e, __f, __g, __h) union7, __a) or_)
                    ->
                    or__to_js
                      (fun
                         (x222 : (__b, __c, __d, __e, __f, __g, __h) union7)
                         ->
                         union7_to_js __b_to_js __c_to_js __d_to_js __e_to_js
                           __f_to_js __g_to_js __h_to_js x222) __a_to_js x221
module Union =
  struct
    let inject_0 x = Obj.magic x
    let inject_1 x = Obj.magic x
    let inject_2 x = Obj.magic x
    let inject_3 x = Obj.magic x
    let inject_4 x = Obj.magic x
    let inject_5 x = Obj.magic x
    let inject_6 x = Obj.magic x
  end
type 'a or_string = [ `String of string  | `Other of 'a ]
let rec or_string_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_string =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "string" -> `String (Ojs.string_of_js x)
      | _ -> `Other (a_of_js x)
and or_string_to_js : 'a . ('a -> Ojs.t) -> 'a or_string -> Ojs.t =
  fun a_to_js ->
    function | `String x -> Ojs.string_to_js x | `Other x -> a_to_js x
type 'a or_number = [ `Number of float  | `Other of 'a ]
let rec or_number_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_number =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "number" -> `Number (Ojs.float_of_js x)
      | _ -> `Other (a_of_js x)
and or_number_to_js : 'a . ('a -> Ojs.t) -> 'a or_number -> Ojs.t =
  fun a_to_js ->
    function | `Number x -> Ojs.float_to_js x | `Other x -> a_to_js x
type 'a or_boolean = [ `Boolean of bool  | `Other of 'a ]
let rec or_boolean_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_boolean =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "boolean" -> `Boolean (Ojs.bool_of_js x)
      | _ -> `Other (a_of_js x)
and or_boolean_to_js : 'a . ('a -> Ojs.t) -> 'a or_boolean -> Ojs.t =
  fun a_to_js ->
    function | `Boolean x -> Ojs.bool_to_js x | `Other x -> a_to_js x
type 'a or_symbol = [ `Symbol of symbol  | `Other of 'a ]
let rec or_symbol_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_symbol =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "symbol" -> `Symbol (symbol_of_js x)
      | _ -> `Other (a_of_js x)
and or_symbol_to_js : 'a . ('a -> Ojs.t) -> 'a or_symbol -> Ojs.t =
  fun a_to_js ->
    function | `Symbol x -> symbol_to_js x | `Other x -> a_to_js x
type 'a or_bigint = [ `BigInt of bigint  | `Other of 'a ]
let rec or_bigint_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a or_bigint =
  fun a_of_js ->
    fun x ->
      match Ojs.type_of x with
      | "bigint" -> `BigInt (bigint_of_js x)
      | _ -> `Other (a_of_js x)
and or_bigint_to_js : 'a . ('a -> Ojs.t) -> 'a or_bigint -> Ojs.t =
  fun a_to_js ->
    function | `BigInt x -> bigint_to_js x | `Other x -> a_to_js x
let (is_array : Ojs.t -> bool) =
  fun (x241 : Ojs.t) ->
    Ojs.bool_of_js
      (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "isArray" [|x241|])
type ('a, 't) or_array = [ `Array of 't list  | `Other of 'a ]
let rec or_array_of_js :
  'a 't . (Ojs.t -> 'a) -> (Ojs.t -> 't) -> Ojs.t -> ('a, 't) or_array =
  fun a_of_js ->
    fun t_of_js ->
      fun x ->
        if is_array x
        then `Array (Ojs.list_of_js t_of_js x)
        else `Other (a_of_js x)
and or_array_to_js :
  'a 't . ('a -> Ojs.t) -> ('t -> Ojs.t) -> ('a, 't) or_array -> Ojs.t =
  fun a_to_js ->
    fun t_to_js ->
      function | `Array x -> Ojs.list_to_js t_to_js x | `Other x -> a_to_js x
type ('a, 'cases) or_enum = [ `Enum of 'cases  | `Other of 'a ]
let rec or_enum_of_js :
  'a 'cases .
    (Ojs.t -> 'a) -> (Ojs.t -> 'cases) -> Ojs.t -> ('a, 'cases) or_enum
  =
  fun a_of_js ->
    fun cases_of_js ->
      fun x -> try `Enum (cases_of_js x) with | _ -> `Other (a_of_js x)
and or_enum_to_js :
  'a 'cases .
    ('a -> Ojs.t) -> ('cases -> Ojs.t) -> ('a, 'cases) or_enum -> Ojs.t
  =
  fun a_to_js ->
    fun cases_to_js ->
      function | `Enum cases -> cases_to_js cases | `Other x -> a_to_js x
external pure_js_expr : string -> Ojs.t = "caml_pure_js_expr"
let (nan : int) = Ojs.int_of_js (Ojs.get_prop_ascii Ojs.global "NaN")
let (infinity : int) =
  Ojs.int_of_js (Ojs.get_prop_ascii Ojs.global "Infinity")
let (eval : string -> any) =
  fun (x242 : string) ->
    any_of_js (Ojs.call Ojs.global "eval" [|(Ojs.string_to_js x242)|])
let (parse_int : string -> ?radix:int -> unit -> int) =
  fun (x243 : string) ->
    fun ?radix:(x244 : int option) ->
      fun () ->
        Ojs.int_of_js
          (let x247 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x247 "parseInt") "apply"
             [|x247;((let x245 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x245 "push" [|(Ojs.string_to_js x243)|]);
                      (match x244 with
                       | Some x246 ->
                           ignore
                             (Ojs.call x245 "push" [|(Ojs.int_to_js x246)|])
                       | None -> ());
                      x245))|])
let (parse_float : string:string -> int) =
  fun ~string:(x248 : string) ->
    Ojs.int_of_js
      (Ojs.call Ojs.global "parseFloat" [|(Ojs.string_to_js x248)|])
let (is_nan : int -> bool) =
  fun (x249 : int) ->
    Ojs.bool_of_js (Ojs.call Ojs.global "isNaN" [|(Ojs.int_to_js x249)|])
let (is_finite : int -> bool) =
  fun (x250 : int) ->
    Ojs.bool_of_js (Ojs.call Ojs.global "isFinite" [|(Ojs.int_to_js x250)|])
let (decode_uri : string -> string) =
  fun (x251 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "decodeURI" [|(Ojs.string_to_js x251)|])
let (decode_uri_component : string -> string) =
  fun (x252 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "decodeURIComponent" [|(Ojs.string_to_js x252)|])
let (encode_uri : string -> string) =
  fun (x253 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "encodeURI" [|(Ojs.string_to_js x253)|])
let (encode_uri_component : bool or_string or_number -> string) =
  fun (x254 : bool or_string or_number) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "encodeURIComponent"
         [|(or_number_to_js
              (fun (x255 : bool or_string) ->
                 or_string_to_js Ojs.bool_to_js x255) x254)|])
let (escape : string -> string) =
  fun (x257 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "escape" [|(Ojs.string_to_js x257)|])
let (unescape : string -> string) =
  fun (x258 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "unescape" [|(Ojs.string_to_js x258)|])
module Symbol =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x260 : Ojs.t) -> x260
    and t_to_js : t -> Ojs.t = fun (x259 : Ojs.t) -> x259
    let (to_string : t -> string) =
      fun (x261 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x261) "toString" [||])
    let (value_of : t -> symbol) =
      fun (x262 : t) -> symbol_of_js (Ojs.call (t_to_js x262) "valueOf" [||])
  end
module PropertyKey =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x264 : Ojs.t) -> x264
    and t_to_js : t -> Ojs.t = fun (x263 : Ojs.t) -> x263
  end
module PropertyDescriptor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x266 : Ojs.t) -> x266
    and t_to_js : t -> Ojs.t = fun (x265 : Ojs.t) -> x265
    let (get_configurable : t -> bool) =
      fun (x267 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x267) "configurable")
    let (set_configurable : t -> bool -> unit) =
      fun (x268 : t) ->
        fun (x269 : bool) ->
          Ojs.set_prop_ascii (t_to_js x268) "configurable"
            (Ojs.bool_to_js x269)
    let (get_enumerable : t -> bool) =
      fun (x270 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x270) "enumerable")
    let (set_enumerable : t -> bool -> unit) =
      fun (x271 : t) ->
        fun (x272 : bool) ->
          Ojs.set_prop_ascii (t_to_js x271) "enumerable"
            (Ojs.bool_to_js x272)
    let (get_value : t -> any) =
      fun (x273 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x273) "value")
    let (set_value : t -> any -> unit) =
      fun (x274 : t) ->
        fun (x275 : any) ->
          Ojs.set_prop_ascii (t_to_js x274) "value" (any_to_js x275)
    let (get_writable : t -> bool) =
      fun (x276 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x276) "writable")
    let (set_writable : t -> bool -> unit) =
      fun (x277 : t) ->
        fun (x278 : bool) ->
          Ojs.set_prop_ascii (t_to_js x277) "writable" (Ojs.bool_to_js x278)
    let (get_ : t -> any) =
      fun (x279 : t) -> any_of_js (Ojs.call (t_to_js x279) "get" [||])
    let (set_ : t -> any -> unit) =
      fun (x281 : t) ->
        fun (x280 : any) ->
          ignore (Ojs.call (t_to_js x281) "set" [|(any_to_js x280)|])
  end
module PropertyDescriptorMap =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x283 : Ojs.t) -> x283
    and t_to_js : t -> Ojs.t = fun (x282 : Ojs.t) -> x282
    let (get : t -> string -> PropertyDescriptor.t) =
      fun (x284 : t) ->
        fun (x285 : string) ->
          PropertyDescriptor.t_of_js
            (Ojs.get_prop (t_to_js x284) (Ojs.string_to_js x285))
    let (set : t -> string -> PropertyDescriptor.t -> unit) =
      fun (x286 : t) ->
        fun (x287 : string) ->
          fun (x288 : PropertyDescriptor.t) ->
            Ojs.set_prop (t_to_js x286) (Ojs.string_to_js x287)
              (PropertyDescriptor.t_to_js x288)
  end
module Partial =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x290 : Ojs.t) -> x290
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x289 : Ojs.t) -> x289
  end
module Required =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x292 : Ojs.t) -> x292
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x291 : Ojs.t) -> x291
  end
module Readonly =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x294 : Ojs.t) -> x294
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x293 : Ojs.t) -> x293
  end
module Pick =
  struct
    type ('T, 'K) t = Ojs.t
    let rec t_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) -> fun (x296 : Ojs.t) -> x296
    and t_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) -> fun (x295 : Ojs.t) -> x295
  end
module Record =
  struct
    type ('K, 'T) t = Ojs.t
    let rec t_of_js :
      'K 'T . (Ojs.t -> 'K) -> (Ojs.t -> 'T) -> Ojs.t -> ('K, 'T) t = fun
      (type __K) -> fun (type __T) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__T_of_js : Ojs.t -> __T) -> fun (x298 : Ojs.t) -> x298
    and t_to_js :
      'K 'T . ('K -> Ojs.t) -> ('T -> Ojs.t) -> ('K, 'T) t -> Ojs.t = fun
      (type __K) -> fun (type __T) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) -> fun (x297 : Ojs.t) -> x297
  end
module Exclude =
  struct
    type ('T, 'U) t = Ojs.t
    let rec t_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) -> fun (x300 : Ojs.t) -> x300
    and t_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) -> fun (x299 : Ojs.t) -> x299
  end
module Extract =
  struct
    type ('T, 'U) t = Ojs.t
    let rec t_of_js :
      'T 'U . (Ojs.t -> 'T) -> (Ojs.t -> 'U) -> Ojs.t -> ('T, 'U) t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__U_of_js : Ojs.t -> __U) -> fun (x302 : Ojs.t) -> x302
    and t_to_js :
      'T 'U . ('T -> Ojs.t) -> ('U -> Ojs.t) -> ('T, 'U) t -> Ojs.t = fun
      (type __T) -> fun (type __U) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__U_to_js : __U -> Ojs.t) -> fun (x301 : Ojs.t) -> x301
  end
module Omit =
  struct
    type ('T, 'K) t = Ojs.t
    let rec t_of_js :
      'T 'K . (Ojs.t -> 'T) -> (Ojs.t -> 'K) -> Ojs.t -> ('T, 'K) t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (__K_of_js : Ojs.t -> __K) -> fun (x304 : Ojs.t) -> x304
    and t_to_js :
      'T 'K . ('T -> Ojs.t) -> ('K -> Ojs.t) -> ('T, 'K) t -> Ojs.t = fun
      (type __T) -> fun (type __K) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (__K_to_js : __K -> Ojs.t) -> fun (x303 : Ojs.t) -> x303
  end
module NonNullable =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x306 : Ojs.t) -> x306
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x305 : Ojs.t) -> x305
  end
module Parameters =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x308 : Ojs.t) -> x308
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x307 : Ojs.t) -> x307
  end
module ConstructorParameters =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x310 : Ojs.t) -> x310
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x309 : Ojs.t) -> x309
  end
module ReturnType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x312 : Ojs.t) -> x312
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x311 : Ojs.t) -> x311
  end
module InstanceType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x314 : Ojs.t) -> x314
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x313 : Ojs.t) -> x313
  end
module ThisType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x316 : Ojs.t) -> x316
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x315 : Ojs.t) -> x315
  end
module Function =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x318 : Ojs.t) -> x318
    and t_to_js : t -> Ojs.t = fun (x317 : Ojs.t) -> x317
    let (apply_ : t -> this:t -> thisArg:any -> ?argArray:any -> unit -> any)
      =
      fun (x324 : t) ->
        fun ~this:(x319 : t) ->
          fun ~thisArg:(x320 : any) ->
            fun ?argArray:(x321 : any option) ->
              fun () ->
                any_of_js
                  (let x325 = t_to_js x324 in
                   Ojs.call (Ojs.get_prop_ascii x325 "apply") "apply"
                     [|x325;((let x322 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x322 "push" [|(t_to_js x319)|]);
                              ignore
                                (Ojs.call x322 "push" [|(any_to_js x320)|]);
                              (match x321 with
                               | Some x323 ->
                                   ignore
                                     (Ojs.call x322 "push"
                                        [|(any_to_js x323)|])
                               | None -> ());
                              x322))|])
    let (call : t -> this:t -> thisArg:any -> argArray:any list -> any) =
      fun (x331 : t) ->
        fun ~this:(x326 : t) ->
          fun ~thisArg:(x327 : any) ->
            fun ~argArray:(x328 : any list) ->
              any_of_js
                (let x332 = t_to_js x331 in
                 Ojs.call (Ojs.get_prop_ascii x332 "call") "apply"
                   [|x332;((let x329 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x329 "push" [|(t_to_js x326)|]);
                            ignore
                              (Ojs.call x329 "push" [|(any_to_js x327)|]);
                            List.iter
                              (fun (x330 : any) ->
                                 ignore
                                   (Ojs.call x329 "push" [|(any_to_js x330)|]))
                              x328;
                            x329))|])
    let (bind : t -> this:t -> thisArg:any -> argArray:any list -> any) =
      fun (x338 : t) ->
        fun ~this:(x333 : t) ->
          fun ~thisArg:(x334 : any) ->
            fun ~argArray:(x335 : any list) ->
              any_of_js
                (let x339 = t_to_js x338 in
                 Ojs.call (Ojs.get_prop_ascii x339 "bind") "apply"
                   [|x339;((let x336 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x336 "push" [|(t_to_js x333)|]);
                            ignore
                              (Ojs.call x336 "push" [|(any_to_js x334)|]);
                            List.iter
                              (fun (x337 : any) ->
                                 ignore
                                   (Ojs.call x336 "push" [|(any_to_js x337)|]))
                              x335;
                            x336))|])
    let (to_string : t -> string) =
      fun (x340 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x340) "toString" [||])
    let (get_prototype : t -> any) =
      fun (x341 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x341) "prototype")
    let (set_prototype : t -> any -> unit) =
      fun (x342 : t) ->
        fun (x343 : any) ->
          Ojs.set_prop_ascii (t_to_js x342) "prototype" (any_to_js x343)
    let (get_length : t -> int) =
      fun (x344 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x344) "length")
    let (get_arguments : t -> any) =
      fun (x345 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x345) "arguments")
    let (set_arguments : t -> any -> unit) =
      fun (x346 : t) ->
        fun (x347 : any) ->
          Ojs.set_prop_ascii (t_to_js x346) "arguments" (any_to_js x347)
    let (get_caller : t -> t) =
      fun (x348 : t) -> t_of_js (Ojs.get_prop_ascii (t_to_js x348) "caller")
    let (set_caller : t -> t -> unit) =
      fun (x349 : t) ->
        fun (x350 : t) ->
          Ojs.set_prop_ascii (t_to_js x349) "caller" (t_to_js x350)
    let (create : string list -> t) =
      fun (x351 : string list) ->
        t_of_js
          (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Function")
             (let x352 =
                Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
              List.iter
                (fun (x353 : string) ->
                   ignore (Ojs.call x352 "push" [|(Ojs.string_to_js x353)|]))
                x351;
              x352))
  end
module FunctionConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x355 : Ojs.t) -> x355
    and t_to_js : t -> Ojs.t = fun (x354 : Ojs.t) -> x354
    let (create : t -> string list -> Function.t) =
      fun (x359 : t) ->
        fun (x356 : string list) ->
          Function.t_of_js
            (Ojs.new_obj_arr (t_to_js x359)
               (let x357 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x358 : string) ->
                     ignore
                       (Ojs.call x357 "push" [|(Ojs.string_to_js x358)|]))
                  x356;
                x357))
    let (apply : t -> string list -> Function.t) =
      fun (x363 : t) ->
        fun (x360 : string list) ->
          Function.t_of_js
            (Ojs.call (t_to_js x363) "apply"
               [|Ojs.null;((let x361 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x362 : string) ->
                                 ignore
                                   (Ojs.call x361 "push"
                                      [|(Ojs.string_to_js x362)|])) x360;
                            x361))|])
    let (get_prototype : t -> Function.t) =
      fun (x364 : t) ->
        Function.t_of_js (Ojs.get_prop_ascii (t_to_js x364) "prototype")
  end
let (function_ : FunctionConstructor.t) =
  FunctionConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Function")
module Object =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x366 : Ojs.t) -> x366
    and t_to_js : t -> Ojs.t = fun (x365 : Ojs.t) -> x365
    let (get_constructor : t -> Function.t) =
      fun (x367 : t) ->
        Function.t_of_js (Ojs.get_prop_ascii (t_to_js x367) "constructor")
    let (set_constructor : t -> Function.t -> unit) =
      fun (x368 : t) ->
        fun (x369 : Function.t) ->
          Ojs.set_prop_ascii (t_to_js x368) "constructor"
            (Function.t_to_js x369)
    let (to_string : t -> string) =
      fun (x370 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x370) "toString" [||])
    let (to_locale_string : t -> string) =
      fun (x371 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x371) "toLocaleString" [||])
    let (value_of : t -> t) =
      fun (x372 : t) -> t_of_js (Ojs.call (t_to_js x372) "valueOf" [||])
    let (has_own_property : t -> PropertyKey.t -> bool) =
      fun (x374 : t) ->
        fun (x373 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x374) "hasOwnProperty"
               [|(PropertyKey.t_to_js x373)|])
    let (is_prototype_of : t -> t -> bool) =
      fun (x376 : t) ->
        fun (x375 : t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x376) "isPrototypeOf" [|(t_to_js x375)|])
    let (property_is_enumerable : t -> PropertyKey.t -> bool) =
      fun (x378 : t) ->
        fun (x377 : PropertyKey.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x378) "propertyIsEnumerable"
               [|(PropertyKey.t_to_js x377)|])
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x379 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Object")
               (let x380 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x379 with
                 | Some x381 ->
                     ignore (Ojs.call x380 "push" [|(any_to_js x381)|])
                 | None -> ());
                x380))
    let (get_prototype_of : any -> any) =
      fun (x382 : any) ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "getPrototypeOf"
             [|(any_to_js x382)|])
    let (get_own_property_descriptor :
      any -> p:PropertyKey.t -> PropertyDescriptor.t or_undefined) =
      fun (x383 : any) ->
        fun ~p:(x384 : PropertyKey.t) ->
          or_undefined_of_js PropertyDescriptor.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
               "getOwnPropertyDescriptor"
               [|(any_to_js x383);(PropertyKey.t_to_js x384)|])
    let (get_own_property_names : any -> string list) =
      fun (x386 : any) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "getOwnPropertyNames" [|(any_to_js x386)|])
    let (create_ : untyped_object or_null -> any) =
      fun (x388 : untyped_object or_null) ->
        any_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Object")
             [|(or_null_to_js untyped_object_to_js x388)|])
    let (create' :
      untyped_object or_null ->
        properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2 ->
          any)
      =
      fun (x390 : untyped_object or_null) ->
        fun
          ~properties:(x392 :
                        (PropertyDescriptorMap.t, any ThisType.t)
                          intersection2)
          ->
          any_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Object")
               [|(or_null_to_js untyped_object_to_js x390);(intersection2_to_js
                                                              PropertyDescriptorMap.t_to_js
                                                              (fun
                                                                 (x394 :
                                                                   any
                                                                    ThisType.t)
                                                                 ->
                                                                 ThisType.t_to_js
                                                                   any_to_js
                                                                   x394) x392)|])
    let (define_property :
      t ->
        any ->
          p:PropertyKey.t ->
            attributes:(PropertyDescriptor.t, any ThisType.t) intersection2
              -> any)
      =
      fun (x396 : t) ->
        fun (x397 : any) ->
          fun ~p:(x398 : PropertyKey.t) ->
            fun
              ~attributes:(x399 :
                            (PropertyDescriptor.t, any ThisType.t)
                              intersection2)
              ->
              any_of_js
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
                   "defineProperty"
                   [|(t_to_js x396);(any_to_js x397);(PropertyKey.t_to_js
                                                        x398);(intersection2_to_js
                                                                 PropertyDescriptor.t_to_js
                                                                 (fun
                                                                    (x401 :
                                                                    any
                                                                    ThisType.t)
                                                                    ->
                                                                    ThisType.t_to_js
                                                                    any_to_js
                                                                    x401)
                                                                 x399)|])
    let (define_properties :
      t ->
        any ->
          properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2
            -> any)
      =
      fun (x403 : t) ->
        fun (x404 : any) ->
          fun
            ~properties:(x405 :
                          (PropertyDescriptorMap.t, any ThisType.t)
                            intersection2)
            ->
            any_of_js
              (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
                 "defineProperties"
                 [|(t_to_js x403);(any_to_js x404);(intersection2_to_js
                                                      PropertyDescriptorMap.t_to_js
                                                      (fun
                                                         (x407 :
                                                           any ThisType.t)
                                                         ->
                                                         ThisType.t_to_js
                                                           any_to_js x407)
                                                      x405)|])
    let (seal : 'T -> 'T) =
      fun (x409 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "seal"
             [|(Obj.magic x409)|])
    let (freeze : 'T list -> 'T list) =
      fun (x410 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Ojs.list_to_js Obj.magic x410)|])
    let (freeze' : 'T -> 'T) =
      fun (x413 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Obj.magic x413)|])
    let (freeze'' : 'T -> 'T Readonly.t) =
      fun (x414 : 'T) ->
        Readonly.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "freeze"
             [|(Obj.magic x414)|])
    let (prevent_extensions : 'T -> 'T) =
      fun (x416 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object")
             "preventExtensions" [|(Obj.magic x416)|])
    let (is_sealed : any -> bool) =
      fun (x417 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isSealed"
             [|(any_to_js x417)|])
    let (is_frozen : any -> bool) =
      fun (x418 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isFrozen"
             [|(any_to_js x418)|])
    let (is_extensible : any -> bool) =
      fun (x419 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "isExtensible"
             [|(any_to_js x419)|])
    let (keys : untyped_object -> string list) =
      fun (x420 : untyped_object) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Object") "keys"
             [|(untyped_object_to_js x420)|])
  end
module ObjectConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x423 : Ojs.t) -> x423
    and t_to_js : t -> Ojs.t = fun (x422 : Ojs.t) -> x422
    let (create : t -> ?value:any -> unit -> Object.t) =
      fun (x427 : t) ->
        fun ?value:(x424 : any option) ->
          fun () ->
            Object.t_of_js
              (Ojs.new_obj_arr (t_to_js x427)
                 (let x425 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x424 with
                   | Some x426 ->
                       ignore (Ojs.call x425 "push" [|(any_to_js x426)|])
                   | None -> ());
                  x425))
    let (apply : t -> any) =
      fun (x428 : t) -> any_of_js (Ojs.apply (t_to_js x428) [||])
    let (apply' : t -> any -> any) =
      fun (x430 : t) ->
        fun (x429 : any) ->
          any_of_js (Ojs.apply (t_to_js x430) [|(any_to_js x429)|])
    let (get_prototype : t -> Object.t) =
      fun (x431 : t) ->
        Object.t_of_js (Ojs.get_prop_ascii (t_to_js x431) "prototype")
    let (get_prototype_of : t -> any -> any) =
      fun (x433 : t) ->
        fun (x432 : any) ->
          any_of_js
            (Ojs.call (t_to_js x433) "getPrototypeOf" [|(any_to_js x432)|])
    let (get_own_property_descriptor :
      t -> any -> p:PropertyKey.t -> PropertyDescriptor.t or_undefined) =
      fun (x436 : t) ->
        fun (x434 : any) ->
          fun ~p:(x435 : PropertyKey.t) ->
            or_undefined_of_js PropertyDescriptor.t_of_js
              (Ojs.call (t_to_js x436) "getOwnPropertyDescriptor"
                 [|(any_to_js x434);(PropertyKey.t_to_js x435)|])
    let (get_own_property_names : t -> any -> string list) =
      fun (x439 : t) ->
        fun (x438 : any) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (t_to_js x439) "getOwnPropertyNames"
               [|(any_to_js x438)|])
    let (create_ : t -> untyped_object or_null -> any) =
      fun (x443 : t) ->
        fun (x441 : untyped_object or_null) ->
          any_of_js
            (Ojs.call (t_to_js x443) "create"
               [|(or_null_to_js untyped_object_to_js x441)|])
    let (create' :
      t ->
        untyped_object or_null ->
          properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2
            -> any)
      =
      fun (x450 : t) ->
        fun (x444 : untyped_object or_null) ->
          fun
            ~properties:(x446 :
                          (PropertyDescriptorMap.t, any ThisType.t)
                            intersection2)
            ->
            any_of_js
              (Ojs.call (t_to_js x450) "create"
                 [|(or_null_to_js untyped_object_to_js x444);(intersection2_to_js
                                                                PropertyDescriptorMap.t_to_js
                                                                (fun
                                                                   (x448 :
                                                                    any
                                                                    ThisType.t)
                                                                   ->
                                                                   ThisType.t_to_js
                                                                    any_to_js
                                                                    x448)
                                                                x446)|])
    let (define_property :
      t ->
        any ->
          p:PropertyKey.t ->
            attributes:(PropertyDescriptor.t, any ThisType.t) intersection2
              -> any)
      =
      fun (x457 : t) ->
        fun (x451 : any) ->
          fun ~p:(x452 : PropertyKey.t) ->
            fun
              ~attributes:(x453 :
                            (PropertyDescriptor.t, any ThisType.t)
                              intersection2)
              ->
              any_of_js
                (Ojs.call (t_to_js x457) "defineProperty"
                   [|(any_to_js x451);(PropertyKey.t_to_js x452);(intersection2_to_js
                                                                    PropertyDescriptor.t_to_js
                                                                    (
                                                                    fun
                                                                    (x455 :
                                                                    any
                                                                    ThisType.t)
                                                                    ->
                                                                    ThisType.t_to_js
                                                                    any_to_js
                                                                    x455)
                                                                    x453)|])
    let (define_properties :
      t ->
        any ->
          properties:(PropertyDescriptorMap.t, any ThisType.t) intersection2
            -> any)
      =
      fun (x463 : t) ->
        fun (x458 : any) ->
          fun
            ~properties:(x459 :
                          (PropertyDescriptorMap.t, any ThisType.t)
                            intersection2)
            ->
            any_of_js
              (Ojs.call (t_to_js x463) "defineProperties"
                 [|(any_to_js x458);(intersection2_to_js
                                       PropertyDescriptorMap.t_to_js
                                       (fun (x461 : any ThisType.t) ->
                                          ThisType.t_to_js any_to_js x461)
                                       x459)|])
    let (seal : t -> 'T -> 'T) =
      fun (x465 : t) ->
        fun (x464 : 'T) ->
          Obj.magic (Ojs.call (t_to_js x465) "seal" [|(Obj.magic x464)|])
    let (freeze : t -> 'T list -> 'T list) =
      fun (x468 : t) ->
        fun (x466 : 'T list) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x468) "freeze"
               [|(Ojs.list_to_js Obj.magic x466)|])
    let (freeze' : t -> 'T -> 'T) =
      fun (x471 : t) ->
        fun (x470 : 'T) ->
          Obj.magic (Ojs.call (t_to_js x471) "freeze" [|(Obj.magic x470)|])
    let (freeze'' : t -> 'T -> 'T Readonly.t) =
      fun (x473 : t) ->
        fun (x472 : 'T) ->
          Readonly.t_of_js Obj.magic
            (Ojs.call (t_to_js x473) "freeze" [|(Obj.magic x472)|])
    let (prevent_extensions : t -> 'T -> 'T) =
      fun (x476 : t) ->
        fun (x475 : 'T) ->
          Obj.magic
            (Ojs.call (t_to_js x476) "preventExtensions" [|(Obj.magic x475)|])
    let (is_sealed : t -> any -> bool) =
      fun (x478 : t) ->
        fun (x477 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x478) "isSealed" [|(any_to_js x477)|])
    let (is_frozen : t -> any -> bool) =
      fun (x480 : t) ->
        fun (x479 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x480) "isFrozen" [|(any_to_js x479)|])
    let (is_extensible : t -> any -> bool) =
      fun (x482 : t) ->
        fun (x481 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x482) "isExtensible" [|(any_to_js x481)|])
    let (keys : t -> untyped_object -> string list) =
      fun (x484 : t) ->
        fun (x483 : untyped_object) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (t_to_js x484) "keys" [|(untyped_object_to_js x483)|])
  end
let (object_ : ObjectConstructor.t) =
  ObjectConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Object")
module ThisParameterType =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x487 : Ojs.t) -> x487
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x486 : Ojs.t) -> x486
  end
module OmitThisParameter =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x489 : Ojs.t) -> x489
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x488 : Ojs.t) -> x488
  end
module CallableFunction =
  struct
    include struct include Function end
    let (apply_ : t -> this:(this:'T -> 'R) -> thisArg:'T -> 'R) =
      fun (x493 : t) ->
        fun ~this:(x490 : this:'T -> 'R) ->
          fun ~thisArg:(x492 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js x493) "apply"
                 [|(Ojs.fun_to_js 1
                      (fun (x491 : Ojs.t) ->
                         Obj.magic (x490 ~this:(Obj.magic x491))));(Obj.magic
                                                                    x492)|])
    let (apply_all :
      t ->
        this:(this:'T -> args:any list -> 'R) -> thisArg:'T -> args:'A -> 'R)
      =
      fun (x499 : t) ->
        fun ~this:(x494 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x497 : 'T) ->
            fun ~args:(x498 : 'A) ->
              Obj.magic
                (Ojs.call (t_to_js x499) "apply"
                   [|(Ojs.fun_to_js_args
                        (fun (x495 : _) ->
                           Obj.magic
                             (x494 ~this:(Obj.magic (Ojs.array_get x495 0))
                                ~args:(Ojs.list_of_js_from any_of_js x495 1))));(
                     Obj.magic x497);(Obj.magic x498)|])
    let (call :
      t ->
        this:(this:'T -> args:any list -> 'R) ->
          thisArg:'T -> args:any list -> 'R)
      =
      fun (x507 : t) ->
        fun ~this:(x500 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x501 : 'T) ->
            fun ~args:(x502 : any list) ->
              Obj.magic
                (let x508 = t_to_js x507 in
                 Ojs.call (Ojs.get_prop_ascii x508 "call") "apply"
                   [|x508;((let x503 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x503 "push"
                                 [|(Ojs.fun_to_js_args
                                      (fun (x505 : _) ->
                                         Obj.magic
                                           (x500
                                              ~this:(Obj.magic
                                                       (Ojs.array_get x505 0))
                                              ~args:(Ojs.list_of_js_from
                                                       any_of_js x505 1))))|]);
                            ignore
                              (Ojs.call x503 "push" [|(Obj.magic x501)|]);
                            List.iter
                              (fun (x504 : any) ->
                                 ignore
                                   (Ojs.call x503 "push" [|(any_to_js x504)|]))
                              x502;
                            x503))|])
    let (bind :
      t ->
        this:'T -> thisArg:'T ThisParameterType.t -> 'T OmitThisParameter.t)
      =
      fun (x512 : t) ->
        fun ~this:(x509 : 'T) ->
          fun ~thisArg:(x510 : 'T ThisParameterType.t) ->
            OmitThisParameter.t_of_js Obj.magic
              (Ojs.call (t_to_js x512) "bind"
                 [|(Obj.magic x509);(ThisParameterType.t_to_js Obj.magic x510)|])
    let (bind_all :
      t ->
        this:(this:'T -> args:any list -> 'R) ->
          thisArg:'T -> args:any list -> 'R)
      =
      fun (x518 : t) ->
        fun ~this:(x514 : this:'T -> args:any list -> 'R) ->
          fun ~thisArg:(x517 : 'T) ->
            fun ~args:(x519 : any list) ->
              Obj.magic
                (Ojs.call
                   (Ojs.call (t_to_js x518) "bind"
                      [|(Ojs.fun_to_js_args
                           (fun (x515 : _) ->
                              Obj.magic
                                (x514
                                   ~this:(Obj.magic (Ojs.array_get x515 0))
                                   ~args:(Ojs.list_of_js_from any_of_js x515
                                            1))));(Obj.magic x517)|]) "apply"
                   [|Ojs.null;((let x520 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                List.iter
                                  (fun (x521 : any) ->
                                     ignore
                                       (Ojs.call x520 "push"
                                          [|(any_to_js x521)|])) x519;
                                x520))|])
  end
module NewableFunction =
  struct
    include struct include Function end
    let (bind : t -> this:'T -> thisArg:any -> 'T) =
      fun (x524 : t) ->
        fun ~this:(x522 : 'T) ->
          fun ~thisArg:(x523 : any) ->
            Obj.magic
              (Ojs.call (t_to_js x524) "bind"
                 [|(Obj.magic x522);(any_to_js x523)|])
  end
module IArguments =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x526 : Ojs.t) -> x526
    and t_to_js : t -> Ojs.t = fun (x525 : Ojs.t) -> x525
    let (get : t -> int -> any) =
      fun (x527 : t) ->
        fun (x528 : int) -> any_of_js (Ojs.array_get (t_to_js x527) x528)
    let (set : t -> int -> any -> unit) =
      fun (x529 : t) ->
        fun (x530 : int) ->
          fun (x531 : any) ->
            Ojs.array_set (t_to_js x529) x530 (any_to_js x531)
    let (get_length : t -> int) =
      fun (x532 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x532) "length")
    let (set_length : t -> int -> unit) =
      fun (x533 : t) ->
        fun (x534 : int) ->
          Ojs.set_prop_ascii (t_to_js x533) "length" (Ojs.int_to_js x534)
    let (get_callee : t -> Function.t) =
      fun (x535 : t) ->
        Function.t_of_js (Ojs.get_prop_ascii (t_to_js x535) "callee")
    let (set_callee : t -> Function.t -> unit) =
      fun (x536 : t) ->
        fun (x537 : Function.t) ->
          Ojs.set_prop_ascii (t_to_js x536) "callee" (Function.t_to_js x537)
  end
module Intl =
  struct
    module CollatorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x539 : Ojs.t) -> x539
        and t_to_js : t -> Ojs.t = fun (x538 : Ojs.t) -> x538
        let (get_usage : t -> string) =
          fun (x540 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x540) "usage")
        let (set_usage : t -> string -> unit) =
          fun (x541 : t) ->
            fun (x542 : string) ->
              Ojs.set_prop_ascii (t_to_js x541) "usage"
                (Ojs.string_to_js x542)
        let (get_locale_matcher : t -> string) =
          fun (x543 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x543) "localeMatcher")
        let (set_locale_matcher : t -> string -> unit) =
          fun (x544 : t) ->
            fun (x545 : string) ->
              Ojs.set_prop_ascii (t_to_js x544) "localeMatcher"
                (Ojs.string_to_js x545)
        let (get_numeric : t -> bool) =
          fun (x546 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x546) "numeric")
        let (set_numeric : t -> bool -> unit) =
          fun (x547 : t) ->
            fun (x548 : bool) ->
              Ojs.set_prop_ascii (t_to_js x547) "numeric"
                (Ojs.bool_to_js x548)
        let (get_case_first : t -> string) =
          fun (x549 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x549) "caseFirst")
        let (set_case_first : t -> string -> unit) =
          fun (x550 : t) ->
            fun (x551 : string) ->
              Ojs.set_prop_ascii (t_to_js x550) "caseFirst"
                (Ojs.string_to_js x551)
        let (get_sensitivity : t -> string) =
          fun (x552 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x552) "sensitivity")
        let (set_sensitivity : t -> string -> unit) =
          fun (x553 : t) ->
            fun (x554 : string) ->
              Ojs.set_prop_ascii (t_to_js x553) "sensitivity"
                (Ojs.string_to_js x554)
        let (get_ignore_punctuation : t -> bool) =
          fun (x555 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x555) "ignorePunctuation")
        let (set_ignore_punctuation : t -> bool -> unit) =
          fun (x556 : t) ->
            fun (x557 : bool) ->
              Ojs.set_prop_ascii (t_to_js x556) "ignorePunctuation"
                (Ojs.bool_to_js x557)
      end
    module ResolvedCollatorOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x559 : Ojs.t) -> x559
        and t_to_js : t -> Ojs.t = fun (x558 : Ojs.t) -> x558
        let (get_locale : t -> string) =
          fun (x560 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x560) "locale")
        let (set_locale : t -> string -> unit) =
          fun (x561 : t) ->
            fun (x562 : string) ->
              Ojs.set_prop_ascii (t_to_js x561) "locale"
                (Ojs.string_to_js x562)
        let (get_usage : t -> string) =
          fun (x563 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x563) "usage")
        let (set_usage : t -> string -> unit) =
          fun (x564 : t) ->
            fun (x565 : string) ->
              Ojs.set_prop_ascii (t_to_js x564) "usage"
                (Ojs.string_to_js x565)
        let (get_sensitivity : t -> string) =
          fun (x566 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x566) "sensitivity")
        let (set_sensitivity : t -> string -> unit) =
          fun (x567 : t) ->
            fun (x568 : string) ->
              Ojs.set_prop_ascii (t_to_js x567) "sensitivity"
                (Ojs.string_to_js x568)
        let (get_ignore_punctuation : t -> bool) =
          fun (x569 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x569) "ignorePunctuation")
        let (set_ignore_punctuation : t -> bool -> unit) =
          fun (x570 : t) ->
            fun (x571 : bool) ->
              Ojs.set_prop_ascii (t_to_js x570) "ignorePunctuation"
                (Ojs.bool_to_js x571)
        let (get_collation : t -> string) =
          fun (x572 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x572) "collation")
        let (set_collation : t -> string -> unit) =
          fun (x573 : t) ->
            fun (x574 : string) ->
              Ojs.set_prop_ascii (t_to_js x573) "collation"
                (Ojs.string_to_js x574)
        let (get_case_first : t -> string) =
          fun (x575 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x575) "caseFirst")
        let (set_case_first : t -> string -> unit) =
          fun (x576 : t) ->
            fun (x577 : string) ->
              Ojs.set_prop_ascii (t_to_js x576) "caseFirst"
                (Ojs.string_to_js x577)
        let (get_numeric : t -> bool) =
          fun (x578 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x578) "numeric")
        let (set_numeric : t -> bool -> unit) =
          fun (x579 : t) ->
            fun (x580 : bool) ->
              Ojs.set_prop_ascii (t_to_js x579) "numeric"
                (Ojs.bool_to_js x580)
      end
    module Collator =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x582 : Ojs.t) -> x582
        and t_to_js : t -> Ojs.t = fun (x581 : Ojs.t) -> x581
        let (compare : t -> x:string -> y:string -> int) =
          fun (x585 : t) ->
            fun ~x:(x583 : string) ->
              fun ~y:(x584 : string) ->
                Ojs.int_of_js
                  (Ojs.call (t_to_js x585) "compare"
                     [|(Ojs.string_to_js x583);(Ojs.string_to_js x584)|])
        let (resolved_options : t -> ResolvedCollatorOptions.t) =
          fun (x586 : t) ->
            ResolvedCollatorOptions.t_of_js
              (Ojs.call (t_to_js x586) "resolvedOptions" [||])
      end
    module CollatorConstructor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x588 : Ojs.t) -> x588
        and t_to_js : t -> Ojs.t = fun (x587 : Ojs.t) -> x587
        let (create :
          t ->
            ?locales:string list or_string ->
              ?options:CollatorOptions.t -> unit -> Collator.t)
          =
          fun (x596 : t) ->
            fun ?locales:(x589 : string list or_string option) ->
              fun ?options:(x590 : CollatorOptions.t option) ->
                fun () ->
                  Collator.t_of_js
                    (Ojs.new_obj_arr (t_to_js x596)
                       (let x591 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x589 with
                         | Some x593 ->
                             ignore
                               (Ojs.call x591 "push"
                                  [|(or_string_to_js
                                       (fun (x594 : string list) ->
                                          Ojs.list_to_js Ojs.string_to_js
                                            x594) x593)|])
                         | None -> ());
                        (match x590 with
                         | Some x592 ->
                             ignore
                               (Ojs.call x591 "push"
                                  [|(CollatorOptions.t_to_js x592)|])
                         | None -> ());
                        x591))
        let (apply :
          t ->
            ?locales:string list or_string ->
              ?options:CollatorOptions.t -> unit -> Collator.t)
          =
          fun (x604 : t) ->
            fun ?locales:(x597 : string list or_string option) ->
              fun ?options:(x598 : CollatorOptions.t option) ->
                fun () ->
                  Collator.t_of_js
                    (Ojs.call (t_to_js x604) "apply"
                       [|Ojs.null;((let x599 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x597 with
                                     | Some x601 ->
                                         ignore
                                           (Ojs.call x599 "push"
                                              [|(or_string_to_js
                                                   (fun (x602 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js x602)
                                                   x601)|])
                                     | None -> ());
                                    (match x598 with
                                     | Some x600 ->
                                         ignore
                                           (Ojs.call x599 "push"
                                              [|(CollatorOptions.t_to_js x600)|])
                                     | None -> ());
                                    x599))|])
        let (supported_locales_of :
          t ->
            locales:string list or_string ->
              ?options:CollatorOptions.t -> unit -> string list)
          =
          fun (x611 : t) ->
            fun ~locales:(x605 : string list or_string) ->
              fun ?options:(x606 : CollatorOptions.t option) ->
                fun () ->
                  Ojs.list_of_js Ojs.string_of_js
                    (let x612 = t_to_js x611 in
                     Ojs.call (Ojs.get_prop_ascii x612 "supportedLocalesOf")
                       "apply"
                       [|x612;((let x607 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x607 "push"
                                     [|(or_string_to_js
                                          (fun (x609 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x609) x605)|]);
                                (match x606 with
                                 | Some x608 ->
                                     ignore
                                       (Ojs.call x607 "push"
                                          [|(CollatorOptions.t_to_js x608)|])
                                 | None -> ());
                                x607))|])
      end
    let (collator : CollatorConstructor.t) =
      CollatorConstructor.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl") "Collator")
    module NumberFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x615 : Ojs.t) -> x615
        and t_to_js : t -> Ojs.t = fun (x614 : Ojs.t) -> x614
        let (get_locale_matcher : t -> string) =
          fun (x616 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x616) "localeMatcher")
        let (set_locale_matcher : t -> string -> unit) =
          fun (x617 : t) ->
            fun (x618 : string) ->
              Ojs.set_prop_ascii (t_to_js x617) "localeMatcher"
                (Ojs.string_to_js x618)
        let (get_style : t -> string) =
          fun (x619 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x619) "style")
        let (set_style : t -> string -> unit) =
          fun (x620 : t) ->
            fun (x621 : string) ->
              Ojs.set_prop_ascii (t_to_js x620) "style"
                (Ojs.string_to_js x621)
        let (get_currency : t -> string) =
          fun (x622 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x622) "currency")
        let (set_currency : t -> string -> unit) =
          fun (x623 : t) ->
            fun (x624 : string) ->
              Ojs.set_prop_ascii (t_to_js x623) "currency"
                (Ojs.string_to_js x624)
        let (get_currency_display : t -> string) =
          fun (x625 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x625) "currencyDisplay")
        let (set_currency_display : t -> string -> unit) =
          fun (x626 : t) ->
            fun (x627 : string) ->
              Ojs.set_prop_ascii (t_to_js x626) "currencyDisplay"
                (Ojs.string_to_js x627)
        let (get_currency_sign : t -> string) =
          fun (x628 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x628) "currencySign")
        let (set_currency_sign : t -> string -> unit) =
          fun (x629 : t) ->
            fun (x630 : string) ->
              Ojs.set_prop_ascii (t_to_js x629) "currencySign"
                (Ojs.string_to_js x630)
        let (get_use_grouping : t -> bool) =
          fun (x631 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x631) "useGrouping")
        let (set_use_grouping : t -> bool -> unit) =
          fun (x632 : t) ->
            fun (x633 : bool) ->
              Ojs.set_prop_ascii (t_to_js x632) "useGrouping"
                (Ojs.bool_to_js x633)
        let (get_minimum_integer_digits : t -> int) =
          fun (x634 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x634) "minimumIntegerDigits")
        let (set_minimum_integer_digits : t -> int -> unit) =
          fun (x635 : t) ->
            fun (x636 : int) ->
              Ojs.set_prop_ascii (t_to_js x635) "minimumIntegerDigits"
                (Ojs.int_to_js x636)
        let (get_minimum_fraction_digits : t -> int) =
          fun (x637 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x637) "minimumFractionDigits")
        let (set_minimum_fraction_digits : t -> int -> unit) =
          fun (x638 : t) ->
            fun (x639 : int) ->
              Ojs.set_prop_ascii (t_to_js x638) "minimumFractionDigits"
                (Ojs.int_to_js x639)
        let (get_maximum_fraction_digits : t -> int) =
          fun (x640 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x640) "maximumFractionDigits")
        let (set_maximum_fraction_digits : t -> int -> unit) =
          fun (x641 : t) ->
            fun (x642 : int) ->
              Ojs.set_prop_ascii (t_to_js x641) "maximumFractionDigits"
                (Ojs.int_to_js x642)
        let (get_minimum_significant_digits : t -> int) =
          fun (x643 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x643) "minimumSignificantDigits")
        let (set_minimum_significant_digits : t -> int -> unit) =
          fun (x644 : t) ->
            fun (x645 : int) ->
              Ojs.set_prop_ascii (t_to_js x644) "minimumSignificantDigits"
                (Ojs.int_to_js x645)
        let (get_maximum_significant_digits : t -> int) =
          fun (x646 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x646) "maximumSignificantDigits")
        let (set_maximum_significant_digits : t -> int -> unit) =
          fun (x647 : t) ->
            fun (x648 : int) ->
              Ojs.set_prop_ascii (t_to_js x647) "maximumSignificantDigits"
                (Ojs.int_to_js x648)
      end
    module ResolvedNumberFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x650 : Ojs.t) -> x650
        and t_to_js : t -> Ojs.t = fun (x649 : Ojs.t) -> x649
        let (get_locale : t -> string) =
          fun (x651 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x651) "locale")
        let (set_locale : t -> string -> unit) =
          fun (x652 : t) ->
            fun (x653 : string) ->
              Ojs.set_prop_ascii (t_to_js x652) "locale"
                (Ojs.string_to_js x653)
        let (get_numbering_system : t -> string) =
          fun (x654 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x654) "numberingSystem")
        let (set_numbering_system : t -> string -> unit) =
          fun (x655 : t) ->
            fun (x656 : string) ->
              Ojs.set_prop_ascii (t_to_js x655) "numberingSystem"
                (Ojs.string_to_js x656)
        let (get_style : t -> string) =
          fun (x657 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x657) "style")
        let (set_style : t -> string -> unit) =
          fun (x658 : t) ->
            fun (x659 : string) ->
              Ojs.set_prop_ascii (t_to_js x658) "style"
                (Ojs.string_to_js x659)
        let (get_currency : t -> string) =
          fun (x660 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x660) "currency")
        let (set_currency : t -> string -> unit) =
          fun (x661 : t) ->
            fun (x662 : string) ->
              Ojs.set_prop_ascii (t_to_js x661) "currency"
                (Ojs.string_to_js x662)
        let (get_currency_display : t -> string) =
          fun (x663 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x663) "currencyDisplay")
        let (set_currency_display : t -> string -> unit) =
          fun (x664 : t) ->
            fun (x665 : string) ->
              Ojs.set_prop_ascii (t_to_js x664) "currencyDisplay"
                (Ojs.string_to_js x665)
        let (get_minimum_integer_digits : t -> int) =
          fun (x666 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x666) "minimumIntegerDigits")
        let (set_minimum_integer_digits : t -> int -> unit) =
          fun (x667 : t) ->
            fun (x668 : int) ->
              Ojs.set_prop_ascii (t_to_js x667) "minimumIntegerDigits"
                (Ojs.int_to_js x668)
        let (get_minimum_fraction_digits : t -> int) =
          fun (x669 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x669) "minimumFractionDigits")
        let (set_minimum_fraction_digits : t -> int -> unit) =
          fun (x670 : t) ->
            fun (x671 : int) ->
              Ojs.set_prop_ascii (t_to_js x670) "minimumFractionDigits"
                (Ojs.int_to_js x671)
        let (get_maximum_fraction_digits : t -> int) =
          fun (x672 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x672) "maximumFractionDigits")
        let (set_maximum_fraction_digits : t -> int -> unit) =
          fun (x673 : t) ->
            fun (x674 : int) ->
              Ojs.set_prop_ascii (t_to_js x673) "maximumFractionDigits"
                (Ojs.int_to_js x674)
        let (get_minimum_significant_digits : t -> int) =
          fun (x675 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x675) "minimumSignificantDigits")
        let (set_minimum_significant_digits : t -> int -> unit) =
          fun (x676 : t) ->
            fun (x677 : int) ->
              Ojs.set_prop_ascii (t_to_js x676) "minimumSignificantDigits"
                (Ojs.int_to_js x677)
        let (get_maximum_significant_digits : t -> int) =
          fun (x678 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x678) "maximumSignificantDigits")
        let (set_maximum_significant_digits : t -> int -> unit) =
          fun (x679 : t) ->
            fun (x680 : int) ->
              Ojs.set_prop_ascii (t_to_js x679) "maximumSignificantDigits"
                (Ojs.int_to_js x680)
        let (get_use_grouping : t -> bool) =
          fun (x681 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x681) "useGrouping")
        let (set_use_grouping : t -> bool -> unit) =
          fun (x682 : t) ->
            fun (x683 : bool) ->
              Ojs.set_prop_ascii (t_to_js x682) "useGrouping"
                (Ojs.bool_to_js x683)
      end
    module NumberFormat =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x685 : Ojs.t) -> x685
        and t_to_js : t -> Ojs.t = fun (x684 : Ojs.t) -> x684
        let (format : t -> value:int -> string) =
          fun (x687 : t) ->
            fun ~value:(x686 : int) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x687) "format" [|(Ojs.int_to_js x686)|])
        let (resolved_options : t -> ResolvedNumberFormatOptions.t) =
          fun (x688 : t) ->
            ResolvedNumberFormatOptions.t_of_js
              (Ojs.call (t_to_js x688) "resolvedOptions" [||])
      end
    module NumberFormatConstructor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x690 : Ojs.t) -> x690
        and t_to_js : t -> Ojs.t = fun (x689 : Ojs.t) -> x689
        let (create :
          t ->
            ?locales:string list or_string ->
              ?options:NumberFormatOptions.t -> unit -> NumberFormat.t)
          =
          fun (x698 : t) ->
            fun ?locales:(x691 : string list or_string option) ->
              fun ?options:(x692 : NumberFormatOptions.t option) ->
                fun () ->
                  NumberFormat.t_of_js
                    (Ojs.new_obj_arr (t_to_js x698)
                       (let x693 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x691 with
                         | Some x695 ->
                             ignore
                               (Ojs.call x693 "push"
                                  [|(or_string_to_js
                                       (fun (x696 : string list) ->
                                          Ojs.list_to_js Ojs.string_to_js
                                            x696) x695)|])
                         | None -> ());
                        (match x692 with
                         | Some x694 ->
                             ignore
                               (Ojs.call x693 "push"
                                  [|(NumberFormatOptions.t_to_js x694)|])
                         | None -> ());
                        x693))
        let (apply :
          t ->
            ?locales:string list or_string ->
              ?options:NumberFormatOptions.t -> unit -> NumberFormat.t)
          =
          fun (x706 : t) ->
            fun ?locales:(x699 : string list or_string option) ->
              fun ?options:(x700 : NumberFormatOptions.t option) ->
                fun () ->
                  NumberFormat.t_of_js
                    (Ojs.call (t_to_js x706) "apply"
                       [|Ojs.null;((let x701 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x699 with
                                     | Some x703 ->
                                         ignore
                                           (Ojs.call x701 "push"
                                              [|(or_string_to_js
                                                   (fun (x704 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js x704)
                                                   x703)|])
                                     | None -> ());
                                    (match x700 with
                                     | Some x702 ->
                                         ignore
                                           (Ojs.call x701 "push"
                                              [|(NumberFormatOptions.t_to_js
                                                   x702)|])
                                     | None -> ());
                                    x701))|])
        let (supported_locales_of :
          t ->
            locales:string list or_string ->
              ?options:NumberFormatOptions.t -> unit -> string list)
          =
          fun (x713 : t) ->
            fun ~locales:(x707 : string list or_string) ->
              fun ?options:(x708 : NumberFormatOptions.t option) ->
                fun () ->
                  Ojs.list_of_js Ojs.string_of_js
                    (let x714 = t_to_js x713 in
                     Ojs.call (Ojs.get_prop_ascii x714 "supportedLocalesOf")
                       "apply"
                       [|x714;((let x709 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x709 "push"
                                     [|(or_string_to_js
                                          (fun (x711 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x711) x707)|]);
                                (match x708 with
                                 | Some x710 ->
                                     ignore
                                       (Ojs.call x709 "push"
                                          [|(NumberFormatOptions.t_to_js x710)|])
                                 | None -> ());
                                x709))|])
      end
    let (number_format : NumberFormatConstructor.t) =
      NumberFormatConstructor.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl")
           "NumberFormat")
    module DateTimeFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x717 : Ojs.t) -> x717
        and t_to_js : t -> Ojs.t = fun (x716 : Ojs.t) -> x716
        let (get_locale_matcher : t -> [ `best_fit  | `lookup ]) =
          fun (x718 : t) ->
            let x719 = Ojs.get_prop_ascii (t_to_js x718) "localeMatcher" in
            match Ojs.string_of_js x719 with
            | "best fit" -> `best_fit
            | "lookup" -> `lookup
            | _ -> assert false
        let (set_locale_matcher : t -> [ `best_fit  | `lookup ] -> unit) =
          fun (x720 : t) ->
            fun (x721 : [ `best_fit  | `lookup ]) ->
              Ojs.set_prop_ascii (t_to_js x720) "localeMatcher"
                (match x721 with
                 | `best_fit -> Ojs.string_to_js "bestFit"
                 | `lookup -> Ojs.string_to_js "lookup")
        let (get_weekday : t -> [ `long  | `narrow  | `short ]) =
          fun (x722 : t) ->
            let x723 = Ojs.get_prop_ascii (t_to_js x722) "weekday" in
            match Ojs.string_of_js x723 with
            | "long" -> `long
            | "narrow" -> `narrow
            | "short" -> `short
            | _ -> assert false
        let (set_weekday : t -> [ `long  | `narrow  | `short ] -> unit) =
          fun (x724 : t) ->
            fun (x725 : [ `long  | `narrow  | `short ]) ->
              Ojs.set_prop_ascii (t_to_js x724) "weekday"
                (match x725 with
                 | `long -> Ojs.string_to_js "long"
                 | `narrow -> Ojs.string_to_js "narrow"
                 | `short -> Ojs.string_to_js "short")
        let (get_era : t -> [ `long  | `narrow  | `short ]) =
          fun (x726 : t) ->
            let x727 = Ojs.get_prop_ascii (t_to_js x726) "era" in
            match Ojs.string_of_js x727 with
            | "long" -> `long
            | "narrow" -> `narrow
            | "short" -> `short
            | _ -> assert false
        let (set_era : t -> [ `long  | `narrow  | `short ] -> unit) =
          fun (x728 : t) ->
            fun (x729 : [ `long  | `narrow  | `short ]) ->
              Ojs.set_prop_ascii (t_to_js x728) "era"
                (match x729 with
                 | `long -> Ojs.string_to_js "long"
                 | `narrow -> Ojs.string_to_js "narrow"
                 | `short -> Ojs.string_to_js "short")
        let (get_year : t -> [ `two_digit  | `numeric ]) =
          fun (x730 : t) ->
            let x731 = Ojs.get_prop_ascii (t_to_js x730) "year" in
            match Ojs.string_of_js x731 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_year : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x732 : t) ->
            fun (x733 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x732) "year"
                (match x733 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_month :
          t -> [ `two_digit  | `long  | `narrow  | `numeric  | `short ]) =
          fun (x734 : t) ->
            let x735 = Ojs.get_prop_ascii (t_to_js x734) "month" in
            match Ojs.string_of_js x735 with
            | "2-digit" -> `two_digit
            | "long" -> `long
            | "narrow" -> `narrow
            | "numeric" -> `numeric
            | "short" -> `short
            | _ -> assert false
        let (set_month :
          t ->
            [ `two_digit  | `long  | `narrow  | `numeric  | `short ] -> unit)
          =
          fun (x736 : t) ->
            fun
              (x737 :
                [ `two_digit  | `long  | `narrow  | `numeric  | `short ])
              ->
              Ojs.set_prop_ascii (t_to_js x736) "month"
                (match x737 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `long -> Ojs.string_to_js "long"
                 | `narrow -> Ojs.string_to_js "narrow"
                 | `numeric -> Ojs.string_to_js "numeric"
                 | `short -> Ojs.string_to_js "short")
        let (get_day : t -> [ `two_digit  | `numeric ]) =
          fun (x738 : t) ->
            let x739 = Ojs.get_prop_ascii (t_to_js x738) "day" in
            match Ojs.string_of_js x739 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_day : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x740 : t) ->
            fun (x741 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x740) "day"
                (match x741 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_hour : t -> [ `two_digit  | `numeric ]) =
          fun (x742 : t) ->
            let x743 = Ojs.get_prop_ascii (t_to_js x742) "hour" in
            match Ojs.string_of_js x743 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_hour : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x744 : t) ->
            fun (x745 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x744) "hour"
                (match x745 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_minute : t -> [ `two_digit  | `numeric ]) =
          fun (x746 : t) ->
            let x747 = Ojs.get_prop_ascii (t_to_js x746) "minute" in
            match Ojs.string_of_js x747 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_minute : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x748 : t) ->
            fun (x749 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x748) "minute"
                (match x749 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_second : t -> [ `two_digit  | `numeric ]) =
          fun (x750 : t) ->
            let x751 = Ojs.get_prop_ascii (t_to_js x750) "second" in
            match Ojs.string_of_js x751 with
            | "2-digit" -> `two_digit
            | "numeric" -> `numeric
            | _ -> assert false
        let (set_second : t -> [ `two_digit  | `numeric ] -> unit) =
          fun (x752 : t) ->
            fun (x753 : [ `two_digit  | `numeric ]) ->
              Ojs.set_prop_ascii (t_to_js x752) "second"
                (match x753 with
                 | `two_digit -> Ojs.string_to_js "twoDigit"
                 | `numeric -> Ojs.string_to_js "numeric")
        let (get_time_zone_name : t -> [ `long  | `short ]) =
          fun (x754 : t) ->
            let x755 = Ojs.get_prop_ascii (t_to_js x754) "timeZoneName" in
            match Ojs.string_of_js x755 with
            | "long" -> `long
            | "short" -> `short
            | _ -> assert false
        let (set_time_zone_name : t -> [ `long  | `short ] -> unit) =
          fun (x756 : t) ->
            fun (x757 : [ `long  | `short ]) ->
              Ojs.set_prop_ascii (t_to_js x756) "timeZoneName"
                (match x757 with
                 | `long -> Ojs.string_to_js "long"
                 | `short -> Ojs.string_to_js "short")
        let (get_format_matcher : t -> [ `basic  | `best_fit ]) =
          fun (x758 : t) ->
            let x759 = Ojs.get_prop_ascii (t_to_js x758) "formatMatcher" in
            match Ojs.string_of_js x759 with
            | "basic" -> `basic
            | "best fit" -> `best_fit
            | _ -> assert false
        let (set_format_matcher : t -> [ `basic  | `best_fit ] -> unit) =
          fun (x760 : t) ->
            fun (x761 : [ `basic  | `best_fit ]) ->
              Ojs.set_prop_ascii (t_to_js x760) "formatMatcher"
                (match x761 with
                 | `basic -> Ojs.string_to_js "basic"
                 | `best_fit -> Ojs.string_to_js "bestFit")
        let (get_hour12 : t -> bool) =
          fun (x762 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x762) "hour12")
        let (set_hour12 : t -> bool -> unit) =
          fun (x763 : t) ->
            fun (x764 : bool) ->
              Ojs.set_prop_ascii (t_to_js x763) "hour12"
                (Ojs.bool_to_js x764)
        let (get_time_zone : t -> string) =
          fun (x765 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x765) "timeZone")
        let (set_time_zone : t -> string -> unit) =
          fun (x766 : t) ->
            fun (x767 : string) ->
              Ojs.set_prop_ascii (t_to_js x766) "timeZone"
                (Ojs.string_to_js x767)
      end
    module ResolvedDateTimeFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x769 : Ojs.t) -> x769
        and t_to_js : t -> Ojs.t = fun (x768 : Ojs.t) -> x768
        let (get_locale : t -> string) =
          fun (x770 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x770) "locale")
        let (set_locale : t -> string -> unit) =
          fun (x771 : t) ->
            fun (x772 : string) ->
              Ojs.set_prop_ascii (t_to_js x771) "locale"
                (Ojs.string_to_js x772)
        let (get_calendar : t -> string) =
          fun (x773 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x773) "calendar")
        let (set_calendar : t -> string -> unit) =
          fun (x774 : t) ->
            fun (x775 : string) ->
              Ojs.set_prop_ascii (t_to_js x774) "calendar"
                (Ojs.string_to_js x775)
        let (get_numbering_system : t -> string) =
          fun (x776 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x776) "numberingSystem")
        let (set_numbering_system : t -> string -> unit) =
          fun (x777 : t) ->
            fun (x778 : string) ->
              Ojs.set_prop_ascii (t_to_js x777) "numberingSystem"
                (Ojs.string_to_js x778)
        let (get_time_zone : t -> string) =
          fun (x779 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x779) "timeZone")
        let (set_time_zone : t -> string -> unit) =
          fun (x780 : t) ->
            fun (x781 : string) ->
              Ojs.set_prop_ascii (t_to_js x780) "timeZone"
                (Ojs.string_to_js x781)
        let (get_hour12 : t -> bool) =
          fun (x782 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x782) "hour12")
        let (set_hour12 : t -> bool -> unit) =
          fun (x783 : t) ->
            fun (x784 : bool) ->
              Ojs.set_prop_ascii (t_to_js x783) "hour12"
                (Ojs.bool_to_js x784)
        let (get_weekday : t -> string) =
          fun (x785 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x785) "weekday")
        let (set_weekday : t -> string -> unit) =
          fun (x786 : t) ->
            fun (x787 : string) ->
              Ojs.set_prop_ascii (t_to_js x786) "weekday"
                (Ojs.string_to_js x787)
        let (get_era : t -> string) =
          fun (x788 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x788) "era")
        let (set_era : t -> string -> unit) =
          fun (x789 : t) ->
            fun (x790 : string) ->
              Ojs.set_prop_ascii (t_to_js x789) "era" (Ojs.string_to_js x790)
        let (get_year : t -> string) =
          fun (x791 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x791) "year")
        let (set_year : t -> string -> unit) =
          fun (x792 : t) ->
            fun (x793 : string) ->
              Ojs.set_prop_ascii (t_to_js x792) "year"
                (Ojs.string_to_js x793)
        let (get_month : t -> string) =
          fun (x794 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x794) "month")
        let (set_month : t -> string -> unit) =
          fun (x795 : t) ->
            fun (x796 : string) ->
              Ojs.set_prop_ascii (t_to_js x795) "month"
                (Ojs.string_to_js x796)
        let (get_day : t -> string) =
          fun (x797 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x797) "day")
        let (set_day : t -> string -> unit) =
          fun (x798 : t) ->
            fun (x799 : string) ->
              Ojs.set_prop_ascii (t_to_js x798) "day" (Ojs.string_to_js x799)
        let (get_hour : t -> string) =
          fun (x800 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x800) "hour")
        let (set_hour : t -> string -> unit) =
          fun (x801 : t) ->
            fun (x802 : string) ->
              Ojs.set_prop_ascii (t_to_js x801) "hour"
                (Ojs.string_to_js x802)
        let (get_minute : t -> string) =
          fun (x803 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x803) "minute")
        let (set_minute : t -> string -> unit) =
          fun (x804 : t) ->
            fun (x805 : string) ->
              Ojs.set_prop_ascii (t_to_js x804) "minute"
                (Ojs.string_to_js x805)
        let (get_second : t -> string) =
          fun (x806 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x806) "second")
        let (set_second : t -> string -> unit) =
          fun (x807 : t) ->
            fun (x808 : string) ->
              Ojs.set_prop_ascii (t_to_js x807) "second"
                (Ojs.string_to_js x808)
        let (get_time_zone_name : t -> string) =
          fun (x809 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x809) "timeZoneName")
        let (set_time_zone_name : t -> string -> unit) =
          fun (x810 : t) ->
            fun (x811 : string) ->
              Ojs.set_prop_ascii (t_to_js x810) "timeZoneName"
                (Ojs.string_to_js x811)
      end
    module DateTimeFormat =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x813 : Ojs.t) -> x813
        and t_to_js : t -> Ojs.t = fun (x812 : Ojs.t) -> x812
        let (format : t -> string) =
          fun (x814 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x814) "format" [||])
        let (resolved_options : t -> ResolvedDateTimeFormatOptions.t) =
          fun (x815 : t) ->
            ResolvedDateTimeFormatOptions.t_of_js
              (Ojs.call (t_to_js x815) "resolvedOptions" [||])
      end
    module DateTimeFormatConstructor =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x817 : Ojs.t) -> x817
        and t_to_js : t -> Ojs.t = fun (x816 : Ojs.t) -> x816
        let (create :
          t ->
            ?locales:string list or_string ->
              ?options:DateTimeFormatOptions.t -> unit -> DateTimeFormat.t)
          =
          fun (x825 : t) ->
            fun ?locales:(x818 : string list or_string option) ->
              fun ?options:(x819 : DateTimeFormatOptions.t option) ->
                fun () ->
                  DateTimeFormat.t_of_js
                    (Ojs.new_obj_arr (t_to_js x825)
                       (let x820 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x818 with
                         | Some x822 ->
                             ignore
                               (Ojs.call x820 "push"
                                  [|(or_string_to_js
                                       (fun (x823 : string list) ->
                                          Ojs.list_to_js Ojs.string_to_js
                                            x823) x822)|])
                         | None -> ());
                        (match x819 with
                         | Some x821 ->
                             ignore
                               (Ojs.call x820 "push"
                                  [|(DateTimeFormatOptions.t_to_js x821)|])
                         | None -> ());
                        x820))
        let (apply :
          t ->
            ?locales:string list or_string ->
              ?options:DateTimeFormatOptions.t -> unit -> DateTimeFormat.t)
          =
          fun (x833 : t) ->
            fun ?locales:(x826 : string list or_string option) ->
              fun ?options:(x827 : DateTimeFormatOptions.t option) ->
                fun () ->
                  DateTimeFormat.t_of_js
                    (Ojs.call (t_to_js x833) "apply"
                       [|Ojs.null;((let x828 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x826 with
                                     | Some x830 ->
                                         ignore
                                           (Ojs.call x828 "push"
                                              [|(or_string_to_js
                                                   (fun (x831 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js x831)
                                                   x830)|])
                                     | None -> ());
                                    (match x827 with
                                     | Some x829 ->
                                         ignore
                                           (Ojs.call x828 "push"
                                              [|(DateTimeFormatOptions.t_to_js
                                                   x829)|])
                                     | None -> ());
                                    x828))|])
        let (supported_locales_of :
          t ->
            locales:string list or_string ->
              ?options:DateTimeFormatOptions.t -> unit -> string list)
          =
          fun (x840 : t) ->
            fun ~locales:(x834 : string list or_string) ->
              fun ?options:(x835 : DateTimeFormatOptions.t option) ->
                fun () ->
                  Ojs.list_of_js Ojs.string_of_js
                    (let x841 = t_to_js x840 in
                     Ojs.call (Ojs.get_prop_ascii x841 "supportedLocalesOf")
                       "apply"
                       [|x841;((let x836 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x836 "push"
                                     [|(or_string_to_js
                                          (fun (x838 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x838) x834)|]);
                                (match x835 with
                                 | Some x837 ->
                                     ignore
                                       (Ojs.call x836 "push"
                                          [|(DateTimeFormatOptions.t_to_js
                                               x837)|])
                                 | None -> ());
                                x836))|])
      end
    let (date_time_format : DateTimeFormatConstructor.t) =
      DateTimeFormatConstructor.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Intl")
           "DateTimeFormat")
  end
module ConcatArray =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x844 : Ojs.t) -> x844
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x843 : Ojs.t) -> x843
    let (get_length : 'T t -> int) =
      fun (x845 : 'T t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x845) "length")
    let (get : 'T t -> int -> 'T) =
      fun (x847 : 'T t) ->
        fun (x849 : int) ->
          Obj.magic (Ojs.array_get (t_to_js Obj.magic x847) x849)
    let (join : 'T t -> ?separator:string -> unit -> string) =
      fun (x853 : 'T t) ->
        fun ?separator:(x850 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x855 = t_to_js Obj.magic x853 in
               Ojs.call (Ojs.get_prop_ascii x855 "join") "apply"
                 [|x855;((let x851 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x850 with
                           | Some x852 ->
                               ignore
                                 (Ojs.call x851 "push"
                                    [|(Ojs.string_to_js x852)|])
                           | None -> ());
                          x851))|])
    let (slice : 'T t -> ?start:int -> ?end_:int -> unit -> 'T list) =
      fun (x861 : 'T t) ->
        fun ?start:(x856 : int option) ->
          fun ?end_:(x857 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x863 = t_to_js Obj.magic x861 in
                 Ojs.call (Ojs.get_prop_ascii x863 "slice") "apply"
                   [|x863;((let x858 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x856 with
                             | Some x860 ->
                                 ignore
                                   (Ojs.call x858 "push"
                                      [|(Ojs.int_to_js x860)|])
                             | None -> ());
                            (match x857 with
                             | Some x859 ->
                                 ignore
                                   (Ojs.call x858 "push"
                                      [|(Ojs.int_to_js x859)|])
                             | None -> ());
                            x858))|])
  end
module ReadonlyArray =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x866 : Ojs.t) -> x866
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x865 : Ojs.t) -> x865
    let (get_length : 'T t -> int) =
      fun (x867 : 'T t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x867) "length")
    let (to_string : 'T t -> string) =
      fun (x869 : 'T t) ->
        Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x869) "toString" [||])
    let (to_locale_string : 'T t -> string) =
      fun (x871 : 'T t) ->
        Ojs.string_of_js
          (Ojs.call (t_to_js Obj.magic x871) "toLocaleString" [||])
    let (concat : 'T t -> 'T ConcatArray.t list -> 'T list) =
      fun (x877 : 'T t) ->
        fun (x873 : 'T ConcatArray.t list) ->
          Ojs.list_of_js Obj.magic
            (let x879 = t_to_js Obj.magic x877 in
             Ojs.call (Ojs.get_prop_ascii x879 "concat") "apply"
               [|x879;((let x874 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x875 : 'T ConcatArray.t) ->
                             ignore
                               (Ojs.call x874 "push"
                                  [|(ConcatArray.t_to_js Obj.magic x875)|]))
                          x873;
                        x874))|])
    let (concat' : 'T t -> ('T, 'T ConcatArray.t) union2 list -> 'T list) =
      fun (x887 : 'T t) ->
        fun (x881 : ('T, 'T ConcatArray.t) union2 list) ->
          Ojs.list_of_js Obj.magic
            (let x889 = t_to_js Obj.magic x887 in
             Ojs.call (Ojs.get_prop_ascii x889 "concat") "apply"
               [|x889;((let x882 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x883 : ('T, 'T ConcatArray.t) union2) ->
                             ignore
                               (Ojs.call x882 "push"
                                  [|(union2_to_js Obj.magic
                                       (fun (x885 : 'T ConcatArray.t) ->
                                          ConcatArray.t_to_js Obj.magic x885)
                                       x883)|])) x881;
                        x882))|])
    let (join : 'T t -> ?separator:string -> unit -> string) =
      fun (x894 : 'T t) ->
        fun ?separator:(x891 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x896 = t_to_js Obj.magic x894 in
               Ojs.call (Ojs.get_prop_ascii x896 "join") "apply"
                 [|x896;((let x892 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x891 with
                           | Some x893 ->
                               ignore
                                 (Ojs.call x892 "push"
                                    [|(Ojs.string_to_js x893)|])
                           | None -> ());
                          x892))|])
    let (slice : 'T t -> ?start:int -> ?end_:int -> unit -> 'T list) =
      fun (x902 : 'T t) ->
        fun ?start:(x897 : int option) ->
          fun ?end_:(x898 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x904 = t_to_js Obj.magic x902 in
                 Ojs.call (Ojs.get_prop_ascii x904 "slice") "apply"
                   [|x904;((let x899 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x897 with
                             | Some x901 ->
                                 ignore
                                   (Ojs.call x899 "push"
                                      [|(Ojs.int_to_js x901)|])
                             | None -> ());
                            (match x898 with
                             | Some x900 ->
                                 ignore
                                   (Ojs.call x899 "push"
                                      [|(Ojs.int_to_js x900)|])
                             | None -> ());
                            x899))|])
    let (index_of :
      'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int) =
      fun (x910 : 'T t) ->
        fun ~searchElement:(x906 : 'T) ->
          fun ?fromIndex:(x907 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x912 = t_to_js Obj.magic x910 in
                 Ojs.call (Ojs.get_prop_ascii x912 "indexOf") "apply"
                   [|x912;((let x908 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x908 "push" [|(Obj.magic x906)|]);
                            (match x907 with
                             | Some x909 ->
                                 ignore
                                   (Ojs.call x908 "push"
                                      [|(Ojs.int_to_js x909)|])
                             | None -> ());
                            x908))|])
    let (last_index_of :
      'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int) =
      fun (x917 : 'T t) ->
        fun ~searchElement:(x913 : 'T) ->
          fun ?fromIndex:(x914 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x919 = t_to_js Obj.magic x917 in
                 Ojs.call (Ojs.get_prop_ascii x919 "lastIndexOf") "apply"
                   [|x919;((let x915 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x915 "push" [|(Obj.magic x913)|]);
                            (match x914 with
                             | Some x916 ->
                                 ignore
                                   (Ojs.call x915 "push"
                                      [|(Ojs.int_to_js x916)|])
                             | None -> ());
                            x915))|])
    let (every :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x928 : 'T t) ->
        fun (x920 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x921 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x930 = t_to_js Obj.magic x928 in
                 Ojs.call (Ojs.get_prop_ascii x930 "every") "apply"
                   [|x930;((let x922 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x922 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x924 : Ojs.t) ->
                                         fun (x925 : Ojs.t) ->
                                           fun (x926 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x920 ~value:(Obj.magic x924)
                                                  ~index:(Ojs.int_of_js x925)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x926))))|]);
                            (match x921 with
                             | Some x923 ->
                                 ignore
                                   (Ojs.call x922 "push" [|(any_to_js x923)|])
                             | None -> ());
                            x922))|])
    let (every' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x939 : 'T t) ->
        fun (x931 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x932 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x941 = t_to_js Obj.magic x939 in
                 Ojs.call (Ojs.get_prop_ascii x941 "every") "apply"
                   [|x941;((let x933 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x933 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x935 : Ojs.t) ->
                                         fun (x936 : Ojs.t) ->
                                           fun (x937 : Ojs.t) ->
                                             unknown_to_js
                                               (x931 ~value:(Obj.magic x935)
                                                  ~index:(Ojs.int_of_js x936)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x937))))|]);
                            (match x932 with
                             | Some x934 ->
                                 ignore
                                   (Ojs.call x933 "push" [|(any_to_js x934)|])
                             | None -> ());
                            x933))|])
    let (some :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x950 : 'T t) ->
        fun (x942 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x943 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x952 = t_to_js Obj.magic x950 in
                 Ojs.call (Ojs.get_prop_ascii x952 "some") "apply"
                   [|x952;((let x944 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x944 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x946 : Ojs.t) ->
                                         fun (x947 : Ojs.t) ->
                                           fun (x948 : Ojs.t) ->
                                             unknown_to_js
                                               (x942 ~value:(Obj.magic x946)
                                                  ~index:(Ojs.int_of_js x947)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x948))))|]);
                            (match x943 with
                             | Some x945 ->
                                 ignore
                                   (Ojs.call x944 "push" [|(any_to_js x945)|])
                             | None -> ());
                            x944))|])
    let (for_each :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x961 : 'T t) ->
        fun
          ~callbackfn:(x953 : value:'T -> index:int -> array:'T list -> unit)
          ->
          fun ?thisArg:(x954 : any option) ->
            fun () ->
              ignore
                (let x963 = t_to_js Obj.magic x961 in
                 Ojs.call (Ojs.get_prop_ascii x963 "forEach") "apply"
                   [|x963;((let x955 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x955 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x957 : Ojs.t) ->
                                         fun (x958 : Ojs.t) ->
                                           fun (x959 : Ojs.t) ->
                                             x953 ~value:(Obj.magic x957)
                                               ~index:(Ojs.int_of_js x958)
                                               ~array:(Ojs.list_of_js
                                                         Obj.magic x959)))|]);
                            (match x954 with
                             | Some x956 ->
                                 ignore
                                   (Ojs.call x955 "push" [|(any_to_js x956)|])
                             | None -> ());
                            x955))|])
    let (map :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> 'U) ->
          ?thisArg:any -> unit -> 'U list)
      =
      fun (x972 : 'T t) ->
        fun ~callbackfn:(x964 : value:'T -> index:int -> array:'T list -> 'U)
          ->
          fun ?thisArg:(x965 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x974 = t_to_js Obj.magic x972 in
                 Ojs.call (Ojs.get_prop_ascii x974 "map") "apply"
                   [|x974;((let x966 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x966 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x968 : Ojs.t) ->
                                         fun (x969 : Ojs.t) ->
                                           fun (x970 : Ojs.t) ->
                                             Obj.magic
                                               (x964 ~value:(Obj.magic x968)
                                                  ~index:(Ojs.int_of_js x969)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x970))))|]);
                            (match x965 with
                             | Some x967 ->
                                 ignore
                                   (Ojs.call x966 "push" [|(any_to_js x967)|])
                             | None -> ());
                            x966))|])
    let (filter :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> 'S list)
      =
      fun (x984 : 'T t) ->
        fun (x976 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x977 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x986 = t_to_js Obj.magic x984 in
                 Ojs.call (Ojs.get_prop_ascii x986 "filter") "apply"
                   [|x986;((let x978 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x978 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x980 : Ojs.t) ->
                                         fun (x981 : Ojs.t) ->
                                           fun (x982 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x976 ~value:(Obj.magic x980)
                                                  ~index:(Ojs.int_of_js x981)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x982))))|]);
                            (match x977 with
                             | Some x979 ->
                                 ignore
                                   (Ojs.call x978 "push" [|(any_to_js x979)|])
                             | None -> ());
                            x978))|])
    let (filter' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T list)
      =
      fun (x996 : 'T t) ->
        fun (x988 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x989 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x998 = t_to_js Obj.magic x996 in
                 Ojs.call (Ojs.get_prop_ascii x998 "filter") "apply"
                   [|x998;((let x990 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x990 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x992 : Ojs.t) ->
                                         fun (x993 : Ojs.t) ->
                                           fun (x994 : Ojs.t) ->
                                             unknown_to_js
                                               (x988 ~value:(Obj.magic x992)
                                                  ~index:(Ojs.int_of_js x993)
                                                  ~array:(Ojs.list_of_js
                                                            Obj.magic x994))))|]);
                            (match x989 with
                             | Some x991 ->
                                 ignore
                                   (Ojs.call x990 "push" [|(any_to_js x991)|])
                             | None -> ());
                            x990))|])
    let (reduce :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1006 : 'T t) ->
        fun
          ~callbackfn:(x1000 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x1006) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x1001 : Ojs.t) ->
                       fun (x1002 : Ojs.t) ->
                         fun (x1003 : Ojs.t) ->
                           fun (x1004 : Ojs.t) ->
                             Obj.magic
                               (x1000 ~previousValue:(Obj.magic x1001)
                                  ~currentValue:(Obj.magic x1002)
                                  ~currentIndex:(Ojs.int_of_js x1003)
                                  ~array:(Ojs.list_of_js Obj.magic x1004))))|])
    let (reduce' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1015 : 'T t) ->
        fun
          ~callbackfn:(x1008 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1014 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1015) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1009 : Ojs.t) ->
                         fun (x1010 : Ojs.t) ->
                           fun (x1011 : Ojs.t) ->
                             fun (x1012 : Ojs.t) ->
                               Obj.magic
                                 (x1008 ~previousValue:(Obj.magic x1009)
                                    ~currentValue:(Obj.magic x1010)
                                    ~currentIndex:(Ojs.int_of_js x1011)
                                    ~array:(Ojs.list_of_js Obj.magic x1012))));(
                   Obj.magic x1014)|])
    let (reduce'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1024 : 'T t) ->
        fun
          ~callbackfn:(x1017 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1023 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1024) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1018 : Ojs.t) ->
                         fun (x1019 : Ojs.t) ->
                           fun (x1020 : Ojs.t) ->
                             fun (x1021 : Ojs.t) ->
                               Obj.magic
                                 (x1017 ~previousValue:(Obj.magic x1018)
                                    ~currentValue:(Obj.magic x1019)
                                    ~currentIndex:(Ojs.int_of_js x1020)
                                    ~array:(Ojs.list_of_js Obj.magic x1021))));(
                   Obj.magic x1023)|])
    let (reduce_right :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1032 : 'T t) ->
        fun
          ~callbackfn:(x1026 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x1032) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x1027 : Ojs.t) ->
                       fun (x1028 : Ojs.t) ->
                         fun (x1029 : Ojs.t) ->
                           fun (x1030 : Ojs.t) ->
                             Obj.magic
                               (x1026 ~previousValue:(Obj.magic x1027)
                                  ~currentValue:(Obj.magic x1028)
                                  ~currentIndex:(Ojs.int_of_js x1029)
                                  ~array:(Ojs.list_of_js Obj.magic x1030))))|])
    let (reduce_right' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1041 : 'T t) ->
        fun
          ~callbackfn:(x1034 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1040 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1041) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1035 : Ojs.t) ->
                         fun (x1036 : Ojs.t) ->
                           fun (x1037 : Ojs.t) ->
                             fun (x1038 : Ojs.t) ->
                               Obj.magic
                                 (x1034 ~previousValue:(Obj.magic x1035)
                                    ~currentValue:(Obj.magic x1036)
                                    ~currentIndex:(Ojs.int_of_js x1037)
                                    ~array:(Ojs.list_of_js Obj.magic x1038))));(
                   Obj.magic x1040)|])
    let (reduce_right'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1050 : 'T t) ->
        fun
          ~callbackfn:(x1043 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1049 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1050) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1044 : Ojs.t) ->
                         fun (x1045 : Ojs.t) ->
                           fun (x1046 : Ojs.t) ->
                             fun (x1047 : Ojs.t) ->
                               Obj.magic
                                 (x1043 ~previousValue:(Obj.magic x1044)
                                    ~currentValue:(Obj.magic x1045)
                                    ~currentIndex:(Ojs.int_of_js x1046)
                                    ~array:(Ojs.list_of_js Obj.magic x1047))));(
                   Obj.magic x1049)|])
    let (get : 'T t -> int -> 'T) =
      fun (x1052 : 'T t) ->
        fun (x1054 : int) ->
          Obj.magic (Ojs.array_get (t_to_js Obj.magic x1052) x1054)
    let (to_ml : 'T t -> 'T list) =
      fun (x1055 : 'T t) ->
        Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1055)
    let (of_ml : 'T list -> 'T t) =
      fun (x1058 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1058)
  end
module TemplateStringsArray =
  struct
    include struct include ReadonlyArray end
    type t = string ReadonlyArray.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1063 : Ojs.t) -> ReadonlyArray.t_of_js Ojs.string_of_js x1063
    and t_to_js : t -> Ojs.t =
      fun (x1061 : string ReadonlyArray.t) ->
        ReadonlyArray.t_to_js Ojs.string_to_js x1061
    let (get_raw : t -> string list) =
      fun (x1065 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x1065) "raw")
  end
module Array =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x1068 : Ojs.t) -> x1068
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x1067 : Ojs.t) -> x1067
    let (get_length : 'T t -> int) =
      fun (x1069 : 'T t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x1069) "length")
    let (set_length : 'T t -> int -> unit) =
      fun (x1071 : 'T t) ->
        fun (x1072 : int) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x1071) "length"
            (Ojs.int_to_js x1072)
    let (to_string : 'T t -> string) =
      fun (x1074 : 'T t) ->
        Ojs.string_of_js (Ojs.call (t_to_js Obj.magic x1074) "toString" [||])
    let (to_locale_string : 'T t -> string) =
      fun (x1076 : 'T t) ->
        Ojs.string_of_js
          (Ojs.call (t_to_js Obj.magic x1076) "toLocaleString" [||])
    let (pop : 'T t -> 'T or_undefined) =
      fun (x1078 : 'T t) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x1078) "pop" [||])
    let (push : 'T t -> 'T list -> int) =
      fun (x1084 : 'T t) ->
        fun (x1081 : 'T list) ->
          Ojs.int_of_js
            (let x1086 = t_to_js Obj.magic x1084 in
             Ojs.call (Ojs.get_prop_ascii x1086 "push") "apply"
               [|x1086;((let x1082 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1083 : 'T) ->
                              ignore
                                (Ojs.call x1082 "push" [|(Obj.magic x1083)|]))
                           x1081;
                         x1082))|])
    let (concat : 'T t -> 'T ConcatArray.t list -> 'T list) =
      fun (x1091 : 'T t) ->
        fun (x1087 : 'T ConcatArray.t list) ->
          Ojs.list_of_js Obj.magic
            (let x1093 = t_to_js Obj.magic x1091 in
             Ojs.call (Ojs.get_prop_ascii x1093 "concat") "apply"
               [|x1093;((let x1088 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1089 : 'T ConcatArray.t) ->
                              ignore
                                (Ojs.call x1088 "push"
                                   [|(ConcatArray.t_to_js Obj.magic x1089)|]))
                           x1087;
                         x1088))|])
    let (concat' : 'T t -> ('T, 'T ConcatArray.t) union2 list -> 'T list) =
      fun (x1101 : 'T t) ->
        fun (x1095 : ('T, 'T ConcatArray.t) union2 list) ->
          Ojs.list_of_js Obj.magic
            (let x1103 = t_to_js Obj.magic x1101 in
             Ojs.call (Ojs.get_prop_ascii x1103 "concat") "apply"
               [|x1103;((let x1096 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1097 : ('T, 'T ConcatArray.t) union2) ->
                              ignore
                                (Ojs.call x1096 "push"
                                   [|(union2_to_js Obj.magic
                                        (fun (x1099 : 'T ConcatArray.t) ->
                                           ConcatArray.t_to_js Obj.magic
                                             x1099) x1097)|])) x1095;
                         x1096))|])
    let (join : 'T t -> ?separator:string -> unit -> string) =
      fun (x1108 : 'T t) ->
        fun ?separator:(x1105 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x1110 = t_to_js Obj.magic x1108 in
               Ojs.call (Ojs.get_prop_ascii x1110 "join") "apply"
                 [|x1110;((let x1106 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1105 with
                            | Some x1107 ->
                                ignore
                                  (Ojs.call x1106 "push"
                                     [|(Ojs.string_to_js x1107)|])
                            | None -> ());
                           x1106))|])
    let (reverse : 'T t -> 'T list) =
      fun (x1111 : 'T t) ->
        Ojs.list_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x1111) "reverse" [||])
    let (shift : 'T t -> 'T or_undefined) =
      fun (x1114 : 'T t) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x1114) "shift" [||])
    let (slice : 'T t -> ?start:int -> ?end_:int -> unit -> 'T list) =
      fun (x1122 : 'T t) ->
        fun ?start:(x1117 : int option) ->
          fun ?end_:(x1118 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1124 = t_to_js Obj.magic x1122 in
                 Ojs.call (Ojs.get_prop_ascii x1124 "slice") "apply"
                   [|x1124;((let x1119 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1117 with
                              | Some x1121 ->
                                  ignore
                                    (Ojs.call x1119 "push"
                                       [|(Ojs.int_to_js x1121)|])
                              | None -> ());
                             (match x1118 with
                              | Some x1120 ->
                                  ignore
                                    (Ojs.call x1119 "push"
                                       [|(Ojs.int_to_js x1120)|])
                              | None -> ());
                             x1119))|])
    let (sort : 'T t -> ?compareFn:(a:'T -> b:'T -> int) -> unit -> 'T t) =
      fun (x1131 : 'T t) ->
        fun ?compareFn:(x1126 : (a:'T -> b:'T -> int) option) ->
          fun () ->
            t_of_js Obj.magic
              (let x1133 = t_to_js Obj.magic x1131 in
               Ojs.call (Ojs.get_prop_ascii x1133 "sort") "apply"
                 [|x1133;((let x1127 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1126 with
                            | Some x1128 ->
                                ignore
                                  (Ojs.call x1127 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x1129 : Ojs.t) ->
                                             fun (x1130 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x1128 ~a:(Obj.magic x1129)
                                                    ~b:(Obj.magic x1130))))|])
                            | None -> ());
                           x1127))|])
    let (splice : 'T t -> start:int -> ?deleteCount:int -> unit -> 'T list) =
      fun (x1139 : 'T t) ->
        fun ~start:(x1135 : int) ->
          fun ?deleteCount:(x1136 : int option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1141 = t_to_js Obj.magic x1139 in
                 Ojs.call (Ojs.get_prop_ascii x1141 "splice") "apply"
                   [|x1141;((let x1137 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1137 "push"
                                  [|(Ojs.int_to_js x1135)|]);
                             (match x1136 with
                              | Some x1138 ->
                                  ignore
                                    (Ojs.call x1137 "push"
                                       [|(Ojs.int_to_js x1138)|])
                              | None -> ());
                             x1137))|])
    let (splice' :
      'T t -> start:int -> deleteCount:int -> 'T list -> 'T list) =
      fun (x1148 : 'T t) ->
        fun ~start:(x1143 : int) ->
          fun ~deleteCount:(x1144 : int) ->
            fun (x1145 : 'T list) ->
              Ojs.list_of_js Obj.magic
                (let x1150 = t_to_js Obj.magic x1148 in
                 Ojs.call (Ojs.get_prop_ascii x1150 "splice") "apply"
                   [|x1150;((let x1146 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1146 "push"
                                  [|(Ojs.int_to_js x1143)|]);
                             ignore
                               (Ojs.call x1146 "push"
                                  [|(Ojs.int_to_js x1144)|]);
                             List.iter
                               (fun (x1147 : 'T) ->
                                  ignore
                                    (Ojs.call x1146 "push"
                                       [|(Obj.magic x1147)|])) x1145;
                             x1146))|])
    let (unshift : 'T t -> 'T list -> int) =
      fun (x1155 : 'T t) ->
        fun (x1152 : 'T list) ->
          Ojs.int_of_js
            (let x1157 = t_to_js Obj.magic x1155 in
             Ojs.call (Ojs.get_prop_ascii x1157 "unshift") "apply"
               [|x1157;((let x1153 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1154 : 'T) ->
                              ignore
                                (Ojs.call x1153 "push" [|(Obj.magic x1154)|]))
                           x1152;
                         x1153))|])
    let (index_of :
      'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int) =
      fun (x1162 : 'T t) ->
        fun ~searchElement:(x1158 : 'T) ->
          fun ?fromIndex:(x1159 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1164 = t_to_js Obj.magic x1162 in
                 Ojs.call (Ojs.get_prop_ascii x1164 "indexOf") "apply"
                   [|x1164;((let x1160 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1160 "push" [|(Obj.magic x1158)|]);
                             (match x1159 with
                              | Some x1161 ->
                                  ignore
                                    (Ojs.call x1160 "push"
                                       [|(Ojs.int_to_js x1161)|])
                              | None -> ());
                             x1160))|])
    let (last_index_of :
      'T t -> searchElement:'T -> ?fromIndex:int -> unit -> int) =
      fun (x1169 : 'T t) ->
        fun ~searchElement:(x1165 : 'T) ->
          fun ?fromIndex:(x1166 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1171 = t_to_js Obj.magic x1169 in
                 Ojs.call (Ojs.get_prop_ascii x1171 "lastIndexOf") "apply"
                   [|x1171;((let x1167 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1167 "push" [|(Obj.magic x1165)|]);
                             (match x1166 with
                              | Some x1168 ->
                                  ignore
                                    (Ojs.call x1167 "push"
                                       [|(Ojs.int_to_js x1168)|])
                              | None -> ());
                             x1167))|])
    let (every :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1180 : 'T t) ->
        fun (x1172 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x1173 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1182 = t_to_js Obj.magic x1180 in
                 Ojs.call (Ojs.get_prop_ascii x1182 "every") "apply"
                   [|x1182;((let x1174 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1174 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1176 : Ojs.t) ->
                                          fun (x1177 : Ojs.t) ->
                                            fun (x1178 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x1172
                                                   ~value:(Obj.magic x1176)
                                                   ~index:(Ojs.int_of_js
                                                             x1177)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1178))))|]);
                             (match x1173 with
                              | Some x1175 ->
                                  ignore
                                    (Ojs.call x1174 "push"
                                       [|(any_to_js x1175)|])
                              | None -> ());
                             x1174))|])
    let (every' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1191 : 'T t) ->
        fun (x1183 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x1184 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1193 = t_to_js Obj.magic x1191 in
                 Ojs.call (Ojs.get_prop_ascii x1193 "every") "apply"
                   [|x1193;((let x1185 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1185 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1187 : Ojs.t) ->
                                          fun (x1188 : Ojs.t) ->
                                            fun (x1189 : Ojs.t) ->
                                              unknown_to_js
                                                (x1183
                                                   ~value:(Obj.magic x1187)
                                                   ~index:(Ojs.int_of_js
                                                             x1188)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1189))))|]);
                             (match x1184 with
                              | Some x1186 ->
                                  ignore
                                    (Ojs.call x1185 "push"
                                       [|(any_to_js x1186)|])
                              | None -> ());
                             x1185))|])
    let (some :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x1202 : 'T t) ->
        fun (x1194 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x1195 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1204 = t_to_js Obj.magic x1202 in
                 Ojs.call (Ojs.get_prop_ascii x1204 "some") "apply"
                   [|x1204;((let x1196 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1196 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1198 : Ojs.t) ->
                                          fun (x1199 : Ojs.t) ->
                                            fun (x1200 : Ojs.t) ->
                                              unknown_to_js
                                                (x1194
                                                   ~value:(Obj.magic x1198)
                                                   ~index:(Ojs.int_of_js
                                                             x1199)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1200))))|]);
                             (match x1195 with
                              | Some x1197 ->
                                  ignore
                                    (Ojs.call x1196 "push"
                                       [|(any_to_js x1197)|])
                              | None -> ());
                             x1196))|])
    let (for_each :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x1213 : 'T t) ->
        fun
          ~callbackfn:(x1205 :
                        value:'T -> index:int -> array:'T list -> unit)
          ->
          fun ?thisArg:(x1206 : any option) ->
            fun () ->
              ignore
                (let x1215 = t_to_js Obj.magic x1213 in
                 Ojs.call (Ojs.get_prop_ascii x1215 "forEach") "apply"
                   [|x1215;((let x1207 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1207 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1209 : Ojs.t) ->
                                          fun (x1210 : Ojs.t) ->
                                            fun (x1211 : Ojs.t) ->
                                              x1205 ~value:(Obj.magic x1209)
                                                ~index:(Ojs.int_of_js x1210)
                                                ~array:(Ojs.list_of_js
                                                          Obj.magic x1211)))|]);
                             (match x1206 with
                              | Some x1208 ->
                                  ignore
                                    (Ojs.call x1207 "push"
                                       [|(any_to_js x1208)|])
                              | None -> ());
                             x1207))|])
    let (map :
      'T t ->
        callbackfn:(value:'T -> index:int -> array:'T list -> 'U) ->
          ?thisArg:any -> unit -> 'U list)
      =
      fun (x1224 : 'T t) ->
        fun
          ~callbackfn:(x1216 : value:'T -> index:int -> array:'T list -> 'U)
          ->
          fun ?thisArg:(x1217 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1226 = t_to_js Obj.magic x1224 in
                 Ojs.call (Ojs.get_prop_ascii x1226 "map") "apply"
                   [|x1226;((let x1218 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1218 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1220 : Ojs.t) ->
                                          fun (x1221 : Ojs.t) ->
                                            fun (x1222 : Ojs.t) ->
                                              Obj.magic
                                                (x1216
                                                   ~value:(Obj.magic x1220)
                                                   ~index:(Ojs.int_of_js
                                                             x1221)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1222))))|]);
                             (match x1217 with
                              | Some x1219 ->
                                  ignore
                                    (Ojs.call x1218 "push"
                                       [|(any_to_js x1219)|])
                              | None -> ());
                             x1218))|])
    let (filter :
      'T t ->
        (value:'T -> index:int -> array:'T list -> bool) ->
          ?thisArg:any -> unit -> 'S list)
      =
      fun (x1236 : 'T t) ->
        fun (x1228 : value:'T -> index:int -> array:'T list -> bool) ->
          fun ?thisArg:(x1229 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1238 = t_to_js Obj.magic x1236 in
                 Ojs.call (Ojs.get_prop_ascii x1238 "filter") "apply"
                   [|x1238;((let x1230 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1230 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1232 : Ojs.t) ->
                                          fun (x1233 : Ojs.t) ->
                                            fun (x1234 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x1228
                                                   ~value:(Obj.magic x1232)
                                                   ~index:(Ojs.int_of_js
                                                             x1233)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1234))))|]);
                             (match x1229 with
                              | Some x1231 ->
                                  ignore
                                    (Ojs.call x1230 "push"
                                       [|(any_to_js x1231)|])
                              | None -> ());
                             x1230))|])
    let (filter' :
      'T t ->
        (value:'T -> index:int -> array:'T list -> unknown) ->
          ?thisArg:any -> unit -> 'T list)
      =
      fun (x1248 : 'T t) ->
        fun (x1240 : value:'T -> index:int -> array:'T list -> unknown) ->
          fun ?thisArg:(x1241 : any option) ->
            fun () ->
              Ojs.list_of_js Obj.magic
                (let x1250 = t_to_js Obj.magic x1248 in
                 Ojs.call (Ojs.get_prop_ascii x1250 "filter") "apply"
                   [|x1250;((let x1242 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1242 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1244 : Ojs.t) ->
                                          fun (x1245 : Ojs.t) ->
                                            fun (x1246 : Ojs.t) ->
                                              unknown_to_js
                                                (x1240
                                                   ~value:(Obj.magic x1244)
                                                   ~index:(Ojs.int_of_js
                                                             x1245)
                                                   ~array:(Ojs.list_of_js
                                                             Obj.magic x1246))))|]);
                             (match x1241 with
                              | Some x1243 ->
                                  ignore
                                    (Ojs.call x1242 "push"
                                       [|(any_to_js x1243)|])
                              | None -> ());
                             x1242))|])
    let (reduce :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1258 : 'T t) ->
        fun
          ~callbackfn:(x1252 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x1258) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x1253 : Ojs.t) ->
                       fun (x1254 : Ojs.t) ->
                         fun (x1255 : Ojs.t) ->
                           fun (x1256 : Ojs.t) ->
                             Obj.magic
                               (x1252 ~previousValue:(Obj.magic x1253)
                                  ~currentValue:(Obj.magic x1254)
                                  ~currentIndex:(Ojs.int_of_js x1255)
                                  ~array:(Ojs.list_of_js Obj.magic x1256))))|])
    let (reduce' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1267 : 'T t) ->
        fun
          ~callbackfn:(x1260 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1266 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1267) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1261 : Ojs.t) ->
                         fun (x1262 : Ojs.t) ->
                           fun (x1263 : Ojs.t) ->
                             fun (x1264 : Ojs.t) ->
                               Obj.magic
                                 (x1260 ~previousValue:(Obj.magic x1261)
                                    ~currentValue:(Obj.magic x1262)
                                    ~currentIndex:(Ojs.int_of_js x1263)
                                    ~array:(Ojs.list_of_js Obj.magic x1264))));(
                   Obj.magic x1266)|])
    let (reduce'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1276 : 'T t) ->
        fun
          ~callbackfn:(x1269 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1275 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1276) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x1270 : Ojs.t) ->
                         fun (x1271 : Ojs.t) ->
                           fun (x1272 : Ojs.t) ->
                             fun (x1273 : Ojs.t) ->
                               Obj.magic
                                 (x1269 ~previousValue:(Obj.magic x1270)
                                    ~currentValue:(Obj.magic x1271)
                                    ~currentIndex:(Ojs.int_of_js x1272)
                                    ~array:(Ojs.list_of_js Obj.magic x1273))));(
                   Obj.magic x1275)|])
    let (reduce_right :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> 'T)
      =
      fun (x1284 : 'T t) ->
        fun
          ~callbackfn:(x1278 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          Obj.magic
            (Ojs.call (t_to_js Obj.magic x1284) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x1279 : Ojs.t) ->
                       fun (x1280 : Ojs.t) ->
                         fun (x1281 : Ojs.t) ->
                           fun (x1282 : Ojs.t) ->
                             Obj.magic
                               (x1278 ~previousValue:(Obj.magic x1279)
                                  ~currentValue:(Obj.magic x1280)
                                  ~currentIndex:(Ojs.int_of_js x1281)
                                  ~array:(Ojs.list_of_js Obj.magic x1282))))|])
    let (reduce_right' :
      'T t ->
        callbackfn:(previousValue:'T ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'T)
          -> initialValue:'T -> 'T)
      =
      fun (x1293 : 'T t) ->
        fun
          ~callbackfn:(x1286 :
                        previousValue:'T ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'T)
          ->
          fun ~initialValue:(x1292 : 'T) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1293) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1287 : Ojs.t) ->
                         fun (x1288 : Ojs.t) ->
                           fun (x1289 : Ojs.t) ->
                             fun (x1290 : Ojs.t) ->
                               Obj.magic
                                 (x1286 ~previousValue:(Obj.magic x1287)
                                    ~currentValue:(Obj.magic x1288)
                                    ~currentIndex:(Ojs.int_of_js x1289)
                                    ~array:(Ojs.list_of_js Obj.magic x1290))));(
                   Obj.magic x1292)|])
    let (reduce_right'' :
      'T t ->
        callbackfn:(previousValue:'U ->
                      currentValue:'T ->
                        currentIndex:int -> array:'T list -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x1302 : 'T t) ->
        fun
          ~callbackfn:(x1295 :
                        previousValue:'U ->
                          currentValue:'T ->
                            currentIndex:int -> array:'T list -> 'U)
          ->
          fun ~initialValue:(x1301 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js Obj.magic x1302) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x1296 : Ojs.t) ->
                         fun (x1297 : Ojs.t) ->
                           fun (x1298 : Ojs.t) ->
                             fun (x1299 : Ojs.t) ->
                               Obj.magic
                                 (x1295 ~previousValue:(Obj.magic x1296)
                                    ~currentValue:(Obj.magic x1297)
                                    ~currentIndex:(Ojs.int_of_js x1298)
                                    ~array:(Ojs.list_of_js Obj.magic x1299))));(
                   Obj.magic x1301)|])
    let (get : 'T t -> int -> 'T) =
      fun (x1304 : 'T t) ->
        fun (x1306 : int) ->
          Obj.magic (Ojs.array_get (t_to_js Obj.magic x1304) x1306)
    let (set : 'T t -> int -> 'T -> unit) =
      fun (x1307 : 'T t) ->
        fun (x1309 : int) ->
          fun (x1310 : 'T) ->
            Ojs.array_set (t_to_js Obj.magic x1307) x1309 (Obj.magic x1310)
    let (to_ml : 'T t -> 'T list) =
      fun (x1311 : 'T t) ->
        Ojs.list_of_js Obj.magic (t_to_js Obj.magic x1311)
    let (of_ml : 'T list -> 'T t) =
      fun (x1314 : 'T list) ->
        t_of_js Obj.magic (Ojs.list_to_js Obj.magic x1314)
    let (create : ?arrayLength:int -> unit -> any list) =
      fun ?arrayLength:(x1317 : int option) ->
        fun () ->
          Ojs.list_of_js any_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Array")
               (let x1318 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1317 with
                 | Some x1319 ->
                     ignore (Ojs.call x1318 "push" [|(Ojs.int_to_js x1319)|])
                 | None -> ());
                x1318))
    let (create' : arrayLength:int -> 'T list) =
      fun ~arrayLength:(x1321 : int) ->
        Ojs.list_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
             [|(Ojs.int_to_js x1321)|])
    let (create'' : 'T list -> 'T list) =
      fun (x1323 : 'T list) ->
        Ojs.list_of_js Obj.magic
          (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Array")
             (let x1324 =
                Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
              List.iter
                (fun (x1325 : 'T) ->
                   ignore (Ojs.call x1324 "push" [|(Obj.magic x1325)|]))
                x1323;
              x1324))
    let (is_array : any -> bool) =
      fun (x1327 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "isArray"
             [|(any_to_js x1327)|])
  end
module ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1329 : Ojs.t) -> x1329
    and t_to_js : t -> Ojs.t = fun (x1328 : Ojs.t) -> x1328
    let (create : t -> ?arrayLength:int -> unit -> any list) =
      fun (x1333 : t) ->
        fun ?arrayLength:(x1330 : int option) ->
          fun () ->
            Ojs.list_of_js any_of_js
              (Ojs.new_obj_arr (t_to_js x1333)
                 (let x1331 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1330 with
                   | Some x1332 ->
                       ignore
                         (Ojs.call x1331 "push" [|(Ojs.int_to_js x1332)|])
                   | None -> ());
                  x1331))
    let (create' : t -> arrayLength:int -> 'T list) =
      fun (x1336 : t) ->
        fun ~arrayLength:(x1335 : int) ->
          Ojs.list_of_js Obj.magic
            (Ojs.new_obj (t_to_js x1336) [|(Ojs.int_to_js x1335)|])
    let (create'' : t -> 'T list -> 'T list) =
      fun (x1341 : t) ->
        fun (x1338 : 'T list) ->
          Ojs.list_of_js Obj.magic
            (Ojs.new_obj_arr (t_to_js x1341)
               (let x1339 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x1340 : 'T) ->
                     ignore (Ojs.call x1339 "push" [|(Obj.magic x1340)|]))
                  x1338;
                x1339))
    let (apply : t -> ?arrayLength:int -> unit -> any list) =
      fun (x1346 : t) ->
        fun ?arrayLength:(x1343 : int option) ->
          fun () ->
            Ojs.list_of_js any_of_js
              (Ojs.call (t_to_js x1346) "apply"
                 [|Ojs.null;((let x1344 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1343 with
                               | Some x1345 ->
                                   ignore
                                     (Ojs.call x1344 "push"
                                        [|(Ojs.int_to_js x1345)|])
                               | None -> ());
                              x1344))|])
    let (apply' : t -> arrayLength:int -> 'T list) =
      fun (x1349 : t) ->
        fun ~arrayLength:(x1348 : int) ->
          Ojs.list_of_js Obj.magic
            (Ojs.apply (t_to_js x1349) [|(Ojs.int_to_js x1348)|])
    let (apply'' : t -> 'T list -> 'T list) =
      fun (x1354 : t) ->
        fun (x1351 : 'T list) ->
          Ojs.list_of_js Obj.magic
            (Ojs.call (t_to_js x1354) "apply"
               [|Ojs.null;((let x1352 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x1353 : 'T) ->
                                 ignore
                                   (Ojs.call x1352 "push"
                                      [|(Obj.magic x1353)|])) x1351;
                            x1352))|])
    let (is_array : t -> any -> bool) =
      fun (x1357 : t) ->
        fun (x1356 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x1357) "isArray" [|(any_to_js x1356)|])
    let (get_prototype : t -> any list) =
      fun (x1358 : t) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (t_to_js x1358) "prototype")
  end
let (array : ArrayConstructor.t) =
  ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Array")
module RegExpMatchArray =
  struct
    include struct include Array end
    type t = string Array.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1362 : Ojs.t) -> Array.t_of_js Ojs.string_of_js x1362
    and t_to_js : t -> Ojs.t =
      fun (x1360 : string Array.t) -> Array.t_to_js Ojs.string_to_js x1360
    let (get_index : t -> int) =
      fun (x1364 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1364) "index")
    let (set_index : t -> int -> unit) =
      fun (x1365 : t) ->
        fun (x1366 : int) ->
          Ojs.set_prop_ascii (t_to_js x1365) "index" (Ojs.int_to_js x1366)
    let (get_input : t -> string) =
      fun (x1367 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1367) "input")
    let (set_input : t -> string -> unit) =
      fun (x1368 : t) ->
        fun (x1369 : string) ->
          Ojs.set_prop_ascii (t_to_js x1368) "input" (Ojs.string_to_js x1369)
  end
module RegExpExecArray =
  struct
    include struct include Array end
    type t = string Array.t
    let rec t_of_js : Ojs.t -> t =
      fun (x1372 : Ojs.t) -> Array.t_of_js Ojs.string_of_js x1372
    and t_to_js : t -> Ojs.t =
      fun (x1370 : string Array.t) -> Array.t_to_js Ojs.string_to_js x1370
    let (get_index : t -> int) =
      fun (x1374 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1374) "index")
    let (set_index : t -> int -> unit) =
      fun (x1375 : t) ->
        fun (x1376 : int) ->
          Ojs.set_prop_ascii (t_to_js x1375) "index" (Ojs.int_to_js x1376)
    let (get_input : t -> string) =
      fun (x1377 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1377) "input")
    let (set_input : t -> string -> unit) =
      fun (x1378 : t) ->
        fun (x1379 : string) ->
          Ojs.set_prop_ascii (t_to_js x1378) "input" (Ojs.string_to_js x1379)
  end
module RegExp =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1381 : Ojs.t) -> x1381
    and t_to_js : t -> Ojs.t = fun (x1380 : Ojs.t) -> x1380
    let (exec : t -> string:string -> RegExpExecArray.t or_null) =
      fun (x1383 : t) ->
        fun ~string:(x1382 : string) ->
          or_null_of_js RegExpExecArray.t_of_js
            (Ojs.call (t_to_js x1383) "exec" [|(Ojs.string_to_js x1382)|])
    let (test : t -> string:string -> bool) =
      fun (x1386 : t) ->
        fun ~string:(x1385 : string) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x1386) "test" [|(Ojs.string_to_js x1385)|])
    let (get_source : t -> string) =
      fun (x1387 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1387) "source")
    let (get_global : t -> bool) =
      fun (x1388 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1388) "global")
    let (get_ignore_case : t -> bool) =
      fun (x1389 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1389) "ignoreCase")
    let (get_multiline : t -> bool) =
      fun (x1390 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1390) "multiline")
    let (get_last_index : t -> int) =
      fun (x1391 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1391) "lastIndex")
    let (set_last_index : t -> int -> unit) =
      fun (x1392 : t) ->
        fun (x1393 : int) ->
          Ojs.set_prop_ascii (t_to_js x1392) "lastIndex"
            (Ojs.int_to_js x1393)
    let (compile : t -> t) =
      fun (x1394 : t) -> t_of_js (Ojs.call (t_to_js x1394) "compile" [||])
    let (create : pattern:t or_string -> t) =
      fun ~pattern:(x1395 : t or_string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RegExp")
             [|(or_string_to_js t_to_js x1395)|])
    let (create' : pattern:string -> ?flags:string -> unit -> t) =
      fun ~pattern:(x1397 : string) ->
        fun ?flags:(x1398 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RegExp")
                 (let x1399 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x1399 "push" [|(Ojs.string_to_js x1397)|]);
                  (match x1398 with
                   | Some x1400 ->
                       ignore
                         (Ojs.call x1399 "push" [|(Ojs.string_to_js x1400)|])
                   | None -> ());
                  x1399))
    let (get_1 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$1" [||])
    let (set_1 : string -> unit) =
      fun (x1401 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$1"
             [|(Ojs.string_to_js x1401)|])
    let (get_2 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$2" [||])
    let (set_2 : string -> unit) =
      fun (x1402 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$2"
             [|(Ojs.string_to_js x1402)|])
    let (get_3 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$3" [||])
    let (set_3 : string -> unit) =
      fun (x1403 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$3"
             [|(Ojs.string_to_js x1403)|])
    let (get_4 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$4" [||])
    let (set_4 : string -> unit) =
      fun (x1404 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$4"
             [|(Ojs.string_to_js x1404)|])
    let (get_5 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$5" [||])
    let (set_5 : string -> unit) =
      fun (x1405 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$5"
             [|(Ojs.string_to_js x1405)|])
    let (get_6 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$6" [||])
    let (set_6 : string -> unit) =
      fun (x1406 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$6"
             [|(Ojs.string_to_js x1406)|])
    let (get_7 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$7" [||])
    let (set_7 : string -> unit) =
      fun (x1407 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$7"
             [|(Ojs.string_to_js x1407)|])
    let (get_8 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$8" [||])
    let (set_8 : string -> unit) =
      fun (x1408 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$8"
             [|(Ojs.string_to_js x1408)|])
    let (get_9 : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$9" [||])
    let (set_9 : string -> unit) =
      fun (x1409 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "$9"
             [|(Ojs.string_to_js x1409)|])
    let (get_last_match : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "lastMatch" [||])
    let (set_last_match : string -> unit) =
      fun (x1410 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RegExp") "lastMatch"
             [|(Ojs.string_to_js x1410)|])
  end
module RegExpConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1412 : Ojs.t) -> x1412
    and t_to_js : t -> Ojs.t = fun (x1411 : Ojs.t) -> x1411
    let (create : t -> pattern:RegExp.t or_string -> RegExp.t) =
      fun (x1415 : t) ->
        fun ~pattern:(x1413 : RegExp.t or_string) ->
          RegExp.t_of_js
            (Ojs.new_obj (t_to_js x1415)
               [|(or_string_to_js RegExp.t_to_js x1413)|])
    let (create' : t -> pattern:string -> ?flags:string -> unit -> RegExp.t)
      =
      fun (x1420 : t) ->
        fun ~pattern:(x1416 : string) ->
          fun ?flags:(x1417 : string option) ->
            fun () ->
              RegExp.t_of_js
                (Ojs.new_obj_arr (t_to_js x1420)
                   (let x1418 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x1418 "push" [|(Ojs.string_to_js x1416)|]);
                    (match x1417 with
                     | Some x1419 ->
                         ignore
                           (Ojs.call x1418 "push"
                              [|(Ojs.string_to_js x1419)|])
                     | None -> ());
                    x1418))
    let (apply : t -> pattern:RegExp.t or_string -> RegExp.t) =
      fun (x1423 : t) ->
        fun ~pattern:(x1421 : RegExp.t or_string) ->
          RegExp.t_of_js
            (Ojs.apply (t_to_js x1423)
               [|(or_string_to_js RegExp.t_to_js x1421)|])
    let (apply' : t -> pattern:string -> ?flags:string -> unit -> RegExp.t) =
      fun (x1428 : t) ->
        fun ~pattern:(x1424 : string) ->
          fun ?flags:(x1425 : string option) ->
            fun () ->
              RegExp.t_of_js
                (Ojs.call (t_to_js x1428) "apply"
                   [|Ojs.null;((let x1426 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x1426 "push"
                                     [|(Ojs.string_to_js x1424)|]);
                                (match x1425 with
                                 | Some x1427 ->
                                     ignore
                                       (Ojs.call x1426 "push"
                                          [|(Ojs.string_to_js x1427)|])
                                 | None -> ());
                                x1426))|])
    let (get_prototype : t -> RegExp.t) =
      fun (x1429 : t) ->
        RegExp.t_of_js (Ojs.get_prop_ascii (t_to_js x1429) "prototype")
    let (get_1 : t -> string) =
      fun (x1430 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1430) "$1")
    let (set_1 : t -> string -> unit) =
      fun (x1431 : t) ->
        fun (x1432 : string) ->
          Ojs.set_prop_ascii (t_to_js x1431) "$1" (Ojs.string_to_js x1432)
    let (get_2 : t -> string) =
      fun (x1433 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1433) "$2")
    let (set_2 : t -> string -> unit) =
      fun (x1434 : t) ->
        fun (x1435 : string) ->
          Ojs.set_prop_ascii (t_to_js x1434) "$2" (Ojs.string_to_js x1435)
    let (get_3 : t -> string) =
      fun (x1436 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1436) "$3")
    let (set_3 : t -> string -> unit) =
      fun (x1437 : t) ->
        fun (x1438 : string) ->
          Ojs.set_prop_ascii (t_to_js x1437) "$3" (Ojs.string_to_js x1438)
    let (get_4 : t -> string) =
      fun (x1439 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1439) "$4")
    let (set_4 : t -> string -> unit) =
      fun (x1440 : t) ->
        fun (x1441 : string) ->
          Ojs.set_prop_ascii (t_to_js x1440) "$4" (Ojs.string_to_js x1441)
    let (get_5 : t -> string) =
      fun (x1442 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1442) "$5")
    let (set_5 : t -> string -> unit) =
      fun (x1443 : t) ->
        fun (x1444 : string) ->
          Ojs.set_prop_ascii (t_to_js x1443) "$5" (Ojs.string_to_js x1444)
    let (get_6 : t -> string) =
      fun (x1445 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1445) "$6")
    let (set_6 : t -> string -> unit) =
      fun (x1446 : t) ->
        fun (x1447 : string) ->
          Ojs.set_prop_ascii (t_to_js x1446) "$6" (Ojs.string_to_js x1447)
    let (get_7 : t -> string) =
      fun (x1448 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1448) "$7")
    let (set_7 : t -> string -> unit) =
      fun (x1449 : t) ->
        fun (x1450 : string) ->
          Ojs.set_prop_ascii (t_to_js x1449) "$7" (Ojs.string_to_js x1450)
    let (get_8 : t -> string) =
      fun (x1451 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1451) "$8")
    let (set_8 : t -> string -> unit) =
      fun (x1452 : t) ->
        fun (x1453 : string) ->
          Ojs.set_prop_ascii (t_to_js x1452) "$8" (Ojs.string_to_js x1453)
    let (get_9 : t -> string) =
      fun (x1454 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1454) "$9")
    let (set_9 : t -> string -> unit) =
      fun (x1455 : t) ->
        fun (x1456 : string) ->
          Ojs.set_prop_ascii (t_to_js x1455) "$9" (Ojs.string_to_js x1456)
    let (get_last_match : t -> string) =
      fun (x1457 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1457) "lastMatch")
    let (set_last_match : t -> string -> unit) =
      fun (x1458 : t) ->
        fun (x1459 : string) ->
          Ojs.set_prop_ascii (t_to_js x1458) "lastMatch"
            (Ojs.string_to_js x1459)
  end
let (reg_exp : RegExpConstructor.t) =
  RegExpConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "RegExp")
module String =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1461 : Ojs.t) -> x1461
    and t_to_js : t -> Ojs.t = fun (x1460 : Ojs.t) -> x1460
    let (locale_compare :
      t ->
        that:string ->
          ?locales:string list or_string ->
            ?options:Intl.CollatorOptions.t -> unit -> int)
      =
      fun (x1470 : t) ->
        fun ~that:(x1462 : string) ->
          fun ?locales:(x1463 : string list or_string option) ->
            fun ?options:(x1464 : Intl.CollatorOptions.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1471 = t_to_js x1470 in
                   Ojs.call (Ojs.get_prop_ascii x1471 "localeCompare")
                     "apply"
                     [|x1471;((let x1465 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1465 "push"
                                    [|(Ojs.string_to_js x1462)|]);
                               (match x1463 with
                                | Some x1467 ->
                                    ignore
                                      (Ojs.call x1465 "push"
                                         [|(or_string_to_js
                                              (fun (x1468 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x1468)
                                              x1467)|])
                                | None -> ());
                               (match x1464 with
                                | Some x1466 ->
                                    ignore
                                      (Ojs.call x1465 "push"
                                         [|(Intl.CollatorOptions.t_to_js
                                              x1466)|])
                                | None -> ());
                               x1465))|])
    let (to_string : t -> string) =
      fun (x1472 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1472) "toString" [||])
    let (char_at : t -> pos:int -> string) =
      fun (x1474 : t) ->
        fun ~pos:(x1473 : int) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x1474) "charAt" [|(Ojs.int_to_js x1473)|])
    let (char_code_at : t -> index:int -> int) =
      fun (x1476 : t) ->
        fun ~index:(x1475 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1476) "charCodeAt" [|(Ojs.int_to_js x1475)|])
    let (concat : t -> strings:string list -> string) =
      fun (x1480 : t) ->
        fun ~strings:(x1477 : string list) ->
          Ojs.string_of_js
            (let x1481 = t_to_js x1480 in
             Ojs.call (Ojs.get_prop_ascii x1481 "concat") "apply"
               [|x1481;((let x1478 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1479 : string) ->
                              ignore
                                (Ojs.call x1478 "push"
                                   [|(Ojs.string_to_js x1479)|])) x1477;
                         x1478))|])
    let (index_of : t -> searchString:string -> ?position:int -> unit -> int)
      =
      fun (x1486 : t) ->
        fun ~searchString:(x1482 : string) ->
          fun ?position:(x1483 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1487 = t_to_js x1486 in
                 Ojs.call (Ojs.get_prop_ascii x1487 "indexOf") "apply"
                   [|x1487;((let x1484 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1484 "push"
                                  [|(Ojs.string_to_js x1482)|]);
                             (match x1483 with
                              | Some x1485 ->
                                  ignore
                                    (Ojs.call x1484 "push"
                                       [|(Ojs.int_to_js x1485)|])
                              | None -> ());
                             x1484))|])
    let (last_index_of :
      t -> searchString:string -> ?position:int -> unit -> int) =
      fun (x1492 : t) ->
        fun ~searchString:(x1488 : string) ->
          fun ?position:(x1489 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1493 = t_to_js x1492 in
                 Ojs.call (Ojs.get_prop_ascii x1493 "lastIndexOf") "apply"
                   [|x1493;((let x1490 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1490 "push"
                                  [|(Ojs.string_to_js x1488)|]);
                             (match x1489 with
                              | Some x1491 ->
                                  ignore
                                    (Ojs.call x1490 "push"
                                       [|(Ojs.int_to_js x1491)|])
                              | None -> ());
                             x1490))|])
    let (locale_compare' : t -> that:string -> int) =
      fun (x1495 : t) ->
        fun ~that:(x1494 : string) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1495) "localeCompare"
               [|(Ojs.string_to_js x1494)|])
    let (match_ :
      t -> regexp:RegExp.t or_string -> RegExpMatchArray.t or_null) =
      fun (x1498 : t) ->
        fun ~regexp:(x1496 : RegExp.t or_string) ->
          or_null_of_js RegExpMatchArray.t_of_js
            (Ojs.call (t_to_js x1498) "match"
               [|(or_string_to_js RegExp.t_to_js x1496)|])
    let (replace :
      t -> searchValue:RegExp.t or_string -> replaceValue:string -> string) =
      fun (x1503 : t) ->
        fun ~searchValue:(x1500 : RegExp.t or_string) ->
          fun ~replaceValue:(x1502 : string) ->
            Ojs.string_of_js
              (Ojs.call (t_to_js x1503) "replace"
                 [|(or_string_to_js RegExp.t_to_js x1500);(Ojs.string_to_js
                                                             x1502)|])
    let (replace' :
      t ->
        searchValue:RegExp.t or_string ->
          replacer:(substring:string -> args:any list -> string) -> string)
      =
      fun (x1509 : t) ->
        fun ~searchValue:(x1504 : RegExp.t or_string) ->
          fun ~replacer:(x1506 : substring:string -> args:any list -> string)
            ->
            Ojs.string_of_js
              (Ojs.call (t_to_js x1509) "replace"
                 [|(or_string_to_js RegExp.t_to_js x1504);(Ojs.fun_to_js_args
                                                             (fun (x1507 : _)
                                                                ->
                                                                Ojs.string_to_js
                                                                  (x1506
                                                                    ~substring:(
                                                                    Ojs.string_of_js
                                                                    (Ojs.array_get
                                                                    x1507 0))
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1507 1))))|])
    let (search : t -> regexp:RegExp.t or_string -> int) =
      fun (x1512 : t) ->
        fun ~regexp:(x1510 : RegExp.t or_string) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1512) "search"
               [|(or_string_to_js RegExp.t_to_js x1510)|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> string) =
      fun (x1518 : t) ->
        fun ?start:(x1513 : int option) ->
          fun ?end_:(x1514 : int option) ->
            fun () ->
              Ojs.string_of_js
                (let x1519 = t_to_js x1518 in
                 Ojs.call (Ojs.get_prop_ascii x1519 "slice") "apply"
                   [|x1519;((let x1515 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1513 with
                              | Some x1517 ->
                                  ignore
                                    (Ojs.call x1515 "push"
                                       [|(Ojs.int_to_js x1517)|])
                              | None -> ());
                             (match x1514 with
                              | Some x1516 ->
                                  ignore
                                    (Ojs.call x1515 "push"
                                       [|(Ojs.int_to_js x1516)|])
                              | None -> ());
                             x1515))|])
    let (split :
      t -> separator:RegExp.t or_string -> ?limit:int -> unit -> string list)
      =
      fun (x1525 : t) ->
        fun ~separator:(x1520 : RegExp.t or_string) ->
          fun ?limit:(x1521 : int option) ->
            fun () ->
              Ojs.list_of_js Ojs.string_of_js
                (let x1526 = t_to_js x1525 in
                 Ojs.call (Ojs.get_prop_ascii x1526 "split") "apply"
                   [|x1526;((let x1522 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1522 "push"
                                  [|(or_string_to_js RegExp.t_to_js x1520)|]);
                             (match x1521 with
                              | Some x1523 ->
                                  ignore
                                    (Ojs.call x1522 "push"
                                       [|(Ojs.int_to_js x1523)|])
                              | None -> ());
                             x1522))|])
    let (substring : t -> start:int -> ?end_:int -> unit -> string) =
      fun (x1532 : t) ->
        fun ~start:(x1528 : int) ->
          fun ?end_:(x1529 : int option) ->
            fun () ->
              Ojs.string_of_js
                (let x1533 = t_to_js x1532 in
                 Ojs.call (Ojs.get_prop_ascii x1533 "substring") "apply"
                   [|x1533;((let x1530 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1530 "push"
                                  [|(Ojs.int_to_js x1528)|]);
                             (match x1529 with
                              | Some x1531 ->
                                  ignore
                                    (Ojs.call x1530 "push"
                                       [|(Ojs.int_to_js x1531)|])
                              | None -> ());
                             x1530))|])
    let (to_lower_case : t -> string) =
      fun (x1534 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1534) "toLowerCase" [||])
    let (to_locale_lower_case :
      t -> ?locales:string list or_string -> unit -> string) =
      fun (x1540 : t) ->
        fun ?locales:(x1535 : string list or_string option) ->
          fun () ->
            Ojs.string_of_js
              (let x1541 = t_to_js x1540 in
               Ojs.call (Ojs.get_prop_ascii x1541 "toLocaleLowerCase")
                 "apply"
                 [|x1541;((let x1536 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1535 with
                            | Some x1537 ->
                                ignore
                                  (Ojs.call x1536 "push"
                                     [|(or_string_to_js
                                          (fun (x1538 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x1538) x1537)|])
                            | None -> ());
                           x1536))|])
    let (to_upper_case : t -> string) =
      fun (x1542 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1542) "toUpperCase" [||])
    let (to_locale_upper_case :
      t -> ?locales:string list or_string -> unit -> string) =
      fun (x1548 : t) ->
        fun ?locales:(x1543 : string list or_string option) ->
          fun () ->
            Ojs.string_of_js
              (let x1549 = t_to_js x1548 in
               Ojs.call (Ojs.get_prop_ascii x1549 "toLocaleUpperCase")
                 "apply"
                 [|x1549;((let x1544 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1543 with
                            | Some x1545 ->
                                ignore
                                  (Ojs.call x1544 "push"
                                     [|(or_string_to_js
                                          (fun (x1546 : string list) ->
                                             Ojs.list_to_js Ojs.string_to_js
                                               x1546) x1545)|])
                            | None -> ());
                           x1544))|])
    let (trim : t -> string) =
      fun (x1550 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1550) "trim" [||])
    let (get_length : t -> int) =
      fun (x1551 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1551) "length")
    let (substr : t -> from:int -> ?length:int -> unit -> string) =
      fun (x1556 : t) ->
        fun ~from:(x1552 : int) ->
          fun ?length:(x1553 : int option) ->
            fun () ->
              Ojs.string_of_js
                (let x1557 = t_to_js x1556 in
                 Ojs.call (Ojs.get_prop_ascii x1557 "substr") "apply"
                   [|x1557;((let x1554 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1554 "push"
                                  [|(Ojs.int_to_js x1552)|]);
                             (match x1553 with
                              | Some x1555 ->
                                  ignore
                                    (Ojs.call x1554 "push"
                                       [|(Ojs.int_to_js x1555)|])
                              | None -> ());
                             x1554))|])
    let (value_of : t -> string) =
      fun (x1558 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1558) "valueOf" [||])
    let (get : t -> int -> string) =
      fun (x1559 : t) ->
        fun (x1560 : int) ->
          Ojs.string_of_js (Ojs.array_get (t_to_js x1559) x1560)
    let (to_ml : t -> string) =
      fun (x1561 : t) -> Ojs.string_of_js (t_to_js x1561)
    let (of_ml : string -> t) =
      fun (x1562 : string) -> t_of_js (Ojs.string_to_js x1562)
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x1563 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "String")
               (let x1564 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1563 with
                 | Some x1565 ->
                     ignore (Ojs.call x1564 "push" [|(any_to_js x1565)|])
                 | None -> ());
                x1564))
    let (from_char_code : codes:int list -> string) =
      fun ~codes:(x1566 : int list) ->
        Ojs.string_of_js
          (let x1569 = Ojs.get_prop_ascii Ojs.global "String" in
           Ojs.call (Ojs.get_prop_ascii x1569 "fromCharCode") "apply"
             [|x1569;((let x1567 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x1568 : int) ->
                            ignore
                              (Ojs.call x1567 "push"
                                 [|(Ojs.int_to_js x1568)|])) x1566;
                       x1567))|])
  end
module StringConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1571 : Ojs.t) -> x1571
    and t_to_js : t -> Ojs.t = fun (x1570 : Ojs.t) -> x1570
    let (create : t -> ?value:any -> unit -> String.t) =
      fun (x1575 : t) ->
        fun ?value:(x1572 : any option) ->
          fun () ->
            String.t_of_js
              (Ojs.new_obj_arr (t_to_js x1575)
                 (let x1573 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1572 with
                   | Some x1574 ->
                       ignore (Ojs.call x1573 "push" [|(any_to_js x1574)|])
                   | None -> ());
                  x1573))
    let (apply : t -> ?value:any -> unit -> string) =
      fun (x1579 : t) ->
        fun ?value:(x1576 : any option) ->
          fun () ->
            Ojs.string_of_js
              (Ojs.call (t_to_js x1579) "apply"
                 [|Ojs.null;((let x1577 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1576 with
                               | Some x1578 ->
                                   ignore
                                     (Ojs.call x1577 "push"
                                        [|(any_to_js x1578)|])
                               | None -> ());
                              x1577))|])
    let (get_prototype : t -> String.t) =
      fun (x1580 : t) ->
        String.t_of_js (Ojs.get_prop_ascii (t_to_js x1580) "prototype")
    let (from_char_code : t -> codes:int list -> string) =
      fun (x1584 : t) ->
        fun ~codes:(x1581 : int list) ->
          Ojs.string_of_js
            (let x1585 = t_to_js x1584 in
             Ojs.call (Ojs.get_prop_ascii x1585 "fromCharCode") "apply"
               [|x1585;((let x1582 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x1583 : int) ->
                              ignore
                                (Ojs.call x1582 "push"
                                   [|(Ojs.int_to_js x1583)|])) x1581;
                         x1582))|])
  end
let (string : StringConstructor.t) =
  StringConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "String")
module Boolean =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1587 : Ojs.t) -> x1587
    and t_to_js : t -> Ojs.t = fun (x1586 : Ojs.t) -> x1586
    let (value_of : t -> bool) =
      fun (x1588 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x1588) "valueOf" [||])
    let (to_ml : t -> bool) =
      fun (x1589 : t) -> Ojs.bool_of_js (t_to_js x1589)
    let (of_ml : bool -> t) =
      fun (x1590 : bool) -> t_of_js (Ojs.bool_to_js x1590)
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x1591 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Boolean")
               (let x1592 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1591 with
                 | Some x1593 ->
                     ignore (Ojs.call x1592 "push" [|(any_to_js x1593)|])
                 | None -> ());
                x1592))
  end
module BooleanConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1595 : Ojs.t) -> x1595
    and t_to_js : t -> Ojs.t = fun (x1594 : Ojs.t) -> x1594
    let (create : t -> ?value:any -> unit -> Boolean.t) =
      fun (x1599 : t) ->
        fun ?value:(x1596 : any option) ->
          fun () ->
            Boolean.t_of_js
              (Ojs.new_obj_arr (t_to_js x1599)
                 (let x1597 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1596 with
                   | Some x1598 ->
                       ignore (Ojs.call x1597 "push" [|(any_to_js x1598)|])
                   | None -> ());
                  x1597))
    let (apply : t -> ?value:'T -> unit -> bool) =
      fun (x1603 : t) ->
        fun ?value:(x1600 : 'T option) ->
          fun () ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js x1603) "apply"
                 [|Ojs.null;((let x1601 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1600 with
                               | Some x1602 ->
                                   ignore
                                     (Ojs.call x1601 "push"
                                        [|(Obj.magic x1602)|])
                               | None -> ());
                              x1601))|])
    let (get_prototype : t -> Boolean.t) =
      fun (x1604 : t) ->
        Boolean.t_of_js (Ojs.get_prop_ascii (t_to_js x1604) "prototype")
  end
let (boolean : BooleanConstructor.t) =
  BooleanConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Boolean")
module Number =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1606 : Ojs.t) -> x1606
    and t_to_js : t -> Ojs.t = fun (x1605 : Ojs.t) -> x1605
    let (to_locale_string :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.NumberFormatOptions.t -> unit -> string)
      =
      fun (x1614 : t) ->
        fun ?locales:(x1607 : string list or_string option) ->
          fun ?options:(x1608 : Intl.NumberFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1615 = t_to_js x1614 in
                 Ojs.call (Ojs.get_prop_ascii x1615 "toLocaleString") "apply"
                   [|x1615;((let x1609 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1607 with
                              | Some x1611 ->
                                  ignore
                                    (Ojs.call x1609 "push"
                                       [|(or_string_to_js
                                            (fun (x1612 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1612)
                                            x1611)|])
                              | None -> ());
                             (match x1608 with
                              | Some x1610 ->
                                  ignore
                                    (Ojs.call x1609 "push"
                                       [|(Intl.NumberFormatOptions.t_to_js
                                            x1610)|])
                              | None -> ());
                             x1609))|])
    let (to_string : t -> ?radix:int -> unit -> string) =
      fun (x1619 : t) ->
        fun ?radix:(x1616 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1620 = t_to_js x1619 in
               Ojs.call (Ojs.get_prop_ascii x1620 "toString") "apply"
                 [|x1620;((let x1617 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1616 with
                            | Some x1618 ->
                                ignore
                                  (Ojs.call x1617 "push"
                                     [|(Ojs.int_to_js x1618)|])
                            | None -> ());
                           x1617))|])
    let (to_fixed : t -> ?fractionDigits:int -> unit -> string) =
      fun (x1624 : t) ->
        fun ?fractionDigits:(x1621 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1625 = t_to_js x1624 in
               Ojs.call (Ojs.get_prop_ascii x1625 "toFixed") "apply"
                 [|x1625;((let x1622 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1621 with
                            | Some x1623 ->
                                ignore
                                  (Ojs.call x1622 "push"
                                     [|(Ojs.int_to_js x1623)|])
                            | None -> ());
                           x1622))|])
    let (to_exponential : t -> ?fractionDigits:int -> unit -> string) =
      fun (x1629 : t) ->
        fun ?fractionDigits:(x1626 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1630 = t_to_js x1629 in
               Ojs.call (Ojs.get_prop_ascii x1630 "toExponential") "apply"
                 [|x1630;((let x1627 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1626 with
                            | Some x1628 ->
                                ignore
                                  (Ojs.call x1627 "push"
                                     [|(Ojs.int_to_js x1628)|])
                            | None -> ());
                           x1627))|])
    let (to_precision : t -> ?precision:int -> unit -> string) =
      fun (x1634 : t) ->
        fun ?precision:(x1631 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x1635 = t_to_js x1634 in
               Ojs.call (Ojs.get_prop_ascii x1635 "toPrecision") "apply"
                 [|x1635;((let x1632 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1631 with
                            | Some x1633 ->
                                ignore
                                  (Ojs.call x1632 "push"
                                     [|(Ojs.int_to_js x1633)|])
                            | None -> ());
                           x1632))|])
    let (value_of : t -> int) =
      fun (x1636 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1636) "valueOf" [||])
    let (to_ml : t -> int) = fun (x1637 : t) -> Ojs.int_of_js (t_to_js x1637)
    let (of_ml : int -> t) =
      fun (x1638 : int) -> t_of_js (Ojs.int_to_js x1638)
    let (create : ?value:any -> unit -> t) =
      fun ?value:(x1639 : any option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Number")
               (let x1640 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1639 with
                 | Some x1641 ->
                     ignore (Ojs.call x1640 "push" [|(any_to_js x1641)|])
                 | None -> ());
                x1640))
    let (get_max_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "MAX_VALUE")
    let (get_min_value : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "MIN_VALUE")
    let (get_nan : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number") "NaN")
    let (get_negative_infinity : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "NEGATIVE_INFINITY")
    let (get_positive_infinity : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Number")
           "POSITIVE_INFINITY")
  end
module NumberConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1643 : Ojs.t) -> x1643
    and t_to_js : t -> Ojs.t = fun (x1642 : Ojs.t) -> x1642
    let (create : t -> ?value:any -> unit -> Number.t) =
      fun (x1647 : t) ->
        fun ?value:(x1644 : any option) ->
          fun () ->
            Number.t_of_js
              (Ojs.new_obj_arr (t_to_js x1647)
                 (let x1645 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1644 with
                   | Some x1646 ->
                       ignore (Ojs.call x1645 "push" [|(any_to_js x1646)|])
                   | None -> ());
                  x1645))
    let (apply : t -> ?value:any -> unit -> int) =
      fun (x1651 : t) ->
        fun ?value:(x1648 : any option) ->
          fun () ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x1651) "apply"
                 [|Ojs.null;((let x1649 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1648 with
                               | Some x1650 ->
                                   ignore
                                     (Ojs.call x1649 "push"
                                        [|(any_to_js x1650)|])
                               | None -> ());
                              x1649))|])
    let (get_prototype : t -> Number.t) =
      fun (x1652 : t) ->
        Number.t_of_js (Ojs.get_prop_ascii (t_to_js x1652) "prototype")
    let (get_max_value : t -> int) =
      fun (x1653 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1653) "MAX_VALUE")
    let (get_min_value : t -> int) =
      fun (x1654 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1654) "MIN_VALUE")
    let (get_nan : t -> int) =
      fun (x1655 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1655) "NaN")
    let (get_negative_infinity : t -> int) =
      fun (x1656 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x1656) "NEGATIVE_INFINITY")
    let (get_positive_infinity : t -> int) =
      fun (x1657 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x1657) "POSITIVE_INFINITY")
  end
let (number : NumberConstructor.t) =
  NumberConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Number")
module ImportMeta =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1659 : Ojs.t) -> x1659
    and t_to_js : t -> Ojs.t = fun (x1658 : Ojs.t) -> x1658
  end
module Math =
  struct
    let (get_e : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "E")
    let (get_ln10 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LN10")
    let (get_ln2 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LN2")
    let (get_log2_e : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LOG2E")
    let (get_log10_e : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "LOG10E")
    let (get_pi : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "PI")
    let (get_sqrt1_2 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "SQRT1_2")
    let (get_sqrt2 : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "SQRT2")
    let (abs : int -> int) =
      fun (x1660 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "abs"
             [|(Ojs.int_to_js x1660)|])
    let (acos : int -> int) =
      fun (x1661 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "acos"
             [|(Ojs.int_to_js x1661)|])
    let (asin : int -> int) =
      fun (x1662 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "asin"
             [|(Ojs.int_to_js x1662)|])
    let (atan : int -> int) =
      fun (x1663 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "atan"
             [|(Ojs.int_to_js x1663)|])
    let (atan2 : y:int -> x:int -> int) =
      fun ~y:(x1664 : int) ->
        fun ~x:(x1665 : int) ->
          Ojs.int_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "atan2"
               [|(Ojs.int_to_js x1664);(Ojs.int_to_js x1665)|])
    let (ceil : int -> int) =
      fun (x1666 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "ceil"
             [|(Ojs.int_to_js x1666)|])
    let (cos : int -> int) =
      fun (x1667 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "cos"
             [|(Ojs.int_to_js x1667)|])
    let (exp : int -> int) =
      fun (x1668 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "exp"
             [|(Ojs.int_to_js x1668)|])
    let (floor : int -> int) =
      fun (x1669 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "floor"
             [|(Ojs.int_to_js x1669)|])
    let (log : int -> int) =
      fun (x1670 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "log"
             [|(Ojs.int_to_js x1670)|])
    let (max : int list -> int) =
      fun (x1671 : int list) ->
        Ojs.int_of_js
          (let x1674 = Ojs.get_prop_ascii Ojs.global "Math" in
           Ojs.call (Ojs.get_prop_ascii x1674 "max") "apply"
             [|x1674;((let x1672 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x1673 : int) ->
                            ignore
                              (Ojs.call x1672 "push"
                                 [|(Ojs.int_to_js x1673)|])) x1671;
                       x1672))|])
    let (min : int list -> int) =
      fun (x1675 : int list) ->
        Ojs.int_of_js
          (let x1678 = Ojs.get_prop_ascii Ojs.global "Math" in
           Ojs.call (Ojs.get_prop_ascii x1678 "min") "apply"
             [|x1678;((let x1676 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x1677 : int) ->
                            ignore
                              (Ojs.call x1676 "push"
                                 [|(Ojs.int_to_js x1677)|])) x1675;
                       x1676))|])
    let (pow : x:int -> y:int -> int) =
      fun ~x:(x1679 : int) ->
        fun ~y:(x1680 : int) ->
          Ojs.int_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "pow"
               [|(Ojs.int_to_js x1679);(Ojs.int_to_js x1680)|])
    let (random : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Math") "random")
    let (round : int -> int) =
      fun (x1681 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "round"
             [|(Ojs.int_to_js x1681)|])
    let (sin : int -> int) =
      fun (x1682 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sin"
             [|(Ojs.int_to_js x1682)|])
    let (sqrt : int -> int) =
      fun (x1683 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "sqrt"
             [|(Ojs.int_to_js x1683)|])
    let (tan : int -> int) =
      fun (x1684 : int) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Math") "tan"
             [|(Ojs.int_to_js x1684)|])
  end
module Date =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1686 : Ojs.t) -> x1686
    and t_to_js : t -> Ojs.t = fun (x1685 : Ojs.t) -> x1685
    let (to_locale_string :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.DateTimeFormatOptions.t -> unit -> string)
      =
      fun (x1694 : t) ->
        fun ?locales:(x1687 : string list or_string option) ->
          fun ?options:(x1688 : Intl.DateTimeFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1695 = t_to_js x1694 in
                 Ojs.call (Ojs.get_prop_ascii x1695 "toLocaleString") "apply"
                   [|x1695;((let x1689 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1687 with
                              | Some x1691 ->
                                  ignore
                                    (Ojs.call x1689 "push"
                                       [|(or_string_to_js
                                            (fun (x1692 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1692)
                                            x1691)|])
                              | None -> ());
                             (match x1688 with
                              | Some x1690 ->
                                  ignore
                                    (Ojs.call x1689 "push"
                                       [|(Intl.DateTimeFormatOptions.t_to_js
                                            x1690)|])
                              | None -> ());
                             x1689))|])
    let (to_locale_date_string :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.DateTimeFormatOptions.t -> unit -> string)
      =
      fun (x1703 : t) ->
        fun ?locales:(x1696 : string list or_string option) ->
          fun ?options:(x1697 : Intl.DateTimeFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1704 = t_to_js x1703 in
                 Ojs.call (Ojs.get_prop_ascii x1704 "toLocaleDateString")
                   "apply"
                   [|x1704;((let x1698 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1696 with
                              | Some x1700 ->
                                  ignore
                                    (Ojs.call x1698 "push"
                                       [|(or_string_to_js
                                            (fun (x1701 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1701)
                                            x1700)|])
                              | None -> ());
                             (match x1697 with
                              | Some x1699 ->
                                  ignore
                                    (Ojs.call x1698 "push"
                                       [|(Intl.DateTimeFormatOptions.t_to_js
                                            x1699)|])
                              | None -> ());
                             x1698))|])
    let (to_locale_time_string :
      t ->
        ?locales:string list or_string ->
          ?options:Intl.DateTimeFormatOptions.t -> unit -> string)
      =
      fun (x1712 : t) ->
        fun ?locales:(x1705 : string list or_string option) ->
          fun ?options:(x1706 : Intl.DateTimeFormatOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x1713 = t_to_js x1712 in
                 Ojs.call (Ojs.get_prop_ascii x1713 "toLocaleTimeString")
                   "apply"
                   [|x1713;((let x1707 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x1705 with
                              | Some x1709 ->
                                  ignore
                                    (Ojs.call x1707 "push"
                                       [|(or_string_to_js
                                            (fun (x1710 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1710)
                                            x1709)|])
                              | None -> ());
                             (match x1706 with
                              | Some x1708 ->
                                  ignore
                                    (Ojs.call x1707 "push"
                                       [|(Intl.DateTimeFormatOptions.t_to_js
                                            x1708)|])
                              | None -> ());
                             x1707))|])
    let (to_string : t -> string) =
      fun (x1714 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1714) "toString" [||])
    let (to_date_string : t -> string) =
      fun (x1715 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1715) "toDateString" [||])
    let (to_time_string : t -> string) =
      fun (x1716 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1716) "toTimeString" [||])
    let (to_locale_string' : t -> string) =
      fun (x1717 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1717) "toLocaleString" [||])
    let (to_locale_date_string' : t -> string) =
      fun (x1718 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1718) "toLocaleDateString" [||])
    let (to_locale_time_string' : t -> string) =
      fun (x1719 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1719) "toLocaleTimeString" [||])
    let (value_of : t -> int) =
      fun (x1720 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1720) "valueOf" [||])
    let (get_time : t -> int) =
      fun (x1721 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1721) "getTime" [||])
    let (get_full_year : t -> int) =
      fun (x1722 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1722) "getFullYear" [||])
    let (get_utc_full_year : t -> int) =
      fun (x1723 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1723) "getUTCFullYear" [||])
    let (get_month : t -> int) =
      fun (x1724 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1724) "getMonth" [||])
    let (get_utc_month : t -> int) =
      fun (x1725 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1725) "getUTCMonth" [||])
    let (get_date : t -> int) =
      fun (x1726 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1726) "getDate" [||])
    let (get_utc_date : t -> int) =
      fun (x1727 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1727) "getUTCDate" [||])
    let (get_day : t -> int) =
      fun (x1728 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1728) "getDay" [||])
    let (get_utc_day : t -> int) =
      fun (x1729 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1729) "getUTCDay" [||])
    let (get_hours : t -> int) =
      fun (x1730 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1730) "getHours" [||])
    let (get_utc_hours : t -> int) =
      fun (x1731 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1731) "getUTCHours" [||])
    let (get_minutes : t -> int) =
      fun (x1732 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1732) "getMinutes" [||])
    let (get_utc_minutes : t -> int) =
      fun (x1733 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1733) "getUTCMinutes" [||])
    let (get_seconds : t -> int) =
      fun (x1734 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1734) "getSeconds" [||])
    let (get_utc_seconds : t -> int) =
      fun (x1735 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1735) "getUTCSeconds" [||])
    let (get_milliseconds : t -> int) =
      fun (x1736 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1736) "getMilliseconds" [||])
    let (get_utc_milliseconds : t -> int) =
      fun (x1737 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1737) "getUTCMilliseconds" [||])
    let (get_timezone_offset : t -> int) =
      fun (x1738 : t) ->
        Ojs.int_of_js (Ojs.call (t_to_js x1738) "getTimezoneOffset" [||])
    let (set_time : t -> time:int -> int) =
      fun (x1740 : t) ->
        fun ~time:(x1739 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1740) "setTime" [|(Ojs.int_to_js x1739)|])
    let (set_milliseconds : t -> ms:int -> int) =
      fun (x1742 : t) ->
        fun ~ms:(x1741 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1742) "setMilliseconds"
               [|(Ojs.int_to_js x1741)|])
    let (set_utc_milliseconds : t -> ms:int -> int) =
      fun (x1744 : t) ->
        fun ~ms:(x1743 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1744) "setUTCMilliseconds"
               [|(Ojs.int_to_js x1743)|])
    let (set_seconds : t -> sec:int -> ?ms:int -> unit -> int) =
      fun (x1749 : t) ->
        fun ~sec:(x1745 : int) ->
          fun ?ms:(x1746 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1750 = t_to_js x1749 in
                 Ojs.call (Ojs.get_prop_ascii x1750 "setSeconds") "apply"
                   [|x1750;((let x1747 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1747 "push"
                                  [|(Ojs.int_to_js x1745)|]);
                             (match x1746 with
                              | Some x1748 ->
                                  ignore
                                    (Ojs.call x1747 "push"
                                       [|(Ojs.int_to_js x1748)|])
                              | None -> ());
                             x1747))|])
    let (set_utc_seconds : t -> sec:int -> ?ms:int -> unit -> int) =
      fun (x1755 : t) ->
        fun ~sec:(x1751 : int) ->
          fun ?ms:(x1752 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1756 = t_to_js x1755 in
                 Ojs.call (Ojs.get_prop_ascii x1756 "setUTCSeconds") "apply"
                   [|x1756;((let x1753 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1753 "push"
                                  [|(Ojs.int_to_js x1751)|]);
                             (match x1752 with
                              | Some x1754 ->
                                  ignore
                                    (Ojs.call x1753 "push"
                                       [|(Ojs.int_to_js x1754)|])
                              | None -> ());
                             x1753))|])
    let (set_minutes : t -> min:int -> ?sec:int -> ?ms:int -> unit -> int) =
      fun (x1763 : t) ->
        fun ~min:(x1757 : int) ->
          fun ?sec:(x1758 : int option) ->
            fun ?ms:(x1759 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1764 = t_to_js x1763 in
                   Ojs.call (Ojs.get_prop_ascii x1764 "setMinutes") "apply"
                     [|x1764;((let x1760 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1760 "push"
                                    [|(Ojs.int_to_js x1757)|]);
                               (match x1758 with
                                | Some x1762 ->
                                    ignore
                                      (Ojs.call x1760 "push"
                                         [|(Ojs.int_to_js x1762)|])
                                | None -> ());
                               (match x1759 with
                                | Some x1761 ->
                                    ignore
                                      (Ojs.call x1760 "push"
                                         [|(Ojs.int_to_js x1761)|])
                                | None -> ());
                               x1760))|])
    let (set_utc_minutes :
      t -> min:int -> ?sec:int -> ?ms:int -> unit -> int) =
      fun (x1771 : t) ->
        fun ~min:(x1765 : int) ->
          fun ?sec:(x1766 : int option) ->
            fun ?ms:(x1767 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1772 = t_to_js x1771 in
                   Ojs.call (Ojs.get_prop_ascii x1772 "setUTCMinutes")
                     "apply"
                     [|x1772;((let x1768 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1768 "push"
                                    [|(Ojs.int_to_js x1765)|]);
                               (match x1766 with
                                | Some x1770 ->
                                    ignore
                                      (Ojs.call x1768 "push"
                                         [|(Ojs.int_to_js x1770)|])
                                | None -> ());
                               (match x1767 with
                                | Some x1769 ->
                                    ignore
                                      (Ojs.call x1768 "push"
                                         [|(Ojs.int_to_js x1769)|])
                                | None -> ());
                               x1768))|])
    let (set_hours :
      t -> hours:int -> ?min:int -> ?sec:int -> ?ms:int -> unit -> int) =
      fun (x1781 : t) ->
        fun ~hours:(x1773 : int) ->
          fun ?min:(x1774 : int option) ->
            fun ?sec:(x1775 : int option) ->
              fun ?ms:(x1776 : int option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x1782 = t_to_js x1781 in
                     Ojs.call (Ojs.get_prop_ascii x1782 "setHours") "apply"
                       [|x1782;((let x1777 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1777 "push"
                                      [|(Ojs.int_to_js x1773)|]);
                                 (match x1774 with
                                  | Some x1780 ->
                                      ignore
                                        (Ojs.call x1777 "push"
                                           [|(Ojs.int_to_js x1780)|])
                                  | None -> ());
                                 (match x1775 with
                                  | Some x1779 ->
                                      ignore
                                        (Ojs.call x1777 "push"
                                           [|(Ojs.int_to_js x1779)|])
                                  | None -> ());
                                 (match x1776 with
                                  | Some x1778 ->
                                      ignore
                                        (Ojs.call x1777 "push"
                                           [|(Ojs.int_to_js x1778)|])
                                  | None -> ());
                                 x1777))|])
    let (set_utc_hours :
      t -> hours:int -> ?min:int -> ?sec:int -> ?ms:int -> unit -> int) =
      fun (x1791 : t) ->
        fun ~hours:(x1783 : int) ->
          fun ?min:(x1784 : int option) ->
            fun ?sec:(x1785 : int option) ->
              fun ?ms:(x1786 : int option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x1792 = t_to_js x1791 in
                     Ojs.call (Ojs.get_prop_ascii x1792 "setUTCHours")
                       "apply"
                       [|x1792;((let x1787 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1787 "push"
                                      [|(Ojs.int_to_js x1783)|]);
                                 (match x1784 with
                                  | Some x1790 ->
                                      ignore
                                        (Ojs.call x1787 "push"
                                           [|(Ojs.int_to_js x1790)|])
                                  | None -> ());
                                 (match x1785 with
                                  | Some x1789 ->
                                      ignore
                                        (Ojs.call x1787 "push"
                                           [|(Ojs.int_to_js x1789)|])
                                  | None -> ());
                                 (match x1786 with
                                  | Some x1788 ->
                                      ignore
                                        (Ojs.call x1787 "push"
                                           [|(Ojs.int_to_js x1788)|])
                                  | None -> ());
                                 x1787))|])
    let (set_date : t -> date:int -> int) =
      fun (x1794 : t) ->
        fun ~date:(x1793 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1794) "setDate" [|(Ojs.int_to_js x1793)|])
    let (set_utc_date : t -> date:int -> int) =
      fun (x1796 : t) ->
        fun ~date:(x1795 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1796) "setUTCDate" [|(Ojs.int_to_js x1795)|])
    let (set_month : t -> month:int -> ?date:int -> unit -> int) =
      fun (x1801 : t) ->
        fun ~month:(x1797 : int) ->
          fun ?date:(x1798 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1802 = t_to_js x1801 in
                 Ojs.call (Ojs.get_prop_ascii x1802 "setMonth") "apply"
                   [|x1802;((let x1799 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1799 "push"
                                  [|(Ojs.int_to_js x1797)|]);
                             (match x1798 with
                              | Some x1800 ->
                                  ignore
                                    (Ojs.call x1799 "push"
                                       [|(Ojs.int_to_js x1800)|])
                              | None -> ());
                             x1799))|])
    let (set_utc_month : t -> month:int -> ?date:int -> unit -> int) =
      fun (x1807 : t) ->
        fun ~month:(x1803 : int) ->
          fun ?date:(x1804 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1808 = t_to_js x1807 in
                 Ojs.call (Ojs.get_prop_ascii x1808 "setUTCMonth") "apply"
                   [|x1808;((let x1805 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1805 "push"
                                  [|(Ojs.int_to_js x1803)|]);
                             (match x1804 with
                              | Some x1806 ->
                                  ignore
                                    (Ojs.call x1805 "push"
                                       [|(Ojs.int_to_js x1806)|])
                              | None -> ());
                             x1805))|])
    let (set_full_year :
      t -> year:int -> ?month:int -> ?date:int -> unit -> int) =
      fun (x1815 : t) ->
        fun ~year:(x1809 : int) ->
          fun ?month:(x1810 : int option) ->
            fun ?date:(x1811 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1816 = t_to_js x1815 in
                   Ojs.call (Ojs.get_prop_ascii x1816 "setFullYear") "apply"
                     [|x1816;((let x1812 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1812 "push"
                                    [|(Ojs.int_to_js x1809)|]);
                               (match x1810 with
                                | Some x1814 ->
                                    ignore
                                      (Ojs.call x1812 "push"
                                         [|(Ojs.int_to_js x1814)|])
                                | None -> ());
                               (match x1811 with
                                | Some x1813 ->
                                    ignore
                                      (Ojs.call x1812 "push"
                                         [|(Ojs.int_to_js x1813)|])
                                | None -> ());
                               x1812))|])
    let (set_utc_full_year :
      t -> year:int -> ?month:int -> ?date:int -> unit -> int) =
      fun (x1823 : t) ->
        fun ~year:(x1817 : int) ->
          fun ?month:(x1818 : int option) ->
            fun ?date:(x1819 : int option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1824 = t_to_js x1823 in
                   Ojs.call (Ojs.get_prop_ascii x1824 "setUTCFullYear")
                     "apply"
                     [|x1824;((let x1820 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1820 "push"
                                    [|(Ojs.int_to_js x1817)|]);
                               (match x1818 with
                                | Some x1822 ->
                                    ignore
                                      (Ojs.call x1820 "push"
                                         [|(Ojs.int_to_js x1822)|])
                                | None -> ());
                               (match x1819 with
                                | Some x1821 ->
                                    ignore
                                      (Ojs.call x1820 "push"
                                         [|(Ojs.int_to_js x1821)|])
                                | None -> ());
                               x1820))|])
    let (to_utc_string : t -> string) =
      fun (x1825 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1825) "toUTCString" [||])
    let (to_iso_string : t -> string) =
      fun (x1826 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x1826) "toISOString" [||])
    let (to_json : t -> ?key:any -> unit -> string) =
      fun (x1830 : t) ->
        fun ?key:(x1827 : any option) ->
          fun () ->
            Ojs.string_of_js
              (let x1831 = t_to_js x1830 in
               Ojs.call (Ojs.get_prop_ascii x1831 "toJSON") "apply"
                 [|x1831;((let x1828 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1827 with
                            | Some x1829 ->
                                ignore
                                  (Ojs.call x1828 "push"
                                     [|(any_to_js x1829)|])
                            | None -> ());
                           x1828))|])
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Date") [||])
    let (create' : string or_number -> t) =
      fun (x1832 : string or_number) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Date")
             [|(or_number_to_js Ojs.string_to_js x1832)|])
    let (create'' :
      t ->
        year:int ->
          month:int ->
            ?date:int ->
              ?hours:int ->
                ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> t)
      =
      fun (x1834 : t) ->
        fun ~year:(x1835 : int) ->
          fun ~month:(x1836 : int) ->
            fun ?date:(x1837 : int option) ->
              fun ?hours:(x1838 : int option) ->
                fun ?minutes:(x1839 : int option) ->
                  fun ?seconds:(x1840 : int option) ->
                    fun ?ms:(x1841 : int option) ->
                      fun () ->
                        t_of_js
                          (Ojs.new_obj_arr
                             (Ojs.get_prop_ascii Ojs.global "Date")
                             (let x1842 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x1842 "push" [|(t_to_js x1834)|]);
                              ignore
                                (Ojs.call x1842 "push"
                                   [|(Ojs.int_to_js x1835)|]);
                              ignore
                                (Ojs.call x1842 "push"
                                   [|(Ojs.int_to_js x1836)|]);
                              (match x1837 with
                               | Some x1847 ->
                                   ignore
                                     (Ojs.call x1842 "push"
                                        [|(Ojs.int_to_js x1847)|])
                               | None -> ());
                              (match x1838 with
                               | Some x1846 ->
                                   ignore
                                     (Ojs.call x1842 "push"
                                        [|(Ojs.int_to_js x1846)|])
                               | None -> ());
                              (match x1839 with
                               | Some x1845 ->
                                   ignore
                                     (Ojs.call x1842 "push"
                                        [|(Ojs.int_to_js x1845)|])
                               | None -> ());
                              (match x1840 with
                               | Some x1844 ->
                                   ignore
                                     (Ojs.call x1842 "push"
                                        [|(Ojs.int_to_js x1844)|])
                               | None -> ());
                              (match x1841 with
                               | Some x1843 ->
                                   ignore
                                     (Ojs.call x1842 "push"
                                        [|(Ojs.int_to_js x1843)|])
                               | None -> ());
                              x1842))
    let (parse : string -> int) =
      fun (x1848 : string) ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Date") "parse"
             [|(Ojs.string_to_js x1848)|])
    let (utc :
      year:int ->
        month:int ->
          ?date:int ->
            ?hours:int ->
              ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> int)
      =
      fun ~year:(x1849 : int) ->
        fun ~month:(x1850 : int) ->
          fun ?date:(x1851 : int option) ->
            fun ?hours:(x1852 : int option) ->
              fun ?minutes:(x1853 : int option) ->
                fun ?seconds:(x1854 : int option) ->
                  fun ?ms:(x1855 : int option) ->
                    fun () ->
                      Ojs.int_of_js
                        (let x1862 = Ojs.get_prop_ascii Ojs.global "Date" in
                         Ojs.call (Ojs.get_prop_ascii x1862 "UTC") "apply"
                           [|x1862;((let x1856 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1856 "push"
                                          [|(Ojs.int_to_js x1849)|]);
                                     ignore
                                       (Ojs.call x1856 "push"
                                          [|(Ojs.int_to_js x1850)|]);
                                     (match x1851 with
                                      | Some x1861 ->
                                          ignore
                                            (Ojs.call x1856 "push"
                                               [|(Ojs.int_to_js x1861)|])
                                      | None -> ());
                                     (match x1852 with
                                      | Some x1860 ->
                                          ignore
                                            (Ojs.call x1856 "push"
                                               [|(Ojs.int_to_js x1860)|])
                                      | None -> ());
                                     (match x1853 with
                                      | Some x1859 ->
                                          ignore
                                            (Ojs.call x1856 "push"
                                               [|(Ojs.int_to_js x1859)|])
                                      | None -> ());
                                     (match x1854 with
                                      | Some x1858 ->
                                          ignore
                                            (Ojs.call x1856 "push"
                                               [|(Ojs.int_to_js x1858)|])
                                      | None -> ());
                                     (match x1855 with
                                      | Some x1857 ->
                                          ignore
                                            (Ojs.call x1856 "push"
                                               [|(Ojs.int_to_js x1857)|])
                                      | None -> ());
                                     x1856))|])
    let (now : unit -> int) =
      fun () ->
        Ojs.int_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Date") "now" [||])
  end
module DateConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1864 : Ojs.t) -> x1864
    and t_to_js : t -> Ojs.t = fun (x1863 : Ojs.t) -> x1863
    let (create : t -> Date.t) =
      fun (x1865 : t) -> Date.t_of_js (Ojs.new_obj (t_to_js x1865) [||])
    let (create' : t -> string or_number -> Date.t) =
      fun (x1868 : t) ->
        fun (x1866 : string or_number) ->
          Date.t_of_js
            (Ojs.new_obj (t_to_js x1868)
               [|(or_number_to_js Ojs.string_to_js x1866)|])
    let (create'' :
      t ->
        year:int ->
          month:int ->
            ?date:int ->
              ?hours:int ->
                ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> Date.t)
      =
      fun (x1882 : t) ->
        fun ~year:(x1869 : int) ->
          fun ~month:(x1870 : int) ->
            fun ?date:(x1871 : int option) ->
              fun ?hours:(x1872 : int option) ->
                fun ?minutes:(x1873 : int option) ->
                  fun ?seconds:(x1874 : int option) ->
                    fun ?ms:(x1875 : int option) ->
                      fun () ->
                        Date.t_of_js
                          (Ojs.new_obj_arr (t_to_js x1882)
                             (let x1876 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x1876 "push"
                                   [|(Ojs.int_to_js x1869)|]);
                              ignore
                                (Ojs.call x1876 "push"
                                   [|(Ojs.int_to_js x1870)|]);
                              (match x1871 with
                               | Some x1881 ->
                                   ignore
                                     (Ojs.call x1876 "push"
                                        [|(Ojs.int_to_js x1881)|])
                               | None -> ());
                              (match x1872 with
                               | Some x1880 ->
                                   ignore
                                     (Ojs.call x1876 "push"
                                        [|(Ojs.int_to_js x1880)|])
                               | None -> ());
                              (match x1873 with
                               | Some x1879 ->
                                   ignore
                                     (Ojs.call x1876 "push"
                                        [|(Ojs.int_to_js x1879)|])
                               | None -> ());
                              (match x1874 with
                               | Some x1878 ->
                                   ignore
                                     (Ojs.call x1876 "push"
                                        [|(Ojs.int_to_js x1878)|])
                               | None -> ());
                              (match x1875 with
                               | Some x1877 ->
                                   ignore
                                     (Ojs.call x1876 "push"
                                        [|(Ojs.int_to_js x1877)|])
                               | None -> ());
                              x1876))
    let (apply : t -> string) =
      fun (x1883 : t) -> Ojs.string_of_js (Ojs.apply (t_to_js x1883) [||])
    let (get_prototype : t -> Date.t) =
      fun (x1884 : t) ->
        Date.t_of_js (Ojs.get_prop_ascii (t_to_js x1884) "prototype")
    let (parse : t -> string -> int) =
      fun (x1886 : t) ->
        fun (x1885 : string) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x1886) "parse" [|(Ojs.string_to_js x1885)|])
    let (utc :
      t ->
        year:int ->
          month:int ->
            ?date:int ->
              ?hours:int ->
                ?minutes:int -> ?seconds:int -> ?ms:int -> unit -> int)
      =
      fun (x1900 : t) ->
        fun ~year:(x1887 : int) ->
          fun ~month:(x1888 : int) ->
            fun ?date:(x1889 : int option) ->
              fun ?hours:(x1890 : int option) ->
                fun ?minutes:(x1891 : int option) ->
                  fun ?seconds:(x1892 : int option) ->
                    fun ?ms:(x1893 : int option) ->
                      fun () ->
                        Ojs.int_of_js
                          (let x1901 = t_to_js x1900 in
                           Ojs.call (Ojs.get_prop_ascii x1901 "UTC") "apply"
                             [|x1901;((let x1894 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x1894 "push"
                                            [|(Ojs.int_to_js x1887)|]);
                                       ignore
                                         (Ojs.call x1894 "push"
                                            [|(Ojs.int_to_js x1888)|]);
                                       (match x1889 with
                                        | Some x1899 ->
                                            ignore
                                              (Ojs.call x1894 "push"
                                                 [|(Ojs.int_to_js x1899)|])
                                        | None -> ());
                                       (match x1890 with
                                        | Some x1898 ->
                                            ignore
                                              (Ojs.call x1894 "push"
                                                 [|(Ojs.int_to_js x1898)|])
                                        | None -> ());
                                       (match x1891 with
                                        | Some x1897 ->
                                            ignore
                                              (Ojs.call x1894 "push"
                                                 [|(Ojs.int_to_js x1897)|])
                                        | None -> ());
                                       (match x1892 with
                                        | Some x1896 ->
                                            ignore
                                              (Ojs.call x1894 "push"
                                                 [|(Ojs.int_to_js x1896)|])
                                        | None -> ());
                                       (match x1893 with
                                        | Some x1895 ->
                                            ignore
                                              (Ojs.call x1894 "push"
                                                 [|(Ojs.int_to_js x1895)|])
                                        | None -> ());
                                       x1894))|])
    let (now : t -> int) =
      fun (x1902 : t) -> Ojs.int_of_js (Ojs.call (t_to_js x1902) "now" [||])
  end
let (date : DateConstructor.t) =
  DateConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Date")
module Error =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1904 : Ojs.t) -> x1904
    and t_to_js : t -> Ojs.t = fun (x1903 : Ojs.t) -> x1903
    let (get_name : t -> string) =
      fun (x1905 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1905) "name")
    let (set_name : t -> string -> unit) =
      fun (x1906 : t) ->
        fun (x1907 : string) ->
          Ojs.set_prop_ascii (t_to_js x1906) "name" (Ojs.string_to_js x1907)
    let (get_message : t -> string) =
      fun (x1908 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1908) "message")
    let (set_message : t -> string -> unit) =
      fun (x1909 : t) ->
        fun (x1910 : string) ->
          Ojs.set_prop_ascii (t_to_js x1909) "message"
            (Ojs.string_to_js x1910)
    let (get_stack : t -> string) =
      fun (x1911 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1911) "stack")
    let (set_stack : t -> string -> unit) =
      fun (x1912 : t) ->
        fun (x1913 : string) ->
          Ojs.set_prop_ascii (t_to_js x1912) "stack" (Ojs.string_to_js x1913)
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1914 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Error")
               (let x1915 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1914 with
                 | Some x1916 ->
                     ignore
                       (Ojs.call x1915 "push" [|(Ojs.string_to_js x1916)|])
                 | None -> ());
                x1915))
  end
module ErrorConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x1918 : Ojs.t) -> x1918
    and t_to_js : t -> Ojs.t = fun (x1917 : Ojs.t) -> x1917
    let (create : t -> ?message:string -> unit -> Error.t) =
      fun (x1922 : t) ->
        fun ?message:(x1919 : string option) ->
          fun () ->
            Error.t_of_js
              (Ojs.new_obj_arr (t_to_js x1922)
                 (let x1920 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1919 with
                   | Some x1921 ->
                       ignore
                         (Ojs.call x1920 "push" [|(Ojs.string_to_js x1921)|])
                   | None -> ());
                  x1920))
    let (apply : t -> ?message:string -> unit -> Error.t) =
      fun (x1926 : t) ->
        fun ?message:(x1923 : string option) ->
          fun () ->
            Error.t_of_js
              (Ojs.call (t_to_js x1926) "apply"
                 [|Ojs.null;((let x1924 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1923 with
                               | Some x1925 ->
                                   ignore
                                     (Ojs.call x1924 "push"
                                        [|(Ojs.string_to_js x1925)|])
                               | None -> ());
                              x1924))|])
    let (get_prototype : t -> Error.t) =
      fun (x1927 : t) ->
        Error.t_of_js (Ojs.get_prop_ascii (t_to_js x1927) "prototype")
  end
let (error : ErrorConstructor.t) =
  ErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Error")
module EvalError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1928 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EvalError")
               (let x1929 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1928 with
                 | Some x1930 ->
                     ignore
                       (Ojs.call x1929 "push" [|(Ojs.string_to_js x1930)|])
                 | None -> ());
                x1929))
  end
module EvalErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> EvalError.t) =
      fun (x1934 : t) ->
        fun ?message:(x1931 : string option) ->
          fun () ->
            EvalError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1934)
                 (let x1932 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1931 with
                   | Some x1933 ->
                       ignore
                         (Ojs.call x1932 "push" [|(Ojs.string_to_js x1933)|])
                   | None -> ());
                  x1932))
    let (apply : t -> ?message:string -> unit -> EvalError.t) =
      fun (x1938 : t) ->
        fun ?message:(x1935 : string option) ->
          fun () ->
            EvalError.t_of_js
              (Ojs.call (t_to_js x1938) "apply"
                 [|Ojs.null;((let x1936 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1935 with
                               | Some x1937 ->
                                   ignore
                                     (Ojs.call x1936 "push"
                                        [|(Ojs.string_to_js x1937)|])
                               | None -> ());
                              x1936))|])
    let (get_prototype : t -> EvalError.t) =
      fun (x1939 : t) ->
        EvalError.t_of_js (Ojs.get_prop_ascii (t_to_js x1939) "prototype")
  end
let (eval_error : EvalErrorConstructor.t) =
  EvalErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "EvalError")
module RangeError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1940 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RangeError")
               (let x1941 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1940 with
                 | Some x1942 ->
                     ignore
                       (Ojs.call x1941 "push" [|(Ojs.string_to_js x1942)|])
                 | None -> ());
                x1941))
  end
module RangeErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> RangeError.t) =
      fun (x1946 : t) ->
        fun ?message:(x1943 : string option) ->
          fun () ->
            RangeError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1946)
                 (let x1944 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1943 with
                   | Some x1945 ->
                       ignore
                         (Ojs.call x1944 "push" [|(Ojs.string_to_js x1945)|])
                   | None -> ());
                  x1944))
    let (apply : t -> ?message:string -> unit -> RangeError.t) =
      fun (x1950 : t) ->
        fun ?message:(x1947 : string option) ->
          fun () ->
            RangeError.t_of_js
              (Ojs.call (t_to_js x1950) "apply"
                 [|Ojs.null;((let x1948 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1947 with
                               | Some x1949 ->
                                   ignore
                                     (Ojs.call x1948 "push"
                                        [|(Ojs.string_to_js x1949)|])
                               | None -> ());
                              x1948))|])
    let (get_prototype : t -> RangeError.t) =
      fun (x1951 : t) ->
        RangeError.t_of_js (Ojs.get_prop_ascii (t_to_js x1951) "prototype")
  end
let (range_error : RangeErrorConstructor.t) =
  RangeErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "RangeError")
module ReferenceError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1952 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ReferenceError")
               (let x1953 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1952 with
                 | Some x1954 ->
                     ignore
                       (Ojs.call x1953 "push" [|(Ojs.string_to_js x1954)|])
                 | None -> ());
                x1953))
  end
module ReferenceErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> ReferenceError.t) =
      fun (x1958 : t) ->
        fun ?message:(x1955 : string option) ->
          fun () ->
            ReferenceError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1958)
                 (let x1956 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1955 with
                   | Some x1957 ->
                       ignore
                         (Ojs.call x1956 "push" [|(Ojs.string_to_js x1957)|])
                   | None -> ());
                  x1956))
    let (apply : t -> ?message:string -> unit -> ReferenceError.t) =
      fun (x1962 : t) ->
        fun ?message:(x1959 : string option) ->
          fun () ->
            ReferenceError.t_of_js
              (Ojs.call (t_to_js x1962) "apply"
                 [|Ojs.null;((let x1960 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1959 with
                               | Some x1961 ->
                                   ignore
                                     (Ojs.call x1960 "push"
                                        [|(Ojs.string_to_js x1961)|])
                               | None -> ());
                              x1960))|])
    let (get_prototype : t -> ReferenceError.t) =
      fun (x1963 : t) ->
        ReferenceError.t_of_js
          (Ojs.get_prop_ascii (t_to_js x1963) "prototype")
  end
let (reference_error : ReferenceErrorConstructor.t) =
  ReferenceErrorConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "ReferenceError")
module SyntaxError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1964 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "SyntaxError")
               (let x1965 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1964 with
                 | Some x1966 ->
                     ignore
                       (Ojs.call x1965 "push" [|(Ojs.string_to_js x1966)|])
                 | None -> ());
                x1965))
  end
module SyntaxErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> SyntaxError.t) =
      fun (x1970 : t) ->
        fun ?message:(x1967 : string option) ->
          fun () ->
            SyntaxError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1970)
                 (let x1968 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1967 with
                   | Some x1969 ->
                       ignore
                         (Ojs.call x1968 "push" [|(Ojs.string_to_js x1969)|])
                   | None -> ());
                  x1968))
    let (apply : t -> ?message:string -> unit -> SyntaxError.t) =
      fun (x1974 : t) ->
        fun ?message:(x1971 : string option) ->
          fun () ->
            SyntaxError.t_of_js
              (Ojs.call (t_to_js x1974) "apply"
                 [|Ojs.null;((let x1972 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1971 with
                               | Some x1973 ->
                                   ignore
                                     (Ojs.call x1972 "push"
                                        [|(Ojs.string_to_js x1973)|])
                               | None -> ());
                              x1972))|])
    let (get_prototype : t -> SyntaxError.t) =
      fun (x1975 : t) ->
        SyntaxError.t_of_js (Ojs.get_prop_ascii (t_to_js x1975) "prototype")
  end
let (syntax_error : SyntaxErrorConstructor.t) =
  SyntaxErrorConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "SyntaxError")
module TypeError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1976 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TypeError")
               (let x1977 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1976 with
                 | Some x1978 ->
                     ignore
                       (Ojs.call x1977 "push" [|(Ojs.string_to_js x1978)|])
                 | None -> ());
                x1977))
  end
module TypeErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> TypeError.t) =
      fun (x1982 : t) ->
        fun ?message:(x1979 : string option) ->
          fun () ->
            TypeError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1982)
                 (let x1980 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1979 with
                   | Some x1981 ->
                       ignore
                         (Ojs.call x1980 "push" [|(Ojs.string_to_js x1981)|])
                   | None -> ());
                  x1980))
    let (apply : t -> ?message:string -> unit -> TypeError.t) =
      fun (x1986 : t) ->
        fun ?message:(x1983 : string option) ->
          fun () ->
            TypeError.t_of_js
              (Ojs.call (t_to_js x1986) "apply"
                 [|Ojs.null;((let x1984 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1983 with
                               | Some x1985 ->
                                   ignore
                                     (Ojs.call x1984 "push"
                                        [|(Ojs.string_to_js x1985)|])
                               | None -> ());
                              x1984))|])
    let (get_prototype : t -> TypeError.t) =
      fun (x1987 : t) ->
        TypeError.t_of_js (Ojs.get_prop_ascii (t_to_js x1987) "prototype")
  end
let (type_error : TypeErrorConstructor.t) =
  TypeErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "TypeError")
module URIError =
  struct
    include struct include Error end
    let (create : ?message:string -> unit -> t) =
      fun ?message:(x1988 : string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URIError")
               (let x1989 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x1988 with
                 | Some x1990 ->
                     ignore
                       (Ojs.call x1989 "push" [|(Ojs.string_to_js x1990)|])
                 | None -> ());
                x1989))
  end
module URIErrorConstructor =
  struct
    include struct include ErrorConstructor end
    let (create : t -> ?message:string -> unit -> URIError.t) =
      fun (x1994 : t) ->
        fun ?message:(x1991 : string option) ->
          fun () ->
            URIError.t_of_js
              (Ojs.new_obj_arr (t_to_js x1994)
                 (let x1992 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1991 with
                   | Some x1993 ->
                       ignore
                         (Ojs.call x1992 "push" [|(Ojs.string_to_js x1993)|])
                   | None -> ());
                  x1992))
    let (apply : t -> ?message:string -> unit -> URIError.t) =
      fun (x1998 : t) ->
        fun ?message:(x1995 : string option) ->
          fun () ->
            URIError.t_of_js
              (Ojs.call (t_to_js x1998) "apply"
                 [|Ojs.null;((let x1996 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x1995 with
                               | Some x1997 ->
                                   ignore
                                     (Ojs.call x1996 "push"
                                        [|(Ojs.string_to_js x1997)|])
                               | None -> ());
                              x1996))|])
    let (get_prototype : t -> URIError.t) =
      fun (x1999 : t) ->
        URIError.t_of_js (Ojs.get_prop_ascii (t_to_js x1999) "prototype")
  end
let (uri_error : URIErrorConstructor.t) =
  URIErrorConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "URIError")
module JSON =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2001 : Ojs.t) -> x2001
    and t_to_js : t -> Ojs.t = fun (x2000 : Ojs.t) -> x2000
    let (parse :
      string ->
        ?reviver:(this:any -> key:string -> value:any -> any) -> unit -> any)
      =
      fun (x2002 : string) ->
        fun
          ?reviver:(x2003 :
                     (this:any -> key:string -> value:any -> any) option)
          ->
          fun () ->
            any_of_js
              (let x2009 = Ojs.get_prop_ascii Ojs.global "JSON" in
               Ojs.call (Ojs.get_prop_ascii x2009 "parse") "apply"
                 [|x2009;((let x2004 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2004 "push"
                                [|(Ojs.string_to_js x2002)|]);
                           (match x2003 with
                            | Some x2005 ->
                                ignore
                                  (Ojs.call x2004 "push"
                                     [|(Ojs.fun_to_js 3
                                          (fun (x2006 : Ojs.t) ->
                                             fun (x2007 : Ojs.t) ->
                                               fun (x2008 : Ojs.t) ->
                                                 any_to_js
                                                   (x2005
                                                      ~this:(any_of_js x2006)
                                                      ~key:(Ojs.string_of_js
                                                              x2007)
                                                      ~value:(any_of_js x2008))))|])
                            | None -> ());
                           x2004))|])
    let (stringify :
      any ->
        ?replacer:(this:any -> key:string -> value:any -> any) ->
          ?space:string or_number -> unit -> string)
      =
      fun (x2010 : any) ->
        fun
          ?replacer:(x2011 :
                      (this:any -> key:string -> value:any -> any) option)
          ->
          fun ?space:(x2012 : string or_number option) ->
            fun () ->
              Ojs.string_of_js
                (let x2020 = Ojs.get_prop_ascii Ojs.global "JSON" in
                 Ojs.call (Ojs.get_prop_ascii x2020 "stringify") "apply"
                   [|x2020;((let x2013 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2013 "push" [|(any_to_js x2010)|]);
                             (match x2011 with
                              | Some x2016 ->
                                  ignore
                                    (Ojs.call x2013 "push"
                                       [|(Ojs.fun_to_js 3
                                            (fun (x2017 : Ojs.t) ->
                                               fun (x2018 : Ojs.t) ->
                                                 fun (x2019 : Ojs.t) ->
                                                   any_to_js
                                                     (x2016
                                                        ~this:(any_of_js
                                                                 x2017)
                                                        ~key:(Ojs.string_of_js
                                                                x2018)
                                                        ~value:(any_of_js
                                                                  x2019))))|])
                              | None -> ());
                             (match x2012 with
                              | Some x2014 ->
                                  ignore
                                    (Ojs.call x2013 "push"
                                       [|(or_number_to_js Ojs.string_to_js
                                            x2014)|])
                              | None -> ());
                             x2013))|])
    let (stringify' :
      any ->
        ?replacer:string or_number list or_null ->
          ?space:string or_number -> unit -> string)
      =
      fun (x2021 : any) ->
        fun ?replacer:(x2022 : string or_number list or_null option) ->
          fun ?space:(x2023 : string or_number option) ->
            fun () ->
              Ojs.string_of_js
                (let x2031 = Ojs.get_prop_ascii Ojs.global "JSON" in
                 Ojs.call (Ojs.get_prop_ascii x2031 "stringify") "apply"
                   [|x2031;((let x2024 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2024 "push" [|(any_to_js x2021)|]);
                             (match x2022 with
                              | Some x2027 ->
                                  ignore
                                    (Ojs.call x2024 "push"
                                       [|(or_null_to_js
                                            (fun
                                               (x2028 :
                                                 string or_number list)
                                               ->
                                               Ojs.list_to_js
                                                 (fun
                                                    (x2029 :
                                                      string or_number)
                                                    ->
                                                    or_number_to_js
                                                      Ojs.string_to_js x2029)
                                                 x2028) x2027)|])
                              | None -> ());
                             (match x2023 with
                              | Some x2025 ->
                                  ignore
                                    (Ojs.call x2024 "push"
                                       [|(or_number_to_js Ojs.string_to_js
                                            x2025)|])
                              | None -> ());
                             x2024))|])
  end
module TypedPropertyDescriptor =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x2033 : Ojs.t) -> x2033
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x2032 : Ojs.t) -> x2032
    let (get_enumerable : 'T t -> bool) =
      fun (x2034 : 'T t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x2034) "enumerable")
    let (set_enumerable : 'T t -> bool -> unit) =
      fun (x2036 : 'T t) ->
        fun (x2037 : bool) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2036) "enumerable"
            (Ojs.bool_to_js x2037)
    let (get_configurable : 'T t -> bool) =
      fun (x2039 : 'T t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x2039) "configurable")
    let (set_configurable : 'T t -> bool -> unit) =
      fun (x2041 : 'T t) ->
        fun (x2042 : bool) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2041) "configurable"
            (Ojs.bool_to_js x2042)
    let (get_writable : 'T t -> bool) =
      fun (x2044 : 'T t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x2044) "writable")
    let (set_writable : 'T t -> bool -> unit) =
      fun (x2046 : 'T t) ->
        fun (x2047 : bool) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2046) "writable"
            (Ojs.bool_to_js x2047)
    let (get_value : 'T t -> 'T) =
      fun (x2049 : 'T t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x2049) "value")
    let (set_value : 'T t -> 'T -> unit) =
      fun (x2051 : 'T t) ->
        fun (x2052 : 'T) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x2051) "value"
            (Obj.magic x2052)
    let (get : 'T t -> 'T) =
      fun (x2054 : 'T t) ->
        Obj.magic (Ojs.call (t_to_js Obj.magic x2054) "get" [||])
    let (set : 'T t -> 'T -> unit) =
      fun (x2057 : 'T t) ->
        fun (x2056 : 'T) ->
          ignore
            (Ojs.call (t_to_js Obj.magic x2057) "set" [|(Obj.magic x2056)|])
  end
module ClassDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2060 : Ojs.t) -> x2060
    and t_to_js : t -> Ojs.t = fun (x2059 : Ojs.t) -> x2059
    let (apply : t -> target:'TFunction -> ('TFunction, unit) union2) =
      fun (x2062 : t) ->
        fun ~target:(x2061 : 'TFunction) ->
          union2_of_js Obj.magic Ojs.unit_of_js
            (Ojs.apply (t_to_js x2062) [|(Obj.magic x2061)|])
  end
module PropertyDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2066 : Ojs.t) -> x2066
    and t_to_js : t -> Ojs.t = fun (x2065 : Ojs.t) -> x2065
    let (apply :
      t -> target:Object.t -> propertyKey:symbol or_string -> unit) =
      fun (x2070 : t) ->
        fun ~target:(x2067 : Object.t) ->
          fun ~propertyKey:(x2068 : symbol or_string) ->
            ignore
              (Ojs.apply (t_to_js x2070)
                 [|(Object.t_to_js x2067);(or_string_to_js symbol_to_js x2068)|])
  end
module MethodDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2072 : Ojs.t) -> x2072
    and t_to_js : t -> Ojs.t = fun (x2071 : Ojs.t) -> x2071
    let (apply :
      t ->
        target:Object.t ->
          propertyKey:symbol or_string ->
            descriptor:'T TypedPropertyDescriptor.t ->
              (unit, 'T TypedPropertyDescriptor.t) union2)
      =
      fun (x2078 : t) ->
        fun ~target:(x2073 : Object.t) ->
          fun ~propertyKey:(x2074 : symbol or_string) ->
            fun ~descriptor:(x2076 : 'T TypedPropertyDescriptor.t) ->
              union2_of_js Ojs.unit_of_js
                (fun (x2080 : Ojs.t) ->
                   TypedPropertyDescriptor.t_of_js Obj.magic x2080)
                (Ojs.apply (t_to_js x2078)
                   [|(Object.t_to_js x2073);(or_string_to_js symbol_to_js
                                               x2074);(TypedPropertyDescriptor.t_to_js
                                                         Obj.magic x2076)|])
  end
module ParameterDecorator =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2083 : Ojs.t) -> x2083
    and t_to_js : t -> Ojs.t = fun (x2082 : Ojs.t) -> x2082
    let (apply :
      t ->
        target:Object.t ->
          propertyKey:symbol or_string -> parameterIndex:int -> unit)
      =
      fun (x2088 : t) ->
        fun ~target:(x2084 : Object.t) ->
          fun ~propertyKey:(x2085 : symbol or_string) ->
            fun ~parameterIndex:(x2087 : int) ->
              ignore
                (Ojs.apply (t_to_js x2088)
                   [|(Object.t_to_js x2084);(or_string_to_js symbol_to_js
                                               x2085);(Ojs.int_to_js x2087)|])
  end
module Promise =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x2090 : Ojs.t) -> x2090
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x2089 : Ojs.t) -> x2089
    let (then_ :
      'T t ->
        ?onfulfilled:('T -> 'TResult t) ->
          ?onrejected:(any -> 'TResult t) -> unit -> 'TResult t)
      =
      fun (x2100 : 'T t) ->
        fun ?onfulfilled:(x2091 : ('T -> 'TResult t) option) ->
          fun ?onrejected:(x2092 : (any -> 'TResult t) option) ->
            fun () ->
              t_of_js Obj.magic
                (let x2102 = t_to_js Obj.magic x2100 in
                 Ojs.call (Ojs.get_prop_ascii x2102 "then") "apply"
                   [|x2102;((let x2093 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2091 with
                              | Some x2097 ->
                                  ignore
                                    (Ojs.call x2093 "push"
                                       [|(Ojs.fun_to_js 1
                                            (fun (x2098 : Ojs.t) ->
                                               t_to_js Obj.magic
                                                 (x2097 (Obj.magic x2098))))|])
                              | None -> ());
                             (match x2092 with
                              | Some x2094 ->
                                  ignore
                                    (Ojs.call x2093 "push"
                                       [|(Ojs.fun_to_js 1
                                            (fun (x2095 : Ojs.t) ->
                                               t_to_js Obj.magic
                                                 (x2094 (any_of_js x2095))))|])
                              | None -> ());
                             x2093))|])
    let (catch : 'T t -> ?onrejected:(any -> 'T t) -> unit -> 'T t) =
      fun (x2109 : 'T t) ->
        fun ?onrejected:(x2104 : (any -> 'T t) option) ->
          fun () ->
            t_of_js Obj.magic
              (let x2111 = t_to_js Obj.magic x2109 in
               Ojs.call (Ojs.get_prop_ascii x2111 "catch") "apply"
                 [|x2111;((let x2105 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2104 with
                            | Some x2106 ->
                                ignore
                                  (Ojs.call x2105 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x2107 : Ojs.t) ->
                                             t_to_js Obj.magic
                                               (x2106 (any_of_js x2107))))|])
                            | None -> ());
                           x2105))|])
    let (create :
      (resolve:('T -> unit) -> reject:('E -> unit) -> unit) -> 'T t) =
      fun (x2113 : resolve:('T -> unit) -> reject:('E -> unit) -> unit) ->
        t_of_js Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Promise")
             [|(Ojs.fun_to_js 2
                  (fun (x2114 : Ojs.t) ->
                     fun (x2116 : Ojs.t) ->
                       x2113
                         ~resolve:(fun (x2115 : 'T) ->
                                     ignore
                                       (Ojs.apply x2114 [|(Obj.magic x2115)|]))
                         ~reject:(fun (x2117 : 'E) ->
                                    ignore
                                      (Ojs.apply x2116 [|(Obj.magic x2117)|]))))|])
  end
module ArrayBuffer =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2120 : Ojs.t) -> x2120
    and t_to_js : t -> Ojs.t = fun (x2119 : Ojs.t) -> x2119
    let (get_byte_length : t -> int) =
      fun (x2121 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2121) "byteLength")
    let (slice : t -> begin_:int -> ?end_:int -> unit -> t) =
      fun (x2126 : t) ->
        fun ~begin_:(x2122 : int) ->
          fun ?end_:(x2123 : int option) ->
            fun () ->
              t_of_js
                (let x2127 = t_to_js x2126 in
                 Ojs.call (Ojs.get_prop_ascii x2127 "slice") "apply"
                   [|x2127;((let x2124 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2124 "push"
                                  [|(Ojs.int_to_js x2122)|]);
                             (match x2123 with
                              | Some x2125 ->
                                  ignore
                                    (Ojs.call x2124 "push"
                                       [|(Ojs.int_to_js x2125)|])
                              | None -> ());
                             x2124))|])
    let (create : byteLength:int -> t) =
      fun ~byteLength:(x2128 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
             [|(Ojs.int_to_js x2128)|])
    let (is_view : any -> bool) =
      fun (x2129 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ArrayBuffer") "isView"
             [|(any_to_js x2129)|])
  end
module ArrayBufferTypes =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2131 : Ojs.t) -> x2131
    and t_to_js : t -> Ojs.t = fun (x2130 : Ojs.t) -> x2130
    let (get_array_buffer : t -> ArrayBuffer.t) =
      fun (x2132 : t) ->
        ArrayBuffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x2132) "ArrayBuffer")
    let (set_array_buffer : t -> ArrayBuffer.t -> unit) =
      fun (x2133 : t) ->
        fun (x2134 : ArrayBuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x2133) "ArrayBuffer"
            (ArrayBuffer.t_to_js x2134)
  end
module ArrayBufferConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2136 : Ojs.t) -> x2136
    and t_to_js : t -> Ojs.t = fun (x2135 : Ojs.t) -> x2135
    let (get_prototype : t -> ArrayBuffer.t) =
      fun (x2137 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2137) "prototype")
    let (create : t -> byteLength:int -> ArrayBuffer.t) =
      fun (x2139 : t) ->
        fun ~byteLength:(x2138 : int) ->
          ArrayBuffer.t_of_js
            (Ojs.new_obj (t_to_js x2139) [|(Ojs.int_to_js x2138)|])
    let (is_view : t -> any -> bool) =
      fun (x2141 : t) ->
        fun (x2140 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x2141) "isView" [|(any_to_js x2140)|])
  end
let (array_buffer : ArrayBufferConstructor.t) =
  ArrayBufferConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "ArrayBuffer")
module ArrayBufferView =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2143 : Ojs.t) -> x2143
    and t_to_js : t -> Ojs.t = fun (x2142 : Ojs.t) -> x2142
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2144 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2144) "buffer")
    let (set_buffer : t -> ArrayBuffer.t -> unit) =
      fun (x2145 : t) ->
        fun (x2146 : ArrayBuffer.t) ->
          Ojs.set_prop_ascii (t_to_js x2145) "buffer"
            (ArrayBuffer.t_to_js x2146)
    let (get_byte_length : t -> int) =
      fun (x2147 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2147) "byteLength")
    let (set_byte_length : t -> int -> unit) =
      fun (x2148 : t) ->
        fun (x2149 : int) ->
          Ojs.set_prop_ascii (t_to_js x2148) "byteLength"
            (Ojs.int_to_js x2149)
    let (get_byte_offset : t -> int) =
      fun (x2150 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2150) "byteOffset")
    let (set_byte_offset : t -> int -> unit) =
      fun (x2151 : t) ->
        fun (x2152 : int) ->
          Ojs.set_prop_ascii (t_to_js x2151) "byteOffset"
            (Ojs.int_to_js x2152)
  end
module DataView =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2154 : Ojs.t) -> x2154
    and t_to_js : t -> Ojs.t = fun (x2153 : Ojs.t) -> x2153
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2155 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2155) "buffer")
    let (get_byte_length : t -> int) =
      fun (x2156 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2156) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x2157 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2157) "byteOffset")
    let (get_float32 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2162 : t) ->
        fun ~byteOffset:(x2158 : int) ->
          fun ?littleEndian:(x2159 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2163 = t_to_js x2162 in
                 Ojs.call (Ojs.get_prop_ascii x2163 "getFloat32") "apply"
                   [|x2163;((let x2160 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2160 "push"
                                  [|(Ojs.int_to_js x2158)|]);
                             (match x2159 with
                              | Some x2161 ->
                                  ignore
                                    (Ojs.call x2160 "push"
                                       [|(Ojs.bool_to_js x2161)|])
                              | None -> ());
                             x2160))|])
    let (get_float64 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2168 : t) ->
        fun ~byteOffset:(x2164 : int) ->
          fun ?littleEndian:(x2165 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2169 = t_to_js x2168 in
                 Ojs.call (Ojs.get_prop_ascii x2169 "getFloat64") "apply"
                   [|x2169;((let x2166 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2166 "push"
                                  [|(Ojs.int_to_js x2164)|]);
                             (match x2165 with
                              | Some x2167 ->
                                  ignore
                                    (Ojs.call x2166 "push"
                                       [|(Ojs.bool_to_js x2167)|])
                              | None -> ());
                             x2166))|])
    let (get_int8 : t -> byteOffset:int -> int) =
      fun (x2171 : t) ->
        fun ~byteOffset:(x2170 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2171) "getInt8" [|(Ojs.int_to_js x2170)|])
    let (get_int16 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2176 : t) ->
        fun ~byteOffset:(x2172 : int) ->
          fun ?littleEndian:(x2173 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2177 = t_to_js x2176 in
                 Ojs.call (Ojs.get_prop_ascii x2177 "getInt16") "apply"
                   [|x2177;((let x2174 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2174 "push"
                                  [|(Ojs.int_to_js x2172)|]);
                             (match x2173 with
                              | Some x2175 ->
                                  ignore
                                    (Ojs.call x2174 "push"
                                       [|(Ojs.bool_to_js x2175)|])
                              | None -> ());
                             x2174))|])
    let (get_int32 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2182 : t) ->
        fun ~byteOffset:(x2178 : int) ->
          fun ?littleEndian:(x2179 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2183 = t_to_js x2182 in
                 Ojs.call (Ojs.get_prop_ascii x2183 "getInt32") "apply"
                   [|x2183;((let x2180 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2180 "push"
                                  [|(Ojs.int_to_js x2178)|]);
                             (match x2179 with
                              | Some x2181 ->
                                  ignore
                                    (Ojs.call x2180 "push"
                                       [|(Ojs.bool_to_js x2181)|])
                              | None -> ());
                             x2180))|])
    let (get_uint8 : t -> byteOffset:int -> int) =
      fun (x2185 : t) ->
        fun ~byteOffset:(x2184 : int) ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2185) "getUint8" [|(Ojs.int_to_js x2184)|])
    let (get_uint16 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2190 : t) ->
        fun ~byteOffset:(x2186 : int) ->
          fun ?littleEndian:(x2187 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2191 = t_to_js x2190 in
                 Ojs.call (Ojs.get_prop_ascii x2191 "getUint16") "apply"
                   [|x2191;((let x2188 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2188 "push"
                                  [|(Ojs.int_to_js x2186)|]);
                             (match x2187 with
                              | Some x2189 ->
                                  ignore
                                    (Ojs.call x2188 "push"
                                       [|(Ojs.bool_to_js x2189)|])
                              | None -> ());
                             x2188))|])
    let (get_uint32 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> int) =
      fun (x2196 : t) ->
        fun ~byteOffset:(x2192 : int) ->
          fun ?littleEndian:(x2193 : bool option) ->
            fun () ->
              Ojs.int_of_js
                (let x2197 = t_to_js x2196 in
                 Ojs.call (Ojs.get_prop_ascii x2197 "getUint32") "apply"
                   [|x2197;((let x2194 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2194 "push"
                                  [|(Ojs.int_to_js x2192)|]);
                             (match x2193 with
                              | Some x2195 ->
                                  ignore
                                    (Ojs.call x2194 "push"
                                       [|(Ojs.bool_to_js x2195)|])
                              | None -> ());
                             x2194))|])
    let (set_float32 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2203 : t) ->
        fun ~byteOffset:(x2198 : int) ->
          fun ~value:(x2199 : int) ->
            fun ?littleEndian:(x2200 : bool option) ->
              fun () ->
                ignore
                  (let x2204 = t_to_js x2203 in
                   Ojs.call (Ojs.get_prop_ascii x2204 "setFloat32") "apply"
                     [|x2204;((let x2201 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2201 "push"
                                    [|(Ojs.int_to_js x2198)|]);
                               ignore
                                 (Ojs.call x2201 "push"
                                    [|(Ojs.int_to_js x2199)|]);
                               (match x2200 with
                                | Some x2202 ->
                                    ignore
                                      (Ojs.call x2201 "push"
                                         [|(Ojs.bool_to_js x2202)|])
                                | None -> ());
                               x2201))|])
    let (set_float64 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2210 : t) ->
        fun ~byteOffset:(x2205 : int) ->
          fun ~value:(x2206 : int) ->
            fun ?littleEndian:(x2207 : bool option) ->
              fun () ->
                ignore
                  (let x2211 = t_to_js x2210 in
                   Ojs.call (Ojs.get_prop_ascii x2211 "setFloat64") "apply"
                     [|x2211;((let x2208 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2208 "push"
                                    [|(Ojs.int_to_js x2205)|]);
                               ignore
                                 (Ojs.call x2208 "push"
                                    [|(Ojs.int_to_js x2206)|]);
                               (match x2207 with
                                | Some x2209 ->
                                    ignore
                                      (Ojs.call x2208 "push"
                                         [|(Ojs.bool_to_js x2209)|])
                                | None -> ());
                               x2208))|])
    let (set_int8 : t -> byteOffset:int -> value:int -> unit) =
      fun (x2214 : t) ->
        fun ~byteOffset:(x2212 : int) ->
          fun ~value:(x2213 : int) ->
            ignore
              (Ojs.call (t_to_js x2214) "setInt8"
                 [|(Ojs.int_to_js x2212);(Ojs.int_to_js x2213)|])
    let (set_int16 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2220 : t) ->
        fun ~byteOffset:(x2215 : int) ->
          fun ~value:(x2216 : int) ->
            fun ?littleEndian:(x2217 : bool option) ->
              fun () ->
                ignore
                  (let x2221 = t_to_js x2220 in
                   Ojs.call (Ojs.get_prop_ascii x2221 "setInt16") "apply"
                     [|x2221;((let x2218 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2218 "push"
                                    [|(Ojs.int_to_js x2215)|]);
                               ignore
                                 (Ojs.call x2218 "push"
                                    [|(Ojs.int_to_js x2216)|]);
                               (match x2217 with
                                | Some x2219 ->
                                    ignore
                                      (Ojs.call x2218 "push"
                                         [|(Ojs.bool_to_js x2219)|])
                                | None -> ());
                               x2218))|])
    let (set_int32 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2227 : t) ->
        fun ~byteOffset:(x2222 : int) ->
          fun ~value:(x2223 : int) ->
            fun ?littleEndian:(x2224 : bool option) ->
              fun () ->
                ignore
                  (let x2228 = t_to_js x2227 in
                   Ojs.call (Ojs.get_prop_ascii x2228 "setInt32") "apply"
                     [|x2228;((let x2225 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2225 "push"
                                    [|(Ojs.int_to_js x2222)|]);
                               ignore
                                 (Ojs.call x2225 "push"
                                    [|(Ojs.int_to_js x2223)|]);
                               (match x2224 with
                                | Some x2226 ->
                                    ignore
                                      (Ojs.call x2225 "push"
                                         [|(Ojs.bool_to_js x2226)|])
                                | None -> ());
                               x2225))|])
    let (set_uint8 : t -> byteOffset:int -> value:int -> unit) =
      fun (x2231 : t) ->
        fun ~byteOffset:(x2229 : int) ->
          fun ~value:(x2230 : int) ->
            ignore
              (Ojs.call (t_to_js x2231) "setUint8"
                 [|(Ojs.int_to_js x2229);(Ojs.int_to_js x2230)|])
    let (set_uint16 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2237 : t) ->
        fun ~byteOffset:(x2232 : int) ->
          fun ~value:(x2233 : int) ->
            fun ?littleEndian:(x2234 : bool option) ->
              fun () ->
                ignore
                  (let x2238 = t_to_js x2237 in
                   Ojs.call (Ojs.get_prop_ascii x2238 "setUint16") "apply"
                     [|x2238;((let x2235 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2235 "push"
                                    [|(Ojs.int_to_js x2232)|]);
                               ignore
                                 (Ojs.call x2235 "push"
                                    [|(Ojs.int_to_js x2233)|]);
                               (match x2234 with
                                | Some x2236 ->
                                    ignore
                                      (Ojs.call x2235 "push"
                                         [|(Ojs.bool_to_js x2236)|])
                                | None -> ());
                               x2235))|])
    let (set_uint32 :
      t -> byteOffset:int -> value:int -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x2244 : t) ->
        fun ~byteOffset:(x2239 : int) ->
          fun ~value:(x2240 : int) ->
            fun ?littleEndian:(x2241 : bool option) ->
              fun () ->
                ignore
                  (let x2245 = t_to_js x2244 in
                   Ojs.call (Ojs.get_prop_ascii x2245 "setUint32") "apply"
                     [|x2245;((let x2242 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2242 "push"
                                    [|(Ojs.int_to_js x2239)|]);
                               ignore
                                 (Ojs.call x2242 "push"
                                    [|(Ojs.int_to_js x2240)|]);
                               (match x2241 with
                                | Some x2243 ->
                                    ignore
                                      (Ojs.call x2242 "push"
                                         [|(Ojs.bool_to_js x2243)|])
                                | None -> ());
                               x2242))|])
    let (create :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?byteLength:int -> unit -> t)
      =
      fun ~buffer:(x2246 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2247 : int option) ->
          fun ?byteLength:(x2248 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DataView")
                   (let x2249 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2249 "push" [|(ArrayBuffer.t_to_js x2246)|]);
                    (match x2247 with
                     | Some x2251 ->
                         ignore
                           (Ojs.call x2249 "push" [|(Ojs.int_to_js x2251)|])
                     | None -> ());
                    (match x2248 with
                     | Some x2250 ->
                         ignore
                           (Ojs.call x2249 "push" [|(Ojs.int_to_js x2250)|])
                     | None -> ());
                    x2249))
  end
module DataViewConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2253 : Ojs.t) -> x2253
    and t_to_js : t -> Ojs.t = fun (x2252 : Ojs.t) -> x2252
    let (get_prototype : t -> DataView.t) =
      fun (x2254 : t) ->
        DataView.t_of_js (Ojs.get_prop_ascii (t_to_js x2254) "prototype")
    let (create :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?byteLength:int -> unit -> DataView.t)
      =
      fun (x2261 : t) ->
        fun ~buffer:(x2255 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2256 : int option) ->
            fun ?byteLength:(x2257 : int option) ->
              fun () ->
                DataView.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2261)
                     (let x2258 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2258 "push"
                           [|(ArrayBuffer.t_to_js x2255)|]);
                      (match x2256 with
                       | Some x2260 ->
                           ignore
                             (Ojs.call x2258 "push" [|(Ojs.int_to_js x2260)|])
                       | None -> ());
                      (match x2257 with
                       | Some x2259 ->
                           ignore
                             (Ojs.call x2258 "push" [|(Ojs.int_to_js x2259)|])
                       | None -> ());
                      x2258))
  end
let (data_view : DataViewConstructor.t) =
  DataViewConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "DataView")
module Int8Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2263 : Ojs.t) -> x2263
    and t_to_js : t -> Ojs.t = fun (x2262 : Ojs.t) -> x2262
    let (get_bytes_per_element : t -> int) =
      fun (x2264 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2264) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2265 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2265) "buffer")
    let (get_byte_length : t -> int) =
      fun (x2266 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2266) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x2267 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2267) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x2273 : t) ->
        fun ~target:(x2268 : int) ->
          fun ~start:(x2269 : int) ->
            fun ?end_:(x2270 : int option) ->
              fun () ->
                t_of_js
                  (let x2274 = t_to_js x2273 in
                   Ojs.call (Ojs.get_prop_ascii x2274 "copyWithin") "apply"
                     [|x2274;((let x2271 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2271 "push"
                                    [|(Ojs.int_to_js x2268)|]);
                               ignore
                                 (Ojs.call x2271 "push"
                                    [|(Ojs.int_to_js x2269)|]);
                               (match x2270 with
                                | Some x2272 ->
                                    ignore
                                      (Ojs.call x2271 "push"
                                         [|(Ojs.int_to_js x2272)|])
                                | None -> ());
                               x2271))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2282 : t) ->
        fun (x2275 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2276 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2283 = t_to_js x2282 in
                 Ojs.call (Ojs.get_prop_ascii x2283 "every") "apply"
                   [|x2283;((let x2277 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2277 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2279 : Ojs.t) ->
                                          fun (x2280 : Ojs.t) ->
                                            fun (x2281 : Ojs.t) ->
                                              unknown_to_js
                                                (x2275
                                                   ~value:(Ojs.int_of_js
                                                             x2279)
                                                   ~index:(Ojs.int_of_js
                                                             x2280)
                                                   ~array:(t_of_js x2281))))|]);
                             (match x2276 with
                              | Some x2278 ->
                                  ignore
                                    (Ojs.call x2277 "push"
                                       [|(any_to_js x2278)|])
                              | None -> ());
                             x2277))|])
    let (fill : t -> int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2290 : t) ->
        fun (x2284 : int) ->
          fun ?start:(x2285 : int option) ->
            fun ?end_:(x2286 : int option) ->
              fun () ->
                t_of_js
                  (let x2291 = t_to_js x2290 in
                   Ojs.call (Ojs.get_prop_ascii x2291 "fill") "apply"
                     [|x2291;((let x2287 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2287 "push"
                                    [|(Ojs.int_to_js x2284)|]);
                               (match x2285 with
                                | Some x2289 ->
                                    ignore
                                      (Ojs.call x2287 "push"
                                         [|(Ojs.int_to_js x2289)|])
                                | None -> ());
                               (match x2286 with
                                | Some x2288 ->
                                    ignore
                                      (Ojs.call x2287 "push"
                                         [|(Ojs.int_to_js x2288)|])
                                | None -> ());
                               x2287))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2299 : t) ->
        fun (x2292 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x2293 : any option) ->
            fun () ->
              t_of_js
                (let x2300 = t_to_js x2299 in
                 Ojs.call (Ojs.get_prop_ascii x2300 "filter") "apply"
                   [|x2300;((let x2294 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2294 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2296 : Ojs.t) ->
                                          fun (x2297 : Ojs.t) ->
                                            fun (x2298 : Ojs.t) ->
                                              any_to_js
                                                (x2292
                                                   ~value:(Ojs.int_of_js
                                                             x2296)
                                                   ~index:(Ojs.int_of_js
                                                             x2297)
                                                   ~array:(t_of_js x2298))))|]);
                             (match x2293 with
                              | Some x2295 ->
                                  ignore
                                    (Ojs.call x2294 "push"
                                       [|(any_to_js x2295)|])
                              | None -> ());
                             x2294))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x2308 : t) ->
        fun (x2301 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2302 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x2309 = t_to_js x2308 in
                 Ojs.call (Ojs.get_prop_ascii x2309 "find") "apply"
                   [|x2309;((let x2303 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2303 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2305 : Ojs.t) ->
                                          fun (x2306 : Ojs.t) ->
                                            fun (x2307 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2301
                                                   ~value:(Ojs.int_of_js
                                                             x2305)
                                                   ~index:(Ojs.int_of_js
                                                             x2306)
                                                   ~obj:(t_of_js x2307))))|]);
                             (match x2302 with
                              | Some x2304 ->
                                  ignore
                                    (Ojs.call x2303 "push"
                                       [|(any_to_js x2304)|])
                              | None -> ());
                             x2303))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x2318 : t) ->
        fun (x2311 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2312 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x2319 = t_to_js x2318 in
                 Ojs.call (Ojs.get_prop_ascii x2319 "findIndex") "apply"
                   [|x2319;((let x2313 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2313 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2315 : Ojs.t) ->
                                          fun (x2316 : Ojs.t) ->
                                            fun (x2317 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2311
                                                   ~value:(Ojs.int_of_js
                                                             x2315)
                                                   ~index:(Ojs.int_of_js
                                                             x2316)
                                                   ~obj:(t_of_js x2317))))|]);
                             (match x2312 with
                              | Some x2314 ->
                                  ignore
                                    (Ojs.call x2313 "push"
                                       [|(any_to_js x2314)|])
                              | None -> ());
                             x2313))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x2327 : t) ->
        fun ~callbackfn:(x2320 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x2321 : any option) ->
            fun () ->
              ignore
                (let x2328 = t_to_js x2327 in
                 Ojs.call (Ojs.get_prop_ascii x2328 "forEach") "apply"
                   [|x2328;((let x2322 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2322 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2324 : Ojs.t) ->
                                          fun (x2325 : Ojs.t) ->
                                            fun (x2326 : Ojs.t) ->
                                              x2320
                                                ~value:(Ojs.int_of_js x2324)
                                                ~index:(Ojs.int_of_js x2325)
                                                ~array:(t_of_js x2326)))|]);
                             (match x2321 with
                              | Some x2323 ->
                                  ignore
                                    (Ojs.call x2322 "push"
                                       [|(any_to_js x2323)|])
                              | None -> ());
                             x2322))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x2333 : t) ->
        fun ~searchElement:(x2329 : int) ->
          fun ?fromIndex:(x2330 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2334 = t_to_js x2333 in
                 Ojs.call (Ojs.get_prop_ascii x2334 "indexOf") "apply"
                   [|x2334;((let x2331 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2331 "push"
                                  [|(Ojs.int_to_js x2329)|]);
                             (match x2330 with
                              | Some x2332 ->
                                  ignore
                                    (Ojs.call x2331 "push"
                                       [|(Ojs.int_to_js x2332)|])
                              | None -> ());
                             x2331))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x2338 : t) ->
        fun ?separator:(x2335 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x2339 = t_to_js x2338 in
               Ojs.call (Ojs.get_prop_ascii x2339 "join") "apply"
                 [|x2339;((let x2336 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2335 with
                            | Some x2337 ->
                                ignore
                                  (Ojs.call x2336 "push"
                                     [|(Ojs.string_to_js x2337)|])
                            | None -> ());
                           x2336))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2344 : t) ->
        fun ~searchElement:(x2340 : int) ->
          fun ?fromIndex:(x2341 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2345 = t_to_js x2344 in
                 Ojs.call (Ojs.get_prop_ascii x2345 "lastIndexOf") "apply"
                   [|x2345;((let x2342 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2342 "push"
                                  [|(Ojs.int_to_js x2340)|]);
                             (match x2341 with
                              | Some x2343 ->
                                  ignore
                                    (Ojs.call x2342 "push"
                                       [|(Ojs.int_to_js x2343)|])
                              | None -> ());
                             x2342))|])
    let (get_length : t -> int) =
      fun (x2346 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2346) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2354 : t) ->
        fun ~callbackfn:(x2347 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x2348 : any option) ->
            fun () ->
              t_of_js
                (let x2355 = t_to_js x2354 in
                 Ojs.call (Ojs.get_prop_ascii x2355 "map") "apply"
                   [|x2355;((let x2349 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2349 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2351 : Ojs.t) ->
                                          fun (x2352 : Ojs.t) ->
                                            fun (x2353 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2347
                                                   ~value:(Ojs.int_of_js
                                                             x2351)
                                                   ~index:(Ojs.int_of_js
                                                             x2352)
                                                   ~array:(t_of_js x2353))))|]);
                             (match x2348 with
                              | Some x2350 ->
                                  ignore
                                    (Ojs.call x2349 "push"
                                       [|(any_to_js x2350)|])
                              | None -> ());
                             x2349))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2361 : t) ->
        fun
          ~callbackfn:(x2356 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2361) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x2357 : Ojs.t) ->
                       fun (x2358 : Ojs.t) ->
                         fun (x2359 : Ojs.t) ->
                           fun (x2360 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2356 ~previousValue:(Ojs.int_of_js x2357)
                                  ~currentValue:(Ojs.int_of_js x2358)
                                  ~currentIndex:(Ojs.int_of_js x2359)
                                  ~array:(t_of_js x2360))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2368 : t) ->
        fun
          ~callbackfn:(x2362 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2367 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2368) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2363 : Ojs.t) ->
                         fun (x2364 : Ojs.t) ->
                           fun (x2365 : Ojs.t) ->
                             fun (x2366 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2362 ~previousValue:(Ojs.int_of_js x2363)
                                    ~currentValue:(Ojs.int_of_js x2364)
                                    ~currentIndex:(Ojs.int_of_js x2365)
                                    ~array:(t_of_js x2366))));(Ojs.int_to_js
                                                                 x2367)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2375 : t) ->
        fun
          ~callbackfn:(x2369 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2374 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2375) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2370 : Ojs.t) ->
                         fun (x2371 : Ojs.t) ->
                           fun (x2372 : Ojs.t) ->
                             fun (x2373 : Ojs.t) ->
                               Obj.magic
                                 (x2369 ~previousValue:(Obj.magic x2370)
                                    ~currentValue:(Ojs.int_of_js x2371)
                                    ~currentIndex:(Ojs.int_of_js x2372)
                                    ~array:(t_of_js x2373))));(Obj.magic
                                                                 x2374)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2381 : t) ->
        fun
          ~callbackfn:(x2376 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2381) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x2377 : Ojs.t) ->
                       fun (x2378 : Ojs.t) ->
                         fun (x2379 : Ojs.t) ->
                           fun (x2380 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2376 ~previousValue:(Ojs.int_of_js x2377)
                                  ~currentValue:(Ojs.int_of_js x2378)
                                  ~currentIndex:(Ojs.int_of_js x2379)
                                  ~array:(t_of_js x2380))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2388 : t) ->
        fun
          ~callbackfn:(x2382 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2387 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2388) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2383 : Ojs.t) ->
                         fun (x2384 : Ojs.t) ->
                           fun (x2385 : Ojs.t) ->
                             fun (x2386 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2382 ~previousValue:(Ojs.int_of_js x2383)
                                    ~currentValue:(Ojs.int_of_js x2384)
                                    ~currentIndex:(Ojs.int_of_js x2385)
                                    ~array:(t_of_js x2386))));(Ojs.int_to_js
                                                                 x2387)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2395 : t) ->
        fun
          ~callbackfn:(x2389 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2394 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2395) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2390 : Ojs.t) ->
                         fun (x2391 : Ojs.t) ->
                           fun (x2392 : Ojs.t) ->
                             fun (x2393 : Ojs.t) ->
                               Obj.magic
                                 (x2389 ~previousValue:(Obj.magic x2390)
                                    ~currentValue:(Ojs.int_of_js x2391)
                                    ~currentIndex:(Ojs.int_of_js x2392)
                                    ~array:(t_of_js x2393))));(Obj.magic
                                                                 x2394)|])
    let (reverse : t -> t) =
      fun (x2396 : t) -> t_of_js (Ojs.call (t_to_js x2396) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x2402 : t) ->
        fun ~array:(x2397 : int Array.t) ->
          fun ?offset:(x2398 : int option) ->
            fun () ->
              ignore
                (let x2403 = t_to_js x2402 in
                 Ojs.call (Ojs.get_prop_ascii x2403 "set") "apply"
                   [|x2403;((let x2399 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2399 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x2397)|]);
                             (match x2398 with
                              | Some x2400 ->
                                  ignore
                                    (Ojs.call x2399 "push"
                                       [|(Ojs.int_to_js x2400)|])
                              | None -> ());
                             x2399))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2409 : t) ->
        fun ?start:(x2404 : int option) ->
          fun ?end_:(x2405 : int option) ->
            fun () ->
              t_of_js
                (let x2410 = t_to_js x2409 in
                 Ojs.call (Ojs.get_prop_ascii x2410 "slice") "apply"
                   [|x2410;((let x2406 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2404 with
                              | Some x2408 ->
                                  ignore
                                    (Ojs.call x2406 "push"
                                       [|(Ojs.int_to_js x2408)|])
                              | None -> ());
                             (match x2405 with
                              | Some x2407 ->
                                  ignore
                                    (Ojs.call x2406 "push"
                                       [|(Ojs.int_to_js x2407)|])
                              | None -> ());
                             x2406))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2418 : t) ->
        fun (x2411 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2412 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2419 = t_to_js x2418 in
                 Ojs.call (Ojs.get_prop_ascii x2419 "some") "apply"
                   [|x2419;((let x2413 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2413 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2415 : Ojs.t) ->
                                          fun (x2416 : Ojs.t) ->
                                            fun (x2417 : Ojs.t) ->
                                              unknown_to_js
                                                (x2411
                                                   ~value:(Ojs.int_of_js
                                                             x2415)
                                                   ~index:(Ojs.int_of_js
                                                             x2416)
                                                   ~array:(t_of_js x2417))))|]);
                             (match x2412 with
                              | Some x2414 ->
                                  ignore
                                    (Ojs.call x2413 "push"
                                       [|(any_to_js x2414)|])
                              | None -> ());
                             x2413))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x2425 : t) ->
        fun ?compareFn:(x2420 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x2426 = t_to_js x2425 in
               Ojs.call (Ojs.get_prop_ascii x2426 "sort") "apply"
                 [|x2426;((let x2421 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2420 with
                            | Some x2422 ->
                                ignore
                                  (Ojs.call x2421 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2423 : Ojs.t) ->
                                             fun (x2424 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x2422
                                                    ~a:(Ojs.int_of_js x2423)
                                                    ~b:(Ojs.int_of_js x2424))))|])
                            | None -> ());
                           x2421))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x2432 : t) ->
        fun ?begin_:(x2427 : int option) ->
          fun ?end_:(x2428 : int option) ->
            fun () ->
              t_of_js
                (let x2433 = t_to_js x2432 in
                 Ojs.call (Ojs.get_prop_ascii x2433 "subarray") "apply"
                   [|x2433;((let x2429 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2427 with
                              | Some x2431 ->
                                  ignore
                                    (Ojs.call x2429 "push"
                                       [|(Ojs.int_to_js x2431)|])
                              | None -> ());
                             (match x2428 with
                              | Some x2430 ->
                                  ignore
                                    (Ojs.call x2429 "push"
                                       [|(Ojs.int_to_js x2430)|])
                              | None -> ());
                             x2429))|])
    let (to_locale_string : t -> string) =
      fun (x2434 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2434) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x2435 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2435) "toString" [||])
    let (value_of : t -> t) =
      fun (x2436 : t) -> t_of_js (Ojs.call (t_to_js x2436) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x2437 : t) ->
        fun (x2438 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x2437) x2438)
    let (set : t -> int -> int -> unit) =
      fun (x2439 : t) ->
        fun (x2440 : int) ->
          fun (x2441 : int) ->
            Ojs.array_set (t_to_js x2439) x2440 (Ojs.int_to_js x2441)
    let (create : length:int -> t) =
      fun ~length:(x2442 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(Ojs.int_to_js x2442)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x2443 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int8Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x2445 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x2445) x2443)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x2447 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2448 : int option) ->
          fun ?length:(x2449 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int8Array")
                   (let x2450 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2450 "push" [|(ArrayBuffer.t_to_js x2447)|]);
                    (match x2448 with
                     | Some x2452 ->
                         ignore
                           (Ojs.call x2450 "push" [|(Ojs.int_to_js x2452)|])
                     | None -> ());
                    (match x2449 with
                     | Some x2451 ->
                         ignore
                           (Ojs.call x2450 "push" [|(Ojs.int_to_js x2451)|])
                     | None -> ());
                    x2450))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int8Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x2453 : int list) ->
        t_of_js
          (let x2456 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
           Ojs.call (Ojs.get_prop_ascii x2456 "of") "apply"
             [|x2456;((let x2454 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2455 : int) ->
                            ignore
                              (Ojs.call x2454 "push"
                                 [|(Ojs.int_to_js x2455)|])) x2453;
                       x2454))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x2457 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int8Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x2457)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x2459 : 'T Array.t) ->
        fun ~mapfn:(x2460 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x2461 : any option) ->
            fun () ->
              t_of_js
                (let x2467 = Ojs.get_prop_ascii Ojs.global "Int8Array" in
                 Ojs.call (Ojs.get_prop_ascii x2467 "from") "apply"
                   [|x2467;((let x2462 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2462 "push"
                                  [|(Array.t_to_js Obj.magic x2459)|]);
                             ignore
                               (Ojs.call x2462 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2464 : Ojs.t) ->
                                          fun (x2465 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x2460 ~v:(Obj.magic x2464)
                                                 ~k:(Ojs.int_of_js x2465))))|]);
                             (match x2461 with
                              | Some x2463 ->
                                  ignore
                                    (Ojs.call x2462 "push"
                                       [|(any_to_js x2463)|])
                              | None -> ());
                             x2462))|])
  end
module Int8ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2469 : Ojs.t) -> x2469
    and t_to_js : t -> Ojs.t = fun (x2468 : Ojs.t) -> x2468
    let (get_prototype : t -> Int8Array.t) =
      fun (x2470 : t) ->
        Int8Array.t_of_js (Ojs.get_prop_ascii (t_to_js x2470) "prototype")
    let (create : t -> length:int -> Int8Array.t) =
      fun (x2472 : t) ->
        fun ~length:(x2471 : int) ->
          Int8Array.t_of_js
            (Ojs.new_obj (t_to_js x2472) [|(Ojs.int_to_js x2471)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Int8Array.t) =
      fun (x2477 : t) ->
        fun ~array:(x2473 : (ArrayBuffer.t, int Array.t) union2) ->
          Int8Array.t_of_js
            (Ojs.new_obj (t_to_js x2477)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x2475 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x2475) x2473)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Int8Array.t)
      =
      fun (x2484 : t) ->
        fun ~buffer:(x2478 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2479 : int option) ->
            fun ?length:(x2480 : int option) ->
              fun () ->
                Int8Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2484)
                     (let x2481 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2481 "push"
                           [|(ArrayBuffer.t_to_js x2478)|]);
                      (match x2479 with
                       | Some x2483 ->
                           ignore
                             (Ojs.call x2481 "push" [|(Ojs.int_to_js x2483)|])
                       | None -> ());
                      (match x2480 with
                       | Some x2482 ->
                           ignore
                             (Ojs.call x2481 "push" [|(Ojs.int_to_js x2482)|])
                       | None -> ());
                      x2481))
    let (get_bytes_per_element : t -> int) =
      fun (x2485 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2485) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Int8Array.t) =
      fun (x2489 : t) ->
        fun (x2486 : int list) ->
          Int8Array.t_of_js
            (let x2490 = t_to_js x2489 in
             Ojs.call (Ojs.get_prop_ascii x2490 "of") "apply"
               [|x2490;((let x2487 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x2488 : int) ->
                              ignore
                                (Ojs.call x2487 "push"
                                   [|(Ojs.int_to_js x2488)|])) x2486;
                         x2487))|])
    let (from : t -> array:int Array.t -> Int8Array.t) =
      fun (x2493 : t) ->
        fun ~array:(x2491 : int Array.t) ->
          Int8Array.t_of_js
            (Ojs.call (t_to_js x2493) "from"
               [|(Array.t_to_js Ojs.int_to_js x2491)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> Int8Array.t)
      =
      fun (x2502 : t) ->
        fun ~array:(x2494 : 'T Array.t) ->
          fun ~mapfn:(x2495 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x2496 : any option) ->
              fun () ->
                Int8Array.t_of_js
                  (let x2503 = t_to_js x2502 in
                   Ojs.call (Ojs.get_prop_ascii x2503 "from") "apply"
                     [|x2503;((let x2497 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2497 "push"
                                    [|(Array.t_to_js Obj.magic x2494)|]);
                               ignore
                                 (Ojs.call x2497 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2499 : Ojs.t) ->
                                            fun (x2500 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2495 ~v:(Obj.magic x2499)
                                                   ~k:(Ojs.int_of_js x2500))))|]);
                               (match x2496 with
                                | Some x2498 ->
                                    ignore
                                      (Ojs.call x2497 "push"
                                         [|(any_to_js x2498)|])
                                | None -> ());
                               x2497))|])
  end
let (int8_array : Int8ArrayConstructor.t) =
  Int8ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Int8Array")
module Uint8Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2505 : Ojs.t) -> x2505
    and t_to_js : t -> Ojs.t = fun (x2504 : Ojs.t) -> x2504
    let (get_bytes_per_element : t -> int) =
      fun (x2506 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2506) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2507 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2507) "buffer")
    let (get_byte_length : t -> int) =
      fun (x2508 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2508) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x2509 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2509) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x2515 : t) ->
        fun ~target:(x2510 : int) ->
          fun ~start:(x2511 : int) ->
            fun ?end_:(x2512 : int option) ->
              fun () ->
                t_of_js
                  (let x2516 = t_to_js x2515 in
                   Ojs.call (Ojs.get_prop_ascii x2516 "copyWithin") "apply"
                     [|x2516;((let x2513 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2513 "push"
                                    [|(Ojs.int_to_js x2510)|]);
                               ignore
                                 (Ojs.call x2513 "push"
                                    [|(Ojs.int_to_js x2511)|]);
                               (match x2512 with
                                | Some x2514 ->
                                    ignore
                                      (Ojs.call x2513 "push"
                                         [|(Ojs.int_to_js x2514)|])
                                | None -> ());
                               x2513))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2524 : t) ->
        fun (x2517 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2518 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2525 = t_to_js x2524 in
                 Ojs.call (Ojs.get_prop_ascii x2525 "every") "apply"
                   [|x2525;((let x2519 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2519 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2521 : Ojs.t) ->
                                          fun (x2522 : Ojs.t) ->
                                            fun (x2523 : Ojs.t) ->
                                              unknown_to_js
                                                (x2517
                                                   ~value:(Ojs.int_of_js
                                                             x2521)
                                                   ~index:(Ojs.int_of_js
                                                             x2522)
                                                   ~array:(t_of_js x2523))))|]);
                             (match x2518 with
                              | Some x2520 ->
                                  ignore
                                    (Ojs.call x2519 "push"
                                       [|(any_to_js x2520)|])
                              | None -> ());
                             x2519))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2532 : t) ->
        fun ~value:(x2526 : int) ->
          fun ?start:(x2527 : int option) ->
            fun ?end_:(x2528 : int option) ->
              fun () ->
                t_of_js
                  (let x2533 = t_to_js x2532 in
                   Ojs.call (Ojs.get_prop_ascii x2533 "fill") "apply"
                     [|x2533;((let x2529 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2529 "push"
                                    [|(Ojs.int_to_js x2526)|]);
                               (match x2527 with
                                | Some x2531 ->
                                    ignore
                                      (Ojs.call x2529 "push"
                                         [|(Ojs.int_to_js x2531)|])
                                | None -> ());
                               (match x2528 with
                                | Some x2530 ->
                                    ignore
                                      (Ojs.call x2529 "push"
                                         [|(Ojs.int_to_js x2530)|])
                                | None -> ());
                               x2529))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2541 : t) ->
        fun (x2534 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x2535 : any option) ->
            fun () ->
              t_of_js
                (let x2542 = t_to_js x2541 in
                 Ojs.call (Ojs.get_prop_ascii x2542 "filter") "apply"
                   [|x2542;((let x2536 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2536 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2538 : Ojs.t) ->
                                          fun (x2539 : Ojs.t) ->
                                            fun (x2540 : Ojs.t) ->
                                              any_to_js
                                                (x2534
                                                   ~value:(Ojs.int_of_js
                                                             x2538)
                                                   ~index:(Ojs.int_of_js
                                                             x2539)
                                                   ~array:(t_of_js x2540))))|]);
                             (match x2535 with
                              | Some x2537 ->
                                  ignore
                                    (Ojs.call x2536 "push"
                                       [|(any_to_js x2537)|])
                              | None -> ());
                             x2536))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x2550 : t) ->
        fun (x2543 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2544 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x2551 = t_to_js x2550 in
                 Ojs.call (Ojs.get_prop_ascii x2551 "find") "apply"
                   [|x2551;((let x2545 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2545 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2547 : Ojs.t) ->
                                          fun (x2548 : Ojs.t) ->
                                            fun (x2549 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2543
                                                   ~value:(Ojs.int_of_js
                                                             x2547)
                                                   ~index:(Ojs.int_of_js
                                                             x2548)
                                                   ~obj:(t_of_js x2549))))|]);
                             (match x2544 with
                              | Some x2546 ->
                                  ignore
                                    (Ojs.call x2545 "push"
                                       [|(any_to_js x2546)|])
                              | None -> ());
                             x2545))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x2560 : t) ->
        fun (x2553 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2554 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x2561 = t_to_js x2560 in
                 Ojs.call (Ojs.get_prop_ascii x2561 "findIndex") "apply"
                   [|x2561;((let x2555 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2555 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2557 : Ojs.t) ->
                                          fun (x2558 : Ojs.t) ->
                                            fun (x2559 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2553
                                                   ~value:(Ojs.int_of_js
                                                             x2557)
                                                   ~index:(Ojs.int_of_js
                                                             x2558)
                                                   ~obj:(t_of_js x2559))))|]);
                             (match x2554 with
                              | Some x2556 ->
                                  ignore
                                    (Ojs.call x2555 "push"
                                       [|(any_to_js x2556)|])
                              | None -> ());
                             x2555))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x2569 : t) ->
        fun ~callbackfn:(x2562 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x2563 : any option) ->
            fun () ->
              ignore
                (let x2570 = t_to_js x2569 in
                 Ojs.call (Ojs.get_prop_ascii x2570 "forEach") "apply"
                   [|x2570;((let x2564 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2564 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2566 : Ojs.t) ->
                                          fun (x2567 : Ojs.t) ->
                                            fun (x2568 : Ojs.t) ->
                                              x2562
                                                ~value:(Ojs.int_of_js x2566)
                                                ~index:(Ojs.int_of_js x2567)
                                                ~array:(t_of_js x2568)))|]);
                             (match x2563 with
                              | Some x2565 ->
                                  ignore
                                    (Ojs.call x2564 "push"
                                       [|(any_to_js x2565)|])
                              | None -> ());
                             x2564))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x2575 : t) ->
        fun ~searchElement:(x2571 : int) ->
          fun ?fromIndex:(x2572 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2576 = t_to_js x2575 in
                 Ojs.call (Ojs.get_prop_ascii x2576 "indexOf") "apply"
                   [|x2576;((let x2573 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2573 "push"
                                  [|(Ojs.int_to_js x2571)|]);
                             (match x2572 with
                              | Some x2574 ->
                                  ignore
                                    (Ojs.call x2573 "push"
                                       [|(Ojs.int_to_js x2574)|])
                              | None -> ());
                             x2573))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x2580 : t) ->
        fun ?separator:(x2577 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x2581 = t_to_js x2580 in
               Ojs.call (Ojs.get_prop_ascii x2581 "join") "apply"
                 [|x2581;((let x2578 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2577 with
                            | Some x2579 ->
                                ignore
                                  (Ojs.call x2578 "push"
                                     [|(Ojs.string_to_js x2579)|])
                            | None -> ());
                           x2578))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2586 : t) ->
        fun ~searchElement:(x2582 : int) ->
          fun ?fromIndex:(x2583 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2587 = t_to_js x2586 in
                 Ojs.call (Ojs.get_prop_ascii x2587 "lastIndexOf") "apply"
                   [|x2587;((let x2584 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2584 "push"
                                  [|(Ojs.int_to_js x2582)|]);
                             (match x2583 with
                              | Some x2585 ->
                                  ignore
                                    (Ojs.call x2584 "push"
                                       [|(Ojs.int_to_js x2585)|])
                              | None -> ());
                             x2584))|])
    let (get_length : t -> int) =
      fun (x2588 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2588) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2596 : t) ->
        fun ~callbackfn:(x2589 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x2590 : any option) ->
            fun () ->
              t_of_js
                (let x2597 = t_to_js x2596 in
                 Ojs.call (Ojs.get_prop_ascii x2597 "map") "apply"
                   [|x2597;((let x2591 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2591 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2593 : Ojs.t) ->
                                          fun (x2594 : Ojs.t) ->
                                            fun (x2595 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2589
                                                   ~value:(Ojs.int_of_js
                                                             x2593)
                                                   ~index:(Ojs.int_of_js
                                                             x2594)
                                                   ~array:(t_of_js x2595))))|]);
                             (match x2590 with
                              | Some x2592 ->
                                  ignore
                                    (Ojs.call x2591 "push"
                                       [|(any_to_js x2592)|])
                              | None -> ());
                             x2591))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2603 : t) ->
        fun
          ~callbackfn:(x2598 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2603) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x2599 : Ojs.t) ->
                       fun (x2600 : Ojs.t) ->
                         fun (x2601 : Ojs.t) ->
                           fun (x2602 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2598 ~previousValue:(Ojs.int_of_js x2599)
                                  ~currentValue:(Ojs.int_of_js x2600)
                                  ~currentIndex:(Ojs.int_of_js x2601)
                                  ~array:(t_of_js x2602))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2610 : t) ->
        fun
          ~callbackfn:(x2604 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2609 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2610) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2605 : Ojs.t) ->
                         fun (x2606 : Ojs.t) ->
                           fun (x2607 : Ojs.t) ->
                             fun (x2608 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2604 ~previousValue:(Ojs.int_of_js x2605)
                                    ~currentValue:(Ojs.int_of_js x2606)
                                    ~currentIndex:(Ojs.int_of_js x2607)
                                    ~array:(t_of_js x2608))));(Ojs.int_to_js
                                                                 x2609)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2617 : t) ->
        fun
          ~callbackfn:(x2611 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2616 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2617) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2612 : Ojs.t) ->
                         fun (x2613 : Ojs.t) ->
                           fun (x2614 : Ojs.t) ->
                             fun (x2615 : Ojs.t) ->
                               Obj.magic
                                 (x2611 ~previousValue:(Obj.magic x2612)
                                    ~currentValue:(Ojs.int_of_js x2613)
                                    ~currentIndex:(Ojs.int_of_js x2614)
                                    ~array:(t_of_js x2615))));(Obj.magic
                                                                 x2616)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2623 : t) ->
        fun
          ~callbackfn:(x2618 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2623) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x2619 : Ojs.t) ->
                       fun (x2620 : Ojs.t) ->
                         fun (x2621 : Ojs.t) ->
                           fun (x2622 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2618 ~previousValue:(Ojs.int_of_js x2619)
                                  ~currentValue:(Ojs.int_of_js x2620)
                                  ~currentIndex:(Ojs.int_of_js x2621)
                                  ~array:(t_of_js x2622))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2630 : t) ->
        fun
          ~callbackfn:(x2624 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2629 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2630) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2625 : Ojs.t) ->
                         fun (x2626 : Ojs.t) ->
                           fun (x2627 : Ojs.t) ->
                             fun (x2628 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2624 ~previousValue:(Ojs.int_of_js x2625)
                                    ~currentValue:(Ojs.int_of_js x2626)
                                    ~currentIndex:(Ojs.int_of_js x2627)
                                    ~array:(t_of_js x2628))));(Ojs.int_to_js
                                                                 x2629)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2637 : t) ->
        fun
          ~callbackfn:(x2631 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2636 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2637) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2632 : Ojs.t) ->
                         fun (x2633 : Ojs.t) ->
                           fun (x2634 : Ojs.t) ->
                             fun (x2635 : Ojs.t) ->
                               Obj.magic
                                 (x2631 ~previousValue:(Obj.magic x2632)
                                    ~currentValue:(Ojs.int_of_js x2633)
                                    ~currentIndex:(Ojs.int_of_js x2634)
                                    ~array:(t_of_js x2635))));(Obj.magic
                                                                 x2636)|])
    let (reverse : t -> t) =
      fun (x2638 : t) -> t_of_js (Ojs.call (t_to_js x2638) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x2644 : t) ->
        fun ~array:(x2639 : int Array.t) ->
          fun ?offset:(x2640 : int option) ->
            fun () ->
              ignore
                (let x2645 = t_to_js x2644 in
                 Ojs.call (Ojs.get_prop_ascii x2645 "set") "apply"
                   [|x2645;((let x2641 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2641 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x2639)|]);
                             (match x2640 with
                              | Some x2642 ->
                                  ignore
                                    (Ojs.call x2641 "push"
                                       [|(Ojs.int_to_js x2642)|])
                              | None -> ());
                             x2641))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2651 : t) ->
        fun ?start:(x2646 : int option) ->
          fun ?end_:(x2647 : int option) ->
            fun () ->
              t_of_js
                (let x2652 = t_to_js x2651 in
                 Ojs.call (Ojs.get_prop_ascii x2652 "slice") "apply"
                   [|x2652;((let x2648 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2646 with
                              | Some x2650 ->
                                  ignore
                                    (Ojs.call x2648 "push"
                                       [|(Ojs.int_to_js x2650)|])
                              | None -> ());
                             (match x2647 with
                              | Some x2649 ->
                                  ignore
                                    (Ojs.call x2648 "push"
                                       [|(Ojs.int_to_js x2649)|])
                              | None -> ());
                             x2648))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2660 : t) ->
        fun (x2653 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2654 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2661 = t_to_js x2660 in
                 Ojs.call (Ojs.get_prop_ascii x2661 "some") "apply"
                   [|x2661;((let x2655 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2655 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2657 : Ojs.t) ->
                                          fun (x2658 : Ojs.t) ->
                                            fun (x2659 : Ojs.t) ->
                                              unknown_to_js
                                                (x2653
                                                   ~value:(Ojs.int_of_js
                                                             x2657)
                                                   ~index:(Ojs.int_of_js
                                                             x2658)
                                                   ~array:(t_of_js x2659))))|]);
                             (match x2654 with
                              | Some x2656 ->
                                  ignore
                                    (Ojs.call x2655 "push"
                                       [|(any_to_js x2656)|])
                              | None -> ());
                             x2655))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x2667 : t) ->
        fun ?compareFn:(x2662 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x2668 = t_to_js x2667 in
               Ojs.call (Ojs.get_prop_ascii x2668 "sort") "apply"
                 [|x2668;((let x2663 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2662 with
                            | Some x2664 ->
                                ignore
                                  (Ojs.call x2663 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2665 : Ojs.t) ->
                                             fun (x2666 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x2664
                                                    ~a:(Ojs.int_of_js x2665)
                                                    ~b:(Ojs.int_of_js x2666))))|])
                            | None -> ());
                           x2663))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x2674 : t) ->
        fun ?begin_:(x2669 : int option) ->
          fun ?end_:(x2670 : int option) ->
            fun () ->
              t_of_js
                (let x2675 = t_to_js x2674 in
                 Ojs.call (Ojs.get_prop_ascii x2675 "subarray") "apply"
                   [|x2675;((let x2671 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2669 with
                              | Some x2673 ->
                                  ignore
                                    (Ojs.call x2671 "push"
                                       [|(Ojs.int_to_js x2673)|])
                              | None -> ());
                             (match x2670 with
                              | Some x2672 ->
                                  ignore
                                    (Ojs.call x2671 "push"
                                       [|(Ojs.int_to_js x2672)|])
                              | None -> ());
                             x2671))|])
    let (to_locale_string : t -> string) =
      fun (x2676 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2676) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x2677 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2677) "toString" [||])
    let (value_of : t -> t) =
      fun (x2678 : t) -> t_of_js (Ojs.call (t_to_js x2678) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x2679 : t) ->
        fun (x2680 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x2679) x2680)
    let (set : t -> int -> int -> unit) =
      fun (x2681 : t) ->
        fun (x2682 : int) ->
          fun (x2683 : int) ->
            Ojs.array_set (t_to_js x2681) x2682 (Ojs.int_to_js x2683)
    let (create : length:int -> t) =
      fun ~length:(x2684 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(Ojs.int_to_js x2684)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x2685 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x2687 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x2687) x2685)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x2689 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2690 : int option) ->
          fun ?length:(x2691 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Uint8Array")
                   (let x2692 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2692 "push" [|(ArrayBuffer.t_to_js x2689)|]);
                    (match x2690 with
                     | Some x2694 ->
                         ignore
                           (Ojs.call x2692 "push" [|(Ojs.int_to_js x2694)|])
                     | None -> ());
                    (match x2691 with
                     | Some x2693 ->
                         ignore
                           (Ojs.call x2692 "push" [|(Ojs.int_to_js x2693)|])
                     | None -> ());
                    x2692))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint8Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x2695 : int list) ->
        t_of_js
          (let x2698 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
           Ojs.call (Ojs.get_prop_ascii x2698 "of") "apply"
             [|x2698;((let x2696 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2697 : int) ->
                            ignore
                              (Ojs.call x2696 "push"
                                 [|(Ojs.int_to_js x2697)|])) x2695;
                       x2696))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x2699 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint8Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x2699)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x2701 : 'T Array.t) ->
        fun ~mapfn:(x2702 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x2703 : any option) ->
            fun () ->
              t_of_js
                (let x2709 = Ojs.get_prop_ascii Ojs.global "Uint8Array" in
                 Ojs.call (Ojs.get_prop_ascii x2709 "from") "apply"
                   [|x2709;((let x2704 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2704 "push"
                                  [|(Array.t_to_js Obj.magic x2701)|]);
                             ignore
                               (Ojs.call x2704 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2706 : Ojs.t) ->
                                          fun (x2707 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x2702 ~v:(Obj.magic x2706)
                                                 ~k:(Ojs.int_of_js x2707))))|]);
                             (match x2703 with
                              | Some x2705 ->
                                  ignore
                                    (Ojs.call x2704 "push"
                                       [|(any_to_js x2705)|])
                              | None -> ());
                             x2704))|])
  end
module Uint8ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2711 : Ojs.t) -> x2711
    and t_to_js : t -> Ojs.t = fun (x2710 : Ojs.t) -> x2710
    let (get_prototype : t -> Uint8Array.t) =
      fun (x2712 : t) ->
        Uint8Array.t_of_js (Ojs.get_prop_ascii (t_to_js x2712) "prototype")
    let (create : t -> length:int -> Uint8Array.t) =
      fun (x2714 : t) ->
        fun ~length:(x2713 : int) ->
          Uint8Array.t_of_js
            (Ojs.new_obj (t_to_js x2714) [|(Ojs.int_to_js x2713)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint8Array.t) =
      fun (x2719 : t) ->
        fun ~array:(x2715 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint8Array.t_of_js
            (Ojs.new_obj (t_to_js x2719)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x2717 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x2717) x2715)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint8Array.t)
      =
      fun (x2726 : t) ->
        fun ~buffer:(x2720 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2721 : int option) ->
            fun ?length:(x2722 : int option) ->
              fun () ->
                Uint8Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2726)
                     (let x2723 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2723 "push"
                           [|(ArrayBuffer.t_to_js x2720)|]);
                      (match x2721 with
                       | Some x2725 ->
                           ignore
                             (Ojs.call x2723 "push" [|(Ojs.int_to_js x2725)|])
                       | None -> ());
                      (match x2722 with
                       | Some x2724 ->
                           ignore
                             (Ojs.call x2723 "push" [|(Ojs.int_to_js x2724)|])
                       | None -> ());
                      x2723))
    let (get_bytes_per_element : t -> int) =
      fun (x2727 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2727) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint8Array.t) =
      fun (x2731 : t) ->
        fun (x2728 : int list) ->
          Uint8Array.t_of_js
            (let x2732 = t_to_js x2731 in
             Ojs.call (Ojs.get_prop_ascii x2732 "of") "apply"
               [|x2732;((let x2729 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x2730 : int) ->
                              ignore
                                (Ojs.call x2729 "push"
                                   [|(Ojs.int_to_js x2730)|])) x2728;
                         x2729))|])
    let (from : t -> array:int Array.t -> Uint8Array.t) =
      fun (x2735 : t) ->
        fun ~array:(x2733 : int Array.t) ->
          Uint8Array.t_of_js
            (Ojs.call (t_to_js x2735) "from"
               [|(Array.t_to_js Ojs.int_to_js x2733)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint8Array.t)
      =
      fun (x2744 : t) ->
        fun ~array:(x2736 : 'T Array.t) ->
          fun ~mapfn:(x2737 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x2738 : any option) ->
              fun () ->
                Uint8Array.t_of_js
                  (let x2745 = t_to_js x2744 in
                   Ojs.call (Ojs.get_prop_ascii x2745 "from") "apply"
                     [|x2745;((let x2739 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2739 "push"
                                    [|(Array.t_to_js Obj.magic x2736)|]);
                               ignore
                                 (Ojs.call x2739 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2741 : Ojs.t) ->
                                            fun (x2742 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2737 ~v:(Obj.magic x2741)
                                                   ~k:(Ojs.int_of_js x2742))))|]);
                               (match x2738 with
                                | Some x2740 ->
                                    ignore
                                      (Ojs.call x2739 "push"
                                         [|(any_to_js x2740)|])
                                | None -> ());
                               x2739))|])
  end
let (uint8_array : Uint8ArrayConstructor.t) =
  Uint8ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Uint8Array")
module Uint8ClampedArray =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2747 : Ojs.t) -> x2747
    and t_to_js : t -> Ojs.t = fun (x2746 : Ojs.t) -> x2746
    let (get_bytes_per_element : t -> int) =
      fun (x2748 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2748) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2749 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2749) "buffer")
    let (get_byte_length : t -> int) =
      fun (x2750 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2750) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x2751 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2751) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x2757 : t) ->
        fun ~target:(x2752 : int) ->
          fun ~start:(x2753 : int) ->
            fun ?end_:(x2754 : int option) ->
              fun () ->
                t_of_js
                  (let x2758 = t_to_js x2757 in
                   Ojs.call (Ojs.get_prop_ascii x2758 "copyWithin") "apply"
                     [|x2758;((let x2755 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2755 "push"
                                    [|(Ojs.int_to_js x2752)|]);
                               ignore
                                 (Ojs.call x2755 "push"
                                    [|(Ojs.int_to_js x2753)|]);
                               (match x2754 with
                                | Some x2756 ->
                                    ignore
                                      (Ojs.call x2755 "push"
                                         [|(Ojs.int_to_js x2756)|])
                                | None -> ());
                               x2755))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2766 : t) ->
        fun (x2759 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2760 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2767 = t_to_js x2766 in
                 Ojs.call (Ojs.get_prop_ascii x2767 "every") "apply"
                   [|x2767;((let x2761 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2761 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2763 : Ojs.t) ->
                                          fun (x2764 : Ojs.t) ->
                                            fun (x2765 : Ojs.t) ->
                                              unknown_to_js
                                                (x2759
                                                   ~value:(Ojs.int_of_js
                                                             x2763)
                                                   ~index:(Ojs.int_of_js
                                                             x2764)
                                                   ~array:(t_of_js x2765))))|]);
                             (match x2760 with
                              | Some x2762 ->
                                  ignore
                                    (Ojs.call x2761 "push"
                                       [|(any_to_js x2762)|])
                              | None -> ());
                             x2761))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2774 : t) ->
        fun ~value:(x2768 : int) ->
          fun ?start:(x2769 : int option) ->
            fun ?end_:(x2770 : int option) ->
              fun () ->
                t_of_js
                  (let x2775 = t_to_js x2774 in
                   Ojs.call (Ojs.get_prop_ascii x2775 "fill") "apply"
                     [|x2775;((let x2771 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2771 "push"
                                    [|(Ojs.int_to_js x2768)|]);
                               (match x2769 with
                                | Some x2773 ->
                                    ignore
                                      (Ojs.call x2771 "push"
                                         [|(Ojs.int_to_js x2773)|])
                                | None -> ());
                               (match x2770 with
                                | Some x2772 ->
                                    ignore
                                      (Ojs.call x2771 "push"
                                         [|(Ojs.int_to_js x2772)|])
                                | None -> ());
                               x2771))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2783 : t) ->
        fun (x2776 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x2777 : any option) ->
            fun () ->
              t_of_js
                (let x2784 = t_to_js x2783 in
                 Ojs.call (Ojs.get_prop_ascii x2784 "filter") "apply"
                   [|x2784;((let x2778 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2778 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2780 : Ojs.t) ->
                                          fun (x2781 : Ojs.t) ->
                                            fun (x2782 : Ojs.t) ->
                                              any_to_js
                                                (x2776
                                                   ~value:(Ojs.int_of_js
                                                             x2780)
                                                   ~index:(Ojs.int_of_js
                                                             x2781)
                                                   ~array:(t_of_js x2782))))|]);
                             (match x2777 with
                              | Some x2779 ->
                                  ignore
                                    (Ojs.call x2778 "push"
                                       [|(any_to_js x2779)|])
                              | None -> ());
                             x2778))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x2792 : t) ->
        fun (x2785 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2786 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x2793 = t_to_js x2792 in
                 Ojs.call (Ojs.get_prop_ascii x2793 "find") "apply"
                   [|x2793;((let x2787 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2787 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2789 : Ojs.t) ->
                                          fun (x2790 : Ojs.t) ->
                                            fun (x2791 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2785
                                                   ~value:(Ojs.int_of_js
                                                             x2789)
                                                   ~index:(Ojs.int_of_js
                                                             x2790)
                                                   ~obj:(t_of_js x2791))))|]);
                             (match x2786 with
                              | Some x2788 ->
                                  ignore
                                    (Ojs.call x2787 "push"
                                       [|(any_to_js x2788)|])
                              | None -> ());
                             x2787))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x2802 : t) ->
        fun (x2795 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x2796 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x2803 = t_to_js x2802 in
                 Ojs.call (Ojs.get_prop_ascii x2803 "findIndex") "apply"
                   [|x2803;((let x2797 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2797 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2799 : Ojs.t) ->
                                          fun (x2800 : Ojs.t) ->
                                            fun (x2801 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x2795
                                                   ~value:(Ojs.int_of_js
                                                             x2799)
                                                   ~index:(Ojs.int_of_js
                                                             x2800)
                                                   ~obj:(t_of_js x2801))))|]);
                             (match x2796 with
                              | Some x2798 ->
                                  ignore
                                    (Ojs.call x2797 "push"
                                       [|(any_to_js x2798)|])
                              | None -> ());
                             x2797))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x2811 : t) ->
        fun ~callbackfn:(x2804 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x2805 : any option) ->
            fun () ->
              ignore
                (let x2812 = t_to_js x2811 in
                 Ojs.call (Ojs.get_prop_ascii x2812 "forEach") "apply"
                   [|x2812;((let x2806 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2806 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2808 : Ojs.t) ->
                                          fun (x2809 : Ojs.t) ->
                                            fun (x2810 : Ojs.t) ->
                                              x2804
                                                ~value:(Ojs.int_of_js x2808)
                                                ~index:(Ojs.int_of_js x2809)
                                                ~array:(t_of_js x2810)))|]);
                             (match x2805 with
                              | Some x2807 ->
                                  ignore
                                    (Ojs.call x2806 "push"
                                       [|(any_to_js x2807)|])
                              | None -> ());
                             x2806))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x2817 : t) ->
        fun ~searchElement:(x2813 : int) ->
          fun ?fromIndex:(x2814 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2818 = t_to_js x2817 in
                 Ojs.call (Ojs.get_prop_ascii x2818 "indexOf") "apply"
                   [|x2818;((let x2815 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2815 "push"
                                  [|(Ojs.int_to_js x2813)|]);
                             (match x2814 with
                              | Some x2816 ->
                                  ignore
                                    (Ojs.call x2815 "push"
                                       [|(Ojs.int_to_js x2816)|])
                              | None -> ());
                             x2815))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x2822 : t) ->
        fun ?separator:(x2819 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x2823 = t_to_js x2822 in
               Ojs.call (Ojs.get_prop_ascii x2823 "join") "apply"
                 [|x2823;((let x2820 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2819 with
                            | Some x2821 ->
                                ignore
                                  (Ojs.call x2820 "push"
                                     [|(Ojs.string_to_js x2821)|])
                            | None -> ());
                           x2820))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x2828 : t) ->
        fun ~searchElement:(x2824 : int) ->
          fun ?fromIndex:(x2825 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2829 = t_to_js x2828 in
                 Ojs.call (Ojs.get_prop_ascii x2829 "lastIndexOf") "apply"
                   [|x2829;((let x2826 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2826 "push"
                                  [|(Ojs.int_to_js x2824)|]);
                             (match x2825 with
                              | Some x2827 ->
                                  ignore
                                    (Ojs.call x2826 "push"
                                       [|(Ojs.int_to_js x2827)|])
                              | None -> ());
                             x2826))|])
    let (get_length : t -> int) =
      fun (x2830 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2830) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x2838 : t) ->
        fun ~callbackfn:(x2831 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x2832 : any option) ->
            fun () ->
              t_of_js
                (let x2839 = t_to_js x2838 in
                 Ojs.call (Ojs.get_prop_ascii x2839 "map") "apply"
                   [|x2839;((let x2833 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2833 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2835 : Ojs.t) ->
                                          fun (x2836 : Ojs.t) ->
                                            fun (x2837 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2831
                                                   ~value:(Ojs.int_of_js
                                                             x2835)
                                                   ~index:(Ojs.int_of_js
                                                             x2836)
                                                   ~array:(t_of_js x2837))))|]);
                             (match x2832 with
                              | Some x2834 ->
                                  ignore
                                    (Ojs.call x2833 "push"
                                       [|(any_to_js x2834)|])
                              | None -> ());
                             x2833))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2845 : t) ->
        fun
          ~callbackfn:(x2840 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2845) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x2841 : Ojs.t) ->
                       fun (x2842 : Ojs.t) ->
                         fun (x2843 : Ojs.t) ->
                           fun (x2844 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2840 ~previousValue:(Ojs.int_of_js x2841)
                                  ~currentValue:(Ojs.int_of_js x2842)
                                  ~currentIndex:(Ojs.int_of_js x2843)
                                  ~array:(t_of_js x2844))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2852 : t) ->
        fun
          ~callbackfn:(x2846 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2851 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2852) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2847 : Ojs.t) ->
                         fun (x2848 : Ojs.t) ->
                           fun (x2849 : Ojs.t) ->
                             fun (x2850 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2846 ~previousValue:(Ojs.int_of_js x2847)
                                    ~currentValue:(Ojs.int_of_js x2848)
                                    ~currentIndex:(Ojs.int_of_js x2849)
                                    ~array:(t_of_js x2850))));(Ojs.int_to_js
                                                                 x2851)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2859 : t) ->
        fun
          ~callbackfn:(x2853 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2858 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2859) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x2854 : Ojs.t) ->
                         fun (x2855 : Ojs.t) ->
                           fun (x2856 : Ojs.t) ->
                             fun (x2857 : Ojs.t) ->
                               Obj.magic
                                 (x2853 ~previousValue:(Obj.magic x2854)
                                    ~currentValue:(Ojs.int_of_js x2855)
                                    ~currentIndex:(Ojs.int_of_js x2856)
                                    ~array:(t_of_js x2857))));(Obj.magic
                                                                 x2858)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x2865 : t) ->
        fun
          ~callbackfn:(x2860 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x2865) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x2861 : Ojs.t) ->
                       fun (x2862 : Ojs.t) ->
                         fun (x2863 : Ojs.t) ->
                           fun (x2864 : Ojs.t) ->
                             Ojs.int_to_js
                               (x2860 ~previousValue:(Ojs.int_of_js x2861)
                                  ~currentValue:(Ojs.int_of_js x2862)
                                  ~currentIndex:(Ojs.int_of_js x2863)
                                  ~array:(t_of_js x2864))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x2872 : t) ->
        fun
          ~callbackfn:(x2866 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x2871 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x2872) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2867 : Ojs.t) ->
                         fun (x2868 : Ojs.t) ->
                           fun (x2869 : Ojs.t) ->
                             fun (x2870 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x2866 ~previousValue:(Ojs.int_of_js x2867)
                                    ~currentValue:(Ojs.int_of_js x2868)
                                    ~currentIndex:(Ojs.int_of_js x2869)
                                    ~array:(t_of_js x2870))));(Ojs.int_to_js
                                                                 x2871)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x2879 : t) ->
        fun
          ~callbackfn:(x2873 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x2878 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x2879) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x2874 : Ojs.t) ->
                         fun (x2875 : Ojs.t) ->
                           fun (x2876 : Ojs.t) ->
                             fun (x2877 : Ojs.t) ->
                               Obj.magic
                                 (x2873 ~previousValue:(Obj.magic x2874)
                                    ~currentValue:(Ojs.int_of_js x2875)
                                    ~currentIndex:(Ojs.int_of_js x2876)
                                    ~array:(t_of_js x2877))));(Obj.magic
                                                                 x2878)|])
    let (reverse : t -> t) =
      fun (x2880 : t) -> t_of_js (Ojs.call (t_to_js x2880) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x2886 : t) ->
        fun ~array:(x2881 : int Array.t) ->
          fun ?offset:(x2882 : int option) ->
            fun () ->
              ignore
                (let x2887 = t_to_js x2886 in
                 Ojs.call (Ojs.get_prop_ascii x2887 "set") "apply"
                   [|x2887;((let x2883 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2883 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x2881)|]);
                             (match x2882 with
                              | Some x2884 ->
                                  ignore
                                    (Ojs.call x2883 "push"
                                       [|(Ojs.int_to_js x2884)|])
                              | None -> ());
                             x2883))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x2893 : t) ->
        fun ?start:(x2888 : int option) ->
          fun ?end_:(x2889 : int option) ->
            fun () ->
              t_of_js
                (let x2894 = t_to_js x2893 in
                 Ojs.call (Ojs.get_prop_ascii x2894 "slice") "apply"
                   [|x2894;((let x2890 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2888 with
                              | Some x2892 ->
                                  ignore
                                    (Ojs.call x2890 "push"
                                       [|(Ojs.int_to_js x2892)|])
                              | None -> ());
                             (match x2889 with
                              | Some x2891 ->
                                  ignore
                                    (Ojs.call x2890 "push"
                                       [|(Ojs.int_to_js x2891)|])
                              | None -> ());
                             x2890))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x2902 : t) ->
        fun (x2895 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x2896 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x2903 = t_to_js x2902 in
                 Ojs.call (Ojs.get_prop_ascii x2903 "some") "apply"
                   [|x2903;((let x2897 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2897 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2899 : Ojs.t) ->
                                          fun (x2900 : Ojs.t) ->
                                            fun (x2901 : Ojs.t) ->
                                              unknown_to_js
                                                (x2895
                                                   ~value:(Ojs.int_of_js
                                                             x2899)
                                                   ~index:(Ojs.int_of_js
                                                             x2900)
                                                   ~array:(t_of_js x2901))))|]);
                             (match x2896 with
                              | Some x2898 ->
                                  ignore
                                    (Ojs.call x2897 "push"
                                       [|(any_to_js x2898)|])
                              | None -> ());
                             x2897))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x2909 : t) ->
        fun ?compareFn:(x2904 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x2910 = t_to_js x2909 in
               Ojs.call (Ojs.get_prop_ascii x2910 "sort") "apply"
                 [|x2910;((let x2905 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2904 with
                            | Some x2906 ->
                                ignore
                                  (Ojs.call x2905 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2907 : Ojs.t) ->
                                             fun (x2908 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x2906
                                                    ~a:(Ojs.int_of_js x2907)
                                                    ~b:(Ojs.int_of_js x2908))))|])
                            | None -> ());
                           x2905))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x2916 : t) ->
        fun ?begin_:(x2911 : int option) ->
          fun ?end_:(x2912 : int option) ->
            fun () ->
              t_of_js
                (let x2917 = t_to_js x2916 in
                 Ojs.call (Ojs.get_prop_ascii x2917 "subarray") "apply"
                   [|x2917;((let x2913 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x2911 with
                              | Some x2915 ->
                                  ignore
                                    (Ojs.call x2913 "push"
                                       [|(Ojs.int_to_js x2915)|])
                              | None -> ());
                             (match x2912 with
                              | Some x2914 ->
                                  ignore
                                    (Ojs.call x2913 "push"
                                       [|(Ojs.int_to_js x2914)|])
                              | None -> ());
                             x2913))|])
    let (to_locale_string : t -> string) =
      fun (x2918 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2918) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x2919 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x2919) "toString" [||])
    let (value_of : t -> t) =
      fun (x2920 : t) -> t_of_js (Ojs.call (t_to_js x2920) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x2921 : t) ->
        fun (x2922 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x2921) x2922)
    let (set : t -> int -> int -> unit) =
      fun (x2923 : t) ->
        fun (x2924 : int) ->
          fun (x2925 : int) ->
            Ojs.array_set (t_to_js x2923) x2924 (Ojs.int_to_js x2925)
    let (create : length:int -> t) =
      fun ~length:(x2926 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(Ojs.int_to_js x2926)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x2927 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x2929 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x2929) x2927)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x2931 : ArrayBuffer.t) ->
        fun ?byteOffset:(x2932 : int option) ->
          fun ?length:(x2933 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
                   (let x2934 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x2934 "push" [|(ArrayBuffer.t_to_js x2931)|]);
                    (match x2932 with
                     | Some x2936 ->
                         ignore
                           (Ojs.call x2934 "push" [|(Ojs.int_to_js x2936)|])
                     | None -> ());
                    (match x2933 with
                     | Some x2935 ->
                         ignore
                           (Ojs.call x2934 "push" [|(Ojs.int_to_js x2935)|])
                     | None -> ());
                    x2934))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x2937 : int list) ->
        t_of_js
          (let x2940 = Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
           Ojs.call (Ojs.get_prop_ascii x2940 "of") "apply"
             [|x2940;((let x2938 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2939 : int) ->
                            ignore
                              (Ojs.call x2938 "push"
                                 [|(Ojs.int_to_js x2939)|])) x2937;
                       x2938))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x2941 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
             "from" [|(Array.t_to_js Ojs.int_to_js x2941)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x2943 : 'T Array.t) ->
        fun ~mapfn:(x2944 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x2945 : any option) ->
            fun () ->
              t_of_js
                (let x2951 =
                   Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray" in
                 Ojs.call (Ojs.get_prop_ascii x2951 "from") "apply"
                   [|x2951;((let x2946 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2946 "push"
                                  [|(Array.t_to_js Obj.magic x2943)|]);
                             ignore
                               (Ojs.call x2946 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2948 : Ojs.t) ->
                                          fun (x2949 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x2944 ~v:(Obj.magic x2948)
                                                 ~k:(Ojs.int_of_js x2949))))|]);
                             (match x2945 with
                              | Some x2947 ->
                                  ignore
                                    (Ojs.call x2946 "push"
                                       [|(any_to_js x2947)|])
                              | None -> ());
                             x2946))|])
  end
module Uint8ClampedArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2953 : Ojs.t) -> x2953
    and t_to_js : t -> Ojs.t = fun (x2952 : Ojs.t) -> x2952
    let (get_prototype : t -> Uint8ClampedArray.t) =
      fun (x2954 : t) ->
        Uint8ClampedArray.t_of_js
          (Ojs.get_prop_ascii (t_to_js x2954) "prototype")
    let (create : t -> length:int -> Uint8ClampedArray.t) =
      fun (x2956 : t) ->
        fun ~length:(x2955 : int) ->
          Uint8ClampedArray.t_of_js
            (Ojs.new_obj (t_to_js x2956) [|(Ojs.int_to_js x2955)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint8ClampedArray.t)
      =
      fun (x2961 : t) ->
        fun ~array:(x2957 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint8ClampedArray.t_of_js
            (Ojs.new_obj (t_to_js x2961)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x2959 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x2959) x2957)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint8ClampedArray.t)
      =
      fun (x2968 : t) ->
        fun ~buffer:(x2962 : ArrayBuffer.t) ->
          fun ?byteOffset:(x2963 : int option) ->
            fun ?length:(x2964 : int option) ->
              fun () ->
                Uint8ClampedArray.t_of_js
                  (Ojs.new_obj_arr (t_to_js x2968)
                     (let x2965 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x2965 "push"
                           [|(ArrayBuffer.t_to_js x2962)|]);
                      (match x2963 with
                       | Some x2967 ->
                           ignore
                             (Ojs.call x2965 "push" [|(Ojs.int_to_js x2967)|])
                       | None -> ());
                      (match x2964 with
                       | Some x2966 ->
                           ignore
                             (Ojs.call x2965 "push" [|(Ojs.int_to_js x2966)|])
                       | None -> ());
                      x2965))
    let (get_bytes_per_element : t -> int) =
      fun (x2969 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2969) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint8ClampedArray.t) =
      fun (x2973 : t) ->
        fun (x2970 : int list) ->
          Uint8ClampedArray.t_of_js
            (let x2974 = t_to_js x2973 in
             Ojs.call (Ojs.get_prop_ascii x2974 "of") "apply"
               [|x2974;((let x2971 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x2972 : int) ->
                              ignore
                                (Ojs.call x2971 "push"
                                   [|(Ojs.int_to_js x2972)|])) x2970;
                         x2971))|])
    let (from : t -> array:int Array.t -> Uint8ClampedArray.t) =
      fun (x2977 : t) ->
        fun ~array:(x2975 : int Array.t) ->
          Uint8ClampedArray.t_of_js
            (Ojs.call (t_to_js x2977) "from"
               [|(Array.t_to_js Ojs.int_to_js x2975)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint8ClampedArray.t)
      =
      fun (x2986 : t) ->
        fun ~array:(x2978 : 'T Array.t) ->
          fun ~mapfn:(x2979 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x2980 : any option) ->
              fun () ->
                Uint8ClampedArray.t_of_js
                  (let x2987 = t_to_js x2986 in
                   Ojs.call (Ojs.get_prop_ascii x2987 "from") "apply"
                     [|x2987;((let x2981 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2981 "push"
                                    [|(Array.t_to_js Obj.magic x2978)|]);
                               ignore
                                 (Ojs.call x2981 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x2983 : Ojs.t) ->
                                            fun (x2984 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x2979 ~v:(Obj.magic x2983)
                                                   ~k:(Ojs.int_of_js x2984))))|]);
                               (match x2980 with
                                | Some x2982 ->
                                    ignore
                                      (Ojs.call x2981 "push"
                                         [|(any_to_js x2982)|])
                                | None -> ());
                               x2981))|])
  end
let (uint8_clamped_array : Uint8ClampedArrayConstructor.t) =
  Uint8ClampedArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Uint8ClampedArray")
module Int16Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2989 : Ojs.t) -> x2989
    and t_to_js : t -> Ojs.t = fun (x2988 : Ojs.t) -> x2988
    let (get_bytes_per_element : t -> int) =
      fun (x2990 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x2990) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x2991 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x2991) "buffer")
    let (get_byte_length : t -> int) =
      fun (x2992 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2992) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x2993 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2993) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x2999 : t) ->
        fun ~target:(x2994 : int) ->
          fun ~start:(x2995 : int) ->
            fun ?end_:(x2996 : int option) ->
              fun () ->
                t_of_js
                  (let x3000 = t_to_js x2999 in
                   Ojs.call (Ojs.get_prop_ascii x3000 "copyWithin") "apply"
                     [|x3000;((let x2997 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2997 "push"
                                    [|(Ojs.int_to_js x2994)|]);
                               ignore
                                 (Ojs.call x2997 "push"
                                    [|(Ojs.int_to_js x2995)|]);
                               (match x2996 with
                                | Some x2998 ->
                                    ignore
                                      (Ojs.call x2997 "push"
                                         [|(Ojs.int_to_js x2998)|])
                                | None -> ());
                               x2997))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3008 : t) ->
        fun (x3001 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3002 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3009 = t_to_js x3008 in
                 Ojs.call (Ojs.get_prop_ascii x3009 "every") "apply"
                   [|x3009;((let x3003 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3003 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3005 : Ojs.t) ->
                                          fun (x3006 : Ojs.t) ->
                                            fun (x3007 : Ojs.t) ->
                                              unknown_to_js
                                                (x3001
                                                   ~value:(Ojs.int_of_js
                                                             x3005)
                                                   ~index:(Ojs.int_of_js
                                                             x3006)
                                                   ~array:(t_of_js x3007))))|]);
                             (match x3002 with
                              | Some x3004 ->
                                  ignore
                                    (Ojs.call x3003 "push"
                                       [|(any_to_js x3004)|])
                              | None -> ());
                             x3003))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3016 : t) ->
        fun ~value:(x3010 : int) ->
          fun ?start:(x3011 : int option) ->
            fun ?end_:(x3012 : int option) ->
              fun () ->
                t_of_js
                  (let x3017 = t_to_js x3016 in
                   Ojs.call (Ojs.get_prop_ascii x3017 "fill") "apply"
                     [|x3017;((let x3013 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3013 "push"
                                    [|(Ojs.int_to_js x3010)|]);
                               (match x3011 with
                                | Some x3015 ->
                                    ignore
                                      (Ojs.call x3013 "push"
                                         [|(Ojs.int_to_js x3015)|])
                                | None -> ());
                               (match x3012 with
                                | Some x3014 ->
                                    ignore
                                      (Ojs.call x3013 "push"
                                         [|(Ojs.int_to_js x3014)|])
                                | None -> ());
                               x3013))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3025 : t) ->
        fun (x3018 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3019 : any option) ->
            fun () ->
              t_of_js
                (let x3026 = t_to_js x3025 in
                 Ojs.call (Ojs.get_prop_ascii x3026 "filter") "apply"
                   [|x3026;((let x3020 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3020 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3022 : Ojs.t) ->
                                          fun (x3023 : Ojs.t) ->
                                            fun (x3024 : Ojs.t) ->
                                              any_to_js
                                                (x3018
                                                   ~value:(Ojs.int_of_js
                                                             x3022)
                                                   ~index:(Ojs.int_of_js
                                                             x3023)
                                                   ~array:(t_of_js x3024))))|]);
                             (match x3019 with
                              | Some x3021 ->
                                  ignore
                                    (Ojs.call x3020 "push"
                                       [|(any_to_js x3021)|])
                              | None -> ());
                             x3020))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3034 : t) ->
        fun (x3027 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3028 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3035 = t_to_js x3034 in
                 Ojs.call (Ojs.get_prop_ascii x3035 "find") "apply"
                   [|x3035;((let x3029 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3029 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3031 : Ojs.t) ->
                                          fun (x3032 : Ojs.t) ->
                                            fun (x3033 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3027
                                                   ~value:(Ojs.int_of_js
                                                             x3031)
                                                   ~index:(Ojs.int_of_js
                                                             x3032)
                                                   ~obj:(t_of_js x3033))))|]);
                             (match x3028 with
                              | Some x3030 ->
                                  ignore
                                    (Ojs.call x3029 "push"
                                       [|(any_to_js x3030)|])
                              | None -> ());
                             x3029))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3044 : t) ->
        fun (x3037 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3038 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3045 = t_to_js x3044 in
                 Ojs.call (Ojs.get_prop_ascii x3045 "findIndex") "apply"
                   [|x3045;((let x3039 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3039 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3041 : Ojs.t) ->
                                          fun (x3042 : Ojs.t) ->
                                            fun (x3043 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3037
                                                   ~value:(Ojs.int_of_js
                                                             x3041)
                                                   ~index:(Ojs.int_of_js
                                                             x3042)
                                                   ~obj:(t_of_js x3043))))|]);
                             (match x3038 with
                              | Some x3040 ->
                                  ignore
                                    (Ojs.call x3039 "push"
                                       [|(any_to_js x3040)|])
                              | None -> ());
                             x3039))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3053 : t) ->
        fun ~callbackfn:(x3046 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3047 : any option) ->
            fun () ->
              ignore
                (let x3054 = t_to_js x3053 in
                 Ojs.call (Ojs.get_prop_ascii x3054 "forEach") "apply"
                   [|x3054;((let x3048 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3048 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3050 : Ojs.t) ->
                                          fun (x3051 : Ojs.t) ->
                                            fun (x3052 : Ojs.t) ->
                                              x3046
                                                ~value:(Ojs.int_of_js x3050)
                                                ~index:(Ojs.int_of_js x3051)
                                                ~array:(t_of_js x3052)))|]);
                             (match x3047 with
                              | Some x3049 ->
                                  ignore
                                    (Ojs.call x3048 "push"
                                       [|(any_to_js x3049)|])
                              | None -> ());
                             x3048))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x3059 : t) ->
        fun ~searchElement:(x3055 : int) ->
          fun ?fromIndex:(x3056 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3060 = t_to_js x3059 in
                 Ojs.call (Ojs.get_prop_ascii x3060 "indexOf") "apply"
                   [|x3060;((let x3057 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3057 "push"
                                  [|(Ojs.int_to_js x3055)|]);
                             (match x3056 with
                              | Some x3058 ->
                                  ignore
                                    (Ojs.call x3057 "push"
                                       [|(Ojs.int_to_js x3058)|])
                              | None -> ());
                             x3057))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3064 : t) ->
        fun ?separator:(x3061 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3065 = t_to_js x3064 in
               Ojs.call (Ojs.get_prop_ascii x3065 "join") "apply"
                 [|x3065;((let x3062 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3061 with
                            | Some x3063 ->
                                ignore
                                  (Ojs.call x3062 "push"
                                     [|(Ojs.string_to_js x3063)|])
                            | None -> ());
                           x3062))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3070 : t) ->
        fun ~searchElement:(x3066 : int) ->
          fun ?fromIndex:(x3067 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3071 = t_to_js x3070 in
                 Ojs.call (Ojs.get_prop_ascii x3071 "lastIndexOf") "apply"
                   [|x3071;((let x3068 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3068 "push"
                                  [|(Ojs.int_to_js x3066)|]);
                             (match x3067 with
                              | Some x3069 ->
                                  ignore
                                    (Ojs.call x3068 "push"
                                       [|(Ojs.int_to_js x3069)|])
                              | None -> ());
                             x3068))|])
    let (get_length : t -> int) =
      fun (x3072 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3072) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3080 : t) ->
        fun ~callbackfn:(x3073 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3074 : any option) ->
            fun () ->
              t_of_js
                (let x3081 = t_to_js x3080 in
                 Ojs.call (Ojs.get_prop_ascii x3081 "map") "apply"
                   [|x3081;((let x3075 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3075 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3077 : Ojs.t) ->
                                          fun (x3078 : Ojs.t) ->
                                            fun (x3079 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3073
                                                   ~value:(Ojs.int_of_js
                                                             x3077)
                                                   ~index:(Ojs.int_of_js
                                                             x3078)
                                                   ~array:(t_of_js x3079))))|]);
                             (match x3074 with
                              | Some x3076 ->
                                  ignore
                                    (Ojs.call x3075 "push"
                                       [|(any_to_js x3076)|])
                              | None -> ());
                             x3075))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3087 : t) ->
        fun
          ~callbackfn:(x3082 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3087) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3083 : Ojs.t) ->
                       fun (x3084 : Ojs.t) ->
                         fun (x3085 : Ojs.t) ->
                           fun (x3086 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3082 ~previousValue:(Ojs.int_of_js x3083)
                                  ~currentValue:(Ojs.int_of_js x3084)
                                  ~currentIndex:(Ojs.int_of_js x3085)
                                  ~array:(t_of_js x3086))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3094 : t) ->
        fun
          ~callbackfn:(x3088 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3093 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3094) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3089 : Ojs.t) ->
                         fun (x3090 : Ojs.t) ->
                           fun (x3091 : Ojs.t) ->
                             fun (x3092 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3088 ~previousValue:(Ojs.int_of_js x3089)
                                    ~currentValue:(Ojs.int_of_js x3090)
                                    ~currentIndex:(Ojs.int_of_js x3091)
                                    ~array:(t_of_js x3092))));(Ojs.int_to_js
                                                                 x3093)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3101 : t) ->
        fun
          ~callbackfn:(x3095 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3100 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3101) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3096 : Ojs.t) ->
                         fun (x3097 : Ojs.t) ->
                           fun (x3098 : Ojs.t) ->
                             fun (x3099 : Ojs.t) ->
                               Obj.magic
                                 (x3095 ~previousValue:(Obj.magic x3096)
                                    ~currentValue:(Ojs.int_of_js x3097)
                                    ~currentIndex:(Ojs.int_of_js x3098)
                                    ~array:(t_of_js x3099))));(Obj.magic
                                                                 x3100)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3107 : t) ->
        fun
          ~callbackfn:(x3102 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3107) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3103 : Ojs.t) ->
                       fun (x3104 : Ojs.t) ->
                         fun (x3105 : Ojs.t) ->
                           fun (x3106 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3102 ~previousValue:(Ojs.int_of_js x3103)
                                  ~currentValue:(Ojs.int_of_js x3104)
                                  ~currentIndex:(Ojs.int_of_js x3105)
                                  ~array:(t_of_js x3106))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3114 : t) ->
        fun
          ~callbackfn:(x3108 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3113 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3114) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3109 : Ojs.t) ->
                         fun (x3110 : Ojs.t) ->
                           fun (x3111 : Ojs.t) ->
                             fun (x3112 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3108 ~previousValue:(Ojs.int_of_js x3109)
                                    ~currentValue:(Ojs.int_of_js x3110)
                                    ~currentIndex:(Ojs.int_of_js x3111)
                                    ~array:(t_of_js x3112))));(Ojs.int_to_js
                                                                 x3113)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3121 : t) ->
        fun
          ~callbackfn:(x3115 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3120 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3121) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3116 : Ojs.t) ->
                         fun (x3117 : Ojs.t) ->
                           fun (x3118 : Ojs.t) ->
                             fun (x3119 : Ojs.t) ->
                               Obj.magic
                                 (x3115 ~previousValue:(Obj.magic x3116)
                                    ~currentValue:(Ojs.int_of_js x3117)
                                    ~currentIndex:(Ojs.int_of_js x3118)
                                    ~array:(t_of_js x3119))));(Obj.magic
                                                                 x3120)|])
    let (reverse : t -> t) =
      fun (x3122 : t) -> t_of_js (Ojs.call (t_to_js x3122) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3128 : t) ->
        fun ~array:(x3123 : int Array.t) ->
          fun ?offset:(x3124 : int option) ->
            fun () ->
              ignore
                (let x3129 = t_to_js x3128 in
                 Ojs.call (Ojs.get_prop_ascii x3129 "set") "apply"
                   [|x3129;((let x3125 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3125 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3123)|]);
                             (match x3124 with
                              | Some x3126 ->
                                  ignore
                                    (Ojs.call x3125 "push"
                                       [|(Ojs.int_to_js x3126)|])
                              | None -> ());
                             x3125))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3135 : t) ->
        fun ?start:(x3130 : int option) ->
          fun ?end_:(x3131 : int option) ->
            fun () ->
              t_of_js
                (let x3136 = t_to_js x3135 in
                 Ojs.call (Ojs.get_prop_ascii x3136 "slice") "apply"
                   [|x3136;((let x3132 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3130 with
                              | Some x3134 ->
                                  ignore
                                    (Ojs.call x3132 "push"
                                       [|(Ojs.int_to_js x3134)|])
                              | None -> ());
                             (match x3131 with
                              | Some x3133 ->
                                  ignore
                                    (Ojs.call x3132 "push"
                                       [|(Ojs.int_to_js x3133)|])
                              | None -> ());
                             x3132))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3144 : t) ->
        fun (x3137 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3138 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3145 = t_to_js x3144 in
                 Ojs.call (Ojs.get_prop_ascii x3145 "some") "apply"
                   [|x3145;((let x3139 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3139 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3141 : Ojs.t) ->
                                          fun (x3142 : Ojs.t) ->
                                            fun (x3143 : Ojs.t) ->
                                              unknown_to_js
                                                (x3137
                                                   ~value:(Ojs.int_of_js
                                                             x3141)
                                                   ~index:(Ojs.int_of_js
                                                             x3142)
                                                   ~array:(t_of_js x3143))))|]);
                             (match x3138 with
                              | Some x3140 ->
                                  ignore
                                    (Ojs.call x3139 "push"
                                       [|(any_to_js x3140)|])
                              | None -> ());
                             x3139))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3151 : t) ->
        fun ?compareFn:(x3146 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3152 = t_to_js x3151 in
               Ojs.call (Ojs.get_prop_ascii x3152 "sort") "apply"
                 [|x3152;((let x3147 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3146 with
                            | Some x3148 ->
                                ignore
                                  (Ojs.call x3147 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3149 : Ojs.t) ->
                                             fun (x3150 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3148
                                                    ~a:(Ojs.int_of_js x3149)
                                                    ~b:(Ojs.int_of_js x3150))))|])
                            | None -> ());
                           x3147))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3158 : t) ->
        fun ?begin_:(x3153 : int option) ->
          fun ?end_:(x3154 : int option) ->
            fun () ->
              t_of_js
                (let x3159 = t_to_js x3158 in
                 Ojs.call (Ojs.get_prop_ascii x3159 "subarray") "apply"
                   [|x3159;((let x3155 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3153 with
                              | Some x3157 ->
                                  ignore
                                    (Ojs.call x3155 "push"
                                       [|(Ojs.int_to_js x3157)|])
                              | None -> ());
                             (match x3154 with
                              | Some x3156 ->
                                  ignore
                                    (Ojs.call x3155 "push"
                                       [|(Ojs.int_to_js x3156)|])
                              | None -> ());
                             x3155))|])
    let (to_locale_string : t -> string) =
      fun (x3160 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3160) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x3161 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3161) "toString" [||])
    let (value_of : t -> t) =
      fun (x3162 : t) -> t_of_js (Ojs.call (t_to_js x3162) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3163 : t) ->
        fun (x3164 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3163) x3164)
    let (set : t -> int -> int -> unit) =
      fun (x3165 : t) ->
        fun (x3166 : int) ->
          fun (x3167 : int) ->
            Ojs.array_set (t_to_js x3165) x3166 (Ojs.int_to_js x3167)
    let (create : length:int -> t) =
      fun ~length:(x3168 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(Ojs.int_to_js x3168)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3169 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int16Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3171 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3171) x3169)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3173 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3174 : int option) ->
          fun ?length:(x3175 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int16Array")
                   (let x3176 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3176 "push" [|(ArrayBuffer.t_to_js x3173)|]);
                    (match x3174 with
                     | Some x3178 ->
                         ignore
                           (Ojs.call x3176 "push" [|(Ojs.int_to_js x3178)|])
                     | None -> ());
                    (match x3175 with
                     | Some x3177 ->
                         ignore
                           (Ojs.call x3176 "push" [|(Ojs.int_to_js x3177)|])
                     | None -> ());
                    x3176))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int16Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3179 : int list) ->
        t_of_js
          (let x3182 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
           Ojs.call (Ojs.get_prop_ascii x3182 "of") "apply"
             [|x3182;((let x3180 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3181 : int) ->
                            ignore
                              (Ojs.call x3180 "push"
                                 [|(Ojs.int_to_js x3181)|])) x3179;
                       x3180))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3183 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int16Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3183)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3185 : 'T Array.t) ->
        fun ~mapfn:(x3186 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3187 : any option) ->
            fun () ->
              t_of_js
                (let x3193 = Ojs.get_prop_ascii Ojs.global "Int16Array" in
                 Ojs.call (Ojs.get_prop_ascii x3193 "from") "apply"
                   [|x3193;((let x3188 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3188 "push"
                                  [|(Array.t_to_js Obj.magic x3185)|]);
                             ignore
                               (Ojs.call x3188 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3190 : Ojs.t) ->
                                          fun (x3191 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3186 ~v:(Obj.magic x3190)
                                                 ~k:(Ojs.int_of_js x3191))))|]);
                             (match x3187 with
                              | Some x3189 ->
                                  ignore
                                    (Ojs.call x3188 "push"
                                       [|(any_to_js x3189)|])
                              | None -> ());
                             x3188))|])
  end
module Int16ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3195 : Ojs.t) -> x3195
    and t_to_js : t -> Ojs.t = fun (x3194 : Ojs.t) -> x3194
    let (get_prototype : t -> Int16Array.t) =
      fun (x3196 : t) ->
        Int16Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3196) "prototype")
    let (create : t -> length:int -> Int16Array.t) =
      fun (x3198 : t) ->
        fun ~length:(x3197 : int) ->
          Int16Array.t_of_js
            (Ojs.new_obj (t_to_js x3198) [|(Ojs.int_to_js x3197)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Int16Array.t) =
      fun (x3203 : t) ->
        fun ~array:(x3199 : (ArrayBuffer.t, int Array.t) union2) ->
          Int16Array.t_of_js
            (Ojs.new_obj (t_to_js x3203)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3201 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3201) x3199)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Int16Array.t)
      =
      fun (x3210 : t) ->
        fun ~buffer:(x3204 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3205 : int option) ->
            fun ?length:(x3206 : int option) ->
              fun () ->
                Int16Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3210)
                     (let x3207 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3207 "push"
                           [|(ArrayBuffer.t_to_js x3204)|]);
                      (match x3205 with
                       | Some x3209 ->
                           ignore
                             (Ojs.call x3207 "push" [|(Ojs.int_to_js x3209)|])
                       | None -> ());
                      (match x3206 with
                       | Some x3208 ->
                           ignore
                             (Ojs.call x3207 "push" [|(Ojs.int_to_js x3208)|])
                       | None -> ());
                      x3207))
    let (get_bytes_per_element : t -> int) =
      fun (x3211 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3211) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Int16Array.t) =
      fun (x3215 : t) ->
        fun (x3212 : int list) ->
          Int16Array.t_of_js
            (let x3216 = t_to_js x3215 in
             Ojs.call (Ojs.get_prop_ascii x3216 "of") "apply"
               [|x3216;((let x3213 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3214 : int) ->
                              ignore
                                (Ojs.call x3213 "push"
                                   [|(Ojs.int_to_js x3214)|])) x3212;
                         x3213))|])
    let (from : t -> array:int Array.t -> Int16Array.t) =
      fun (x3219 : t) ->
        fun ~array:(x3217 : int Array.t) ->
          Int16Array.t_of_js
            (Ojs.call (t_to_js x3219) "from"
               [|(Array.t_to_js Ojs.int_to_js x3217)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Int16Array.t)
      =
      fun (x3228 : t) ->
        fun ~array:(x3220 : 'T Array.t) ->
          fun ~mapfn:(x3221 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3222 : any option) ->
              fun () ->
                Int16Array.t_of_js
                  (let x3229 = t_to_js x3228 in
                   Ojs.call (Ojs.get_prop_ascii x3229 "from") "apply"
                     [|x3229;((let x3223 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3223 "push"
                                    [|(Array.t_to_js Obj.magic x3220)|]);
                               ignore
                                 (Ojs.call x3223 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3225 : Ojs.t) ->
                                            fun (x3226 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3221 ~v:(Obj.magic x3225)
                                                   ~k:(Ojs.int_of_js x3226))))|]);
                               (match x3222 with
                                | Some x3224 ->
                                    ignore
                                      (Ojs.call x3223 "push"
                                         [|(any_to_js x3224)|])
                                | None -> ());
                               x3223))|])
  end
let (int16_array : Int16ArrayConstructor.t) =
  Int16ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Int16Array")
module Uint16Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3231 : Ojs.t) -> x3231
    and t_to_js : t -> Ojs.t = fun (x3230 : Ojs.t) -> x3230
    let (get_bytes_per_element : t -> int) =
      fun (x3232 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3232) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3233 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3233) "buffer")
    let (get_byte_length : t -> int) =
      fun (x3234 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3234) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x3235 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3235) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x3241 : t) ->
        fun ~target:(x3236 : int) ->
          fun ~start:(x3237 : int) ->
            fun ?end_:(x3238 : int option) ->
              fun () ->
                t_of_js
                  (let x3242 = t_to_js x3241 in
                   Ojs.call (Ojs.get_prop_ascii x3242 "copyWithin") "apply"
                     [|x3242;((let x3239 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3239 "push"
                                    [|(Ojs.int_to_js x3236)|]);
                               ignore
                                 (Ojs.call x3239 "push"
                                    [|(Ojs.int_to_js x3237)|]);
                               (match x3238 with
                                | Some x3240 ->
                                    ignore
                                      (Ojs.call x3239 "push"
                                         [|(Ojs.int_to_js x3240)|])
                                | None -> ());
                               x3239))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3250 : t) ->
        fun (x3243 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3244 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3251 = t_to_js x3250 in
                 Ojs.call (Ojs.get_prop_ascii x3251 "every") "apply"
                   [|x3251;((let x3245 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3245 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3247 : Ojs.t) ->
                                          fun (x3248 : Ojs.t) ->
                                            fun (x3249 : Ojs.t) ->
                                              unknown_to_js
                                                (x3243
                                                   ~value:(Ojs.int_of_js
                                                             x3247)
                                                   ~index:(Ojs.int_of_js
                                                             x3248)
                                                   ~array:(t_of_js x3249))))|]);
                             (match x3244 with
                              | Some x3246 ->
                                  ignore
                                    (Ojs.call x3245 "push"
                                       [|(any_to_js x3246)|])
                              | None -> ());
                             x3245))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3258 : t) ->
        fun ~value:(x3252 : int) ->
          fun ?start:(x3253 : int option) ->
            fun ?end_:(x3254 : int option) ->
              fun () ->
                t_of_js
                  (let x3259 = t_to_js x3258 in
                   Ojs.call (Ojs.get_prop_ascii x3259 "fill") "apply"
                     [|x3259;((let x3255 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3255 "push"
                                    [|(Ojs.int_to_js x3252)|]);
                               (match x3253 with
                                | Some x3257 ->
                                    ignore
                                      (Ojs.call x3255 "push"
                                         [|(Ojs.int_to_js x3257)|])
                                | None -> ());
                               (match x3254 with
                                | Some x3256 ->
                                    ignore
                                      (Ojs.call x3255 "push"
                                         [|(Ojs.int_to_js x3256)|])
                                | None -> ());
                               x3255))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3267 : t) ->
        fun (x3260 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3261 : any option) ->
            fun () ->
              t_of_js
                (let x3268 = t_to_js x3267 in
                 Ojs.call (Ojs.get_prop_ascii x3268 "filter") "apply"
                   [|x3268;((let x3262 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3262 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3264 : Ojs.t) ->
                                          fun (x3265 : Ojs.t) ->
                                            fun (x3266 : Ojs.t) ->
                                              any_to_js
                                                (x3260
                                                   ~value:(Ojs.int_of_js
                                                             x3264)
                                                   ~index:(Ojs.int_of_js
                                                             x3265)
                                                   ~array:(t_of_js x3266))))|]);
                             (match x3261 with
                              | Some x3263 ->
                                  ignore
                                    (Ojs.call x3262 "push"
                                       [|(any_to_js x3263)|])
                              | None -> ());
                             x3262))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3276 : t) ->
        fun (x3269 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3270 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3277 = t_to_js x3276 in
                 Ojs.call (Ojs.get_prop_ascii x3277 "find") "apply"
                   [|x3277;((let x3271 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3271 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3273 : Ojs.t) ->
                                          fun (x3274 : Ojs.t) ->
                                            fun (x3275 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3269
                                                   ~value:(Ojs.int_of_js
                                                             x3273)
                                                   ~index:(Ojs.int_of_js
                                                             x3274)
                                                   ~obj:(t_of_js x3275))))|]);
                             (match x3270 with
                              | Some x3272 ->
                                  ignore
                                    (Ojs.call x3271 "push"
                                       [|(any_to_js x3272)|])
                              | None -> ());
                             x3271))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3286 : t) ->
        fun (x3279 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3280 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3287 = t_to_js x3286 in
                 Ojs.call (Ojs.get_prop_ascii x3287 "findIndex") "apply"
                   [|x3287;((let x3281 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3281 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3283 : Ojs.t) ->
                                          fun (x3284 : Ojs.t) ->
                                            fun (x3285 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3279
                                                   ~value:(Ojs.int_of_js
                                                             x3283)
                                                   ~index:(Ojs.int_of_js
                                                             x3284)
                                                   ~obj:(t_of_js x3285))))|]);
                             (match x3280 with
                              | Some x3282 ->
                                  ignore
                                    (Ojs.call x3281 "push"
                                       [|(any_to_js x3282)|])
                              | None -> ());
                             x3281))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3295 : t) ->
        fun ~callbackfn:(x3288 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3289 : any option) ->
            fun () ->
              ignore
                (let x3296 = t_to_js x3295 in
                 Ojs.call (Ojs.get_prop_ascii x3296 "forEach") "apply"
                   [|x3296;((let x3290 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3290 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3292 : Ojs.t) ->
                                          fun (x3293 : Ojs.t) ->
                                            fun (x3294 : Ojs.t) ->
                                              x3288
                                                ~value:(Ojs.int_of_js x3292)
                                                ~index:(Ojs.int_of_js x3293)
                                                ~array:(t_of_js x3294)))|]);
                             (match x3289 with
                              | Some x3291 ->
                                  ignore
                                    (Ojs.call x3290 "push"
                                       [|(any_to_js x3291)|])
                              | None -> ());
                             x3290))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x3301 : t) ->
        fun ~searchElement:(x3297 : int) ->
          fun ?fromIndex:(x3298 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3302 = t_to_js x3301 in
                 Ojs.call (Ojs.get_prop_ascii x3302 "indexOf") "apply"
                   [|x3302;((let x3299 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3299 "push"
                                  [|(Ojs.int_to_js x3297)|]);
                             (match x3298 with
                              | Some x3300 ->
                                  ignore
                                    (Ojs.call x3299 "push"
                                       [|(Ojs.int_to_js x3300)|])
                              | None -> ());
                             x3299))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3306 : t) ->
        fun ?separator:(x3303 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3307 = t_to_js x3306 in
               Ojs.call (Ojs.get_prop_ascii x3307 "join") "apply"
                 [|x3307;((let x3304 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3303 with
                            | Some x3305 ->
                                ignore
                                  (Ojs.call x3304 "push"
                                     [|(Ojs.string_to_js x3305)|])
                            | None -> ());
                           x3304))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3312 : t) ->
        fun ~searchElement:(x3308 : int) ->
          fun ?fromIndex:(x3309 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3313 = t_to_js x3312 in
                 Ojs.call (Ojs.get_prop_ascii x3313 "lastIndexOf") "apply"
                   [|x3313;((let x3310 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3310 "push"
                                  [|(Ojs.int_to_js x3308)|]);
                             (match x3309 with
                              | Some x3311 ->
                                  ignore
                                    (Ojs.call x3310 "push"
                                       [|(Ojs.int_to_js x3311)|])
                              | None -> ());
                             x3310))|])
    let (get_length : t -> int) =
      fun (x3314 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3314) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3322 : t) ->
        fun ~callbackfn:(x3315 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3316 : any option) ->
            fun () ->
              t_of_js
                (let x3323 = t_to_js x3322 in
                 Ojs.call (Ojs.get_prop_ascii x3323 "map") "apply"
                   [|x3323;((let x3317 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3317 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3319 : Ojs.t) ->
                                          fun (x3320 : Ojs.t) ->
                                            fun (x3321 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3315
                                                   ~value:(Ojs.int_of_js
                                                             x3319)
                                                   ~index:(Ojs.int_of_js
                                                             x3320)
                                                   ~array:(t_of_js x3321))))|]);
                             (match x3316 with
                              | Some x3318 ->
                                  ignore
                                    (Ojs.call x3317 "push"
                                       [|(any_to_js x3318)|])
                              | None -> ());
                             x3317))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3329 : t) ->
        fun
          ~callbackfn:(x3324 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3329) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3325 : Ojs.t) ->
                       fun (x3326 : Ojs.t) ->
                         fun (x3327 : Ojs.t) ->
                           fun (x3328 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3324 ~previousValue:(Ojs.int_of_js x3325)
                                  ~currentValue:(Ojs.int_of_js x3326)
                                  ~currentIndex:(Ojs.int_of_js x3327)
                                  ~array:(t_of_js x3328))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3336 : t) ->
        fun
          ~callbackfn:(x3330 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3335 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3336) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3331 : Ojs.t) ->
                         fun (x3332 : Ojs.t) ->
                           fun (x3333 : Ojs.t) ->
                             fun (x3334 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3330 ~previousValue:(Ojs.int_of_js x3331)
                                    ~currentValue:(Ojs.int_of_js x3332)
                                    ~currentIndex:(Ojs.int_of_js x3333)
                                    ~array:(t_of_js x3334))));(Ojs.int_to_js
                                                                 x3335)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3343 : t) ->
        fun
          ~callbackfn:(x3337 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3342 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3343) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3338 : Ojs.t) ->
                         fun (x3339 : Ojs.t) ->
                           fun (x3340 : Ojs.t) ->
                             fun (x3341 : Ojs.t) ->
                               Obj.magic
                                 (x3337 ~previousValue:(Obj.magic x3338)
                                    ~currentValue:(Ojs.int_of_js x3339)
                                    ~currentIndex:(Ojs.int_of_js x3340)
                                    ~array:(t_of_js x3341))));(Obj.magic
                                                                 x3342)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3349 : t) ->
        fun
          ~callbackfn:(x3344 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3349) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3345 : Ojs.t) ->
                       fun (x3346 : Ojs.t) ->
                         fun (x3347 : Ojs.t) ->
                           fun (x3348 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3344 ~previousValue:(Ojs.int_of_js x3345)
                                  ~currentValue:(Ojs.int_of_js x3346)
                                  ~currentIndex:(Ojs.int_of_js x3347)
                                  ~array:(t_of_js x3348))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3356 : t) ->
        fun
          ~callbackfn:(x3350 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3355 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3356) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3351 : Ojs.t) ->
                         fun (x3352 : Ojs.t) ->
                           fun (x3353 : Ojs.t) ->
                             fun (x3354 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3350 ~previousValue:(Ojs.int_of_js x3351)
                                    ~currentValue:(Ojs.int_of_js x3352)
                                    ~currentIndex:(Ojs.int_of_js x3353)
                                    ~array:(t_of_js x3354))));(Ojs.int_to_js
                                                                 x3355)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3363 : t) ->
        fun
          ~callbackfn:(x3357 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3362 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3363) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3358 : Ojs.t) ->
                         fun (x3359 : Ojs.t) ->
                           fun (x3360 : Ojs.t) ->
                             fun (x3361 : Ojs.t) ->
                               Obj.magic
                                 (x3357 ~previousValue:(Obj.magic x3358)
                                    ~currentValue:(Ojs.int_of_js x3359)
                                    ~currentIndex:(Ojs.int_of_js x3360)
                                    ~array:(t_of_js x3361))));(Obj.magic
                                                                 x3362)|])
    let (reverse : t -> t) =
      fun (x3364 : t) -> t_of_js (Ojs.call (t_to_js x3364) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3370 : t) ->
        fun ~array:(x3365 : int Array.t) ->
          fun ?offset:(x3366 : int option) ->
            fun () ->
              ignore
                (let x3371 = t_to_js x3370 in
                 Ojs.call (Ojs.get_prop_ascii x3371 "set") "apply"
                   [|x3371;((let x3367 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3367 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3365)|]);
                             (match x3366 with
                              | Some x3368 ->
                                  ignore
                                    (Ojs.call x3367 "push"
                                       [|(Ojs.int_to_js x3368)|])
                              | None -> ());
                             x3367))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3377 : t) ->
        fun ?start:(x3372 : int option) ->
          fun ?end_:(x3373 : int option) ->
            fun () ->
              t_of_js
                (let x3378 = t_to_js x3377 in
                 Ojs.call (Ojs.get_prop_ascii x3378 "slice") "apply"
                   [|x3378;((let x3374 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3372 with
                              | Some x3376 ->
                                  ignore
                                    (Ojs.call x3374 "push"
                                       [|(Ojs.int_to_js x3376)|])
                              | None -> ());
                             (match x3373 with
                              | Some x3375 ->
                                  ignore
                                    (Ojs.call x3374 "push"
                                       [|(Ojs.int_to_js x3375)|])
                              | None -> ());
                             x3374))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3386 : t) ->
        fun (x3379 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3380 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3387 = t_to_js x3386 in
                 Ojs.call (Ojs.get_prop_ascii x3387 "some") "apply"
                   [|x3387;((let x3381 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3381 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3383 : Ojs.t) ->
                                          fun (x3384 : Ojs.t) ->
                                            fun (x3385 : Ojs.t) ->
                                              unknown_to_js
                                                (x3379
                                                   ~value:(Ojs.int_of_js
                                                             x3383)
                                                   ~index:(Ojs.int_of_js
                                                             x3384)
                                                   ~array:(t_of_js x3385))))|]);
                             (match x3380 with
                              | Some x3382 ->
                                  ignore
                                    (Ojs.call x3381 "push"
                                       [|(any_to_js x3382)|])
                              | None -> ());
                             x3381))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3393 : t) ->
        fun ?compareFn:(x3388 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3394 = t_to_js x3393 in
               Ojs.call (Ojs.get_prop_ascii x3394 "sort") "apply"
                 [|x3394;((let x3389 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3388 with
                            | Some x3390 ->
                                ignore
                                  (Ojs.call x3389 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3391 : Ojs.t) ->
                                             fun (x3392 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3390
                                                    ~a:(Ojs.int_of_js x3391)
                                                    ~b:(Ojs.int_of_js x3392))))|])
                            | None -> ());
                           x3389))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3400 : t) ->
        fun ?begin_:(x3395 : int option) ->
          fun ?end_:(x3396 : int option) ->
            fun () ->
              t_of_js
                (let x3401 = t_to_js x3400 in
                 Ojs.call (Ojs.get_prop_ascii x3401 "subarray") "apply"
                   [|x3401;((let x3397 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3395 with
                              | Some x3399 ->
                                  ignore
                                    (Ojs.call x3397 "push"
                                       [|(Ojs.int_to_js x3399)|])
                              | None -> ());
                             (match x3396 with
                              | Some x3398 ->
                                  ignore
                                    (Ojs.call x3397 "push"
                                       [|(Ojs.int_to_js x3398)|])
                              | None -> ());
                             x3397))|])
    let (to_locale_string : t -> string) =
      fun (x3402 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3402) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x3403 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3403) "toString" [||])
    let (value_of : t -> t) =
      fun (x3404 : t) -> t_of_js (Ojs.call (t_to_js x3404) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3405 : t) ->
        fun (x3406 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3405) x3406)
    let (set : t -> int -> int -> unit) =
      fun (x3407 : t) ->
        fun (x3408 : int) ->
          fun (x3409 : int) ->
            Ojs.array_set (t_to_js x3407) x3408 (Ojs.int_to_js x3409)
    let (create : length:int -> t) =
      fun ~length:(x3410 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(Ojs.int_to_js x3410)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3411 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint16Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3413 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3413) x3411)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3415 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3416 : int option) ->
          fun ?length:(x3417 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint16Array")
                   (let x3418 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3418 "push" [|(ArrayBuffer.t_to_js x3415)|]);
                    (match x3416 with
                     | Some x3420 ->
                         ignore
                           (Ojs.call x3418 "push" [|(Ojs.int_to_js x3420)|])
                     | None -> ());
                    (match x3417 with
                     | Some x3419 ->
                         ignore
                           (Ojs.call x3418 "push" [|(Ojs.int_to_js x3419)|])
                     | None -> ());
                    x3418))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint16Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3421 : int list) ->
        t_of_js
          (let x3424 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
           Ojs.call (Ojs.get_prop_ascii x3424 "of") "apply"
             [|x3424;((let x3422 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3423 : int) ->
                            ignore
                              (Ojs.call x3422 "push"
                                 [|(Ojs.int_to_js x3423)|])) x3421;
                       x3422))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3425 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint16Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3425)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3427 : 'T Array.t) ->
        fun ~mapfn:(x3428 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3429 : any option) ->
            fun () ->
              t_of_js
                (let x3435 = Ojs.get_prop_ascii Ojs.global "Uint16Array" in
                 Ojs.call (Ojs.get_prop_ascii x3435 "from") "apply"
                   [|x3435;((let x3430 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3430 "push"
                                  [|(Array.t_to_js Obj.magic x3427)|]);
                             ignore
                               (Ojs.call x3430 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3432 : Ojs.t) ->
                                          fun (x3433 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3428 ~v:(Obj.magic x3432)
                                                 ~k:(Ojs.int_of_js x3433))))|]);
                             (match x3429 with
                              | Some x3431 ->
                                  ignore
                                    (Ojs.call x3430 "push"
                                       [|(any_to_js x3431)|])
                              | None -> ());
                             x3430))|])
  end
module Uint16ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3437 : Ojs.t) -> x3437
    and t_to_js : t -> Ojs.t = fun (x3436 : Ojs.t) -> x3436
    let (get_prototype : t -> Uint16Array.t) =
      fun (x3438 : t) ->
        Uint16Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3438) "prototype")
    let (create : t -> length:int -> Uint16Array.t) =
      fun (x3440 : t) ->
        fun ~length:(x3439 : int) ->
          Uint16Array.t_of_js
            (Ojs.new_obj (t_to_js x3440) [|(Ojs.int_to_js x3439)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint16Array.t) =
      fun (x3445 : t) ->
        fun ~array:(x3441 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint16Array.t_of_js
            (Ojs.new_obj (t_to_js x3445)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3443 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3443) x3441)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint16Array.t)
      =
      fun (x3452 : t) ->
        fun ~buffer:(x3446 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3447 : int option) ->
            fun ?length:(x3448 : int option) ->
              fun () ->
                Uint16Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3452)
                     (let x3449 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3449 "push"
                           [|(ArrayBuffer.t_to_js x3446)|]);
                      (match x3447 with
                       | Some x3451 ->
                           ignore
                             (Ojs.call x3449 "push" [|(Ojs.int_to_js x3451)|])
                       | None -> ());
                      (match x3448 with
                       | Some x3450 ->
                           ignore
                             (Ojs.call x3449 "push" [|(Ojs.int_to_js x3450)|])
                       | None -> ());
                      x3449))
    let (get_bytes_per_element : t -> int) =
      fun (x3453 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3453) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint16Array.t) =
      fun (x3457 : t) ->
        fun (x3454 : int list) ->
          Uint16Array.t_of_js
            (let x3458 = t_to_js x3457 in
             Ojs.call (Ojs.get_prop_ascii x3458 "of") "apply"
               [|x3458;((let x3455 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3456 : int) ->
                              ignore
                                (Ojs.call x3455 "push"
                                   [|(Ojs.int_to_js x3456)|])) x3454;
                         x3455))|])
    let (from : t -> array:int Array.t -> Uint16Array.t) =
      fun (x3461 : t) ->
        fun ~array:(x3459 : int Array.t) ->
          Uint16Array.t_of_js
            (Ojs.call (t_to_js x3461) "from"
               [|(Array.t_to_js Ojs.int_to_js x3459)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint16Array.t)
      =
      fun (x3470 : t) ->
        fun ~array:(x3462 : 'T Array.t) ->
          fun ~mapfn:(x3463 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3464 : any option) ->
              fun () ->
                Uint16Array.t_of_js
                  (let x3471 = t_to_js x3470 in
                   Ojs.call (Ojs.get_prop_ascii x3471 "from") "apply"
                     [|x3471;((let x3465 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3465 "push"
                                    [|(Array.t_to_js Obj.magic x3462)|]);
                               ignore
                                 (Ojs.call x3465 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3467 : Ojs.t) ->
                                            fun (x3468 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3463 ~v:(Obj.magic x3467)
                                                   ~k:(Ojs.int_of_js x3468))))|]);
                               (match x3464 with
                                | Some x3466 ->
                                    ignore
                                      (Ojs.call x3465 "push"
                                         [|(any_to_js x3466)|])
                                | None -> ());
                               x3465))|])
  end
let (uint16_array : Uint16ArrayConstructor.t) =
  Uint16ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Uint16Array")
module Int32Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3473 : Ojs.t) -> x3473
    and t_to_js : t -> Ojs.t = fun (x3472 : Ojs.t) -> x3472
    let (get_bytes_per_element : t -> int) =
      fun (x3474 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3474) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3475 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3475) "buffer")
    let (get_byte_length : t -> int) =
      fun (x3476 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3476) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x3477 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3477) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x3483 : t) ->
        fun ~target:(x3478 : int) ->
          fun ~start:(x3479 : int) ->
            fun ?end_:(x3480 : int option) ->
              fun () ->
                t_of_js
                  (let x3484 = t_to_js x3483 in
                   Ojs.call (Ojs.get_prop_ascii x3484 "copyWithin") "apply"
                     [|x3484;((let x3481 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3481 "push"
                                    [|(Ojs.int_to_js x3478)|]);
                               ignore
                                 (Ojs.call x3481 "push"
                                    [|(Ojs.int_to_js x3479)|]);
                               (match x3480 with
                                | Some x3482 ->
                                    ignore
                                      (Ojs.call x3481 "push"
                                         [|(Ojs.int_to_js x3482)|])
                                | None -> ());
                               x3481))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3492 : t) ->
        fun (x3485 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3486 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3493 = t_to_js x3492 in
                 Ojs.call (Ojs.get_prop_ascii x3493 "every") "apply"
                   [|x3493;((let x3487 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3487 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3489 : Ojs.t) ->
                                          fun (x3490 : Ojs.t) ->
                                            fun (x3491 : Ojs.t) ->
                                              unknown_to_js
                                                (x3485
                                                   ~value:(Ojs.int_of_js
                                                             x3489)
                                                   ~index:(Ojs.int_of_js
                                                             x3490)
                                                   ~array:(t_of_js x3491))))|]);
                             (match x3486 with
                              | Some x3488 ->
                                  ignore
                                    (Ojs.call x3487 "push"
                                       [|(any_to_js x3488)|])
                              | None -> ());
                             x3487))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3500 : t) ->
        fun ~value:(x3494 : int) ->
          fun ?start:(x3495 : int option) ->
            fun ?end_:(x3496 : int option) ->
              fun () ->
                t_of_js
                  (let x3501 = t_to_js x3500 in
                   Ojs.call (Ojs.get_prop_ascii x3501 "fill") "apply"
                     [|x3501;((let x3497 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3497 "push"
                                    [|(Ojs.int_to_js x3494)|]);
                               (match x3495 with
                                | Some x3499 ->
                                    ignore
                                      (Ojs.call x3497 "push"
                                         [|(Ojs.int_to_js x3499)|])
                                | None -> ());
                               (match x3496 with
                                | Some x3498 ->
                                    ignore
                                      (Ojs.call x3497 "push"
                                         [|(Ojs.int_to_js x3498)|])
                                | None -> ());
                               x3497))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3509 : t) ->
        fun (x3502 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3503 : any option) ->
            fun () ->
              t_of_js
                (let x3510 = t_to_js x3509 in
                 Ojs.call (Ojs.get_prop_ascii x3510 "filter") "apply"
                   [|x3510;((let x3504 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3504 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3506 : Ojs.t) ->
                                          fun (x3507 : Ojs.t) ->
                                            fun (x3508 : Ojs.t) ->
                                              any_to_js
                                                (x3502
                                                   ~value:(Ojs.int_of_js
                                                             x3506)
                                                   ~index:(Ojs.int_of_js
                                                             x3507)
                                                   ~array:(t_of_js x3508))))|]);
                             (match x3503 with
                              | Some x3505 ->
                                  ignore
                                    (Ojs.call x3504 "push"
                                       [|(any_to_js x3505)|])
                              | None -> ());
                             x3504))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3518 : t) ->
        fun (x3511 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3512 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3519 = t_to_js x3518 in
                 Ojs.call (Ojs.get_prop_ascii x3519 "find") "apply"
                   [|x3519;((let x3513 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3513 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3515 : Ojs.t) ->
                                          fun (x3516 : Ojs.t) ->
                                            fun (x3517 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3511
                                                   ~value:(Ojs.int_of_js
                                                             x3515)
                                                   ~index:(Ojs.int_of_js
                                                             x3516)
                                                   ~obj:(t_of_js x3517))))|]);
                             (match x3512 with
                              | Some x3514 ->
                                  ignore
                                    (Ojs.call x3513 "push"
                                       [|(any_to_js x3514)|])
                              | None -> ());
                             x3513))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3528 : t) ->
        fun (x3521 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3522 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3529 = t_to_js x3528 in
                 Ojs.call (Ojs.get_prop_ascii x3529 "findIndex") "apply"
                   [|x3529;((let x3523 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3523 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3525 : Ojs.t) ->
                                          fun (x3526 : Ojs.t) ->
                                            fun (x3527 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3521
                                                   ~value:(Ojs.int_of_js
                                                             x3525)
                                                   ~index:(Ojs.int_of_js
                                                             x3526)
                                                   ~obj:(t_of_js x3527))))|]);
                             (match x3522 with
                              | Some x3524 ->
                                  ignore
                                    (Ojs.call x3523 "push"
                                       [|(any_to_js x3524)|])
                              | None -> ());
                             x3523))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3537 : t) ->
        fun ~callbackfn:(x3530 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3531 : any option) ->
            fun () ->
              ignore
                (let x3538 = t_to_js x3537 in
                 Ojs.call (Ojs.get_prop_ascii x3538 "forEach") "apply"
                   [|x3538;((let x3532 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3532 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3534 : Ojs.t) ->
                                          fun (x3535 : Ojs.t) ->
                                            fun (x3536 : Ojs.t) ->
                                              x3530
                                                ~value:(Ojs.int_of_js x3534)
                                                ~index:(Ojs.int_of_js x3535)
                                                ~array:(t_of_js x3536)))|]);
                             (match x3531 with
                              | Some x3533 ->
                                  ignore
                                    (Ojs.call x3532 "push"
                                       [|(any_to_js x3533)|])
                              | None -> ());
                             x3532))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x3543 : t) ->
        fun ~searchElement:(x3539 : int) ->
          fun ?fromIndex:(x3540 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3544 = t_to_js x3543 in
                 Ojs.call (Ojs.get_prop_ascii x3544 "indexOf") "apply"
                   [|x3544;((let x3541 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3541 "push"
                                  [|(Ojs.int_to_js x3539)|]);
                             (match x3540 with
                              | Some x3542 ->
                                  ignore
                                    (Ojs.call x3541 "push"
                                       [|(Ojs.int_to_js x3542)|])
                              | None -> ());
                             x3541))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3548 : t) ->
        fun ?separator:(x3545 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3549 = t_to_js x3548 in
               Ojs.call (Ojs.get_prop_ascii x3549 "join") "apply"
                 [|x3549;((let x3546 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3545 with
                            | Some x3547 ->
                                ignore
                                  (Ojs.call x3546 "push"
                                     [|(Ojs.string_to_js x3547)|])
                            | None -> ());
                           x3546))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3554 : t) ->
        fun ~searchElement:(x3550 : int) ->
          fun ?fromIndex:(x3551 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3555 = t_to_js x3554 in
                 Ojs.call (Ojs.get_prop_ascii x3555 "lastIndexOf") "apply"
                   [|x3555;((let x3552 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3552 "push"
                                  [|(Ojs.int_to_js x3550)|]);
                             (match x3551 with
                              | Some x3553 ->
                                  ignore
                                    (Ojs.call x3552 "push"
                                       [|(Ojs.int_to_js x3553)|])
                              | None -> ());
                             x3552))|])
    let (get_length : t -> int) =
      fun (x3556 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3556) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3564 : t) ->
        fun ~callbackfn:(x3557 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3558 : any option) ->
            fun () ->
              t_of_js
                (let x3565 = t_to_js x3564 in
                 Ojs.call (Ojs.get_prop_ascii x3565 "map") "apply"
                   [|x3565;((let x3559 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3559 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3561 : Ojs.t) ->
                                          fun (x3562 : Ojs.t) ->
                                            fun (x3563 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3557
                                                   ~value:(Ojs.int_of_js
                                                             x3561)
                                                   ~index:(Ojs.int_of_js
                                                             x3562)
                                                   ~array:(t_of_js x3563))))|]);
                             (match x3558 with
                              | Some x3560 ->
                                  ignore
                                    (Ojs.call x3559 "push"
                                       [|(any_to_js x3560)|])
                              | None -> ());
                             x3559))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3571 : t) ->
        fun
          ~callbackfn:(x3566 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3571) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3567 : Ojs.t) ->
                       fun (x3568 : Ojs.t) ->
                         fun (x3569 : Ojs.t) ->
                           fun (x3570 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3566 ~previousValue:(Ojs.int_of_js x3567)
                                  ~currentValue:(Ojs.int_of_js x3568)
                                  ~currentIndex:(Ojs.int_of_js x3569)
                                  ~array:(t_of_js x3570))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3578 : t) ->
        fun
          ~callbackfn:(x3572 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3577 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3578) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3573 : Ojs.t) ->
                         fun (x3574 : Ojs.t) ->
                           fun (x3575 : Ojs.t) ->
                             fun (x3576 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3572 ~previousValue:(Ojs.int_of_js x3573)
                                    ~currentValue:(Ojs.int_of_js x3574)
                                    ~currentIndex:(Ojs.int_of_js x3575)
                                    ~array:(t_of_js x3576))));(Ojs.int_to_js
                                                                 x3577)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3585 : t) ->
        fun
          ~callbackfn:(x3579 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3584 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3585) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3580 : Ojs.t) ->
                         fun (x3581 : Ojs.t) ->
                           fun (x3582 : Ojs.t) ->
                             fun (x3583 : Ojs.t) ->
                               Obj.magic
                                 (x3579 ~previousValue:(Obj.magic x3580)
                                    ~currentValue:(Ojs.int_of_js x3581)
                                    ~currentIndex:(Ojs.int_of_js x3582)
                                    ~array:(t_of_js x3583))));(Obj.magic
                                                                 x3584)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3591 : t) ->
        fun
          ~callbackfn:(x3586 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3591) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3587 : Ojs.t) ->
                       fun (x3588 : Ojs.t) ->
                         fun (x3589 : Ojs.t) ->
                           fun (x3590 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3586 ~previousValue:(Ojs.int_of_js x3587)
                                  ~currentValue:(Ojs.int_of_js x3588)
                                  ~currentIndex:(Ojs.int_of_js x3589)
                                  ~array:(t_of_js x3590))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3598 : t) ->
        fun
          ~callbackfn:(x3592 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3597 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3598) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3593 : Ojs.t) ->
                         fun (x3594 : Ojs.t) ->
                           fun (x3595 : Ojs.t) ->
                             fun (x3596 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3592 ~previousValue:(Ojs.int_of_js x3593)
                                    ~currentValue:(Ojs.int_of_js x3594)
                                    ~currentIndex:(Ojs.int_of_js x3595)
                                    ~array:(t_of_js x3596))));(Ojs.int_to_js
                                                                 x3597)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3605 : t) ->
        fun
          ~callbackfn:(x3599 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3604 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3605) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3600 : Ojs.t) ->
                         fun (x3601 : Ojs.t) ->
                           fun (x3602 : Ojs.t) ->
                             fun (x3603 : Ojs.t) ->
                               Obj.magic
                                 (x3599 ~previousValue:(Obj.magic x3600)
                                    ~currentValue:(Ojs.int_of_js x3601)
                                    ~currentIndex:(Ojs.int_of_js x3602)
                                    ~array:(t_of_js x3603))));(Obj.magic
                                                                 x3604)|])
    let (reverse : t -> t) =
      fun (x3606 : t) -> t_of_js (Ojs.call (t_to_js x3606) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3612 : t) ->
        fun ~array:(x3607 : int Array.t) ->
          fun ?offset:(x3608 : int option) ->
            fun () ->
              ignore
                (let x3613 = t_to_js x3612 in
                 Ojs.call (Ojs.get_prop_ascii x3613 "set") "apply"
                   [|x3613;((let x3609 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3609 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3607)|]);
                             (match x3608 with
                              | Some x3610 ->
                                  ignore
                                    (Ojs.call x3609 "push"
                                       [|(Ojs.int_to_js x3610)|])
                              | None -> ());
                             x3609))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3619 : t) ->
        fun ?start:(x3614 : int option) ->
          fun ?end_:(x3615 : int option) ->
            fun () ->
              t_of_js
                (let x3620 = t_to_js x3619 in
                 Ojs.call (Ojs.get_prop_ascii x3620 "slice") "apply"
                   [|x3620;((let x3616 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3614 with
                              | Some x3618 ->
                                  ignore
                                    (Ojs.call x3616 "push"
                                       [|(Ojs.int_to_js x3618)|])
                              | None -> ());
                             (match x3615 with
                              | Some x3617 ->
                                  ignore
                                    (Ojs.call x3616 "push"
                                       [|(Ojs.int_to_js x3617)|])
                              | None -> ());
                             x3616))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3628 : t) ->
        fun (x3621 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3622 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3629 = t_to_js x3628 in
                 Ojs.call (Ojs.get_prop_ascii x3629 "some") "apply"
                   [|x3629;((let x3623 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3623 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3625 : Ojs.t) ->
                                          fun (x3626 : Ojs.t) ->
                                            fun (x3627 : Ojs.t) ->
                                              unknown_to_js
                                                (x3621
                                                   ~value:(Ojs.int_of_js
                                                             x3625)
                                                   ~index:(Ojs.int_of_js
                                                             x3626)
                                                   ~array:(t_of_js x3627))))|]);
                             (match x3622 with
                              | Some x3624 ->
                                  ignore
                                    (Ojs.call x3623 "push"
                                       [|(any_to_js x3624)|])
                              | None -> ());
                             x3623))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3635 : t) ->
        fun ?compareFn:(x3630 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3636 = t_to_js x3635 in
               Ojs.call (Ojs.get_prop_ascii x3636 "sort") "apply"
                 [|x3636;((let x3631 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3630 with
                            | Some x3632 ->
                                ignore
                                  (Ojs.call x3631 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3633 : Ojs.t) ->
                                             fun (x3634 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3632
                                                    ~a:(Ojs.int_of_js x3633)
                                                    ~b:(Ojs.int_of_js x3634))))|])
                            | None -> ());
                           x3631))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3642 : t) ->
        fun ?begin_:(x3637 : int option) ->
          fun ?end_:(x3638 : int option) ->
            fun () ->
              t_of_js
                (let x3643 = t_to_js x3642 in
                 Ojs.call (Ojs.get_prop_ascii x3643 "subarray") "apply"
                   [|x3643;((let x3639 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3637 with
                              | Some x3641 ->
                                  ignore
                                    (Ojs.call x3639 "push"
                                       [|(Ojs.int_to_js x3641)|])
                              | None -> ());
                             (match x3638 with
                              | Some x3640 ->
                                  ignore
                                    (Ojs.call x3639 "push"
                                       [|(Ojs.int_to_js x3640)|])
                              | None -> ());
                             x3639))|])
    let (to_locale_string : t -> string) =
      fun (x3644 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3644) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x3645 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3645) "toString" [||])
    let (value_of : t -> t) =
      fun (x3646 : t) -> t_of_js (Ojs.call (t_to_js x3646) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3647 : t) ->
        fun (x3648 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3647) x3648)
    let (set : t -> int -> int -> unit) =
      fun (x3649 : t) ->
        fun (x3650 : int) ->
          fun (x3651 : int) ->
            Ojs.array_set (t_to_js x3649) x3650 (Ojs.int_to_js x3651)
    let (create : length:int -> t) =
      fun ~length:(x3652 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(Ojs.int_to_js x3652)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3653 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Int32Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3655 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3655) x3653)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3657 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3658 : int option) ->
          fun ?length:(x3659 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Int32Array")
                   (let x3660 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3660 "push" [|(ArrayBuffer.t_to_js x3657)|]);
                    (match x3658 with
                     | Some x3662 ->
                         ignore
                           (Ojs.call x3660 "push" [|(Ojs.int_to_js x3662)|])
                     | None -> ());
                    (match x3659 with
                     | Some x3661 ->
                         ignore
                           (Ojs.call x3660 "push" [|(Ojs.int_to_js x3661)|])
                     | None -> ());
                    x3660))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Int32Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3663 : int list) ->
        t_of_js
          (let x3666 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
           Ojs.call (Ojs.get_prop_ascii x3666 "of") "apply"
             [|x3666;((let x3664 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3665 : int) ->
                            ignore
                              (Ojs.call x3664 "push"
                                 [|(Ojs.int_to_js x3665)|])) x3663;
                       x3664))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3667 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Int32Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3667)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3669 : 'T Array.t) ->
        fun ~mapfn:(x3670 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3671 : any option) ->
            fun () ->
              t_of_js
                (let x3677 = Ojs.get_prop_ascii Ojs.global "Int32Array" in
                 Ojs.call (Ojs.get_prop_ascii x3677 "from") "apply"
                   [|x3677;((let x3672 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3672 "push"
                                  [|(Array.t_to_js Obj.magic x3669)|]);
                             ignore
                               (Ojs.call x3672 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3674 : Ojs.t) ->
                                          fun (x3675 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3670 ~v:(Obj.magic x3674)
                                                 ~k:(Ojs.int_of_js x3675))))|]);
                             (match x3671 with
                              | Some x3673 ->
                                  ignore
                                    (Ojs.call x3672 "push"
                                       [|(any_to_js x3673)|])
                              | None -> ());
                             x3672))|])
  end
module Int32ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3679 : Ojs.t) -> x3679
    and t_to_js : t -> Ojs.t = fun (x3678 : Ojs.t) -> x3678
    let (get_prototype : t -> Int32Array.t) =
      fun (x3680 : t) ->
        Int32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3680) "prototype")
    let (create : t -> length:int -> Int32Array.t) =
      fun (x3682 : t) ->
        fun ~length:(x3681 : int) ->
          Int32Array.t_of_js
            (Ojs.new_obj (t_to_js x3682) [|(Ojs.int_to_js x3681)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Int32Array.t) =
      fun (x3687 : t) ->
        fun ~array:(x3683 : (ArrayBuffer.t, int Array.t) union2) ->
          Int32Array.t_of_js
            (Ojs.new_obj (t_to_js x3687)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3685 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3685) x3683)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Int32Array.t)
      =
      fun (x3694 : t) ->
        fun ~buffer:(x3688 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3689 : int option) ->
            fun ?length:(x3690 : int option) ->
              fun () ->
                Int32Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3694)
                     (let x3691 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3691 "push"
                           [|(ArrayBuffer.t_to_js x3688)|]);
                      (match x3689 with
                       | Some x3693 ->
                           ignore
                             (Ojs.call x3691 "push" [|(Ojs.int_to_js x3693)|])
                       | None -> ());
                      (match x3690 with
                       | Some x3692 ->
                           ignore
                             (Ojs.call x3691 "push" [|(Ojs.int_to_js x3692)|])
                       | None -> ());
                      x3691))
    let (get_bytes_per_element : t -> int) =
      fun (x3695 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3695) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Int32Array.t) =
      fun (x3699 : t) ->
        fun (x3696 : int list) ->
          Int32Array.t_of_js
            (let x3700 = t_to_js x3699 in
             Ojs.call (Ojs.get_prop_ascii x3700 "of") "apply"
               [|x3700;((let x3697 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3698 : int) ->
                              ignore
                                (Ojs.call x3697 "push"
                                   [|(Ojs.int_to_js x3698)|])) x3696;
                         x3697))|])
    let (from : t -> array:int Array.t -> Int32Array.t) =
      fun (x3703 : t) ->
        fun ~array:(x3701 : int Array.t) ->
          Int32Array.t_of_js
            (Ojs.call (t_to_js x3703) "from"
               [|(Array.t_to_js Ojs.int_to_js x3701)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Int32Array.t)
      =
      fun (x3712 : t) ->
        fun ~array:(x3704 : 'T Array.t) ->
          fun ~mapfn:(x3705 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3706 : any option) ->
              fun () ->
                Int32Array.t_of_js
                  (let x3713 = t_to_js x3712 in
                   Ojs.call (Ojs.get_prop_ascii x3713 "from") "apply"
                     [|x3713;((let x3707 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3707 "push"
                                    [|(Array.t_to_js Obj.magic x3704)|]);
                               ignore
                                 (Ojs.call x3707 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3709 : Ojs.t) ->
                                            fun (x3710 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3705 ~v:(Obj.magic x3709)
                                                   ~k:(Ojs.int_of_js x3710))))|]);
                               (match x3706 with
                                | Some x3708 ->
                                    ignore
                                      (Ojs.call x3707 "push"
                                         [|(any_to_js x3708)|])
                                | None -> ());
                               x3707))|])
  end
let (int32_array : Int32ArrayConstructor.t) =
  Int32ArrayConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "Int32Array")
module Uint32Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3715 : Ojs.t) -> x3715
    and t_to_js : t -> Ojs.t = fun (x3714 : Ojs.t) -> x3714
    let (get_bytes_per_element : t -> int) =
      fun (x3716 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3716) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3717 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3717) "buffer")
    let (get_byte_length : t -> int) =
      fun (x3718 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3718) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x3719 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3719) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x3725 : t) ->
        fun ~target:(x3720 : int) ->
          fun ~start:(x3721 : int) ->
            fun ?end_:(x3722 : int option) ->
              fun () ->
                t_of_js
                  (let x3726 = t_to_js x3725 in
                   Ojs.call (Ojs.get_prop_ascii x3726 "copyWithin") "apply"
                     [|x3726;((let x3723 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3723 "push"
                                    [|(Ojs.int_to_js x3720)|]);
                               ignore
                                 (Ojs.call x3723 "push"
                                    [|(Ojs.int_to_js x3721)|]);
                               (match x3722 with
                                | Some x3724 ->
                                    ignore
                                      (Ojs.call x3723 "push"
                                         [|(Ojs.int_to_js x3724)|])
                                | None -> ());
                               x3723))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3734 : t) ->
        fun (x3727 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3728 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3735 = t_to_js x3734 in
                 Ojs.call (Ojs.get_prop_ascii x3735 "every") "apply"
                   [|x3735;((let x3729 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3729 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3731 : Ojs.t) ->
                                          fun (x3732 : Ojs.t) ->
                                            fun (x3733 : Ojs.t) ->
                                              unknown_to_js
                                                (x3727
                                                   ~value:(Ojs.int_of_js
                                                             x3731)
                                                   ~index:(Ojs.int_of_js
                                                             x3732)
                                                   ~array:(t_of_js x3733))))|]);
                             (match x3728 with
                              | Some x3730 ->
                                  ignore
                                    (Ojs.call x3729 "push"
                                       [|(any_to_js x3730)|])
                              | None -> ());
                             x3729))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3742 : t) ->
        fun ~value:(x3736 : int) ->
          fun ?start:(x3737 : int option) ->
            fun ?end_:(x3738 : int option) ->
              fun () ->
                t_of_js
                  (let x3743 = t_to_js x3742 in
                   Ojs.call (Ojs.get_prop_ascii x3743 "fill") "apply"
                     [|x3743;((let x3739 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3739 "push"
                                    [|(Ojs.int_to_js x3736)|]);
                               (match x3737 with
                                | Some x3741 ->
                                    ignore
                                      (Ojs.call x3739 "push"
                                         [|(Ojs.int_to_js x3741)|])
                                | None -> ());
                               (match x3738 with
                                | Some x3740 ->
                                    ignore
                                      (Ojs.call x3739 "push"
                                         [|(Ojs.int_to_js x3740)|])
                                | None -> ());
                               x3739))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3751 : t) ->
        fun (x3744 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3745 : any option) ->
            fun () ->
              t_of_js
                (let x3752 = t_to_js x3751 in
                 Ojs.call (Ojs.get_prop_ascii x3752 "filter") "apply"
                   [|x3752;((let x3746 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3746 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3748 : Ojs.t) ->
                                          fun (x3749 : Ojs.t) ->
                                            fun (x3750 : Ojs.t) ->
                                              any_to_js
                                                (x3744
                                                   ~value:(Ojs.int_of_js
                                                             x3748)
                                                   ~index:(Ojs.int_of_js
                                                             x3749)
                                                   ~array:(t_of_js x3750))))|]);
                             (match x3745 with
                              | Some x3747 ->
                                  ignore
                                    (Ojs.call x3746 "push"
                                       [|(any_to_js x3747)|])
                              | None -> ());
                             x3746))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x3760 : t) ->
        fun (x3753 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3754 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x3761 = t_to_js x3760 in
                 Ojs.call (Ojs.get_prop_ascii x3761 "find") "apply"
                   [|x3761;((let x3755 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3755 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3757 : Ojs.t) ->
                                          fun (x3758 : Ojs.t) ->
                                            fun (x3759 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3753
                                                   ~value:(Ojs.int_of_js
                                                             x3757)
                                                   ~index:(Ojs.int_of_js
                                                             x3758)
                                                   ~obj:(t_of_js x3759))))|]);
                             (match x3754 with
                              | Some x3756 ->
                                  ignore
                                    (Ojs.call x3755 "push"
                                       [|(any_to_js x3756)|])
                              | None -> ());
                             x3755))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x3770 : t) ->
        fun (x3763 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3764 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x3771 = t_to_js x3770 in
                 Ojs.call (Ojs.get_prop_ascii x3771 "findIndex") "apply"
                   [|x3771;((let x3765 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3765 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3767 : Ojs.t) ->
                                          fun (x3768 : Ojs.t) ->
                                            fun (x3769 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3763
                                                   ~value:(Ojs.int_of_js
                                                             x3767)
                                                   ~index:(Ojs.int_of_js
                                                             x3768)
                                                   ~obj:(t_of_js x3769))))|]);
                             (match x3764 with
                              | Some x3766 ->
                                  ignore
                                    (Ojs.call x3765 "push"
                                       [|(any_to_js x3766)|])
                              | None -> ());
                             x3765))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3779 : t) ->
        fun ~callbackfn:(x3772 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x3773 : any option) ->
            fun () ->
              ignore
                (let x3780 = t_to_js x3779 in
                 Ojs.call (Ojs.get_prop_ascii x3780 "forEach") "apply"
                   [|x3780;((let x3774 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3774 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3776 : Ojs.t) ->
                                          fun (x3777 : Ojs.t) ->
                                            fun (x3778 : Ojs.t) ->
                                              x3772
                                                ~value:(Ojs.int_of_js x3776)
                                                ~index:(Ojs.int_of_js x3777)
                                                ~array:(t_of_js x3778)))|]);
                             (match x3773 with
                              | Some x3775 ->
                                  ignore
                                    (Ojs.call x3774 "push"
                                       [|(any_to_js x3775)|])
                              | None -> ());
                             x3774))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x3785 : t) ->
        fun ~searchElement:(x3781 : int) ->
          fun ?fromIndex:(x3782 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3786 = t_to_js x3785 in
                 Ojs.call (Ojs.get_prop_ascii x3786 "indexOf") "apply"
                   [|x3786;((let x3783 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3783 "push"
                                  [|(Ojs.int_to_js x3781)|]);
                             (match x3782 with
                              | Some x3784 ->
                                  ignore
                                    (Ojs.call x3783 "push"
                                       [|(Ojs.int_to_js x3784)|])
                              | None -> ());
                             x3783))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x3790 : t) ->
        fun ?separator:(x3787 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x3791 = t_to_js x3790 in
               Ojs.call (Ojs.get_prop_ascii x3791 "join") "apply"
                 [|x3791;((let x3788 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3787 with
                            | Some x3789 ->
                                ignore
                                  (Ojs.call x3788 "push"
                                     [|(Ojs.string_to_js x3789)|])
                            | None -> ());
                           x3788))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x3796 : t) ->
        fun ~searchElement:(x3792 : int) ->
          fun ?fromIndex:(x3793 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x3797 = t_to_js x3796 in
                 Ojs.call (Ojs.get_prop_ascii x3797 "lastIndexOf") "apply"
                   [|x3797;((let x3794 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3794 "push"
                                  [|(Ojs.int_to_js x3792)|]);
                             (match x3793 with
                              | Some x3795 ->
                                  ignore
                                    (Ojs.call x3794 "push"
                                       [|(Ojs.int_to_js x3795)|])
                              | None -> ());
                             x3794))|])
    let (get_length : t -> int) =
      fun (x3798 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3798) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3806 : t) ->
        fun ~callbackfn:(x3799 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x3800 : any option) ->
            fun () ->
              t_of_js
                (let x3807 = t_to_js x3806 in
                 Ojs.call (Ojs.get_prop_ascii x3807 "map") "apply"
                   [|x3807;((let x3801 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3801 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3803 : Ojs.t) ->
                                          fun (x3804 : Ojs.t) ->
                                            fun (x3805 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3799
                                                   ~value:(Ojs.int_of_js
                                                             x3803)
                                                   ~index:(Ojs.int_of_js
                                                             x3804)
                                                   ~array:(t_of_js x3805))))|]);
                             (match x3800 with
                              | Some x3802 ->
                                  ignore
                                    (Ojs.call x3801 "push"
                                       [|(any_to_js x3802)|])
                              | None -> ());
                             x3801))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3813 : t) ->
        fun
          ~callbackfn:(x3808 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3813) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x3809 : Ojs.t) ->
                       fun (x3810 : Ojs.t) ->
                         fun (x3811 : Ojs.t) ->
                           fun (x3812 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3808 ~previousValue:(Ojs.int_of_js x3809)
                                  ~currentValue:(Ojs.int_of_js x3810)
                                  ~currentIndex:(Ojs.int_of_js x3811)
                                  ~array:(t_of_js x3812))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3820 : t) ->
        fun
          ~callbackfn:(x3814 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3819 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3820) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3815 : Ojs.t) ->
                         fun (x3816 : Ojs.t) ->
                           fun (x3817 : Ojs.t) ->
                             fun (x3818 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3814 ~previousValue:(Ojs.int_of_js x3815)
                                    ~currentValue:(Ojs.int_of_js x3816)
                                    ~currentIndex:(Ojs.int_of_js x3817)
                                    ~array:(t_of_js x3818))));(Ojs.int_to_js
                                                                 x3819)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3827 : t) ->
        fun
          ~callbackfn:(x3821 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3826 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3827) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x3822 : Ojs.t) ->
                         fun (x3823 : Ojs.t) ->
                           fun (x3824 : Ojs.t) ->
                             fun (x3825 : Ojs.t) ->
                               Obj.magic
                                 (x3821 ~previousValue:(Obj.magic x3822)
                                    ~currentValue:(Ojs.int_of_js x3823)
                                    ~currentIndex:(Ojs.int_of_js x3824)
                                    ~array:(t_of_js x3825))));(Obj.magic
                                                                 x3826)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x3833 : t) ->
        fun
          ~callbackfn:(x3828 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x3833) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x3829 : Ojs.t) ->
                       fun (x3830 : Ojs.t) ->
                         fun (x3831 : Ojs.t) ->
                           fun (x3832 : Ojs.t) ->
                             Ojs.int_to_js
                               (x3828 ~previousValue:(Ojs.int_of_js x3829)
                                  ~currentValue:(Ojs.int_of_js x3830)
                                  ~currentIndex:(Ojs.int_of_js x3831)
                                  ~array:(t_of_js x3832))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x3840 : t) ->
        fun
          ~callbackfn:(x3834 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x3839 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x3840) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3835 : Ojs.t) ->
                         fun (x3836 : Ojs.t) ->
                           fun (x3837 : Ojs.t) ->
                             fun (x3838 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x3834 ~previousValue:(Ojs.int_of_js x3835)
                                    ~currentValue:(Ojs.int_of_js x3836)
                                    ~currentIndex:(Ojs.int_of_js x3837)
                                    ~array:(t_of_js x3838))));(Ojs.int_to_js
                                                                 x3839)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x3847 : t) ->
        fun
          ~callbackfn:(x3841 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x3846 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x3847) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x3842 : Ojs.t) ->
                         fun (x3843 : Ojs.t) ->
                           fun (x3844 : Ojs.t) ->
                             fun (x3845 : Ojs.t) ->
                               Obj.magic
                                 (x3841 ~previousValue:(Obj.magic x3842)
                                    ~currentValue:(Ojs.int_of_js x3843)
                                    ~currentIndex:(Ojs.int_of_js x3844)
                                    ~array:(t_of_js x3845))));(Obj.magic
                                                                 x3846)|])
    let (reverse : t -> t) =
      fun (x3848 : t) -> t_of_js (Ojs.call (t_to_js x3848) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x3854 : t) ->
        fun ~array:(x3849 : int Array.t) ->
          fun ?offset:(x3850 : int option) ->
            fun () ->
              ignore
                (let x3855 = t_to_js x3854 in
                 Ojs.call (Ojs.get_prop_ascii x3855 "set") "apply"
                   [|x3855;((let x3851 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3851 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x3849)|]);
                             (match x3850 with
                              | Some x3852 ->
                                  ignore
                                    (Ojs.call x3851 "push"
                                       [|(Ojs.int_to_js x3852)|])
                              | None -> ());
                             x3851))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3861 : t) ->
        fun ?start:(x3856 : int option) ->
          fun ?end_:(x3857 : int option) ->
            fun () ->
              t_of_js
                (let x3862 = t_to_js x3861 in
                 Ojs.call (Ojs.get_prop_ascii x3862 "slice") "apply"
                   [|x3862;((let x3858 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3856 with
                              | Some x3860 ->
                                  ignore
                                    (Ojs.call x3858 "push"
                                       [|(Ojs.int_to_js x3860)|])
                              | None -> ());
                             (match x3857 with
                              | Some x3859 ->
                                  ignore
                                    (Ojs.call x3858 "push"
                                       [|(Ojs.int_to_js x3859)|])
                              | None -> ());
                             x3858))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3870 : t) ->
        fun (x3863 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3864 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3871 = t_to_js x3870 in
                 Ojs.call (Ojs.get_prop_ascii x3871 "some") "apply"
                   [|x3871;((let x3865 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3865 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3867 : Ojs.t) ->
                                          fun (x3868 : Ojs.t) ->
                                            fun (x3869 : Ojs.t) ->
                                              unknown_to_js
                                                (x3863
                                                   ~value:(Ojs.int_of_js
                                                             x3867)
                                                   ~index:(Ojs.int_of_js
                                                             x3868)
                                                   ~array:(t_of_js x3869))))|]);
                             (match x3864 with
                              | Some x3866 ->
                                  ignore
                                    (Ojs.call x3865 "push"
                                       [|(any_to_js x3866)|])
                              | None -> ());
                             x3865))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x3877 : t) ->
        fun ?compareFn:(x3872 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x3878 = t_to_js x3877 in
               Ojs.call (Ojs.get_prop_ascii x3878 "sort") "apply"
                 [|x3878;((let x3873 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3872 with
                            | Some x3874 ->
                                ignore
                                  (Ojs.call x3873 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x3875 : Ojs.t) ->
                                             fun (x3876 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x3874
                                                    ~a:(Ojs.int_of_js x3875)
                                                    ~b:(Ojs.int_of_js x3876))))|])
                            | None -> ());
                           x3873))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x3884 : t) ->
        fun ?begin_:(x3879 : int option) ->
          fun ?end_:(x3880 : int option) ->
            fun () ->
              t_of_js
                (let x3885 = t_to_js x3884 in
                 Ojs.call (Ojs.get_prop_ascii x3885 "subarray") "apply"
                   [|x3885;((let x3881 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x3879 with
                              | Some x3883 ->
                                  ignore
                                    (Ojs.call x3881 "push"
                                       [|(Ojs.int_to_js x3883)|])
                              | None -> ());
                             (match x3880 with
                              | Some x3882 ->
                                  ignore
                                    (Ojs.call x3881 "push"
                                       [|(Ojs.int_to_js x3882)|])
                              | None -> ());
                             x3881))|])
    let (to_locale_string : t -> string) =
      fun (x3886 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3886) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x3887 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x3887) "toString" [||])
    let (value_of : t -> t) =
      fun (x3888 : t) -> t_of_js (Ojs.call (t_to_js x3888) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x3889 : t) ->
        fun (x3890 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x3889) x3890)
    let (set : t -> int -> int -> unit) =
      fun (x3891 : t) ->
        fun (x3892 : int) ->
          fun (x3893 : int) ->
            Ojs.array_set (t_to_js x3891) x3892 (Ojs.int_to_js x3893)
    let (create : length:int -> t) =
      fun ~length:(x3894 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(Ojs.int_to_js x3894)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x3895 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Uint32Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x3897 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x3897) x3895)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x3899 : ArrayBuffer.t) ->
        fun ?byteOffset:(x3900 : int option) ->
          fun ?length:(x3901 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Uint32Array")
                   (let x3902 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3902 "push" [|(ArrayBuffer.t_to_js x3899)|]);
                    (match x3900 with
                     | Some x3904 ->
                         ignore
                           (Ojs.call x3902 "push" [|(Ojs.int_to_js x3904)|])
                     | None -> ());
                    (match x3901 with
                     | Some x3903 ->
                         ignore
                           (Ojs.call x3902 "push" [|(Ojs.int_to_js x3903)|])
                     | None -> ());
                    x3902))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Uint32Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x3905 : int list) ->
        t_of_js
          (let x3908 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
           Ojs.call (Ojs.get_prop_ascii x3908 "of") "apply"
             [|x3908;((let x3906 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x3907 : int) ->
                            ignore
                              (Ojs.call x3906 "push"
                                 [|(Ojs.int_to_js x3907)|])) x3905;
                       x3906))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x3909 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Uint32Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x3909)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x3911 : 'T Array.t) ->
        fun ~mapfn:(x3912 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x3913 : any option) ->
            fun () ->
              t_of_js
                (let x3919 = Ojs.get_prop_ascii Ojs.global "Uint32Array" in
                 Ojs.call (Ojs.get_prop_ascii x3919 "from") "apply"
                   [|x3919;((let x3914 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3914 "push"
                                  [|(Array.t_to_js Obj.magic x3911)|]);
                             ignore
                               (Ojs.call x3914 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x3916 : Ojs.t) ->
                                          fun (x3917 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x3912 ~v:(Obj.magic x3916)
                                                 ~k:(Ojs.int_of_js x3917))))|]);
                             (match x3913 with
                              | Some x3915 ->
                                  ignore
                                    (Ojs.call x3914 "push"
                                       [|(any_to_js x3915)|])
                              | None -> ());
                             x3914))|])
  end
module Uint32ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3921 : Ojs.t) -> x3921
    and t_to_js : t -> Ojs.t = fun (x3920 : Ojs.t) -> x3920
    let (get_prototype : t -> Uint32Array.t) =
      fun (x3922 : t) ->
        Uint32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x3922) "prototype")
    let (create : t -> length:int -> Uint32Array.t) =
      fun (x3924 : t) ->
        fun ~length:(x3923 : int) ->
          Uint32Array.t_of_js
            (Ojs.new_obj (t_to_js x3924) [|(Ojs.int_to_js x3923)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Uint32Array.t) =
      fun (x3929 : t) ->
        fun ~array:(x3925 : (ArrayBuffer.t, int Array.t) union2) ->
          Uint32Array.t_of_js
            (Ojs.new_obj (t_to_js x3929)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x3927 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x3927) x3925)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Uint32Array.t)
      =
      fun (x3936 : t) ->
        fun ~buffer:(x3930 : ArrayBuffer.t) ->
          fun ?byteOffset:(x3931 : int option) ->
            fun ?length:(x3932 : int option) ->
              fun () ->
                Uint32Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x3936)
                     (let x3933 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x3933 "push"
                           [|(ArrayBuffer.t_to_js x3930)|]);
                      (match x3931 with
                       | Some x3935 ->
                           ignore
                             (Ojs.call x3933 "push" [|(Ojs.int_to_js x3935)|])
                       | None -> ());
                      (match x3932 with
                       | Some x3934 ->
                           ignore
                             (Ojs.call x3933 "push" [|(Ojs.int_to_js x3934)|])
                       | None -> ());
                      x3933))
    let (get_bytes_per_element : t -> int) =
      fun (x3937 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3937) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Uint32Array.t) =
      fun (x3941 : t) ->
        fun (x3938 : int list) ->
          Uint32Array.t_of_js
            (let x3942 = t_to_js x3941 in
             Ojs.call (Ojs.get_prop_ascii x3942 "of") "apply"
               [|x3942;((let x3939 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x3940 : int) ->
                              ignore
                                (Ojs.call x3939 "push"
                                   [|(Ojs.int_to_js x3940)|])) x3938;
                         x3939))|])
    let (from : t -> array:int Array.t -> Uint32Array.t) =
      fun (x3945 : t) ->
        fun ~array:(x3943 : int Array.t) ->
          Uint32Array.t_of_js
            (Ojs.call (t_to_js x3945) "from"
               [|(Array.t_to_js Ojs.int_to_js x3943)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Uint32Array.t)
      =
      fun (x3954 : t) ->
        fun ~array:(x3946 : 'T Array.t) ->
          fun ~mapfn:(x3947 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x3948 : any option) ->
              fun () ->
                Uint32Array.t_of_js
                  (let x3955 = t_to_js x3954 in
                   Ojs.call (Ojs.get_prop_ascii x3955 "from") "apply"
                     [|x3955;((let x3949 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3949 "push"
                                    [|(Array.t_to_js Obj.magic x3946)|]);
                               ignore
                                 (Ojs.call x3949 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x3951 : Ojs.t) ->
                                            fun (x3952 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x3947 ~v:(Obj.magic x3951)
                                                   ~k:(Ojs.int_of_js x3952))))|]);
                               (match x3948 with
                                | Some x3950 ->
                                    ignore
                                      (Ojs.call x3949 "push"
                                         [|(any_to_js x3950)|])
                                | None -> ());
                               x3949))|])
  end
let (uint32_array : Uint32ArrayConstructor.t) =
  Uint32ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Uint32Array")
module Float32Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x3957 : Ojs.t) -> x3957
    and t_to_js : t -> Ojs.t = fun (x3956 : Ojs.t) -> x3956
    let (get_bytes_per_element : t -> int) =
      fun (x3958 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x3958) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x3959 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x3959) "buffer")
    let (get_byte_length : t -> int) =
      fun (x3960 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3960) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x3961 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3961) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x3967 : t) ->
        fun ~target:(x3962 : int) ->
          fun ~start:(x3963 : int) ->
            fun ?end_:(x3964 : int option) ->
              fun () ->
                t_of_js
                  (let x3968 = t_to_js x3967 in
                   Ojs.call (Ojs.get_prop_ascii x3968 "copyWithin") "apply"
                     [|x3968;((let x3965 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3965 "push"
                                    [|(Ojs.int_to_js x3962)|]);
                               ignore
                                 (Ojs.call x3965 "push"
                                    [|(Ojs.int_to_js x3963)|]);
                               (match x3964 with
                                | Some x3966 ->
                                    ignore
                                      (Ojs.call x3965 "push"
                                         [|(Ojs.int_to_js x3966)|])
                                | None -> ());
                               x3965))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x3976 : t) ->
        fun (x3969 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x3970 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x3977 = t_to_js x3976 in
                 Ojs.call (Ojs.get_prop_ascii x3977 "every") "apply"
                   [|x3977;((let x3971 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3971 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3973 : Ojs.t) ->
                                          fun (x3974 : Ojs.t) ->
                                            fun (x3975 : Ojs.t) ->
                                              unknown_to_js
                                                (x3969
                                                   ~value:(Ojs.int_of_js
                                                             x3973)
                                                   ~index:(Ojs.int_of_js
                                                             x3974)
                                                   ~array:(t_of_js x3975))))|]);
                             (match x3970 with
                              | Some x3972 ->
                                  ignore
                                    (Ojs.call x3971 "push"
                                       [|(any_to_js x3972)|])
                              | None -> ());
                             x3971))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x3984 : t) ->
        fun ~value:(x3978 : int) ->
          fun ?start:(x3979 : int option) ->
            fun ?end_:(x3980 : int option) ->
              fun () ->
                t_of_js
                  (let x3985 = t_to_js x3984 in
                   Ojs.call (Ojs.get_prop_ascii x3985 "fill") "apply"
                     [|x3985;((let x3981 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3981 "push"
                                    [|(Ojs.int_to_js x3978)|]);
                               (match x3979 with
                                | Some x3983 ->
                                    ignore
                                      (Ojs.call x3981 "push"
                                         [|(Ojs.int_to_js x3983)|])
                                | None -> ());
                               (match x3980 with
                                | Some x3982 ->
                                    ignore
                                      (Ojs.call x3981 "push"
                                         [|(Ojs.int_to_js x3982)|])
                                | None -> ());
                               x3981))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x3993 : t) ->
        fun (x3986 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x3987 : any option) ->
            fun () ->
              t_of_js
                (let x3994 = t_to_js x3993 in
                 Ojs.call (Ojs.get_prop_ascii x3994 "filter") "apply"
                   [|x3994;((let x3988 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3988 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3990 : Ojs.t) ->
                                          fun (x3991 : Ojs.t) ->
                                            fun (x3992 : Ojs.t) ->
                                              any_to_js
                                                (x3986
                                                   ~value:(Ojs.int_of_js
                                                             x3990)
                                                   ~index:(Ojs.int_of_js
                                                             x3991)
                                                   ~array:(t_of_js x3992))))|]);
                             (match x3987 with
                              | Some x3989 ->
                                  ignore
                                    (Ojs.call x3988 "push"
                                       [|(any_to_js x3989)|])
                              | None -> ());
                             x3988))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x4002 : t) ->
        fun (x3995 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x3996 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x4003 = t_to_js x4002 in
                 Ojs.call (Ojs.get_prop_ascii x4003 "find") "apply"
                   [|x4003;((let x3997 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3997 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3999 : Ojs.t) ->
                                          fun (x4000 : Ojs.t) ->
                                            fun (x4001 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x3995
                                                   ~value:(Ojs.int_of_js
                                                             x3999)
                                                   ~index:(Ojs.int_of_js
                                                             x4000)
                                                   ~obj:(t_of_js x4001))))|]);
                             (match x3996 with
                              | Some x3998 ->
                                  ignore
                                    (Ojs.call x3997 "push"
                                       [|(any_to_js x3998)|])
                              | None -> ());
                             x3997))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x4012 : t) ->
        fun (x4005 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x4006 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x4013 = t_to_js x4012 in
                 Ojs.call (Ojs.get_prop_ascii x4013 "findIndex") "apply"
                   [|x4013;((let x4007 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4007 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4009 : Ojs.t) ->
                                          fun (x4010 : Ojs.t) ->
                                            fun (x4011 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x4005
                                                   ~value:(Ojs.int_of_js
                                                             x4009)
                                                   ~index:(Ojs.int_of_js
                                                             x4010)
                                                   ~obj:(t_of_js x4011))))|]);
                             (match x4006 with
                              | Some x4008 ->
                                  ignore
                                    (Ojs.call x4007 "push"
                                       [|(any_to_js x4008)|])
                              | None -> ());
                             x4007))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4021 : t) ->
        fun ~callbackfn:(x4014 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x4015 : any option) ->
            fun () ->
              ignore
                (let x4022 = t_to_js x4021 in
                 Ojs.call (Ojs.get_prop_ascii x4022 "forEach") "apply"
                   [|x4022;((let x4016 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4016 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4018 : Ojs.t) ->
                                          fun (x4019 : Ojs.t) ->
                                            fun (x4020 : Ojs.t) ->
                                              x4014
                                                ~value:(Ojs.int_of_js x4018)
                                                ~index:(Ojs.int_of_js x4019)
                                                ~array:(t_of_js x4020)))|]);
                             (match x4015 with
                              | Some x4017 ->
                                  ignore
                                    (Ojs.call x4016 "push"
                                       [|(any_to_js x4017)|])
                              | None -> ());
                             x4016))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x4027 : t) ->
        fun ~searchElement:(x4023 : int) ->
          fun ?fromIndex:(x4024 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4028 = t_to_js x4027 in
                 Ojs.call (Ojs.get_prop_ascii x4028 "indexOf") "apply"
                   [|x4028;((let x4025 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4025 "push"
                                  [|(Ojs.int_to_js x4023)|]);
                             (match x4024 with
                              | Some x4026 ->
                                  ignore
                                    (Ojs.call x4025 "push"
                                       [|(Ojs.int_to_js x4026)|])
                              | None -> ());
                             x4025))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x4032 : t) ->
        fun ?separator:(x4029 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x4033 = t_to_js x4032 in
               Ojs.call (Ojs.get_prop_ascii x4033 "join") "apply"
                 [|x4033;((let x4030 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4029 with
                            | Some x4031 ->
                                ignore
                                  (Ojs.call x4030 "push"
                                     [|(Ojs.string_to_js x4031)|])
                            | None -> ());
                           x4030))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x4038 : t) ->
        fun ~searchElement:(x4034 : int) ->
          fun ?fromIndex:(x4035 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4039 = t_to_js x4038 in
                 Ojs.call (Ojs.get_prop_ascii x4039 "lastIndexOf") "apply"
                   [|x4039;((let x4036 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4036 "push"
                                  [|(Ojs.int_to_js x4034)|]);
                             (match x4035 with
                              | Some x4037 ->
                                  ignore
                                    (Ojs.call x4036 "push"
                                       [|(Ojs.int_to_js x4037)|])
                              | None -> ());
                             x4036))|])
    let (get_length : t -> int) =
      fun (x4040 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4040) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x4048 : t) ->
        fun ~callbackfn:(x4041 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x4042 : any option) ->
            fun () ->
              t_of_js
                (let x4049 = t_to_js x4048 in
                 Ojs.call (Ojs.get_prop_ascii x4049 "map") "apply"
                   [|x4049;((let x4043 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4043 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4045 : Ojs.t) ->
                                          fun (x4046 : Ojs.t) ->
                                            fun (x4047 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4041
                                                   ~value:(Ojs.int_of_js
                                                             x4045)
                                                   ~index:(Ojs.int_of_js
                                                             x4046)
                                                   ~array:(t_of_js x4047))))|]);
                             (match x4042 with
                              | Some x4044 ->
                                  ignore
                                    (Ojs.call x4043 "push"
                                       [|(any_to_js x4044)|])
                              | None -> ());
                             x4043))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4055 : t) ->
        fun
          ~callbackfn:(x4050 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4055) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x4051 : Ojs.t) ->
                       fun (x4052 : Ojs.t) ->
                         fun (x4053 : Ojs.t) ->
                           fun (x4054 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4050 ~previousValue:(Ojs.int_of_js x4051)
                                  ~currentValue:(Ojs.int_of_js x4052)
                                  ~currentIndex:(Ojs.int_of_js x4053)
                                  ~array:(t_of_js x4054))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4062 : t) ->
        fun
          ~callbackfn:(x4056 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4061 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4062) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4057 : Ojs.t) ->
                         fun (x4058 : Ojs.t) ->
                           fun (x4059 : Ojs.t) ->
                             fun (x4060 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4056 ~previousValue:(Ojs.int_of_js x4057)
                                    ~currentValue:(Ojs.int_of_js x4058)
                                    ~currentIndex:(Ojs.int_of_js x4059)
                                    ~array:(t_of_js x4060))));(Ojs.int_to_js
                                                                 x4061)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4069 : t) ->
        fun
          ~callbackfn:(x4063 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4068 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4069) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4064 : Ojs.t) ->
                         fun (x4065 : Ojs.t) ->
                           fun (x4066 : Ojs.t) ->
                             fun (x4067 : Ojs.t) ->
                               Obj.magic
                                 (x4063 ~previousValue:(Obj.magic x4064)
                                    ~currentValue:(Ojs.int_of_js x4065)
                                    ~currentIndex:(Ojs.int_of_js x4066)
                                    ~array:(t_of_js x4067))));(Obj.magic
                                                                 x4068)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4075 : t) ->
        fun
          ~callbackfn:(x4070 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4075) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x4071 : Ojs.t) ->
                       fun (x4072 : Ojs.t) ->
                         fun (x4073 : Ojs.t) ->
                           fun (x4074 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4070 ~previousValue:(Ojs.int_of_js x4071)
                                  ~currentValue:(Ojs.int_of_js x4072)
                                  ~currentIndex:(Ojs.int_of_js x4073)
                                  ~array:(t_of_js x4074))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4082 : t) ->
        fun
          ~callbackfn:(x4076 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4081 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4082) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4077 : Ojs.t) ->
                         fun (x4078 : Ojs.t) ->
                           fun (x4079 : Ojs.t) ->
                             fun (x4080 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4076 ~previousValue:(Ojs.int_of_js x4077)
                                    ~currentValue:(Ojs.int_of_js x4078)
                                    ~currentIndex:(Ojs.int_of_js x4079)
                                    ~array:(t_of_js x4080))));(Ojs.int_to_js
                                                                 x4081)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4089 : t) ->
        fun
          ~callbackfn:(x4083 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4088 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4089) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4084 : Ojs.t) ->
                         fun (x4085 : Ojs.t) ->
                           fun (x4086 : Ojs.t) ->
                             fun (x4087 : Ojs.t) ->
                               Obj.magic
                                 (x4083 ~previousValue:(Obj.magic x4084)
                                    ~currentValue:(Ojs.int_of_js x4085)
                                    ~currentIndex:(Ojs.int_of_js x4086)
                                    ~array:(t_of_js x4087))));(Obj.magic
                                                                 x4088)|])
    let (reverse : t -> t) =
      fun (x4090 : t) -> t_of_js (Ojs.call (t_to_js x4090) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x4096 : t) ->
        fun ~array:(x4091 : int Array.t) ->
          fun ?offset:(x4092 : int option) ->
            fun () ->
              ignore
                (let x4097 = t_to_js x4096 in
                 Ojs.call (Ojs.get_prop_ascii x4097 "set") "apply"
                   [|x4097;((let x4093 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4093 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x4091)|]);
                             (match x4092 with
                              | Some x4094 ->
                                  ignore
                                    (Ojs.call x4093 "push"
                                       [|(Ojs.int_to_js x4094)|])
                              | None -> ());
                             x4093))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x4103 : t) ->
        fun ?start:(x4098 : int option) ->
          fun ?end_:(x4099 : int option) ->
            fun () ->
              t_of_js
                (let x4104 = t_to_js x4103 in
                 Ojs.call (Ojs.get_prop_ascii x4104 "slice") "apply"
                   [|x4104;((let x4100 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4098 with
                              | Some x4102 ->
                                  ignore
                                    (Ojs.call x4100 "push"
                                       [|(Ojs.int_to_js x4102)|])
                              | None -> ());
                             (match x4099 with
                              | Some x4101 ->
                                  ignore
                                    (Ojs.call x4100 "push"
                                       [|(Ojs.int_to_js x4101)|])
                              | None -> ());
                             x4100))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x4112 : t) ->
        fun (x4105 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x4106 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x4113 = t_to_js x4112 in
                 Ojs.call (Ojs.get_prop_ascii x4113 "some") "apply"
                   [|x4113;((let x4107 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4107 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4109 : Ojs.t) ->
                                          fun (x4110 : Ojs.t) ->
                                            fun (x4111 : Ojs.t) ->
                                              unknown_to_js
                                                (x4105
                                                   ~value:(Ojs.int_of_js
                                                             x4109)
                                                   ~index:(Ojs.int_of_js
                                                             x4110)
                                                   ~array:(t_of_js x4111))))|]);
                             (match x4106 with
                              | Some x4108 ->
                                  ignore
                                    (Ojs.call x4107 "push"
                                       [|(any_to_js x4108)|])
                              | None -> ());
                             x4107))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x4119 : t) ->
        fun ?compareFn:(x4114 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x4120 = t_to_js x4119 in
               Ojs.call (Ojs.get_prop_ascii x4120 "sort") "apply"
                 [|x4120;((let x4115 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4114 with
                            | Some x4116 ->
                                ignore
                                  (Ojs.call x4115 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x4117 : Ojs.t) ->
                                             fun (x4118 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x4116
                                                    ~a:(Ojs.int_of_js x4117)
                                                    ~b:(Ojs.int_of_js x4118))))|])
                            | None -> ());
                           x4115))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x4126 : t) ->
        fun ?begin_:(x4121 : int option) ->
          fun ?end_:(x4122 : int option) ->
            fun () ->
              t_of_js
                (let x4127 = t_to_js x4126 in
                 Ojs.call (Ojs.get_prop_ascii x4127 "subarray") "apply"
                   [|x4127;((let x4123 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4121 with
                              | Some x4125 ->
                                  ignore
                                    (Ojs.call x4123 "push"
                                       [|(Ojs.int_to_js x4125)|])
                              | None -> ());
                             (match x4122 with
                              | Some x4124 ->
                                  ignore
                                    (Ojs.call x4123 "push"
                                       [|(Ojs.int_to_js x4124)|])
                              | None -> ());
                             x4123))|])
    let (to_locale_string : t -> string) =
      fun (x4128 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4128) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x4129 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4129) "toString" [||])
    let (value_of : t -> t) =
      fun (x4130 : t) -> t_of_js (Ojs.call (t_to_js x4130) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x4131 : t) ->
        fun (x4132 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x4131) x4132)
    let (set : t -> int -> int -> unit) =
      fun (x4133 : t) ->
        fun (x4134 : int) ->
          fun (x4135 : int) ->
            Ojs.array_set (t_to_js x4133) x4134 (Ojs.int_to_js x4135)
    let (create : length:int -> t) =
      fun ~length:(x4136 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(Ojs.int_to_js x4136)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x4137 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float32Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x4139 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x4139) x4137)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x4141 : ArrayBuffer.t) ->
        fun ?byteOffset:(x4142 : int option) ->
          fun ?length:(x4143 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Float32Array")
                   (let x4144 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4144 "push" [|(ArrayBuffer.t_to_js x4141)|]);
                    (match x4142 with
                     | Some x4146 ->
                         ignore
                           (Ojs.call x4144 "push" [|(Ojs.int_to_js x4146)|])
                     | None -> ());
                    (match x4143 with
                     | Some x4145 ->
                         ignore
                           (Ojs.call x4144 "push" [|(Ojs.int_to_js x4145)|])
                     | None -> ());
                    x4144))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float32Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x4147 : int list) ->
        t_of_js
          (let x4150 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
           Ojs.call (Ojs.get_prop_ascii x4150 "of") "apply"
             [|x4150;((let x4148 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4149 : int) ->
                            ignore
                              (Ojs.call x4148 "push"
                                 [|(Ojs.int_to_js x4149)|])) x4147;
                       x4148))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x4151 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Float32Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x4151)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x4153 : 'T Array.t) ->
        fun ~mapfn:(x4154 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x4155 : any option) ->
            fun () ->
              t_of_js
                (let x4161 = Ojs.get_prop_ascii Ojs.global "Float32Array" in
                 Ojs.call (Ojs.get_prop_ascii x4161 "from") "apply"
                   [|x4161;((let x4156 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4156 "push"
                                  [|(Array.t_to_js Obj.magic x4153)|]);
                             ignore
                               (Ojs.call x4156 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x4158 : Ojs.t) ->
                                          fun (x4159 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x4154 ~v:(Obj.magic x4158)
                                                 ~k:(Ojs.int_of_js x4159))))|]);
                             (match x4155 with
                              | Some x4157 ->
                                  ignore
                                    (Ojs.call x4156 "push"
                                       [|(any_to_js x4157)|])
                              | None -> ());
                             x4156))|])
  end
module Float32ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4163 : Ojs.t) -> x4163
    and t_to_js : t -> Ojs.t = fun (x4162 : Ojs.t) -> x4162
    let (get_prototype : t -> Float32Array.t) =
      fun (x4164 : t) ->
        Float32Array.t_of_js (Ojs.get_prop_ascii (t_to_js x4164) "prototype")
    let (create : t -> length:int -> Float32Array.t) =
      fun (x4166 : t) ->
        fun ~length:(x4165 : int) ->
          Float32Array.t_of_js
            (Ojs.new_obj (t_to_js x4166) [|(Ojs.int_to_js x4165)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Float32Array.t) =
      fun (x4171 : t) ->
        fun ~array:(x4167 : (ArrayBuffer.t, int Array.t) union2) ->
          Float32Array.t_of_js
            (Ojs.new_obj (t_to_js x4171)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x4169 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x4169) x4167)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Float32Array.t)
      =
      fun (x4178 : t) ->
        fun ~buffer:(x4172 : ArrayBuffer.t) ->
          fun ?byteOffset:(x4173 : int option) ->
            fun ?length:(x4174 : int option) ->
              fun () ->
                Float32Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x4178)
                     (let x4175 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4175 "push"
                           [|(ArrayBuffer.t_to_js x4172)|]);
                      (match x4173 with
                       | Some x4177 ->
                           ignore
                             (Ojs.call x4175 "push" [|(Ojs.int_to_js x4177)|])
                       | None -> ());
                      (match x4174 with
                       | Some x4176 ->
                           ignore
                             (Ojs.call x4175 "push" [|(Ojs.int_to_js x4176)|])
                       | None -> ());
                      x4175))
    let (get_bytes_per_element : t -> int) =
      fun (x4179 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x4179) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Float32Array.t) =
      fun (x4183 : t) ->
        fun (x4180 : int list) ->
          Float32Array.t_of_js
            (let x4184 = t_to_js x4183 in
             Ojs.call (Ojs.get_prop_ascii x4184 "of") "apply"
               [|x4184;((let x4181 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x4182 : int) ->
                              ignore
                                (Ojs.call x4181 "push"
                                   [|(Ojs.int_to_js x4182)|])) x4180;
                         x4181))|])
    let (from : t -> array:int Array.t -> Float32Array.t) =
      fun (x4187 : t) ->
        fun ~array:(x4185 : int Array.t) ->
          Float32Array.t_of_js
            (Ojs.call (t_to_js x4187) "from"
               [|(Array.t_to_js Ojs.int_to_js x4185)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Float32Array.t)
      =
      fun (x4196 : t) ->
        fun ~array:(x4188 : 'T Array.t) ->
          fun ~mapfn:(x4189 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x4190 : any option) ->
              fun () ->
                Float32Array.t_of_js
                  (let x4197 = t_to_js x4196 in
                   Ojs.call (Ojs.get_prop_ascii x4197 "from") "apply"
                     [|x4197;((let x4191 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4191 "push"
                                    [|(Array.t_to_js Obj.magic x4188)|]);
                               ignore
                                 (Ojs.call x4191 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4193 : Ojs.t) ->
                                            fun (x4194 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4189 ~v:(Obj.magic x4193)
                                                   ~k:(Ojs.int_of_js x4194))))|]);
                               (match x4190 with
                                | Some x4192 ->
                                    ignore
                                      (Ojs.call x4191 "push"
                                         [|(any_to_js x4192)|])
                                | None -> ());
                               x4191))|])
  end
let (float32_array : Float32ArrayConstructor.t) =
  Float32ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Float32Array")
module Float64Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4199 : Ojs.t) -> x4199
    and t_to_js : t -> Ojs.t = fun (x4198 : Ojs.t) -> x4198
    let (get_bytes_per_element : t -> int) =
      fun (x4200 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x4200) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x4201 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x4201) "buffer")
    let (get_byte_length : t -> int) =
      fun (x4202 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4202) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x4203 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4203) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x4209 : t) ->
        fun ~target:(x4204 : int) ->
          fun ~start:(x4205 : int) ->
            fun ?end_:(x4206 : int option) ->
              fun () ->
                t_of_js
                  (let x4210 = t_to_js x4209 in
                   Ojs.call (Ojs.get_prop_ascii x4210 "copyWithin") "apply"
                     [|x4210;((let x4207 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4207 "push"
                                    [|(Ojs.int_to_js x4204)|]);
                               ignore
                                 (Ojs.call x4207 "push"
                                    [|(Ojs.int_to_js x4205)|]);
                               (match x4206 with
                                | Some x4208 ->
                                    ignore
                                      (Ojs.call x4207 "push"
                                         [|(Ojs.int_to_js x4208)|])
                                | None -> ());
                               x4207))|])
    let (every :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x4218 : t) ->
        fun (x4211 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x4212 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x4219 = t_to_js x4218 in
                 Ojs.call (Ojs.get_prop_ascii x4219 "every") "apply"
                   [|x4219;((let x4213 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4213 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4215 : Ojs.t) ->
                                          fun (x4216 : Ojs.t) ->
                                            fun (x4217 : Ojs.t) ->
                                              unknown_to_js
                                                (x4211
                                                   ~value:(Ojs.int_of_js
                                                             x4215)
                                                   ~index:(Ojs.int_of_js
                                                             x4216)
                                                   ~array:(t_of_js x4217))))|]);
                             (match x4212 with
                              | Some x4214 ->
                                  ignore
                                    (Ojs.call x4213 "push"
                                       [|(any_to_js x4214)|])
                              | None -> ());
                             x4213))|])
    let (fill : t -> value:int -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x4226 : t) ->
        fun ~value:(x4220 : int) ->
          fun ?start:(x4221 : int option) ->
            fun ?end_:(x4222 : int option) ->
              fun () ->
                t_of_js
                  (let x4227 = t_to_js x4226 in
                   Ojs.call (Ojs.get_prop_ascii x4227 "fill") "apply"
                     [|x4227;((let x4223 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4223 "push"
                                    [|(Ojs.int_to_js x4220)|]);
                               (match x4221 with
                                | Some x4225 ->
                                    ignore
                                      (Ojs.call x4223 "push"
                                         [|(Ojs.int_to_js x4225)|])
                                | None -> ());
                               (match x4222 with
                                | Some x4224 ->
                                    ignore
                                      (Ojs.call x4223 "push"
                                         [|(Ojs.int_to_js x4224)|])
                                | None -> ());
                               x4223))|])
    let (filter :
      t ->
        (value:int -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x4235 : t) ->
        fun (x4228 : value:int -> index:int -> array:t -> any) ->
          fun ?thisArg:(x4229 : any option) ->
            fun () ->
              t_of_js
                (let x4236 = t_to_js x4235 in
                 Ojs.call (Ojs.get_prop_ascii x4236 "filter") "apply"
                   [|x4236;((let x4230 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4230 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4232 : Ojs.t) ->
                                          fun (x4233 : Ojs.t) ->
                                            fun (x4234 : Ojs.t) ->
                                              any_to_js
                                                (x4228
                                                   ~value:(Ojs.int_of_js
                                                             x4232)
                                                   ~index:(Ojs.int_of_js
                                                             x4233)
                                                   ~array:(t_of_js x4234))))|]);
                             (match x4229 with
                              | Some x4231 ->
                                  ignore
                                    (Ojs.call x4230 "push"
                                       [|(any_to_js x4231)|])
                              | None -> ());
                             x4230))|])
    let (find :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int or_undefined)
      =
      fun (x4244 : t) ->
        fun (x4237 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x4238 : any option) ->
            fun () ->
              or_undefined_of_js Ojs.int_of_js
                (let x4245 = t_to_js x4244 in
                 Ojs.call (Ojs.get_prop_ascii x4245 "find") "apply"
                   [|x4245;((let x4239 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4239 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4241 : Ojs.t) ->
                                          fun (x4242 : Ojs.t) ->
                                            fun (x4243 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x4237
                                                   ~value:(Ojs.int_of_js
                                                             x4241)
                                                   ~index:(Ojs.int_of_js
                                                             x4242)
                                                   ~obj:(t_of_js x4243))))|]);
                             (match x4238 with
                              | Some x4240 ->
                                  ignore
                                    (Ojs.call x4239 "push"
                                       [|(any_to_js x4240)|])
                              | None -> ());
                             x4239))|])
    let (find_index :
      t ->
        (value:int -> index:int -> obj:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x4254 : t) ->
        fun (x4247 : value:int -> index:int -> obj:t -> bool) ->
          fun ?thisArg:(x4248 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x4255 = t_to_js x4254 in
                 Ojs.call (Ojs.get_prop_ascii x4255 "findIndex") "apply"
                   [|x4255;((let x4249 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4249 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4251 : Ojs.t) ->
                                          fun (x4252 : Ojs.t) ->
                                            fun (x4253 : Ojs.t) ->
                                              Ojs.bool_to_js
                                                (x4247
                                                   ~value:(Ojs.int_of_js
                                                             x4251)
                                                   ~index:(Ojs.int_of_js
                                                             x4252)
                                                   ~obj:(t_of_js x4253))))|]);
                             (match x4248 with
                              | Some x4250 ->
                                  ignore
                                    (Ojs.call x4249 "push"
                                       [|(any_to_js x4250)|])
                              | None -> ());
                             x4249))|])
    let (for_each :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x4263 : t) ->
        fun ~callbackfn:(x4256 : value:int -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x4257 : any option) ->
            fun () ->
              ignore
                (let x4264 = t_to_js x4263 in
                 Ojs.call (Ojs.get_prop_ascii x4264 "forEach") "apply"
                   [|x4264;((let x4258 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4258 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4260 : Ojs.t) ->
                                          fun (x4261 : Ojs.t) ->
                                            fun (x4262 : Ojs.t) ->
                                              x4256
                                                ~value:(Ojs.int_of_js x4260)
                                                ~index:(Ojs.int_of_js x4261)
                                                ~array:(t_of_js x4262)))|]);
                             (match x4257 with
                              | Some x4259 ->
                                  ignore
                                    (Ojs.call x4258 "push"
                                       [|(any_to_js x4259)|])
                              | None -> ());
                             x4258))|])
    let (index_of : t -> searchElement:int -> ?fromIndex:int -> unit -> int)
      =
      fun (x4269 : t) ->
        fun ~searchElement:(x4265 : int) ->
          fun ?fromIndex:(x4266 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4270 = t_to_js x4269 in
                 Ojs.call (Ojs.get_prop_ascii x4270 "indexOf") "apply"
                   [|x4270;((let x4267 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4267 "push"
                                  [|(Ojs.int_to_js x4265)|]);
                             (match x4266 with
                              | Some x4268 ->
                                  ignore
                                    (Ojs.call x4267 "push"
                                       [|(Ojs.int_to_js x4268)|])
                              | None -> ());
                             x4267))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x4274 : t) ->
        fun ?separator:(x4271 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x4275 = t_to_js x4274 in
               Ojs.call (Ojs.get_prop_ascii x4275 "join") "apply"
                 [|x4275;((let x4272 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4271 with
                            | Some x4273 ->
                                ignore
                                  (Ojs.call x4272 "push"
                                     [|(Ojs.string_to_js x4273)|])
                            | None -> ());
                           x4272))|])
    let (last_index_of :
      t -> searchElement:int -> ?fromIndex:int -> unit -> int) =
      fun (x4280 : t) ->
        fun ~searchElement:(x4276 : int) ->
          fun ?fromIndex:(x4277 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x4281 = t_to_js x4280 in
                 Ojs.call (Ojs.get_prop_ascii x4281 "lastIndexOf") "apply"
                   [|x4281;((let x4278 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4278 "push"
                                  [|(Ojs.int_to_js x4276)|]);
                             (match x4277 with
                              | Some x4279 ->
                                  ignore
                                    (Ojs.call x4278 "push"
                                       [|(Ojs.int_to_js x4279)|])
                              | None -> ());
                             x4278))|])
    let (get_length : t -> int) =
      fun (x4282 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x4282) "length")
    let (map :
      t ->
        callbackfn:(value:int -> index:int -> array:t -> int) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x4290 : t) ->
        fun ~callbackfn:(x4283 : value:int -> index:int -> array:t -> int) ->
          fun ?thisArg:(x4284 : any option) ->
            fun () ->
              t_of_js
                (let x4291 = t_to_js x4290 in
                 Ojs.call (Ojs.get_prop_ascii x4291 "map") "apply"
                   [|x4291;((let x4285 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4285 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4287 : Ojs.t) ->
                                          fun (x4288 : Ojs.t) ->
                                            fun (x4289 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4283
                                                   ~value:(Ojs.int_of_js
                                                             x4287)
                                                   ~index:(Ojs.int_of_js
                                                             x4288)
                                                   ~array:(t_of_js x4289))))|]);
                             (match x4284 with
                              | Some x4286 ->
                                  ignore
                                    (Ojs.call x4285 "push"
                                       [|(any_to_js x4286)|])
                              | None -> ());
                             x4285))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4297 : t) ->
        fun
          ~callbackfn:(x4292 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4297) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x4293 : Ojs.t) ->
                       fun (x4294 : Ojs.t) ->
                         fun (x4295 : Ojs.t) ->
                           fun (x4296 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4292 ~previousValue:(Ojs.int_of_js x4293)
                                  ~currentValue:(Ojs.int_of_js x4294)
                                  ~currentIndex:(Ojs.int_of_js x4295)
                                  ~array:(t_of_js x4296))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4304 : t) ->
        fun
          ~callbackfn:(x4298 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4303 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4304) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4299 : Ojs.t) ->
                         fun (x4300 : Ojs.t) ->
                           fun (x4301 : Ojs.t) ->
                             fun (x4302 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4298 ~previousValue:(Ojs.int_of_js x4299)
                                    ~currentValue:(Ojs.int_of_js x4300)
                                    ~currentIndex:(Ojs.int_of_js x4301)
                                    ~array:(t_of_js x4302))));(Ojs.int_to_js
                                                                 x4303)|])
    let (reduce'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4311 : t) ->
        fun
          ~callbackfn:(x4305 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4310 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4311) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x4306 : Ojs.t) ->
                         fun (x4307 : Ojs.t) ->
                           fun (x4308 : Ojs.t) ->
                             fun (x4309 : Ojs.t) ->
                               Obj.magic
                                 (x4305 ~previousValue:(Obj.magic x4306)
                                    ~currentValue:(Ojs.int_of_js x4307)
                                    ~currentIndex:(Ojs.int_of_js x4308)
                                    ~array:(t_of_js x4309))));(Obj.magic
                                                                 x4310)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> int)
      =
      fun (x4317 : t) ->
        fun
          ~callbackfn:(x4312 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          Ojs.int_of_js
            (Ojs.call (t_to_js x4317) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x4313 : Ojs.t) ->
                       fun (x4314 : Ojs.t) ->
                         fun (x4315 : Ojs.t) ->
                           fun (x4316 : Ojs.t) ->
                             Ojs.int_to_js
                               (x4312 ~previousValue:(Ojs.int_of_js x4313)
                                  ~currentValue:(Ojs.int_of_js x4314)
                                  ~currentIndex:(Ojs.int_of_js x4315)
                                  ~array:(t_of_js x4316))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:int ->
                      currentValue:int -> currentIndex:int -> array:t -> int)
          -> initialValue:int -> int)
      =
      fun (x4324 : t) ->
        fun
          ~callbackfn:(x4318 :
                        previousValue:int ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> int)
          ->
          fun ~initialValue:(x4323 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x4324) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4319 : Ojs.t) ->
                         fun (x4320 : Ojs.t) ->
                           fun (x4321 : Ojs.t) ->
                             fun (x4322 : Ojs.t) ->
                               Ojs.int_to_js
                                 (x4318 ~previousValue:(Ojs.int_of_js x4319)
                                    ~currentValue:(Ojs.int_of_js x4320)
                                    ~currentIndex:(Ojs.int_of_js x4321)
                                    ~array:(t_of_js x4322))));(Ojs.int_to_js
                                                                 x4323)|])
    let (reduce_right'' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:int -> currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x4331 : t) ->
        fun
          ~callbackfn:(x4325 :
                        previousValue:'U ->
                          currentValue:int ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x4330 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x4331) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x4326 : Ojs.t) ->
                         fun (x4327 : Ojs.t) ->
                           fun (x4328 : Ojs.t) ->
                             fun (x4329 : Ojs.t) ->
                               Obj.magic
                                 (x4325 ~previousValue:(Obj.magic x4326)
                                    ~currentValue:(Ojs.int_of_js x4327)
                                    ~currentIndex:(Ojs.int_of_js x4328)
                                    ~array:(t_of_js x4329))));(Obj.magic
                                                                 x4330)|])
    let (reverse : t -> t) =
      fun (x4332 : t) -> t_of_js (Ojs.call (t_to_js x4332) "reverse" [||])
    let (set_ : t -> array:int Array.t -> ?offset:int -> unit -> unit) =
      fun (x4338 : t) ->
        fun ~array:(x4333 : int Array.t) ->
          fun ?offset:(x4334 : int option) ->
            fun () ->
              ignore
                (let x4339 = t_to_js x4338 in
                 Ojs.call (Ojs.get_prop_ascii x4339 "set") "apply"
                   [|x4339;((let x4335 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4335 "push"
                                  [|(Array.t_to_js Ojs.int_to_js x4333)|]);
                             (match x4334 with
                              | Some x4336 ->
                                  ignore
                                    (Ojs.call x4335 "push"
                                       [|(Ojs.int_to_js x4336)|])
                              | None -> ());
                             x4335))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x4345 : t) ->
        fun ?start:(x4340 : int option) ->
          fun ?end_:(x4341 : int option) ->
            fun () ->
              t_of_js
                (let x4346 = t_to_js x4345 in
                 Ojs.call (Ojs.get_prop_ascii x4346 "slice") "apply"
                   [|x4346;((let x4342 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4340 with
                              | Some x4344 ->
                                  ignore
                                    (Ojs.call x4342 "push"
                                       [|(Ojs.int_to_js x4344)|])
                              | None -> ());
                             (match x4341 with
                              | Some x4343 ->
                                  ignore
                                    (Ojs.call x4342 "push"
                                       [|(Ojs.int_to_js x4343)|])
                              | None -> ());
                             x4342))|])
    let (some :
      t ->
        (value:int -> index:int -> array:t -> unknown) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x4354 : t) ->
        fun (x4347 : value:int -> index:int -> array:t -> unknown) ->
          fun ?thisArg:(x4348 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x4355 = t_to_js x4354 in
                 Ojs.call (Ojs.get_prop_ascii x4355 "some") "apply"
                   [|x4355;((let x4349 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4349 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x4351 : Ojs.t) ->
                                          fun (x4352 : Ojs.t) ->
                                            fun (x4353 : Ojs.t) ->
                                              unknown_to_js
                                                (x4347
                                                   ~value:(Ojs.int_of_js
                                                             x4351)
                                                   ~index:(Ojs.int_of_js
                                                             x4352)
                                                   ~array:(t_of_js x4353))))|]);
                             (match x4348 with
                              | Some x4350 ->
                                  ignore
                                    (Ojs.call x4349 "push"
                                       [|(any_to_js x4350)|])
                              | None -> ());
                             x4349))|])
    let (sort : t -> ?compareFn:(a:int -> b:int -> int) -> unit -> t) =
      fun (x4361 : t) ->
        fun ?compareFn:(x4356 : (a:int -> b:int -> int) option) ->
          fun () ->
            t_of_js
              (let x4362 = t_to_js x4361 in
               Ojs.call (Ojs.get_prop_ascii x4362 "sort") "apply"
                 [|x4362;((let x4357 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4356 with
                            | Some x4358 ->
                                ignore
                                  (Ojs.call x4357 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x4359 : Ojs.t) ->
                                             fun (x4360 : Ojs.t) ->
                                               Ojs.int_to_js
                                                 (x4358
                                                    ~a:(Ojs.int_of_js x4359)
                                                    ~b:(Ojs.int_of_js x4360))))|])
                            | None -> ());
                           x4357))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x4368 : t) ->
        fun ?begin_:(x4363 : int option) ->
          fun ?end_:(x4364 : int option) ->
            fun () ->
              t_of_js
                (let x4369 = t_to_js x4368 in
                 Ojs.call (Ojs.get_prop_ascii x4369 "subarray") "apply"
                   [|x4369;((let x4365 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4363 with
                              | Some x4367 ->
                                  ignore
                                    (Ojs.call x4365 "push"
                                       [|(Ojs.int_to_js x4367)|])
                              | None -> ());
                             (match x4364 with
                              | Some x4366 ->
                                  ignore
                                    (Ojs.call x4365 "push"
                                       [|(Ojs.int_to_js x4366)|])
                              | None -> ());
                             x4365))|])
    let (to_string : t -> string) =
      fun (x4370 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x4370) "toString" [||])
    let (value_of : t -> t) =
      fun (x4371 : t) -> t_of_js (Ojs.call (t_to_js x4371) "valueOf" [||])
    let (get : t -> int -> int) =
      fun (x4372 : t) ->
        fun (x4373 : int) ->
          Ojs.int_of_js (Ojs.array_get (t_to_js x4372) x4373)
    let (set : t -> int -> int -> unit) =
      fun (x4374 : t) ->
        fun (x4375 : int) ->
          fun (x4376 : int) ->
            Ojs.array_set (t_to_js x4374) x4375 (Ojs.int_to_js x4376)
    let (create : length:int -> t) =
      fun ~length:(x4377 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(Ojs.int_to_js x4377)|])
    let (create' : array:(ArrayBuffer.t, int Array.t) union2 -> t) =
      fun ~array:(x4378 : (ArrayBuffer.t, int Array.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Float64Array")
             [|(union2_to_js ArrayBuffer.t_to_js
                  (fun (x4380 : int Array.t) ->
                     Array.t_to_js Ojs.int_to_js x4380) x4378)|])
    let (create'' :
      buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t) =
      fun ~buffer:(x4382 : ArrayBuffer.t) ->
        fun ?byteOffset:(x4383 : int option) ->
          fun ?length:(x4384 : int option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "Float64Array")
                   (let x4385 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x4385 "push" [|(ArrayBuffer.t_to_js x4382)|]);
                    (match x4383 with
                     | Some x4387 ->
                         ignore
                           (Ojs.call x4385 "push" [|(Ojs.int_to_js x4387)|])
                     | None -> ());
                    (match x4384 with
                     | Some x4386 ->
                         ignore
                           (Ojs.call x4385 "push" [|(Ojs.int_to_js x4386)|])
                     | None -> ());
                    x4385))
    let (get_bytes_per_element : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Float64Array")
           "BYTES_PER_ELEMENT")
    let (of_ : int list -> t) =
      fun (x4388 : int list) ->
        t_of_js
          (let x4391 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
           Ojs.call (Ojs.get_prop_ascii x4391 "of") "apply"
             [|x4391;((let x4389 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x4390 : int) ->
                            ignore
                              (Ojs.call x4389 "push"
                                 [|(Ojs.int_to_js x4390)|])) x4388;
                       x4389))|])
    let (from : array:int Array.t -> t) =
      fun ~array:(x4392 : int Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Float64Array") "from"
             [|(Array.t_to_js Ojs.int_to_js x4392)|])
    let (from' :
      array:'T Array.t ->
        mapfn:(v:'T -> k:int -> int) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x4394 : 'T Array.t) ->
        fun ~mapfn:(x4395 : v:'T -> k:int -> int) ->
          fun ?thisArg:(x4396 : any option) ->
            fun () ->
              t_of_js
                (let x4402 = Ojs.get_prop_ascii Ojs.global "Float64Array" in
                 Ojs.call (Ojs.get_prop_ascii x4402 "from") "apply"
                   [|x4402;((let x4397 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4397 "push"
                                  [|(Array.t_to_js Obj.magic x4394)|]);
                             ignore
                               (Ojs.call x4397 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x4399 : Ojs.t) ->
                                          fun (x4400 : Ojs.t) ->
                                            Ojs.int_to_js
                                              (x4395 ~v:(Obj.magic x4399)
                                                 ~k:(Ojs.int_of_js x4400))))|]);
                             (match x4396 with
                              | Some x4398 ->
                                  ignore
                                    (Ojs.call x4397 "push"
                                       [|(any_to_js x4398)|])
                              | None -> ());
                             x4397))|])
  end
module Float64ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4404 : Ojs.t) -> x4404
    and t_to_js : t -> Ojs.t = fun (x4403 : Ojs.t) -> x4403
    let (get_prototype : t -> Float64Array.t) =
      fun (x4405 : t) ->
        Float64Array.t_of_js (Ojs.get_prop_ascii (t_to_js x4405) "prototype")
    let (create : t -> length:int -> Float64Array.t) =
      fun (x4407 : t) ->
        fun ~length:(x4406 : int) ->
          Float64Array.t_of_js
            (Ojs.new_obj (t_to_js x4407) [|(Ojs.int_to_js x4406)|])
    let (create' :
      t -> array:(ArrayBuffer.t, int Array.t) union2 -> Float64Array.t) =
      fun (x4412 : t) ->
        fun ~array:(x4408 : (ArrayBuffer.t, int Array.t) union2) ->
          Float64Array.t_of_js
            (Ojs.new_obj (t_to_js x4412)
               [|(union2_to_js ArrayBuffer.t_to_js
                    (fun (x4410 : int Array.t) ->
                       Array.t_to_js Ojs.int_to_js x4410) x4408)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> Float64Array.t)
      =
      fun (x4419 : t) ->
        fun ~buffer:(x4413 : ArrayBuffer.t) ->
          fun ?byteOffset:(x4414 : int option) ->
            fun ?length:(x4415 : int option) ->
              fun () ->
                Float64Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x4419)
                     (let x4416 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x4416 "push"
                           [|(ArrayBuffer.t_to_js x4413)|]);
                      (match x4414 with
                       | Some x4418 ->
                           ignore
                             (Ojs.call x4416 "push" [|(Ojs.int_to_js x4418)|])
                       | None -> ());
                      (match x4415 with
                       | Some x4417 ->
                           ignore
                             (Ojs.call x4416 "push" [|(Ojs.int_to_js x4417)|])
                       | None -> ());
                      x4416))
    let (get_bytes_per_element : t -> int) =
      fun (x4420 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x4420) "BYTES_PER_ELEMENT")
    let (of_ : t -> int list -> Float64Array.t) =
      fun (x4424 : t) ->
        fun (x4421 : int list) ->
          Float64Array.t_of_js
            (let x4425 = t_to_js x4424 in
             Ojs.call (Ojs.get_prop_ascii x4425 "of") "apply"
               [|x4425;((let x4422 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         List.iter
                           (fun (x4423 : int) ->
                              ignore
                                (Ojs.call x4422 "push"
                                   [|(Ojs.int_to_js x4423)|])) x4421;
                         x4422))|])
    let (from : t -> array:int Array.t -> Float64Array.t) =
      fun (x4428 : t) ->
        fun ~array:(x4426 : int Array.t) ->
          Float64Array.t_of_js
            (Ojs.call (t_to_js x4428) "from"
               [|(Array.t_to_js Ojs.int_to_js x4426)|])
    let (from' :
      t ->
        array:'T Array.t ->
          mapfn:(v:'T -> k:int -> int) ->
            ?thisArg:any -> unit -> Float64Array.t)
      =
      fun (x4437 : t) ->
        fun ~array:(x4429 : 'T Array.t) ->
          fun ~mapfn:(x4430 : v:'T -> k:int -> int) ->
            fun ?thisArg:(x4431 : any option) ->
              fun () ->
                Float64Array.t_of_js
                  (let x4438 = t_to_js x4437 in
                   Ojs.call (Ojs.get_prop_ascii x4438 "from") "apply"
                     [|x4438;((let x4432 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4432 "push"
                                    [|(Array.t_to_js Obj.magic x4429)|]);
                               ignore
                                 (Ojs.call x4432 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4434 : Ojs.t) ->
                                            fun (x4435 : Ojs.t) ->
                                              Ojs.int_to_js
                                                (x4430 ~v:(Obj.magic x4434)
                                                   ~k:(Ojs.int_of_js x4435))))|]);
                               (match x4431 with
                                | Some x4433 ->
                                    ignore
                                      (Ojs.call x4432 "push"
                                         [|(any_to_js x4433)|])
                                | None -> ());
                               x4432))|])
  end
let (float64_array : Float64ArrayConstructor.t) =
  Float64ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "Float64Array")
