[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2019
module PromiseFulfilledResult =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x2 : Ojs.t) -> x2
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x1 : Ojs.t) -> x1
    let (get_status : 'T t -> [ `fulfilled ]) =
      fun (x3 : 'T t) ->
        let x5 = Ojs.get_prop_ascii (t_to_js Obj.magic x3) "status" in
        match Ojs.string_of_js x5 with
        | "fulfilled" -> `fulfilled
        | _ -> assert false
    let (set_status : 'T t -> [ `fulfilled ] -> unit) =
      fun (x6 : 'T t) ->
        fun (x7 : [ `fulfilled ]) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x6) "status"
            (match x7 with | `fulfilled -> Ojs.string_to_js "fulfilled")
    let (get_value : 'T t -> 'T) =
      fun (x9 : 'T t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x9) "value")
    let (set_value : 'T t -> 'T -> unit) =
      fun (x11 : 'T t) ->
        fun (x12 : 'T) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x11) "value" (Obj.magic x12)
  end
module PromiseRejectedResult =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get_status : t -> [ `rejected ]) =
      fun (x16 : t) ->
        let x17 = Ojs.get_prop_ascii (t_to_js x16) "status" in
        match Ojs.string_of_js x17 with
        | "rejected" -> `rejected
        | _ -> assert false
    let (set_status : t -> [ `rejected ] -> unit) =
      fun (x18 : t) ->
        fun (x19 : [ `rejected ]) ->
          Ojs.set_prop_ascii (t_to_js x18) "status"
            (match x19 with | `rejected -> Ojs.string_to_js "rejected")
    let (get_reason : t -> any) =
      fun (x20 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x20) "reason")
    let (set_reason : t -> any -> unit) =
      fun (x21 : t) ->
        fun (x22 : any) ->
          Ojs.set_prop_ascii (t_to_js x21) "reason" (any_to_js x22)
  end
module PromiseSettledResult =
  struct
    type 'T t =
      [ `fulfilled of 'T PromiseFulfilledResult.t 
      | `rejected of PromiseRejectedResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x27 : Ojs.t) ->
          let x28 = x27 in
          match Ojs.string_of_js (Ojs.get_prop_ascii x28 "status") with
          | "fulfilled" ->
              `fulfilled (PromiseFulfilledResult.t_of_js __T_of_js x28)
          | "rejected" -> `rejected (PromiseRejectedResult.t_of_js x28)
          | _ -> assert false
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun
          (x23 :
            [ `fulfilled of __T PromiseFulfilledResult.t 
            | `rejected of PromiseRejectedResult.t ])
          ->
          match x23 with
          | `fulfilled x24 -> PromiseFulfilledResult.t_to_js __T_to_js x24
          | `rejected x26 -> PromiseRejectedResult.t_to_js x26
  end
module Promise =
  struct
    include struct include Promise end
    let (allSettled : 'T -> any Promise.t) =
      fun (x30 : 'T) ->
        Promise.t_of_js any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "allSettled"
             [|(Obj.magic x30)|])
    let (allSettled' :
      'T Iterable.t -> any PromiseSettledResult.t list Promise.t) =
      fun (x32 : 'T Iterable.t) ->
        Promise.t_of_js
          (fun (x34 : Ojs.t) ->
             Ojs.list_of_js
               (fun (x35 : Ojs.t) ->
                  PromiseSettledResult.t_of_js any_of_js x35) x34)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Promise") "allSettled"
             [|(Iterable.t_to_js Obj.magic x32)|])
  end
module PromiseConstructor =
  struct
    include struct include PromiseConstructor end
    let (allSettled : t -> 'T -> any Promise.t) =
      fun (x38 : t) ->
        fun (x37 : 'T) ->
          Promise.t_of_js any_of_js
            (Ojs.call (t_to_js x38) "allSettled" [|(Obj.magic x37)|])
    let (allSettled' :
      t -> 'T Iterable.t -> any PromiseSettledResult.t list Promise.t) =
      fun (x42 : t) ->
        fun (x40 : 'T Iterable.t) ->
          Promise.t_of_js
            (fun (x43 : Ojs.t) ->
               Ojs.list_of_js
                 (fun (x44 : Ojs.t) ->
                    PromiseSettledResult.t_of_js any_of_js x44) x43)
            (Ojs.call (t_to_js x42) "allSettled"
               [|(Iterable.t_to_js Obj.magic x40)|])
  end
