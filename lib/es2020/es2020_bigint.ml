[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2019
module BigIntToLocaleStringOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_locale_matcher : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "localeMatcher")
    let (set_locale_matcher : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "localeMatcher"
            (Ojs.string_to_js x5)
    let (get_style : t -> string) =
      fun (x6 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "style")
    let (set_style : t -> string -> unit) =
      fun (x7 : t) ->
        fun (x8 : string) ->
          Ojs.set_prop_ascii (t_to_js x7) "style" (Ojs.string_to_js x8)
    let (get_numbering_system : t -> string) =
      fun (x9 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x9) "numberingSystem")
    let (set_numbering_system : t -> string -> unit) =
      fun (x10 : t) ->
        fun (x11 : string) ->
          Ojs.set_prop_ascii (t_to_js x10) "numberingSystem"
            (Ojs.string_to_js x11)
    let (get_unit : t -> string) =
      fun (x12 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x12) "unit")
    let (set_unit : t -> string -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          Ojs.set_prop_ascii (t_to_js x13) "unit" (Ojs.string_to_js x14)
    let (get_unit_display : t -> string) =
      fun (x15 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15) "unitDisplay")
    let (set_unit_display : t -> string -> unit) =
      fun (x16 : t) ->
        fun (x17 : string) ->
          Ojs.set_prop_ascii (t_to_js x16) "unitDisplay"
            (Ojs.string_to_js x17)
    let (get_currency : t -> string) =
      fun (x18 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x18) "currency")
    let (set_currency : t -> string -> unit) =
      fun (x19 : t) ->
        fun (x20 : string) ->
          Ojs.set_prop_ascii (t_to_js x19) "currency" (Ojs.string_to_js x20)
    let (get_currency_display : t -> string) =
      fun (x21 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x21) "currencyDisplay")
    let (set_currency_display : t -> string -> unit) =
      fun (x22 : t) ->
        fun (x23 : string) ->
          Ojs.set_prop_ascii (t_to_js x22) "currencyDisplay"
            (Ojs.string_to_js x23)
    let (get_use_grouping : t -> bool) =
      fun (x24 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x24) "useGrouping")
    let (set_use_grouping : t -> bool -> unit) =
      fun (x25 : t) ->
        fun (x26 : bool) ->
          Ojs.set_prop_ascii (t_to_js x25) "useGrouping" (Ojs.bool_to_js x26)
    let (get_minimum_integer_digits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x27 : t) ->
        let x28 = Ojs.get_prop_ascii (t_to_js x27) "minimumIntegerDigits" in
        match Ojs.int_of_js x28 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_minimum_integer_digits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x29 : t) ->
        fun
          (x30 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x29) "minimumIntegerDigits"
            (match x30 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_minimum_fraction_digits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ])
      =
      fun (x31 : t) ->
        let x32 = Ojs.get_prop_ascii (t_to_js x31) "minimumFractionDigits" in
        match Ojs.int_of_js x32 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | _ -> assert false
    let (set_minimum_fraction_digits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ] -> unit)
      =
      fun (x33 : t) ->
        fun
          (x34 :
            [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5 
            | `L_n_6  | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11 
            | `L_n_12  | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | 
              `L_n_17 
            | `L_n_18  | `L_n_19  | `L_n_20 ])
          ->
          Ojs.set_prop_ascii (t_to_js x33) "minimumFractionDigits"
            (match x34 with
             | `L_n_0 -> Ojs.string_to_js "LN0"
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20")
    let (get_maximum_fraction_digits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ])
      =
      fun (x35 : t) ->
        let x36 = Ojs.get_prop_ascii (t_to_js x35) "maximumFractionDigits" in
        match Ojs.int_of_js x36 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | _ -> assert false
    let (set_maximum_fraction_digits :
      t ->
        [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | 
          `L_n_6 
        | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
        | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18 
        | `L_n_19  | `L_n_20 ] -> unit)
      =
      fun (x37 : t) ->
        fun
          (x38 :
            [ `L_n_0  | `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5 
            | `L_n_6  | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11 
            | `L_n_12  | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | 
              `L_n_17 
            | `L_n_18  | `L_n_19  | `L_n_20 ])
          ->
          Ojs.set_prop_ascii (t_to_js x37) "maximumFractionDigits"
            (match x38 with
             | `L_n_0 -> Ojs.string_to_js "LN0"
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20")
    let (get_minimum_significant_digits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x39 : t) ->
        let x40 = Ojs.get_prop_ascii (t_to_js x39) "minimumSignificantDigits" in
        match Ojs.int_of_js x40 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_minimum_significant_digits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x41 : t) ->
        fun
          (x42 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x41) "minimumSignificantDigits"
            (match x42 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_maximum_significant_digits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ])
      =
      fun (x43 : t) ->
        let x44 = Ojs.get_prop_ascii (t_to_js x43) "maximumSignificantDigits" in
        match Ojs.int_of_js x44 with
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | 3 -> `L_n_3
        | 4 -> `L_n_4
        | 5 -> `L_n_5
        | 6 -> `L_n_6
        | 7 -> `L_n_7
        | 8 -> `L_n_8
        | 9 -> `L_n_9
        | 10 -> `L_n_10
        | 11 -> `L_n_11
        | 12 -> `L_n_12
        | 13 -> `L_n_13
        | 14 -> `L_n_14
        | 15 -> `L_n_15
        | 16 -> `L_n_16
        | 17 -> `L_n_17
        | 18 -> `L_n_18
        | 19 -> `L_n_19
        | 20 -> `L_n_20
        | 21 -> `L_n_21
        | _ -> assert false
    let (set_maximum_significant_digits :
      t ->
        [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6  | 
          `L_n_7 
        | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12  | `L_n_13 
        | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | `L_n_18  | `L_n_19 
        | `L_n_20  | `L_n_21 ] -> unit)
      =
      fun (x45 : t) ->
        fun
          (x46 :
            [ `L_n_1  | `L_n_2  | `L_n_3  | `L_n_4  | `L_n_5  | `L_n_6 
            | `L_n_7  | `L_n_8  | `L_n_9  | `L_n_10  | `L_n_11  | `L_n_12 
            | `L_n_13  | `L_n_14  | `L_n_15  | `L_n_16  | `L_n_17  | 
              `L_n_18 
            | `L_n_19  | `L_n_20  | `L_n_21 ])
          ->
          Ojs.set_prop_ascii (t_to_js x45) "maximumSignificantDigits"
            (match x46 with
             | `L_n_1 -> Ojs.string_to_js "LN1"
             | `L_n_2 -> Ojs.string_to_js "LN2"
             | `L_n_3 -> Ojs.string_to_js "LN3"
             | `L_n_4 -> Ojs.string_to_js "LN4"
             | `L_n_5 -> Ojs.string_to_js "LN5"
             | `L_n_6 -> Ojs.string_to_js "LN6"
             | `L_n_7 -> Ojs.string_to_js "LN7"
             | `L_n_8 -> Ojs.string_to_js "LN8"
             | `L_n_9 -> Ojs.string_to_js "LN9"
             | `L_n_10 -> Ojs.string_to_js "LN10"
             | `L_n_11 -> Ojs.string_to_js "LN11"
             | `L_n_12 -> Ojs.string_to_js "LN12"
             | `L_n_13 -> Ojs.string_to_js "LN13"
             | `L_n_14 -> Ojs.string_to_js "LN14"
             | `L_n_15 -> Ojs.string_to_js "LN15"
             | `L_n_16 -> Ojs.string_to_js "LN16"
             | `L_n_17 -> Ojs.string_to_js "LN17"
             | `L_n_18 -> Ojs.string_to_js "LN18"
             | `L_n_19 -> Ojs.string_to_js "LN19"
             | `L_n_20 -> Ojs.string_to_js "LN20"
             | `L_n_21 -> Ojs.string_to_js "LN21")
    let (get_notation : t -> string) =
      fun (x47 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x47) "notation")
    let (set_notation : t -> string -> unit) =
      fun (x48 : t) ->
        fun (x49 : string) ->
          Ojs.set_prop_ascii (t_to_js x48) "notation" (Ojs.string_to_js x49)
    let (get_compact_display : t -> string) =
      fun (x50 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x50) "compactDisplay")
    let (set_compact_display : t -> string -> unit) =
      fun (x51 : t) ->
        fun (x52 : string) ->
          Ojs.set_prop_ascii (t_to_js x51) "compactDisplay"
            (Ojs.string_to_js x52)
  end
module BigInt =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x54 : Ojs.t) -> x54
    and t_to_js : t -> Ojs.t = fun (x53 : Ojs.t) -> x53
    let (to_string : t -> ?radix:int -> unit -> string) =
      fun (x58 : t) ->
        fun ?radix:(x55 : int option) ->
          fun () ->
            Ojs.string_of_js
              (let x59 = t_to_js x58 in
               Ojs.call (Ojs.get_prop_ascii x59 "toString") "apply"
                 [|x59;((let x56 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x55 with
                          | Some x57 ->
                              ignore
                                (Ojs.call x56 "push" [|(Ojs.int_to_js x57)|])
                          | None -> ());
                         x56))|])
    let (to_locale_string :
      t ->
        ?locales:string ->
          ?options:BigIntToLocaleStringOptions.t -> unit -> string)
      =
      fun (x65 : t) ->
        fun ?locales:(x60 : string option) ->
          fun ?options:(x61 : BigIntToLocaleStringOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x66 = t_to_js x65 in
                 Ojs.call (Ojs.get_prop_ascii x66 "toLocaleString") "apply"
                   [|x66;((let x62 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x60 with
                            | Some x64 ->
                                ignore
                                  (Ojs.call x62 "push"
                                     [|(Ojs.string_to_js x64)|])
                            | None -> ());
                           (match x61 with
                            | Some x63 ->
                                ignore
                                  (Ojs.call x62 "push"
                                     [|(BigIntToLocaleStringOptions.t_to_js
                                          x63)|])
                            | None -> ());
                           x62))|])
    let (value_of : t -> bigint) =
      fun (x67 : t) -> bigint_of_js (Ojs.call (t_to_js x67) "valueOf" [||])
    let (as_int_n : bits:int -> int:bigint -> bigint) =
      fun ~bits:(x68 : int) ->
        fun ~int:(x69 : bigint) ->
          bigint_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "BitInt") "asIntN"
               [|(Ojs.int_to_js x68);(bigint_to_js x69)|])
    let (as_uint_n : bits:int -> int:bigint -> bigint) =
      fun ~bits:(x70 : int) ->
        fun ~int:(x71 : bigint) ->
          bigint_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "BitInt") "asUintN"
               [|(Ojs.int_to_js x70);(bigint_to_js x71)|])
  end
module BigIntConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x73 : Ojs.t) -> x73
    and t_to_js : t -> Ojs.t = fun (x72 : Ojs.t) -> x72
    let (apply : t -> ?value:any -> unit -> bigint) =
      fun (x77 : t) ->
        fun ?value:(x74 : any option) ->
          fun () ->
            bigint_of_js
              (Ojs.call (t_to_js x77) "apply"
                 [|Ojs.null;((let x75 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x74 with
                               | Some x76 ->
                                   ignore
                                     (Ojs.call x75 "push" [|(any_to_js x76)|])
                               | None -> ());
                              x75))|])
    let (get_prototype : t -> BigInt.t) =
      fun (x78 : t) ->
        BigInt.t_of_js (Ojs.get_prop_ascii (t_to_js x78) "prototype")
    let (as_int_n : t -> bits:int -> int:bigint -> bigint) =
      fun (x81 : t) ->
        fun ~bits:(x79 : int) ->
          fun ~int:(x80 : bigint) ->
            bigint_of_js
              (Ojs.call (t_to_js x81) "asIntN"
                 [|(Ojs.int_to_js x79);(bigint_to_js x80)|])
    let (as_uint_n : t -> bits:int -> int:bigint -> bigint) =
      fun (x84 : t) ->
        fun ~bits:(x82 : int) ->
          fun ~int:(x83 : bigint) ->
            bigint_of_js
              (Ojs.call (t_to_js x84) "asUintN"
                 [|(Ojs.int_to_js x82);(bigint_to_js x83)|])
  end
let (big_int : BigIntConstructor.t) =
  BigIntConstructor.t_of_js (Ojs.get_prop_ascii Ojs.global "BigInt")
module BigInt64Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x86 : Ojs.t) -> x86
    and t_to_js : t -> Ojs.t = fun (x85 : Ojs.t) -> x85
    let (get_bytes_per_element : t -> int) =
      fun (x87 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x87) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x88 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x88) "buffer")
    let (get_byte_length : t -> int) =
      fun (x89 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x89) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x90 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x90) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x96 : t) ->
        fun ~target:(x91 : int) ->
          fun ~start:(x92 : int) ->
            fun ?end_:(x93 : int option) ->
              fun () ->
                t_of_js
                  (let x97 = t_to_js x96 in
                   Ojs.call (Ojs.get_prop_ascii x97 "copyWithin") "apply"
                     [|x97;((let x94 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x94 "push" [|(Ojs.int_to_js x91)|]);
                             ignore
                               (Ojs.call x94 "push" [|(Ojs.int_to_js x92)|]);
                             (match x93 with
                              | Some x95 ->
                                  ignore
                                    (Ojs.call x94 "push"
                                       [|(Ojs.int_to_js x95)|])
                              | None -> ());
                             x94))|])
    let (entries : t -> (int * bigint) IterableIterator.t) =
      fun (x98 : t) ->
        IterableIterator.t_of_js
          (fun (x99 : Ojs.t) ->
             let x100 = x99 in
             ((Ojs.int_of_js (Ojs.array_get x100 0)),
               (bigint_of_js (Ojs.array_get x100 1))))
          (Ojs.call (t_to_js x98) "entries" [||])
    let (every :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x108 : t) ->
        fun ~predicate:(x101 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x102 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x109 = t_to_js x108 in
                 Ojs.call (Ojs.get_prop_ascii x109 "every") "apply"
                   [|x109;((let x103 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x103 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x105 : Ojs.t) ->
                                         fun (x106 : Ojs.t) ->
                                           fun (x107 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x101
                                                  ~value:(bigint_of_js x105)
                                                  ~index:(Ojs.int_of_js x106)
                                                  ~array:(t_of_js x107))))|]);
                            (match x102 with
                             | Some x104 ->
                                 ignore
                                   (Ojs.call x103 "push" [|(any_to_js x104)|])
                             | None -> ());
                            x103))|])
    let (fill : t -> value:bigint -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x116 : t) ->
        fun ~value:(x110 : bigint) ->
          fun ?start:(x111 : int option) ->
            fun ?end_:(x112 : int option) ->
              fun () ->
                t_of_js
                  (let x117 = t_to_js x116 in
                   Ojs.call (Ojs.get_prop_ascii x117 "fill") "apply"
                     [|x117;((let x113 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x113 "push" [|(bigint_to_js x110)|]);
                              (match x111 with
                               | Some x115 ->
                                   ignore
                                     (Ojs.call x113 "push"
                                        [|(Ojs.int_to_js x115)|])
                               | None -> ());
                              (match x112 with
                               | Some x114 ->
                                   ignore
                                     (Ojs.call x113 "push"
                                        [|(Ojs.int_to_js x114)|])
                               | None -> ());
                              x113))|])
    let (filter :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x125 : t) ->
        fun ~predicate:(x118 : value:bigint -> index:int -> array:t -> any)
          ->
          fun ?thisArg:(x119 : any option) ->
            fun () ->
              t_of_js
                (let x126 = t_to_js x125 in
                 Ojs.call (Ojs.get_prop_ascii x126 "filter") "apply"
                   [|x126;((let x120 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x120 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x122 : Ojs.t) ->
                                         fun (x123 : Ojs.t) ->
                                           fun (x124 : Ojs.t) ->
                                             any_to_js
                                               (x118
                                                  ~value:(bigint_of_js x122)
                                                  ~index:(Ojs.int_of_js x123)
                                                  ~array:(t_of_js x124))))|]);
                            (match x119 with
                             | Some x121 ->
                                 ignore
                                   (Ojs.call x120 "push" [|(any_to_js x121)|])
                             | None -> ());
                            x120))|])
    let (find :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x134 : t) ->
        fun ~predicate:(x127 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x128 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x135 = t_to_js x134 in
                 Ojs.call (Ojs.get_prop_ascii x135 "find") "apply"
                   [|x135;((let x129 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x129 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x131 : Ojs.t) ->
                                         fun (x132 : Ojs.t) ->
                                           fun (x133 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x127
                                                  ~value:(bigint_of_js x131)
                                                  ~index:(Ojs.int_of_js x132)
                                                  ~array:(t_of_js x133))))|]);
                            (match x128 with
                             | Some x130 ->
                                 ignore
                                   (Ojs.call x129 "push" [|(any_to_js x130)|])
                             | None -> ());
                            x129))|])
    let (find_index :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x144 : t) ->
        fun ~predicate:(x137 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x138 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x145 = t_to_js x144 in
                 Ojs.call (Ojs.get_prop_ascii x145 "findIndex") "apply"
                   [|x145;((let x139 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x139 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x141 : Ojs.t) ->
                                         fun (x142 : Ojs.t) ->
                                           fun (x143 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x137
                                                  ~value:(bigint_of_js x141)
                                                  ~index:(Ojs.int_of_js x142)
                                                  ~array:(t_of_js x143))))|]);
                            (match x138 with
                             | Some x140 ->
                                 ignore
                                   (Ojs.call x139 "push" [|(any_to_js x140)|])
                             | None -> ());
                            x139))|])
    let (for_each :
      t ->
        callbackfn:(value:bigint -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x153 : t) ->
        fun ~callbackfn:(x146 : value:bigint -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x147 : any option) ->
            fun () ->
              ignore
                (let x154 = t_to_js x153 in
                 Ojs.call (Ojs.get_prop_ascii x154 "forEach") "apply"
                   [|x154;((let x148 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x148 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x150 : Ojs.t) ->
                                         fun (x151 : Ojs.t) ->
                                           fun (x152 : Ojs.t) ->
                                             x146 ~value:(bigint_of_js x150)
                                               ~index:(Ojs.int_of_js x151)
                                               ~array:(t_of_js x152)))|]);
                            (match x147 with
                             | Some x149 ->
                                 ignore
                                   (Ojs.call x148 "push" [|(any_to_js x149)|])
                             | None -> ());
                            x148))|])
    let (includes :
      t -> searchElement:bigint -> ?fromIndex:int -> unit -> bool) =
      fun (x159 : t) ->
        fun ~searchElement:(x155 : bigint) ->
          fun ?fromIndex:(x156 : int option) ->
            fun () ->
              Ojs.bool_of_js
                (let x160 = t_to_js x159 in
                 Ojs.call (Ojs.get_prop_ascii x160 "includes") "apply"
                   [|x160;((let x157 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x157 "push" [|(bigint_to_js x155)|]);
                            (match x156 with
                             | Some x158 ->
                                 ignore
                                   (Ojs.call x157 "push"
                                      [|(Ojs.int_to_js x158)|])
                             | None -> ());
                            x157))|])
    let (index_of :
      t -> searchElement:bigint -> ?fromIndex:int -> unit -> int) =
      fun (x165 : t) ->
        fun ~searchElement:(x161 : bigint) ->
          fun ?fromIndex:(x162 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x166 = t_to_js x165 in
                 Ojs.call (Ojs.get_prop_ascii x166 "indexOf") "apply"
                   [|x166;((let x163 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x163 "push" [|(bigint_to_js x161)|]);
                            (match x162 with
                             | Some x164 ->
                                 ignore
                                   (Ojs.call x163 "push"
                                      [|(Ojs.int_to_js x164)|])
                             | None -> ());
                            x163))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x170 : t) ->
        fun ?separator:(x167 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x171 = t_to_js x170 in
               Ojs.call (Ojs.get_prop_ascii x171 "join") "apply"
                 [|x171;((let x168 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x167 with
                           | Some x169 ->
                               ignore
                                 (Ojs.call x168 "push"
                                    [|(Ojs.string_to_js x169)|])
                           | None -> ());
                          x168))|])
    let (keys : t -> int IterableIterator.t) =
      fun (x172 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x172) "keys" [||])
    let (last_index_of :
      t -> searchElement:bigint -> ?fromIndex:int -> unit -> int) =
      fun (x178 : t) ->
        fun ~searchElement:(x174 : bigint) ->
          fun ?fromIndex:(x175 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x179 = t_to_js x178 in
                 Ojs.call (Ojs.get_prop_ascii x179 "lastIndexOf") "apply"
                   [|x179;((let x176 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x176 "push" [|(bigint_to_js x174)|]);
                            (match x175 with
                             | Some x177 ->
                                 ignore
                                   (Ojs.call x176 "push"
                                      [|(Ojs.int_to_js x177)|])
                             | None -> ());
                            x176))|])
    let (get_length : t -> int) =
      fun (x180 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x180) "length")
    let (map :
      t ->
        callbackfn:(value:bigint -> index:int -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x188 : t) ->
        fun
          ~callbackfn:(x181 : value:bigint -> index:int -> array:t -> bigint)
          ->
          fun ?thisArg:(x182 : any option) ->
            fun () ->
              t_of_js
                (let x189 = t_to_js x188 in
                 Ojs.call (Ojs.get_prop_ascii x189 "map") "apply"
                   [|x189;((let x183 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x183 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x185 : Ojs.t) ->
                                         fun (x186 : Ojs.t) ->
                                           fun (x187 : Ojs.t) ->
                                             bigint_to_js
                                               (x181
                                                  ~value:(bigint_of_js x185)
                                                  ~index:(Ojs.int_of_js x186)
                                                  ~array:(t_of_js x187))))|]);
                            (match x182 with
                             | Some x184 ->
                                 ignore
                                   (Ojs.call x183 "push" [|(any_to_js x184)|])
                             | None -> ());
                            x183))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> bigint)
          -> bigint)
      =
      fun (x195 : t) ->
        fun
          ~callbackfn:(x190 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x195) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x191 : Ojs.t) ->
                       fun (x192 : Ojs.t) ->
                         fun (x193 : Ojs.t) ->
                           fun (x194 : Ojs.t) ->
                             bigint_to_js
                               (x190 ~previousValue:(bigint_of_js x191)
                                  ~currentValue:(bigint_of_js x192)
                                  ~currentIndex:(Ojs.int_of_js x193)
                                  ~array:(t_of_js x194))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x202 : t) ->
        fun
          ~callbackfn:(x196 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x201 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x202) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x197 : Ojs.t) ->
                         fun (x198 : Ojs.t) ->
                           fun (x199 : Ojs.t) ->
                             fun (x200 : Ojs.t) ->
                               Obj.magic
                                 (x196 ~previousValue:(Obj.magic x197)
                                    ~currentValue:(bigint_of_js x198)
                                    ~currentIndex:(Ojs.int_of_js x199)
                                    ~array:(t_of_js x200))));(Obj.magic x201)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> bigint)
          -> bigint)
      =
      fun (x208 : t) ->
        fun
          ~callbackfn:(x203 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x208) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x204 : Ojs.t) ->
                       fun (x205 : Ojs.t) ->
                         fun (x206 : Ojs.t) ->
                           fun (x207 : Ojs.t) ->
                             bigint_to_js
                               (x203 ~previousValue:(bigint_of_js x204)
                                  ~currentValue:(bigint_of_js x205)
                                  ~currentIndex:(Ojs.int_of_js x206)
                                  ~array:(t_of_js x207))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x215 : t) ->
        fun
          ~callbackfn:(x209 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x214 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x215) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x210 : Ojs.t) ->
                         fun (x211 : Ojs.t) ->
                           fun (x212 : Ojs.t) ->
                             fun (x213 : Ojs.t) ->
                               Obj.magic
                                 (x209 ~previousValue:(Obj.magic x210)
                                    ~currentValue:(bigint_of_js x211)
                                    ~currentIndex:(Ojs.int_of_js x212)
                                    ~array:(t_of_js x213))));(Obj.magic x214)|])
    let (reverse : t -> t) =
      fun (x216 : t) -> t_of_js (Ojs.call (t_to_js x216) "reverse" [||])
    let (set : t -> array:bigint Array.t -> ?offset:int -> unit -> unit) =
      fun (x222 : t) ->
        fun ~array:(x217 : bigint Array.t) ->
          fun ?offset:(x218 : int option) ->
            fun () ->
              ignore
                (let x223 = t_to_js x222 in
                 Ojs.call (Ojs.get_prop_ascii x223 "set") "apply"
                   [|x223;((let x219 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x219 "push"
                                 [|(Array.t_to_js bigint_to_js x217)|]);
                            (match x218 with
                             | Some x220 ->
                                 ignore
                                   (Ojs.call x219 "push"
                                      [|(Ojs.int_to_js x220)|])
                             | None -> ());
                            x219))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x229 : t) ->
        fun ?start:(x224 : int option) ->
          fun ?end_:(x225 : int option) ->
            fun () ->
              t_of_js
                (let x230 = t_to_js x229 in
                 Ojs.call (Ojs.get_prop_ascii x230 "slice") "apply"
                   [|x230;((let x226 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x224 with
                             | Some x228 ->
                                 ignore
                                   (Ojs.call x226 "push"
                                      [|(Ojs.int_to_js x228)|])
                             | None -> ());
                            (match x225 with
                             | Some x227 ->
                                 ignore
                                   (Ojs.call x226 "push"
                                      [|(Ojs.int_to_js x227)|])
                             | None -> ());
                            x226))|])
    let (some :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x238 : t) ->
        fun ~predicate:(x231 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x232 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x239 = t_to_js x238 in
                 Ojs.call (Ojs.get_prop_ascii x239 "some") "apply"
                   [|x239;((let x233 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x233 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x235 : Ojs.t) ->
                                         fun (x236 : Ojs.t) ->
                                           fun (x237 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x231
                                                  ~value:(bigint_of_js x235)
                                                  ~index:(Ojs.int_of_js x236)
                                                  ~array:(t_of_js x237))))|]);
                            (match x232 with
                             | Some x234 ->
                                 ignore
                                   (Ojs.call x233 "push" [|(any_to_js x234)|])
                             | None -> ());
                            x233))|])
    let (sort :
      t -> ?compareFn:(a:bigint -> b:bigint -> bigint or_number) -> unit -> t)
      =
      fun (x246 : t) ->
        fun
          ?compareFn:(x240 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            t_of_js
              (let x247 = t_to_js x246 in
               Ojs.call (Ojs.get_prop_ascii x247 "sort") "apply"
                 [|x247;((let x241 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x240 with
                           | Some x242 ->
                               ignore
                                 (Ojs.call x241 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x243 : Ojs.t) ->
                                            fun (x244 : Ojs.t) ->
                                              or_number_to_js bigint_to_js
                                                (x242 ~a:(bigint_of_js x243)
                                                   ~b:(bigint_of_js x244))))|])
                           | None -> ());
                          x241))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x253 : t) ->
        fun ?begin_:(x248 : int option) ->
          fun ?end_:(x249 : int option) ->
            fun () ->
              t_of_js
                (let x254 = t_to_js x253 in
                 Ojs.call (Ojs.get_prop_ascii x254 "subarray") "apply"
                   [|x254;((let x250 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x248 with
                             | Some x252 ->
                                 ignore
                                   (Ojs.call x250 "push"
                                      [|(Ojs.int_to_js x252)|])
                             | None -> ());
                            (match x249 with
                             | Some x251 ->
                                 ignore
                                   (Ojs.call x250 "push"
                                      [|(Ojs.int_to_js x251)|])
                             | None -> ());
                            x250))|])
    let (to_locale_string : t -> string) =
      fun (x255 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x255) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x256 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x256) "toString" [||])
    let (value_of : t -> t) =
      fun (x257 : t) -> t_of_js (Ojs.call (t_to_js x257) "valueOf" [||])
    let (values : t -> bigint IterableIterator.t) =
      fun (x258 : t) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (t_to_js x258) "values" [||])
    let (get : t -> int -> bigint) =
      fun (x260 : t) ->
        fun (x261 : int) -> bigint_of_js (Ojs.array_get (t_to_js x260) x261)
    let (set : t -> int -> bigint -> unit) =
      fun (x262 : t) ->
        fun (x263 : int) ->
          fun (x264 : bigint) ->
            Ojs.array_set (t_to_js x262) x263 (bigint_to_js x264)
    let (create : ?length:int -> unit -> t) =
      fun ?length:(x265 : int option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
               (let x266 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x265 with
                 | Some x267 ->
                     ignore (Ojs.call x266 "push" [|(Ojs.int_to_js x267)|])
                 | None -> ());
                x266))
    let (create' : array:bigint Iterable.t -> t) =
      fun ~array:(x268 : bigint Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
             [|(Iterable.t_to_js bigint_to_js x268)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t)
      =
      fun (x270 : t) ->
        fun ~buffer:(x271 : ArrayBuffer.t) ->
          fun ?byteOffset:(x272 : int option) ->
            fun ?length:(x273 : int option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
                     (let x274 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x274 "push" [|(t_to_js x270)|]);
                      ignore
                        (Ojs.call x274 "push" [|(ArrayBuffer.t_to_js x271)|]);
                      (match x272 with
                       | Some x276 ->
                           ignore
                             (Ojs.call x274 "push" [|(Ojs.int_to_js x276)|])
                       | None -> ());
                      (match x273 with
                       | Some x275 ->
                           ignore
                             (Ojs.call x274 "push" [|(Ojs.int_to_js x275)|])
                       | None -> ());
                      x274))
    let (of_ : items:bigint list -> t) =
      fun ~items:(x277 : bigint list) ->
        t_of_js
          (let x280 = Ojs.get_prop_ascii Ojs.global "BigInt64Array" in
           Ojs.call (Ojs.get_prop_ascii x280 "of") "apply"
             [|x280;((let x278 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x279 : bigint) ->
                           ignore
                             (Ojs.call x278 "push" [|(bigint_to_js x279)|]))
                        x277;
                      x278))|])
    let (from : array:bigint Array.t -> t) =
      fun ~array:(x281 : bigint Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigInt64Array") "from"
             [|(Array.t_to_js bigint_to_js x281)|])
    let (from' :
      array:'U Array.t ->
        mapfn:(v:'U -> k:int -> bigint) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x283 : 'U Array.t) ->
        fun ~mapfn:(x284 : v:'U -> k:int -> bigint) ->
          fun ?thisArg:(x285 : any option) ->
            fun () ->
              t_of_js
                (let x291 = Ojs.get_prop_ascii Ojs.global "BigInt64Array" in
                 Ojs.call (Ojs.get_prop_ascii x291 "from") "apply"
                   [|x291;((let x286 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x286 "push"
                                 [|(Array.t_to_js Obj.magic x283)|]);
                            ignore
                              (Ojs.call x286 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x288 : Ojs.t) ->
                                         fun (x289 : Ojs.t) ->
                                           bigint_to_js
                                             (x284 ~v:(Obj.magic x288)
                                                ~k:(Ojs.int_of_js x289))))|]);
                            (match x285 with
                             | Some x287 ->
                                 ignore
                                   (Ojs.call x286 "push" [|(any_to_js x287)|])
                             | None -> ());
                            x286))|])
  end
module BigInt64ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x293 : Ojs.t) -> x293
    and t_to_js : t -> Ojs.t = fun (x292 : Ojs.t) -> x292
    let (get_prototype : t -> BigInt64Array.t) =
      fun (x294 : t) ->
        BigInt64Array.t_of_js (Ojs.get_prop_ascii (t_to_js x294) "prototype")
    let (create : t -> ?length:int -> unit -> BigInt64Array.t) =
      fun (x298 : t) ->
        fun ?length:(x295 : int option) ->
          fun () ->
            BigInt64Array.t_of_js
              (Ojs.new_obj_arr (t_to_js x298)
                 (let x296 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x295 with
                   | Some x297 ->
                       ignore (Ojs.call x296 "push" [|(Ojs.int_to_js x297)|])
                   | None -> ());
                  x296))
    let (create' : t -> array:bigint Iterable.t -> BigInt64Array.t) =
      fun (x301 : t) ->
        fun ~array:(x299 : bigint Iterable.t) ->
          BigInt64Array.t_of_js
            (Ojs.new_obj (t_to_js x301)
               [|(Iterable.t_to_js bigint_to_js x299)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> BigInt64Array.t)
      =
      fun (x308 : t) ->
        fun ~buffer:(x302 : ArrayBuffer.t) ->
          fun ?byteOffset:(x303 : int option) ->
            fun ?length:(x304 : int option) ->
              fun () ->
                BigInt64Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x308)
                     (let x305 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x305 "push" [|(ArrayBuffer.t_to_js x302)|]);
                      (match x303 with
                       | Some x307 ->
                           ignore
                             (Ojs.call x305 "push" [|(Ojs.int_to_js x307)|])
                       | None -> ());
                      (match x304 with
                       | Some x306 ->
                           ignore
                             (Ojs.call x305 "push" [|(Ojs.int_to_js x306)|])
                       | None -> ());
                      x305))
    let (get_bytes_per_element : t -> int) =
      fun (x309 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x309) "BYTES_PER_ELEMENT")
    let (of_ : t -> items:bigint list -> BigInt64Array.t) =
      fun (x313 : t) ->
        fun ~items:(x310 : bigint list) ->
          BigInt64Array.t_of_js
            (let x314 = t_to_js x313 in
             Ojs.call (Ojs.get_prop_ascii x314 "of") "apply"
               [|x314;((let x311 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x312 : bigint) ->
                             ignore
                               (Ojs.call x311 "push" [|(bigint_to_js x312)|]))
                          x310;
                        x311))|])
    let (from : t -> array:bigint Array.t -> BigInt64Array.t) =
      fun (x317 : t) ->
        fun ~array:(x315 : bigint Array.t) ->
          BigInt64Array.t_of_js
            (Ojs.call (t_to_js x317) "from"
               [|(Array.t_to_js bigint_to_js x315)|])
    let (from' :
      t ->
        array:'U Array.t ->
          mapfn:(v:'U -> k:int -> bigint) ->
            ?thisArg:any -> unit -> BigInt64Array.t)
      =
      fun (x326 : t) ->
        fun ~array:(x318 : 'U Array.t) ->
          fun ~mapfn:(x319 : v:'U -> k:int -> bigint) ->
            fun ?thisArg:(x320 : any option) ->
              fun () ->
                BigInt64Array.t_of_js
                  (let x327 = t_to_js x326 in
                   Ojs.call (Ojs.get_prop_ascii x327 "from") "apply"
                     [|x327;((let x321 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x321 "push"
                                   [|(Array.t_to_js Obj.magic x318)|]);
                              ignore
                                (Ojs.call x321 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x323 : Ojs.t) ->
                                           fun (x324 : Ojs.t) ->
                                             bigint_to_js
                                               (x319 ~v:(Obj.magic x323)
                                                  ~k:(Ojs.int_of_js x324))))|]);
                              (match x320 with
                               | Some x322 ->
                                   ignore
                                     (Ojs.call x321 "push"
                                        [|(any_to_js x322)|])
                               | None -> ());
                              x321))|])
  end
let (big_int64_array : BigInt64ArrayConstructor.t) =
  BigInt64ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "BigInt64Array")
module BigUint64Array =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x329 : Ojs.t) -> x329
    and t_to_js : t -> Ojs.t = fun (x328 : Ojs.t) -> x328
    let (get_bytes_per_element : t -> int) =
      fun (x330 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x330) "BYTES_PER_ELEMENT")
    let (get_buffer : t -> ArrayBuffer.t) =
      fun (x331 : t) ->
        ArrayBuffer.t_of_js (Ojs.get_prop_ascii (t_to_js x331) "buffer")
    let (get_byte_length : t -> int) =
      fun (x332 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x332) "byteLength")
    let (get_byte_offset : t -> int) =
      fun (x333 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x333) "byteOffset")
    let (copy_within :
      t -> target:int -> start:int -> ?end_:int -> unit -> t) =
      fun (x339 : t) ->
        fun ~target:(x334 : int) ->
          fun ~start:(x335 : int) ->
            fun ?end_:(x336 : int option) ->
              fun () ->
                t_of_js
                  (let x340 = t_to_js x339 in
                   Ojs.call (Ojs.get_prop_ascii x340 "copyWithin") "apply"
                     [|x340;((let x337 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x337 "push"
                                   [|(Ojs.int_to_js x334)|]);
                              ignore
                                (Ojs.call x337 "push"
                                   [|(Ojs.int_to_js x335)|]);
                              (match x336 with
                               | Some x338 ->
                                   ignore
                                     (Ojs.call x337 "push"
                                        [|(Ojs.int_to_js x338)|])
                               | None -> ());
                              x337))|])
    let (entries : t -> (int * bigint) IterableIterator.t) =
      fun (x341 : t) ->
        IterableIterator.t_of_js
          (fun (x342 : Ojs.t) ->
             let x343 = x342 in
             ((Ojs.int_of_js (Ojs.array_get x343 0)),
               (bigint_of_js (Ojs.array_get x343 1))))
          (Ojs.call (t_to_js x341) "entries" [||])
    let (every :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x351 : t) ->
        fun ~predicate:(x344 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x345 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x352 = t_to_js x351 in
                 Ojs.call (Ojs.get_prop_ascii x352 "every") "apply"
                   [|x352;((let x346 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x346 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x348 : Ojs.t) ->
                                         fun (x349 : Ojs.t) ->
                                           fun (x350 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x344
                                                  ~value:(bigint_of_js x348)
                                                  ~index:(Ojs.int_of_js x349)
                                                  ~array:(t_of_js x350))))|]);
                            (match x345 with
                             | Some x347 ->
                                 ignore
                                   (Ojs.call x346 "push" [|(any_to_js x347)|])
                             | None -> ());
                            x346))|])
    let (fill : t -> value:bigint -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x359 : t) ->
        fun ~value:(x353 : bigint) ->
          fun ?start:(x354 : int option) ->
            fun ?end_:(x355 : int option) ->
              fun () ->
                t_of_js
                  (let x360 = t_to_js x359 in
                   Ojs.call (Ojs.get_prop_ascii x360 "fill") "apply"
                     [|x360;((let x356 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x356 "push" [|(bigint_to_js x353)|]);
                              (match x354 with
                               | Some x358 ->
                                   ignore
                                     (Ojs.call x356 "push"
                                        [|(Ojs.int_to_js x358)|])
                               | None -> ());
                              (match x355 with
                               | Some x357 ->
                                   ignore
                                     (Ojs.call x356 "push"
                                        [|(Ojs.int_to_js x357)|])
                               | None -> ());
                              x356))|])
    let (filter :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> any) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x368 : t) ->
        fun ~predicate:(x361 : value:bigint -> index:int -> array:t -> any)
          ->
          fun ?thisArg:(x362 : any option) ->
            fun () ->
              t_of_js
                (let x369 = t_to_js x368 in
                 Ojs.call (Ojs.get_prop_ascii x369 "filter") "apply"
                   [|x369;((let x363 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x363 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x365 : Ojs.t) ->
                                         fun (x366 : Ojs.t) ->
                                           fun (x367 : Ojs.t) ->
                                             any_to_js
                                               (x361
                                                  ~value:(bigint_of_js x365)
                                                  ~index:(Ojs.int_of_js x366)
                                                  ~array:(t_of_js x367))))|]);
                            (match x362 with
                             | Some x364 ->
                                 ignore
                                   (Ojs.call x363 "push" [|(any_to_js x364)|])
                             | None -> ());
                            x363))|])
    let (find :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> bigint or_undefined)
      =
      fun (x377 : t) ->
        fun ~predicate:(x370 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x371 : any option) ->
            fun () ->
              or_undefined_of_js bigint_of_js
                (let x378 = t_to_js x377 in
                 Ojs.call (Ojs.get_prop_ascii x378 "find") "apply"
                   [|x378;((let x372 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x372 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x374 : Ojs.t) ->
                                         fun (x375 : Ojs.t) ->
                                           fun (x376 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x370
                                                  ~value:(bigint_of_js x374)
                                                  ~index:(Ojs.int_of_js x375)
                                                  ~array:(t_of_js x376))))|]);
                            (match x371 with
                             | Some x373 ->
                                 ignore
                                   (Ojs.call x372 "push" [|(any_to_js x373)|])
                             | None -> ());
                            x372))|])
    let (find_index :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> int)
      =
      fun (x387 : t) ->
        fun ~predicate:(x380 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x381 : any option) ->
            fun () ->
              Ojs.int_of_js
                (let x388 = t_to_js x387 in
                 Ojs.call (Ojs.get_prop_ascii x388 "findIndex") "apply"
                   [|x388;((let x382 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x382 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x384 : Ojs.t) ->
                                         fun (x385 : Ojs.t) ->
                                           fun (x386 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x380
                                                  ~value:(bigint_of_js x384)
                                                  ~index:(Ojs.int_of_js x385)
                                                  ~array:(t_of_js x386))))|]);
                            (match x381 with
                             | Some x383 ->
                                 ignore
                                   (Ojs.call x382 "push" [|(any_to_js x383)|])
                             | None -> ());
                            x382))|])
    let (for_each :
      t ->
        callbackfn:(value:bigint -> index:int -> array:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x396 : t) ->
        fun ~callbackfn:(x389 : value:bigint -> index:int -> array:t -> unit)
          ->
          fun ?thisArg:(x390 : any option) ->
            fun () ->
              ignore
                (let x397 = t_to_js x396 in
                 Ojs.call (Ojs.get_prop_ascii x397 "forEach") "apply"
                   [|x397;((let x391 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x391 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x393 : Ojs.t) ->
                                         fun (x394 : Ojs.t) ->
                                           fun (x395 : Ojs.t) ->
                                             x389 ~value:(bigint_of_js x393)
                                               ~index:(Ojs.int_of_js x394)
                                               ~array:(t_of_js x395)))|]);
                            (match x390 with
                             | Some x392 ->
                                 ignore
                                   (Ojs.call x391 "push" [|(any_to_js x392)|])
                             | None -> ());
                            x391))|])
    let (includes :
      t -> searchElement:bigint -> ?fromIndex:int -> unit -> bool) =
      fun (x402 : t) ->
        fun ~searchElement:(x398 : bigint) ->
          fun ?fromIndex:(x399 : int option) ->
            fun () ->
              Ojs.bool_of_js
                (let x403 = t_to_js x402 in
                 Ojs.call (Ojs.get_prop_ascii x403 "includes") "apply"
                   [|x403;((let x400 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x400 "push" [|(bigint_to_js x398)|]);
                            (match x399 with
                             | Some x401 ->
                                 ignore
                                   (Ojs.call x400 "push"
                                      [|(Ojs.int_to_js x401)|])
                             | None -> ());
                            x400))|])
    let (index_of :
      t -> searchElement:bigint -> ?fromIndex:int -> unit -> int) =
      fun (x408 : t) ->
        fun ~searchElement:(x404 : bigint) ->
          fun ?fromIndex:(x405 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x409 = t_to_js x408 in
                 Ojs.call (Ojs.get_prop_ascii x409 "indexOf") "apply"
                   [|x409;((let x406 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x406 "push" [|(bigint_to_js x404)|]);
                            (match x405 with
                             | Some x407 ->
                                 ignore
                                   (Ojs.call x406 "push"
                                      [|(Ojs.int_to_js x407)|])
                             | None -> ());
                            x406))|])
    let (join : t -> ?separator:string -> unit -> string) =
      fun (x413 : t) ->
        fun ?separator:(x410 : string option) ->
          fun () ->
            Ojs.string_of_js
              (let x414 = t_to_js x413 in
               Ojs.call (Ojs.get_prop_ascii x414 "join") "apply"
                 [|x414;((let x411 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x410 with
                           | Some x412 ->
                               ignore
                                 (Ojs.call x411 "push"
                                    [|(Ojs.string_to_js x412)|])
                           | None -> ());
                          x411))|])
    let (keys : t -> int IterableIterator.t) =
      fun (x415 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x415) "keys" [||])
    let (last_index_of :
      t -> searchElement:bigint -> ?fromIndex:int -> unit -> int) =
      fun (x421 : t) ->
        fun ~searchElement:(x417 : bigint) ->
          fun ?fromIndex:(x418 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x422 = t_to_js x421 in
                 Ojs.call (Ojs.get_prop_ascii x422 "lastIndexOf") "apply"
                   [|x422;((let x419 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x419 "push" [|(bigint_to_js x417)|]);
                            (match x418 with
                             | Some x420 ->
                                 ignore
                                   (Ojs.call x419 "push"
                                      [|(Ojs.int_to_js x420)|])
                             | None -> ());
                            x419))|])
    let (get_length : t -> int) =
      fun (x423 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x423) "length")
    let (map :
      t ->
        callbackfn:(value:bigint -> index:int -> array:t -> bigint) ->
          ?thisArg:any -> unit -> t)
      =
      fun (x431 : t) ->
        fun
          ~callbackfn:(x424 : value:bigint -> index:int -> array:t -> bigint)
          ->
          fun ?thisArg:(x425 : any option) ->
            fun () ->
              t_of_js
                (let x432 = t_to_js x431 in
                 Ojs.call (Ojs.get_prop_ascii x432 "map") "apply"
                   [|x432;((let x426 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x426 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x428 : Ojs.t) ->
                                         fun (x429 : Ojs.t) ->
                                           fun (x430 : Ojs.t) ->
                                             bigint_to_js
                                               (x424
                                                  ~value:(bigint_of_js x428)
                                                  ~index:(Ojs.int_of_js x429)
                                                  ~array:(t_of_js x430))))|]);
                            (match x425 with
                             | Some x427 ->
                                 ignore
                                   (Ojs.call x426 "push" [|(any_to_js x427)|])
                             | None -> ());
                            x426))|])
    let (reduce :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> bigint)
          -> bigint)
      =
      fun (x438 : t) ->
        fun
          ~callbackfn:(x433 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x438) "reduce"
               [|(Ojs.fun_to_js 4
                    (fun (x434 : Ojs.t) ->
                       fun (x435 : Ojs.t) ->
                         fun (x436 : Ojs.t) ->
                           fun (x437 : Ojs.t) ->
                             bigint_to_js
                               (x433 ~previousValue:(bigint_of_js x434)
                                  ~currentValue:(bigint_of_js x435)
                                  ~currentIndex:(Ojs.int_of_js x436)
                                  ~array:(t_of_js x437))))|])
    let (reduce' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x445 : t) ->
        fun
          ~callbackfn:(x439 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x444 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x445) "reduce"
                 [|(Ojs.fun_to_js 4
                      (fun (x440 : Ojs.t) ->
                         fun (x441 : Ojs.t) ->
                           fun (x442 : Ojs.t) ->
                             fun (x443 : Ojs.t) ->
                               Obj.magic
                                 (x439 ~previousValue:(Obj.magic x440)
                                    ~currentValue:(bigint_of_js x441)
                                    ~currentIndex:(Ojs.int_of_js x442)
                                    ~array:(t_of_js x443))));(Obj.magic x444)|])
    let (reduce_right :
      t ->
        callbackfn:(previousValue:bigint ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> bigint)
          -> bigint)
      =
      fun (x451 : t) ->
        fun
          ~callbackfn:(x446 :
                        previousValue:bigint ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> bigint)
          ->
          bigint_of_js
            (Ojs.call (t_to_js x451) "reduceRight"
               [|(Ojs.fun_to_js 4
                    (fun (x447 : Ojs.t) ->
                       fun (x448 : Ojs.t) ->
                         fun (x449 : Ojs.t) ->
                           fun (x450 : Ojs.t) ->
                             bigint_to_js
                               (x446 ~previousValue:(bigint_of_js x447)
                                  ~currentValue:(bigint_of_js x448)
                                  ~currentIndex:(Ojs.int_of_js x449)
                                  ~array:(t_of_js x450))))|])
    let (reduce_right' :
      t ->
        callbackfn:(previousValue:'U ->
                      currentValue:bigint ->
                        currentIndex:int -> array:t -> 'U)
          -> initialValue:'U -> 'U)
      =
      fun (x458 : t) ->
        fun
          ~callbackfn:(x452 :
                        previousValue:'U ->
                          currentValue:bigint ->
                            currentIndex:int -> array:t -> 'U)
          ->
          fun ~initialValue:(x457 : 'U) ->
            Obj.magic
              (Ojs.call (t_to_js x458) "reduceRight"
                 [|(Ojs.fun_to_js 4
                      (fun (x453 : Ojs.t) ->
                         fun (x454 : Ojs.t) ->
                           fun (x455 : Ojs.t) ->
                             fun (x456 : Ojs.t) ->
                               Obj.magic
                                 (x452 ~previousValue:(Obj.magic x453)
                                    ~currentValue:(bigint_of_js x454)
                                    ~currentIndex:(Ojs.int_of_js x455)
                                    ~array:(t_of_js x456))));(Obj.magic x457)|])
    let (reverse : t -> t) =
      fun (x459 : t) -> t_of_js (Ojs.call (t_to_js x459) "reverse" [||])
    let (set : t -> array:bigint Array.t -> ?offset:int -> unit -> unit) =
      fun (x465 : t) ->
        fun ~array:(x460 : bigint Array.t) ->
          fun ?offset:(x461 : int option) ->
            fun () ->
              ignore
                (let x466 = t_to_js x465 in
                 Ojs.call (Ojs.get_prop_ascii x466 "set") "apply"
                   [|x466;((let x462 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x462 "push"
                                 [|(Array.t_to_js bigint_to_js x460)|]);
                            (match x461 with
                             | Some x463 ->
                                 ignore
                                   (Ojs.call x462 "push"
                                      [|(Ojs.int_to_js x463)|])
                             | None -> ());
                            x462))|])
    let (slice : t -> ?start:int -> ?end_:int -> unit -> t) =
      fun (x472 : t) ->
        fun ?start:(x467 : int option) ->
          fun ?end_:(x468 : int option) ->
            fun () ->
              t_of_js
                (let x473 = t_to_js x472 in
                 Ojs.call (Ojs.get_prop_ascii x473 "slice") "apply"
                   [|x473;((let x469 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x467 with
                             | Some x471 ->
                                 ignore
                                   (Ojs.call x469 "push"
                                      [|(Ojs.int_to_js x471)|])
                             | None -> ());
                            (match x468 with
                             | Some x470 ->
                                 ignore
                                   (Ojs.call x469 "push"
                                      [|(Ojs.int_to_js x470)|])
                             | None -> ());
                            x469))|])
    let (some :
      t ->
        predicate:(value:bigint -> index:int -> array:t -> bool) ->
          ?thisArg:any -> unit -> bool)
      =
      fun (x481 : t) ->
        fun ~predicate:(x474 : value:bigint -> index:int -> array:t -> bool)
          ->
          fun ?thisArg:(x475 : any option) ->
            fun () ->
              Ojs.bool_of_js
                (let x482 = t_to_js x481 in
                 Ojs.call (Ojs.get_prop_ascii x482 "some") "apply"
                   [|x482;((let x476 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x476 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x478 : Ojs.t) ->
                                         fun (x479 : Ojs.t) ->
                                           fun (x480 : Ojs.t) ->
                                             Ojs.bool_to_js
                                               (x474
                                                  ~value:(bigint_of_js x478)
                                                  ~index:(Ojs.int_of_js x479)
                                                  ~array:(t_of_js x480))))|]);
                            (match x475 with
                             | Some x477 ->
                                 ignore
                                   (Ojs.call x476 "push" [|(any_to_js x477)|])
                             | None -> ());
                            x476))|])
    let (sort :
      t -> ?compareFn:(a:bigint -> b:bigint -> bigint or_number) -> unit -> t)
      =
      fun (x489 : t) ->
        fun
          ?compareFn:(x483 :
                       (a:bigint -> b:bigint -> bigint or_number) option)
          ->
          fun () ->
            t_of_js
              (let x490 = t_to_js x489 in
               Ojs.call (Ojs.get_prop_ascii x490 "sort") "apply"
                 [|x490;((let x484 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x483 with
                           | Some x485 ->
                               ignore
                                 (Ojs.call x484 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x486 : Ojs.t) ->
                                            fun (x487 : Ojs.t) ->
                                              or_number_to_js bigint_to_js
                                                (x485 ~a:(bigint_of_js x486)
                                                   ~b:(bigint_of_js x487))))|])
                           | None -> ());
                          x484))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x496 : t) ->
        fun ?begin_:(x491 : int option) ->
          fun ?end_:(x492 : int option) ->
            fun () ->
              t_of_js
                (let x497 = t_to_js x496 in
                 Ojs.call (Ojs.get_prop_ascii x497 "subarray") "apply"
                   [|x497;((let x493 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x491 with
                             | Some x495 ->
                                 ignore
                                   (Ojs.call x493 "push"
                                      [|(Ojs.int_to_js x495)|])
                             | None -> ());
                            (match x492 with
                             | Some x494 ->
                                 ignore
                                   (Ojs.call x493 "push"
                                      [|(Ojs.int_to_js x494)|])
                             | None -> ());
                            x493))|])
    let (to_locale_string : t -> string) =
      fun (x498 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x498) "toLocaleString" [||])
    let (to_string : t -> string) =
      fun (x499 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x499) "toString" [||])
    let (value_of : t -> t) =
      fun (x500 : t) -> t_of_js (Ojs.call (t_to_js x500) "valueOf" [||])
    let (values : t -> bigint IterableIterator.t) =
      fun (x501 : t) ->
        IterableIterator.t_of_js bigint_of_js
          (Ojs.call (t_to_js x501) "values" [||])
    let (get : t -> int -> bigint) =
      fun (x503 : t) ->
        fun (x504 : int) -> bigint_of_js (Ojs.array_get (t_to_js x503) x504)
    let (set : t -> int -> bigint -> unit) =
      fun (x505 : t) ->
        fun (x506 : int) ->
          fun (x507 : bigint) ->
            Ojs.array_set (t_to_js x505) x506 (bigint_to_js x507)
    let (create : ?length:int -> unit -> t) =
      fun ?length:(x508 : int option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
               (let x509 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x508 with
                 | Some x510 ->
                     ignore (Ojs.call x509 "push" [|(Ojs.int_to_js x510)|])
                 | None -> ());
                x509))
    let (create' : array:bigint Iterable.t -> t) =
      fun ~array:(x511 : bigint Iterable.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
             [|(Iterable.t_to_js bigint_to_js x511)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t -> ?byteOffset:int -> ?length:int -> unit -> t)
      =
      fun (x513 : t) ->
        fun ~buffer:(x514 : ArrayBuffer.t) ->
          fun ?byteOffset:(x515 : int option) ->
            fun ?length:(x516 : int option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
                     (let x517 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x517 "push" [|(t_to_js x513)|]);
                      ignore
                        (Ojs.call x517 "push" [|(ArrayBuffer.t_to_js x514)|]);
                      (match x515 with
                       | Some x519 ->
                           ignore
                             (Ojs.call x517 "push" [|(Ojs.int_to_js x519)|])
                       | None -> ());
                      (match x516 with
                       | Some x518 ->
                           ignore
                             (Ojs.call x517 "push" [|(Ojs.int_to_js x518)|])
                       | None -> ());
                      x517))
    let (of_ : items:bigint list -> t) =
      fun ~items:(x520 : bigint list) ->
        t_of_js
          (let x523 = Ojs.get_prop_ascii Ojs.global "BigUint64Array" in
           Ojs.call (Ojs.get_prop_ascii x523 "of") "apply"
             [|x523;((let x521 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x522 : bigint) ->
                           ignore
                             (Ojs.call x521 "push" [|(bigint_to_js x522)|]))
                        x520;
                      x521))|])
    let (from : array:bigint Array.t -> t) =
      fun ~array:(x524 : bigint Array.t) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "BigUint64Array") "from"
             [|(Array.t_to_js bigint_to_js x524)|])
    let (from' :
      array:'U Array.t ->
        mapfn:(v:'U -> k:int -> bigint) -> ?thisArg:any -> unit -> t)
      =
      fun ~array:(x526 : 'U Array.t) ->
        fun ~mapfn:(x527 : v:'U -> k:int -> bigint) ->
          fun ?thisArg:(x528 : any option) ->
            fun () ->
              t_of_js
                (let x534 = Ojs.get_prop_ascii Ojs.global "BigUint64Array" in
                 Ojs.call (Ojs.get_prop_ascii x534 "from") "apply"
                   [|x534;((let x529 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x529 "push"
                                 [|(Array.t_to_js Obj.magic x526)|]);
                            ignore
                              (Ojs.call x529 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x531 : Ojs.t) ->
                                         fun (x532 : Ojs.t) ->
                                           bigint_to_js
                                             (x527 ~v:(Obj.magic x531)
                                                ~k:(Ojs.int_of_js x532))))|]);
                            (match x528 with
                             | Some x530 ->
                                 ignore
                                   (Ojs.call x529 "push" [|(any_to_js x530)|])
                             | None -> ());
                            x529))|])
  end
module BigUint64ArrayConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x536 : Ojs.t) -> x536
    and t_to_js : t -> Ojs.t = fun (x535 : Ojs.t) -> x535
    let (get_prototype : t -> BigUint64Array.t) =
      fun (x537 : t) ->
        BigUint64Array.t_of_js
          (Ojs.get_prop_ascii (t_to_js x537) "prototype")
    let (create : t -> ?length:int -> unit -> BigUint64Array.t) =
      fun (x541 : t) ->
        fun ?length:(x538 : int option) ->
          fun () ->
            BigUint64Array.t_of_js
              (Ojs.new_obj_arr (t_to_js x541)
                 (let x539 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x538 with
                   | Some x540 ->
                       ignore (Ojs.call x539 "push" [|(Ojs.int_to_js x540)|])
                   | None -> ());
                  x539))
    let (create' : t -> array:bigint Iterable.t -> BigUint64Array.t) =
      fun (x544 : t) ->
        fun ~array:(x542 : bigint Iterable.t) ->
          BigUint64Array.t_of_js
            (Ojs.new_obj (t_to_js x544)
               [|(Iterable.t_to_js bigint_to_js x542)|])
    let (create'' :
      t ->
        buffer:ArrayBuffer.t ->
          ?byteOffset:int -> ?length:int -> unit -> BigUint64Array.t)
      =
      fun (x551 : t) ->
        fun ~buffer:(x545 : ArrayBuffer.t) ->
          fun ?byteOffset:(x546 : int option) ->
            fun ?length:(x547 : int option) ->
              fun () ->
                BigUint64Array.t_of_js
                  (Ojs.new_obj_arr (t_to_js x551)
                     (let x548 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x548 "push" [|(ArrayBuffer.t_to_js x545)|]);
                      (match x546 with
                       | Some x550 ->
                           ignore
                             (Ojs.call x548 "push" [|(Ojs.int_to_js x550)|])
                       | None -> ());
                      (match x547 with
                       | Some x549 ->
                           ignore
                             (Ojs.call x548 "push" [|(Ojs.int_to_js x549)|])
                       | None -> ());
                      x548))
    let (get_bytes_per_element : t -> int) =
      fun (x552 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x552) "BYTES_PER_ELEMENT")
    let (of_ : t -> items:bigint list -> BigUint64Array.t) =
      fun (x556 : t) ->
        fun ~items:(x553 : bigint list) ->
          BigUint64Array.t_of_js
            (let x557 = t_to_js x556 in
             Ojs.call (Ojs.get_prop_ascii x557 "of") "apply"
               [|x557;((let x554 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        List.iter
                          (fun (x555 : bigint) ->
                             ignore
                               (Ojs.call x554 "push" [|(bigint_to_js x555)|]))
                          x553;
                        x554))|])
    let (from : t -> array:bigint Array.t -> BigUint64Array.t) =
      fun (x560 : t) ->
        fun ~array:(x558 : bigint Array.t) ->
          BigUint64Array.t_of_js
            (Ojs.call (t_to_js x560) "from"
               [|(Array.t_to_js bigint_to_js x558)|])
    let (from' :
      t ->
        array:'U Array.t ->
          mapfn:(v:'U -> k:int -> bigint) ->
            ?thisArg:any -> unit -> BigUint64Array.t)
      =
      fun (x569 : t) ->
        fun ~array:(x561 : 'U Array.t) ->
          fun ~mapfn:(x562 : v:'U -> k:int -> bigint) ->
            fun ?thisArg:(x563 : any option) ->
              fun () ->
                BigUint64Array.t_of_js
                  (let x570 = t_to_js x569 in
                   Ojs.call (Ojs.get_prop_ascii x570 "from") "apply"
                     [|x570;((let x564 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x564 "push"
                                   [|(Array.t_to_js Obj.magic x561)|]);
                              ignore
                                (Ojs.call x564 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x566 : Ojs.t) ->
                                           fun (x567 : Ojs.t) ->
                                             bigint_to_js
                                               (x562 ~v:(Obj.magic x566)
                                                  ~k:(Ojs.int_of_js x567))))|]);
                              (match x563 with
                               | Some x565 ->
                                   ignore
                                     (Ojs.call x564 "push"
                                        [|(any_to_js x565)|])
                               | None -> ());
                              x564))|])
  end
let (big_uint64_array : BigUint64ArrayConstructor.t) =
  BigUint64ArrayConstructor.t_of_js
    (Ojs.get_prop_ascii Ojs.global "BigUint64Array")
module DataView =
  struct
    include struct include DataView end
    let (get_big_int64 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> bigint) =
      fun (x575 : t) ->
        fun ~byteOffset:(x571 : int) ->
          fun ?littleEndian:(x572 : bool option) ->
            fun () ->
              bigint_of_js
                (let x576 = t_to_js x575 in
                 Ojs.call (Ojs.get_prop_ascii x576 "getBigInt64") "apply"
                   [|x576;((let x573 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x573 "push" [|(Ojs.int_to_js x571)|]);
                            (match x572 with
                             | Some x574 ->
                                 ignore
                                   (Ojs.call x573 "push"
                                      [|(Ojs.bool_to_js x574)|])
                             | None -> ());
                            x573))|])
    let (get_big_uint64 :
      t -> byteOffset:int -> ?littleEndian:bool -> unit -> bigint) =
      fun (x581 : t) ->
        fun ~byteOffset:(x577 : int) ->
          fun ?littleEndian:(x578 : bool option) ->
            fun () ->
              bigint_of_js
                (let x582 = t_to_js x581 in
                 Ojs.call (Ojs.get_prop_ascii x582 "getBigUint64") "apply"
                   [|x582;((let x579 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x579 "push" [|(Ojs.int_to_js x577)|]);
                            (match x578 with
                             | Some x580 ->
                                 ignore
                                   (Ojs.call x579 "push"
                                      [|(Ojs.bool_to_js x580)|])
                             | None -> ());
                            x579))|])
    let (set_big_int64 :
      t ->
        byteOffset:int -> value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x588 : t) ->
        fun ~byteOffset:(x583 : int) ->
          fun ~value:(x584 : bigint) ->
            fun ?littleEndian:(x585 : bool option) ->
              fun () ->
                ignore
                  (let x589 = t_to_js x588 in
                   Ojs.call (Ojs.get_prop_ascii x589 "setBigInt64") "apply"
                     [|x589;((let x586 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x586 "push"
                                   [|(Ojs.int_to_js x583)|]);
                              ignore
                                (Ojs.call x586 "push" [|(bigint_to_js x584)|]);
                              (match x585 with
                               | Some x587 ->
                                   ignore
                                     (Ojs.call x586 "push"
                                        [|(Ojs.bool_to_js x587)|])
                               | None -> ());
                              x586))|])
    let (set_big_uint64 :
      t ->
        byteOffset:int -> value:bigint -> ?littleEndian:bool -> unit -> unit)
      =
      fun (x595 : t) ->
        fun ~byteOffset:(x590 : int) ->
          fun ~value:(x591 : bigint) ->
            fun ?littleEndian:(x592 : bool option) ->
              fun () ->
                ignore
                  (let x596 = t_to_js x595 in
                   Ojs.call (Ojs.get_prop_ascii x596 "setBigUint64") "apply"
                     [|x596;((let x593 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x593 "push"
                                   [|(Ojs.int_to_js x590)|]);
                              ignore
                                (Ojs.call x593 "push" [|(bigint_to_js x591)|]);
                              (match x592 with
                               | Some x594 ->
                                   ignore
                                     (Ojs.call x593 "push"
                                        [|(Ojs.bool_to_js x594)|])
                               | None -> ());
                              x593))|])
  end
module Intl =
  struct
    include struct include Intl end
    module NumberFormat =
      struct
        include struct include NumberFormat end
        let (format : t -> value:bigint or_number -> string) =
          fun (x599 : t) ->
            fun ~value:(x597 : bigint or_number) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x599) "format"
                   [|(or_number_to_js bigint_to_js x597)|])
        let (resolved_options : t -> ResolvedNumberFormatOptions.t) =
          fun (x600 : t) ->
            ResolvedNumberFormatOptions.t_of_js
              (Ojs.call (t_to_js x600) "resolvedOptions" [||])
      end
  end
